
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020fa4  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001058  080210e0  080210e0  000310e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08022138  08022138  00032138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08022210  08022210  000401a4  2**0
                  CONTENTS
  5 .ARM          00000008  08022210  08022210  00032210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08022218  08022218  000401a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08022218  08022218  00032218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0802221c  0802221c  0003221c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001a4  20000000  08022220  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002118  200001a4  080223c4  000401a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022bc  080223c4  000422bc  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000401a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00051761  00000000  00000000  000401ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b5f1  00000000  00000000  0009192f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003988  00000000  00000000  0009cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000035a0  00000000  00000000  000a08a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d9d8  00000000  00000000  000a3e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000468ad  00000000  00000000  000d1820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d54f5  00000000  00000000  001180cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ed5c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f26c  00000000  00000000  001ed614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	200001a4 	.word	0x200001a4
 8000154:	00000000 	.word	0x00000000
 8000158:	080210c4 	.word	0x080210c4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	200001a8 	.word	0x200001a8
 8000174:	080210c4 	.word	0x080210c4

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmpun>:
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	d102      	bne.n	8000a44 <__aeabi_dcmpun+0x10>
 8000a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a42:	d10a      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__aeabi_dcmpun+0x20>
 8000a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dcmpun+0x26>
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0001 	mov.w	r0, #1
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2iz>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d215      	bcs.n	8000a96 <__aeabi_d2iz+0x36>
 8000a6a:	d511      	bpl.n	8000a90 <__aeabi_d2iz+0x30>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d912      	bls.n	8000a9c <__aeabi_d2iz+0x3c>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a86:	fa23 f002 	lsr.w	r0, r3, r2
 8000a8a:	bf18      	it	ne
 8000a8c:	4240      	negne	r0, r0
 8000a8e:	4770      	bx	lr
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	4770      	bx	lr
 8000a96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9a:	d105      	bne.n	8000aa8 <__aeabi_d2iz+0x48>
 8000a9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	bf08      	it	eq
 8000aa2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_fmul>:
 8000d6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d74:	bf1e      	ittt	ne
 8000d76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d7a:	ea92 0f0c 	teqne	r2, ip
 8000d7e:	ea93 0f0c 	teqne	r3, ip
 8000d82:	d06f      	beq.n	8000e64 <__aeabi_fmul+0xf8>
 8000d84:	441a      	add	r2, r3
 8000d86:	ea80 0c01 	eor.w	ip, r0, r1
 8000d8a:	0240      	lsls	r0, r0, #9
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d92:	d01e      	beq.n	8000dd2 <__aeabi_fmul+0x66>
 8000d94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da0:	fba0 3101 	umull	r3, r1, r0, r1
 8000da4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000da8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dac:	bf3e      	ittt	cc
 8000dae:	0049      	lslcc	r1, r1, #1
 8000db0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000db4:	005b      	lslcc	r3, r3, #1
 8000db6:	ea40 0001 	orr.w	r0, r0, r1
 8000dba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dbe:	2afd      	cmp	r2, #253	; 0xfd
 8000dc0:	d81d      	bhi.n	8000dfe <__aeabi_fmul+0x92>
 8000dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dca:	bf08      	it	eq
 8000dcc:	f020 0001 	biceq.w	r0, r0, #1
 8000dd0:	4770      	bx	lr
 8000dd2:	f090 0f00 	teq	r0, #0
 8000dd6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dda:	bf08      	it	eq
 8000ddc:	0249      	lsleq	r1, r1, #9
 8000dde:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000de2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000de6:	3a7f      	subs	r2, #127	; 0x7f
 8000de8:	bfc2      	ittt	gt
 8000dea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000df2:	4770      	bxgt	lr
 8000df4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000df8:	f04f 0300 	mov.w	r3, #0
 8000dfc:	3a01      	subs	r2, #1
 8000dfe:	dc5d      	bgt.n	8000ebc <__aeabi_fmul+0x150>
 8000e00:	f112 0f19 	cmn.w	r2, #25
 8000e04:	bfdc      	itt	le
 8000e06:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e0a:	4770      	bxle	lr
 8000e0c:	f1c2 0200 	rsb	r2, r2, #0
 8000e10:	0041      	lsls	r1, r0, #1
 8000e12:	fa21 f102 	lsr.w	r1, r1, r2
 8000e16:	f1c2 0220 	rsb	r2, r2, #32
 8000e1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e22:	f140 0000 	adc.w	r0, r0, #0
 8000e26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e2a:	bf08      	it	eq
 8000e2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e30:	4770      	bx	lr
 8000e32:	f092 0f00 	teq	r2, #0
 8000e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e3a:	bf02      	ittt	eq
 8000e3c:	0040      	lsleq	r0, r0, #1
 8000e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e42:	3a01      	subeq	r2, #1
 8000e44:	d0f9      	beq.n	8000e3a <__aeabi_fmul+0xce>
 8000e46:	ea40 000c 	orr.w	r0, r0, ip
 8000e4a:	f093 0f00 	teq	r3, #0
 8000e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0049      	lsleq	r1, r1, #1
 8000e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e5a:	3b01      	subeq	r3, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xe6>
 8000e5e:	ea41 010c 	orr.w	r1, r1, ip
 8000e62:	e78f      	b.n	8000d84 <__aeabi_fmul+0x18>
 8000e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	bf18      	it	ne
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d00a      	beq.n	8000e8a <__aeabi_fmul+0x11e>
 8000e74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e78:	bf18      	it	ne
 8000e7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	d1d8      	bne.n	8000e32 <__aeabi_fmul+0xc6>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	4770      	bx	lr
 8000e8a:	f090 0f00 	teq	r0, #0
 8000e8e:	bf17      	itett	ne
 8000e90:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e94:	4608      	moveq	r0, r1
 8000e96:	f091 0f00 	teqne	r1, #0
 8000e9a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e9e:	d014      	beq.n	8000eca <__aeabi_fmul+0x15e>
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	d101      	bne.n	8000eaa <__aeabi_fmul+0x13e>
 8000ea6:	0242      	lsls	r2, r0, #9
 8000ea8:	d10f      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eaa:	ea93 0f0c 	teq	r3, ip
 8000eae:	d103      	bne.n	8000eb8 <__aeabi_fmul+0x14c>
 8000eb0:	024b      	lsls	r3, r1, #9
 8000eb2:	bf18      	it	ne
 8000eb4:	4608      	movne	r0, r1
 8000eb6:	d108      	bne.n	8000eca <__aeabi_fmul+0x15e>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ec4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ec8:	4770      	bx	lr
 8000eca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ece:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ed2:	4770      	bx	lr

08000ed4 <__aeabi_fdiv>:
 8000ed4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ed8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000edc:	bf1e      	ittt	ne
 8000ede:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ee2:	ea92 0f0c 	teqne	r2, ip
 8000ee6:	ea93 0f0c 	teqne	r3, ip
 8000eea:	d069      	beq.n	8000fc0 <__aeabi_fdiv+0xec>
 8000eec:	eba2 0203 	sub.w	r2, r2, r3
 8000ef0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ef4:	0249      	lsls	r1, r1, #9
 8000ef6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000efa:	d037      	beq.n	8000f6c <__aeabi_fdiv+0x98>
 8000efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f00:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f04:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf38      	it	cc
 8000f10:	005b      	lslcc	r3, r3, #1
 8000f12:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f16:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	bf24      	itt	cs
 8000f1e:	1a5b      	subcs	r3, r3, r1
 8000f20:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f24:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f28:	bf24      	itt	cs
 8000f2a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f2e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f32:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f36:	bf24      	itt	cs
 8000f38:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f3c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f40:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f4a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	bf18      	it	ne
 8000f52:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f56:	d1e0      	bne.n	8000f1a <__aeabi_fdiv+0x46>
 8000f58:	2afd      	cmp	r2, #253	; 0xfd
 8000f5a:	f63f af50 	bhi.w	8000dfe <__aeabi_fmul+0x92>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f64:	bf08      	it	eq
 8000f66:	f020 0001 	biceq.w	r0, r0, #1
 8000f6a:	4770      	bx	lr
 8000f6c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f70:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f74:	327f      	adds	r2, #127	; 0x7f
 8000f76:	bfc2      	ittt	gt
 8000f78:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f7c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f80:	4770      	bxgt	lr
 8000f82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	3a01      	subs	r2, #1
 8000f8c:	e737      	b.n	8000dfe <__aeabi_fmul+0x92>
 8000f8e:	f092 0f00 	teq	r2, #0
 8000f92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f96:	bf02      	ittt	eq
 8000f98:	0040      	lsleq	r0, r0, #1
 8000f9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f9e:	3a01      	subeq	r2, #1
 8000fa0:	d0f9      	beq.n	8000f96 <__aeabi_fdiv+0xc2>
 8000fa2:	ea40 000c 	orr.w	r0, r0, ip
 8000fa6:	f093 0f00 	teq	r3, #0
 8000faa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0049      	lsleq	r1, r1, #1
 8000fb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fb6:	3b01      	subeq	r3, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xda>
 8000fba:	ea41 010c 	orr.w	r1, r1, ip
 8000fbe:	e795      	b.n	8000eec <__aeabi_fdiv+0x18>
 8000fc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fc4:	ea92 0f0c 	teq	r2, ip
 8000fc8:	d108      	bne.n	8000fdc <__aeabi_fdiv+0x108>
 8000fca:	0242      	lsls	r2, r0, #9
 8000fcc:	f47f af7d 	bne.w	8000eca <__aeabi_fmul+0x15e>
 8000fd0:	ea93 0f0c 	teq	r3, ip
 8000fd4:	f47f af70 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e776      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fdc:	ea93 0f0c 	teq	r3, ip
 8000fe0:	d104      	bne.n	8000fec <__aeabi_fdiv+0x118>
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	f43f af4c 	beq.w	8000e80 <__aeabi_fmul+0x114>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e76e      	b.n	8000eca <__aeabi_fmul+0x15e>
 8000fec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff0:	bf18      	it	ne
 8000ff2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	d1ca      	bne.n	8000f8e <__aeabi_fdiv+0xba>
 8000ff8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ffc:	f47f af5c 	bne.w	8000eb8 <__aeabi_fmul+0x14c>
 8001000:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001004:	f47f af3c 	bne.w	8000e80 <__aeabi_fmul+0x114>
 8001008:	e75f      	b.n	8000eca <__aeabi_fmul+0x15e>
 800100a:	bf00      	nop

0800100c <__gesf2>:
 800100c:	f04f 3cff 	mov.w	ip, #4294967295
 8001010:	e006      	b.n	8001020 <__cmpsf2+0x4>
 8001012:	bf00      	nop

08001014 <__lesf2>:
 8001014:	f04f 0c01 	mov.w	ip, #1
 8001018:	e002      	b.n	8001020 <__cmpsf2+0x4>
 800101a:	bf00      	nop

0800101c <__cmpsf2>:
 800101c:	f04f 0c01 	mov.w	ip, #1
 8001020:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	bf18      	it	ne
 8001032:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001036:	d011      	beq.n	800105c <__cmpsf2+0x40>
 8001038:	b001      	add	sp, #4
 800103a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800103e:	bf18      	it	ne
 8001040:	ea90 0f01 	teqne	r0, r1
 8001044:	bf58      	it	pl
 8001046:	ebb2 0003 	subspl.w	r0, r2, r3
 800104a:	bf88      	it	hi
 800104c:	17c8      	asrhi	r0, r1, #31
 800104e:	bf38      	it	cc
 8001050:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001054:	bf18      	it	ne
 8001056:	f040 0001 	orrne.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001060:	d102      	bne.n	8001068 <__cmpsf2+0x4c>
 8001062:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001066:	d105      	bne.n	8001074 <__cmpsf2+0x58>
 8001068:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800106c:	d1e4      	bne.n	8001038 <__cmpsf2+0x1c>
 800106e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001072:	d0e1      	beq.n	8001038 <__cmpsf2+0x1c>
 8001074:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <__aeabi_cfrcmple>:
 800107c:	4684      	mov	ip, r0
 800107e:	4608      	mov	r0, r1
 8001080:	4661      	mov	r1, ip
 8001082:	e7ff      	b.n	8001084 <__aeabi_cfcmpeq>

08001084 <__aeabi_cfcmpeq>:
 8001084:	b50f      	push	{r0, r1, r2, r3, lr}
 8001086:	f7ff ffc9 	bl	800101c <__cmpsf2>
 800108a:	2800      	cmp	r0, #0
 800108c:	bf48      	it	mi
 800108e:	f110 0f00 	cmnmi.w	r0, #0
 8001092:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001094 <__aeabi_fcmpeq>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff fff4 	bl	8001084 <__aeabi_cfcmpeq>
 800109c:	bf0c      	ite	eq
 800109e:	2001      	moveq	r0, #1
 80010a0:	2000      	movne	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmplt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffea 	bl	8001084 <__aeabi_cfcmpeq>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmple>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffe0 	bl	8001084 <__aeabi_cfcmpeq>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpge>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffd2 	bl	800107c <__aeabi_cfrcmple>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpgt>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffc8 	bl	800107c <__aeabi_cfrcmple>
 80010ec:	bf34      	ite	cc
 80010ee:	2001      	movcc	r0, #1
 80010f0:	2000      	movcs	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_f2iz>:
 80010f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001100:	d30f      	bcc.n	8001122 <__aeabi_f2iz+0x2a>
 8001102:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001106:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110a:	d90d      	bls.n	8001128 <__aeabi_f2iz+0x30>
 800110c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001114:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001118:	fa23 f002 	lsr.w	r0, r3, r2
 800111c:	bf18      	it	ne
 800111e:	4240      	negne	r0, r0
 8001120:	4770      	bx	lr
 8001122:	f04f 0000 	mov.w	r0, #0
 8001126:	4770      	bx	lr
 8001128:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800112c:	d101      	bne.n	8001132 <__aeabi_f2iz+0x3a>
 800112e:	0242      	lsls	r2, r0, #9
 8001130:	d105      	bne.n	800113e <__aeabi_f2iz+0x46>
 8001132:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001136:	bf08      	it	eq
 8001138:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr

08001144 <__aeabi_f2uiz>:
 8001144:	0042      	lsls	r2, r0, #1
 8001146:	d20e      	bcs.n	8001166 <__aeabi_f2uiz+0x22>
 8001148:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800114c:	d30b      	bcc.n	8001166 <__aeabi_f2uiz+0x22>
 800114e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001152:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001156:	d409      	bmi.n	800116c <__aeabi_f2uiz+0x28>
 8001158:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800115c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2uiz+0x32>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d102      	bne.n	800117c <__aeabi_f2uiz+0x38>
 8001176:	f04f 30ff 	mov.w	r0, #4294967295
 800117a:	4770      	bx	lr
 800117c:	f04f 0000 	mov.w	r0, #0
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop

08001184 <__aeabi_uldivmod>:
 8001184:	b953      	cbnz	r3, 800119c <__aeabi_uldivmod+0x18>
 8001186:	b94a      	cbnz	r2, 800119c <__aeabi_uldivmod+0x18>
 8001188:	2900      	cmp	r1, #0
 800118a:	bf08      	it	eq
 800118c:	2800      	cmpeq	r0, #0
 800118e:	bf1c      	itt	ne
 8001190:	f04f 31ff 	movne.w	r1, #4294967295
 8001194:	f04f 30ff 	movne.w	r0, #4294967295
 8001198:	f000 b974 	b.w	8001484 <__aeabi_idiv0>
 800119c:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a4:	f000 f806 	bl	80011b4 <__udivmoddi4>
 80011a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b0:	b004      	add	sp, #16
 80011b2:	4770      	bx	lr

080011b4 <__udivmoddi4>:
 80011b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b8:	9e08      	ldr	r6, [sp, #32]
 80011ba:	460d      	mov	r5, r1
 80011bc:	4604      	mov	r4, r0
 80011be:	4688      	mov	r8, r1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d14d      	bne.n	8001260 <__udivmoddi4+0xac>
 80011c4:	428a      	cmp	r2, r1
 80011c6:	4694      	mov	ip, r2
 80011c8:	d968      	bls.n	800129c <__udivmoddi4+0xe8>
 80011ca:	fab2 f282 	clz	r2, r2
 80011ce:	b152      	cbz	r2, 80011e6 <__udivmoddi4+0x32>
 80011d0:	fa01 f302 	lsl.w	r3, r1, r2
 80011d4:	f1c2 0120 	rsb	r1, r2, #32
 80011d8:	fa20 f101 	lsr.w	r1, r0, r1
 80011dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011e0:	ea41 0803 	orr.w	r8, r1, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80011ea:	0c21      	lsrs	r1, r4, #16
 80011ec:	fbb8 fef5 	udiv	lr, r8, r5
 80011f0:	fa1f f78c 	uxth.w	r7, ip
 80011f4:	fb05 831e 	mls	r3, r5, lr, r8
 80011f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011fc:	fb0e f107 	mul.w	r1, lr, r7
 8001200:	4299      	cmp	r1, r3
 8001202:	d90b      	bls.n	800121c <__udivmoddi4+0x68>
 8001204:	eb1c 0303 	adds.w	r3, ip, r3
 8001208:	f10e 30ff 	add.w	r0, lr, #4294967295
 800120c:	f080 811e 	bcs.w	800144c <__udivmoddi4+0x298>
 8001210:	4299      	cmp	r1, r3
 8001212:	f240 811b 	bls.w	800144c <__udivmoddi4+0x298>
 8001216:	f1ae 0e02 	sub.w	lr, lr, #2
 800121a:	4463      	add	r3, ip
 800121c:	1a5b      	subs	r3, r3, r1
 800121e:	b2a4      	uxth	r4, r4
 8001220:	fbb3 f0f5 	udiv	r0, r3, r5
 8001224:	fb05 3310 	mls	r3, r5, r0, r3
 8001228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122c:	fb00 f707 	mul.w	r7, r0, r7
 8001230:	42a7      	cmp	r7, r4
 8001232:	d90a      	bls.n	800124a <__udivmoddi4+0x96>
 8001234:	eb1c 0404 	adds.w	r4, ip, r4
 8001238:	f100 33ff 	add.w	r3, r0, #4294967295
 800123c:	f080 8108 	bcs.w	8001450 <__udivmoddi4+0x29c>
 8001240:	42a7      	cmp	r7, r4
 8001242:	f240 8105 	bls.w	8001450 <__udivmoddi4+0x29c>
 8001246:	4464      	add	r4, ip
 8001248:	3802      	subs	r0, #2
 800124a:	1be4      	subs	r4, r4, r7
 800124c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001250:	2100      	movs	r1, #0
 8001252:	b11e      	cbz	r6, 800125c <__udivmoddi4+0xa8>
 8001254:	40d4      	lsrs	r4, r2
 8001256:	2300      	movs	r3, #0
 8001258:	e9c6 4300 	strd	r4, r3, [r6]
 800125c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001260:	428b      	cmp	r3, r1
 8001262:	d908      	bls.n	8001276 <__udivmoddi4+0xc2>
 8001264:	2e00      	cmp	r6, #0
 8001266:	f000 80ee 	beq.w	8001446 <__udivmoddi4+0x292>
 800126a:	2100      	movs	r1, #0
 800126c:	e9c6 0500 	strd	r0, r5, [r6]
 8001270:	4608      	mov	r0, r1
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f183 	clz	r1, r3
 800127a:	2900      	cmp	r1, #0
 800127c:	d14a      	bne.n	8001314 <__udivmoddi4+0x160>
 800127e:	42ab      	cmp	r3, r5
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd4>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80f9 	bhi.w	800147a <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb65 0303 	sbc.w	r3, r5, r3
 800128e:	2001      	movs	r0, #1
 8001290:	4698      	mov	r8, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e2      	beq.n	800125c <__udivmoddi4+0xa8>
 8001296:	e9c6 4800 	strd	r4, r8, [r6]
 800129a:	e7df      	b.n	800125c <__udivmoddi4+0xa8>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xec>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 8091 	bne.w	80013cc <__udivmoddi4+0x218>
 80012aa:	eba1 050c 	sub.w	r5, r1, ip
 80012ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012b2:	fa1f fe8c 	uxth.w	lr, ip
 80012b6:	2101      	movs	r1, #1
 80012b8:	fbb5 f3f7 	udiv	r3, r5, r7
 80012bc:	fb07 5013 	mls	r0, r7, r3, r5
 80012c0:	0c25      	lsrs	r5, r4, #16
 80012c2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012c6:	fb0e f003 	mul.w	r0, lr, r3
 80012ca:	42a8      	cmp	r0, r5
 80012cc:	d908      	bls.n	80012e0 <__udivmoddi4+0x12c>
 80012ce:	eb1c 0505 	adds.w	r5, ip, r5
 80012d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80012d6:	d202      	bcs.n	80012de <__udivmoddi4+0x12a>
 80012d8:	42a8      	cmp	r0, r5
 80012da:	f200 80cb 	bhi.w	8001474 <__udivmoddi4+0x2c0>
 80012de:	4643      	mov	r3, r8
 80012e0:	1a2d      	subs	r5, r5, r0
 80012e2:	b2a4      	uxth	r4, r4
 80012e4:	fbb5 f0f7 	udiv	r0, r5, r7
 80012e8:	fb07 5510 	mls	r5, r7, r0, r5
 80012ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012f0:	fb0e fe00 	mul.w	lr, lr, r0
 80012f4:	45a6      	cmp	lr, r4
 80012f6:	d908      	bls.n	800130a <__udivmoddi4+0x156>
 80012f8:	eb1c 0404 	adds.w	r4, ip, r4
 80012fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8001300:	d202      	bcs.n	8001308 <__udivmoddi4+0x154>
 8001302:	45a6      	cmp	lr, r4
 8001304:	f200 80bb 	bhi.w	800147e <__udivmoddi4+0x2ca>
 8001308:	4628      	mov	r0, r5
 800130a:	eba4 040e 	sub.w	r4, r4, lr
 800130e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001312:	e79e      	b.n	8001252 <__udivmoddi4+0x9e>
 8001314:	f1c1 0720 	rsb	r7, r1, #32
 8001318:	408b      	lsls	r3, r1
 800131a:	fa22 fc07 	lsr.w	ip, r2, r7
 800131e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001322:	fa20 f407 	lsr.w	r4, r0, r7
 8001326:	fa05 f301 	lsl.w	r3, r5, r1
 800132a:	431c      	orrs	r4, r3
 800132c:	40fd      	lsrs	r5, r7
 800132e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001332:	fa00 f301 	lsl.w	r3, r0, r1
 8001336:	fbb5 f8f9 	udiv	r8, r5, r9
 800133a:	0c20      	lsrs	r0, r4, #16
 800133c:	fa1f fe8c 	uxth.w	lr, ip
 8001340:	fb09 5518 	mls	r5, r9, r8, r5
 8001344:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001348:	fb08 f00e 	mul.w	r0, r8, lr
 800134c:	42a8      	cmp	r0, r5
 800134e:	fa02 f201 	lsl.w	r2, r2, r1
 8001352:	d90b      	bls.n	800136c <__udivmoddi4+0x1b8>
 8001354:	eb1c 0505 	adds.w	r5, ip, r5
 8001358:	f108 3aff 	add.w	sl, r8, #4294967295
 800135c:	f080 8088 	bcs.w	8001470 <__udivmoddi4+0x2bc>
 8001360:	42a8      	cmp	r0, r5
 8001362:	f240 8085 	bls.w	8001470 <__udivmoddi4+0x2bc>
 8001366:	f1a8 0802 	sub.w	r8, r8, #2
 800136a:	4465      	add	r5, ip
 800136c:	1a2d      	subs	r5, r5, r0
 800136e:	b2a4      	uxth	r4, r4
 8001370:	fbb5 f0f9 	udiv	r0, r5, r9
 8001374:	fb09 5510 	mls	r5, r9, r0, r5
 8001378:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800137c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001380:	45ae      	cmp	lr, r5
 8001382:	d908      	bls.n	8001396 <__udivmoddi4+0x1e2>
 8001384:	eb1c 0505 	adds.w	r5, ip, r5
 8001388:	f100 34ff 	add.w	r4, r0, #4294967295
 800138c:	d26c      	bcs.n	8001468 <__udivmoddi4+0x2b4>
 800138e:	45ae      	cmp	lr, r5
 8001390:	d96a      	bls.n	8001468 <__udivmoddi4+0x2b4>
 8001392:	3802      	subs	r0, #2
 8001394:	4465      	add	r5, ip
 8001396:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800139a:	fba0 9402 	umull	r9, r4, r0, r2
 800139e:	eba5 050e 	sub.w	r5, r5, lr
 80013a2:	42a5      	cmp	r5, r4
 80013a4:	46c8      	mov	r8, r9
 80013a6:	46a6      	mov	lr, r4
 80013a8:	d356      	bcc.n	8001458 <__udivmoddi4+0x2a4>
 80013aa:	d053      	beq.n	8001454 <__udivmoddi4+0x2a0>
 80013ac:	b15e      	cbz	r6, 80013c6 <__udivmoddi4+0x212>
 80013ae:	ebb3 0208 	subs.w	r2, r3, r8
 80013b2:	eb65 050e 	sbc.w	r5, r5, lr
 80013b6:	fa05 f707 	lsl.w	r7, r5, r7
 80013ba:	fa22 f301 	lsr.w	r3, r2, r1
 80013be:	40cd      	lsrs	r5, r1
 80013c0:	431f      	orrs	r7, r3
 80013c2:	e9c6 7500 	strd	r7, r5, [r6]
 80013c6:	2100      	movs	r1, #0
 80013c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013cc:	f1c2 0320 	rsb	r3, r2, #32
 80013d0:	fa20 f103 	lsr.w	r1, r0, r3
 80013d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80013d8:	fa25 f303 	lsr.w	r3, r5, r3
 80013dc:	4095      	lsls	r5, r2
 80013de:	430d      	orrs	r5, r1
 80013e0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80013e4:	fa1f fe8c 	uxth.w	lr, ip
 80013e8:	fbb3 f1f7 	udiv	r1, r3, r7
 80013ec:	fb07 3011 	mls	r0, r7, r1, r3
 80013f0:	0c2b      	lsrs	r3, r5, #16
 80013f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80013f6:	fb01 f00e 	mul.w	r0, r1, lr
 80013fa:	4298      	cmp	r0, r3
 80013fc:	fa04 f402 	lsl.w	r4, r4, r2
 8001400:	d908      	bls.n	8001414 <__udivmoddi4+0x260>
 8001402:	eb1c 0303 	adds.w	r3, ip, r3
 8001406:	f101 38ff 	add.w	r8, r1, #4294967295
 800140a:	d22f      	bcs.n	800146c <__udivmoddi4+0x2b8>
 800140c:	4298      	cmp	r0, r3
 800140e:	d92d      	bls.n	800146c <__udivmoddi4+0x2b8>
 8001410:	3902      	subs	r1, #2
 8001412:	4463      	add	r3, ip
 8001414:	1a1b      	subs	r3, r3, r0
 8001416:	b2ad      	uxth	r5, r5
 8001418:	fbb3 f0f7 	udiv	r0, r3, r7
 800141c:	fb07 3310 	mls	r3, r7, r0, r3
 8001420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001424:	fb00 f30e 	mul.w	r3, r0, lr
 8001428:	42ab      	cmp	r3, r5
 800142a:	d908      	bls.n	800143e <__udivmoddi4+0x28a>
 800142c:	eb1c 0505 	adds.w	r5, ip, r5
 8001430:	f100 38ff 	add.w	r8, r0, #4294967295
 8001434:	d216      	bcs.n	8001464 <__udivmoddi4+0x2b0>
 8001436:	42ab      	cmp	r3, r5
 8001438:	d914      	bls.n	8001464 <__udivmoddi4+0x2b0>
 800143a:	3802      	subs	r0, #2
 800143c:	4465      	add	r5, ip
 800143e:	1aed      	subs	r5, r5, r3
 8001440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001444:	e738      	b.n	80012b8 <__udivmoddi4+0x104>
 8001446:	4631      	mov	r1, r6
 8001448:	4630      	mov	r0, r6
 800144a:	e707      	b.n	800125c <__udivmoddi4+0xa8>
 800144c:	4686      	mov	lr, r0
 800144e:	e6e5      	b.n	800121c <__udivmoddi4+0x68>
 8001450:	4618      	mov	r0, r3
 8001452:	e6fa      	b.n	800124a <__udivmoddi4+0x96>
 8001454:	454b      	cmp	r3, r9
 8001456:	d2a9      	bcs.n	80013ac <__udivmoddi4+0x1f8>
 8001458:	ebb9 0802 	subs.w	r8, r9, r2
 800145c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001460:	3801      	subs	r0, #1
 8001462:	e7a3      	b.n	80013ac <__udivmoddi4+0x1f8>
 8001464:	4640      	mov	r0, r8
 8001466:	e7ea      	b.n	800143e <__udivmoddi4+0x28a>
 8001468:	4620      	mov	r0, r4
 800146a:	e794      	b.n	8001396 <__udivmoddi4+0x1e2>
 800146c:	4641      	mov	r1, r8
 800146e:	e7d1      	b.n	8001414 <__udivmoddi4+0x260>
 8001470:	46d0      	mov	r8, sl
 8001472:	e77b      	b.n	800136c <__udivmoddi4+0x1b8>
 8001474:	3b02      	subs	r3, #2
 8001476:	4465      	add	r5, ip
 8001478:	e732      	b.n	80012e0 <__udivmoddi4+0x12c>
 800147a:	4608      	mov	r0, r1
 800147c:	e709      	b.n	8001292 <__udivmoddi4+0xde>
 800147e:	4464      	add	r4, ip
 8001480:	3802      	subs	r0, #2
 8001482:	e742      	b.n	800130a <__udivmoddi4+0x156>

08001484 <__aeabi_idiv0>:
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop

08001488 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4313      	orrs	r3, r2
 800149e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80014a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014ce:	4013      	ands	r3, r2
 80014d0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_ADC_Init+0x94>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <MX_ADC_Init+0x98>)
 80014e4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_ADC_Init+0x94>)
 80014e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014ec:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <MX_ADC_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_ADC_Init+0x94>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_ADC_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_ADC_Init+0x94>)
 8001502:	2204      	movs	r2, #4
 8001504:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_ADC_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800150c:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_ADC_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_ADC_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_ADC_Init+0x94>)
 800151a:	2201      	movs	r2, #1
 800151c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_ADC_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_ADC_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_ADC_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_ADC_Init+0x94>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_ADC_Init+0x94>)
 800153c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001540:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_ADC_Init+0x94>)
 8001544:	2207      	movs	r2, #7
 8001546:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_ADC_Init+0x94>)
 800154a:	2207      	movs	r2, #7
 800154c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_ADC_Init+0x94>)
 8001550:	2200      	movs	r2, #0
 8001552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_ADC_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_ADC_Init+0x94>)
 800155e:	f003 ff25 	bl	80053ac <HAL_ADC_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001568:	f000 fdac 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200001c0 	.word	0x200001c0
 8001574:	40012400 	.word	0x40012400

08001578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <HAL_ADC_MspInit+0x24>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d103      	bne.n	8001592 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800158a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800158e:	f7ff ff7b 	bl	8001488 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40012400 	.word	0x40012400

080015a0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_ADC_MspDeInit+0x24>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d103      	bne.n	80015ba <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80015b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015b6:	f7ff ff7f 	bl	80014b8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012400 	.word	0x40012400

080015c8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <SYS_InitMeasurement+0x14>)
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <SYS_InitMeasurement+0x18>)
 80015d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200001c0 	.word	0x200001c0
 80015e0:	40012400 	.word	0x40012400

080015e4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <SYS_GetBatteryLevel+0x5c>)
 80015f4:	f000 f82a 	bl	800164c <ADC_ReadChannels>
 80015f8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	80fb      	strh	r3, [r7, #6]
 8001604:	e016      	b.n	8001634 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <SYS_GetBatteryLevel+0x60>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160e:	4293      	cmp	r3, r2
 8001610:	d00b      	beq.n	800162a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <SYS_GetBatteryLevel+0x60>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	f640 43e4 	movw	r3, #3300	; 0xce4
 800161c:	fb03 f202 	mul.w	r2, r3, r2
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	80fb      	strh	r3, [r7, #6]
 8001628:	e004      	b.n	8001634 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800162a:	4a07      	ldr	r2, [pc, #28]	; (8001648 <SYS_GetBatteryLevel+0x64>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001634:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	b4002000 	.word	0xb4002000
 8001644:	1fff75aa 	.word	0x1fff75aa
 8001648:	004c08d8 	.word	0x004c08d8

0800164c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001664:	f7ff ff3a 	bl	80014dc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001668:	481a      	ldr	r0, [pc, #104]	; (80016d4 <ADC_ReadChannels+0x88>)
 800166a:	f004 fcbe 	bl	8005fea <HAL_ADCEx_Calibration_Start>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001674:	f000 fd26 	bl	80020c4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	4619      	mov	r1, r3
 800168a:	4812      	ldr	r0, [pc, #72]	; (80016d4 <ADC_ReadChannels+0x88>)
 800168c:	f004 f9ca 	bl	8005a24 <HAL_ADC_ConfigChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001696:	f000 fd15 	bl	80020c4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <ADC_ReadChannels+0x88>)
 800169c:	f004 f8a6 	bl	80057ec <HAL_ADC_Start>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80016a6:	f000 fd0d 	bl	80020c4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80016aa:	f04f 31ff 	mov.w	r1, #4294967295
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016b0:	f004 f914 	bl	80058dc <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80016b4:	4807      	ldr	r0, [pc, #28]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016b6:	f004 f8df 	bl	8005878 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016bc:	f004 f9a5 	bl	8005a0a <HAL_ADC_GetValue>
 80016c0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <ADC_ReadChannels+0x88>)
 80016c4:	f004 f806 	bl	80056d4 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80016c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001c0 	.word	0x200001c0

080016d8 <LL_AHB1_GRP1_EnableClock>:
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4013      	ands	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016fc:	68fb      	ldr	r3, [r7, #12]
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800170c:	2004      	movs	r0, #4
 800170e:	f7ff ffe3 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff ffe0 	bl	80016d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2102      	movs	r1, #2
 800171c:	200b      	movs	r0, #11
 800171e:	f004 fe0a 	bl	8006336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001722:	200b      	movs	r0, #11
 8001724:	f004 fe21 	bl	800636a <HAL_NVIC_EnableIRQ>

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001742:	d311      	bcc.n	8001768 <FLASH_IF_Write+0x3c>
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <FLASH_IF_Write+0x48>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	029a      	lsls	r2, r3, #10
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <FLASH_IF_Write+0x4c>)
 800174c:	4013      	ands	r3, r2
 800174e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001752:	3b01      	subs	r3, #1
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4293      	cmp	r3, r2
 8001758:	d306      	bcc.n	8001768 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	68f8      	ldr	r0, [r7, #12]
 8001760:	f000 f85a 	bl	8001818 <FLASH_IF_INT_Write>
 8001764:	4603      	mov	r3, r0
 8001766:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001768:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	1fff75e0 	.word	0x1fff75e0
 8001778:	03fffc00 	.word	0x03fffc00

0800177c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001788:	23ff      	movs	r3, #255	; 0xff
 800178a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001792:	d311      	bcc.n	80017b8 <FLASH_IF_Read+0x3c>
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <FLASH_IF_Read+0x48>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	029a      	lsls	r2, r3, #10
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <FLASH_IF_Read+0x4c>)
 800179c:	4013      	ands	r3, r2
 800179e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017a2:	3b01      	subs	r3, #1
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d306      	bcc.n	80017b8 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f93a 	bl	8001a28 <FLASH_IF_INT_Read>
 80017b4:	4603      	mov	r3, r0
 80017b6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80017b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	1fff75e0 	.word	0x1fff75e0
 80017c8:	03fffc00 	.word	0x03fffc00

080017cc <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80017d6:	23ff      	movs	r3, #255	; 0xff
 80017d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017e0:	d310      	bcc.n	8001804 <FLASH_IF_Erase+0x38>
 80017e2:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <FLASH_IF_Erase+0x44>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	029a      	lsls	r2, r3, #10
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <FLASH_IF_Erase+0x48>)
 80017ea:	4013      	ands	r3, r2
 80017ec:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017f0:	3b01      	subs	r3, #1
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d305      	bcc.n	8001804 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f932 	bl	8001a64 <FLASH_IF_INT_Erase>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001804:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	1fff75e0 	.word	0x1fff75e0
 8001814:	03fffc00 	.word	0x03fffc00

08001818 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b090      	sub	sp, #64	; 0x40
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00c      	beq.n	8001856 <FLASH_IF_INT_Write+0x3e>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d009      	beq.n	8001856 <FLASH_IF_INT_Write+0x3e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	2b00      	cmp	r3, #0
 800184a:	d104      	bne.n	8001856 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001856:	f06f 0305 	mvn.w	r3, #5
 800185a:	e0da      	b.n	8001a12 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800185c:	f000 f992 	bl	8001b84 <FLASH_IF_INT_Clear_Error>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001866:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800186a:	2b00      	cmp	r3, #0
 800186c:	f040 80cf 	bne.w	8001a0e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001870:	f005 f9c6 	bl	8006c00 <HAL_FLASH_Unlock>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 80c6 	bne.w	8001a08 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800187c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800187e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001882:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <FLASH_IF_INT_Write+0x204>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	0299      	lsls	r1, r3, #10
 8001888:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <FLASH_IF_INT_Write+0x208>)
 800188a:	400b      	ands	r3, r1
 800188c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	0adb      	lsrs	r3, r3, #11
 8001898:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800189a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4413      	add	r3, r2
 80018a0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a5d      	ldr	r2, [pc, #372]	; (8001a1c <FLASH_IF_INT_Write+0x204>)
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	0291      	lsls	r1, r2, #10
 80018ac:	4a5c      	ldr	r2, [pc, #368]	; (8001a20 <FLASH_IF_INT_Write+0x208>)
 80018ae:	400a      	ands	r2, r1
 80018b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80018b4:	fb01 f202 	mul.w	r2, r1, r2
 80018b8:	1a9b      	subs	r3, r3, r2
 80018ba:	0ada      	lsrs	r2, r3, #11
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d905      	bls.n	80018d6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80018ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80018d0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018da:	e089      	b.n	80019f0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80018dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80018e2:	02db      	lsls	r3, r3, #11
 80018e4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80018e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f925 	bl	8001b38 <FLASH_IF_INT_IsEmpty>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d031      	beq.n	8001958 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80018fc:	23fa      	movs	r3, #250	; 0xfa
 80018fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001902:	e07e      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001904:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6939      	ldr	r1, [r7, #16]
 800190a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800190e:	4618      	mov	r0, r3
 8001910:	f000 f88a 	bl	8001a28 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001914:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800191e:	4413      	add	r3, r2
 8001920:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001924:	b292      	uxth	r2, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f01d fa68 	bl	801edfc <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f896 	bl	8001a64 <FLASH_IF_INT_Erase>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800193e:	23fe      	movs	r3, #254	; 0xfe
 8001940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001944:	e05d      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <FLASH_IF_INT_Write+0x20c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	e005      	b.n	8001964 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 800195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800195e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
 8001968:	e026      	b.n	80019b8 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800196a:	6a3a      	ldr	r2, [r7, #32]
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001976:	2001      	movs	r0, #1
 8001978:	f005 f8fe 	bl	8006b78 <HAL_FLASH_Program>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d113      	bne.n	80019aa <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	4413      	add	r3, r2
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	4299      	cmp	r1, r3
 8001994:	bf08      	it	eq
 8001996:	4290      	cmpeq	r0, r2
 8001998:	d003      	beq.n	80019a2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800199a:	23fc      	movs	r3, #252	; 0xfc
 800199c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80019a0:	e00e      	b.n	80019c0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	3308      	adds	r3, #8
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
 80019a8:	e003      	b.n	80019b2 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80019aa:	23fc      	movs	r3, #252	; 0xfc
 80019ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80019b0:	e006      	b.n	80019c0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	3308      	adds	r3, #8
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80019b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3d4      	bcc.n	800196a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80019c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11b      	bne.n	8001a00 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80019c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019cc:	4413      	add	r3, r2
 80019ce:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80019d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d4:	4413      	add	r3, r2
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e2:	bf28      	it	cs
 80019e4:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80019ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ec:	3301      	adds	r3, #1
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f4ff af6f 	bcc.w	80018dc <FLASH_IF_INT_Write+0xc4>
 80019fe:	e000      	b.n	8001a02 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001a00:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001a02:	f005 f91f 	bl	8006c44 <HAL_FLASH_Lock>
 8001a06:	e002      	b.n	8001a0e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a08:	23fb      	movs	r3, #251	; 0xfb
 8001a0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 8001a0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3740      	adds	r7, #64	; 0x40
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	1fff75e0 	.word	0x1fff75e0
 8001a20:	03fffc00 	.word	0x03fffc00
 8001a24:	20000224 	.word	0x20000224

08001a28 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <FLASH_IF_INT_Read+0x1c>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a44:	f06f 0305 	mvn.w	r3, #5
 8001a48:	e008      	b.n	8001a5c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f01d f9d2 	bl	801edfc <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001a84:	f06f 0305 	mvn.w	r3, #5
 8001a88:	e04e      	b.n	8001b28 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 8001a8a:	f000 f87b 	bl	8001b84 <FLASH_IF_INT_Clear_Error>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d144      	bne.n	8001b24 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001a9a:	f005 f8b1 	bl	8006c00 <HAL_FLASH_Unlock>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d13d      	bne.n	8001b20 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <FLASH_IF_INT_Erase+0xcc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0299      	lsls	r1, r3, #10
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <FLASH_IF_INT_Erase+0xd0>)
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001abc:	fb01 f303 	mul.w	r3, r1, r3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	0adb      	lsrs	r3, r3, #11
 8001ac4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <FLASH_IF_INT_Erase+0xcc>)
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	0291      	lsls	r1, r2, #10
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <FLASH_IF_INT_Erase+0xd0>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ae0:	fb01 f202 	mul.w	r2, r1, r2
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	0ada      	lsrs	r2, r3, #11
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	3301      	adds	r3, #1
 8001aee:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001af0:	f107 0214 	add.w	r2, r7, #20
 8001af4:	f107 0308 	add.w	r3, r7, #8
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 f982 	bl	8006e04 <HAL_FLASHEx_Erase>
 8001b00:	4603      	mov	r3, r0
 8001b02:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001b04:	7fbb      	ldrb	r3, [r7, #30]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001b0a:	7fbb      	ldrb	r3, [r7, #30]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d101      	bne.n	8001b14 <FLASH_IF_INT_Erase+0xb0>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e001      	b.n	8001b18 <FLASH_IF_INT_Erase+0xb4>
 8001b14:	f06f 0301 	mvn.w	r3, #1
 8001b18:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001b1a:	f005 f893 	bl	8006c44 <HAL_FLASH_Lock>
 8001b1e:	e001      	b.n	8001b24 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001b20:	23fb      	movs	r3, #251	; 0xfb
 8001b22:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	1fff75e0 	.word	0x1fff75e0
 8001b34:	03fffc00 	.word	0x03fffc00

08001b38 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	e011      	b.n	8001b70 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b56:	bf08      	it	eq
 8001b58:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001b5c:	d002      	beq.n	8001b64 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
      break;
 8001b62:	e009      	b.n	8001b78 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3308      	adds	r3, #8
 8001b68:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d3e9      	bcc.n	8001b4c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001b8a:	23fb      	movs	r3, #251	; 0xfb
 8001b8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001b8e:	f005 f837 	bl	8006c00 <HAL_FLASH_Unlock>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d110      	bne.n	8001bba <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001b9e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001ba6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001baa:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001bac:	f005 f84a 	bl	8006c44 <HAL_FLASH_Lock>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	58004000 	.word	0x58004000

08001bcc <LL_AHB2_GRP1_EnableClock>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff ffdb 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2002      	movs	r0, #2
 8001c18:	f7ff ffd8 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	2004      	movs	r0, #4
 8001c1e:	f7ff ffd5 	bl	8001bcc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001c28:	4821      	ldr	r0, [pc, #132]	; (8001cb0 <MX_GPIO_Init+0xb4>)
 8001c2a:	f005 fbed 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2120      	movs	r1, #32
 8001c32:	481f      	ldr	r0, [pc, #124]	; (8001cb0 <MX_GPIO_Init+0xb4>)
 8001c34:	f005 fbe8 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2131      	movs	r1, #49	; 0x31
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f005 fbe2 	bl	8007408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001c44:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001c48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c52:	2303      	movs	r3, #3
 8001c54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4815      	ldr	r0, [pc, #84]	; (8001cb0 <MX_GPIO_Init+0xb4>)
 8001c5c:	f005 f9a6 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001c60:	2331      	movs	r3, #49	; 0x31
 8001c62:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c78:	f005 f998 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <MX_GPIO_Init+0xb4>)
 8001c92:	f005 f98b 	bl	8006fac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2029      	movs	r0, #41	; 0x29
 8001c9c:	f004 fb4b 	bl	8006336 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ca0:	2029      	movs	r0, #41	; 0x29
 8001ca2:	f004 fb62 	bl	800636a <HAL_NVIC_EnableIRQ>

}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <LL_AHB2_GRP1_EnableClock>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <LL_APB1_GRP1_EnableClock>:
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d08:	68fb      	ldr	r3, [r7, #12]
}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d1a:	4a1c      	ldr	r2, [pc, #112]	; (8001d8c <MX_I2C2_Init+0x78>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d20:	4a1b      	ldr	r2, [pc, #108]	; (8001d90 <MX_I2C2_Init+0x7c>)
 8001d22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d36:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d42:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d4e:	480e      	ldr	r0, [pc, #56]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d50:	f005 fb8a 	bl	8007468 <HAL_I2C_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d5a:	f000 f9b3 	bl	80020c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4809      	ldr	r0, [pc, #36]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d62:	f006 f8d7 	bl	8007f14 <HAL_I2CEx_ConfigAnalogFilter>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d6c:	f000 f9aa 	bl	80020c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d70:	2100      	movs	r1, #0
 8001d72:	4805      	ldr	r0, [pc, #20]	; (8001d88 <MX_I2C2_Init+0x74>)
 8001d74:	f006 f918 	bl	8007fa8 <HAL_I2CEx_ConfigDigitalFilter>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d7e:	f000 f9a1 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000228 	.word	0x20000228
 8001d8c:	40005800 	.word	0x40005800
 8001d90:	20303e5d 	.word	0x20303e5d

08001d94 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b096      	sub	sp, #88	; 0x58
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2238      	movs	r2, #56	; 0x38
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f01f f97d 	bl	80210b4 <memset>
  if(i2cHandle->Instance==I2C2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a21      	ldr	r2, [pc, #132]	; (8001e44 <HAL_I2C_MspInit+0xb0>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d13b      	bne.n	8001e3c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dc8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 030c 	add.w	r3, r7, #12
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f007 fb02 	bl	80093dc <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dde:	f000 f971 	bl	80020c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff ff66 	bl	8001cb4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	2002      	movs	r0, #2
 8001dea:	f7ff ff63 	bl	8001cb4 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df4:	2312      	movs	r3, #18
 8001df6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e00:	2304      	movs	r3, #4
 8001e02:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0e:	f005 f8cd 	bl	8006fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e16:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e18:	2312      	movs	r3, #18
 8001e1a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e24:	2304      	movs	r3, #4
 8001e26:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_I2C_MspInit+0xb4>)
 8001e30:	f005 f8bc 	bl	8006fac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e34:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001e38:	f7ff ff54 	bl	8001ce4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3758      	adds	r7, #88	; 0x58
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40005800 	.word	0x40005800
 8001e48:	48000400 	.word	0x48000400

08001e4c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f023 0218 	bic.w	r2, r3, #24
 8001e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
	...

08001e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b0cb      	sub	sp, #300	; 0x12c
 8001e7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e7e:	f003 f8c3 	bl	8005008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e82:	f000 f8bb 	bl	8001ffc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e86:	f7ff feb9 	bl	8001bfc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001e8a:	f00a fe49 	bl	800cb20 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001e8e:	f7ff ff41 	bl	8001d14 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  EnvionmentSensors envSensors(&hi2c2);
 8001e92:	463b      	mov	r3, r7
 8001e94:	4951      	ldr	r1, [pc, #324]	; (8001fdc <main+0x164>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f002 ff7a 	bl	8004d90 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>
  float temperature = -99;
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <main+0x168>)
 8001e9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  float pressure = -99;
 8001ea2:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <main+0x168>)
 8001ea4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  float altitude = -99;
 8001ea8:	4b4d      	ldr	r3, [pc, #308]	; (8001fe0 <main+0x168>)
 8001eaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	temperature = envSensors.getTemperature();
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 ffbc 	bl	8004e2e <_ZN17EnvionmentSensors14getTemperatureEv>
 8001eb6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  	temperature *= 100;
 8001eba:	494a      	ldr	r1, [pc, #296]	; (8001fe4 <main+0x16c>)
 8001ebc:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001ec0:	f7fe ff54 	bl	8000d6c <__aeabi_fmul>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

  	pressure = envSensors.getPressure();
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 ffa1 	bl	8004e14 <_ZN17EnvionmentSensors11getPressureEv>
 8001ed2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
  	pressure *= 100;
 8001ed6:	4943      	ldr	r1, [pc, #268]	; (8001fe4 <main+0x16c>)
 8001ed8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001edc:	f7fe ff46 	bl	8000d6c <__aeabi_fmul>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  	altitude = envSensors.getAltitude(1021.56);
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	493f      	ldr	r1, [pc, #252]	; (8001fe8 <main+0x170>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 ffac 	bl	8004e48 <_ZN17EnvionmentSensors11getAltitudeEf>
 8001ef0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  	altitude *= 100;
 8001ef4:	493b      	ldr	r1, [pc, #236]	; (8001fe4 <main+0x16c>)
 8001ef6:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001efa:	f7fe ff37 	bl	8000d6c <__aeabi_fmul>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

  	APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%02d [C]\r\n", (int)temperature / 100, (int)temperature % 100);
 8001f04:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001f08:	f7ff f8f6 	bl	80010f8 <__aeabi_f2iz>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4a37      	ldr	r2, [pc, #220]	; (8001fec <main+0x174>)
 8001f10:	fb82 1203 	smull	r1, r2, r2, r3
 8001f14:	1152      	asrs	r2, r2, #5
 8001f16:	17db      	asrs	r3, r3, #31
 8001f18:	1ad4      	subs	r4, r2, r3
 8001f1a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001f1e:	f7ff f8eb 	bl	80010f8 <__aeabi_f2iz>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b31      	ldr	r3, [pc, #196]	; (8001fec <main+0x174>)
 8001f26:	fb83 1302 	smull	r1, r3, r3, r2
 8001f2a:	1159      	asrs	r1, r3, #5
 8001f2c:	17d3      	asrs	r3, r2, #31
 8001f2e:	1acb      	subs	r3, r1, r3
 8001f30:	2164      	movs	r1, #100	; 0x64
 8001f32:	fb01 f303 	mul.w	r3, r1, r3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	9400      	str	r4, [sp, #0]
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <main+0x178>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2100      	movs	r1, #0
 8001f42:	2002      	movs	r0, #2
 8001f44:	f01d fea2 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
  	APP_LOG(TS_ON, VLEVEL_M, "pressure: %d.%02d [Pa]\r\n", (int)pressure / 100, (int)pressure % 100);
 8001f48:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001f4c:	f7ff f8d4 	bl	80010f8 <__aeabi_f2iz>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a26      	ldr	r2, [pc, #152]	; (8001fec <main+0x174>)
 8001f54:	fb82 1203 	smull	r1, r2, r2, r3
 8001f58:	1152      	asrs	r2, r2, #5
 8001f5a:	17db      	asrs	r3, r3, #31
 8001f5c:	1ad4      	subs	r4, r2, r3
 8001f5e:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8001f62:	f7ff f8c9 	bl	80010f8 <__aeabi_f2iz>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <main+0x174>)
 8001f6a:	fb83 1302 	smull	r1, r3, r3, r2
 8001f6e:	1159      	asrs	r1, r3, #5
 8001f70:	17d3      	asrs	r3, r2, #31
 8001f72:	1acb      	subs	r3, r1, r3
 8001f74:	2164      	movs	r1, #100	; 0x64
 8001f76:	fb01 f303 	mul.w	r3, r1, r3
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	9400      	str	r4, [sp, #0]
 8001f80:	4b1c      	ldr	r3, [pc, #112]	; (8001ff4 <main+0x17c>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	2100      	movs	r1, #0
 8001f86:	2002      	movs	r0, #2
 8001f88:	f01d fe80 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
  	APP_LOG(TS_ON, VLEVEL_M, "altitude: %d.%02d [m?]\r\n", (int)altitude / 100, (int)altitude % 100);
 8001f8c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001f90:	f7ff f8b2 	bl	80010f8 <__aeabi_f2iz>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <main+0x174>)
 8001f98:	fb82 1203 	smull	r1, r2, r2, r3
 8001f9c:	1152      	asrs	r2, r2, #5
 8001f9e:	17db      	asrs	r3, r3, #31
 8001fa0:	1ad4      	subs	r4, r2, r3
 8001fa2:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8001fa6:	f7ff f8a7 	bl	80010f8 <__aeabi_f2iz>
 8001faa:	4602      	mov	r2, r0
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <main+0x174>)
 8001fae:	fb83 1302 	smull	r1, r3, r3, r2
 8001fb2:	1159      	asrs	r1, r3, #5
 8001fb4:	17d3      	asrs	r3, r2, #31
 8001fb6:	1acb      	subs	r3, r1, r3
 8001fb8:	2164      	movs	r1, #100	; 0x64
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	9400      	str	r4, [sp, #0]
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <main+0x180>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2100      	movs	r1, #0
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f01d fe5e 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
  	HAL_Delay(2000);
 8001fd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fd4:	f000 fb7a 	bl	80026cc <HAL_Delay>
  	temperature = envSensors.getTemperature();
 8001fd8:	e769      	b.n	8001eae <main+0x36>
 8001fda:	bf00      	nop
 8001fdc:	20000228 	.word	0x20000228
 8001fe0:	c2c60000 	.word	0xc2c60000
 8001fe4:	42c80000 	.word	0x42c80000
 8001fe8:	447f63d7 	.word	0x447f63d7
 8001fec:	51eb851f 	.word	0x51eb851f
 8001ff0:	080210e0 	.word	0x080210e0
 8001ff4:	080210f4 	.word	0x080210f4
 8001ff8:	08021110 	.word	0x08021110

08001ffc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b09a      	sub	sp, #104	; 0x68
 8002000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002002:	f107 0320 	add.w	r3, r7, #32
 8002006:	2248      	movs	r2, #72	; 0x48
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f01f f852 	bl	80210b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002010:	f107 0308 	add.w	r3, r7, #8
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
 8002020:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002022:	f006 f80d 	bl	8008040 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff ff10 	bl	8001e4c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <_Z18SystemClock_Configv+0xc4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002034:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <_Z18SystemClock_Configv+0xc4>)
 8002036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <_Z18SystemClock_Configv+0xc4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002048:	2324      	movs	r3, #36	; 0x24
 800204a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800204c:	2381      	movs	r3, #129	; 0x81
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002050:	2301      	movs	r3, #1
 8002052:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002054:	2300      	movs	r3, #0
 8002056:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002058:	23b0      	movs	r3, #176	; 0xb0
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800205c:	2300      	movs	r3, #0
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	4618      	mov	r0, r3
 8002066:	f006 fa95 	bl	8008594 <HAL_RCC_OscConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 800207a:	f000 f823 	bl	80020c4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800207e:	234f      	movs	r3, #79	; 0x4f
 8002080:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002096:	f107 0308 	add.w	r3, r7, #8
 800209a:	2102      	movs	r1, #2
 800209c:	4618      	mov	r0, r3
 800209e:	f006 fdfb 	bl	8008c98 <HAL_RCC_ClockConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf14      	ite	ne
 80020a8:	2301      	movne	r3, #1
 80020aa:	2300      	moveq	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80020b2:	f000 f807 	bl	80020c4 <Error_Handler>
  }
}
 80020b6:	bf00      	nop
 80020b8:	3768      	adds	r7, #104	; 0x68
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	58000400 	.word	0x58000400

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>

080020ce <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020e6:	bf00      	nop
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <LL_APB1_GRP1_EnableClock>:
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4313      	orrs	r3, r2
 8002104:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
	...

08002120 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8002126:	1d3b      	adds	r3, r7, #4
 8002128:	222c      	movs	r2, #44	; 0x2c
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f01e ffc1 	bl	80210b4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002132:	4b22      	ldr	r3, [pc, #136]	; (80021bc <MX_RTC_Init+0x9c>)
 8002134:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <MX_RTC_Init+0xa0>)
 8002136:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <MX_RTC_Init+0x9c>)
 800213a:	221f      	movs	r2, #31
 800213c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MX_RTC_Init+0x9c>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <MX_RTC_Init+0x9c>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <MX_RTC_Init+0x9c>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <MX_RTC_Init+0x9c>)
 8002152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002156:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_RTC_Init+0x9c>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_RTC_Init+0x9c>)
 8002160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002166:	4815      	ldr	r0, [pc, #84]	; (80021bc <MX_RTC_Init+0x9c>)
 8002168:	f007 fa52 	bl	8009610 <HAL_RTC_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8002172:	f7ff ffa7 	bl	80020c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8002176:	4811      	ldr	r0, [pc, #68]	; (80021bc <MX_RTC_Init+0x9c>)
 8002178:	f007 fd48 	bl	8009c0c <HAL_RTCEx_SetSSRU_IT>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8002182:	f7ff ff9f 	bl	80020c4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800218a:	2300      	movs	r3, #0
 800218c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002192:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002196:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	2200      	movs	r2, #0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4805      	ldr	r0, [pc, #20]	; (80021bc <MX_RTC_Init+0x9c>)
 80021a6:	f007 fab5 	bl	8009714 <HAL_RTC_SetAlarm_IT>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80021b0:	f7ff ff88 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	3730      	adds	r7, #48	; 0x30
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	2000027c 	.word	0x2000027c
 80021c0:	40002800 	.word	0x40002800

080021c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b090      	sub	sp, #64	; 0x40
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021cc:	f107 0308 	add.w	r3, r7, #8
 80021d0:	2238      	movs	r2, #56	; 0x38
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f01e ff6d 	bl	80210b4 <memset>
  if(rtcHandle->Instance==RTC)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_RTC_MspInit+0x74>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d125      	bne.n	8002230 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f0:	f107 0308 	add.w	r3, r7, #8
 80021f4:	4618      	mov	r0, r3
 80021f6:	f007 f8f1 	bl	80093dc <HAL_RCCEx_PeriphCLKConfig>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002200:	f7ff ff60 	bl	80020c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002204:	f7ff ff63 	bl	80020ce <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002208:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800220c:	f7ff ff6f 	bl	80020ee <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	2002      	movs	r0, #2
 8002216:	f004 f88e 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800221a:	2002      	movs	r0, #2
 800221c:	f004 f8a5 	bl	800636a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002220:	2200      	movs	r2, #0
 8002222:	2100      	movs	r1, #0
 8002224:	202a      	movs	r0, #42	; 0x2a
 8002226:	f004 f886 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800222a:	202a      	movs	r0, #42	; 0x2a
 800222c:	f004 f89d 	bl	800636a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002230:	bf00      	nop
 8002232:	3740      	adds	r7, #64	; 0x40
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40002800 	.word	0x40002800

0800223c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800224c:	e7fe      	b.n	800224c <NMI_Handler+0x4>

0800224e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002252:	e7fe      	b.n	8002252 <HardFault_Handler+0x4>

08002254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler+0x4>

0800225a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <BusFault_Handler+0x4>

08002260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <UsageFault_Handler+0x4>

08002266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr

0800228a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
	...

08002298 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800229e:	f007 fcf1 	bl	8009c84 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000027c 	.word	0x2000027c

080022ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <DMA1_Channel1_IRQHandler+0x10>)
 80022b2:	f004 faf1 	bl	8006898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000035c 	.word	0x2000035c

080022c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <USART1_IRQHandler+0x10>)
 80022c6:	f008 fb31 	bl	800a92c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200002c8 	.word	0x200002c8

080022d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80022d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022dc:	f005 f8ac 	bl	8007438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <RTC_Alarm_IRQHandler+0x10>)
 80022ea:	f007 fb7b 	bl	80099e4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000027c 	.word	0x2000027c

080022f8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <SUBGHZ_Radio_IRQHandler+0x10>)
 80022fe:	f008 f82f 	bl	800a360 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200002b4 	.word	0x200002b4

0800230c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002318:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800231a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4313      	orrs	r3, r2
 8002322:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002328:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4013      	ands	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002330:	68fb      	ldr	r3, [r7, #12]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_SUBGHZ_Init+0x20>)
 8002342:	2208      	movs	r2, #8
 8002344:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_SUBGHZ_Init+0x20>)
 8002348:	f007 fd88 	bl	8009e5c <HAL_SUBGHZ_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002352:	f7ff feb7 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	200002b4 	.word	0x200002b4

08002360 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002368:	2001      	movs	r0, #1
 800236a:	f7ff ffcf 	bl	800230c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2032      	movs	r0, #50	; 0x32
 8002374:	f003 ffdf 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002378:	2032      	movs	r0, #50	; 0x32
 800237a:	f003 fff6 	bl	800636a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr

080023ac <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <LL_FLASH_GetUDN+0x10>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	1fff7580 	.word	0x1fff7580

080023c0 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <LL_FLASH_GetDeviceID+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	1fff7584 	.word	0x1fff7584

080023d8 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80023dc:	4b03      	ldr	r3, [pc, #12]	; (80023ec <LL_FLASH_GetSTCompanyID+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0a1b      	lsrs	r3, r3, #8
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	1fff7584 	.word	0x1fff7584

080023f0 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff ffc6 	bl	8002386 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 80023fa:	f01d f989 	bl	801f710 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <SystemApp_Init+0x48>)
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002404:	f000 f986 	bl	8002714 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002408:	f01d fc12 	bl	801fc30 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800240c:	480b      	ldr	r0, [pc, #44]	; (800243c <SystemApp_Init+0x4c>)
 800240e:	f01d fcbd 	bl	801fd8c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <SystemApp_Init+0x50>)
 8002414:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002418:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800241a:	2002      	movs	r0, #2
 800241c:	f01d fcc4 	bl	801fda8 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002420:	f7ff f8d2 	bl	80015c8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002424:	f000 f9fc 	bl	8002820 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002428:	f01c fc78 	bl	801ed1c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800242c:	2101      	movs	r1, #1
 800242e:	2001      	movs	r0, #1
 8002430:	f01c fcb4 	bl	801ed9c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200002c0 	.word	0x200002c0
 800243c:	08002605 	.word	0x08002605
 8002440:	58004000 	.word	0x58004000

08002444 <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800244e:	f7ff f8c9 	bl	80015e4 <SYS_GetBatteryLevel>
 8002452:	4603      	mov	r3, r0
 8002454:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8002456:	88bb      	ldrh	r3, [r7, #4]
 8002458:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800245c:	4293      	cmp	r3, r2
 800245e:	d902      	bls.n	8002466 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002460:	23fe      	movs	r3, #254	; 0xfe
 8002462:	71fb      	strb	r3, [r7, #7]
 8002464:	e014      	b.n	8002490 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8002466:	88bb      	ldrh	r3, [r7, #4]
 8002468:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800246c:	d202      	bcs.n	8002474 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	e00d      	b.n	8002490 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002474:	88bb      	ldrh	r3, [r7, #4]
 8002476:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800247a:	461a      	mov	r2, r3
 800247c:	4613      	mov	r3, r2
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	461a      	mov	r2, r3
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <GetBatteryLevel+0x58>)
 8002488:	fba3 2302 	umull	r2, r3, r3, r2
 800248c:	09db      	lsrs	r3, r3, #7
 800248e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002490:	79fb      	ldrb	r3, [r7, #7]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	1b4e81b5 	.word	0x1b4e81b5

080024a0 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 f98d 	bl	80027cc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fe1f 	bl	80010f8 <__aeabi_f2iz>
 80024ba:	4603      	mov	r3, r0
 80024bc:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80024be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80024ca:	b590      	push	{r4, r7, lr}
 80024cc:	b087      	sub	sp, #28
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80024d6:	f7ff ff69 	bl	80023ac <LL_FLASH_GetUDN>
 80024da:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d138      	bne.n	8002556 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80024e4:	f002 fdb0 	bl	8005048 <HAL_GetUIDw0>
 80024e8:	4604      	mov	r4, r0
 80024ea:	f002 fdc1 	bl	8005070 <HAL_GetUIDw2>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4423      	add	r3, r4
 80024f2:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80024f4:	f002 fdb2 	bl	800505c <HAL_GetUIDw1>
 80024f8:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	0e1a      	lsrs	r2, r3, #24
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3307      	adds	r3, #7
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	0c1a      	lsrs	r2, r3, #16
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3306      	adds	r3, #6
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	0a1a      	lsrs	r2, r3, #8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3305      	adds	r3, #5
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0e1a      	lsrs	r2, r3, #24
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3303      	adds	r3, #3
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	0c1a      	lsrs	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3302      	adds	r3, #2
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	0a1a      	lsrs	r2, r3, #8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002554:	e031      	b.n	80025ba <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3307      	adds	r3, #7
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	0a1a      	lsrs	r2, r3, #8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3306      	adds	r3, #6
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	0c1a      	lsrs	r2, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3305      	adds	r3, #5
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	0e1a      	lsrs	r2, r3, #24
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3304      	adds	r3, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002584:	f7ff ff1c 	bl	80023c0 <LL_FLASH_GetDeviceID>
 8002588:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3303      	adds	r3, #3
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002594:	f7ff ff20 	bl	80023d8 <LL_FLASH_GetSTCompanyID>
 8002598:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3302      	adds	r3, #2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	0a1a      	lsrs	r2, r3, #8
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3301      	adds	r3, #1
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	0c1b      	lsrs	r3, r3, #16
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	701a      	strb	r2, [r3, #0]
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd90      	pop	{r4, r7, pc}

080025c2 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80025c2:	b590      	push	{r4, r7, lr}
 80025c4:	b083      	sub	sp, #12
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80025ca:	f7ff feef 	bl	80023ac <LL_FLASH_GetUDN>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d10d      	bne.n	80025fa <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80025de:	f002 fd33 	bl	8005048 <HAL_GetUIDw0>
 80025e2:	4604      	mov	r4, r0
 80025e4:	f002 fd3a 	bl	800505c <HAL_GetUIDw1>
 80025e8:	4603      	mov	r3, r0
 80025ea:	405c      	eors	r4, r3
 80025ec:	f002 fd40 	bl	8005070 <HAL_GetUIDw2>
 80025f0:	4603      	mov	r3, r0
 80025f2:	ea84 0203 	eor.w	r2, r4, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
	...

08002604 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800260e:	f107 0308 	add.w	r3, r7, #8
 8002612:	4618      	mov	r0, r3
 8002614:	f01c fccc 	bl	801efb0 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800261e:	9200      	str	r2, [sp, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <TimestampNow+0x3c>)
 8002622:	2110      	movs	r1, #16
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f81d 	bl	8002664 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fd fda4 	bl	8000178 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	0802112c 	.word	0x0802112c

08002644 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002648:	2101      	movs	r1, #1
 800264a:	2002      	movs	r0, #2
 800264c:	f01c fb76 	bl	801ed3c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002658:	2100      	movs	r1, #0
 800265a:	2002      	movs	r0, #2
 800265c:	f01c fb6e 	bl	801ed3c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}

08002664 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002664:	b40c      	push	{r2, r3}
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f01c fe69 	bl	801f354 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800268c:	b002      	add	sp, #8
 800268e:	4770      	bx	lr

08002690 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_GetTick+0x24>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80026b6:	f000 f97f 	bl	80029b8 <TIMER_IF_GetTimerValue>
 80026ba:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	200002c0 	.word	0x200002c0

080026cc <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f9f5 	bl	8002ac6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <LL_AHB2_GRP1_EnableClock>:
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002708:	68fb      	ldr	r3, [r7, #12]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 800271a:	f002 fcb3 	bl	8005084 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 800271e:	f002 fcb7 	bl	8005090 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002722:	f002 fcbb 	bl	800509c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002734:	2301      	movs	r3, #1
 8002736:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002740:	2001      	movs	r0, #1
 8002742:	f7ff ffcf 	bl	80026e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8002746:	2002      	movs	r0, #2
 8002748:	f7ff ffcc 	bl	80026e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 800274c:	2002      	movs	r0, #2
 800274e:	f7ff ffc9 	bl	80026e4 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002752:	2002      	movs	r0, #2
 8002754:	f7ff ffc6 	bl	80026e4 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002758:	2301      	movs	r3, #1
 800275a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002764:	f004 fc22 	bl	8006fac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800276c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4815      	ldr	r0, [pc, #84]	; (80027c8 <DBG_Init+0xb4>)
 8002774:	f004 fc1a 	bl	8006fac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002778:	2308      	movs	r3, #8
 800277a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4811      	ldr	r0, [pc, #68]	; (80027c8 <DBG_Init+0xb4>)
 8002782:	f004 fc13 	bl	8006fac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002786:	2310      	movs	r3, #16
 8002788:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	480e      	ldr	r0, [pc, #56]	; (80027c8 <DBG_Init+0xb4>)
 8002790:	f004 fc0c 	bl	8006fac <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	2101      	movs	r1, #1
 8002798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800279c:	f004 fe34 	bl	8007408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027a6:	4808      	ldr	r0, [pc, #32]	; (80027c8 <DBG_Init+0xb4>)
 80027a8:	f004 fe2e 	bl	8007408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2108      	movs	r1, #8
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <DBG_Init+0xb4>)
 80027b2:	f004 fe29 	bl	8007408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2110      	movs	r1, #16
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <DBG_Init+0xb4>)
 80027bc:	f004 fe24 	bl	8007408 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80027c0:	bf00      	nop
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	48000400 	.word	0x48000400

080027cc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <EnvSensors_Read+0x40>)
 80027d6:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <EnvSensors_Read+0x44>)
 80027da:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <EnvSensors_Read+0x48>)
 80027de:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a08      	ldr	r2, [pc, #32]	; (8002818 <EnvSensors_Read+0x4c>)
 80027f6:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <EnvSensors_Read+0x50>)
 80027fc:	611a      	str	r2, [r3, #16]

  return 0;
 80027fe:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002800:	4618      	mov	r0, r3
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	42480000 	.word	0x42480000
 8002810:	41900000 	.word	0x41900000
 8002814:	447a0000 	.word	0x447a0000
 8002818:	003e090d 	.word	0x003e090d
 800281c:	000503ab 	.word	0x000503ab

08002820 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800282a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800283a:	bf00      	nop
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002862:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <TIMER_IF_Init+0x5c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002872:	f04f 32ff 	mov.w	r2, #4294967295
 8002876:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002878:	f7ff fc52 	bl	8002120 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800287c:	f000 f856 	bl	800292c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002886:	f007 f851 	bl	800992c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <TIMER_IF_Init+0x60>)
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <TIMER_IF_Init+0x60>)
 8002894:	f007 f988 	bl	8009ba8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002898:	2000      	movs	r0, #0
 800289a:	f000 f9d3 	bl	8002c44 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800289e:	f000 f85f 	bl	8002960 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <TIMER_IF_Init+0x5c>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80028a8:	79fb      	ldrb	r3, [r7, #7]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	200002c1 	.word	0x200002c1
 80028b8:	2000027c 	.word	0x2000027c

080028bc <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08e      	sub	sp, #56	; 0x38
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	222c      	movs	r2, #44	; 0x2c
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f01e fbee 	bl	80210b4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80028d8:	f000 f828 	bl	800292c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <TIMER_IF_StartTimer+0x68>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80028f4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80028f8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80028fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002900:	f107 0308 	add.w	r3, r7, #8
 8002904:	2201      	movs	r2, #1
 8002906:	4619      	mov	r1, r3
 8002908:	4807      	ldr	r0, [pc, #28]	; (8002928 <TIMER_IF_StartTimer+0x6c>)
 800290a:	f006 ff03 	bl	8009714 <HAL_RTC_SetAlarm_IT>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002914:	f7ff fbd6 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800291c:	4618      	mov	r0, r3
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200002c4 	.word	0x200002c4
 8002928:	2000027c 	.word	0x2000027c

0800292c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <TIMER_IF_StopTimer+0x2c>)
 8002938:	2201      	movs	r2, #1
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800293c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002940:	4806      	ldr	r0, [pc, #24]	; (800295c <TIMER_IF_StopTimer+0x30>)
 8002942:	f006 fff3 	bl	800992c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <TIMER_IF_StopTimer+0x30>)
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800294e:	79fb      	ldrb	r3, [r7, #7]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40002800 	.word	0x40002800
 800295c:	2000027c 	.word	0x2000027c

08002960 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002964:	f000 f98e 	bl	8002c84 <GetTimerTicks>
 8002968:	4603      	mov	r3, r0
 800296a:	4a03      	ldr	r2, [pc, #12]	; (8002978 <TIMER_IF_SetTimerContext+0x18>)
 800296c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800296e:	4b02      	ldr	r3, [pc, #8]	; (8002978 <TIMER_IF_SetTimerContext+0x18>)
 8002970:	681b      	ldr	r3, [r3, #0]
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	200002c4 	.word	0x200002c4

0800297c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <TIMER_IF_GetTimerContext+0x10>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	200002c4 	.word	0x200002c4

08002990 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800299a:	f000 f973 	bl	8002c84 <GetTimerTicks>
 800299e:	4602      	mov	r2, r0
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80029a8:	687b      	ldr	r3, [r7, #4]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200002c4 	.word	0x200002c4

080029b8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <TIMER_IF_GetTimerValue+0x24>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80029ca:	f000 f95b 	bl	8002c84 <GetTimerTicks>
 80029ce:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200002c1 	.word	0x200002c1

080029e0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80029ea:	2303      	movs	r3, #3
 80029ec:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80029fa:	b5b0      	push	{r4, r5, r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a02:	2100      	movs	r1, #0
 8002a04:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	2000      	movs	r0, #0
 8002a0a:	460a      	mov	r2, r1
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	0d95      	lsrs	r5, r2, #22
 8002a10:	0294      	lsls	r4, r2, #10
 8002a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	f7fe fbb1 	bl	8001184 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4613      	mov	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bdb0      	pop	{r4, r5, r7, pc}

08002a34 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002a34:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a3e:	2100      	movs	r1, #0
 8002a40:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	2000      	movs	r0, #0
 8002a46:	460c      	mov	r4, r1
 8002a48:	4605      	mov	r5, r0
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	f04f 0a00 	mov.w	sl, #0
 8002a52:	f04f 0b00 	mov.w	fp, #0
 8002a56:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002a5a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002a5e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002a62:	4650      	mov	r0, sl
 8002a64:	4659      	mov	r1, fp
 8002a66:	1b02      	subs	r2, r0, r4
 8002a68:	eb61 0305 	sbc.w	r3, r1, r5
 8002a6c:	f04f 0000 	mov.w	r0, #0
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	0099      	lsls	r1, r3, #2
 8002a76:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a7a:	0090      	lsls	r0, r2, #2
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	eb12 0804 	adds.w	r8, r2, r4
 8002a84:	eb43 0905 	adc.w	r9, r3, r5
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f04f 0300 	mov.w	r3, #0
 8002a90:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a94:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a98:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9c:	4690      	mov	r8, r2
 8002a9e:	4699      	mov	r9, r3
 8002aa0:	4640      	mov	r0, r8
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	0a82      	lsrs	r2, r0, #10
 8002aae:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ab2:	0a8b      	lsrs	r3, r1, #10
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ac4:	4770      	bx	lr

08002ac6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff93 	bl	80029fa <TIMER_IF_Convert_ms2Tick>
 8002ad4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ad6:	f000 f8d5 	bl	8002c84 <GetTimerTicks>
 8002ada:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002adc:	e000      	b.n	8002ae0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002ade:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ae0:	f000 f8d0 	bl	8002c84 <GetTimerTicks>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d8f6      	bhi.n	8002ade <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002b02:	f01c ff53 	bl	801f9ac <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002b16:	f000 f8a5 	bl	8002c64 <TIMER_IF_BkUp_Read_MSBticks>
 8002b1a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f88f 	bl	8002c44 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002b2e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b32:	b08c      	sub	sp, #48	; 0x30
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002b3c:	f000 f8a2 	bl	8002c84 <GetTimerTicks>
 8002b40:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002b42:	f000 f88f 	bl	8002c64 <TIMER_IF_BkUp_Read_MSBticks>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	000b      	movs	r3, r1
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b60:	2000      	movs	r0, #0
 8002b62:	460c      	mov	r4, r1
 8002b64:	4605      	mov	r5, r0
 8002b66:	eb12 0804 	adds.w	r8, r2, r4
 8002b6a:	eb43 0905 	adc.w	r9, r3, r5
 8002b6e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002b72:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	0a82      	lsrs	r2, r0, #10
 8002b80:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002b84:	0a8b      	lsrs	r3, r1, #10
 8002b86:	4613      	mov	r3, r2
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002b98:	f04f 0b00 	mov.w	fp, #0
 8002b9c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff46 	bl	8002a34 <TIMER_IF_Convert_Tick2ms>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3730      	adds	r7, #48	; 0x30
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bbc <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002bca:	f007 f87f 	bl	8009ccc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000027c 	.word	0x2000027c

08002bdc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	2101      	movs	r1, #1
 8002be8:	4803      	ldr	r0, [pc, #12]	; (8002bf8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002bea:	f007 f86f 	bl	8009ccc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000027c 	.word	0x2000027c

08002bfc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002c06:	2100      	movs	r1, #0
 8002c08:	4804      	ldr	r0, [pc, #16]	; (8002c1c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002c0a:	f007 f877 	bl	8009cfc <HAL_RTCEx_BKUPRead>
 8002c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002c10:	687b      	ldr	r3, [r7, #4]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000027c 	.word	0x2000027c

08002c20 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002c2e:	f007 f865 	bl	8009cfc <HAL_RTCEx_BKUPRead>
 8002c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000027c 	.word	0x2000027c

08002c44 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	4803      	ldr	r0, [pc, #12]	; (8002c60 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002c52:	f007 f83b 	bl	8009ccc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000027c 	.word	0x2000027c

08002c64 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002c6e:	f007 f845 	bl	8009cfc <HAL_RTCEx_BKUPRead>
 8002c72:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002c74:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	2000027c 	.word	0x2000027c

08002c84 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c8a:	480b      	ldr	r0, [pc, #44]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c8c:	f7ff fdd9 	bl	8002842 <LL_RTC_TIME_GetSubSecond>
 8002c90:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c92:	e003      	b.n	8002c9c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c94:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c96:	f7ff fdd4 	bl	8002842 <LL_RTC_TIME_GetSubSecond>
 8002c9a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c9c:	4806      	ldr	r0, [pc, #24]	; (8002cb8 <GetTimerTicks+0x34>)
 8002c9e:	f7ff fdd0 	bl	8002842 <LL_RTC_TIME_GetSubSecond>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d1f4      	bne.n	8002c94 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40002800 	.word	0x40002800

08002cbc <LL_AHB2_GRP1_EnableClock>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <LL_APB2_GRP1_EnableClock>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d10:	68fb      	ldr	r3, [r7, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <LL_APB2_GRP1_DisableClock>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d32:	4013      	ands	r3, r2
 8002d34:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bc80      	pop	{r7}
 8002d3e:	4770      	bx	lr

08002d40 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <MX_USART1_UART_Init+0x94>)
 8002d48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d4a:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d52:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d58:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d76:	4b16      	ldr	r3, [pc, #88]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d82:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d88:	4811      	ldr	r0, [pc, #68]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d8a:	f007 fcb2 	bl	800a6f2 <HAL_UART_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d94:	f7ff f996 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d98:	2100      	movs	r1, #0
 8002d9a:	480d      	ldr	r0, [pc, #52]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002d9c:	f009 fdd5 	bl	800c94a <HAL_UARTEx_SetTxFifoThreshold>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002da6:	f7ff f98d 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002daa:	2100      	movs	r1, #0
 8002dac:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002dae:	f009 fe0a 	bl	800c9c6 <HAL_UARTEx_SetRxFifoThreshold>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002db8:	f7ff f984 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002dbc:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <MX_USART1_UART_Init+0x90>)
 8002dbe:	f009 fd89 	bl	800c8d4 <HAL_UARTEx_EnableFifoMode>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002dc8:	f7ff f97c 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200002c8 	.word	0x200002c8
 8002dd4:	40013800 	.word	0x40013800

08002dd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b096      	sub	sp, #88	; 0x58
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	2238      	movs	r2, #56	; 0x38
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f01e f95b 	bl	80210b4 <memset>
  if(uartHandle->Instance==USART1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2f      	ldr	r2, [pc, #188]	; (8002ec0 <HAL_UART_MspInit+0xe8>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d156      	bne.n	8002eb6 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e0c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e10:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e12:	f107 030c 	add.w	r3, r7, #12
 8002e16:	4618      	mov	r0, r3
 8002e18:	f006 fae0 	bl	80093dc <HAL_RCCEx_PeriphCLKConfig>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e22:	f7ff f94f 	bl	80020c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e2a:	f7ff ff5f 	bl	8002cec <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	2002      	movs	r0, #2
 8002e30:	f7ff ff44 	bl	8002cbc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002e34:	23c0      	movs	r3, #192	; 0xc0
 8002e36:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e44:	2307      	movs	r3, #7
 8002e46:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	481d      	ldr	r0, [pc, #116]	; (8002ec4 <HAL_UART_MspInit+0xec>)
 8002e50:	f004 f8ac 	bl	8006fac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e56:	4a1d      	ldr	r2, [pc, #116]	; (8002ecc <HAL_UART_MspInit+0xf4>)
 8002e58:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e5c:	2212      	movs	r2, #18
 8002e5e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e62:	2210      	movs	r2, #16
 8002e64:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e8a:	480f      	ldr	r0, [pc, #60]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e8c:	f003 fa8a 	bl	80063a4 <HAL_DMA_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002e96:	f7ff f915 	bl	80020c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002e9e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ea0:	4a09      	ldr	r2, [pc, #36]	; (8002ec8 <HAL_UART_MspInit+0xf0>)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	2024      	movs	r0, #36	; 0x24
 8002eac:	f003 fa43 	bl	8006336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eb0:	2024      	movs	r0, #36	; 0x24
 8002eb2:	f003 fa5a 	bl	800636a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	3758      	adds	r7, #88	; 0x58
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	48000400 	.word	0x48000400
 8002ec8:	2000035c 	.word	0x2000035c
 8002ecc:	40020008 	.word	0x40020008

08002ed0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <HAL_UART_MspDeInit+0x3c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10f      	bne.n	8002f02 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002ee2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ee6:	f7ff ff19 	bl	8002d1c <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002eea:	21c0      	movs	r1, #192	; 0xc0
 8002eec:	4808      	ldr	r0, [pc, #32]	; (8002f10 <HAL_UART_MspDeInit+0x40>)
 8002eee:	f004 f9bd 	bl	800726c <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 fafc 	bl	80064f4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002efc:	2024      	movs	r0, #36	; 0x24
 8002efe:	f003 fa42 	bl	8006386 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	48000400 	.word	0x48000400

08002f14 <LL_APB2_GRP1_ForceReset>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <LL_APB2_GRP1_ReleaseReset>:
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
	...

08002f5c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <LL_EXTI_EnableIT_0_31+0x24>)
 8002f66:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002f6a:	4905      	ldr	r1, [pc, #20]	; (8002f80 <LL_EXTI_EnableIT_0_31+0x24>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	58000800 	.word	0x58000800

08002f84 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <vcom_Init+0x28>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002f92:	f7fe fbb9 	bl	8001708 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002f96:	f7ff fed3 	bl	8002d40 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002f9a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002f9e:	f7ff ffdd 	bl	8002f5c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002fa2:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	200003c0 	.word	0x200003c0

08002fb0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002fb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fb8:	f7ff ffac 	bl	8002f14 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002fbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fc0:	f7ff ffb9 	bl	8002f36 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002fc4:	4804      	ldr	r0, [pc, #16]	; (8002fd8 <vcom_DeInit+0x28>)
 8002fc6:	f7ff ff83 	bl	8002ed0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002fca:	200f      	movs	r0, #15
 8002fcc:	f003 f9db 	bl	8006386 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002fd0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	200002c8 	.word	0x200002c8

08002fdc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	461a      	mov	r2, r3
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4804      	ldr	r0, [pc, #16]	; (8003000 <vcom_Trace_DMA+0x24>)
 8002ff0:	f007 fc1c 	bl	800a82c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002ff4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200002c8 	.word	0x200002c8

08003004 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 800300c:	4a19      	ldr	r2, [pc, #100]	; (8003074 <vcom_ReceiveInit+0x70>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003012:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003016:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003020:	4815      	ldr	r0, [pc, #84]	; (8003078 <vcom_ReceiveInit+0x74>)
 8003022:	f009 fbca 	bl	800c7ba <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003026:	bf00      	nop
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <vcom_ReceiveInit+0x74>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003036:	d0f7      	beq.n	8003028 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003038:	bf00      	nop
 800303a:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <vcom_ReceiveInit+0x74>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003048:	d1f7      	bne.n	800303a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800304a:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <vcom_ReceiveInit+0x74>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <vcom_ReceiveInit+0x74>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003058:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800305a:	4807      	ldr	r0, [pc, #28]	; (8003078 <vcom_ReceiveInit+0x74>)
 800305c:	f009 fc08 	bl	800c870 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003060:	2201      	movs	r2, #1
 8003062:	4906      	ldr	r1, [pc, #24]	; (800307c <vcom_ReceiveInit+0x78>)
 8003064:	4804      	ldr	r0, [pc, #16]	; (8003078 <vcom_ReceiveInit+0x74>)
 8003066:	f007 fb95 	bl	800a794 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800306a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	200003c4 	.word	0x200003c4
 8003078:	200002c8 	.word	0x200002c8
 800307c:	200003bc 	.word	0x200003bc

08003080 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a05      	ldr	r2, [pc, #20]	; (80030a4 <HAL_UART_TxCpltCallback+0x24>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d103      	bne.n	800309a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003092:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_UART_TxCpltCallback+0x28>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2000      	movs	r0, #0
 8003098:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40013800 	.word	0x40013800
 80030a8:	200003c0 	.word	0x200003c0

080030ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_UART_RxCpltCallback+0x44>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_UART_RxCpltCallback+0x48>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_UART_RxCpltCallback+0x30>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80030d0:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_UART_RxCpltCallback+0x48>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2101      	movs	r1, #1
 80030d8:	4807      	ldr	r0, [pc, #28]	; (80030f8 <HAL_UART_RxCpltCallback+0x4c>)
 80030da:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80030dc:	2201      	movs	r2, #1
 80030de:	4906      	ldr	r1, [pc, #24]	; (80030f8 <HAL_UART_RxCpltCallback+0x4c>)
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f007 fb57 	bl	800a794 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40013800 	.word	0x40013800
 80030f4:	200003c4 	.word	0x200003c4
 80030f8:	200003bc 	.word	0x200003bc

080030fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003100:	f7ff fb99 	bl	8002836 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <LoopForever+0x6>)
  ldr r1, =_edata
 8003106:	490d      	ldr	r1, [pc, #52]	; (800313c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <LoopForever+0xe>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800310c:	e002      	b.n	8003114 <LoopCopyDataInit>

0800310e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800310e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003112:	3304      	adds	r3, #4

08003114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003118:	d3f9      	bcc.n	800310e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800311c:	4c0a      	ldr	r4, [pc, #40]	; (8003148 <LoopForever+0x16>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003120:	e001      	b.n	8003126 <LoopFillZerobss>

08003122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003124:	3204      	adds	r2, #4

08003126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003128:	d3fb      	bcc.n	8003122 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800312a:	f01d ff91 	bl	8021050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800312e:	f7fe fea3 	bl	8001e78 <main>

08003132 <LoopForever>:

LoopForever:
    b LoopForever
 8003132:	e7fe      	b.n	8003132 <LoopForever>
  ldr   r0, =_estack
 8003134:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800313c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8003140:	08022220 	.word	0x08022220
  ldr r2, =_sbss
 8003144:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8003148:	200022bc 	.word	0x200022bc

0800314c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800314c:	e7fe      	b.n	800314c <ADC_IRQHandler>

0800314e <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f001 fade 	bl	800471c <null_ptr_check>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d131      	bne.n	80031d0 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7a1b      	ldrb	r3, [r3, #8]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d003      	beq.n	800317c <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	729a      	strb	r2, [r3, #10]
 800317a:	e002      	b.n	8003182 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8003182:	f107 010e 	add.w	r1, r7, #14
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	2000      	movs	r0, #0
 800318c:	f000 f826 	bl	80031dc <bmp3_get_regs>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8003194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d119      	bne.n	80031d0 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 800319c:	7bbb      	ldrb	r3, [r7, #14]
 800319e:	2b50      	cmp	r3, #80	; 0x50
 80031a0:	d002      	beq.n	80031a8 <bmp3_init+0x5a>
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d111      	bne.n	80031cc <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 80031a8:	7bba      	ldrb	r2, [r7, #14]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f98b 	bl	80034ca <bmp3_soft_reset>
 80031b4:	4603      	mov	r3, r0
 80031b6:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 80031b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 fb33 	bl	800382c <get_calib_data>
 80031c6:	4603      	mov	r3, r0
 80031c8:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 80031ca:	e001      	b.n	80031d0 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 80031cc:	23fe      	movs	r3, #254	; 0xfe
 80031ce:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80031d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 80031dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031e0:	b08b      	sub	sp, #44	; 0x2c
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80031ee:	6838      	ldr	r0, [r7, #0]
 80031f0:	f001 fa94 	bl	800471c <null_ptr_check>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 80031fa:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d172      	bne.n	80032e8 <bmp3_get_regs+0x10c>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d06f      	beq.n	80032e8 <bmp3_get_regs+0x10c>
    {
 8003208:	466b      	mov	r3, sp
 800320a:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	7a9b      	ldrb	r3, [r3, #10]
 8003210:	461a      	mov	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	7a9b      	ldrb	r3, [r3, #10]
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	18d1      	adds	r1, r2, r3
 8003222:	460b      	mov	r3, r1
 8003224:	3b01      	subs	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	2300      	movs	r3, #0
 800322a:	4688      	mov	r8, r1
 800322c:	4699      	mov	r9, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800323a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800323e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003242:	2300      	movs	r3, #0
 8003244:	460c      	mov	r4, r1
 8003246:	461d      	mov	r5, r3
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	00eb      	lsls	r3, r5, #3
 8003252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003256:	00e2      	lsls	r2, r4, #3
 8003258:	1dcb      	adds	r3, r1, #7
 800325a:	08db      	lsrs	r3, r3, #3
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	ebad 0d03 	sub.w	sp, sp, r3
 8003262:	466b      	mov	r3, sp
 8003264:	3300      	adds	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	7a1b      	ldrb	r3, [r3, #8]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d025      	beq.n	80032bc <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003276:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68dc      	ldr	r4, [r3, #12]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	7bf8      	ldrb	r0, [r7, #15]
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	6979      	ldr	r1, [r7, #20]
 8003286:	47a0      	blx	r4
 8003288:	4603      	mov	r3, r0
 800328a:	461a      	mov	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
 8003294:	e00d      	b.n	80032b2 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	7a9b      	ldrb	r3, [r3, #10]
 800329a:	461a      	mov	r2, r3
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	441a      	add	r2, r3
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	440b      	add	r3, r1
 80032a6:	6979      	ldr	r1, [r7, #20]
 80032a8:	5c8a      	ldrb	r2, [r1, r2]
 80032aa:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	3301      	adds	r3, #1
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d3ed      	bcc.n	8003296 <bmp3_get_regs+0xba>
 80032ba:	e00b      	b.n	80032d4 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68dc      	ldr	r4, [r3, #12]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	7bf8      	ldrb	r0, [r7, #15]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	47a0      	blx	r4
 80032cc:	4603      	mov	r3, r0
 80032ce:	461a      	mov	r2, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 80032de:	23f9      	movs	r3, #249	; 0xf9
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e4:	46b5      	mov	sp, r6
    {
 80032e6:	e002      	b.n	80032ee <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80032e8:	23ff      	movs	r3, #255	; 0xff
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }

    return rslt;
 80032ee:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	372c      	adds	r7, #44	; 0x2c
 80032f6:	46bd      	mov	sp, r7
 80032f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080032fc <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 80032fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003300:	b089      	sub	sp, #36	; 0x24
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	466b      	mov	r3, sp
 800330e:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	0059      	lsls	r1, r3, #1
 8003314:	460b      	mov	r3, r1
 8003316:	3b01      	subs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	2300      	movs	r3, #0
 800331c:	4688      	mov	r8, r1
 800331e:	4699      	mov	r9, r3
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800332c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003330:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003334:	2300      	movs	r3, #0
 8003336:	460c      	mov	r4, r1
 8003338:	461d      	mov	r5, r3
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	00eb      	lsls	r3, r5, #3
 8003344:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003348:	00e2      	lsls	r2, r4, #3
 800334a:	1dcb      	adds	r3, r1, #7
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	ebad 0d03 	sub.w	sp, sp, r3
 8003354:	466b      	mov	r3, sp
 8003356:	3300      	adds	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	f001 f9de 	bl	800471c <null_ptr_check>
 8003360:	4603      	mov	r3, r0
 8003362:	76fb      	strb	r3, [r7, #27]

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8003364:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d14c      	bne.n	8003406 <bmp3_set_regs+0x10a>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d049      	beq.n	8003406 <bmp3_set_regs+0x10a>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d046      	beq.n	8003406 <bmp3_set_regs+0x10a>
    {
        if (len != 0)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d040      	beq.n	8003400 <bmp3_set_regs+0x104>
        {
            temp_buff[0] = reg_data[0];
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	7a1b      	ldrb	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d114      	bne.n	80033b8 <bmp3_set_regs+0xbc>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800338e:	2300      	movs	r3, #0
 8003390:	76bb      	strb	r3, [r7, #26]
 8003392:	e00d      	b.n	80033b0 <bmp3_set_regs+0xb4>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003394:	7ebb      	ldrb	r3, [r7, #26]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4413      	add	r3, r2
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	7ebb      	ldrb	r3, [r7, #26]
 800339e:	68f9      	ldr	r1, [r7, #12]
 80033a0:	440b      	add	r3, r1
 80033a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80033aa:	7ebb      	ldrb	r3, [r7, #26]
 80033ac:	3301      	adds	r3, #1
 80033ae:	76bb      	strb	r3, [r7, #26]
 80033b0:	7ebb      	ldrb	r3, [r7, #26]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8ed      	bhi.n	8003394 <bmp3_set_regs+0x98>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d909      	bls.n	80033d2 <bmp3_set_regs+0xd6>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	6939      	ldr	r1, [r7, #16]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fa56 	bl	8003876 <interleave_reg_addr>
                temp_len = len * 2;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e001      	b.n	80033d6 <bmp3_set_regs+0xda>
            }
            else
            {
                temp_len = len;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	61fb      	str	r3, [r7, #28]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	691c      	ldr	r4, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	7818      	ldrb	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	6939      	ldr	r1, [r7, #16]
 80033e6:	47a0      	blx	r4
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <bmp3_set_regs+0x110>
            {
                rslt = BMP3_E_COMM_FAIL;
 80033fa:	23f9      	movs	r3, #249	; 0xf9
 80033fc:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 80033fe:	e005      	b.n	800340c <bmp3_set_regs+0x110>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8003400:	23fa      	movs	r3, #250	; 0xfa
 8003402:	76fb      	strb	r3, [r7, #27]
        if (len != 0)
 8003404:	e002      	b.n	800340c <bmp3_set_regs+0x110>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003406:	23ff      	movs	r3, #255	; 0xff
 8003408:	76fb      	strb	r3, [r7, #27]
 800340a:	e000      	b.n	800340e <bmp3_set_regs+0x112>
        if (len != 0)
 800340c:	bf00      	nop
    }

    return rslt;
 800340e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003412:	46b5      	mov	sp, r6
}
 8003414:	4618      	mov	r0, r3
 8003416:	3724      	adds	r7, #36	; 0x24
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800341e <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	f001 f977 	bl	800471c <null_ptr_check>
 800342e:	4603      	mov	r3, r0
 8003430:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d141      	bne.n	80034be <bmp3_set_sensor_settings+0xa0>
    {
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	2006      	movs	r0, #6
 800343e:	f001 f956 	bl	80046ee <are_settings_changed>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <bmp3_set_sensor_settings+0x36>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
 8003448:	6839      	ldr	r1, [r7, #0]
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa77 	bl	800393e <set_pwr_ctrl_settings>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	20f0      	movs	r0, #240	; 0xf0
 8003458:	f001 f949 	bl	80046ee <are_settings_changed>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <bmp3_set_sensor_settings+0x58>
 8003462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <bmp3_set_sensor_settings+0x58>
        {
            /* Set the over sampling, ODR and filter settings*/
            rslt = set_odr_filter_settings(desired_settings, dev);
 800346a:	6839      	ldr	r1, [r7, #0]
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fab5 	bl	80039dc <set_odr_filter_settings>
 8003472:	4603      	mov	r3, r0
 8003474:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800347c:	f001 f937 	bl	80046ee <are_settings_changed>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <bmp3_set_sensor_settings+0x7c>
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d105      	bne.n	800349a <bmp3_set_sensor_settings+0x7c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, dev);
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 fb11 	bl	8003ab8 <set_int_ctrl_settings>
 8003496:	4603      	mov	r3, r0
 8003498:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80034a0:	f001 f925 	bl	80046ee <are_settings_changed>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d009      	beq.n	80034be <bmp3_set_sensor_settings+0xa0>
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <bmp3_set_sensor_settings+0xa0>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, dev);
 80034b2:	6839      	ldr	r1, [r7, #0]
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fb78 	bl	8003baa <set_advance_settings>
 80034ba:	4603      	mov	r3, r0
 80034bc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 80034d2:	237e      	movs	r3, #126	; 0x7e
 80034d4:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 80034d6:	23b6      	movs	r3, #182	; 0xb6
 80034d8:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 f91e 	bl	800471c <null_ptr_check>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80034e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d140      	bne.n	800356e <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 80034ec:	f107 010c 	add.w	r1, r7, #12
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	2003      	movs	r0, #3
 80034f6:	f7ff fe71 	bl	80031dc <bmp3_get_regs>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 80034fe:	7b3b      	ldrb	r3, [r7, #12]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02e      	beq.n	8003566 <bmp3_soft_reset+0x9c>
 8003508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d12a      	bne.n	8003566 <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003510:	f107 010d 	add.w	r1, r7, #13
 8003514:	f107 000e 	add.w	r0, r7, #14
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f7ff feee 	bl	80032fc <bmp3_set_regs>
 8003520:	4603      	mov	r3, r0
 8003522:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11f      	bne.n	800356c <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6852      	ldr	r2, [r2, #4]
 8003534:	4611      	mov	r1, r2
 8003536:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800353a:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800353c:	f107 010b 	add.w	r1, r7, #11
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	2002      	movs	r0, #2
 8003546:	f7ff fe49 	bl	80031dc <bmp3_get_regs>
 800354a:	4603      	mov	r3, r0
 800354c:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800354e:	7afb      	ldrb	r3, [r7, #11]
 8003550:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <bmp3_soft_reset+0x96>
 8003558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 8003560:	23fc      	movs	r3, #252	; 0xfc
 8003562:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 8003564:	e002      	b.n	800356c <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 8003566:	23fc      	movs	r3, #252	; 0xfc
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e000      	b.n	800356e <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 800356c:	bf00      	nop
        }
    }

    return rslt;
 800356e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f001 f8ca 	bl	800471c <null_ptr_check>
 8003588:	4603      	mov	r3, r0
 800358a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800358c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d130      	bne.n	80035f6 <bmp3_set_op_mode+0x7c>
    {
        uint8_t curr_mode = dev->settings.op_mode;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800359a:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 800359c:	f107 030d 	add.w	r3, r7, #13
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f82d 	bl	8003602 <bmp3_get_op_mode>
 80035a8:	4603      	mov	r3, r0
 80035aa:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if (last_set_mode != BMP3_MODE_SLEEP)
 80035ac:	7b7b      	ldrb	r3, [r7, #13]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00c      	beq.n	80035cc <bmp3_set_op_mode+0x52>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f8fa 	bl	80037ac <put_device_to_sleep>
 80035b8:	4603      	mov	r3, r0
 80035ba:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	4611      	mov	r1, r2
 80035c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80035ca:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 80035cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d110      	bne.n	80035f6 <bmp3_set_op_mode+0x7c>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 80035d4:	7bbb      	ldrb	r3, [r7, #14]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d105      	bne.n	80035e6 <bmp3_set_op_mode+0x6c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(dev);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f880 	bl	80036e0 <set_normal_mode>
 80035e0:	4603      	mov	r3, r0
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	e007      	b.n	80035f6 <bmp3_set_op_mode+0x7c>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 80035e6:	7bbb      	ldrb	r3, [r7, #14]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d104      	bne.n	80035f6 <bmp3_set_op_mode+0x7c>
            {
                /* Set forced mode */
                rslt = write_power_mode(dev);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8a7 	bl	8003740 <write_power_mode>
 80035f2:	4603      	mov	r3, r0
 80035f4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80035f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b084      	sub	sp, #16
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800360c:	6838      	ldr	r0, [r7, #0]
 800360e:	f001 f885 	bl	800471c <null_ptr_check>
 8003612:	4603      	mov	r3, r0
 8003614:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (op_mode != NULL))
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d114      	bne.n	8003648 <bmp3_get_op_mode+0x46>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d011      	beq.n	8003648 <bmp3_get_op_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	201b      	movs	r0, #27
 800362c:	f7ff fdd6 	bl	80031dc <bmp3_get_regs>
 8003630:	4603      	mov	r3, r0
 8003632:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	111b      	asrs	r3, r3, #4
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	b2da      	uxtb	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	e001      	b.n	800364c <bmp3_get_op_mode+0x4a>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003648:	23ff      	movs	r3, #255	; 0xff
 800364a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800364c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	2300      	movs	r3, #0
 800366c:	83bb      	strh	r3, [r7, #28]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 800366e:	f107 0310 	add.w	r3, r7, #16
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	605a      	str	r2, [r3, #4]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f001 f84f 	bl	800471c <null_ptr_check>
 800367e:	4603      	mov	r3, r0
 8003680:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMP3_OK) && (comp_data != NULL))
 8003682:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d122      	bne.n	80036d0 <bmp3_get_sensor_data+0x78>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01f      	beq.n	80036d0 <bmp3_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 8003690:	f107 0118 	add.w	r1, r7, #24
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2206      	movs	r2, #6
 8003698:	2004      	movs	r0, #4
 800369a:	f7ff fd9f 	bl	80031dc <bmp3_get_regs>
 800369e:	4603      	mov	r3, r0
 80036a0:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMP3_OK)
 80036a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d114      	bne.n	80036d4 <bmp3_get_sensor_data+0x7c>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80036aa:	f107 0210 	add.w	r2, r7, #16
 80036ae:	f107 0318 	add.w	r3, r7, #24
 80036b2:	4611      	mov	r1, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fc66 	bl	8003f86 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3318      	adds	r3, #24
 80036be:	f107 0110 	add.w	r1, r7, #16
 80036c2:	7bf8      	ldrb	r0, [r7, #15]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	f000 fc91 	bl	8003fec <compensate_data>
 80036ca:	4603      	mov	r3, r0
 80036cc:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMP3_OK)
 80036ce:	e001      	b.n	80036d4 <bmp3_get_sensor_data+0x7c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80036d0:	23ff      	movs	r3, #255	; 0xff
 80036d2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80036d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(dev);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f887 	bl	80037fc <validate_normal_mode_settings>
 80036ee:	4603      	mov	r3, r0
 80036f0:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 80036f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d11c      	bne.n	8003734 <set_normal_mode+0x54>
    {
        rslt = write_power_mode(dev);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f820 	bl	8003740 <write_power_mode>
 8003700:	4603      	mov	r3, r0
 8003702:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d113      	bne.n	8003734 <set_normal_mode+0x54>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800370c:	f107 010e 	add.w	r1, r7, #14
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	2002      	movs	r0, #2
 8003716:	f7ff fd61 	bl	80031dc <bmp3_get_regs>
 800371a:	4603      	mov	r3, r0
 800371c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <set_normal_mode+0x54>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8003726:	7bbb      	ldrb	r3, [r7, #14]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <set_normal_mode+0x54>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8003730:	23fb      	movs	r3, #251	; 0xfb
 8003732:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003734:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(struct bmp3_dev *dev)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003748:	231b      	movs	r3, #27
 800374a:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = dev->settings.op_mode;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003752:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8003754:	7b78      	ldrb	r0, [r7, #13]
 8003756:	f107 010c 	add.w	r1, r7, #12
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f7ff fd3d 	bl	80031dc <bmp3_get_regs>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8003766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 800376e:	7b3b      	ldrb	r3, [r7, #12]
 8003770:	b25b      	sxtb	r3, r3
 8003772:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003776:	b25a      	sxtb	r2, r3
 8003778:	7bbb      	ldrb	r3, [r7, #14]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	b25b      	sxtb	r3, r3
 800377e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003782:	b25b      	sxtb	r3, r3
 8003784:	4313      	orrs	r3, r2
 8003786:	b25b      	sxtb	r3, r3
 8003788:	b2db      	uxtb	r3, r3
 800378a:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800378c:	f107 010c 	add.w	r1, r7, #12
 8003790:	f107 000d 	add.w	r0, r7, #13
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f7ff fdb0 	bl	80032fc <bmp3_set_regs>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80037b4:	231b      	movs	r3, #27
 80037b6:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80037b8:	f107 010d 	add.w	r1, r7, #13
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	201b      	movs	r0, #27
 80037c2:	f7ff fd0b 	bl	80031dc <bmp3_get_regs>
 80037c6:	4603      	mov	r3, r0
 80037c8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80037ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10e      	bne.n	80037f0 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 80037d2:	7b7b      	ldrb	r3, [r7, #13]
 80037d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80037dc:	f107 010d 	add.w	r1, r7, #13
 80037e0:	f107 000e 	add.w	r0, r7, #14
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f7ff fd88 	bl	80032fc <bmp3_set_regs>
 80037ec:	4603      	mov	r3, r0
 80037ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = get_odr_filter_settings(dev);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa22 	bl	8003c4e <get_odr_filter_settings>
 800380a:	4603      	mov	r3, r0
 800380c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800380e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d104      	bne.n	8003820 <validate_normal_mode_settings+0x24>
    {
        rslt = validate_osr_and_odr_settings(dev);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa36 	bl	8003c88 <validate_osr_and_odr_settings>
 800381c:	4603      	mov	r3, r0
 800381e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8003834:	2331      	movs	r3, #49	; 0x31
 8003836:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800384c:	f107 0108 	add.w	r1, r7, #8
 8003850:	7ff8      	ldrb	r0, [r7, #31]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2215      	movs	r2, #21
 8003856:	f7ff fcc1 	bl	80031dc <bmp3_get_regs>
 800385a:	4603      	mov	r3, r0
 800385c:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fbf9 	bl	800405c <parse_calib_data>

    return rslt;
 800386a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8003876:	b480      	push	{r7}
 8003878:	b087      	sub	sp, #28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e015      	b.n	80038b6 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	441a      	add	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	005b      	lsls	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	440b      	add	r3, r1
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	441a      	add	r2, r3
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	440b      	add	r3, r1
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3301      	adds	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3e5      	bcc.n	800388a <interleave_reg_addr+0x14>
    }
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr

080038ca <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	4413      	add	r3, r2
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	10db      	asrs	r3, r3, #3
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	3301      	adds	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	f003 031f 	and.w	r3, r3, #31
 8003912:	b2da      	uxtb	r2, r3
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	3302      	adds	r3, #2
 800391c:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800391e:	7bfb      	ldrb	r3, [r7, #15]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	105b      	asrs	r3, r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	b2da      	uxtb	r2, r3
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	709a      	strb	r2, [r3, #2]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003948:	231b      	movs	r3, #27
 800394a:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800394c:	7bb8      	ldrb	r0, [r7, #14]
 800394e:	f107 010d 	add.w	r1, r7, #13
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2201      	movs	r2, #1
 8003956:	f7ff fc41 	bl	80031dc <bmp3_get_regs>
 800395a:	4603      	mov	r3, r0
 800395c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800395e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d134      	bne.n	80039d0 <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00f      	beq.n	8003990 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 8003970:	7b7b      	ldrb	r3, [r7, #13]
 8003972:	b25b      	sxtb	r3, r3
 8003974:	f023 0301 	bic.w	r3, r3, #1
 8003978:	b25a      	sxtb	r2, r3
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003980:	b25b      	sxtb	r3, r3
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	b25b      	sxtb	r3, r3
 8003988:	4313      	orrs	r3, r2
 800398a:	b25b      	sxtb	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d010      	beq.n	80039bc <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 800399a:	7b7b      	ldrb	r3, [r7, #13]
 800399c:	b25b      	sxtb	r3, r3
 800399e:	f023 0302 	bic.w	r3, r3, #2
 80039a2:	b25a      	sxtb	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	b25b      	sxtb	r3, r3
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	4313      	orrs	r3, r2
 80039b6:	b25b      	sxtb	r3, r3
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	737b      	strb	r3, [r7, #13]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80039bc:	f107 010d 	add.w	r1, r7, #13
 80039c0:	f107 000e 	add.w	r0, r7, #14
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f7ff fc98 	bl	80032fc <bmp3_set_regs>
 80039cc:	4603      	mov	r3, r0
 80039ce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80039d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <set_odr_filter_settings+0xd8>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	82bb      	strh	r3, [r7, #20]
 80039ec:	2300      	movs	r3, #0
 80039ee:	75bb      	strb	r3, [r7, #22]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 80039f4:	f107 0110 	add.w	r1, r7, #16
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2204      	movs	r2, #4
 80039fc:	201c      	movs	r0, #28
 80039fe:	f7ff fbed 	bl	80031dc <bmp3_get_regs>
 8003a02:	4603      	mov	r3, r0
 8003a04:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8003a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d14b      	bne.n	8003aa6 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	2030      	movs	r0, #48	; 0x30
 8003a12:	f000 fe6c 	bl	80046ee <are_settings_changed>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00b      	beq.n	8003a34 <set_odr_filter_settings+0x58>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 8003a1c:	f107 000f 	add.w	r0, r7, #15
 8003a20:	f107 0210 	add.w	r2, r7, #16
 8003a24:	f107 0114 	add.w	r1, r7, #20
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f9e4 	bl	8003dfc <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	2080      	movs	r0, #128	; 0x80
 8003a38:	f000 fe59 	bl	80046ee <are_settings_changed>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <set_odr_filter_settings+0x78>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, dev);
 8003a42:	f107 020f 	add.w	r2, r7, #15
 8003a46:	f107 0110 	add.w	r1, r7, #16
 8003a4a:	f107 0014 	add.w	r0, r7, #20
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f000 fa2b 	bl	8003eaa <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	2040      	movs	r0, #64	; 0x40
 8003a58:	f000 fe49 	bl	80046ee <are_settings_changed>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <set_odr_filter_settings+0x98>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, dev);
 8003a62:	f107 020f 	add.w	r2, r7, #15
 8003a66:	f107 0110 	add.w	r1, r7, #16
 8003a6a:	f107 0014 	add.w	r0, r7, #20
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f000 fa54 	bl	8003f1c <fill_filter_data>
        }

        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d104      	bne.n	8003a88 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(dev);
 8003a7e:	6838      	ldr	r0, [r7, #0]
 8003a80:	f000 f902 	bl	8003c88 <validate_osr_and_odr_settings>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMP3_OK)
 8003a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	461a      	mov	r2, r3
 8003a94:	f107 0110 	add.w	r1, r7, #16
 8003a98:	f107 0014 	add.w	r0, r7, #20
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f7ff fc2d 	bl	80032fc <bmp3_set_regs>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8003aa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	08021138 	.word	0x08021138

08003ab8 <set_int_ctrl_settings>:
 * @brief This internal API sets the interrupt control (output mode, level,
 * latch and data ready) settings of the sensor based on the settings
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 8003ac2:	2319      	movs	r3, #25
 8003ac4:	737b      	strb	r3, [r7, #13]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003ac6:	7b78      	ldrb	r0, [r7, #13]
 8003ac8:	f107 010e 	add.w	r1, r7, #14
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f7ff fb84 	bl	80031dc <bmp3_get_regs>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d15e      	bne.n	8003b9e <set_int_ctrl_settings+0xe6>
    {
        int_settings = dev->settings.int_settings;
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	f107 0308 	add.w	r3, r7, #8
 8003ae6:	32b7      	adds	r2, #183	; 0xb7
 8003ae8:	6810      	ldr	r0, [r2, #0]
 8003aea:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <set_int_ctrl_settings+0x5a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8003af6:	7bbb      	ldrb	r3, [r7, #14]
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	b25a      	sxtb	r2, r3
 8003b00:	7a3b      	ldrb	r3, [r7, #8]
 8003b02:	b25b      	sxtb	r3, r3
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	b25b      	sxtb	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <set_int_ctrl_settings+0x82>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	b25b      	sxtb	r3, r3
 8003b20:	f023 0302 	bic.w	r3, r3, #2
 8003b24:	b25a      	sxtb	r2, r3
 8003b26:	7a7b      	ldrb	r3, [r7, #9]
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	b25b      	sxtb	r3, r3
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	b25b      	sxtb	r3, r3
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00e      	beq.n	8003b62 <set_int_ctrl_settings+0xaa>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8003b44:	7bbb      	ldrb	r3, [r7, #14]
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	b25a      	sxtb	r2, r3
 8003b4e:	7abb      	ldrb	r3, [r7, #10]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	b25b      	sxtb	r3, r3
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	b25b      	sxtb	r3, r3
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	b25b      	sxtb	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00e      	beq.n	8003b8a <set_int_ctrl_settings+0xd2>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b74:	b25a      	sxtb	r2, r3
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	019b      	lsls	r3, r3, #6
 8003b7a:	b25b      	sxtb	r3, r3
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	b25b      	sxtb	r3, r3
 8003b82:	4313      	orrs	r3, r2
 8003b84:	b25b      	sxtb	r3, r3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	73bb      	strb	r3, [r7, #14]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003b8a:	f107 010e 	add.w	r1, r7, #14
 8003b8e:	f107 000d 	add.w	r0, r7, #13
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f7ff fbb1 	bl	80032fc <bmp3_set_regs>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	f107 0308 	add.w	r3, r7, #8
 8003bba:	32bb      	adds	r2, #187	; 0xbb
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 8003bc0:	231a      	movs	r3, #26
 8003bc2:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 8003bc4:	7bb8      	ldrb	r0, [r7, #14]
 8003bc6:	f107 010d 	add.w	r1, r7, #13
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f7ff fb05 	bl	80031dc <bmp3_get_regs>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 8003bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d131      	bne.n	8003c42 <set_advance_settings+0x98>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <set_advance_settings+0x5c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 8003be8:	7b7b      	ldrb	r3, [r7, #13]
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	f023 0302 	bic.w	r3, r3, #2
 8003bf0:	b25a      	sxtb	r2, r3
 8003bf2:	7a3b      	ldrb	r3, [r7, #8]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	b25b      	sxtb	r3, r3
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	b25b      	sxtb	r3, r3
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	b25b      	sxtb	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <set_advance_settings+0x84>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8003c10:	7b7b      	ldrb	r3, [r7, #13]
 8003c12:	b25b      	sxtb	r3, r3
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	b25a      	sxtb	r2, r3
 8003c1a:	7a7b      	ldrb	r3, [r7, #9]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	737b      	strb	r3, [r7, #13]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003c2e:	f107 010d 	add.w	r1, r7, #13
 8003c32:	f107 000e 	add.w	r0, r7, #14
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f7ff fb5f 	bl	80032fc <bmp3_set_regs>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003c56:	f107 0108 	add.w	r1, r7, #8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2204      	movs	r2, #4
 8003c5e:	201c      	movs	r0, #28
 8003c60:	f7ff fabc 	bl	80031dc <bmp3_get_regs>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	4611      	mov	r1, r2
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fe28 	bl	80038ca <parse_odr_filter_settings>

    return rslt;
 8003c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b098      	sub	sp, #96	; 0x60
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8003c90:	23ea      	movs	r3, #234	; 0xea
 8003c92:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8003c98:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <validate_osr_and_odr_settings+0x84>)
 8003c9a:	f107 030c 	add.w	r3, r7, #12
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	2248      	movs	r2, #72	; 0x48
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f01d f9f8 	bl	8021098 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <validate_osr_and_odr_settings+0x38>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f842 	bl	8003d3c <calculate_press_meas_time>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbc:	4413      	add	r3, r2
 8003cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (dev->settings.temp_en)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d006      	beq.n	8003cd8 <validate_osr_and_odr_settings+0x50>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(dev);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f866 	bl	8003d9c <calculate_temp_meas_time>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cd4:	4413      	add	r3, r2
 8003cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8003cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cdc:	4413      	add	r3, r2
 8003cde:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3360      	adds	r3, #96	; 0x60
 8003cea:	443b      	add	r3, r7
 8003cec:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003cf4:	f000 f80c 	bl	8003d10 <verify_meas_time_and_odr_duration>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8003cfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3760      	adds	r7, #96	; 0x60
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	0802113c 	.word	0x0802113c

08003d10 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d202      	bcs.n	8003d28 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
 8003d26:	e001      	b.n	8003d2c <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8003d28:	23fd      	movs	r3, #253	; 0xfd
 8003d2a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr
	...

08003d3c <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	f107 030c 	add.w	r3, r7, #12
 8003d4a:	32b3      	adds	r2, #179	; 0xb3
 8003d4c:	6810      	ldr	r0, [r2, #0]
 8003d4e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8003d5c:	7b3b      	ldrb	r3, [r7, #12]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003d64:	f000 fca2 	bl	80046ac <pow_bmp3>
 8003d68:	6178      	str	r0, [r7, #20]
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8003d6a:	490a      	ldr	r1, [pc, #40]	; (8003d94 <calculate_press_meas_time+0x58>)
 8003d6c:	6978      	ldr	r0, [r7, #20]
 8003d6e:	f7fc fffd 	bl	8000d6c <__aeabi_fmul>
 8003d72:	4603      	mov	r3, r0
 8003d74:	4908      	ldr	r1, [pc, #32]	; (8003d98 <calculate_press_meas_time+0x5c>)
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc fef0 	bl	8000b5c <__addsf3>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd f9e0 	bl	8001144 <__aeabi_f2uiz>
 8003d84:	4603      	mov	r3, r0
 8003d86:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8003d88:	693b      	ldr	r3, [r7, #16]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	44fa0000 	.word	0x44fa0000
 8003d98:	43c40000 	.word	0x43c40000

08003d9c <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	f107 030c 	add.w	r3, r7, #12
 8003daa:	32b3      	adds	r2, #179	; 0xb3
 8003dac:	6810      	ldr	r0, [r2, #0]
 8003dae:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003db8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8003dbc:	7b7b      	ldrb	r3, [r7, #13]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003dc4:	f000 fc72 	bl	80046ac <pow_bmp3>
 8003dc8:	6178      	str	r0, [r7, #20]
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8003dca:	490a      	ldr	r1, [pc, #40]	; (8003df4 <calculate_temp_meas_time+0x58>)
 8003dcc:	6978      	ldr	r0, [r7, #20]
 8003dce:	f7fc ffcd 	bl	8000d6c <__aeabi_fmul>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	4908      	ldr	r1, [pc, #32]	; (8003df8 <calculate_temp_meas_time+0x5c>)
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7fc fec0 	bl	8000b5c <__addsf3>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd f9b0 	bl	8001144 <__aeabi_f2uiz>
 8003de4:	4603      	mov	r3, r0
 8003de6:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8003de8:	693b      	ldr	r3, [r7, #16]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	44fa0000 	.word	0x44fa0000
 8003df8:	439c8000 	.word	0x439c8000

08003dfc <fill_osr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003e0a:	6a3a      	ldr	r2, [r7, #32]
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	32b3      	adds	r2, #179	; 0xb3
 8003e12:	6810      	ldr	r0, [r2, #0]
 8003e14:	6018      	str	r0, [r3, #0]

    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03f      	beq.n	8003ea0 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (settings & BMP3_SEL_PRESS_OS)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d013      	beq.n	8003e52 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	f023 0307 	bic.w	r3, r3, #7
 8003e34:	b25a      	sxtb	r2, r3
 8003e36:	7d3b      	ldrb	r3, [r7, #20]
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	b25b      	sxtb	r3, r3
 8003e40:	4313      	orrs	r3, r2
 8003e42:	b25a      	sxtb	r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	440b      	add	r3, r1
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (settings & BMP3_SEL_TEMP_OS)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d014      	beq.n	8003e86 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003e66:	b25a      	sxtb	r2, r3
 8003e68:	7d7b      	ldrb	r3, [r7, #21]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	b25b      	sxtb	r3, r3
 8003e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	4313      	orrs	r3, r2
 8003e76:	b25a      	sxtb	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	440b      	add	r3, r1
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4413      	add	r3, r2
 8003e90:	221c      	movs	r2, #28
 8003e92:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	701a      	strb	r2, [r3, #0]
    }
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b087      	sub	sp, #28
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	33b3      	adds	r3, #179	; 0xb3
 8003ebc:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	78db      	ldrb	r3, [r3, #3]
 8003ec2:	2b11      	cmp	r3, #17
 8003ec4:	d902      	bls.n	8003ecc <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2211      	movs	r2, #17
 8003eca:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b25b      	sxtb	r3, r3
 8003ed4:	f023 031f 	bic.w	r3, r3, #31
 8003ed8:	b25a      	sxtb	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	78db      	ldrb	r3, [r3, #3]
 8003ede:	b25b      	sxtb	r3, r3
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	b25a      	sxtb	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	440b      	add	r3, r1
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	221d      	movs	r2, #29
 8003f04:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	701a      	strb	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	32b3      	adds	r2, #179	; 0xb3
 8003f32:	6810      	ldr	r0, [r2, #0]
 8003f34:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3303      	adds	r3, #3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	f023 030e 	bic.w	r3, r3, #14
 8003f42:	b25a      	sxtb	r2, r3
 8003f44:	7dbb      	ldrb	r3, [r7, #22]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	b25b      	sxtb	r3, r3
 8003f4a:	f003 030e 	and.w	r3, r3, #14
 8003f4e:	b25b      	sxtb	r3, r3
 8003f50:	4313      	orrs	r3, r2
 8003f52:	b25a      	sxtb	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	440b      	add	r3, r1
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	221f      	movs	r2, #31
 8003f6e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	701a      	strb	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b087      	sub	sp, #28
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3302      	adds	r3, #2
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3303      	adds	r3, #3
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3305      	adds	r3, #5
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr

08003fec <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d022      	beq.n	800404c <compensate_data+0x60>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01f      	beq.n	800404c <compensate_data+0x60>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01c      	beq.n	800404c <compensate_data+0x60>
    {
        /* If pressure or temperature component is selected */
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <compensate_data+0x42>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	68b8      	ldr	r0, [r7, #8]
 8004020:	f000 f9e4 	bl	80043ec <compensate_temperature>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BMP3_PRESS)
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00b      	beq.n	8004050 <compensate_data+0x64>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8004038:	6839      	ldr	r1, [r7, #0]
 800403a:	68b8      	ldr	r0, [r7, #8]
 800403c:	f000 fa19 	bl	8004472 <compensate_pressure>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp & BMP3_PRESS)
 800404a:	e001      	b.n	8004050 <compensate_data+0x64>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800404c:	23ff      	movs	r3, #255	; 0xff
 800404e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8004050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	3390      	adds	r3, #144	; 0x90
 800406a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	3318      	adds	r3, #24
 8004070:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	4ba4      	ldr	r3, [pc, #656]	; (8004308 <parse_calib_data+0x2ac>)
 8004078:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3301      	adds	r3, #1
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	b21a      	sxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	b21b      	sxth	r3, r3
 800408c:	4313      	orrs	r3, r2
 800408e:	b21b      	sxth	r3, r3
 8004090:	b29a      	uxth	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f9b6 	bl	800040c <__aeabi_ui2d>
 80040a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a4:	f7fc fb56 	bl	8000754 <__aeabi_ddiv>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	6939      	ldr	r1, [r7, #16]
 80040ae:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3303      	adds	r3, #3
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	b21a      	sxth	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3302      	adds	r3, #2
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	b21b      	sxth	r3, r3
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	4b8e      	ldr	r3, [pc, #568]	; (800430c <parse_calib_data+0x2b0>)
 80040d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	885b      	ldrh	r3, [r3, #2]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fc f995 	bl	800040c <__aeabi_ui2d>
 80040e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040e6:	f7fc fb35 	bl	8000754 <__aeabi_ddiv>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	6939      	ldr	r1, [r7, #16]
 80040f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b25a      	sxtb	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	4b82      	ldr	r3, [pc, #520]	; (8004310 <parse_calib_data+0x2b4>)
 8004106:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc f98b 	bl	800042c <__aeabi_i2d>
 8004116:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800411a:	f7fc fb1b 	bl	8000754 <__aeabi_ddiv>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	6939      	ldr	r1, [r7, #16]
 8004124:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	3306      	adds	r3, #6
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	b21a      	sxth	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3305      	adds	r3, #5
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	b21b      	sxth	r3, r3
 800413a:	4313      	orrs	r3, r2
 800413c:	b21a      	sxth	r2, r3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	4b73      	ldr	r3, [pc, #460]	; (8004314 <parse_calib_data+0x2b8>)
 8004148:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004152:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc f968 	bl	800042c <__aeabi_i2d>
 800415c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004160:	f7fc faf8 	bl	8000754 <__aeabi_ddiv>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	6939      	ldr	r1, [r7, #16]
 800416a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3308      	adds	r3, #8
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	b21a      	sxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3307      	adds	r3, #7
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b21b      	sxth	r3, r3
 8004180:	4313      	orrs	r3, r2
 8004182:	b21a      	sxth	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	4b62      	ldr	r3, [pc, #392]	; (8004318 <parse_calib_data+0x2bc>)
 800418e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004198:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800419c:	4618      	mov	r0, r3
 800419e:	f7fc f945 	bl	800042c <__aeabi_i2d>
 80041a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a6:	f7fc fad5 	bl	8000754 <__aeabi_ddiv>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	6939      	ldr	r1, [r7, #16]
 80041b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3309      	adds	r3, #9
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	b25a      	sxtb	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	4b55      	ldr	r3, [pc, #340]	; (800431c <parse_calib_data+0x2c0>)
 80041c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fc f92b 	bl	800042c <__aeabi_i2d>
 80041d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041da:	f7fc fabb 	bl	8000754 <__aeabi_ddiv>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	6939      	ldr	r1, [r7, #16]
 80041e4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	330a      	adds	r3, #10
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25a      	sxtb	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 80041f4:	f04f 0200 	mov.w	r2, #0
 80041f8:	4b49      	ldr	r3, [pc, #292]	; (8004320 <parse_calib_data+0x2c4>)
 80041fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc f911 	bl	800042c <__aeabi_i2d>
 800420a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420e:	f7fc faa1 	bl	8000754 <__aeabi_ddiv>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	6939      	ldr	r1, [r7, #16]
 8004218:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	330c      	adds	r3, #12
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	b21a      	sxth	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	330b      	adds	r3, #11
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	b21b      	sxth	r3, r3
 800422e:	4313      	orrs	r3, r2
 8004230:	b21b      	sxth	r3, r3
 8004232:	b29a      	uxth	r2, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004240:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	899b      	ldrh	r3, [r3, #12]
 8004248:	4618      	mov	r0, r3
 800424a:	f7fc f8df 	bl	800040c <__aeabi_ui2d>
 800424e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004252:	f7fc fa7f 	bl	8000754 <__aeabi_ddiv>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	6939      	ldr	r1, [r7, #16]
 800425c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	330e      	adds	r3, #14
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	b21a      	sxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	330d      	adds	r3, #13
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b21b      	sxth	r3, r3
 8004272:	4313      	orrs	r3, r2
 8004274:	b21b      	sxth	r3, r3
 8004276:	b29a      	uxth	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	4b28      	ldr	r3, [pc, #160]	; (8004324 <parse_calib_data+0x2c8>)
 8004282:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	89db      	ldrh	r3, [r3, #14]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc f8be 	bl	800040c <__aeabi_ui2d>
 8004290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004294:	f7fc fa5e 	bl	8000754 <__aeabi_ddiv>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	6939      	ldr	r1, [r7, #16]
 800429e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	330f      	adds	r3, #15
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b25a      	sxtb	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	4b1d      	ldr	r3, [pc, #116]	; (8004328 <parse_calib_data+0x2cc>)
 80042b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fc f8b4 	bl	800042c <__aeabi_i2d>
 80042c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c8:	f7fc fa44 	bl	8000754 <__aeabi_ddiv>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	6939      	ldr	r1, [r7, #16]
 80042d2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3310      	adds	r3, #16
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b25a      	sxtb	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <parse_calib_data+0x2d0>)
 80042e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fc f89a 	bl	800042c <__aeabi_i2d>
 80042f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042fc:	f7fc fa2a 	bl	8000754 <__aeabi_ddiv>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	6939      	ldr	r1, [r7, #16]
 8004306:	e013      	b.n	8004330 <parse_calib_data+0x2d4>
 8004308:	3f700000 	.word	0x3f700000
 800430c:	41d00000 	.word	0x41d00000
 8004310:	42f00000 	.word	0x42f00000
 8004314:	41300000 	.word	0x41300000
 8004318:	41c00000 	.word	0x41c00000
 800431c:	41f00000 	.word	0x41f00000
 8004320:	42400000 	.word	0x42400000
 8004324:	40500000 	.word	0x40500000
 8004328:	40700000 	.word	0x40700000
 800432c:	40e00000 	.word	0x40e00000
 8004330:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3312      	adds	r3, #18
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	b21a      	sxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3311      	adds	r3, #17
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b21b      	sxth	r3, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	b21a      	sxth	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <parse_calib_data+0x38c>)
 8004354:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f864 	bl	800042c <__aeabi_i2d>
 8004364:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004368:	f7fc f9f4 	bl	8000754 <__aeabi_ddiv>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	6939      	ldr	r1, [r7, #16]
 8004372:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3313      	adds	r3, #19
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b25a      	sxtb	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <parse_calib_data+0x38c>)
 8004388:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8004392:	4618      	mov	r0, r3
 8004394:	f7fc f84a 	bl	800042c <__aeabi_i2d>
 8004398:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800439c:	f7fc f9da 	bl	8000754 <__aeabi_ddiv>
 80043a0:	4602      	mov	r2, r0
 80043a2:	460b      	mov	r3, r1
 80043a4:	6939      	ldr	r1, [r7, #16]
 80043a6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3314      	adds	r3, #20
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b25a      	sxtb	r2, r3
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80043be:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc f82f 	bl	800042c <__aeabi_i2d>
 80043ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d2:	f7fc f9bf 	bl	8000754 <__aeabi_ddiv>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	6939      	ldr	r1, [r7, #16]
 80043dc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80043e0:	bf00      	nop
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	42f00000 	.word	0x42f00000

080043ec <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
    uint32_t uncomp_temp = uncomp_data->temperature;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	61fb      	str	r3, [r7, #28]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 80043fc:	69f8      	ldr	r0, [r7, #28]
 80043fe:	f7fc f805 	bl	800040c <__aeabi_ui2d>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f7fb fec2 	bl	8000190 <__aeabi_dsub>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800441a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800441e:	f7fc f86f 	bl	8000500 <__aeabi_dmul>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800442a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800442e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004432:	f7fc f865 	bl	8000500 <__aeabi_dmul>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4610      	mov	r0, r2
 800443c:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8004444:	f7fc f85c 	bl	8000500 <__aeabi_dmul>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4610      	mov	r0, r2
 800444e:	4619      	mov	r1, r3
 8004450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004454:	f7fb fe9e 	bl	8000194 <__adddf3>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	6839      	ldr	r1, [r7, #0]
 800445e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
}
 8004468:	4610      	mov	r0, r2
 800446a:	4619      	mov	r1, r3
 800446c:	3720      	adds	r7, #32
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 * For e.g. returns pressure in Pascal p = 95305.295 which is 953.05295 hecto pascal
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data, const struct bmp3_calib_data *calib_data)
{
 8004472:	b5b0      	push	{r4, r5, r7, lr}
 8004474:	b092      	sub	sp, #72	; 0x48
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8004480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004482:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004488:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800448c:	f7fc f838 	bl	8000500 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 8004498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449a:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 800449e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80044a4:	2202      	movs	r2, #2
 80044a6:	f000 f901 	bl	80046ac <pow_bmp3>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fb ffcf 	bl	8000450 <__aeabi_f2d>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4620      	mov	r0, r4
 80044b8:	4629      	mov	r1, r5
 80044ba:	f7fc f821 	bl	8000500 <__aeabi_dmul>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80044c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80044cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ce:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80044d2:	2203      	movs	r2, #3
 80044d4:	f000 f8ea 	bl	80046ac <pow_bmp3>
 80044d8:	4603      	mov	r3, r0
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fb ffb8 	bl	8000450 <__aeabi_f2d>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4620      	mov	r0, r4
 80044e6:	4629      	mov	r1, r5
 80044e8:	f7fc f80a 	bl	8000500 <__aeabi_dmul>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 80044f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80044fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044fe:	f7fb fe49 	bl	8000194 <__adddf3>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800450e:	f7fb fe41 	bl	8000194 <__adddf3>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800451a:	f7fb fe3b 	bl	8000194 <__adddf3>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8004526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004528:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800452c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004532:	f7fb ffe5 	bl	8000500 <__aeabi_dmul>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800453e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004540:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004546:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800454a:	2202      	movs	r2, #2
 800454c:	f000 f8ae 	bl	80046ac <pow_bmp3>
 8004550:	4603      	mov	r3, r0
 8004552:	4618      	mov	r0, r3
 8004554:	f7fb ff7c 	bl	8000450 <__aeabi_f2d>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4620      	mov	r0, r4
 800455e:	4629      	mov	r1, r5
 8004560:	f7fb ffce 	bl	8000500 <__aeabi_dmul>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800456c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004574:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004578:	2203      	movs	r2, #3
 800457a:	f000 f897 	bl	80046ac <pow_bmp3>
 800457e:	4603      	mov	r3, r0
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb ff65 	bl	8000450 <__aeabi_f2d>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4620      	mov	r0, r4
 800458c:	4629      	mov	r1, r5
 800458e:	f7fb ffb7 	bl	8000500 <__aeabi_dmul>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fb ff34 	bl	800040c <__aeabi_ui2d>
 80045a4:	4604      	mov	r4, r0
 80045a6:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 80045a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80045ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045b2:	f7fb fdef 	bl	8000194 <__adddf3>
 80045b6:	4602      	mov	r2, r0
 80045b8:	460b      	mov	r3, r1
 80045ba:	4610      	mov	r0, r2
 80045bc:	4619      	mov	r1, r3
 80045be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80045c2:	f7fb fde7 	bl	8000194 <__adddf3>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045d2:	f7fb fddf 	bl	8000194 <__adddf3>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	f7fb ff8f 	bl	8000500 <__aeabi_dmul>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fb ff0c 	bl	800040c <__aeabi_ui2d>
 80045f4:	2202      	movs	r2, #2
 80045f6:	f000 f859 	bl	80046ac <pow_bmp3>
 80045fa:	4603      	mov	r3, r0
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fb ff27 	bl	8000450 <__aeabi_f2d>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800460a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8004610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004612:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004618:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800461c:	f7fb ff70 	bl	8000500 <__aeabi_dmul>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4620      	mov	r0, r4
 8004626:	4629      	mov	r1, r5
 8004628:	f7fb fdb4 	bl	8000194 <__adddf3>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8004634:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004638:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800463c:	f7fb ff60 	bl	8000500 <__aeabi_dmul>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fb fedd 	bl	800040c <__aeabi_ui2d>
 8004652:	2203      	movs	r2, #3
 8004654:	f000 f82a 	bl	80046ac <pow_bmp3>
 8004658:	4603      	mov	r3, r0
 800465a:	4618      	mov	r0, r3
 800465c:	f7fb fef8 	bl	8000450 <__aeabi_f2d>
 8004660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004662:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004666:	f7fb ff4b 	bl	8000500 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004672:	f7fb fd8f 	bl	8000194 <__adddf3>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800467e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004682:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004686:	f7fb fd85 	bl	8000194 <__adddf3>
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004692:	f7fb fd7f 	bl	8000194 <__adddf3>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return comp_press;
 800469e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80046a2:	4610      	mov	r0, r2
 80046a4:	4619      	mov	r1, r3
 80046a6:	3748      	adds	r7, #72	; 0x48
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bdb0      	pop	{r4, r5, r7, pc}

080046ac <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80046b6:	4613      	mov	r3, r2
 80046b8:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80046ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80046be:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80046c0:	e00d      	b.n	80046de <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 80046c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046c6:	f7fc f9f3 	bl	8000ab0 <__aeabi_d2f>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4619      	mov	r1, r3
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f7fc fb4c 	bl	8000d6c <__aeabi_fmul>
 80046d4:	4603      	mov	r3, r0
 80046d6:	617b      	str	r3, [r7, #20]
        power--;
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	3b01      	subs	r3, #1
 80046dc:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ee      	bne.n	80046c2 <pow_bmp3+0x16>
    }

    return pow_output;
 80046e4:	697b      	ldr	r3, [r7, #20]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b085      	sub	sp, #20
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
 80046f6:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	4013      	ands	r3, r2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
 800470a:	e001      	b.n	8004710 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004710:	7bfb      	ldrb	r3, [r7, #15]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00f      	beq.n	800474a <null_ptr_check+0x2e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <null_ptr_check+0x2e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <null_ptr_check+0x2e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800474a:	23ff      	movs	r3, #255	; 0xff
 800474c:	73fb      	strb	r3, [r7, #15]
 800474e:	e001      	b.n	8004754 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004754:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	0000      	movs	r0, r0
 8004764:	0000      	movs	r0, r0
	...

08004768 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390(I2C_HandleTypeDef *pntr_hi2c) {
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  _meas_end = 0;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	a312      	add	r3, pc, #72	; (adr r3, 80047e8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	a30f      	add	r3, pc, #60	; (adr r3, 80047e8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	22ee      	movs	r2, #238	; 0xee
 80047b6:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x88>)
 80047c2:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x8c>)
 80047c8:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)pntr_hi2c;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x90>)
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	00000000 	.word	0x00000000
 80047ec:	c08f3800 	.word	0xc08f3800
 80047f0:	08004be3 	.word	0x08004be3
 80047f4:	08004b91 	.word	0x08004b91
 80047f8:	08004a6d 	.word	0x08004a6d

080047fc <_ZN6BMP3904initEv>:

bool BMP390::init(){
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMP3_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3310      	adds	r3, #16
 800480c:	4618      	mov	r0, r3
 800480e:	f7fe fe5c 	bl	80034ca <bmp3_soft_reset>
 8004812:	4603      	mov	r3, r0
 8004814:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 8004816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <_ZN6BMP3904initEv+0x26>
 800481e:	2300      	movs	r3, #0
 8004820:	e028      	b.n	8004874 <_ZN6BMP3904initEv+0x78>

	rslt = bmp3_init(&the_sensor);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3310      	adds	r3, #16
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fc91 	bl	800314e <bmp3_init>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3310      	adds	r3, #16
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f9fd 	bl	8004c34 <_ZL23validate_trimming_paramP8bmp3_dev>
 800483a:	4603      	mov	r3, r0
 800483c:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 800483e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <_ZN6BMP3904initEv+0x4e>
 8004846:	2300      	movs	r3, #0
 8004848:	e014      	b.n	8004874 <_ZN6BMP3904initEv+0x78>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 800484a:	2100      	movs	r1, #0
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f923 	bl	8004a98 <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 8004852:	2100      	movs	r1, #0
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f940 	bl	8004ada <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 800485a:	2100      	movs	r1, #0
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f95d 	bl	8004b1c <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 8004862:	2103      	movs	r1, #3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f97a 	bl	8004b5e <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 8004872:	2301      	movs	r3, #1
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <_ZN6BMP39015readTemperatureEv>:

float BMP390::readTemperature(void) {
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  performReading();
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f86d 	bl	8004964 <_ZN6BMP39014performReadingEv>
  return temperature;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f7fc f90c 	bl	8000ab0 <__aeabi_d2f>
 8004898:	4603      	mov	r3, r0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <_ZN6BMP39012readPressureEv>:

float BMP390::readPressure(void) {
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  performReading();
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f85a 	bl	8004964 <_ZN6BMP39014performReadingEv>
  return pressure;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80048b6:	4610      	mov	r0, r2
 80048b8:	4619      	mov	r1, r3
 80048ba:	f7fc f8f9 	bl	8000ab0 <__aeabi_d2f>
 80048be:	4603      	mov	r3, r0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <_ZN6BMP39011getAltitudeEf>:

float BMP390::getAltitude(float seaLevel) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	if (seaLevel < 0){ //use default sealevel
 80048d2:	f04f 0100 	mov.w	r1, #0
 80048d6:	6838      	ldr	r0, [r7, #0]
 80048d8:	f7fc fbe6 	bl	80010a8 <__aeabi_fcmplt>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <_ZN6BMP39011getAltitudeEf+0x1e>
	  seaLevel = DEFAULT_SEALEVELPRESSURE_HPA;
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <_ZN6BMP39011getAltitudeEf+0x90>)
 80048e4:	603b      	str	r3, [r7, #0]

  // Note that using the equation from wikipedia can give bad results
  // at high altitude. See this thread for more information:
  //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

  float atmospheric = readPressure() / 100.0F; //convert to units of hPa
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ffdb 	bl	80048a2 <_ZN6BMP39012readPressureEv>
 80048ec:	4603      	mov	r3, r0
 80048ee:	491b      	ldr	r1, [pc, #108]	; (800495c <_ZN6BMP39011getAltitudeEf+0x94>)
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fc faef 	bl	8000ed4 <__aeabi_fdiv>
 80048f6:	4603      	mov	r3, r0
 80048f8:	60fb      	str	r3, [r7, #12]
  return 44330.0 * (1.0 - std::pow(atmospheric / seaLevel, 0.1903));
 80048fa:	6839      	ldr	r1, [r7, #0]
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7fc fae9 	bl	8000ed4 <__aeabi_fdiv>
 8004902:	4603      	mov	r3, r0
 8004904:	4619      	mov	r1, r3
 8004906:	a310      	add	r3, pc, #64	; (adr r3, 8004948 <_ZN6BMP39011getAltitudeEf+0x80>)
 8004908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490c:	4608      	mov	r0, r1
 800490e:	f000 fa14 	bl	8004d3a <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	f04f 0000 	mov.w	r0, #0
 800491a:	4911      	ldr	r1, [pc, #68]	; (8004960 <_ZN6BMP39011getAltitudeEf+0x98>)
 800491c:	f7fb fc38 	bl	8000190 <__aeabi_dsub>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4610      	mov	r0, r2
 8004926:	4619      	mov	r1, r3
 8004928:	a309      	add	r3, pc, #36	; (adr r3, 8004950 <_ZN6BMP39011getAltitudeEf+0x88>)
 800492a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492e:	f7fb fde7 	bl	8000500 <__aeabi_dmul>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	f7fc f8b9 	bl	8000ab0 <__aeabi_d2f>
 800493e:	4603      	mov	r3, r0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	1a36e2eb 	.word	0x1a36e2eb
 800494c:	3fc85bc0 	.word	0x3fc85bc0
 8004950:	00000000 	.word	0x00000000
 8004954:	40e5a540 	.word	0x40e5a540
 8004958:	447d5000 	.word	0x447d5000
 800495c:	42c80000 	.word	0x42c80000
 8004960:	3ff00000 	.word	0x3ff00000

08004964 <_ZN6BMP39014performReadingEv>:

bool BMP390::performReading(void) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  /* Used to select the settings user needs to change */
  uint16_t settings_sel = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	83fb      	strh	r3, [r7, #30]
  /* Variable used to select the sensor component */
  uint8_t sensor_comp = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	777b      	strb	r3, [r7, #29]

  /* Select the pressure and temperature sensor to be enabled */
  the_sensor.settings.temp_en = BMP3_ENABLE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  settings_sel |= BMP3_SEL_TEMP_EN;
 800497c:	8bfb      	ldrh	r3, [r7, #30]
 800497e:	f043 0304 	orr.w	r3, r3, #4
 8004982:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_TEMP;
 8004984:	7f7b      	ldrb	r3, [r7, #29]
 8004986:	f043 0302 	orr.w	r3, r3, #2
 800498a:	777b      	strb	r3, [r7, #29]
  if (_tempOSEnabled) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <_ZN6BMP39014performReadingEv+0x3a>
    settings_sel |= BMP3_SEL_TEMP_OS;
 8004996:	8bfb      	ldrh	r3, [r7, #30]
 8004998:	f043 0320 	orr.w	r3, r3, #32
 800499c:	83fb      	strh	r3, [r7, #30]
  }

  the_sensor.settings.press_en = BMP3_ENABLE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  settings_sel |= BMP3_SEL_PRESS_EN;
 80049a6:	8bfb      	ldrh	r3, [r7, #30]
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_PRESS;
 80049ae:	7f7b      	ldrb	r3, [r7, #29]
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	777b      	strb	r3, [r7, #29]
  if (_presOSEnabled) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <_ZN6BMP39014performReadingEv+0x64>
    settings_sel |= BMP3_SEL_PRESS_OS;
 80049c0:	8bfb      	ldrh	r3, [r7, #30]
 80049c2:	f043 0310 	orr.w	r3, r3, #16
 80049c6:	83fb      	strh	r3, [r7, #30]
  }

  if (_filterEnabled) {
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <_ZN6BMP39014performReadingEv+0x76>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 80049d2:	8bfb      	ldrh	r3, [r7, #30]
 80049d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d8:	83fb      	strh	r3, [r7, #30]
  }

  if (_ODREnabled) {
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <_ZN6BMP39014performReadingEv+0x88>
    settings_sel |= BMP3_SEL_ODR;
 80049e4:	8bfb      	ldrh	r3, [r7, #30]
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	83fb      	strh	r3, [r7, #30]

  // set interrupt to data ready
  // settings_sel |= BMP3_DRDY_EN_SEL | BMP3_LEVEL_SEL | BMP3_LATCH_SEL;

  /* Set the desired sensor configuration */
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 80049ec:	8bfa      	ldrh	r2, [r7, #30]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3310      	adds	r3, #16
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7fe fd12 	bl	800341e <bmp3_set_sensor_settings>
 80049fa:	4603      	mov	r3, r0
 80049fc:	773b      	strb	r3, [r7, #28]

  if (rslt != BMP3_OK)
 80049fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <_ZN6BMP39014performReadingEv+0xa6>
    return false;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e02c      	b.n	8004a64 <_ZN6BMP39014performReadingEv+0x100>

  /* Set the power mode */
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  rslt = bmp3_set_op_mode(&the_sensor);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3310      	adds	r3, #16
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe fdaf 	bl	800357a <bmp3_set_op_mode>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004a20:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <_ZN6BMP39014performReadingEv+0xc8>
    return false;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e01b      	b.n	8004a64 <_ZN6BMP39014performReadingEv+0x100>

  /* Variable used to store the compensated data */
  struct bmp3_data data;

  /* Temperature and Pressure data are read and stored in the bmp3_data instance */
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f103 0210 	add.w	r2, r3, #16
 8004a32:	f107 0108 	add.w	r1, r7, #8
 8004a36:	7f7b      	ldrb	r3, [r7, #29]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fe0d 	bl	8003658 <bmp3_get_sensor_data>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004a42:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <_ZN6BMP39014performReadingEv+0xea>
    return false;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e00a      	b.n	8004a64 <_ZN6BMP39014performReadingEv+0x100>


  /* Save the temperature and pressure data */
  temperature = data.temperature;
 8004a4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = data.pressure;
 8004a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return true;
 8004a62:	2301      	movs	r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3720      	adds	r7, #32
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_ZL10delay_usecmPv>:

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <_ZL10delay_usecmPv+0x28>)
 8004a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7e:	099b      	lsrs	r3, r3, #6
 8004a80:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fd fe21 	bl	80026cc <HAL_Delay>
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	10624dd3 	.word	0x10624dd3

08004a98 <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d901      	bls.n	8004aae <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e010      	b.n	8004ad0 <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004ab6:	78fb      	ldrb	r3, [r7, #3]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004ac4:	e003      	b.n	8004ace <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 8004ace:	2301      	movs	r3, #1
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d901      	bls.n	8004af0 <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e010      	b.n	8004b12 <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	78fa      	ldrb	r2, [r7, #3]
 8004af4:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004b06:	e003      	b.n	8004b10 <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 8004b10:	2301      	movs	r3, #1
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 8004b28:	78fb      	ldrb	r3, [r7, #3]
 8004b2a:	2b07      	cmp	r3, #7
 8004b2c:	d901      	bls.n	8004b32 <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e010      	b.n	8004b54 <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	78fa      	ldrb	r2, [r7, #3]
 8004b36:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d104      	bne.n	8004b4a <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004b48:	e003      	b.n	8004b52 <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 8004b52:	2301      	movs	r3, #1
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bc80      	pop	{r7}
 8004b5c:	4770      	bx	lr

08004b5e <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	2b11      	cmp	r3, #17
 8004b6e:	d901      	bls.n	8004b74 <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 8004b70:	2300      	movs	r3, #0
 8004b72:	e008      	b.n	8004b86 <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	78fa      	ldrb	r2, [r7, #3]
 8004b78:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 8004b84:	2301      	movs	r3, #1
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08a      	sub	sp, #40	; 0x28
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60b9      	str	r1, [r7, #8]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	f04f 31ff 	mov.w	r1, #4294967295
 8004bb0:	9102      	str	r1, [sp, #8]
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	2301      	movs	r3, #1
 8004bba:	21ee      	movs	r1, #238	; 0xee
 8004bbc:	6978      	ldr	r0, [r7, #20]
 8004bbe:	f002 fce3 	bl	8007588 <HAL_I2C_Mem_Write>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	e000      	b.n	8004bda <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b08a      	sub	sp, #40	; 0x28
 8004be6:	af04      	add	r7, sp, #16
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8004c02:	9102      	str	r1, [sp, #8]
 8004c04:	9301      	str	r3, [sp, #4]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	21ee      	movs	r1, #238	; 0xee
 8004c0e:	6978      	ldr	r0, [r7, #20]
 8004c10:	f002 fdce 	bl	80077b0 <HAL_I2C_Mem_Read>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004c24:	f04f 33ff 	mov.w	r3, #4294967295
 8004c28:	e000      	b.n	8004c2c <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08a      	sub	sp, #40	; 0x28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 8004c3c:	23ff      	movs	r3, #255	; 0xff
 8004c3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 8004c42:	f107 010c 	add.w	r1, r7, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2215      	movs	r2, #21
 8004c4a:	2031      	movs	r0, #49	; 0x31
 8004c4c:	f7fe fac6 	bl	80031dc <bmp3_get_regs>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 8004c56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d133      	bne.n	8004cc6 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 8004c5e:	2300      	movs	r3, #0
 8004c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c68:	2b14      	cmp	r3, #20
 8004c6a:	d814      	bhi.n	8004c96 <_ZL23validate_trimming_paramP8bmp3_dev+0x62>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 8004c6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c70:	3328      	adds	r3, #40	; 0x28
 8004c72:	443b      	add	r3, r7
 8004c74:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 8004c78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 f827 	bl	8004cd2 <_ZL7cal_crchh>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 8004c8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004c8e:	3301      	adds	r3, #1
 8004c90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8004c94:	e7e6      	b.n	8004c64 <_ZL23validate_trimming_paramP8bmp3_dev+0x30>
    }

    crc = (crc ^ 0xFF);
 8004c96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8004ca0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2030      	movs	r0, #48	; 0x30
 8004caa:	f7fe fa97 	bl	80031dc <bmp3_get_regs>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 8004cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d002      	beq.n	8004cc6 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 8004cc0:	23ff      	movs	r3, #255	; 0xff
 8004cc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 8004cc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3728      	adds	r7, #40	; 0x28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 8004cd2:	b480      	push	{r7}
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	4603      	mov	r3, r0
 8004cda:	460a      	mov	r2, r1
 8004cdc:	71fb      	strb	r3, [r7, #7]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 8004ce2:	231d      	movs	r3, #29
 8004ce4:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73bb      	strb	r3, [r7, #14]
 8004cea:	7bbb      	ldrb	r3, [r7, #14]
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	d81d      	bhi.n	8004d2c <_ZL7cal_crchh+0x5a>
    if ((seed & 0x80) ^ (data & 0x80)) {
 8004cf0:	79fa      	ldrb	r2, [r7, #7]
 8004cf2:	79bb      	ldrb	r3, [r7, #6]
 8004cf4:	4053      	eors	r3, r2
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	b25b      	sxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da02      	bge.n	8004d04 <_ZL7cal_crchh+0x32>
      var2 = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e001      	b.n	8004d08 <_ZL7cal_crchh+0x36>
    } else {
      var2 = 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8004d0e:	79bb      	ldrb	r3, [r7, #6]
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8004d14:	7b7a      	ldrb	r2, [r7, #13]
 8004d16:	7bfb      	ldrb	r3, [r7, #15]
 8004d18:	fb12 f303 	smulbb	r3, r2, r3
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	79fb      	ldrb	r3, [r7, #7]
 8004d20:	4053      	eors	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8004d24:	7bbb      	ldrb	r3, [r7, #14]
 8004d26:	3301      	adds	r3, #1
 8004d28:	73bb      	strb	r3, [r7, #14]
 8004d2a:	e7de      	b.n	8004cea <_ZL7cal_crchh+0x18>
  }

  return (int8_t)seed;
 8004d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	e9c7 2300 	strd	r2, r3, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f7fb fb82 	bl	8000450 <__aeabi_f2d>
 8004d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d50:	f01b fa96 	bl	8020280 <pow>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
    }
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <_ZN12LSM303_AccelC1EP19__I2C_HandleTypeDef>:
#include <lsm303_accel.hpp>

LSM303_Accel::LSM303_Accel(I2C_HandleTypeDef *pntr_hi2c) {
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
  pntr_hi2c = pntr_hi2c;

  // Initialize the raw accel data
  data.x = 0;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
  data.y = 0;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	60da      	str	r2, [r3, #12]
  data.z = 0;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	611a      	str	r2, [r3, #16]
}
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4618      	mov	r0, r3
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>:
#include <env_sensors.hpp>

EnvionmentSensors::EnvionmentSensors(I2C_HandleTypeDef *pntr_hi2c) : bmp(pntr_hi2c), lsm_accel(pntr_hi2c) {
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fce2 	bl	8004768 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	33f8      	adds	r3, #248	; 0xf8
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ffd9 	bl	8004d62 <_ZN12LSM303_AccelC1EP19__I2C_HandleTypeDef>
  if(bmp.init()){
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fd22 	bl	80047fc <_ZN6BMP3904initEv>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d006      	beq.n	8004dcc <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x3c>
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x7c>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	2002      	movs	r0, #2
 8004dc6:	f01a ff61 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
 8004dca:	e005      	b.n	8004dd8 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x48>
  } else {
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x80>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	2002      	movs	r0, #2
 8004dd4:	f01a ff5a 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
  }
  bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2103      	movs	r1, #3
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7ff fe5b 	bl	8004a98 <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2102      	movs	r1, #2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fe77 	bl	8004ada <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2102      	movs	r1, #2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff fe93 	bl	8004b1c <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2102      	movs	r1, #2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff feaf 	bl	8004b5e <_ZN6BMP39017setOutputDataRateEh>

}
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08021184 	.word	0x08021184
 8004e10:	0802119c 	.word	0x0802119c

08004e14 <_ZN17EnvionmentSensors11getPressureEv>:

float EnvionmentSensors::getPressure(){
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	return bmp.readPressure();
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fd3f 	bl	80048a2 <_ZN6BMP39012readPressureEv>
 8004e24:	4603      	mov	r3, r0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <_ZN17EnvionmentSensors14getTemperatureEv>:

float EnvionmentSensors::getTemperature(){
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b082      	sub	sp, #8
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
	return bmp.readTemperature();
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fd1f 	bl	800487c <_ZN6BMP39015readTemperatureEv>
 8004e3e:	4603      	mov	r3, r0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <_ZN17EnvionmentSensors11getAltitudeEf>:

float EnvionmentSensors::getAltitude(float seaLevel){
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  return bmp.getAltitude(seaLevel);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6839      	ldr	r1, [r7, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fd36 	bl	80048c8 <_ZN6BMP39011getAltitudeEf>
 8004e5c:	4603      	mov	r3, r0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b086      	sub	sp, #24
 8004e6a:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8004e6c:	1d3b      	adds	r3, r7, #4
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	605a      	str	r2, [r3, #4]
 8004e74:	609a      	str	r2, [r3, #8]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8004e7a:	2310      	movs	r3, #16
 8004e7c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e86:	2303      	movs	r3, #3
 8004e88:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8004e8a:	1d3b      	adds	r3, r7, #4
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e92:	f002 f88b 	bl	8006fac <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8004e96:	2320      	movs	r3, #32
 8004e98:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8004e9a:	1d3b      	adds	r3, r7, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ea2:	f002 f883 	bl	8006fac <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eae:	f002 faab 	bl	8007408 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2110      	movs	r1, #16
 8004eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eba:	f002 faa5 	bl	8007408 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	4603      	mov	r3, r0
 8004ed0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d83f      	bhi.n	8004f58 <BSP_RADIO_ConfigRFSwitch+0x90>
 8004ed8:	a201      	add	r2, pc, #4	; (adr r2, 8004ee0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f0b 	.word	0x08004f0b
 8004ee8:	08004f25 	.word	0x08004f25
 8004eec:	08004f3f 	.word	0x08004f3f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2110      	movs	r1, #16
 8004ef4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ef8:	f002 fa86 	bl	8007408 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004efc:	2200      	movs	r2, #0
 8004efe:	2120      	movs	r1, #32
 8004f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f04:	f002 fa80 	bl	8007408 <HAL_GPIO_WritePin>
      break;      
 8004f08:	e027      	b.n	8004f5a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	2110      	movs	r1, #16
 8004f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f12:	f002 fa79 	bl	8007408 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004f16:	2200      	movs	r2, #0
 8004f18:	2120      	movs	r1, #32
 8004f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f1e:	f002 fa73 	bl	8007408 <HAL_GPIO_WritePin>
      break;
 8004f22:	e01a      	b.n	8004f5a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004f24:	2201      	movs	r2, #1
 8004f26:	2110      	movs	r1, #16
 8004f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f2c:	f002 fa6c 	bl	8007408 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004f30:	2201      	movs	r2, #1
 8004f32:	2120      	movs	r1, #32
 8004f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f38:	f002 fa66 	bl	8007408 <HAL_GPIO_WritePin>
      break;
 8004f3c:	e00d      	b.n	8004f5a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2110      	movs	r1, #16
 8004f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f46:	f002 fa5f 	bl	8007408 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	2120      	movs	r1, #32
 8004f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f52:	f002 fa59 	bl	8007408 <HAL_GPIO_WritePin>
      break;
 8004f56:	e000      	b.n	8004f5a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8004f58:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8004f68:	2302      	movs	r3, #2
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bc80      	pop	{r7}
 8004f70:	4770      	bx	lr

08004f72 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8004f72:	b480      	push	{r7}
 8004f74:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8004f76:	2301      	movs	r3, #1
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr

08004f80 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8004f84:	2301      	movs	r3, #1
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bc80      	pop	{r7}
 8004f8c:	4770      	bx	lr

08004f8e <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	4603      	mov	r3, r0
 8004f96:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d102      	bne.n	8004fa4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8004f9e:	230f      	movs	r3, #15
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e001      	b.n	8004fa8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8004fa4:	2316      	movs	r3, #22
 8004fa6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	6053      	str	r3, [r2, #4]
}
 8004fc4:	bf00      	nop
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	e0042000 	.word	0xe0042000

08004fd0 <LL_DBGMCU_DisableDBGStopMode>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8004fda:	f023 0302 	bic.w	r3, r3, #2
 8004fde:	6053      	str	r3, [r2, #4]
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr
 8004fe8:	e0042000 	.word	0xe0042000

08004fec <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4a03      	ldr	r2, [pc, #12]	; (8005004 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8004ff6:	f023 0304 	bic.w	r3, r3, #4
 8004ffa:	6053      	str	r3, [r2, #4]
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	e0042000 	.word	0xe0042000

08005008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005012:	2003      	movs	r0, #3
 8005014:	f001 f984 	bl	8006320 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005018:	f004 f802 	bl	8009020 <HAL_RCC_GetHCLKFreq>
 800501c:	4603      	mov	r3, r0
 800501e:	4a09      	ldr	r2, [pc, #36]	; (8005044 <HAL_Init+0x3c>)
 8005020:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005022:	200f      	movs	r0, #15
 8005024:	f7fd fb34 	bl	8002690 <HAL_InitTick>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	71fb      	strb	r3, [r7, #7]
 8005032:	e001      	b.n	8005038 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005034:	f7fd f902 	bl	800223c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005038:	79fb      	ldrb	r3, [r7, #7]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	20000000 	.word	0x20000000

08005048 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800504c:	4b02      	ldr	r3, [pc, #8]	; (8005058 <HAL_GetUIDw0+0x10>)
 800504e:	681b      	ldr	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr
 8005058:	1fff7590 	.word	0x1fff7590

0800505c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005060:	4b02      	ldr	r3, [pc, #8]	; (800506c <HAL_GetUIDw1+0x10>)
 8005062:	681b      	ldr	r3, [r3, #0]
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	1fff7594 	.word	0x1fff7594

08005070 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005074:	4b02      	ldr	r3, [pc, #8]	; (8005080 <HAL_GetUIDw2+0x10>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	1fff7598 	.word	0x1fff7598

08005084 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8005088:	f7ff ff94 	bl	8004fb4 <LL_DBGMCU_DisableDBGSleepMode>
}
 800508c:	bf00      	nop
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8005094:	f7ff ff9c 	bl	8004fd0 <LL_DBGMCU_DisableDBGStopMode>
}
 8005098:	bf00      	nop
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80050a0:	f7ff ffa4 	bl	8004fec <LL_DBGMCU_DisableDBGStandbyMode>
}
 80050a4:	bf00      	nop
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	431a      	orrs	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b085      	sub	sp, #20
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2107      	movs	r1, #7
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	43db      	mvns	r3, r3
 8005104:	401a      	ands	r2, r3
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	431a      	orrs	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bc80      	pop	{r7}
 8005120:	4770      	bx	lr

08005122 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2107      	movs	r1, #7
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f003 031f 	and.w	r3, r3, #31
 800518c:	210f      	movs	r1, #15
 800518e:	fa01 f303 	lsl.w	r3, r1, r3
 8005192:	43db      	mvns	r3, r3
 8005194:	401a      	ands	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	0e9b      	lsrs	r3, r3, #26
 800519a:	f003 010f 	and.w	r1, r3, #15
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	fa01 f303 	lsl.w	r3, r1, r3
 80051a8:	431a      	orrs	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80051f0:	43db      	mvns	r3, r3
 80051f2:	401a      	ands	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005202:	b480      	push	{r7}
 8005204:	b085      	sub	sp, #20
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	43db      	mvns	r3, r3
 8005218:	401a      	ands	r2, r3
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	0219      	lsls	r1, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	400b      	ands	r3, r1
 8005222:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800522a:	431a      	orrs	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005230:	bf00      	nop
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	bc80      	pop	{r7}
 8005238:	4770      	bx	lr

0800523a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800524a:	f023 0317 	bic.w	r3, r3, #23
 800524e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bc80      	pop	{r7}
 800525e:	4770      	bx	lr

08005260 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005270:	f023 0317 	bic.w	r3, r3, #23
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6093      	str	r3, [r2, #8]
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005282:	b480      	push	{r7}
 8005284:	b083      	sub	sp, #12
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005296:	d101      	bne.n	800529c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052b8:	f023 0317 	bic.w	r3, r3, #23
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052de:	f023 0317 	bic.w	r3, r3, #23
 80052e2:	f043 0202 	orr.w	r2, r3, #2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <LL_ADC_IsEnabled+0x18>
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <LL_ADC_IsEnabled+0x1a>
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b02      	cmp	r3, #2
 800532a:	d101      	bne.n	8005330 <LL_ADC_IsDisableOngoing+0x18>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <LL_ADC_IsDisableOngoing+0x1a>
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800534c:	f023 0317 	bic.w	r3, r3, #23
 8005350:	f043 0204 	orr.w	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005372:	f023 0317 	bic.w	r3, r3, #23
 8005376:	f043 0210 	orr.w	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b04      	cmp	r3, #4
 800539a:	d101      	bne.n	80053a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800539c:	2301      	movs	r3, #1
 800539e:	e000      	b.n	80053a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80053b8:	2300      	movs	r3, #0
 80053ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d101      	bne.n	80053ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e17e      	b.n	80056cc <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d109      	bne.n	80053f0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7fc f8cb 	bl	8001578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff ff44 	bl	8005282 <LL_ADC_IsInternalRegulatorEnabled>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d115      	bne.n	800542c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ff18 	bl	800523a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800540a:	4b9e      	ldr	r3, [pc, #632]	; (8005684 <HAL_ADC_Init+0x2d8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	099b      	lsrs	r3, r3, #6
 8005410:	4a9d      	ldr	r2, [pc, #628]	; (8005688 <HAL_ADC_Init+0x2dc>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	099b      	lsrs	r3, r3, #6
 8005418:	3301      	adds	r3, #1
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800541e:	e002      	b.n	8005426 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3b01      	subs	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f9      	bne.n	8005420 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff26 	bl	8005282 <LL_ADC_IsInternalRegulatorEnabled>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10d      	bne.n	8005458 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005440:	f043 0210 	orr.w	r2, r3, #16
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800544c:	f043 0201 	orr.w	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ff93 	bl	8005388 <LL_ADC_REG_IsConversionOngoing>
 8005462:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 8124 	bne.w	80056ba <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f040 8120 	bne.w	80056ba <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005482:	f043 0202 	orr.w	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff ff30 	bl	80052f4 <LL_ADC_IsEnabled>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	f040 80a7 	bne.w	80055ea <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	7e1b      	ldrb	r3, [r3, #24]
 80054a4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80054a6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	7e5b      	ldrb	r3, [r3, #25]
 80054ac:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80054ae:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	7e9b      	ldrb	r3, [r3, #26]
 80054b4:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80054b6:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054bc:	2a00      	cmp	r2, #0
 80054be:	d002      	beq.n	80054c6 <HAL_ADC_Init+0x11a>
 80054c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80054c4:	e000      	b.n	80054c8 <HAL_ADC_Init+0x11c>
 80054c6:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80054c8:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80054ce:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	da04      	bge.n	80054e2 <HAL_ADC_Init+0x136>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054e0:	e001      	b.n	80054e6 <HAL_ADC_Init+0x13a>
 80054e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80054e6:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80054ee:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80054f0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d114      	bne.n	800552c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	7e9b      	ldrb	r3, [r3, #26]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e00b      	b.n	800552c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005524:	f043 0201 	orr.w	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d009      	beq.n	8005548 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005540:	4313      	orrs	r3, r2
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4313      	orrs	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8005552:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6812      	ldr	r2, [r2, #0]
 800555a:	69b9      	ldr	r1, [r7, #24]
 800555c:	430b      	orrs	r3, r1
 800555e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800556c:	4313      	orrs	r3, r2
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	4313      	orrs	r3, r2
 8005572:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d111      	bne.n	80055a2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800558a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005590:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005596:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	4b38      	ldr	r3, [pc, #224]	; (800568c <HAL_ADC_Init+0x2e0>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	6979      	ldr	r1, [r7, #20]
 80055b2:	430b      	orrs	r3, r1
 80055b4:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80055be:	d014      	beq.n	80055ea <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80055c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c8:	d00f      	beq.n	80055ea <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80055ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055d2:	d00a      	beq.n	80055ea <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80055d4:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <HAL_ADC_Init+0x2e4>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80055e4:	492a      	ldr	r1, [pc, #168]	; (8005690 <HAL_ADC_Init+0x2e4>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	461a      	mov	r2, r3
 80055f4:	2100      	movs	r1, #0
 80055f6:	f7ff fd76 	bl	80050e6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005602:	461a      	mov	r2, r3
 8005604:	4923      	ldr	r1, [pc, #140]	; (8005694 <HAL_ADC_Init+0x2e8>)
 8005606:	f7ff fd6e 	bl	80050e6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d108      	bne.n	8005624 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f062 020f 	orn	r2, r2, #15
 8005620:	629a      	str	r2, [r3, #40]	; 0x28
 8005622:	e017      	b.n	8005654 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800562c:	d112      	bne.n	8005654 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	3b01      	subs	r3, #1
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	f003 031c 	and.w	r3, r3, #28
 8005640:	f06f 020f 	mvn.w	r2, #15
 8005644:	fa02 f103 	lsl.w	r1, r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fd61 	bl	8005122 <LL_ADC_GetSamplingTimeCommonChannels>
 8005660:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005666:	429a      	cmp	r2, r3
 8005668:	d116      	bne.n	8005698 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005674:	f023 0303 	bic.w	r3, r3, #3
 8005678:	f043 0201 	orr.w	r2, r3, #1
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005680:	e023      	b.n	80056ca <HAL_ADC_Init+0x31e>
 8005682:	bf00      	nop
 8005684:	20000000 	.word	0x20000000
 8005688:	053e2d63 	.word	0x053e2d63
 800568c:	1ffffc02 	.word	0x1ffffc02
 8005690:	40012708 	.word	0x40012708
 8005694:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	f023 0312 	bic.w	r3, r3, #18
 80056a0:	f043 0210 	orr.w	r2, r3, #16
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	f043 0201 	orr.w	r2, r3, #1
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80056b8:	e007      	b.n	80056ca <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	f043 0210 	orr.w	r2, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e07a      	b.n	80057dc <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ea:	f043 0202 	orr.w	r2, r3, #2
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 face 	bl	8005c94 <ADC_ConversionStop>
 80056f8:	4603      	mov	r3, r0
 80056fa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fb92 	bl	8005e2c <ADC_Disable>
 8005708:	4603      	mov	r3, r0
 800570a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fd9f 	bl	8005260 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6812      	ldr	r2, [r2, #0]
 800572c:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8005730:	f023 0303 	bic.w	r3, r3, #3
 8005734:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f240 329f 	movw	r2, #927	; 0x39f
 800573e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68d9      	ldr	r1, [r3, #12]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <HAL_ADC_DeInit+0x110>)
 800574c:	400b      	ands	r3, r1
 800574e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800575e:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0207 	bic.w	r2, r2, #7
 800576e:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800577e:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800578e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2200      	movs	r2, #0
 80057ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <HAL_ADC_DeInit+0x114>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a0d      	ldr	r2, [pc, #52]	; (80057e8 <HAL_ADC_DeInit+0x114>)
 80057b4:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80057b8:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fb fef0 	bl	80015a0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80057da:	7bfb      	ldrb	r3, [r7, #15]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	833e0200 	.word	0x833e0200
 80057e8:	40012708 	.word	0x40012708

080057ec <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fdc5 	bl	8005388 <LL_ADC_REG_IsConversionOngoing>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d132      	bne.n	800586a <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_ADC_Start+0x26>
 800580e:	2302      	movs	r3, #2
 8005810:	e02e      	b.n	8005870 <HAL_ADC_Start+0x84>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa80 	bl	8005d20 <ADC_Enable>
 8005820:	4603      	mov	r3, r0
 8005822:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d11a      	bne.n	8005860 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	221c      	movs	r2, #28
 800584a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fd6f 	bl	800533c <LL_ADC_REG_StartConversion>
 800585e:	e006      	b.n	800586e <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005868:	e001      	b.n	800586e <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800586a:	2302      	movs	r3, #2
 800586c:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_ADC_Stop+0x16>
 800588a:	2302      	movs	r3, #2
 800588c:	e022      	b.n	80058d4 <HAL_ADC_Stop+0x5c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9fc 	bl	8005c94 <ADC_ConversionStop>
 800589c:	4603      	mov	r3, r0
 800589e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d111      	bne.n	80058ca <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fac0 	bl	8005e2c <ADC_Disable>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	f043 0201 	orr.w	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d102      	bne.n	80058f4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80058ee:	2308      	movs	r3, #8
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	e010      	b.n	8005916 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	f043 0220 	orr.w	r2, r3, #32
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e077      	b.n	8005a02 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8005912:	2304      	movs	r3, #4
 8005914:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005916:	f7fc fec5 	bl	80026a4 <HAL_GetTick>
 800591a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800591c:	e021      	b.n	8005962 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d01d      	beq.n	8005962 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005926:	f7fc febd 	bl	80026a4 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <HAL_ADC_PollForConversion+0x60>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d112      	bne.n	8005962 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	4013      	ands	r3, r2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	f043 0204 	orr.w	r2, r3, #4
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e04f      	b.n	8005a02 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0d6      	beq.n	800591e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005974:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fbe6 	bl	8005152 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d031      	beq.n	80059f0 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7e9b      	ldrb	r3, [r3, #26]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d12d      	bne.n	80059f0 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d126      	bne.n	80059f0 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff fcee 	bl	8005388 <LL_ADC_REG_IsConversionOngoing>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d112      	bne.n	80059d8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 020c 	bic.w	r2, r2, #12
 80059c0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	f043 0201 	orr.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	659a      	str	r2, [r3, #88]	; 0x58
 80059d6:	e00b      	b.n	80059f0 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059dc:	f043 0220 	orr.w	r2, r3, #32
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059e8:	f043 0201 	orr.w	r2, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	7e1b      	ldrb	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d103      	bne.n	8005a00 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	220c      	movs	r2, #12
 80059fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_ADC_ConfigChannel+0x28>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e110      	b.n	8005c6e <HAL_ADC_ConfigChannel+0x24a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fc95 	bl	8005388 <LL_ADC_REG_IsConversionOngoing>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 80f7 	bne.w	8005c54 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	f000 80b1 	beq.w	8005bd2 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a78:	d004      	beq.n	8005a84 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005a7e:	4a7e      	ldr	r2, [pc, #504]	; (8005c78 <HAL_ADC_ConfigChannel+0x254>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d108      	bne.n	8005a96 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f7ff fb92 	bl	80051b8 <LL_ADC_REG_SetSequencerChAdd>
 8005a94:	e041      	b.n	8005b1a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	210f      	movs	r1, #15
 8005aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	401a      	ands	r2, r3
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <HAL_ADC_ConfigChannel+0xa0>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	0e9b      	lsrs	r3, r3, #26
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	e011      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0xc4>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	fa93 f3a3 	rbit	r3, r3
 8005ad0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8005adc:	2320      	movs	r3, #32
 8005ade:	e003      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	fab3 f383 	clz	r3, r3
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6849      	ldr	r1, [r1, #4]
 8005aec:	f001 011f 	and.w	r1, r1, #31
 8005af0:	408b      	lsls	r3, r1
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	089b      	lsrs	r3, r3, #2
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d808      	bhi.n	8005b1a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	6859      	ldr	r1, [r3, #4]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	f7ff fb2e 	bl	8005176 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f7ff fb6b 	bl	8005202 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f280 8097 	bge.w	8005c64 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b36:	4851      	ldr	r0, [pc, #324]	; (8005c7c <HAL_ADC_ConfigChannel+0x258>)
 8005b38:	f7ff fac8 	bl	80050cc <LL_ADC_GetCommonPathInternalCh>
 8005b3c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a4f      	ldr	r2, [pc, #316]	; (8005c80 <HAL_ADC_ConfigChannel+0x25c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d120      	bne.n	8005b8a <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11b      	bne.n	8005b8a <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4848      	ldr	r0, [pc, #288]	; (8005c7c <HAL_ADC_ConfigChannel+0x258>)
 8005b5c:	f7ff faa4 	bl	80050a8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b60:	4b48      	ldr	r3, [pc, #288]	; (8005c84 <HAL_ADC_ConfigChannel+0x260>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	099b      	lsrs	r3, r3, #6
 8005b66:	4a48      	ldr	r2, [pc, #288]	; (8005c88 <HAL_ADC_ConfigChannel+0x264>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	099b      	lsrs	r3, r3, #6
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	4613      	mov	r3, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005b7a:	e002      	b.n	8005b82 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1f9      	bne.n	8005b7c <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005b88:	e06c      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a3f      	ldr	r2, [pc, #252]	; (8005c8c <HAL_ADC_ConfigChannel+0x268>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10c      	bne.n	8005bae <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d107      	bne.n	8005bae <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4835      	ldr	r0, [pc, #212]	; (8005c7c <HAL_ADC_ConfigChannel+0x258>)
 8005ba8:	f7ff fa7e 	bl	80050a8 <LL_ADC_SetCommonPathInternalCh>
 8005bac:	e05a      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a37      	ldr	r2, [pc, #220]	; (8005c90 <HAL_ADC_ConfigChannel+0x26c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d155      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d150      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005bc8:	4619      	mov	r1, r3
 8005bca:	482c      	ldr	r0, [pc, #176]	; (8005c7c <HAL_ADC_ConfigChannel+0x258>)
 8005bcc:	f7ff fa6c 	bl	80050a8 <LL_ADC_SetCommonPathInternalCh>
 8005bd0:	e048      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bda:	d004      	beq.n	8005be6 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005be0:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <HAL_ADC_ConfigChannel+0x254>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d107      	bne.n	8005bf6 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	f7ff faf3 	bl	80051dc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	da32      	bge.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bfe:	481f      	ldr	r0, [pc, #124]	; (8005c7c <HAL_ADC_ConfigChannel+0x258>)
 8005c00:	f7ff fa64 	bl	80050cc <LL_ADC_GetCommonPathInternalCh>
 8005c04:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <HAL_ADC_ConfigChannel+0x25c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d107      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c16:	4619      	mov	r1, r3
 8005c18:	4818      	ldr	r0, [pc, #96]	; (8005c7c <HAL_ADC_ConfigChannel+0x258>)
 8005c1a:	f7ff fa45 	bl	80050a8 <LL_ADC_SetCommonPathInternalCh>
 8005c1e:	e021      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <HAL_ADC_ConfigChannel+0x268>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d107      	bne.n	8005c3a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c30:	4619      	mov	r1, r3
 8005c32:	4812      	ldr	r0, [pc, #72]	; (8005c7c <HAL_ADC_ConfigChannel+0x258>)
 8005c34:	f7ff fa38 	bl	80050a8 <LL_ADC_SetCommonPathInternalCh>
 8005c38:	e014      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a14      	ldr	r2, [pc, #80]	; (8005c90 <HAL_ADC_ConfigChannel+0x26c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d10f      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	480b      	ldr	r0, [pc, #44]	; (8005c7c <HAL_ADC_ConfigChannel+0x258>)
 8005c4e:	f7ff fa2b 	bl	80050a8 <LL_ADC_SetCommonPathInternalCh>
 8005c52:	e007      	b.n	8005c64 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c58:	f043 0220 	orr.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	80000004 	.word	0x80000004
 8005c7c:	40012708 	.word	0x40012708
 8005c80:	b0001000 	.word	0xb0001000
 8005c84:	20000000 	.word	0x20000000
 8005c88:	053e2d63 	.word	0x053e2d63
 8005c8c:	b8004000 	.word	0xb8004000
 8005c90:	b4002000 	.word	0xb4002000

08005c94 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff fb71 	bl	8005388 <LL_ADC_REG_IsConversionOngoing>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d033      	beq.n	8005d14 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7ff fb31 	bl	8005318 <LL_ADC_IsDisableOngoing>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d104      	bne.n	8005cc6 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff fb4e 	bl	8005362 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005cc6:	f7fc fced 	bl	80026a4 <HAL_GetTick>
 8005cca:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005ccc:	e01b      	b.n	8005d06 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005cce:	f7fc fce9 	bl	80026a4 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d914      	bls.n	8005d06 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0304 	and.w	r3, r3, #4
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cee:	f043 0210 	orr.w	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e007      	b.n	8005d16 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1dc      	bne.n	8005cce <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fadf 	bl	80052f4 <LL_ADC_IsEnabled>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d169      	bne.n	8005e10 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <ADC_Enable+0xfc>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00d      	beq.n	8005d66 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4e:	f043 0210 	orr.w	r2, r3, #16
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e055      	b.n	8005e12 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fa9c 	bl	80052a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005d70:	482b      	ldr	r0, [pc, #172]	; (8005e20 <ADC_Enable+0x100>)
 8005d72:	f7ff f9ab 	bl	80050cc <LL_ADC_GetCommonPathInternalCh>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00f      	beq.n	8005da0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d80:	4b28      	ldr	r3, [pc, #160]	; (8005e24 <ADC_Enable+0x104>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	099b      	lsrs	r3, r3, #6
 8005d86:	4a28      	ldr	r2, [pc, #160]	; (8005e28 <ADC_Enable+0x108>)
 8005d88:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8c:	099b      	lsrs	r3, r3, #6
 8005d8e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005d90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005d92:	e002      	b.n	8005d9a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f9      	bne.n	8005d94 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	7e5b      	ldrb	r3, [r3, #25]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d033      	beq.n	8005e10 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005da8:	f7fc fc7c 	bl	80026a4 <HAL_GetTick>
 8005dac:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dae:	e028      	b.n	8005e02 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fa9d 	bl	80052f4 <LL_ADC_IsEnabled>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff fa6f 	bl	80052a8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005dca:	f7fc fc6b 	bl	80026a4 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d914      	bls.n	8005e02 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d00d      	beq.n	8005e02 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dea:	f043 0210 	orr.w	r2, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	f043 0201 	orr.w	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e007      	b.n	8005e12 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d1cf      	bne.n	8005db0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	80000017 	.word	0x80000017
 8005e20:	40012708 	.word	0x40012708
 8005e24:	20000000 	.word	0x20000000
 8005e28:	053e2d63 	.word	0x053e2d63

08005e2c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff fa6d 	bl	8005318 <LL_ADC_IsDisableOngoing>
 8005e3e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff fa55 	bl	80052f4 <LL_ADC_IsEnabled>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d047      	beq.n	8005ee0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d144      	bne.n	8005ee0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 0305 	and.w	r3, r3, #5
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d10c      	bne.n	8005e7e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fa30 	bl	80052ce <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2203      	movs	r2, #3
 8005e74:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005e76:	f7fc fc15 	bl	80026a4 <HAL_GetTick>
 8005e7a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005e7c:	e029      	b.n	8005ed2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f043 0210 	orr.w	r2, r3, #16
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8e:	f043 0201 	orr.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e023      	b.n	8005ee2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005e9a:	f7fc fc03 	bl	80026a4 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d914      	bls.n	8005ed2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00d      	beq.n	8005ed2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eba:	f043 0210 	orr.w	r2, r3, #16
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ec6:	f043 0201 	orr.w	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e007      	b.n	8005ee2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1dc      	bne.n	8005e9a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <LL_ADC_SetCalibrationFactor>:
{
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005efa:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr

08005f12 <LL_ADC_GetCalibrationFactor>:
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr

08005f2e <LL_ADC_Enable>:
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f3e:	f023 0317 	bic.w	r3, r3, #23
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	609a      	str	r2, [r3, #8]
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr

08005f54 <LL_ADC_Disable>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f64:	f023 0317 	bic.w	r3, r3, #23
 8005f68:	f043 0202 	orr.w	r2, r3, #2
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr

08005f7a <LL_ADC_IsEnabled>:
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <LL_ADC_IsEnabled+0x18>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <LL_ADC_IsEnabled+0x1a>
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bc80      	pop	{r7}
 8005f9c:	4770      	bx	lr

08005f9e <LL_ADC_StartCalibration>:
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fae:	f023 0317 	bic.w	r3, r3, #23
 8005fb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <LL_ADC_IsCalibrationOnGoing>:
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fd8:	d101      	bne.n	8005fde <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e000      	b.n	8005fe0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr

08005fea <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b088      	sub	sp, #32
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_ADCEx_Calibration_Start+0x1e>
 8006004:	2302      	movs	r3, #2
 8006006:	e0b9      	b.n	800617c <HAL_ADCEx_Calibration_Start+0x192>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff ff0b 	bl	8005e2c <ADC_Disable>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff ffab 	bl	8005f7a <LL_ADC_IsEnabled>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	f040 809d 	bne.w	8006166 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006030:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006034:	f043 0202 	orr.w	r2, r3, #2
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	f248 0303 	movw	r3, #32771	; 0x8003
 8006046:	4013      	ands	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6812      	ldr	r2, [r2, #0]
 8006054:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006058:	f023 0303 	bic.w	r3, r3, #3
 800605c:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e02e      	b.n	80060c2 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff98 	bl	8005f9e <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800606e:	e014      	b.n	800609a <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	3301      	adds	r3, #1
 8006074:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 800607c:	d30d      	bcc.n	800609a <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	f023 0312 	bic.w	r3, r3, #18
 8006086:	f043 0210 	orr.w	r2, r3, #16
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e070      	b.n	800617c <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff ff90 	bl	8005fc4 <LL_ADC_IsCalibrationOnGoing>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e2      	bne.n	8006070 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff ff2f 	bl	8005f12 <LL_ADC_GetCalibrationFactor>
 80060b4:	4602      	mov	r2, r0
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	4413      	add	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	3301      	adds	r3, #1
 80060c0:	61fb      	str	r3, [r7, #28]
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	2b07      	cmp	r3, #7
 80060c6:	d9cd      	bls.n	8006064 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff ff29 	bl	8005f2e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69b9      	ldr	r1, [r7, #24]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff ff01 	bl	8005eea <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff ff31 	bl	8005f54 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80060f2:	f7fc fad7 	bl	80026a4 <HAL_GetTick>
 80060f6:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80060f8:	e01c      	b.n	8006134 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80060fa:	f7fc fad3 	bl	80026a4 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d915      	bls.n	8006134 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff ff34 	bl	8005f7a <LL_ADC_IsEnabled>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00d      	beq.n	8006134 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800611c:	f043 0210 	orr.w	r2, r3, #16
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006128:	f043 0201 	orr.w	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e023      	b.n	800617c <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff ff1e 	bl	8005f7a <LL_ADC_IsEnabled>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1da      	bne.n	80060fa <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68d9      	ldr	r1, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	430a      	orrs	r2, r1
 8006152:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	f023 0303 	bic.w	r3, r3, #3
 800615c:	f043 0201 	orr.w	r2, r3, #1
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	659a      	str	r2, [r3, #88]	; 0x58
 8006164:	e005      	b.n	8006172 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	f043 0210 	orr.w	r2, r3, #16
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006194:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061a0:	4013      	ands	r3, r2
 80061a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061b6:	4a04      	ldr	r2, [pc, #16]	; (80061c8 <__NVIC_SetPriorityGrouping+0x44>)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	60d3      	str	r3, [r2, #12]
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	e000ed00 	.word	0xe000ed00

080061cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <__NVIC_GetPriorityGrouping+0x18>)
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	f003 0307 	and.w	r3, r3, #7
}
 80061da:	4618      	mov	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	e000ed00 	.word	0xe000ed00

080061e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db0b      	blt.n	8006212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	f003 021f 	and.w	r2, r3, #31
 8006200:	4906      	ldr	r1, [pc, #24]	; (800621c <__NVIC_EnableIRQ+0x34>)
 8006202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2001      	movs	r0, #1
 800620a:	fa00 f202 	lsl.w	r2, r0, r2
 800620e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	bc80      	pop	{r7}
 800621a:	4770      	bx	lr
 800621c:	e000e100 	.word	0xe000e100

08006220 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	4603      	mov	r3, r0
 8006228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800622a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622e:	2b00      	cmp	r3, #0
 8006230:	db12      	blt.n	8006258 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006232:	79fb      	ldrb	r3, [r7, #7]
 8006234:	f003 021f 	and.w	r2, r3, #31
 8006238:	490a      	ldr	r1, [pc, #40]	; (8006264 <__NVIC_DisableIRQ+0x44>)
 800623a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	2001      	movs	r0, #1
 8006242:	fa00 f202 	lsl.w	r2, r0, r2
 8006246:	3320      	adds	r3, #32
 8006248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800624c:	f3bf 8f4f 	dsb	sy
}
 8006250:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006252:	f3bf 8f6f 	isb	sy
}
 8006256:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	bc80      	pop	{r7}
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	e000e100 	.word	0xe000e100

08006268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	4603      	mov	r3, r0
 8006270:	6039      	str	r1, [r7, #0]
 8006272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006278:	2b00      	cmp	r3, #0
 800627a:	db0a      	blt.n	8006292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	b2da      	uxtb	r2, r3
 8006280:	490c      	ldr	r1, [pc, #48]	; (80062b4 <__NVIC_SetPriority+0x4c>)
 8006282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006286:	0112      	lsls	r2, r2, #4
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	440b      	add	r3, r1
 800628c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006290:	e00a      	b.n	80062a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	b2da      	uxtb	r2, r3
 8006296:	4908      	ldr	r1, [pc, #32]	; (80062b8 <__NVIC_SetPriority+0x50>)
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	f003 030f 	and.w	r3, r3, #15
 800629e:	3b04      	subs	r3, #4
 80062a0:	0112      	lsls	r2, r2, #4
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	440b      	add	r3, r1
 80062a6:	761a      	strb	r2, [r3, #24]
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	e000e100 	.word	0xe000e100
 80062b8:	e000ed00 	.word	0xe000ed00

080062bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062bc:	b480      	push	{r7}
 80062be:	b089      	sub	sp, #36	; 0x24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f1c3 0307 	rsb	r3, r3, #7
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	bf28      	it	cs
 80062da:	2304      	movcs	r3, #4
 80062dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3304      	adds	r3, #4
 80062e2:	2b06      	cmp	r3, #6
 80062e4:	d902      	bls.n	80062ec <NVIC_EncodePriority+0x30>
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3b03      	subs	r3, #3
 80062ea:	e000      	b.n	80062ee <NVIC_EncodePriority+0x32>
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062f0:	f04f 32ff 	mov.w	r2, #4294967295
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	43da      	mvns	r2, r3
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	401a      	ands	r2, r3
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006304:	f04f 31ff 	mov.w	r1, #4294967295
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	fa01 f303 	lsl.w	r3, r1, r3
 800630e:	43d9      	mvns	r1, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006314:	4313      	orrs	r3, r2
         );
}
 8006316:	4618      	mov	r0, r3
 8006318:	3724      	adds	r7, #36	; 0x24
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff ff2b 	bl	8006184 <__NVIC_SetPriorityGrouping>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b086      	sub	sp, #24
 800633a:	af00      	add	r7, sp, #0
 800633c:	4603      	mov	r3, r0
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006344:	f7ff ff42 	bl	80061cc <__NVIC_GetPriorityGrouping>
 8006348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	6978      	ldr	r0, [r7, #20]
 8006350:	f7ff ffb4 	bl	80062bc <NVIC_EncodePriority>
 8006354:	4602      	mov	r2, r0
 8006356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff ff83 	bl	8006268 <__NVIC_SetPriority>
}
 8006362:	bf00      	nop
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b082      	sub	sp, #8
 800636e:	af00      	add	r7, sp, #0
 8006370:	4603      	mov	r3, r0
 8006372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff ff35 	bl	80061e8 <__NVIC_EnableIRQ>
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	4603      	mov	r3, r0
 800638e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff ff43 	bl	8006220 <__NVIC_DisableIRQ>
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e08e      	b.n	80064d4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	461a      	mov	r2, r3
 80063bc:	4b47      	ldr	r3, [pc, #284]	; (80064dc <HAL_DMA_Init+0x138>)
 80063be:	429a      	cmp	r2, r3
 80063c0:	d80f      	bhi.n	80063e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	4b45      	ldr	r3, [pc, #276]	; (80064e0 <HAL_DMA_Init+0x13c>)
 80063ca:	4413      	add	r3, r2
 80063cc:	4a45      	ldr	r2, [pc, #276]	; (80064e4 <HAL_DMA_Init+0x140>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	009a      	lsls	r2, r3, #2
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a42      	ldr	r2, [pc, #264]	; (80064e8 <HAL_DMA_Init+0x144>)
 80063de:	641a      	str	r2, [r3, #64]	; 0x40
 80063e0:	e00e      	b.n	8006400 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	4b40      	ldr	r3, [pc, #256]	; (80064ec <HAL_DMA_Init+0x148>)
 80063ea:	4413      	add	r3, r2
 80063ec:	4a3d      	ldr	r2, [pc, #244]	; (80064e4 <HAL_DMA_Init+0x140>)
 80063ee:	fba2 2303 	umull	r2, r3, r2, r3
 80063f2:	091b      	lsrs	r3, r3, #4
 80063f4:	009a      	lsls	r2, r3, #2
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a3c      	ldr	r2, [pc, #240]	; (80064f0 <HAL_DMA_Init+0x14c>)
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800641a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6819      	ldr	r1, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	431a      	orrs	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fb24 	bl	8006aa0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006460:	d102      	bne.n	8006468 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006470:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006474:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800647e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d010      	beq.n	80064aa <HAL_DMA_Init+0x106>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	2b04      	cmp	r3, #4
 800648e:	d80c      	bhi.n	80064aa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fb4d 	bl	8006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	2200      	movs	r2, #0
 800649c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80064a6:	605a      	str	r2, [r3, #4]
 80064a8:	e008      	b.n	80064bc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40020407 	.word	0x40020407
 80064e0:	bffdfff8 	.word	0xbffdfff8
 80064e4:	cccccccd 	.word	0xcccccccd
 80064e8:	40020000 	.word	0x40020000
 80064ec:	bffdfbf8 	.word	0xbffdfbf8
 80064f0:	40020400 	.word	0x40020400

080064f4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e07b      	b.n	80065fe <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	4b3a      	ldr	r3, [pc, #232]	; (8006608 <HAL_DMA_DeInit+0x114>)
 800651e:	429a      	cmp	r2, r3
 8006520:	d80f      	bhi.n	8006542 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	4b38      	ldr	r3, [pc, #224]	; (800660c <HAL_DMA_DeInit+0x118>)
 800652a:	4413      	add	r3, r2
 800652c:	4a38      	ldr	r2, [pc, #224]	; (8006610 <HAL_DMA_DeInit+0x11c>)
 800652e:	fba2 2303 	umull	r2, r3, r2, r3
 8006532:	091b      	lsrs	r3, r3, #4
 8006534:	009a      	lsls	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a35      	ldr	r2, [pc, #212]	; (8006614 <HAL_DMA_DeInit+0x120>)
 800653e:	641a      	str	r2, [r3, #64]	; 0x40
 8006540:	e00e      	b.n	8006560 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	4b33      	ldr	r3, [pc, #204]	; (8006618 <HAL_DMA_DeInit+0x124>)
 800654a:	4413      	add	r3, r2
 800654c:	4a30      	ldr	r2, [pc, #192]	; (8006610 <HAL_DMA_DeInit+0x11c>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	091b      	lsrs	r3, r3, #4
 8006554:	009a      	lsls	r2, r3, #2
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a2f      	ldr	r2, [pc, #188]	; (800661c <HAL_DMA_DeInit+0x128>)
 800655e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656c:	f003 021c 	and.w	r2, r3, #28
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	2101      	movs	r1, #1
 8006576:	fa01 f202 	lsl.w	r2, r1, r2
 800657a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fa8f 	bl	8006aa0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006592:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00f      	beq.n	80065bc <HAL_DMA_DeInit+0xc8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d80b      	bhi.n	80065bc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fac3 	bl	8006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80065ba:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40020407 	.word	0x40020407
 800660c:	bffdfff8 	.word	0xbffdfff8
 8006610:	cccccccd 	.word	0xcccccccd
 8006614:	40020000 	.word	0x40020000
 8006618:	bffdfbf8 	.word	0xbffdfbf8
 800661c:	40020400 	.word	0x40020400

08006620 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_DMA_Start_IT+0x20>
 800663c:	2302      	movs	r3, #2
 800663e:	e069      	b.n	8006714 <HAL_DMA_Start_IT+0xf4>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b01      	cmp	r3, #1
 8006652:	d155      	bne.n	8006700 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0201 	bic.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f9d3 	bl	8006a24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 020e 	orr.w	r2, r2, #14
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e00f      	b.n	80066b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0204 	bic.w	r2, r2, #4
 80066a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 020a 	orr.w	r2, r2, #10
 80066b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f042 0201 	orr.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e008      	b.n	8006712 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e04f      	b.n	80067ce <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d008      	beq.n	800674c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2204      	movs	r2, #4
 800673e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e040      	b.n	80067ce <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f022 020e 	bic.w	r2, r2, #14
 800675a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800676a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 0201 	bic.w	r2, r2, #1
 800677a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006780:	f003 021c 	and.w	r2, r3, #28
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 f202 	lsl.w	r2, r1, r2
 800678e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006798:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00c      	beq.n	80067bc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80067ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e0:	2300      	movs	r3, #0
 80067e2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d005      	beq.n	80067fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2204      	movs	r2, #4
 80067f4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	e047      	b.n	800688c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 020e 	bic.w	r2, r2, #14
 800680a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006826:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800682a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006830:	f003 021c 	and.w	r2, r3, #28
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	2101      	movs	r1, #1
 800683a:	fa01 f202 	lsl.w	r2, r1, r2
 800683e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006848:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00c      	beq.n	800686c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006860:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800686a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
    }
  }
  return status;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	f003 031c 	and.w	r3, r3, #28
 80068b8:	2204      	movs	r2, #4
 80068ba:	409a      	lsls	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d027      	beq.n	8006914 <HAL_DMA_IRQHandler+0x7c>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f003 0304 	and.w	r3, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d022      	beq.n	8006914 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d107      	bne.n	80068ec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f022 0204 	bic.w	r2, r2, #4
 80068ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f0:	f003 021c 	and.w	r2, r3, #28
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	2104      	movs	r1, #4
 80068fa:	fa01 f202 	lsl.w	r2, r1, r2
 80068fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8081 	beq.w	8006a0c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006912:	e07b      	b.n	8006a0c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006918:	f003 031c 	and.w	r3, r3, #28
 800691c:	2202      	movs	r2, #2
 800691e:	409a      	lsls	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4013      	ands	r3, r2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d03d      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x10c>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d038      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10b      	bne.n	8006958 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 020a 	bic.w	r2, r2, #10
 800694e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <HAL_DMA_IRQHandler+0x180>)
 8006960:	429a      	cmp	r2, r3
 8006962:	d909      	bls.n	8006978 <HAL_DMA_IRQHandler+0xe0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006968:	f003 031c 	and.w	r3, r3, #28
 800696c:	4a2b      	ldr	r2, [pc, #172]	; (8006a1c <HAL_DMA_IRQHandler+0x184>)
 800696e:	2102      	movs	r1, #2
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	6053      	str	r3, [r2, #4]
 8006976:	e008      	b.n	800698a <HAL_DMA_IRQHandler+0xf2>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697c:	f003 031c 	and.w	r3, r3, #28
 8006980:	4a27      	ldr	r2, [pc, #156]	; (8006a20 <HAL_DMA_IRQHandler+0x188>)
 8006982:	2102      	movs	r1, #2
 8006984:	fa01 f303 	lsl.w	r3, r1, r3
 8006988:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	2b00      	cmp	r3, #0
 8006998:	d038      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80069a2:	e033      	b.n	8006a0c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a8:	f003 031c 	and.w	r3, r3, #28
 80069ac:	2208      	movs	r2, #8
 80069ae:	409a      	lsls	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4013      	ands	r3, r2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d02a      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x176>
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d025      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 020e 	bic.w	r2, r2, #14
 80069d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d6:	f003 021c 	and.w	r2, r3, #28
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	2101      	movs	r1, #1
 80069e0:	fa01 f202 	lsl.w	r2, r1, r2
 80069e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
}
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40020080 	.word	0x40020080
 8006a1c:	40020400 	.word	0x40020400
 8006a20:	40020000 	.word	0x40020000

08006a24 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a3a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d004      	beq.n	8006a4e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a4c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	f003 021c 	and.w	r2, r3, #28
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	2b10      	cmp	r3, #16
 8006a70:	d108      	bne.n	8006a84 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a82:	e007      	b.n	8006a94 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	60da      	str	r2, [r3, #12]
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bc80      	pop	{r7}
 8006a9c:	4770      	bx	lr
	...

08006aa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b085      	sub	sp, #20
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d813      	bhi.n	8006adc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	089b      	lsrs	r3, r3, #2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ac0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	3b08      	subs	r3, #8
 8006ad0:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad6:	091b      	lsrs	r3, r3, #4
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	e011      	b.n	8006b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	089b      	lsrs	r3, r3, #2
 8006ae2:	009a      	lsls	r2, r3, #2
 8006ae4:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006ae6:	4413      	add	r3, r2
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	3b08      	subs	r3, #8
 8006af4:	4a0b      	ldr	r2, [pc, #44]	; (8006b24 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006af6:	fba2 2303 	umull	r2, r3, r2, r3
 8006afa:	091b      	lsrs	r3, r3, #4
 8006afc:	3307      	adds	r3, #7
 8006afe:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8006b04:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	409a      	lsls	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	40020407 	.word	0x40020407
 8006b24:	cccccccd 	.word	0xcccccccd
 8006b28:	4002081c 	.word	0x4002081c
 8006b2c:	40020880 	.word	0x40020880

08006b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a08      	ldr	r2, [pc, #32]	; (8006b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006b54:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	2201      	movs	r2, #1
 8006b60:	409a      	lsls	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr
 8006b70:	1000823f 	.word	0x1000823f
 8006b74:	40020940 	.word	0x40020940

08006b78 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006b86:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <HAL_FLASH_Program+0x80>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_FLASH_Program+0x1a>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e02d      	b.n	8006bee <HAL_FLASH_Program+0x76>
 8006b92:	4b19      	ldr	r3, [pc, #100]	; (8006bf8 <HAL_FLASH_Program+0x80>)
 8006b94:	2201      	movs	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b98:	4b17      	ldr	r3, [pc, #92]	; (8006bf8 <HAL_FLASH_Program+0x80>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ba2:	f000 f869 	bl	8006c78 <FLASH_WaitForLastOperation>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11a      	bne.n	8006be6 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d105      	bne.n	8006bc2 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006bb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bba:	68b8      	ldr	r0, [r7, #8]
 8006bbc:	f000 f8be 	bl	8006d3c <FLASH_Program_DoubleWord>
 8006bc0:	e004      	b.n	8006bcc <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	68b8      	ldr	r0, [r7, #8]
 8006bc8:	f000 f8de 	bl	8006d88 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006bd0:	f000 f852 	bl	8006c78 <FLASH_WaitForLastOperation>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006bd8:	4b08      	ldr	r3, [pc, #32]	; (8006bfc <HAL_FLASH_Program+0x84>)
 8006bda:	695a      	ldr	r2, [r3, #20]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	43db      	mvns	r3, r3
 8006be0:	4906      	ldr	r1, [pc, #24]	; (8006bfc <HAL_FLASH_Program+0x84>)
 8006be2:	4013      	ands	r3, r2
 8006be4:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006be6:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <HAL_FLASH_Program+0x80>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	200003c8 	.word	0x200003c8
 8006bfc:	58004000 	.word	0x58004000

08006c00 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_FLASH_Unlock+0x38>)
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	da0b      	bge.n	8006c2a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <HAL_FLASH_Unlock+0x38>)
 8006c14:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <HAL_FLASH_Unlock+0x3c>)
 8006c16:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006c18:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <HAL_FLASH_Unlock+0x38>)
 8006c1a:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <HAL_FLASH_Unlock+0x40>)
 8006c1c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <HAL_FLASH_Unlock+0x38>)
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	da01      	bge.n	8006c2a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bc80      	pop	{r7}
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	58004000 	.word	0x58004000
 8006c3c:	45670123 	.word	0x45670123
 8006c40:	cdef89ab 	.word	0xcdef89ab

08006c44 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <HAL_FLASH_Lock+0x30>)
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	4a08      	ldr	r2, [pc, #32]	; (8006c74 <HAL_FLASH_Lock+0x30>)
 8006c54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c58:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8006c5a:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <HAL_FLASH_Lock+0x30>)
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	db01      	blt.n	8006c66 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006c66:	79fb      	ldrb	r3, [r7, #7]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	58004000 	.word	0x58004000

08006c78 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8006c80:	f7fb fd10 	bl	80026a4 <HAL_GetTick>
 8006c84:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006c86:	e009      	b.n	8006c9c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006c88:	f7fb fd0c 	bl	80026a4 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d801      	bhi.n	8006c9c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e047      	b.n	8006d2c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006c9c:	4b25      	ldr	r3, [pc, #148]	; (8006d34 <FLASH_WaitForLastOperation+0xbc>)
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d0ee      	beq.n	8006c88 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8006caa:	4b22      	ldr	r3, [pc, #136]	; (8006d34 <FLASH_WaitForLastOperation+0xbc>)
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006cba:	4b1e      	ldr	r3, [pc, #120]	; (8006d34 <FLASH_WaitForLastOperation+0xbc>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <FLASH_WaitForLastOperation+0x6c>
 8006cd4:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <FLASH_WaitForLastOperation+0xbc>)
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006cde:	4915      	ldr	r1, [pc, #84]	; (8006d34 <FLASH_WaitForLastOperation+0xbc>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	618b      	str	r3, [r1, #24]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <FLASH_WaitForLastOperation+0x80>
 8006cee:	4a11      	ldr	r2, [pc, #68]	; (8006d34 <FLASH_WaitForLastOperation+0xbc>)
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8006cf6:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00e      	beq.n	8006d1c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8006cfe:	4a0e      	ldr	r2, [pc, #56]	; (8006d38 <FLASH_WaitForLastOperation+0xc0>)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e011      	b.n	8006d2c <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006d08:	f7fb fccc 	bl	80026a4 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d801      	bhi.n	8006d1c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e007      	b.n	8006d2c <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <FLASH_WaitForLastOperation+0xbc>)
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d28:	d0ee      	beq.n	8006d08 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	58004000 	.word	0x58004000
 8006d38:	200003c8 	.word	0x200003c8

08006d3c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006d48:	4b0e      	ldr	r3, [pc, #56]	; (8006d84 <FLASH_Program_DoubleWord+0x48>)
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	4a0d      	ldr	r2, [pc, #52]	; (8006d84 <FLASH_Program_DoubleWord+0x48>)
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006d5a:	f3bf 8f6f 	isb	sy
}
 8006d5e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	000a      	movs	r2, r1
 8006d6e:	2300      	movs	r3, #0
 8006d70:	68f9      	ldr	r1, [r7, #12]
 8006d72:	3104      	adds	r1, #4
 8006d74:	4613      	mov	r3, r2
 8006d76:	600b      	str	r3, [r1, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	58004000 	.word	0x58004000

08006d88 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b089      	sub	sp, #36	; 0x24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006d92:	2340      	movs	r3, #64	; 0x40
 8006d94:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006d9e:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <FLASH_Program_Fast+0x78>)
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	4a17      	ldr	r2, [pc, #92]	; (8006e00 <FLASH_Program_Fast+0x78>)
 8006da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006da8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006daa:	f3ef 8310 	mrs	r3, PRIMASK
 8006dae:	60fb      	str	r3, [r7, #12]
  return(result);
 8006db0:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8006db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006db4:	b672      	cpsid	i
}
 8006db6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	617b      	str	r3, [r7, #20]
    row_index--;
 8006dcc:	7ffb      	ldrb	r3, [r7, #31]
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006dd2:	7ffb      	ldrb	r3, [r7, #31]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1ef      	bne.n	8006db8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8006dd8:	bf00      	nop
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <FLASH_Program_Fast+0x78>)
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de6:	d0f8      	beq.n	8006dda <FLASH_Program_Fast+0x52>
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f383 8810 	msr	PRIMASK, r3
}
 8006df2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006df4:	bf00      	nop
 8006df6:	3724      	adds	r7, #36	; 0x24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bc80      	pop	{r7}
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	58004000 	.word	0x58004000

08006e04 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006e0e:	4b28      	ldr	r3, [pc, #160]	; (8006eb0 <HAL_FLASHEx_Erase+0xac>)
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_FLASHEx_Erase+0x16>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e046      	b.n	8006ea8 <HAL_FLASHEx_Erase+0xa4>
 8006e1a:	4b25      	ldr	r3, [pc, #148]	; (8006eb0 <HAL_FLASHEx_Erase+0xac>)
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006e20:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <HAL_FLASHEx_Erase+0xac>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e2a:	f7ff ff25 	bl	8006c78 <FLASH_WaitForLastOperation>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d133      	bne.n	8006ea0 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d108      	bne.n	8006e52 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8006e40:	f000 f838 	bl	8006eb4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006e44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e48:	f7ff ff16 	bl	8006c78 <FLASH_WaitForLastOperation>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e024      	b.n	8006e9c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	60bb      	str	r3, [r7, #8]
 8006e60:	e012      	b.n	8006e88 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8006e62:	68b8      	ldr	r0, [r7, #8]
 8006e64:	f000 f836 	bl	8006ed4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006e6c:	f7ff ff04 	bl	8006c78 <FLASH_WaitForLastOperation>
 8006e70:	4603      	mov	r3, r0
 8006e72:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	601a      	str	r2, [r3, #0]
          break;
 8006e80:	e00a      	b.n	8006e98 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	4413      	add	r3, r2
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d3e4      	bcc.n	8006e62 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8006e98:	f000 f878 	bl	8006f8c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006e9c:	f000 f832 	bl	8006f04 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ea0:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <HAL_FLASHEx_Erase+0xac>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]

  return status;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	200003c8 	.word	0x200003c8

08006eb4 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8006eb8:	4b05      	ldr	r3, [pc, #20]	; (8006ed0 <FLASH_MassErase+0x1c>)
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	4a04      	ldr	r2, [pc, #16]	; (8006ed0 <FLASH_MassErase+0x1c>)
 8006ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec2:	f043 0304 	orr.w	r3, r3, #4
 8006ec6:	6153      	str	r3, [r2, #20]
#endif
}
 8006ec8:	bf00      	nop
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr
 8006ed0:	58004000 	.word	0x58004000

08006ed4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8006edc:	4b08      	ldr	r3, [pc, #32]	; (8006f00 <FLASH_PageErase+0x2c>)
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	4a05      	ldr	r2, [pc, #20]	; (8006f00 <FLASH_PageErase+0x2c>)
 8006eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef0:	f043 0302 	orr.w	r3, r3, #2
 8006ef4:	6153      	str	r3, [r2, #20]
#endif
}
 8006ef6:	bf00      	nop
 8006ef8:	370c      	adds	r7, #12
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bc80      	pop	{r7}
 8006efe:	4770      	bx	lr
 8006f00:	58004000 	.word	0x58004000

08006f04 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8006f08:	4b1f      	ldr	r3, [pc, #124]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d117      	bne.n	8006f44 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006f14:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1b      	ldr	r2, [pc, #108]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f1e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006f20:	4b19      	ldr	r3, [pc, #100]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a18      	ldr	r2, [pc, #96]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	4b16      	ldr	r3, [pc, #88]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a15      	ldr	r2, [pc, #84]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f36:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f38:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a12      	ldr	r2, [pc, #72]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f42:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006f44:	4b10      	ldr	r3, [pc, #64]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d117      	bne.n	8006f80 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006f50:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a0c      	ldr	r2, [pc, #48]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f5a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006f5c:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a09      	ldr	r2, [pc, #36]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	4b07      	ldr	r3, [pc, #28]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a06      	ldr	r2, [pc, #24]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f72:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f74:	4b04      	ldr	r3, [pc, #16]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a03      	ldr	r2, [pc, #12]	; (8006f88 <FLASH_FlushCaches+0x84>)
 8006f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f7e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8006f80:	bf00      	nop
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bc80      	pop	{r7}
 8006f86:	4770      	bx	lr
 8006f88:	58004000 	.word	0x58004000

08006f8c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006f90:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <FLASH_AcknowledgePageErase+0x1c>)
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	4a04      	ldr	r2, [pc, #16]	; (8006fa8 <FLASH_AcknowledgePageErase+0x1c>)
 8006f96:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006f9a:	f023 0302 	bic.w	r3, r3, #2
 8006f9e:	6153      	str	r3, [r2, #20]
#endif
}
 8006fa0:	bf00      	nop
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr
 8006fa8:	58004000 	.word	0x58004000

08006fac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fba:	e140      	b.n	800723e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 8132 	beq.w	8007238 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d005      	beq.n	8006fec <HAL_GPIO_Init+0x40>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d130      	bne.n	800704e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4013      	ands	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007022:	2201      	movs	r2, #1
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	43db      	mvns	r3, r3
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4013      	ands	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	091b      	lsrs	r3, r3, #4
 8007038:	f003 0201 	and.w	r2, r3, #1
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b03      	cmp	r3, #3
 8007058:	d017      	beq.n	800708a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	2203      	movs	r2, #3
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	43db      	mvns	r3, r3
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	005b      	lsls	r3, r3, #1
 800707a:	fa02 f303 	lsl.w	r3, r2, r3
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	4313      	orrs	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	2b02      	cmp	r3, #2
 8007094:	d123      	bne.n	80070de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	08da      	lsrs	r2, r3, #3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3208      	adds	r2, #8
 800709e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	220f      	movs	r2, #15
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	43db      	mvns	r3, r3
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4013      	ands	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	08da      	lsrs	r2, r3, #3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3208      	adds	r2, #8
 80070d8:	6939      	ldr	r1, [r7, #16]
 80070da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	2203      	movs	r2, #3
 80070ea:	fa02 f303 	lsl.w	r3, r2, r3
 80070ee:	43db      	mvns	r3, r3
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4013      	ands	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f003 0203 	and.w	r2, r3, #3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	fa02 f303 	lsl.w	r3, r2, r3
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 808c 	beq.w	8007238 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007120:	4a4e      	ldr	r2, [pc, #312]	; (800725c <HAL_GPIO_Init+0x2b0>)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	089b      	lsrs	r3, r3, #2
 8007126:	3302      	adds	r3, #2
 8007128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	2207      	movs	r2, #7
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4013      	ands	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800714a:	d00d      	beq.n	8007168 <HAL_GPIO_Init+0x1bc>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a44      	ldr	r2, [pc, #272]	; (8007260 <HAL_GPIO_Init+0x2b4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d007      	beq.n	8007164 <HAL_GPIO_Init+0x1b8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a43      	ldr	r2, [pc, #268]	; (8007264 <HAL_GPIO_Init+0x2b8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d101      	bne.n	8007160 <HAL_GPIO_Init+0x1b4>
 800715c:	2302      	movs	r3, #2
 800715e:	e004      	b.n	800716a <HAL_GPIO_Init+0x1be>
 8007160:	2307      	movs	r3, #7
 8007162:	e002      	b.n	800716a <HAL_GPIO_Init+0x1be>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <HAL_GPIO_Init+0x1be>
 8007168:	2300      	movs	r3, #0
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	f002 0203 	and.w	r2, r2, #3
 8007170:	0092      	lsls	r2, r2, #2
 8007172:	4093      	lsls	r3, r2
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800717a:	4938      	ldr	r1, [pc, #224]	; (800725c <HAL_GPIO_Init+0x2b0>)
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	089b      	lsrs	r3, r3, #2
 8007180:	3302      	adds	r3, #2
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007188:	4b37      	ldr	r3, [pc, #220]	; (8007268 <HAL_GPIO_Init+0x2bc>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	43db      	mvns	r3, r3
 8007192:	693a      	ldr	r2, [r7, #16]
 8007194:	4013      	ands	r3, r2
 8007196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4313      	orrs	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80071ac:	4a2e      	ldr	r2, [pc, #184]	; (8007268 <HAL_GPIO_Init+0x2bc>)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80071b2:	4b2d      	ldr	r3, [pc, #180]	; (8007268 <HAL_GPIO_Init+0x2bc>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	43db      	mvns	r3, r3
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4013      	ands	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80071d6:	4a24      	ldr	r2, [pc, #144]	; (8007268 <HAL_GPIO_Init+0x2bc>)
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80071dc:	4b22      	ldr	r3, [pc, #136]	; (8007268 <HAL_GPIO_Init+0x2bc>)
 80071de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071e2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	43db      	mvns	r3, r3
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4013      	ands	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8007202:	4a19      	ldr	r2, [pc, #100]	; (8007268 <HAL_GPIO_Init+0x2bc>)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800720a:	4b17      	ldr	r3, [pc, #92]	; (8007268 <HAL_GPIO_Init+0x2bc>)
 800720c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007210:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	43db      	mvns	r3, r3
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8007230:	4a0d      	ldr	r2, [pc, #52]	; (8007268 <HAL_GPIO_Init+0x2bc>)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	3301      	adds	r3, #1
 800723c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	f47f aeb7 	bne.w	8006fbc <HAL_GPIO_Init+0x10>
  }
}
 800724e:	bf00      	nop
 8007250:	bf00      	nop
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	40010000 	.word	0x40010000
 8007260:	48000400 	.word	0x48000400
 8007264:	48000800 	.word	0x48000800
 8007268:	58000800 	.word	0x58000800

0800726c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800727a:	e0af      	b.n	80073dc <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800727c:	2201      	movs	r2, #1
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	4013      	ands	r3, r2
 8007288:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80a2 	beq.w	80073d6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007292:	4a59      	ldr	r2, [pc, #356]	; (80073f8 <HAL_GPIO_DeInit+0x18c>)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	089b      	lsrs	r3, r3, #2
 8007298:	3302      	adds	r3, #2
 800729a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800729e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f003 0303 	and.w	r3, r3, #3
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	2207      	movs	r2, #7
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4013      	ands	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80072ba:	d00d      	beq.n	80072d8 <HAL_GPIO_DeInit+0x6c>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a4f      	ldr	r2, [pc, #316]	; (80073fc <HAL_GPIO_DeInit+0x190>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d007      	beq.n	80072d4 <HAL_GPIO_DeInit+0x68>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a4e      	ldr	r2, [pc, #312]	; (8007400 <HAL_GPIO_DeInit+0x194>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d101      	bne.n	80072d0 <HAL_GPIO_DeInit+0x64>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e004      	b.n	80072da <HAL_GPIO_DeInit+0x6e>
 80072d0:	2307      	movs	r3, #7
 80072d2:	e002      	b.n	80072da <HAL_GPIO_DeInit+0x6e>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <HAL_GPIO_DeInit+0x6e>
 80072d8:	2300      	movs	r3, #0
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	f002 0203 	and.w	r2, r2, #3
 80072e0:	0092      	lsls	r2, r2, #2
 80072e2:	4093      	lsls	r3, r2
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d136      	bne.n	8007358 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80072ea:	4b46      	ldr	r3, [pc, #280]	; (8007404 <HAL_GPIO_DeInit+0x198>)
 80072ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	43db      	mvns	r3, r3
 80072f4:	4943      	ldr	r1, [pc, #268]	; (8007404 <HAL_GPIO_DeInit+0x198>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80072fc:	4b41      	ldr	r3, [pc, #260]	; (8007404 <HAL_GPIO_DeInit+0x198>)
 80072fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	43db      	mvns	r3, r3
 8007306:	493f      	ldr	r1, [pc, #252]	; (8007404 <HAL_GPIO_DeInit+0x198>)
 8007308:	4013      	ands	r3, r2
 800730a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800730e:	4b3d      	ldr	r3, [pc, #244]	; (8007404 <HAL_GPIO_DeInit+0x198>)
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	43db      	mvns	r3, r3
 8007316:	493b      	ldr	r1, [pc, #236]	; (8007404 <HAL_GPIO_DeInit+0x198>)
 8007318:	4013      	ands	r3, r2
 800731a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800731c:	4b39      	ldr	r3, [pc, #228]	; (8007404 <HAL_GPIO_DeInit+0x198>)
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	43db      	mvns	r3, r3
 8007324:	4937      	ldr	r1, [pc, #220]	; (8007404 <HAL_GPIO_DeInit+0x198>)
 8007326:	4013      	ands	r3, r2
 8007328:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	2207      	movs	r2, #7
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800733a:	4a2f      	ldr	r2, [pc, #188]	; (80073f8 <HAL_GPIO_DeInit+0x18c>)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	089b      	lsrs	r3, r3, #2
 8007340:	3302      	adds	r3, #2
 8007342:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	43da      	mvns	r2, r3
 800734a:	482b      	ldr	r0, [pc, #172]	; (80073f8 <HAL_GPIO_DeInit+0x18c>)
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	089b      	lsrs	r3, r3, #2
 8007350:	400a      	ands	r2, r1
 8007352:	3302      	adds	r3, #2
 8007354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	2103      	movs	r1, #3
 8007362:	fa01 f303 	lsl.w	r3, r1, r3
 8007366:	431a      	orrs	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	08da      	lsrs	r2, r3, #3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3208      	adds	r2, #8
 8007374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	220f      	movs	r2, #15
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	43db      	mvns	r3, r3
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	08d2      	lsrs	r2, r2, #3
 800738c:	4019      	ands	r1, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3208      	adds	r2, #8
 8007392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	2103      	movs	r1, #3
 80073a0:	fa01 f303 	lsl.w	r3, r1, r3
 80073a4:	43db      	mvns	r3, r3
 80073a6:	401a      	ands	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	2101      	movs	r1, #1
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	fa01 f303 	lsl.w	r3, r1, r3
 80073b8:	43db      	mvns	r3, r3
 80073ba:	401a      	ands	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	2103      	movs	r1, #3
 80073ca:	fa01 f303 	lsl.w	r3, r1, r3
 80073ce:	43db      	mvns	r3, r3
 80073d0:	401a      	ands	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	3301      	adds	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	fa22 f303 	lsr.w	r3, r2, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f47f af49 	bne.w	800727c <HAL_GPIO_DeInit+0x10>
  }
}
 80073ea:	bf00      	nop
 80073ec:	bf00      	nop
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	40010000 	.word	0x40010000
 80073fc:	48000400 	.word	0x48000400
 8007400:	48000800 	.word	0x48000800
 8007404:	58000800 	.word	0x58000800

08007408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	807b      	strh	r3, [r7, #2]
 8007414:	4613      	mov	r3, r2
 8007416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007418:	787b      	ldrb	r3, [r7, #1]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800741e:	887a      	ldrh	r2, [r7, #2]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007424:	e002      	b.n	800742c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007426:	887a      	ldrh	r2, [r7, #2]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr
	...

08007438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	4603      	mov	r3, r0
 8007440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007442:	4b08      	ldr	r3, [pc, #32]	; (8007464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	88fb      	ldrh	r3, [r7, #6]
 8007448:	4013      	ands	r3, r2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d006      	beq.n	800745c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800744e:	4a05      	ldr	r2, [pc, #20]	; (8007464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007450:	88fb      	ldrh	r3, [r7, #6]
 8007452:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007454:	88fb      	ldrh	r3, [r7, #6]
 8007456:	4618      	mov	r0, r3
 8007458:	f005 fc72 	bl	800cd40 <HAL_GPIO_EXTI_Callback>
  }
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	58000800 	.word	0x58000800

08007468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e081      	b.n	800757e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d106      	bne.n	8007494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7fa fc80 	bl	8001d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2224      	movs	r2, #36	; 0x24
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f022 0201 	bic.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80074b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d107      	bne.n	80074e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074de:	609a      	str	r2, [r3, #8]
 80074e0:	e006      	b.n	80074f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689a      	ldr	r2, [r3, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80074ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d104      	bne.n	8007502 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	6812      	ldr	r2, [r2, #0]
 800750c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	69d9      	ldr	r1, [r3, #28]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1a      	ldr	r2, [r3, #32]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0201 	orr.w	r2, r2, #1
 800755e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af02      	add	r7, sp, #8
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	4608      	mov	r0, r1
 8007592:	4611      	mov	r1, r2
 8007594:	461a      	mov	r2, r3
 8007596:	4603      	mov	r3, r0
 8007598:	817b      	strh	r3, [r7, #10]
 800759a:	460b      	mov	r3, r1
 800759c:	813b      	strh	r3, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	f040 80f9 	bne.w	80077a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <HAL_I2C_Mem_Write+0x34>
 80075b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d105      	bne.n	80075c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e0ed      	b.n	80077a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_I2C_Mem_Write+0x4e>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e0e6      	b.n	80077a4 <HAL_I2C_Mem_Write+0x21c>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075de:	f7fb f861 	bl	80026a4 <HAL_GetTick>
 80075e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	2319      	movs	r3, #25
 80075ea:	2201      	movs	r2, #1
 80075ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f000 fac2 	bl	8007b7a <I2C_WaitOnFlagUntilTimeout>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0d1      	b.n	80077a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2221      	movs	r2, #33	; 0x21
 8007604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2240      	movs	r2, #64	; 0x40
 800760c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a3a      	ldr	r2, [r7, #32]
 800761a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007628:	88f8      	ldrh	r0, [r7, #6]
 800762a:	893a      	ldrh	r2, [r7, #8]
 800762c:	8979      	ldrh	r1, [r7, #10]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4603      	mov	r3, r0
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f9d3 	bl	80079e4 <I2C_RequestMemoryWrite>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d005      	beq.n	8007650 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e0a9      	b.n	80077a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007654:	b29b      	uxth	r3, r3
 8007656:	2bff      	cmp	r3, #255	; 0xff
 8007658:	d90e      	bls.n	8007678 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	22ff      	movs	r2, #255	; 0xff
 800765e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007664:	b2da      	uxtb	r2, r3
 8007666:	8979      	ldrh	r1, [r7, #10]
 8007668:	2300      	movs	r3, #0
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fc1f 	bl	8007eb4 <I2C_TransferConfig>
 8007676:	e00f      	b.n	8007698 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007686:	b2da      	uxtb	r2, r3
 8007688:	8979      	ldrh	r1, [r7, #10]
 800768a:	2300      	movs	r3, #0
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f000 fc0e 	bl	8007eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 faac 	bl	8007bfa <I2C_WaitOnTXISFlagUntilTimeout>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e07b      	b.n	80077a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d034      	beq.n	8007750 <HAL_I2C_Mem_Write+0x1c8>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d130      	bne.n	8007750 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f4:	2200      	movs	r2, #0
 80076f6:	2180      	movs	r1, #128	; 0x80
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fa3e 	bl	8007b7a <I2C_WaitOnFlagUntilTimeout>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e04d      	b.n	80077a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2bff      	cmp	r3, #255	; 0xff
 8007710:	d90e      	bls.n	8007730 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	22ff      	movs	r2, #255	; 0xff
 8007716:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800771c:	b2da      	uxtb	r2, r3
 800771e:	8979      	ldrh	r1, [r7, #10]
 8007720:	2300      	movs	r3, #0
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 fbc3 	bl	8007eb4 <I2C_TransferConfig>
 800772e:	e00f      	b.n	8007750 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773e:	b2da      	uxtb	r2, r3
 8007740:	8979      	ldrh	r1, [r7, #10]
 8007742:	2300      	movs	r3, #0
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fbb2 	bl	8007eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007754:	b29b      	uxth	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d19e      	bne.n	8007698 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fa8b 	bl	8007c7a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e01a      	b.n	80077a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2220      	movs	r2, #32
 8007774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6859      	ldr	r1, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <HAL_I2C_Mem_Write+0x224>)
 8007782:	400b      	ands	r3, r1
 8007784:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	e000      	b.n	80077a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80077a2:	2302      	movs	r3, #2
  }
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	fe00e800 	.word	0xfe00e800

080077b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af02      	add	r7, sp, #8
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	4608      	mov	r0, r1
 80077ba:	4611      	mov	r1, r2
 80077bc:	461a      	mov	r2, r3
 80077be:	4603      	mov	r3, r0
 80077c0:	817b      	strh	r3, [r7, #10]
 80077c2:	460b      	mov	r3, r1
 80077c4:	813b      	strh	r3, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	f040 80fd 	bne.w	80079d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_I2C_Mem_Read+0x34>
 80077de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d105      	bne.n	80077f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0f1      	b.n	80079d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <HAL_I2C_Mem_Read+0x4e>
 80077fa:	2302      	movs	r3, #2
 80077fc:	e0ea      	b.n	80079d4 <HAL_I2C_Mem_Read+0x224>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007806:	f7fa ff4d 	bl	80026a4 <HAL_GetTick>
 800780a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	2319      	movs	r3, #25
 8007812:	2201      	movs	r2, #1
 8007814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f9ae 	bl	8007b7a <I2C_WaitOnFlagUntilTimeout>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e0d5      	b.n	80079d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2222      	movs	r2, #34	; 0x22
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2240      	movs	r2, #64	; 0x40
 8007834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a3a      	ldr	r2, [r7, #32]
 8007842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007850:	88f8      	ldrh	r0, [r7, #6]
 8007852:	893a      	ldrh	r2, [r7, #8]
 8007854:	8979      	ldrh	r1, [r7, #10]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	9301      	str	r3, [sp, #4]
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	4603      	mov	r3, r0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 f913 	bl	8007a8c <I2C_RequestMemoryRead>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d005      	beq.n	8007878 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e0ad      	b.n	80079d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	2bff      	cmp	r3, #255	; 0xff
 8007880:	d90e      	bls.n	80078a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	22ff      	movs	r2, #255	; 0xff
 8007886:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800788c:	b2da      	uxtb	r2, r3
 800788e:	8979      	ldrh	r1, [r7, #10]
 8007890:	4b52      	ldr	r3, [pc, #328]	; (80079dc <HAL_I2C_Mem_Read+0x22c>)
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 fb0b 	bl	8007eb4 <I2C_TransferConfig>
 800789e:	e00f      	b.n	80078c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	8979      	ldrh	r1, [r7, #10]
 80078b2:	4b4a      	ldr	r3, [pc, #296]	; (80079dc <HAL_I2C_Mem_Read+0x22c>)
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fafa 	bl	8007eb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	2200      	movs	r2, #0
 80078c8:	2104      	movs	r1, #4
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 f955 	bl	8007b7a <I2C_WaitOnFlagUntilTimeout>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e07c      	b.n	80079d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007910:	b29b      	uxth	r3, r3
 8007912:	2b00      	cmp	r3, #0
 8007914:	d034      	beq.n	8007980 <HAL_I2C_Mem_Read+0x1d0>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791a:	2b00      	cmp	r3, #0
 800791c:	d130      	bne.n	8007980 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	2200      	movs	r2, #0
 8007926:	2180      	movs	r1, #128	; 0x80
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f926 	bl	8007b7a <I2C_WaitOnFlagUntilTimeout>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e04d      	b.n	80079d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793c:	b29b      	uxth	r3, r3
 800793e:	2bff      	cmp	r3, #255	; 0xff
 8007940:	d90e      	bls.n	8007960 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	22ff      	movs	r2, #255	; 0xff
 8007946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800794c:	b2da      	uxtb	r2, r3
 800794e:	8979      	ldrh	r1, [r7, #10]
 8007950:	2300      	movs	r3, #0
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 faab 	bl	8007eb4 <I2C_TransferConfig>
 800795e:	e00f      	b.n	8007980 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800796e:	b2da      	uxtb	r2, r3
 8007970:	8979      	ldrh	r1, [r7, #10]
 8007972:	2300      	movs	r3, #0
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 fa9a 	bl	8007eb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007984:	b29b      	uxth	r3, r3
 8007986:	2b00      	cmp	r3, #0
 8007988:	d19a      	bne.n	80078c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 f973 	bl	8007c7a <I2C_WaitOnSTOPFlagUntilTimeout>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e01a      	b.n	80079d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2220      	movs	r2, #32
 80079a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6859      	ldr	r1, [r3, #4]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <HAL_I2C_Mem_Read+0x230>)
 80079b2:	400b      	ands	r3, r1
 80079b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e000      	b.n	80079d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	80002400 	.word	0x80002400
 80079e0:	fe00e800 	.word	0xfe00e800

080079e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	4608      	mov	r0, r1
 80079ee:	4611      	mov	r1, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	817b      	strh	r3, [r7, #10]
 80079f6:	460b      	mov	r3, r1
 80079f8:	813b      	strh	r3, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80079fe:	88fb      	ldrh	r3, [r7, #6]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	8979      	ldrh	r1, [r7, #10]
 8007a04:	4b20      	ldr	r3, [pc, #128]	; (8007a88 <I2C_RequestMemoryWrite+0xa4>)
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 fa51 	bl	8007eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	69b9      	ldr	r1, [r7, #24]
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f8ef 	bl	8007bfa <I2C_WaitOnTXISFlagUntilTimeout>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e02c      	b.n	8007a80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d105      	bne.n	8007a38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a2c:	893b      	ldrh	r3, [r7, #8]
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	629a      	str	r2, [r3, #40]	; 0x28
 8007a36:	e015      	b.n	8007a64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a38:	893b      	ldrh	r3, [r7, #8]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	b2da      	uxtb	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	69b9      	ldr	r1, [r7, #24]
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f000 f8d5 	bl	8007bfa <I2C_WaitOnTXISFlagUntilTimeout>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e012      	b.n	8007a80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a5a:	893b      	ldrh	r3, [r7, #8]
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	9300      	str	r3, [sp, #0]
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2180      	movs	r1, #128	; 0x80
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 f883 	bl	8007b7a <I2C_WaitOnFlagUntilTimeout>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e000      	b.n	8007a80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	80002000 	.word	0x80002000

08007a8c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b086      	sub	sp, #24
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	4608      	mov	r0, r1
 8007a96:	4611      	mov	r1, r2
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	817b      	strh	r3, [r7, #10]
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	813b      	strh	r3, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	8979      	ldrh	r1, [r7, #10]
 8007aac:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <I2C_RequestMemoryRead+0xa4>)
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	68f8      	ldr	r0, [r7, #12]
 8007ab4:	f000 f9fe 	bl	8007eb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ab8:	69fa      	ldr	r2, [r7, #28]
 8007aba:	69b9      	ldr	r1, [r7, #24]
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 f89c 	bl	8007bfa <I2C_WaitOnTXISFlagUntilTimeout>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e02c      	b.n	8007b26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d105      	bne.n	8007ade <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ad2:	893b      	ldrh	r3, [r7, #8]
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	629a      	str	r2, [r3, #40]	; 0x28
 8007adc:	e015      	b.n	8007b0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ade:	893b      	ldrh	r3, [r7, #8]
 8007ae0:	0a1b      	lsrs	r3, r3, #8
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	69b9      	ldr	r1, [r7, #24]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f882 	bl	8007bfa <I2C_WaitOnTXISFlagUntilTimeout>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e012      	b.n	8007b26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b00:	893b      	ldrh	r3, [r7, #8]
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	2200      	movs	r2, #0
 8007b12:	2140      	movs	r1, #64	; 0x40
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 f830 	bl	8007b7a <I2C_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e000      	b.n	8007b26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	80002000 	.word	0x80002000

08007b34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d103      	bne.n	8007b52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	699b      	ldr	r3, [r3, #24]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d007      	beq.n	8007b70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699a      	ldr	r2, [r3, #24]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	619a      	str	r2, [r3, #24]
  }
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr

08007b7a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	603b      	str	r3, [r7, #0]
 8007b86:	4613      	mov	r3, r2
 8007b88:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b8a:	e022      	b.n	8007bd2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d01e      	beq.n	8007bd2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b94:	f7fa fd86 	bl	80026a4 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d302      	bcc.n	8007baa <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d113      	bne.n	8007bd2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	f043 0220 	orr.w	r2, r3, #32
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2220      	movs	r2, #32
 8007bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e00f      	b.n	8007bf2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	699a      	ldr	r2, [r3, #24]
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	bf0c      	ite	eq
 8007be2:	2301      	moveq	r3, #1
 8007be4:	2300      	movne	r3, #0
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	461a      	mov	r2, r3
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d0cd      	beq.n	8007b8c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b084      	sub	sp, #16
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c06:	e02c      	b.n	8007c62 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f871 	bl	8007cf4 <I2C_IsErrorOccurred>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e02a      	b.n	8007c72 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d01e      	beq.n	8007c62 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c24:	f7fa fd3e 	bl	80026a4 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d302      	bcc.n	8007c3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d113      	bne.n	8007c62 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3e:	f043 0220 	orr.w	r2, r3, #32
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e007      	b.n	8007c72 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	699b      	ldr	r3, [r3, #24]
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d1cb      	bne.n	8007c08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c86:	e028      	b.n	8007cda <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	68b9      	ldr	r1, [r7, #8]
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f000 f831 	bl	8007cf4 <I2C_IsErrorOccurred>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e026      	b.n	8007cea <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c9c:	f7fa fd02 	bl	80026a4 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d302      	bcc.n	8007cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d113      	bne.n	8007cda <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	f043 0220 	orr.w	r2, r3, #32
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e007      	b.n	8007cea <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d1cf      	bne.n	8007c88 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3710      	adds	r7, #16
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08a      	sub	sp, #40	; 0x28
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d068      	beq.n	8007df2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2210      	movs	r2, #16
 8007d26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007d28:	e049      	b.n	8007dbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d30:	d045      	beq.n	8007dbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d32:	f7fa fcb7 	bl	80026a4 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d302      	bcc.n	8007d48 <I2C_IsErrorOccurred+0x54>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d13a      	bne.n	8007dbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6a:	d121      	bne.n	8007db0 <I2C_IsErrorOccurred+0xbc>
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d72:	d01d      	beq.n	8007db0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007d74:	7cfb      	ldrb	r3, [r7, #19]
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	d01a      	beq.n	8007db0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007d8a:	f7fa fc8b 	bl	80026a4 <HAL_GetTick>
 8007d8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d90:	e00e      	b.n	8007db0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007d92:	f7fa fc87 	bl	80026a4 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b19      	cmp	r3, #25
 8007d9e:	d907      	bls.n	8007db0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	f043 0320 	orr.w	r3, r3, #32
 8007da6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007dae:	e006      	b.n	8007dbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d1e9      	bne.n	8007d92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	f003 0320 	and.w	r3, r3, #32
 8007dc8:	2b20      	cmp	r3, #32
 8007dca:	d003      	beq.n	8007dd4 <I2C_IsErrorOccurred+0xe0>
 8007dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0aa      	beq.n	8007d2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2220      	movs	r2, #32
 8007de2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	f043 0304 	orr.w	r3, r3, #4
 8007dea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007e04:	6a3b      	ldr	r3, [r7, #32]
 8007e06:	f043 0301 	orr.w	r3, r3, #1
 8007e0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	f043 0308 	orr.w	r3, r3, #8
 8007e2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	f043 0302 	orr.w	r3, r3, #2
 8007e4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01c      	beq.n	8007ea2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff fe63 	bl	8007b34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6859      	ldr	r1, [r3, #4]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <I2C_IsErrorOccurred+0x1bc>)
 8007e7a:	400b      	ands	r3, r1
 8007e7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	431a      	orrs	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007ea2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3728      	adds	r7, #40	; 0x28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	fe00e800 	.word	0xfe00e800

08007eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	817b      	strh	r3, [r7, #10]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ec6:	897b      	ldrh	r3, [r7, #10]
 8007ec8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ecc:	7a7b      	ldrb	r3, [r7, #9]
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ed4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ee2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	0d5b      	lsrs	r3, r3, #21
 8007eee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007ef2:	4b07      	ldr	r3, [pc, #28]	; (8007f10 <I2C_TransferConfig+0x5c>)
 8007ef4:	430b      	orrs	r3, r1
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	ea02 0103 	and.w	r1, r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007f06:	bf00      	nop
 8007f08:	371c      	adds	r7, #28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bc80      	pop	{r7}
 8007f0e:	4770      	bx	lr
 8007f10:	03ff63ff 	.word	0x03ff63ff

08007f14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b20      	cmp	r3, #32
 8007f28:	d138      	bne.n	8007f9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e032      	b.n	8007f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2224      	movs	r2, #36	; 0x24
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0201 	bic.w	r2, r2, #1
 8007f56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6819      	ldr	r1, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	e000      	b.n	8007f9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f9c:	2302      	movs	r3, #2
  }
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bc80      	pop	{r7}
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d139      	bne.n	8008032 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e033      	b.n	8008034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2224      	movs	r2, #36	; 0x24
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 0201 	bic.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007ffa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	021b      	lsls	r3, r3, #8
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0201 	orr.w	r2, r2, #1
 800801c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	e000      	b.n	8008034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008032:	2302      	movs	r3, #2
  }
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	bc80      	pop	{r7}
 800803c:	4770      	bx	lr
	...

08008040 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008044:	4b04      	ldr	r3, [pc, #16]	; (8008058 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a03      	ldr	r2, [pc, #12]	; (8008058 <HAL_PWR_EnableBkUpAccess+0x18>)
 800804a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800804e:	6013      	str	r3, [r2, #0]
}
 8008050:	bf00      	nop
 8008052:	46bd      	mov	sp, r7
 8008054:	bc80      	pop	{r7}
 8008056:	4770      	bx	lr
 8008058:	58000400 	.word	0x58000400

0800805c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008060:	4b03      	ldr	r3, [pc, #12]	; (8008070 <HAL_PWREx_GetVoltageRange+0x14>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8008068:	4618      	mov	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr
 8008070:	58000400 	.word	0x58000400

08008074 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8008078:	4b06      	ldr	r3, [pc, #24]	; (8008094 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008084:	d101      	bne.n	800808a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr
 8008094:	58000400 	.word	0x58000400

08008098 <LL_RCC_HSE_EnableTcxo>:
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800809c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80080aa:	6013      	str	r3, [r2, #0]
}
 80080ac:	bf00      	nop
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bc80      	pop	{r7}
 80080b2:	4770      	bx	lr

080080b4 <LL_RCC_HSE_DisableTcxo>:
{
 80080b4:	b480      	push	{r7}
 80080b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80080b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080c6:	6013      	str	r3, [r2, #0]
}
 80080c8:	bf00      	nop
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bc80      	pop	{r7}
 80080ce:	4770      	bx	lr

080080d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80080d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e2:	d101      	bne.n	80080e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr

080080f2 <LL_RCC_HSE_Enable>:
{
 80080f2:	b480      	push	{r7}
 80080f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80080f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008104:	6013      	str	r3, [r2, #0]
}
 8008106:	bf00      	nop
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr

0800810e <LL_RCC_HSE_Disable>:
{
 800810e:	b480      	push	{r7}
 8008110:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800811c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008120:	6013      	str	r3, [r2, #0]
}
 8008122:	bf00      	nop
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <LL_RCC_HSE_IsReady>:
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800812e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800813c:	d101      	bne.n	8008142 <LL_RCC_HSE_IsReady+0x18>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <LL_RCC_HSE_IsReady+0x1a>
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	46bd      	mov	sp, r7
 8008148:	bc80      	pop	{r7}
 800814a:	4770      	bx	lr

0800814c <LL_RCC_HSI_Enable>:
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800815a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800815e:	6013      	str	r3, [r2, #0]
}
 8008160:	bf00      	nop
 8008162:	46bd      	mov	sp, r7
 8008164:	bc80      	pop	{r7}
 8008166:	4770      	bx	lr

08008168 <LL_RCC_HSI_Disable>:
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800816c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800817a:	6013      	str	r3, [r2, #0]
}
 800817c:	bf00      	nop
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr

08008184 <LL_RCC_HSI_IsReady>:
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008196:	d101      	bne.n	800819c <LL_RCC_HSI_IsReady+0x18>
 8008198:	2301      	movs	r3, #1
 800819a:	e000      	b.n	800819e <LL_RCC_HSI_IsReady+0x1a>
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bc80      	pop	{r7}
 80081a4:	4770      	bx	lr

080081a6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80081ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	061b      	lsls	r3, r3, #24
 80081bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80081c0:	4313      	orrs	r3, r2
 80081c2:	604b      	str	r3, [r1, #4]
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bc80      	pop	{r7}
 80081cc:	4770      	bx	lr

080081ce <LL_RCC_LSE_IsReady>:
{
 80081ce:	b480      	push	{r7}
 80081d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80081d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d101      	bne.n	80081e6 <LL_RCC_LSE_IsReady+0x18>
 80081e2:	2301      	movs	r3, #1
 80081e4:	e000      	b.n	80081e8 <LL_RCC_LSE_IsReady+0x1a>
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr

080081f0 <LL_RCC_LSI_Enable>:
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80081f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008200:	f043 0301 	orr.w	r3, r3, #1
 8008204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008208:	bf00      	nop
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <LL_RCC_LSI_Disable>:
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800821c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008220:	f023 0301 	bic.w	r3, r3, #1
 8008224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr

08008230 <LL_RCC_LSI_IsReady>:
{
 8008230:	b480      	push	{r7}
 8008232:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b02      	cmp	r3, #2
 8008242:	d101      	bne.n	8008248 <LL_RCC_LSI_IsReady+0x18>
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <LL_RCC_LSI_IsReady+0x1a>
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	46bd      	mov	sp, r7
 800824e:	bc80      	pop	{r7}
 8008250:	4770      	bx	lr

08008252 <LL_RCC_MSI_Enable>:
{
 8008252:	b480      	push	{r7}
 8008254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008260:	f043 0301 	orr.w	r3, r3, #1
 8008264:	6013      	str	r3, [r2, #0]
}
 8008266:	bf00      	nop
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr

0800826e <LL_RCC_MSI_Disable>:
{
 800826e:	b480      	push	{r7}
 8008270:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800827c:	f023 0301 	bic.w	r3, r3, #1
 8008280:	6013      	str	r3, [r2, #0]
}
 8008282:	bf00      	nop
 8008284:	46bd      	mov	sp, r7
 8008286:	bc80      	pop	{r7}
 8008288:	4770      	bx	lr

0800828a <LL_RCC_MSI_IsReady>:
{
 800828a:	b480      	push	{r7}
 800828c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800828e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b02      	cmp	r3, #2
 800829a:	d101      	bne.n	80082a0 <LL_RCC_MSI_IsReady+0x16>
 800829c:	2301      	movs	r3, #1
 800829e:	e000      	b.n	80082a2 <LL_RCC_MSI_IsReady+0x18>
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr

080082aa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80082aa:	b480      	push	{r7}
 80082ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80082ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b08      	cmp	r3, #8
 80082ba:	d101      	bne.n	80082c0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr

080082ca <LL_RCC_MSI_GetRange>:
{
 80082ca:	b480      	push	{r7}
 80082cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80082ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	bc80      	pop	{r7}
 80082de:	4770      	bx	lr

080082e0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80082e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bc80      	pop	{r7}
 80082f6:	4770      	bx	lr

080082f8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	021b      	lsls	r3, r3, #8
 800830e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008312:	4313      	orrs	r3, r2
 8008314:	604b      	str	r3, [r1, #4]
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <LL_RCC_SetSysClkSource>:
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f023 0203 	bic.w	r2, r3, #3
 8008332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4313      	orrs	r3, r2
 800833a:	608b      	str	r3, [r1, #8]
}
 800833c:	bf00      	nop
 800833e:	370c      	adds	r7, #12
 8008340:	46bd      	mov	sp, r7
 8008342:	bc80      	pop	{r7}
 8008344:	4770      	bx	lr

08008346 <LL_RCC_GetSysClkSource>:
{
 8008346:	b480      	push	{r7}
 8008348:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800834a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f003 030c 	and.w	r3, r3, #12
}
 8008354:	4618      	mov	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	bc80      	pop	{r7}
 800835a:	4770      	bx	lr

0800835c <LL_RCC_SetAHBPrescaler>:
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800836e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4313      	orrs	r3, r2
 8008376:	608b      	str	r3, [r1, #8]
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	bc80      	pop	{r7}
 8008380:	4770      	bx	lr

08008382 <LL_RCC_SetAHB3Prescaler>:
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800838a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800838e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008392:	f023 020f 	bic.w	r2, r3, #15
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	091b      	lsrs	r3, r3, #4
 800839a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800839e:	4313      	orrs	r3, r2
 80083a0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr

080083ae <LL_RCC_SetAPB1Prescaler>:
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80083b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80083c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	608b      	str	r3, [r1, #8]
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <LL_RCC_SetAPB2Prescaler>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80083dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80083e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	608b      	str	r3, [r1, #8]
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr

080083fa <LL_RCC_GetAHBPrescaler>:
{
 80083fa:	b480      	push	{r7}
 80083fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80083fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008408:	4618      	mov	r0, r3
 800840a:	46bd      	mov	sp, r7
 800840c:	bc80      	pop	{r7}
 800840e:	4770      	bx	lr

08008410 <LL_RCC_GetAHB3Prescaler>:
{
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008418:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800841c:	011b      	lsls	r3, r3, #4
 800841e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008422:	4618      	mov	r0, r3
 8008424:	46bd      	mov	sp, r7
 8008426:	bc80      	pop	{r7}
 8008428:	4770      	bx	lr

0800842a <LL_RCC_GetAPB1Prescaler>:
{
 800842a:	b480      	push	{r7}
 800842c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800842e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008438:	4618      	mov	r0, r3
 800843a:	46bd      	mov	sp, r7
 800843c:	bc80      	pop	{r7}
 800843e:	4770      	bx	lr

08008440 <LL_RCC_GetAPB2Prescaler>:
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800844e:	4618      	mov	r0, r3
 8008450:	46bd      	mov	sp, r7
 8008452:	bc80      	pop	{r7}
 8008454:	4770      	bx	lr

08008456 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008456:	b480      	push	{r7}
 8008458:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800845a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008464:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008468:	6013      	str	r3, [r2, #0]
}
 800846a:	bf00      	nop
 800846c:	46bd      	mov	sp, r7
 800846e:	bc80      	pop	{r7}
 8008470:	4770      	bx	lr

08008472 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008472:	b480      	push	{r7}
 8008474:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008484:	6013      	str	r3, [r2, #0]
}
 8008486:	bf00      	nop
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr

0800848e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800848e:	b480      	push	{r7}
 8008490:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084a0:	d101      	bne.n	80084a6 <LL_RCC_PLL_IsReady+0x18>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <LL_RCC_PLL_IsReady+0x1a>
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bc80      	pop	{r7}
 80084ae:	4770      	bx	lr

080084b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80084b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	0a1b      	lsrs	r3, r3, #8
 80084bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bc80      	pop	{r7}
 80084c6:	4770      	bx	lr

080084c8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80084cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	46bd      	mov	sp, r7
 80084da:	bc80      	pop	{r7}
 80084dc:	4770      	bx	lr

080084de <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80084de:	b480      	push	{r7}
 80084e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80084e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80084f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	f003 0303 	and.w	r3, r3, #3
}
 8008502:	4618      	mov	r0, r3
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr

0800850a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800850a:	b480      	push	{r7}
 800850c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800850e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851c:	d101      	bne.n	8008522 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800851e:	2301      	movs	r3, #1
 8008520:	e000      	b.n	8008524 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	bc80      	pop	{r7}
 800852a:	4770      	bx	lr

0800852c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008534:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800853c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008540:	d101      	bne.n	8008546 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008542:	2301      	movs	r3, #1
 8008544:	e000      	b.n	8008548 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	bc80      	pop	{r7}
 800854e:	4770      	bx	lr

08008550 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800855e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008562:	d101      	bne.n	8008568 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008564:	2301      	movs	r3, #1
 8008566:	e000      	b.n	800856a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr

08008572 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008572:	b480      	push	{r7}
 8008574:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008584:	d101      	bne.n	800858a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008586:	2301      	movs	r3, #1
 8008588:	e000      	b.n	800858c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	46bd      	mov	sp, r7
 8008590:	bc80      	pop	{r7}
 8008592:	4770      	bx	lr

08008594 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e36f      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085a6:	f7ff fece 	bl	8008346 <LL_RCC_GetSysClkSource>
 80085aa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085ac:	f7ff ffa2 	bl	80084f4 <LL_RCC_PLL_GetMainSource>
 80085b0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f000 80c4 	beq.w	8008748 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <HAL_RCC_OscConfig+0x3e>
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	2b0c      	cmp	r3, #12
 80085ca:	d176      	bne.n	80086ba <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d173      	bne.n	80086ba <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e353      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d005      	beq.n	80085fc <HAL_RCC_OscConfig+0x68>
 80085f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085fa:	e006      	b.n	800860a <HAL_RCC_OscConfig+0x76>
 80085fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008604:	091b      	lsrs	r3, r3, #4
 8008606:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800860a:	4293      	cmp	r3, r2
 800860c:	d222      	bcs.n	8008654 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fd3c 	bl	8009090 <RCC_SetFlashLatencyFromMSIRange>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e331      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800862c:	f043 0308 	orr.w	r3, r3, #8
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008644:	4313      	orrs	r3, r2
 8008646:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	4618      	mov	r0, r3
 800864e:	f7ff fe53 	bl	80082f8 <LL_RCC_MSI_SetCalibTrimming>
 8008652:	e021      	b.n	8008698 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800865e:	f043 0308 	orr.w	r3, r3, #8
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008676:	4313      	orrs	r3, r2
 8008678:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff fe3a 	bl	80082f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	4618      	mov	r0, r3
 800868a:	f000 fd01 	bl	8009090 <RCC_SetFlashLatencyFromMSIRange>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e2f6      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008698:	f000 fcc2 	bl	8009020 <HAL_RCC_GetHCLKFreq>
 800869c:	4603      	mov	r3, r0
 800869e:	4aa7      	ldr	r2, [pc, #668]	; (800893c <HAL_RCC_OscConfig+0x3a8>)
 80086a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80086a2:	4ba7      	ldr	r3, [pc, #668]	; (8008940 <HAL_RCC_OscConfig+0x3ac>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f9 fff2 	bl	8002690 <HAL_InitTick>
 80086ac:	4603      	mov	r3, r0
 80086ae:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80086b0:	7cfb      	ldrb	r3, [r7, #19]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d047      	beq.n	8008746 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80086b6:	7cfb      	ldrb	r3, [r7, #19]
 80086b8:	e2e5      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d02c      	beq.n	800871c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80086c2:	f7ff fdc6 	bl	8008252 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80086c6:	f7f9 ffed 	bl	80026a4 <HAL_GetTick>
 80086ca:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086ce:	f7f9 ffe9 	bl	80026a4 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e2d2      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80086e0:	f7ff fdd3 	bl	800828a <LL_RCC_MSI_IsReady>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f1      	beq.n	80086ce <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086f4:	f043 0308 	orr.w	r3, r3, #8
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800870c:	4313      	orrs	r3, r2
 800870e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	4618      	mov	r0, r3
 8008716:	f7ff fdef 	bl	80082f8 <LL_RCC_MSI_SetCalibTrimming>
 800871a:	e015      	b.n	8008748 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800871c:	f7ff fda7 	bl	800826e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008720:	f7f9 ffc0 	bl	80026a4 <HAL_GetTick>
 8008724:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008726:	e008      	b.n	800873a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008728:	f7f9 ffbc 	bl	80026a4 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d901      	bls.n	800873a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e2a5      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800873a:	f7ff fda6 	bl	800828a <LL_RCC_MSI_IsReady>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1f1      	bne.n	8008728 <HAL_RCC_OscConfig+0x194>
 8008744:	e000      	b.n	8008748 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008746:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d058      	beq.n	8008806 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	2b08      	cmp	r3, #8
 8008758:	d005      	beq.n	8008766 <HAL_RCC_OscConfig+0x1d2>
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	2b0c      	cmp	r3, #12
 800875e:	d108      	bne.n	8008772 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	2b03      	cmp	r3, #3
 8008764:	d105      	bne.n	8008772 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d14b      	bne.n	8008806 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e289      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8008772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689b      	ldr	r3, [r3, #8]
 8008780:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008784:	4313      	orrs	r3, r2
 8008786:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008790:	d102      	bne.n	8008798 <HAL_RCC_OscConfig+0x204>
 8008792:	f7ff fcae 	bl	80080f2 <LL_RCC_HSE_Enable>
 8008796:	e00d      	b.n	80087b4 <HAL_RCC_OscConfig+0x220>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80087a0:	d104      	bne.n	80087ac <HAL_RCC_OscConfig+0x218>
 80087a2:	f7ff fc79 	bl	8008098 <LL_RCC_HSE_EnableTcxo>
 80087a6:	f7ff fca4 	bl	80080f2 <LL_RCC_HSE_Enable>
 80087aa:	e003      	b.n	80087b4 <HAL_RCC_OscConfig+0x220>
 80087ac:	f7ff fcaf 	bl	800810e <LL_RCC_HSE_Disable>
 80087b0:	f7ff fc80 	bl	80080b4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d012      	beq.n	80087e2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087bc:	f7f9 ff72 	bl	80026a4 <HAL_GetTick>
 80087c0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80087c2:	e008      	b.n	80087d6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087c4:	f7f9 ff6e 	bl	80026a4 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b64      	cmp	r3, #100	; 0x64
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e257      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80087d6:	f7ff fca8 	bl	800812a <LL_RCC_HSE_IsReady>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d0f1      	beq.n	80087c4 <HAL_RCC_OscConfig+0x230>
 80087e0:	e011      	b.n	8008806 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e2:	f7f9 ff5f 	bl	80026a4 <HAL_GetTick>
 80087e6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80087e8:	e008      	b.n	80087fc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087ea:	f7f9 ff5b 	bl	80026a4 <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b64      	cmp	r3, #100	; 0x64
 80087f6:	d901      	bls.n	80087fc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e244      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80087fc:	f7ff fc95 	bl	800812a <LL_RCC_HSE_IsReady>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f1      	bne.n	80087ea <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d046      	beq.n	80088a0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	2b04      	cmp	r3, #4
 8008816:	d005      	beq.n	8008824 <HAL_RCC_OscConfig+0x290>
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	2b0c      	cmp	r3, #12
 800881c:	d10e      	bne.n	800883c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d10b      	bne.n	800883c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e22a      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	4618      	mov	r0, r3
 8008836:	f7ff fcb6 	bl	80081a6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800883a:	e031      	b.n	80088a0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d019      	beq.n	8008878 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008844:	f7ff fc82 	bl	800814c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008848:	f7f9 ff2c 	bl	80026a4 <HAL_GetTick>
 800884c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800884e:	e008      	b.n	8008862 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008850:	f7f9 ff28 	bl	80026a4 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d901      	bls.n	8008862 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e211      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008862:	f7ff fc8f 	bl	8008184 <LL_RCC_HSI_IsReady>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0f1      	beq.n	8008850 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fc98 	bl	80081a6 <LL_RCC_HSI_SetCalibTrimming>
 8008876:	e013      	b.n	80088a0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008878:	f7ff fc76 	bl	8008168 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800887c:	f7f9 ff12 	bl	80026a4 <HAL_GetTick>
 8008880:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008884:	f7f9 ff0e 	bl	80026a4 <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e1f7      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008896:	f7ff fc75 	bl	8008184 <LL_RCC_HSI_IsReady>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f1      	bne.n	8008884 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0308 	and.w	r3, r3, #8
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d06e      	beq.n	800898a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d056      	beq.n	8008962 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80088b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088bc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69da      	ldr	r2, [r3, #28]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f003 0310 	and.w	r3, r3, #16
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d031      	beq.n	8008930 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d006      	beq.n	80088e4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e1d0      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d013      	beq.n	8008916 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80088ee:	f7ff fc8f 	bl	8008210 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80088f2:	f7f9 fed7 	bl	80026a4 <HAL_GetTick>
 80088f6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80088f8:	e008      	b.n	800890c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088fa:	f7f9 fed3 	bl	80026a4 <HAL_GetTick>
 80088fe:	4602      	mov	r2, r0
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	2b11      	cmp	r3, #17
 8008906:	d901      	bls.n	800890c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8008908:	2303      	movs	r3, #3
 800890a:	e1bc      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800890c:	f7ff fc90 	bl	8008230 <LL_RCC_LSI_IsReady>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f1      	bne.n	80088fa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8008916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800891a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800891e:	f023 0210 	bic.w	r2, r3, #16
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	69db      	ldr	r3, [r3, #28]
 8008926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800892a:	4313      	orrs	r3, r2
 800892c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008930:	f7ff fc5e 	bl	80081f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008934:	f7f9 feb6 	bl	80026a4 <HAL_GetTick>
 8008938:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800893a:	e00c      	b.n	8008956 <HAL_RCC_OscConfig+0x3c2>
 800893c:	20000000 	.word	0x20000000
 8008940:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008944:	f7f9 feae 	bl	80026a4 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b11      	cmp	r3, #17
 8008950:	d901      	bls.n	8008956 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e197      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8008956:	f7ff fc6b 	bl	8008230 <LL_RCC_LSI_IsReady>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0f1      	beq.n	8008944 <HAL_RCC_OscConfig+0x3b0>
 8008960:	e013      	b.n	800898a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008962:	f7ff fc55 	bl	8008210 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008966:	f7f9 fe9d 	bl	80026a4 <HAL_GetTick>
 800896a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800896c:	e008      	b.n	8008980 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800896e:	f7f9 fe99 	bl	80026a4 <HAL_GetTick>
 8008972:	4602      	mov	r2, r0
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	2b11      	cmp	r3, #17
 800897a:	d901      	bls.n	8008980 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e182      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008980:	f7ff fc56 	bl	8008230 <LL_RCC_LSI_IsReady>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1f1      	bne.n	800896e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 80d8 	beq.w	8008b48 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008998:	f7ff fb6c 	bl	8008074 <LL_PWR_IsEnabledBkUpAccess>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d113      	bne.n	80089ca <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80089a2:	f7ff fb4d 	bl	8008040 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089a6:	f7f9 fe7d 	bl	80026a4 <HAL_GetTick>
 80089aa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80089ac:	e008      	b.n	80089c0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ae:	f7f9 fe79 	bl	80026a4 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d901      	bls.n	80089c0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e162      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80089c0:	f7ff fb58 	bl	8008074 <LL_PWR_IsEnabledBkUpAccess>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0f1      	beq.n	80089ae <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d07b      	beq.n	8008aca <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	2b85      	cmp	r3, #133	; 0x85
 80089d8:	d003      	beq.n	80089e2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	2b05      	cmp	r3, #5
 80089e0:	d109      	bne.n	80089f6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80089e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089ee:	f043 0304 	orr.w	r3, r3, #4
 80089f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089f6:	f7f9 fe55 	bl	80026a4 <HAL_GetTick>
 80089fa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80089fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a08:	f043 0301 	orr.w	r3, r3, #1
 8008a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008a10:	e00a      	b.n	8008a28 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a12:	f7f9 fe47 	bl	80026a4 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d901      	bls.n	8008a28 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8008a24:	2303      	movs	r3, #3
 8008a26:	e12e      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008a28:	f7ff fbd1 	bl	80081ce <LL_RCC_LSE_IsReady>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0ef      	beq.n	8008a12 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	2b81      	cmp	r3, #129	; 0x81
 8008a38:	d003      	beq.n	8008a42 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	2b85      	cmp	r3, #133	; 0x85
 8008a40:	d121      	bne.n	8008a86 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a42:	f7f9 fe2f 	bl	80026a4 <HAL_GetTick>
 8008a46:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a5c:	e00a      	b.n	8008a74 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a5e:	f7f9 fe21 	bl	80026a4 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e108      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0ec      	beq.n	8008a5e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008a84:	e060      	b.n	8008b48 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a86:	f7f9 fe0d 	bl	80026a4 <HAL_GetTick>
 8008a8a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008aa0:	e00a      	b.n	8008ab8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aa2:	f7f9 fdff 	bl	80026a4 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e0e6      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1ec      	bne.n	8008aa2 <HAL_RCC_OscConfig+0x50e>
 8008ac8:	e03e      	b.n	8008b48 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008aca:	f7f9 fdeb 	bl	80026a4 <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ae4:	e00a      	b.n	8008afc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae6:	f7f9 fddd 	bl	80026a4 <HAL_GetTick>
 8008aea:	4602      	mov	r2, r0
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d901      	bls.n	8008afc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e0c4      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1ec      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b0c:	f7f9 fdca 	bl	80026a4 <HAL_GetTick>
 8008b10:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008b26:	e00a      	b.n	8008b3e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b28:	f7f9 fdbc 	bl	80026a4 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e0a3      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008b3e:	f7ff fb46 	bl	80081ce <LL_RCC_LSE_IsReady>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d1ef      	bne.n	8008b28 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8099 	beq.w	8008c84 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	2b0c      	cmp	r3, #12
 8008b56:	d06c      	beq.n	8008c32 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d14b      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b60:	f7ff fc87 	bl	8008472 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b64:	f7f9 fd9e 	bl	80026a4 <HAL_GetTick>
 8008b68:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b6c:	f7f9 fd9a 	bl	80026a4 <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b0a      	cmp	r3, #10
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e083      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008b7e:	f7ff fc86 	bl	800848e <LL_RCC_PLL_IsReady>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1f1      	bne.n	8008b6c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	4b40      	ldr	r3, [pc, #256]	; (8008c90 <HAL_RCC_OscConfig+0x6fc>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b9a:	4311      	orrs	r1, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008ba0:	0212      	lsls	r2, r2, #8
 8008ba2:	4311      	orrs	r1, r2
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008ba8:	4311      	orrs	r1, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008bae:	4311      	orrs	r1, r2
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008bbe:	f7ff fc4a 	bl	8008456 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bd0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bd2:	f7f9 fd67 	bl	80026a4 <HAL_GetTick>
 8008bd6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008bd8:	e008      	b.n	8008bec <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bda:	f7f9 fd63 	bl	80026a4 <HAL_GetTick>
 8008bde:	4602      	mov	r2, r0
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	2b0a      	cmp	r3, #10
 8008be6:	d901      	bls.n	8008bec <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e04c      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8008bec:	f7ff fc4f 	bl	800848e <LL_RCC_PLL_IsReady>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d0f1      	beq.n	8008bda <HAL_RCC_OscConfig+0x646>
 8008bf6:	e045      	b.n	8008c84 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bf8:	f7ff fc3b 	bl	8008472 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bfc:	f7f9 fd52 	bl	80026a4 <HAL_GetTick>
 8008c00:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008c02:	e008      	b.n	8008c16 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c04:	f7f9 fd4e 	bl	80026a4 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b0a      	cmp	r3, #10
 8008c10:	d901      	bls.n	8008c16 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e037      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008c16:	f7ff fc3a 	bl	800848e <LL_RCC_PLL_IsReady>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1f1      	bne.n	8008c04 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c2a:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <HAL_RCC_OscConfig+0x700>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	60cb      	str	r3, [r1, #12]
 8008c30:	e028      	b.n	8008c84 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e023      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	f003 0203 	and.w	r2, r3, #3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d115      	bne.n	8008c80 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d10e      	bne.n	8008c80 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6c:	021b      	lsls	r3, r3, #8
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d106      	bne.n	8008c80 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d001      	beq.n	8008c84 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e000      	b.n	8008c86 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3720      	adds	r7, #32
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	11c1808c 	.word	0x11c1808c
 8008c94:	eefefffc 	.word	0xeefefffc

08008c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e10f      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008cac:	4b89      	ldr	r3, [pc, #548]	; (8008ed4 <HAL_RCC_ClockConfig+0x23c>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0307 	and.w	r3, r3, #7
 8008cb4:	683a      	ldr	r2, [r7, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d91b      	bls.n	8008cf2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cba:	4b86      	ldr	r3, [pc, #536]	; (8008ed4 <HAL_RCC_ClockConfig+0x23c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f023 0207 	bic.w	r2, r3, #7
 8008cc2:	4984      	ldr	r1, [pc, #528]	; (8008ed4 <HAL_RCC_ClockConfig+0x23c>)
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cca:	f7f9 fceb 	bl	80026a4 <HAL_GetTick>
 8008cce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cd0:	e008      	b.n	8008ce4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008cd2:	f7f9 fce7 	bl	80026a4 <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d901      	bls.n	8008ce4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e0f3      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ce4:	4b7b      	ldr	r3, [pc, #492]	; (8008ed4 <HAL_RCC_ClockConfig+0x23c>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d1ef      	bne.n	8008cd2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d016      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7ff fb2a 	bl	800835c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d08:	f7f9 fccc 	bl	80026a4 <HAL_GetTick>
 8008d0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d10:	f7f9 fcc8 	bl	80026a4 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e0d4      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008d22:	f7ff fbf2 	bl	800850a <LL_RCC_IsActiveFlag_HPRE>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d0f1      	beq.n	8008d10 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d016      	beq.n	8008d66 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff fb20 	bl	8008382 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d42:	f7f9 fcaf 	bl	80026a4 <HAL_GetTick>
 8008d46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d48:	e008      	b.n	8008d5c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d4a:	f7f9 fcab 	bl	80026a4 <HAL_GetTick>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	d901      	bls.n	8008d5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e0b7      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d5c:	f7ff fbe6 	bl	800852c <LL_RCC_IsActiveFlag_SHDHPRE>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0f1      	beq.n	8008d4a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0304 	and.w	r3, r3, #4
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d016      	beq.n	8008da0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff fb19 	bl	80083ae <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d7c:	f7f9 fc92 	bl	80026a4 <HAL_GetTick>
 8008d80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d82:	e008      	b.n	8008d96 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d84:	f7f9 fc8e 	bl	80026a4 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d901      	bls.n	8008d96 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e09a      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d96:	f7ff fbdb 	bl	8008550 <LL_RCC_IsActiveFlag_PPRE1>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0f1      	beq.n	8008d84 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0308 	and.w	r3, r3, #8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d017      	beq.n	8008ddc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7ff fb0e 	bl	80083d4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008db8:	f7f9 fc74 	bl	80026a4 <HAL_GetTick>
 8008dbc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008dc0:	f7f9 fc70 	bl	80026a4 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e07c      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008dd2:	f7ff fbce 	bl	8008572 <LL_RCC_IsActiveFlag_PPRE2>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0f1      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d043      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d106      	bne.n	8008dfe <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008df0:	f7ff f99b 	bl	800812a <LL_RCC_HSE_IsReady>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d11e      	bne.n	8008e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e066      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d106      	bne.n	8008e14 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008e06:	f7ff fb42 	bl	800848e <LL_RCC_PLL_IsReady>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d113      	bne.n	8008e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e05b      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d106      	bne.n	8008e2a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008e1c:	f7ff fa35 	bl	800828a <LL_RCC_MSI_IsReady>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d108      	bne.n	8008e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e050      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008e2a:	f7ff f9ab 	bl	8008184 <LL_RCC_HSI_IsReady>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e049      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fa6f 	bl	8008320 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e42:	f7f9 fc2f 	bl	80026a4 <HAL_GetTick>
 8008e46:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e48:	e00a      	b.n	8008e60 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e4a:	f7f9 fc2b 	bl	80026a4 <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d901      	bls.n	8008e60 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e035      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e60:	f7ff fa71 	bl	8008346 <LL_RCC_GetSysClkSource>
 8008e64:	4602      	mov	r2, r0
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d1ec      	bne.n	8008e4a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e70:	4b18      	ldr	r3, [pc, #96]	; (8008ed4 <HAL_RCC_ClockConfig+0x23c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d21b      	bcs.n	8008eb6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e7e:	4b15      	ldr	r3, [pc, #84]	; (8008ed4 <HAL_RCC_ClockConfig+0x23c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f023 0207 	bic.w	r2, r3, #7
 8008e86:	4913      	ldr	r1, [pc, #76]	; (8008ed4 <HAL_RCC_ClockConfig+0x23c>)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e8e:	f7f9 fc09 	bl	80026a4 <HAL_GetTick>
 8008e92:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e94:	e008      	b.n	8008ea8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008e96:	f7f9 fc05 	bl	80026a4 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d901      	bls.n	8008ea8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e011      	b.n	8008ecc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <HAL_RCC_ClockConfig+0x23c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0307 	and.w	r3, r3, #7
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d1ef      	bne.n	8008e96 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008eb6:	f000 f8b3 	bl	8009020 <HAL_RCC_GetHCLKFreq>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4a06      	ldr	r2, [pc, #24]	; (8008ed8 <HAL_RCC_ClockConfig+0x240>)
 8008ebe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8008ec0:	4b06      	ldr	r3, [pc, #24]	; (8008edc <HAL_RCC_ClockConfig+0x244>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7f9 fbe3 	bl	8002690 <HAL_InitTick>
 8008eca:	4603      	mov	r3, r0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	58004000 	.word	0x58004000
 8008ed8:	20000000 	.word	0x20000000
 8008edc:	20000004 	.word	0x20000004

08008ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ee0:	b590      	push	{r4, r7, lr}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8008eea:	2300      	movs	r3, #0
 8008eec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eee:	f7ff fa2a 	bl	8008346 <LL_RCC_GetSysClkSource>
 8008ef2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ef4:	f7ff fafe 	bl	80084f4 <LL_RCC_PLL_GetMainSource>
 8008ef8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <HAL_RCC_GetSysClockFreq+0x2c>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b0c      	cmp	r3, #12
 8008f04:	d139      	bne.n	8008f7a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d136      	bne.n	8008f7a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008f0c:	f7ff f9cd 	bl	80082aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d115      	bne.n	8008f42 <HAL_RCC_GetSysClockFreq+0x62>
 8008f16:	f7ff f9c8 	bl	80082aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d106      	bne.n	8008f2e <HAL_RCC_GetSysClockFreq+0x4e>
 8008f20:	f7ff f9d3 	bl	80082ca <LL_RCC_MSI_GetRange>
 8008f24:	4603      	mov	r3, r0
 8008f26:	0a1b      	lsrs	r3, r3, #8
 8008f28:	f003 030f 	and.w	r3, r3, #15
 8008f2c:	e005      	b.n	8008f3a <HAL_RCC_GetSysClockFreq+0x5a>
 8008f2e:	f7ff f9d7 	bl	80082e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8008f32:	4603      	mov	r3, r0
 8008f34:	0a1b      	lsrs	r3, r3, #8
 8008f36:	f003 030f 	and.w	r3, r3, #15
 8008f3a:	4a36      	ldr	r2, [pc, #216]	; (8009014 <HAL_RCC_GetSysClockFreq+0x134>)
 8008f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f40:	e014      	b.n	8008f6c <HAL_RCC_GetSysClockFreq+0x8c>
 8008f42:	f7ff f9b2 	bl	80082aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d106      	bne.n	8008f5a <HAL_RCC_GetSysClockFreq+0x7a>
 8008f4c:	f7ff f9bd 	bl	80082ca <LL_RCC_MSI_GetRange>
 8008f50:	4603      	mov	r3, r0
 8008f52:	091b      	lsrs	r3, r3, #4
 8008f54:	f003 030f 	and.w	r3, r3, #15
 8008f58:	e005      	b.n	8008f66 <HAL_RCC_GetSysClockFreq+0x86>
 8008f5a:	f7ff f9c1 	bl	80082e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	091b      	lsrs	r3, r3, #4
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	4a2b      	ldr	r2, [pc, #172]	; (8009014 <HAL_RCC_GetSysClockFreq+0x134>)
 8008f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d115      	bne.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008f78:	e012      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d102      	bne.n	8008f86 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f80:	4b25      	ldr	r3, [pc, #148]	; (8009018 <HAL_RCC_GetSysClockFreq+0x138>)
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	e00c      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d109      	bne.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008f8c:	f7ff f8a0 	bl	80080d0 <LL_RCC_HSE_IsEnabledDiv2>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d102      	bne.n	8008f9c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008f96:	4b20      	ldr	r3, [pc, #128]	; (8009018 <HAL_RCC_GetSysClockFreq+0x138>)
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e001      	b.n	8008fa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008f9c:	4b1f      	ldr	r3, [pc, #124]	; (800901c <HAL_RCC_GetSysClockFreq+0x13c>)
 8008f9e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008fa0:	f7ff f9d1 	bl	8008346 <LL_RCC_GetSysClkSource>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b0c      	cmp	r3, #12
 8008fa8:	d12f      	bne.n	800900a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008faa:	f7ff faa3 	bl	80084f4 <LL_RCC_PLL_GetMainSource>
 8008fae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d003      	beq.n	8008fbe <HAL_RCC_GetSysClockFreq+0xde>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b03      	cmp	r3, #3
 8008fba:	d003      	beq.n	8008fc4 <HAL_RCC_GetSysClockFreq+0xe4>
 8008fbc:	e00d      	b.n	8008fda <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008fbe:	4b16      	ldr	r3, [pc, #88]	; (8009018 <HAL_RCC_GetSysClockFreq+0x138>)
 8008fc0:	60fb      	str	r3, [r7, #12]
        break;
 8008fc2:	e00d      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008fc4:	f7ff f884 	bl	80080d0 <LL_RCC_HSE_IsEnabledDiv2>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d102      	bne.n	8008fd4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <HAL_RCC_GetSysClockFreq+0x138>)
 8008fd0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008fd2:	e005      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008fd4:	4b11      	ldr	r3, [pc, #68]	; (800901c <HAL_RCC_GetSysClockFreq+0x13c>)
 8008fd6:	60fb      	str	r3, [r7, #12]
        break;
 8008fd8:	e002      	b.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	60fb      	str	r3, [r7, #12]
        break;
 8008fde:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008fe0:	f7ff fa66 	bl	80084b0 <LL_RCC_PLL_GetN>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	fb03 f402 	mul.w	r4, r3, r2
 8008fec:	f7ff fa77 	bl	80084de <LL_RCC_PLL_GetDivider>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	091b      	lsrs	r3, r3, #4
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	fbb4 f4f3 	udiv	r4, r4, r3
 8008ffa:	f7ff fa65 	bl	80084c8 <LL_RCC_PLL_GetR>
 8008ffe:	4603      	mov	r3, r0
 8009000:	0f5b      	lsrs	r3, r3, #29
 8009002:	3301      	adds	r3, #1
 8009004:	fbb4 f3f3 	udiv	r3, r4, r3
 8009008:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800900a:	697b      	ldr	r3, [r7, #20]
}
 800900c:	4618      	mov	r0, r3
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	bd90      	pop	{r4, r7, pc}
 8009014:	08021aac 	.word	0x08021aac
 8009018:	00f42400 	.word	0x00f42400
 800901c:	01e84800 	.word	0x01e84800

08009020 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009020:	b598      	push	{r3, r4, r7, lr}
 8009022:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009024:	f7ff ff5c 	bl	8008ee0 <HAL_RCC_GetSysClockFreq>
 8009028:	4604      	mov	r4, r0
 800902a:	f7ff f9e6 	bl	80083fa <LL_RCC_GetAHBPrescaler>
 800902e:	4603      	mov	r3, r0
 8009030:	091b      	lsrs	r3, r3, #4
 8009032:	f003 030f 	and.w	r3, r3, #15
 8009036:	4a03      	ldr	r2, [pc, #12]	; (8009044 <HAL_RCC_GetHCLKFreq+0x24>)
 8009038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800903c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009040:	4618      	mov	r0, r3
 8009042:	bd98      	pop	{r3, r4, r7, pc}
 8009044:	08021a4c 	.word	0x08021a4c

08009048 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009048:	b598      	push	{r3, r4, r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800904c:	f7ff ffe8 	bl	8009020 <HAL_RCC_GetHCLKFreq>
 8009050:	4604      	mov	r4, r0
 8009052:	f7ff f9ea 	bl	800842a <LL_RCC_GetAPB1Prescaler>
 8009056:	4603      	mov	r3, r0
 8009058:	0a1b      	lsrs	r3, r3, #8
 800905a:	4a03      	ldr	r2, [pc, #12]	; (8009068 <HAL_RCC_GetPCLK1Freq+0x20>)
 800905c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009060:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009064:	4618      	mov	r0, r3
 8009066:	bd98      	pop	{r3, r4, r7, pc}
 8009068:	08021a8c 	.word	0x08021a8c

0800906c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800906c:	b598      	push	{r3, r4, r7, lr}
 800906e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009070:	f7ff ffd6 	bl	8009020 <HAL_RCC_GetHCLKFreq>
 8009074:	4604      	mov	r4, r0
 8009076:	f7ff f9e3 	bl	8008440 <LL_RCC_GetAPB2Prescaler>
 800907a:	4603      	mov	r3, r0
 800907c:	0adb      	lsrs	r3, r3, #11
 800907e:	4a03      	ldr	r2, [pc, #12]	; (800908c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009084:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009088:	4618      	mov	r0, r3
 800908a:	bd98      	pop	{r3, r4, r7, pc}
 800908c:	08021a8c 	.word	0x08021a8c

08009090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009090:	b590      	push	{r4, r7, lr}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	091b      	lsrs	r3, r3, #4
 800909c:	f003 030f 	and.w	r3, r3, #15
 80090a0:	4a10      	ldr	r2, [pc, #64]	; (80090e4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80090a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80090a8:	f7ff f9b2 	bl	8008410 <LL_RCC_GetAHB3Prescaler>
 80090ac:	4603      	mov	r3, r0
 80090ae:	091b      	lsrs	r3, r3, #4
 80090b0:	f003 030f 	and.w	r3, r3, #15
 80090b4:	4a0c      	ldr	r2, [pc, #48]	; (80090e8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80090b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	4a09      	ldr	r2, [pc, #36]	; (80090ec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80090c6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ca:	0c9c      	lsrs	r4, r3, #18
 80090cc:	f7fe ffc6 	bl	800805c <HAL_PWREx_GetVoltageRange>
 80090d0:	4603      	mov	r3, r0
 80090d2:	4619      	mov	r1, r3
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 f80b 	bl	80090f0 <RCC_SetFlashLatency>
 80090da:	4603      	mov	r3, r0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd90      	pop	{r4, r7, pc}
 80090e4:	08021aac 	.word	0x08021aac
 80090e8:	08021a4c 	.word	0x08021a4c
 80090ec:	431bde83 	.word	0x431bde83

080090f0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b08e      	sub	sp, #56	; 0x38
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80090fa:	4a3a      	ldr	r2, [pc, #232]	; (80091e4 <RCC_SetFlashLatency+0xf4>)
 80090fc:	f107 0320 	add.w	r3, r7, #32
 8009100:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009104:	6018      	str	r0, [r3, #0]
 8009106:	3304      	adds	r3, #4
 8009108:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800910a:	4a37      	ldr	r2, [pc, #220]	; (80091e8 <RCC_SetFlashLatency+0xf8>)
 800910c:	f107 0318 	add.w	r3, r7, #24
 8009110:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009114:	6018      	str	r0, [r3, #0]
 8009116:	3304      	adds	r3, #4
 8009118:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800911a:	4a34      	ldr	r2, [pc, #208]	; (80091ec <RCC_SetFlashLatency+0xfc>)
 800911c:	f107 030c 	add.w	r3, r7, #12
 8009120:	ca07      	ldmia	r2, {r0, r1, r2}
 8009122:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009126:	2300      	movs	r3, #0
 8009128:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009130:	d11b      	bne.n	800916a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009132:	2300      	movs	r3, #0
 8009134:	633b      	str	r3, [r7, #48]	; 0x30
 8009136:	e014      	b.n	8009162 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	3338      	adds	r3, #56	; 0x38
 800913e:	443b      	add	r3, r7
 8009140:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009144:	461a      	mov	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4293      	cmp	r3, r2
 800914a:	d807      	bhi.n	800915c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800914c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	3338      	adds	r3, #56	; 0x38
 8009152:	443b      	add	r3, r7
 8009154:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009158:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800915a:	e021      	b.n	80091a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	3301      	adds	r3, #1
 8009160:	633b      	str	r3, [r7, #48]	; 0x30
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	2b02      	cmp	r3, #2
 8009166:	d9e7      	bls.n	8009138 <RCC_SetFlashLatency+0x48>
 8009168:	e01a      	b.n	80091a0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800916a:	2300      	movs	r3, #0
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800916e:	e014      	b.n	800919a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	3338      	adds	r3, #56	; 0x38
 8009176:	443b      	add	r3, r7
 8009178:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800917c:	461a      	mov	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4293      	cmp	r3, r2
 8009182:	d807      	bhi.n	8009194 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	3338      	adds	r3, #56	; 0x38
 800918a:	443b      	add	r3, r7
 800918c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009190:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009192:	e005      	b.n	80091a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	3301      	adds	r3, #1
 8009198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	2b02      	cmp	r3, #2
 800919e:	d9e7      	bls.n	8009170 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80091a0:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <RCC_SetFlashLatency+0x100>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f023 0207 	bic.w	r2, r3, #7
 80091a8:	4911      	ldr	r1, [pc, #68]	; (80091f0 <RCC_SetFlashLatency+0x100>)
 80091aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ac:	4313      	orrs	r3, r2
 80091ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80091b0:	f7f9 fa78 	bl	80026a4 <HAL_GetTick>
 80091b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80091b6:	e008      	b.n	80091ca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80091b8:	f7f9 fa74 	bl	80026a4 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e007      	b.n	80091da <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <RCC_SetFlashLatency+0x100>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d1ef      	bne.n	80091b8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3738      	adds	r7, #56	; 0x38
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	080211b4 	.word	0x080211b4
 80091e8:	080211bc 	.word	0x080211bc
 80091ec:	080211c4 	.word	0x080211c4
 80091f0:	58004000 	.word	0x58004000

080091f4 <LL_RCC_LSE_IsReady>:
{
 80091f4:	b480      	push	{r7}
 80091f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80091f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	2b02      	cmp	r3, #2
 8009206:	d101      	bne.n	800920c <LL_RCC_LSE_IsReady+0x18>
 8009208:	2301      	movs	r3, #1
 800920a:	e000      	b.n	800920e <LL_RCC_LSE_IsReady+0x1a>
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	46bd      	mov	sp, r7
 8009212:	bc80      	pop	{r7}
 8009214:	4770      	bx	lr

08009216 <LL_RCC_SetUSARTClockSource>:
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800921e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009222:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	0c1b      	lsrs	r3, r3, #16
 800922a:	43db      	mvns	r3, r3
 800922c:	401a      	ands	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	b29b      	uxth	r3, r3
 8009232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009236:	4313      	orrs	r3, r2
 8009238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	bc80      	pop	{r7}
 8009244:	4770      	bx	lr

08009246 <LL_RCC_SetI2SClockSource>:
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800924e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009256:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800925a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4313      	orrs	r3, r2
 8009262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009266:	bf00      	nop
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr

08009270 <LL_RCC_SetLPUARTClockSource>:
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800927c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009280:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4313      	orrs	r3, r2
 800928c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	bc80      	pop	{r7}
 8009298:	4770      	bx	lr

0800929a <LL_RCC_SetI2CClockSource>:
{
 800929a:	b480      	push	{r7}
 800929c:	b083      	sub	sp, #12
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80092a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	091b      	lsrs	r3, r3, #4
 80092ae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80092b2:	43db      	mvns	r3, r3
 80092b4:	401a      	ands	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80092be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092c2:	4313      	orrs	r3, r2
 80092c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr

080092d2 <LL_RCC_SetLPTIMClockSource>:
{
 80092d2:	b480      	push	{r7}
 80092d4:	b083      	sub	sp, #12
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80092da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	0c1b      	lsrs	r3, r3, #16
 80092e6:	041b      	lsls	r3, r3, #16
 80092e8:	43db      	mvns	r3, r3
 80092ea:	401a      	ands	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	041b      	lsls	r3, r3, #16
 80092f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092f4:	4313      	orrs	r3, r2
 80092f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr

08009304 <LL_RCC_SetRNGClockSource>:
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800930c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009314:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4313      	orrs	r3, r2
 8009320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	bc80      	pop	{r7}
 800932c:	4770      	bx	lr

0800932e <LL_RCC_SetADCClockSource>:
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800933a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800933e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4313      	orrs	r3, r2
 800934a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	bc80      	pop	{r7}
 8009356:	4770      	bx	lr

08009358 <LL_RCC_SetRTCClockSource>:
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800936c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4313      	orrs	r3, r2
 8009374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr

08009382 <LL_RCC_GetRTCClockSource>:
{
 8009382:	b480      	push	{r7}
 8009384:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800938a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009392:	4618      	mov	r0, r3
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr

0800939a <LL_RCC_ForceBackupDomainReset>:
{
 800939a:	b480      	push	{r7}
 800939c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800939e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80093b2:	bf00      	nop
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bc80      	pop	{r7}
 80093b8:	4770      	bx	lr

080093ba <LL_RCC_ReleaseBackupDomainReset>:
{
 80093ba:	b480      	push	{r7}
 80093bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80093be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80093d2:	bf00      	nop
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr
	...

080093dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80093e8:	2300      	movs	r3, #0
 80093ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80093ec:	2300      	movs	r3, #0
 80093ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d058      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80093fc:	f7fe fe20 	bl	8008040 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009400:	f7f9 f950 	bl	80026a4 <HAL_GetTick>
 8009404:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009406:	e009      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009408:	f7f9 f94c 	bl	80026a4 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b02      	cmp	r3, #2
 8009414:	d902      	bls.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	74fb      	strb	r3, [r7, #19]
        break;
 800941a:	e006      	b.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800941c:	4b7b      	ldr	r3, [pc, #492]	; (800960c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009428:	d1ee      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800942a:	7cfb      	ldrb	r3, [r7, #19]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d13c      	bne.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009430:	f7ff ffa7 	bl	8009382 <LL_RCC_GetRTCClockSource>
 8009434:	4602      	mov	r2, r0
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943a:	429a      	cmp	r2, r3
 800943c:	d00f      	beq.n	800945e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800943e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800944a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800944c:	f7ff ffa5 	bl	800939a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009450:	f7ff ffb3 	bl	80093ba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d014      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009468:	f7f9 f91c 	bl	80026a4 <HAL_GetTick>
 800946c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800946e:	e00b      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009470:	f7f9 f918 	bl	80026a4 <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	f241 3288 	movw	r2, #5000	; 0x1388
 800947e:	4293      	cmp	r3, r2
 8009480:	d902      	bls.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	74fb      	strb	r3, [r7, #19]
            break;
 8009486:	e004      	b.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009488:	f7ff feb4 	bl	80091f4 <LL_RCC_LSE_IsReady>
 800948c:	4603      	mov	r3, r0
 800948e:	2b01      	cmp	r3, #1
 8009490:	d1ee      	bne.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8009492:	7cfb      	ldrb	r3, [r7, #19]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d105      	bne.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949c:	4618      	mov	r0, r3
 800949e:	f7ff ff5b 	bl	8009358 <LL_RCC_SetRTCClockSource>
 80094a2:	e004      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094a4:	7cfb      	ldrb	r3, [r7, #19]
 80094a6:	74bb      	strb	r3, [r7, #18]
 80094a8:	e001      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094aa:	7cfb      	ldrb	r3, [r7, #19]
 80094ac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0301 	and.w	r3, r3, #1
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d004      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff fea9 	bl	8009216 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d004      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff fe9e 	bl	8009216 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 0320 	and.w	r3, r3, #32
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d004      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7ff fec0 	bl	8009270 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d004      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff fee6 	bl	80092d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800950e:	2b00      	cmp	r3, #0
 8009510:	d004      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fedb 	bl	80092d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009524:	2b00      	cmp	r3, #0
 8009526:	d004      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff fed0 	bl	80092d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	d004      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	4618      	mov	r0, r3
 8009544:	f7ff fea9 	bl	800929a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009550:	2b00      	cmp	r3, #0
 8009552:	d004      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	4618      	mov	r0, r3
 800955a:	f7ff fe9e 	bl	800929a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009566:	2b00      	cmp	r3, #0
 8009568:	d004      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fe93 	bl	800929a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f003 0310 	and.w	r3, r3, #16
 800957c:	2b00      	cmp	r3, #0
 800957e:	d011      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	4618      	mov	r0, r3
 8009586:	f7ff fe5e 	bl	8009246 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009592:	d107      	bne.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8009594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800959e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d010      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7ff fea5 	bl	8009304 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d107      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80095c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d011      	beq.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff fea3 	bl	800932e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095f0:	d107      	bne.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80095f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009600:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8009602:	7cbb      	ldrb	r3, [r7, #18]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	58000400 	.word	0x58000400

08009610 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d071      	beq.n	8009706 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7f8 fdc4 	bl	80021c4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009644:	4b32      	ldr	r3, [pc, #200]	; (8009710 <HAL_RTC_Init+0x100>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f003 0310 	and.w	r3, r3, #16
 800964c:	2b10      	cmp	r3, #16
 800964e:	d051      	beq.n	80096f4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009650:	4b2f      	ldr	r3, [pc, #188]	; (8009710 <HAL_RTC_Init+0x100>)
 8009652:	22ca      	movs	r2, #202	; 0xca
 8009654:	625a      	str	r2, [r3, #36]	; 0x24
 8009656:	4b2e      	ldr	r3, [pc, #184]	; (8009710 <HAL_RTC_Init+0x100>)
 8009658:	2253      	movs	r2, #83	; 0x53
 800965a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fa11 	bl	8009a84 <RTC_EnterInitMode>
 8009662:	4603      	mov	r3, r0
 8009664:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d13f      	bne.n	80096ec <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800966c:	4b28      	ldr	r3, [pc, #160]	; (8009710 <HAL_RTC_Init+0x100>)
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	4a27      	ldr	r2, [pc, #156]	; (8009710 <HAL_RTC_Init+0x100>)
 8009672:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8009676:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800967a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800967c:	4b24      	ldr	r3, [pc, #144]	; (8009710 <HAL_RTC_Init+0x100>)
 800967e:	699a      	ldr	r2, [r3, #24]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6859      	ldr	r1, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	4319      	orrs	r1, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	430b      	orrs	r3, r1
 8009690:	491f      	ldr	r1, [pc, #124]	; (8009710 <HAL_RTC_Init+0x100>)
 8009692:	4313      	orrs	r3, r2
 8009694:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	041b      	lsls	r3, r3, #16
 80096a0:	491b      	ldr	r1, [pc, #108]	; (8009710 <HAL_RTC_Init+0x100>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80096a6:	4b1a      	ldr	r3, [pc, #104]	; (8009710 <HAL_RTC_Init+0x100>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b6:	430b      	orrs	r3, r1
 80096b8:	4915      	ldr	r1, [pc, #84]	; (8009710 <HAL_RTC_Init+0x100>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa14 	bl	8009aec <RTC_ExitInitMode>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10e      	bne.n	80096ec <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80096ce:	4b10      	ldr	r3, [pc, #64]	; (8009710 <HAL_RTC_Init+0x100>)
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a19      	ldr	r1, [r3, #32]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69db      	ldr	r3, [r3, #28]
 80096de:	4319      	orrs	r1, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	430b      	orrs	r3, r1
 80096e6:	490a      	ldr	r1, [pc, #40]	; (8009710 <HAL_RTC_Init+0x100>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096ec:	4b08      	ldr	r3, [pc, #32]	; (8009710 <HAL_RTC_Init+0x100>)
 80096ee:	22ff      	movs	r2, #255	; 0xff
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24
 80096f2:	e001      	b.n	80096f8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d103      	bne.n	8009706 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	40002800 	.word	0x40002800

08009714 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009714:	b590      	push	{r4, r7, lr}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <HAL_RTC_SetAlarm_IT+0x1e>
 800972e:	2302      	movs	r3, #2
 8009730:	e0f3      	b.n	800991a <HAL_RTC_SetAlarm_IT+0x206>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2202      	movs	r2, #2
 800973e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8009742:	4b78      	ldr	r3, [pc, #480]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800974a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009752:	d06a      	beq.n	800982a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d13a      	bne.n	80097d0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800975a:	4b72      	ldr	r3, [pc, #456]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009762:	2b00      	cmp	r3, #0
 8009764:	d102      	bne.n	800976c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	4618      	mov	r0, r3
 800977a:	f000 f9f5 	bl	8009b68 <RTC_ByteToBcd2>
 800977e:	4603      	mov	r3, r0
 8009780:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f9ee 	bl	8009b68 <RTC_ByteToBcd2>
 800978c:	4603      	mov	r3, r0
 800978e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009790:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	789b      	ldrb	r3, [r3, #2]
 8009796:	4618      	mov	r0, r3
 8009798:	f000 f9e6 	bl	8009b68 <RTC_ByteToBcd2>
 800979c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800979e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	78db      	ldrb	r3, [r3, #3]
 80097a6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80097a8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f9d8 	bl	8009b68 <RTC_ByteToBcd2>
 80097b8:	4603      	mov	r3, r0
 80097ba:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80097bc:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80097c4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80097ca:	4313      	orrs	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]
 80097ce:	e02c      	b.n	800982a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80097d8:	d00d      	beq.n	80097f6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097e2:	d008      	beq.n	80097f6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80097e4:	4b4f      	ldr	r3, [pc, #316]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d102      	bne.n	80097f6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2200      	movs	r2, #0
 80097f4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009802:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009808:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	78db      	ldrb	r3, [r3, #3]
 800980e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009810:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009818:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800981a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009820:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009826:	4313      	orrs	r3, r2
 8009828:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800982a:	4b3e      	ldr	r3, [pc, #248]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 800982c:	22ca      	movs	r2, #202	; 0xca
 800982e:	625a      	str	r2, [r3, #36]	; 0x24
 8009830:	4b3c      	ldr	r3, [pc, #240]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 8009832:	2253      	movs	r2, #83	; 0x53
 8009834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800983e:	d12c      	bne.n	800989a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009840:	4b38      	ldr	r3, [pc, #224]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	4a37      	ldr	r2, [pc, #220]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 8009846:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800984a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800984c:	4b35      	ldr	r3, [pc, #212]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 800984e:	2201      	movs	r2, #1
 8009850:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009858:	d107      	bne.n	800986a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	699a      	ldr	r2, [r3, #24]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	69db      	ldr	r3, [r3, #28]
 8009862:	4930      	ldr	r1, [pc, #192]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 8009864:	4313      	orrs	r3, r2
 8009866:	644b      	str	r3, [r1, #68]	; 0x44
 8009868:	e006      	b.n	8009878 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800986a:	4a2e      	ldr	r2, [pc, #184]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009870:	4a2c      	ldr	r2, [pc, #176]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009878:	4a2a      	ldr	r2, [pc, #168]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	f043 0201 	orr.w	r2, r3, #1
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800988c:	4b25      	ldr	r3, [pc, #148]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	4a24      	ldr	r2, [pc, #144]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 8009892:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8009896:	6193      	str	r3, [r2, #24]
 8009898:	e02b      	b.n	80098f2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800989a:	4b22      	ldr	r3, [pc, #136]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	4a21      	ldr	r2, [pc, #132]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80098a0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80098a4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80098a6:	4b1f      	ldr	r3, [pc, #124]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80098a8:	2202      	movs	r2, #2
 80098aa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b2:	d107      	bne.n	80098c4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	699a      	ldr	r2, [r3, #24]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	4919      	ldr	r1, [pc, #100]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80098c2:	e006      	b.n	80098d2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80098c4:	4a17      	ldr	r2, [pc, #92]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80098ca:	4a16      	ldr	r2, [pc, #88]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80098d2:	4a14      	ldr	r2, [pc, #80]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098de:	f043 0202 	orr.w	r2, r3, #2
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80098e6:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	4a0e      	ldr	r2, [pc, #56]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 80098ec:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80098f0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80098f2:	4b0d      	ldr	r3, [pc, #52]	; (8009928 <HAL_RTC_SetAlarm_IT+0x214>)
 80098f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098f8:	4a0b      	ldr	r2, [pc, #44]	; (8009928 <HAL_RTC_SetAlarm_IT+0x214>)
 80098fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009902:	4b08      	ldr	r3, [pc, #32]	; (8009924 <HAL_RTC_SetAlarm_IT+0x210>)
 8009904:	22ff      	movs	r2, #255	; 0xff
 8009906:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	371c      	adds	r7, #28
 800991e:	46bd      	mov	sp, r7
 8009920:	bd90      	pop	{r4, r7, pc}
 8009922:	bf00      	nop
 8009924:	40002800 	.word	0x40002800
 8009928:	58000800 	.word	0x58000800

0800992c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800993c:	2b01      	cmp	r3, #1
 800993e:	d101      	bne.n	8009944 <HAL_RTC_DeactivateAlarm+0x18>
 8009940:	2302      	movs	r3, #2
 8009942:	e048      	b.n	80099d6 <HAL_RTC_DeactivateAlarm+0xaa>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009954:	4b22      	ldr	r3, [pc, #136]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009956:	22ca      	movs	r2, #202	; 0xca
 8009958:	625a      	str	r2, [r3, #36]	; 0x24
 800995a:	4b21      	ldr	r3, [pc, #132]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800995c:	2253      	movs	r2, #83	; 0x53
 800995e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009966:	d115      	bne.n	8009994 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009968:	4b1d      	ldr	r3, [pc, #116]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	4a1c      	ldr	r2, [pc, #112]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800996e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009972:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009974:	4b1a      	ldr	r3, [pc, #104]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009978:	4a19      	ldr	r2, [pc, #100]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800997a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800997e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009984:	f023 0201 	bic.w	r2, r3, #1
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800998c:	4b14      	ldr	r3, [pc, #80]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800998e:	2201      	movs	r2, #1
 8009990:	65da      	str	r2, [r3, #92]	; 0x5c
 8009992:	e014      	b.n	80099be <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009994:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009996:	699b      	ldr	r3, [r3, #24]
 8009998:	4a11      	ldr	r2, [pc, #68]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 800999a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800999e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80099a0:	4b0f      	ldr	r3, [pc, #60]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80099a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099a4:	4a0e      	ldr	r2, [pc, #56]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80099a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80099aa:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b0:	f023 0202 	bic.w	r2, r3, #2
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80099b8:	4b09      	ldr	r3, [pc, #36]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80099ba:	2202      	movs	r2, #2
 80099bc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099be:	4b08      	ldr	r3, [pc, #32]	; (80099e0 <HAL_RTC_DeactivateAlarm+0xb4>)
 80099c0:	22ff      	movs	r2, #255	; 0xff
 80099c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	370c      	adds	r7, #12
 80099da:	46bd      	mov	sp, r7
 80099dc:	bc80      	pop	{r7}
 80099de:	4770      	bx	lr
 80099e0:	40002800 	.word	0x40002800

080099e4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80099ec:	4b11      	ldr	r3, [pc, #68]	; (8009a34 <HAL_RTC_AlarmIRQHandler+0x50>)
 80099ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f4:	4013      	ands	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009a02:	4b0c      	ldr	r3, [pc, #48]	; (8009a34 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009a04:	2201      	movs	r2, #1
 8009a06:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7f9 f876 	bl	8002afa <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f003 0302 	and.w	r3, r3, #2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d005      	beq.n	8009a24 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009a18:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009a1a:	2202      	movs	r2, #2
 8009a1c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f94a 	bl	8009cb8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009a2c:	bf00      	nop
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40002800 	.word	0x40002800

08009a38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009a40:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <HAL_RTC_WaitForSynchro+0x48>)
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	4a0e      	ldr	r2, [pc, #56]	; (8009a80 <HAL_RTC_WaitForSynchro+0x48>)
 8009a46:	f023 0320 	bic.w	r3, r3, #32
 8009a4a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009a4c:	f7f8 fe2a 	bl	80026a4 <HAL_GetTick>
 8009a50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009a52:	e009      	b.n	8009a68 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a54:	f7f8 fe26 	bl	80026a4 <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a62:	d901      	bls.n	8009a68 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e006      	b.n	8009a76 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009a68:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <HAL_RTC_WaitForSynchro+0x48>)
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	f003 0320 	and.w	r3, r3, #32
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d0ef      	beq.n	8009a54 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	40002800 	.word	0x40002800

08009a84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009a90:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <RTC_EnterInitMode+0x64>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d120      	bne.n	8009ade <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009a9c:	4b12      	ldr	r3, [pc, #72]	; (8009ae8 <RTC_EnterInitMode+0x64>)
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	4a11      	ldr	r2, [pc, #68]	; (8009ae8 <RTC_EnterInitMode+0x64>)
 8009aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009aa8:	f7f8 fdfc 	bl	80026a4 <HAL_GetTick>
 8009aac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009aae:	e00d      	b.n	8009acc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ab0:	f7f8 fdf8 	bl	80026a4 <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009abe:	d905      	bls.n	8009acc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2203      	movs	r2, #3
 8009ac8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009acc:	4b06      	ldr	r3, [pc, #24]	; (8009ae8 <RTC_EnterInitMode+0x64>)
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <RTC_EnterInitMode+0x5a>
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d1e8      	bne.n	8009ab0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	40002800 	.word	0x40002800

08009aec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009af8:	4b1a      	ldr	r3, [pc, #104]	; (8009b64 <RTC_ExitInitMode+0x78>)
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	4a19      	ldr	r2, [pc, #100]	; (8009b64 <RTC_ExitInitMode+0x78>)
 8009afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b02:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009b04:	4b17      	ldr	r3, [pc, #92]	; (8009b64 <RTC_ExitInitMode+0x78>)
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	f003 0320 	and.w	r3, r3, #32
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10c      	bne.n	8009b2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff ff91 	bl	8009a38 <HAL_RTC_WaitForSynchro>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01e      	beq.n	8009b5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2203      	movs	r2, #3
 8009b20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	73fb      	strb	r3, [r7, #15]
 8009b28:	e017      	b.n	8009b5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b2a:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <RTC_ExitInitMode+0x78>)
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	4a0d      	ldr	r2, [pc, #52]	; (8009b64 <RTC_ExitInitMode+0x78>)
 8009b30:	f023 0320 	bic.w	r3, r3, #32
 8009b34:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff ff7e 	bl	8009a38 <HAL_RTC_WaitForSynchro>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2203      	movs	r2, #3
 8009b46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009b4e:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <RTC_ExitInitMode+0x78>)
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <RTC_ExitInitMode+0x78>)
 8009b54:	f043 0320 	orr.w	r3, r3, #32
 8009b58:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	40002800 	.word	0x40002800

08009b68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009b7a:	e005      	b.n	8009b88 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009b82:	7afb      	ldrb	r3, [r7, #11]
 8009b84:	3b0a      	subs	r3, #10
 8009b86:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009b88:	7afb      	ldrb	r3, [r7, #11]
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d8f6      	bhi.n	8009b7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	7afb      	ldrb	r3, [r7, #11]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	b2db      	uxtb	r3, r3
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr
	...

08009ba8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d101      	bne.n	8009bbe <HAL_RTCEx_EnableBypassShadow+0x16>
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e01f      	b.n	8009bfe <HAL_RTCEx_EnableBypassShadow+0x56>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2202      	movs	r2, #2
 8009bca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bce:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009bd0:	22ca      	movs	r2, #202	; 0xca
 8009bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009bd6:	2253      	movs	r2, #83	; 0x53
 8009bd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	4a0a      	ldr	r2, [pc, #40]	; (8009c08 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009be0:	f043 0320 	orr.w	r3, r3, #32
 8009be4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009be6:	4b08      	ldr	r3, [pc, #32]	; (8009c08 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009be8:	22ff      	movs	r2, #255	; 0xff
 8009bea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bc80      	pop	{r7}
 8009c06:	4770      	bx	lr
 8009c08:	40002800 	.word	0x40002800

08009c0c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_RTCEx_SetSSRU_IT+0x16>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e027      	b.n	8009c72 <HAL_RTCEx_SetSSRU_IT+0x66>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c32:	4b12      	ldr	r3, [pc, #72]	; (8009c7c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c34:	22ca      	movs	r2, #202	; 0xca
 8009c36:	625a      	str	r2, [r3, #36]	; 0x24
 8009c38:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c3a:	2253      	movs	r2, #83	; 0x53
 8009c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8009c3e:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	4a0e      	ldr	r2, [pc, #56]	; (8009c7c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c48:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	; (8009c80 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c50:	4a0b      	ldr	r2, [pc, #44]	; (8009c80 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c5a:	4b08      	ldr	r3, [pc, #32]	; (8009c7c <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009c5c:	22ff      	movs	r2, #255	; 0xff
 8009c5e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	370c      	adds	r7, #12
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bc80      	pop	{r7}
 8009c7a:	4770      	bx	lr
 8009c7c:	40002800 	.word	0x40002800
 8009c80:	58000800 	.word	0x58000800

08009c84 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b082      	sub	sp, #8
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009c8c:	4b09      	ldr	r3, [pc, #36]	; (8009cb4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8009c98:	4b06      	ldr	r3, [pc, #24]	; (8009cb4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009c9a:	2240      	movs	r2, #64	; 0x40
 8009c9c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7f8 ff35 	bl	8002b0e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	40002800 	.word	0x40002800

08009cb8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bc80      	pop	{r7}
 8009cc8:	4770      	bx	lr
	...

08009ccc <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009cd8:	4b07      	ldr	r3, [pc, #28]	; (8009cf8 <HAL_RTCEx_BKUPWrite+0x2c>)
 8009cda:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	697a      	ldr	r2, [r7, #20]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	601a      	str	r2, [r3, #0]
}
 8009cec:	bf00      	nop
 8009cee:	371c      	adds	r7, #28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bc80      	pop	{r7}
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	4000b100 	.word	0x4000b100

08009cfc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009d06:	4b07      	ldr	r3, [pc, #28]	; (8009d24 <HAL_RTCEx_BKUPRead+0x28>)
 8009d08:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	4413      	add	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3714      	adds	r7, #20
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bc80      	pop	{r7}
 8009d20:	4770      	bx	lr
 8009d22:	bf00      	nop
 8009d24:	4000b100 	.word	0x4000b100

08009d28 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009d30:	4b06      	ldr	r3, [pc, #24]	; (8009d4c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d38:	4904      	ldr	r1, [pc, #16]	; (8009d4c <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	608b      	str	r3, [r1, #8]
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	58000400 	.word	0x58000400

08009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d5a:	4a04      	ldr	r2, [pc, #16]	; (8009d6c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d64:	bf00      	nop
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bc80      	pop	{r7}
 8009d6a:	4770      	bx	lr
 8009d6c:	58000400 	.word	0x58000400

08009d70 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009d74:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d7a:	4a04      	ldr	r2, [pc, #16]	; (8009d8c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009d7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009d84:	bf00      	nop
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bc80      	pop	{r7}
 8009d8a:	4770      	bx	lr
 8009d8c:	58000400 	.word	0x58000400

08009d90 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8009d90:	b480      	push	{r7}
 8009d92:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009d94:	4b03      	ldr	r3, [pc, #12]	; (8009da4 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d9a:	619a      	str	r2, [r3, #24]
}
 8009d9c:	bf00      	nop
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bc80      	pop	{r7}
 8009da2:	4770      	bx	lr
 8009da4:	58000400 	.word	0x58000400

08009da8 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8009da8:	b480      	push	{r7}
 8009daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009dac:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	f003 0302 	and.w	r3, r3, #2
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d101      	bne.n	8009dbc <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009db8:	2301      	movs	r3, #1
 8009dba:	e000      	b.n	8009dbe <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bc80      	pop	{r7}
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	58000400 	.word	0x58000400

08009dcc <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009dd0:	4b06      	ldr	r3, [pc, #24]	; (8009dec <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	f003 0304 	and.w	r3, r3, #4
 8009dd8:	2b04      	cmp	r3, #4
 8009dda:	d101      	bne.n	8009de0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e000      	b.n	8009de2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bc80      	pop	{r7}
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	58000400 	.word	0x58000400

08009df0 <LL_RCC_RF_DisableReset>:
{
 8009df0:	b480      	push	{r7}
 8009df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009e08:	bf00      	nop
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bc80      	pop	{r7}
 8009e0e:	4770      	bx	lr

08009e10 <LL_RCC_IsRFUnderReset>:
{
 8009e10:	b480      	push	{r7}
 8009e12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e24:	d101      	bne.n	8009e2a <LL_RCC_IsRFUnderReset+0x1a>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <LL_RCC_IsRFUnderReset+0x1c>
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bc80      	pop	{r7}
 8009e32:	4770      	bx	lr

08009e34 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009e3c:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <LL_EXTI_EnableIT_32_63+0x24>)
 8009e3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009e42:	4905      	ldr	r1, [pc, #20]	; (8009e58 <LL_EXTI_EnableIT_32_63+0x24>)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bc80      	pop	{r7}
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	58000800 	.word	0x58000800

08009e5c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d103      	bne.n	8009e72 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	73fb      	strb	r3, [r7, #15]
    return status;
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	e052      	b.n	8009f18 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	799b      	ldrb	r3, [r3, #6]
 8009e7a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009e7c:	7bbb      	ldrb	r3, [r7, #14]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <HAL_SUBGHZ_Init+0x2c>
 8009e82:	7bbb      	ldrb	r3, [r7, #14]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d109      	bne.n	8009e9c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7f8 fa66 	bl	8002360 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009e94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009e98:	f7ff ffcc 	bl	8009e34 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d126      	bne.n	8009ef0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009ea8:	f7ff ffa2 	bl	8009df0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009eac:	4b1c      	ldr	r3, [pc, #112]	; (8009f20 <HAL_SUBGHZ_Init+0xc4>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	1a9b      	subs	r3, r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	0cdb      	lsrs	r3, r3, #19
 8009eba:	2264      	movs	r2, #100	; 0x64
 8009ebc:	fb02 f303 	mul.w	r3, r2, r3
 8009ec0:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d105      	bne.n	8009ed4 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	609a      	str	r2, [r3, #8]
        break;
 8009ed2:	e007      	b.n	8009ee4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009eda:	f7ff ff99 	bl	8009e10 <LL_RCC_IsRFUnderReset>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1ee      	bne.n	8009ec2 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009ee4:	f7ff ff34 	bl	8009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009ee8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009eec:	f7ff ff1c 	bl	8009d28 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009ef0:	f7ff ff4e 	bl	8009d90 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fab6 	bl	800a470 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	719a      	strb	r2, [r3, #6]

  return status;
 8009f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20000000 	.word	0x20000000

08009f24 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	460b      	mov	r3, r1
 8009f32:	817b      	strh	r3, [r7, #10]
 8009f34:	4613      	mov	r3, r2
 8009f36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	799b      	ldrb	r3, [r3, #6]
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d14a      	bne.n	8009fd8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	795b      	ldrb	r3, [r3, #5]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d101      	bne.n	8009f4e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	e045      	b.n	8009fda <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2202      	movs	r2, #2
 8009f58:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 fb56 	bl	800a60c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f60:	f7ff ff06 	bl	8009d70 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009f64:	210d      	movs	r1, #13
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 faa2 	bl	800a4b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009f6c:	897b      	ldrh	r3, [r7, #10]
 8009f6e:	0a1b      	lsrs	r3, r3, #8
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	4619      	mov	r1, r3
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 fa9a 	bl	800a4b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009f7c:	897b      	ldrh	r3, [r7, #10]
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	4619      	mov	r1, r3
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 fa94 	bl	800a4b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f88:	2300      	movs	r3, #0
 8009f8a:	82bb      	strh	r3, [r7, #20]
 8009f8c:	e00a      	b.n	8009fa4 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009f8e:	8abb      	ldrh	r3, [r7, #20]
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	4413      	add	r3, r2
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	4619      	mov	r1, r3
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 fa89 	bl	800a4b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009f9e:	8abb      	ldrh	r3, [r7, #20]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	82bb      	strh	r3, [r7, #20]
 8009fa4:	8aba      	ldrh	r2, [r7, #20]
 8009fa6:	893b      	ldrh	r3, [r7, #8]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d3f0      	bcc.n	8009f8e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009fac:	f7ff fed0 	bl	8009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009fb0:	68f8      	ldr	r0, [r7, #12]
 8009fb2:	f000 fb4f 	bl	800a654 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	75fb      	strb	r3, [r7, #23]
 8009fc2:	e001      	b.n	8009fc8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	715a      	strb	r2, [r3, #5]

    return status;
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	e000      	b.n	8009fda <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009fd8:	2302      	movs	r3, #2
  }
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b088      	sub	sp, #32
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	461a      	mov	r2, r3
 8009fee:	460b      	mov	r3, r1
 8009ff0:	817b      	strh	r3, [r7, #10]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	799b      	ldrb	r3, [r3, #6]
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	2b01      	cmp	r3, #1
 800a002:	d14a      	bne.n	800a09a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	795b      	ldrb	r3, [r3, #5]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d101      	bne.n	800a010 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800a00c:	2302      	movs	r3, #2
 800a00e:	e045      	b.n	800a09c <HAL_SUBGHZ_ReadRegisters+0xba>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2201      	movs	r2, #1
 800a014:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 faf8 	bl	800a60c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a01c:	f7ff fea8 	bl	8009d70 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800a020:	211d      	movs	r1, #29
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 fa44 	bl	800a4b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a028:	897b      	ldrh	r3, [r7, #10]
 800a02a:	0a1b      	lsrs	r3, r3, #8
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	4619      	mov	r1, r3
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 fa3c 	bl	800a4b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a038:	897b      	ldrh	r3, [r7, #10]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	4619      	mov	r1, r3
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fa36 	bl	800a4b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a044:	2100      	movs	r1, #0
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	f000 fa32 	bl	800a4b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a04c:	2300      	movs	r3, #0
 800a04e:	82fb      	strh	r3, [r7, #22]
 800a050:	e009      	b.n	800a066 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a052:	69b9      	ldr	r1, [r7, #24]
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f000 fa81 	bl	800a55c <SUBGHZSPI_Receive>
      pData++;
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	3301      	adds	r3, #1
 800a05e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a060:	8afb      	ldrh	r3, [r7, #22]
 800a062:	3301      	adds	r3, #1
 800a064:	82fb      	strh	r3, [r7, #22]
 800a066:	8afa      	ldrh	r2, [r7, #22]
 800a068:	893b      	ldrh	r3, [r7, #8]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d3f1      	bcc.n	800a052 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a06e:	f7ff fe6f 	bl	8009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f000 faee 	bl	800a654 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	e001      	b.n	800a08a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2201      	movs	r2, #1
 800a08e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2200      	movs	r2, #0
 800a094:	715a      	strb	r2, [r3, #5]

    return status;
 800a096:	7ffb      	ldrb	r3, [r7, #31]
 800a098:	e000      	b.n	800a09c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a09a:	2302      	movs	r3, #2
  }
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	607a      	str	r2, [r7, #4]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	72fb      	strb	r3, [r7, #11]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	799b      	ldrb	r3, [r3, #6]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d14a      	bne.n	800a158 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	795b      	ldrb	r3, [r3, #5]
 800a0c6:	2b01      	cmp	r3, #1
 800a0c8:	d101      	bne.n	800a0ce <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	e045      	b.n	800a15a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fa99 	bl	800a60c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a0da:	7afb      	ldrb	r3, [r7, #11]
 800a0dc:	2b84      	cmp	r3, #132	; 0x84
 800a0de:	d002      	beq.n	800a0e6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a0e0:	7afb      	ldrb	r3, [r7, #11]
 800a0e2:	2b94      	cmp	r3, #148	; 0x94
 800a0e4:	d103      	bne.n	800a0ee <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	711a      	strb	r2, [r3, #4]
 800a0ec:	e002      	b.n	800a0f4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a0f4:	f7ff fe3c 	bl	8009d70 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a0f8:	7afb      	ldrb	r3, [r7, #11]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 f9d7 	bl	800a4b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a102:	2300      	movs	r3, #0
 800a104:	82bb      	strh	r3, [r7, #20]
 800a106:	e00a      	b.n	800a11e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a108:	8abb      	ldrh	r3, [r7, #20]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	4413      	add	r3, r2
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	4619      	mov	r1, r3
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f000 f9cc 	bl	800a4b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a118:	8abb      	ldrh	r3, [r7, #20]
 800a11a:	3301      	adds	r3, #1
 800a11c:	82bb      	strh	r3, [r7, #20]
 800a11e:	8aba      	ldrh	r2, [r7, #20]
 800a120:	893b      	ldrh	r3, [r7, #8]
 800a122:	429a      	cmp	r2, r3
 800a124:	d3f0      	bcc.n	800a108 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a126:	f7ff fe13 	bl	8009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a12a:	7afb      	ldrb	r3, [r7, #11]
 800a12c:	2b84      	cmp	r3, #132	; 0x84
 800a12e:	d002      	beq.n	800a136 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 fa8f 	bl	800a654 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	75fb      	strb	r3, [r7, #23]
 800a142:	e001      	b.n	800a148 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2201      	movs	r2, #1
 800a14c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	715a      	strb	r2, [r3, #5]

    return status;
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	e000      	b.n	800a15a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a158:	2302      	movs	r3, #2
  }
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b088      	sub	sp, #32
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	461a      	mov	r2, r3
 800a16e:	460b      	mov	r3, r1
 800a170:	72fb      	strb	r3, [r7, #11]
 800a172:	4613      	mov	r3, r2
 800a174:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	799b      	ldrb	r3, [r3, #6]
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b01      	cmp	r3, #1
 800a182:	d13d      	bne.n	800a200 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	795b      	ldrb	r3, [r3, #5]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d101      	bne.n	800a190 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a18c:	2302      	movs	r3, #2
 800a18e:	e038      	b.n	800a202 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2201      	movs	r2, #1
 800a194:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fa38 	bl	800a60c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a19c:	f7ff fde8 	bl	8009d70 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a1a0:	7afb      	ldrb	r3, [r7, #11]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f983 	bl	800a4b0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f97f 	bl	800a4b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	82fb      	strh	r3, [r7, #22]
 800a1b6:	e009      	b.n	800a1cc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a1b8:	69b9      	ldr	r1, [r7, #24]
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 f9ce 	bl	800a55c <SUBGHZSPI_Receive>
      pData++;
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a1c6:	8afb      	ldrh	r3, [r7, #22]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	82fb      	strh	r3, [r7, #22]
 800a1cc:	8afa      	ldrh	r2, [r7, #22]
 800a1ce:	893b      	ldrh	r3, [r7, #8]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d3f1      	bcc.n	800a1b8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a1d4:	f7ff fdbc 	bl	8009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 fa3b 	bl	800a654 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	77fb      	strb	r3, [r7, #31]
 800a1ea:	e001      	b.n	800a1f0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	715a      	strb	r2, [r3, #5]

    return status;
 800a1fc:	7ffb      	ldrb	r3, [r7, #31]
 800a1fe:	e000      	b.n	800a202 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a200:	2302      	movs	r3, #2
  }
}
 800a202:	4618      	mov	r0, r3
 800a204:	3720      	adds	r7, #32
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}

0800a20a <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a20a:	b580      	push	{r7, lr}
 800a20c:	b086      	sub	sp, #24
 800a20e:	af00      	add	r7, sp, #0
 800a210:	60f8      	str	r0, [r7, #12]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	461a      	mov	r2, r3
 800a216:	460b      	mov	r3, r1
 800a218:	72fb      	strb	r3, [r7, #11]
 800a21a:	4613      	mov	r3, r2
 800a21c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	799b      	ldrb	r3, [r3, #6]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b01      	cmp	r3, #1
 800a226:	d13e      	bne.n	800a2a6 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	795b      	ldrb	r3, [r3, #5]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d101      	bne.n	800a234 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a230:	2302      	movs	r3, #2
 800a232:	e039      	b.n	800a2a8 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2201      	movs	r2, #1
 800a238:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 f9e6 	bl	800a60c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a240:	f7ff fd96 	bl	8009d70 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a244:	210e      	movs	r1, #14
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 f932 	bl	800a4b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a24c:	7afb      	ldrb	r3, [r7, #11]
 800a24e:	4619      	mov	r1, r3
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 f92d 	bl	800a4b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a256:	2300      	movs	r3, #0
 800a258:	82bb      	strh	r3, [r7, #20]
 800a25a:	e00a      	b.n	800a272 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a25c:	8abb      	ldrh	r3, [r7, #20]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	4413      	add	r3, r2
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	4619      	mov	r1, r3
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 f922 	bl	800a4b0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a26c:	8abb      	ldrh	r3, [r7, #20]
 800a26e:	3301      	adds	r3, #1
 800a270:	82bb      	strh	r3, [r7, #20]
 800a272:	8aba      	ldrh	r2, [r7, #20]
 800a274:	893b      	ldrh	r3, [r7, #8]
 800a276:	429a      	cmp	r2, r3
 800a278:	d3f0      	bcc.n	800a25c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a27a:	f7ff fd69 	bl	8009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 f9e8 	bl	800a654 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	75fb      	strb	r3, [r7, #23]
 800a290:	e001      	b.n	800a296 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2201      	movs	r2, #1
 800a29a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	715a      	strb	r2, [r3, #5]

    return status;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	e000      	b.n	800a2a8 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a2a6:	2302      	movs	r3, #2
  }
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b088      	sub	sp, #32
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	607a      	str	r2, [r7, #4]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	460b      	mov	r3, r1
 800a2be:	72fb      	strb	r3, [r7, #11]
 800a2c0:	4613      	mov	r3, r2
 800a2c2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	799b      	ldrb	r3, [r3, #6]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d141      	bne.n	800a356 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	795b      	ldrb	r3, [r3, #5]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d101      	bne.n	800a2de <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a2da:	2302      	movs	r3, #2
 800a2dc:	e03c      	b.n	800a358 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f991 	bl	800a60c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a2ea:	f7ff fd41 	bl	8009d70 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a2ee:	211e      	movs	r1, #30
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 f8dd 	bl	800a4b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a2f6:	7afb      	ldrb	r3, [r7, #11]
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 f8d8 	bl	800a4b0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a300:	2100      	movs	r1, #0
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 f8d4 	bl	800a4b0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a308:	2300      	movs	r3, #0
 800a30a:	82fb      	strh	r3, [r7, #22]
 800a30c:	e009      	b.n	800a322 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a30e:	69b9      	ldr	r1, [r7, #24]
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 f923 	bl	800a55c <SUBGHZSPI_Receive>
      pData++;
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	3301      	adds	r3, #1
 800a31a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a31c:	8afb      	ldrh	r3, [r7, #22]
 800a31e:	3301      	adds	r3, #1
 800a320:	82fb      	strh	r3, [r7, #22]
 800a322:	8afa      	ldrh	r2, [r7, #22]
 800a324:	893b      	ldrh	r3, [r7, #8]
 800a326:	429a      	cmp	r2, r3
 800a328:	d3f1      	bcc.n	800a30e <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a32a:	f7ff fd11 	bl	8009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 f990 	bl	800a654 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	77fb      	strb	r3, [r7, #31]
 800a340:	e001      	b.n	800a346 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2201      	movs	r2, #1
 800a34a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	715a      	strb	r2, [r3, #5]

    return status;
 800a352:	7ffb      	ldrb	r3, [r7, #31]
 800a354:	e000      	b.n	800a358 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a356:	2302      	movs	r3, #2
  }
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3720      	adds	r7, #32
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a368:	2300      	movs	r3, #0
 800a36a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a36c:	f107 020c 	add.w	r2, r7, #12
 800a370:	2302      	movs	r3, #2
 800a372:	2112      	movs	r1, #18
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff fef4 	bl	800a162 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a37a:	7b3b      	ldrb	r3, [r7, #12]
 800a37c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a37e:	89fb      	ldrh	r3, [r7, #14]
 800a380:	021b      	lsls	r3, r3, #8
 800a382:	b21a      	sxth	r2, r3
 800a384:	7b7b      	ldrb	r3, [r7, #13]
 800a386:	b21b      	sxth	r3, r3
 800a388:	4313      	orrs	r3, r2
 800a38a:	b21b      	sxth	r3, r3
 800a38c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a38e:	f107 020c 	add.w	r2, r7, #12
 800a392:	2302      	movs	r3, #2
 800a394:	2102      	movs	r1, #2
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff fe84 	bl	800a0a4 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a39c:	89fb      	ldrh	r3, [r7, #14]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f014 fadc 	bl	801e964 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a3ac:	89fb      	ldrh	r3, [r7, #14]
 800a3ae:	085b      	lsrs	r3, r3, #1
 800a3b0:	f003 0301 	and.w	r3, r3, #1
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f014 fae1 	bl	801e980 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a3be:	89fb      	ldrh	r3, [r7, #14]
 800a3c0:	089b      	lsrs	r3, r3, #2
 800a3c2:	f003 0301 	and.w	r3, r3, #1
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <HAL_SUBGHZ_IRQHandler+0x70>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f014 fb30 	bl	801ea30 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	08db      	lsrs	r3, r3, #3
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <HAL_SUBGHZ_IRQHandler+0x82>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f014 fb35 	bl	801ea4c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a3e2:	89fb      	ldrh	r3, [r7, #14]
 800a3e4:	091b      	lsrs	r3, r3, #4
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <HAL_SUBGHZ_IRQHandler+0x94>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f014 fb3a 	bl	801ea68 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a3f4:	89fb      	ldrh	r3, [r7, #14]
 800a3f6:	095b      	lsrs	r3, r3, #5
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d002      	beq.n	800a406 <HAL_SUBGHZ_IRQHandler+0xa6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f014 fb07 	bl	801ea14 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a406:	89fb      	ldrh	r3, [r7, #14]
 800a408:	099b      	lsrs	r3, r3, #6
 800a40a:	f003 0301 	and.w	r3, r3, #1
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d002      	beq.n	800a418 <HAL_SUBGHZ_IRQHandler+0xb8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f014 fac2 	bl	801e99c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a418:	89fb      	ldrh	r3, [r7, #14]
 800a41a:	09db      	lsrs	r3, r3, #7
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00e      	beq.n	800a442 <HAL_SUBGHZ_IRQHandler+0xe2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a424:	89fb      	ldrh	r3, [r7, #14]
 800a426:	0a1b      	lsrs	r3, r3, #8
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d004      	beq.n	800a43a <HAL_SUBGHZ_IRQHandler+0xda>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a430:	2101      	movs	r1, #1
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f014 fac0 	bl	801e9b8 <HAL_SUBGHZ_CADStatusCallback>
 800a438:	e003      	b.n	800a442 <HAL_SUBGHZ_IRQHandler+0xe2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a43a:	2100      	movs	r1, #0
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f014 fabb 	bl	801e9b8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a442:	89fb      	ldrh	r3, [r7, #14]
 800a444:	0a5b      	lsrs	r3, r3, #9
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_SUBGHZ_IRQHandler+0xf4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f014 fad0 	bl	801e9f4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a454:	89fb      	ldrh	r3, [r7, #14]
 800a456:	0b9b      	lsrs	r3, r3, #14
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <HAL_SUBGHZ_IRQHandler+0x106>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f014 fb0f 	bl	801ea84 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a466:	bf00      	nop
 800a468:	3710      	adds	r7, #16
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
	...

0800a470 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a478:	4b0c      	ldr	r3, [pc, #48]	; (800a4ac <SUBGHZSPI_Init+0x3c>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a0b      	ldr	r2, [pc, #44]	; (800a4ac <SUBGHZSPI_Init+0x3c>)
 800a47e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a482:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a484:	4a09      	ldr	r2, [pc, #36]	; (800a4ac <SUBGHZSPI_Init+0x3c>)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a48c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a48e:	4b07      	ldr	r3, [pc, #28]	; (800a4ac <SUBGHZSPI_Init+0x3c>)
 800a490:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a494:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a496:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <SUBGHZSPI_Init+0x3c>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a04      	ldr	r2, [pc, #16]	; (800a4ac <SUBGHZSPI_Init+0x3c>)
 800a49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a0:	6013      	str	r3, [r2, #0]
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bc80      	pop	{r7}
 800a4aa:	4770      	bx	lr
 800a4ac:	58010000 	.word	0x58010000

0800a4b0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b087      	sub	sp, #28
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a4c0:	4b23      	ldr	r3, [pc, #140]	; (800a550 <SUBGHZSPI_Transmit+0xa0>)
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	1a9b      	subs	r3, r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	0cdb      	lsrs	r3, r3, #19
 800a4ce:	2264      	movs	r2, #100	; 0x64
 800a4d0:	fb02 f303 	mul.w	r3, r2, r3
 800a4d4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d105      	bne.n	800a4e8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	609a      	str	r2, [r3, #8]
      break;
 800a4e6:	e008      	b.n	800a4fa <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a4ee:	4b19      	ldr	r3, [pc, #100]	; (800a554 <SUBGHZSPI_Transmit+0xa4>)
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b02      	cmp	r3, #2
 800a4f8:	d1ed      	bne.n	800a4d6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a4fa:	4b17      	ldr	r3, [pc, #92]	; (800a558 <SUBGHZSPI_Transmit+0xa8>)
 800a4fc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	78fa      	ldrb	r2, [r7, #3]
 800a502:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a504:	4b12      	ldr	r3, [pc, #72]	; (800a550 <SUBGHZSPI_Transmit+0xa0>)
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	4613      	mov	r3, r2
 800a50a:	00db      	lsls	r3, r3, #3
 800a50c:	1a9b      	subs	r3, r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	0cdb      	lsrs	r3, r3, #19
 800a512:	2264      	movs	r2, #100	; 0x64
 800a514:	fb02 f303 	mul.w	r3, r2, r3
 800a518:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d105      	bne.n	800a52c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	609a      	str	r2, [r3, #8]
      break;
 800a52a:	e008      	b.n	800a53e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3b01      	subs	r3, #1
 800a530:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a532:	4b08      	ldr	r3, [pc, #32]	; (800a554 <SUBGHZSPI_Transmit+0xa4>)
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f003 0301 	and.w	r3, r3, #1
 800a53a:	2b01      	cmp	r3, #1
 800a53c:	d1ed      	bne.n	800a51a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <SUBGHZSPI_Transmit+0xa4>)
 800a540:	68db      	ldr	r3, [r3, #12]

  return status;
 800a542:	7dfb      	ldrb	r3, [r7, #23]
}
 800a544:	4618      	mov	r0, r3
 800a546:	371c      	adds	r7, #28
 800a548:	46bd      	mov	sp, r7
 800a54a:	bc80      	pop	{r7}
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000000 	.word	0x20000000
 800a554:	58010000 	.word	0x58010000
 800a558:	5801000c 	.word	0x5801000c

0800a55c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b087      	sub	sp, #28
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a56a:	4b25      	ldr	r3, [pc, #148]	; (800a600 <SUBGHZSPI_Receive+0xa4>)
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	4613      	mov	r3, r2
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	1a9b      	subs	r3, r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	0cdb      	lsrs	r3, r3, #19
 800a578:	2264      	movs	r2, #100	; 0x64
 800a57a:	fb02 f303 	mul.w	r3, r2, r3
 800a57e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d105      	bne.n	800a592 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	609a      	str	r2, [r3, #8]
      break;
 800a590:	e008      	b.n	800a5a4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3b01      	subs	r3, #1
 800a596:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a598:	4b1a      	ldr	r3, [pc, #104]	; (800a604 <SUBGHZSPI_Receive+0xa8>)
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f003 0302 	and.w	r3, r3, #2
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d1ed      	bne.n	800a580 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a5a4:	4b18      	ldr	r3, [pc, #96]	; (800a608 <SUBGHZSPI_Receive+0xac>)
 800a5a6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	22ff      	movs	r2, #255	; 0xff
 800a5ac:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a5ae:	4b14      	ldr	r3, [pc, #80]	; (800a600 <SUBGHZSPI_Receive+0xa4>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	0cdb      	lsrs	r3, r3, #19
 800a5bc:	2264      	movs	r2, #100	; 0x64
 800a5be:	fb02 f303 	mul.w	r3, r2, r3
 800a5c2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	609a      	str	r2, [r3, #8]
      break;
 800a5d4:	e008      	b.n	800a5e8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <SUBGHZSPI_Receive+0xa8>)
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d1ed      	bne.n	800a5c4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a5e8:	4b06      	ldr	r3, [pc, #24]	; (800a604 <SUBGHZSPI_Receive+0xa8>)
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	701a      	strb	r2, [r3, #0]

  return status;
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	371c      	adds	r7, #28
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bc80      	pop	{r7}
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	20000000 	.word	0x20000000
 800a604:	58010000 	.word	0x58010000
 800a608:	5801000c 	.word	0x5801000c

0800a60c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	791b      	ldrb	r3, [r3, #4]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d111      	bne.n	800a640 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a61c:	4b0c      	ldr	r3, [pc, #48]	; (800a650 <SUBGHZ_CheckDeviceReady+0x44>)
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	4613      	mov	r3, r2
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	4413      	add	r3, r2
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	0c1b      	lsrs	r3, r3, #16
 800a62a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a62c:	f7ff fba0 	bl	8009d70 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3b01      	subs	r3, #1
 800a634:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1f9      	bne.n	800a630 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a63c:	f7ff fb88 	bl	8009d50 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f807 	bl	800a654 <SUBGHZ_WaitOnBusy>
 800a646:	4603      	mov	r3, r0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20000000 	.word	0x20000000

0800a654 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b086      	sub	sp, #24
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a660:	4b12      	ldr	r3, [pc, #72]	; (800a6ac <SUBGHZ_WaitOnBusy+0x58>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	4613      	mov	r3, r2
 800a666:	005b      	lsls	r3, r3, #1
 800a668:	4413      	add	r3, r2
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	0d1b      	lsrs	r3, r3, #20
 800a66e:	2264      	movs	r2, #100	; 0x64
 800a670:	fb02 f303 	mul.w	r3, r2, r3
 800a674:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a676:	f7ff fba9 	bl	8009dcc <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a67a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d105      	bne.n	800a68e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2202      	movs	r2, #2
 800a68a:	609a      	str	r2, [r3, #8]
      break;
 800a68c:	e009      	b.n	800a6a2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3b01      	subs	r3, #1
 800a692:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a694:	f7ff fb88 	bl	8009da8 <LL_PWR_IsActiveFlag_RFBUSYS>
 800a698:	4602      	mov	r2, r0
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	4013      	ands	r3, r2
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d0e9      	beq.n	800a676 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	20000000 	.word	0x20000000

0800a6b0 <LL_RCC_GetUSARTClockSource>:
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800a6b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	401a      	ands	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	041b      	lsls	r3, r3, #16
 800a6c8:	4313      	orrs	r3, r2
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bc80      	pop	{r7}
 800a6d2:	4770      	bx	lr

0800a6d4 <LL_RCC_GetLPUARTClockSource>:
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a6dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4013      	ands	r3, r2
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bc80      	pop	{r7}
 800a6f0:	4770      	bx	lr

0800a6f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e042      	b.n	800a78a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7f8 fb5e 	bl	8002dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2224      	movs	r2, #36	; 0x24
 800a720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f022 0201 	bic.w	r2, r2, #1
 800a732:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 fc3b 	bl	800afb0 <UART_SetConfig>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d101      	bne.n	800a744 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e022      	b.n	800a78a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d002      	beq.n	800a752 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fea3 	bl	800b498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a760:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	689a      	ldr	r2, [r3, #8]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a770:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f042 0201 	orr.w	r2, r2, #1
 800a780:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 ff29 	bl	800b5da <UART_CheckIdleState>
 800a788:	4603      	mov	r3, r0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3708      	adds	r7, #8
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
	...

0800a794 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b08a      	sub	sp, #40	; 0x28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7a8:	2b20      	cmp	r3, #32
 800a7aa:	d137      	bne.n	800a81c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d002      	beq.n	800a7b8 <HAL_UART_Receive_IT+0x24>
 800a7b2:	88fb      	ldrh	r3, [r7, #6]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e030      	b.n	800a81e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a18      	ldr	r2, [pc, #96]	; (800a828 <HAL_UART_Receive_IT+0x94>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d01f      	beq.n	800a80c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d018      	beq.n	800a80c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	e853 3f00 	ldrex	r3, [r3]
 800a7e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7ee:	627b      	str	r3, [r7, #36]	; 0x24
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f8:	623b      	str	r3, [r7, #32]
 800a7fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fc:	69f9      	ldr	r1, [r7, #28]
 800a7fe:	6a3a      	ldr	r2, [r7, #32]
 800a800:	e841 2300 	strex	r3, r2, [r1]
 800a804:	61bb      	str	r3, [r7, #24]
   return(result);
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1e6      	bne.n	800a7da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a80c:	88fb      	ldrh	r3, [r7, #6]
 800a80e:	461a      	mov	r2, r3
 800a810:	68b9      	ldr	r1, [r7, #8]
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f000 fff8 	bl	800b808 <UART_Start_Receive_IT>
 800a818:	4603      	mov	r3, r0
 800a81a:	e000      	b.n	800a81e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a81c:	2302      	movs	r3, #2
  }
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3728      	adds	r7, #40	; 0x28
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	40008000 	.word	0x40008000

0800a82c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08a      	sub	sp, #40	; 0x28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	4613      	mov	r3, r2
 800a838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a840:	2b20      	cmp	r3, #32
 800a842:	d167      	bne.n	800a914 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <HAL_UART_Transmit_DMA+0x24>
 800a84a:	88fb      	ldrh	r3, [r7, #6]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d101      	bne.n	800a854 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	e060      	b.n	800a916 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68ba      	ldr	r2, [r7, #8]
 800a858:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	88fa      	ldrh	r2, [r7, #6]
 800a85e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2221      	movs	r2, #33	; 0x21
 800a876:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d028      	beq.n	800a8d4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a886:	4a26      	ldr	r2, [pc, #152]	; (800a920 <HAL_UART_Transmit_DMA+0xf4>)
 800a888:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a88e:	4a25      	ldr	r2, [pc, #148]	; (800a924 <HAL_UART_Transmit_DMA+0xf8>)
 800a890:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a896:	4a24      	ldr	r2, [pc, #144]	; (800a928 <HAL_UART_Transmit_DMA+0xfc>)
 800a898:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a89e:	2200      	movs	r2, #0
 800a8a0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3328      	adds	r3, #40	; 0x28
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	f7fb feb3 	bl	8006620 <HAL_DMA_Start_IT>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d009      	beq.n	800a8d4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2210      	movs	r2, #16
 800a8c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2220      	movs	r2, #32
 800a8cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e020      	b.n	800a916 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2240      	movs	r2, #64	; 0x40
 800a8da:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	e853 3f00 	ldrex	r3, [r3]
 800a8ea:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	3308      	adds	r3, #8
 800a8fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8fc:	623a      	str	r2, [r7, #32]
 800a8fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a900:	69f9      	ldr	r1, [r7, #28]
 800a902:	6a3a      	ldr	r2, [r7, #32]
 800a904:	e841 2300 	strex	r3, r2, [r1]
 800a908:	61bb      	str	r3, [r7, #24]
   return(result);
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1e5      	bne.n	800a8dc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	e000      	b.n	800a916 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a914:	2302      	movs	r3, #2
  }
}
 800a916:	4618      	mov	r0, r3
 800a918:	3728      	adds	r7, #40	; 0x28
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	0800bb93 	.word	0x0800bb93
 800a924:	0800bc2d 	.word	0x0800bc2d
 800a928:	0800bc49 	.word	0x0800bc49

0800a92c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b0ba      	sub	sp, #232	; 0xe8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a952:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a956:	f640 030f 	movw	r3, #2063	; 0x80f
 800a95a:	4013      	ands	r3, r2
 800a95c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a964:	2b00      	cmp	r3, #0
 800a966:	d11b      	bne.n	800a9a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96c:	f003 0320 	and.w	r3, r3, #32
 800a970:	2b00      	cmp	r3, #0
 800a972:	d015      	beq.n	800a9a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a978:	f003 0320 	and.w	r3, r3, #32
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d105      	bne.n	800a98c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d009      	beq.n	800a9a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 82e3 	beq.w	800af5c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	4798      	blx	r3
      }
      return;
 800a99e:	e2dd      	b.n	800af5c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a9a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 8123 	beq.w	800abf0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a9aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a9ae:	4b8d      	ldr	r3, [pc, #564]	; (800abe4 <HAL_UART_IRQHandler+0x2b8>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a9b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a9ba:	4b8b      	ldr	r3, [pc, #556]	; (800abe8 <HAL_UART_IRQHandler+0x2bc>)
 800a9bc:	4013      	ands	r3, r2
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 8116 	beq.w	800abf0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d011      	beq.n	800a9f4 <HAL_UART_IRQHandler+0xc8>
 800a9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00b      	beq.n	800a9f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ea:	f043 0201 	orr.w	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9f8:	f003 0302 	and.w	r3, r3, #2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d011      	beq.n	800aa24 <HAL_UART_IRQHandler+0xf8>
 800aa00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa04:	f003 0301 	and.w	r3, r3, #1
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00b      	beq.n	800aa24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2202      	movs	r2, #2
 800aa12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa1a:	f043 0204 	orr.w	r2, r3, #4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa28:	f003 0304 	and.w	r3, r3, #4
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d011      	beq.n	800aa54 <HAL_UART_IRQHandler+0x128>
 800aa30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa34:	f003 0301 	and.w	r3, r3, #1
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00b      	beq.n	800aa54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2204      	movs	r2, #4
 800aa42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4a:	f043 0202 	orr.w	r2, r3, #2
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa58:	f003 0308 	and.w	r3, r3, #8
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d017      	beq.n	800aa90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa64:	f003 0320 	and.w	r3, r3, #32
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d105      	bne.n	800aa78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aa6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aa70:	4b5c      	ldr	r3, [pc, #368]	; (800abe4 <HAL_UART_IRQHandler+0x2b8>)
 800aa72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00b      	beq.n	800aa90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2208      	movs	r2, #8
 800aa7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa86:	f043 0208 	orr.w	r2, r3, #8
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d012      	beq.n	800aac2 <HAL_UART_IRQHandler+0x196>
 800aa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00c      	beq.n	800aac2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aab0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab8:	f043 0220 	orr.w	r2, r3, #32
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	f000 8249 	beq.w	800af60 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aad2:	f003 0320 	and.w	r3, r3, #32
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d013      	beq.n	800ab02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aade:	f003 0320 	and.w	r3, r3, #32
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d105      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d007      	beq.n	800ab02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab16:	2b40      	cmp	r3, #64	; 0x40
 800ab18:	d005      	beq.n	800ab26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d054      	beq.n	800abd0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 ffce 	bl	800bac8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab36:	2b40      	cmp	r3, #64	; 0x40
 800ab38:	d146      	bne.n	800abc8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3308      	adds	r3, #8
 800ab40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	3308      	adds	r3, #8
 800ab62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ab66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ab72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ab76:	e841 2300 	strex	r3, r2, [r1]
 800ab7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ab7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1d9      	bne.n	800ab3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d017      	beq.n	800abc0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab96:	4a15      	ldr	r2, [pc, #84]	; (800abec <HAL_UART_IRQHandler+0x2c0>)
 800ab98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fb fe19 	bl	80067d8 <HAL_DMA_Abort_IT>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d019      	beq.n	800abe0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800abba:	4610      	mov	r0, r2
 800abbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abbe:	e00f      	b.n	800abe0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 f9e0 	bl	800af86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abc6:	e00b      	b.n	800abe0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f9dc 	bl	800af86 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abce:	e007      	b.n	800abe0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 f9d8 	bl	800af86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800abde:	e1bf      	b.n	800af60 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abe0:	bf00      	nop
    return;
 800abe2:	e1bd      	b.n	800af60 <HAL_UART_IRQHandler+0x634>
 800abe4:	10000001 	.word	0x10000001
 800abe8:	04000120 	.word	0x04000120
 800abec:	0800bcc9 	.word	0x0800bcc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	f040 8153 	bne.w	800aea0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800abfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abfe:	f003 0310 	and.w	r3, r3, #16
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f000 814c 	beq.w	800aea0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac0c:	f003 0310 	and.w	r3, r3, #16
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	f000 8145 	beq.w	800aea0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2210      	movs	r2, #16
 800ac1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac28:	2b40      	cmp	r3, #64	; 0x40
 800ac2a:	f040 80bb 	bne.w	800ada4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f000 818f 	beq.w	800af64 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac4c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac50:	429a      	cmp	r2, r3
 800ac52:	f080 8187 	bcs.w	800af64 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0320 	and.w	r3, r3, #32
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f040 8087 	bne.w	800ad82 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ac80:	e853 3f00 	ldrex	r3, [r3]
 800ac84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ac88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ac8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aca2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800acaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800acae:	e841 2300 	strex	r3, r2, [r1]
 800acb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800acb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1da      	bne.n	800ac74 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800acce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acd0:	f023 0301 	bic.w	r3, r3, #1
 800acd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3308      	adds	r3, #8
 800acde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ace2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ace6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800acea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800acee:	e841 2300 	strex	r3, r2, [r1]
 800acf2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800acf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1e1      	bne.n	800acbe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	3308      	adds	r3, #8
 800ad00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad04:	e853 3f00 	ldrex	r3, [r3]
 800ad08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	3308      	adds	r3, #8
 800ad1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad26:	e841 2300 	strex	r3, r2, [r1]
 800ad2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1e3      	bne.n	800acfa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2220      	movs	r2, #32
 800ad36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad48:	e853 3f00 	ldrex	r3, [r3]
 800ad4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad50:	f023 0310 	bic.w	r3, r3, #16
 800ad54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad62:	65bb      	str	r3, [r7, #88]	; 0x58
 800ad64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad6a:	e841 2300 	strex	r3, r2, [r1]
 800ad6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e4      	bne.n	800ad40 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7fb fccd 	bl	800671c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2202      	movs	r2, #2
 800ad86:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	1ad3      	subs	r3, r2, r3
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f8fb 	bl	800af98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ada2:	e0df      	b.n	800af64 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	1ad3      	subs	r3, r2, r3
 800adb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 80d1 	beq.w	800af68 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800adc6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 80cc 	beq.w	800af68 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ade4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	461a      	mov	r2, r3
 800adee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adf2:	647b      	str	r3, [r7, #68]	; 0x44
 800adf4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adfa:	e841 2300 	strex	r3, r2, [r1]
 800adfe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1e4      	bne.n	800add0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	623b      	str	r3, [r7, #32]
   return(result);
 800ae16:	6a3b      	ldr	r3, [r7, #32]
 800ae18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae1c:	f023 0301 	bic.w	r3, r3, #1
 800ae20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3308      	adds	r3, #8
 800ae2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae2e:	633a      	str	r2, [r7, #48]	; 0x30
 800ae30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae36:	e841 2300 	strex	r3, r2, [r1]
 800ae3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1e1      	bne.n	800ae06 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2220      	movs	r2, #32
 800ae46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	e853 3f00 	ldrex	r3, [r3]
 800ae62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f023 0310 	bic.w	r3, r3, #16
 800ae6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ae78:	61fb      	str	r3, [r7, #28]
 800ae7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	69b9      	ldr	r1, [r7, #24]
 800ae7e:	69fa      	ldr	r2, [r7, #28]
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	617b      	str	r3, [r7, #20]
   return(result);
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e4      	bne.n	800ae56 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2202      	movs	r2, #2
 800ae90:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 f87d 	bl	800af98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae9e:	e063      	b.n	800af68 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00e      	beq.n	800aeca <HAL_UART_IRQHandler+0x59e>
 800aeac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d008      	beq.n	800aeca <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aec0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f001 fc5e 	bl	800c784 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aec8:	e051      	b.n	800af6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aeca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d014      	beq.n	800af00 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d105      	bne.n	800aeee <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d008      	beq.n	800af00 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d03a      	beq.n	800af6c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
    }
    return;
 800aefe:	e035      	b.n	800af6c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d009      	beq.n	800af20 <HAL_UART_IRQHandler+0x5f4>
 800af0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 feeb 	bl	800bcf4 <UART_EndTransmit_IT>
    return;
 800af1e:	e026      	b.n	800af6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800af20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d009      	beq.n	800af40 <HAL_UART_IRQHandler+0x614>
 800af2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d003      	beq.n	800af40 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fc35 	bl	800c7a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af3e:	e016      	b.n	800af6e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800af40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d010      	beq.n	800af6e <HAL_UART_IRQHandler+0x642>
 800af4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af50:	2b00      	cmp	r3, #0
 800af52:	da0c      	bge.n	800af6e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f001 fc1e 	bl	800c796 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af5a:	e008      	b.n	800af6e <HAL_UART_IRQHandler+0x642>
      return;
 800af5c:	bf00      	nop
 800af5e:	e006      	b.n	800af6e <HAL_UART_IRQHandler+0x642>
    return;
 800af60:	bf00      	nop
 800af62:	e004      	b.n	800af6e <HAL_UART_IRQHandler+0x642>
      return;
 800af64:	bf00      	nop
 800af66:	e002      	b.n	800af6e <HAL_UART_IRQHandler+0x642>
      return;
 800af68:	bf00      	nop
 800af6a:	e000      	b.n	800af6e <HAL_UART_IRQHandler+0x642>
    return;
 800af6c:	bf00      	nop
  }
}
 800af6e:	37e8      	adds	r7, #232	; 0xe8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr

0800af86 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af86:	b480      	push	{r7}
 800af88:	b083      	sub	sp, #12
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	bc80      	pop	{r7}
 800af96:	4770      	bx	lr

0800af98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bc80      	pop	{r7}
 800afac:	4770      	bx	lr
	...

0800afb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afb4:	b08c      	sub	sp, #48	; 0x30
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	689a      	ldr	r2, [r3, #8]
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	431a      	orrs	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	431a      	orrs	r2, r3
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	69db      	ldr	r3, [r3, #28]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	4b94      	ldr	r3, [pc, #592]	; (800b230 <UART_SetConfig+0x280>)
 800afe0:	4013      	ands	r3, r2
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	6812      	ldr	r2, [r2, #0]
 800afe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afe8:	430b      	orrs	r3, r1
 800afea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	68da      	ldr	r2, [r3, #12]
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	430a      	orrs	r2, r1
 800b000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a89      	ldr	r2, [pc, #548]	; (800b234 <UART_SetConfig+0x284>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d004      	beq.n	800b01c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b018:	4313      	orrs	r3, r2
 800b01a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b026:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b02a:	697a      	ldr	r2, [r7, #20]
 800b02c:	6812      	ldr	r2, [r2, #0]
 800b02e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b030:	430b      	orrs	r3, r1
 800b032:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03a:	f023 010f 	bic.w	r1, r3, #15
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	430a      	orrs	r2, r1
 800b048:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	4a7a      	ldr	r2, [pc, #488]	; (800b238 <UART_SetConfig+0x288>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d127      	bne.n	800b0a4 <UART_SetConfig+0xf4>
 800b054:	2003      	movs	r0, #3
 800b056:	f7ff fb2b 	bl	800a6b0 <LL_RCC_GetUSARTClockSource>
 800b05a:	4603      	mov	r3, r0
 800b05c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b060:	2b03      	cmp	r3, #3
 800b062:	d81b      	bhi.n	800b09c <UART_SetConfig+0xec>
 800b064:	a201      	add	r2, pc, #4	; (adr r2, 800b06c <UART_SetConfig+0xbc>)
 800b066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06a:	bf00      	nop
 800b06c:	0800b07d 	.word	0x0800b07d
 800b070:	0800b08d 	.word	0x0800b08d
 800b074:	0800b085 	.word	0x0800b085
 800b078:	0800b095 	.word	0x0800b095
 800b07c:	2301      	movs	r3, #1
 800b07e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b082:	e080      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b084:	2302      	movs	r3, #2
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b08a:	e07c      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b08c:	2304      	movs	r3, #4
 800b08e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b092:	e078      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b094:	2308      	movs	r3, #8
 800b096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b09a:	e074      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b09c:	2310      	movs	r3, #16
 800b09e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0a2:	e070      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a64      	ldr	r2, [pc, #400]	; (800b23c <UART_SetConfig+0x28c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d138      	bne.n	800b120 <UART_SetConfig+0x170>
 800b0ae:	200c      	movs	r0, #12
 800b0b0:	f7ff fafe 	bl	800a6b0 <LL_RCC_GetUSARTClockSource>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b0ba:	2b0c      	cmp	r3, #12
 800b0bc:	d82c      	bhi.n	800b118 <UART_SetConfig+0x168>
 800b0be:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <UART_SetConfig+0x114>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b0f9 	.word	0x0800b0f9
 800b0c8:	0800b119 	.word	0x0800b119
 800b0cc:	0800b119 	.word	0x0800b119
 800b0d0:	0800b119 	.word	0x0800b119
 800b0d4:	0800b109 	.word	0x0800b109
 800b0d8:	0800b119 	.word	0x0800b119
 800b0dc:	0800b119 	.word	0x0800b119
 800b0e0:	0800b119 	.word	0x0800b119
 800b0e4:	0800b101 	.word	0x0800b101
 800b0e8:	0800b119 	.word	0x0800b119
 800b0ec:	0800b119 	.word	0x0800b119
 800b0f0:	0800b119 	.word	0x0800b119
 800b0f4:	0800b111 	.word	0x0800b111
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b0fe:	e042      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b100:	2302      	movs	r3, #2
 800b102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b106:	e03e      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b108:	2304      	movs	r3, #4
 800b10a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b10e:	e03a      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b110:	2308      	movs	r3, #8
 800b112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b116:	e036      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b118:	2310      	movs	r3, #16
 800b11a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b11e:	e032      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a43      	ldr	r2, [pc, #268]	; (800b234 <UART_SetConfig+0x284>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d12a      	bne.n	800b180 <UART_SetConfig+0x1d0>
 800b12a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b12e:	f7ff fad1 	bl	800a6d4 <LL_RCC_GetLPUARTClockSource>
 800b132:	4603      	mov	r3, r0
 800b134:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b138:	d01a      	beq.n	800b170 <UART_SetConfig+0x1c0>
 800b13a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b13e:	d81b      	bhi.n	800b178 <UART_SetConfig+0x1c8>
 800b140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b144:	d00c      	beq.n	800b160 <UART_SetConfig+0x1b0>
 800b146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b14a:	d815      	bhi.n	800b178 <UART_SetConfig+0x1c8>
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <UART_SetConfig+0x1a8>
 800b150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b154:	d008      	beq.n	800b168 <UART_SetConfig+0x1b8>
 800b156:	e00f      	b.n	800b178 <UART_SetConfig+0x1c8>
 800b158:	2300      	movs	r3, #0
 800b15a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b15e:	e012      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b160:	2302      	movs	r3, #2
 800b162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b166:	e00e      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b168:	2304      	movs	r3, #4
 800b16a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b16e:	e00a      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b170:	2308      	movs	r3, #8
 800b172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b176:	e006      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b178:	2310      	movs	r3, #16
 800b17a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b17e:	e002      	b.n	800b186 <UART_SetConfig+0x1d6>
 800b180:	2310      	movs	r3, #16
 800b182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a2a      	ldr	r2, [pc, #168]	; (800b234 <UART_SetConfig+0x284>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	f040 80a4 	bne.w	800b2da <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b196:	2b08      	cmp	r3, #8
 800b198:	d823      	bhi.n	800b1e2 <UART_SetConfig+0x232>
 800b19a:	a201      	add	r2, pc, #4	; (adr r2, 800b1a0 <UART_SetConfig+0x1f0>)
 800b19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a0:	0800b1c5 	.word	0x0800b1c5
 800b1a4:	0800b1e3 	.word	0x0800b1e3
 800b1a8:	0800b1cd 	.word	0x0800b1cd
 800b1ac:	0800b1e3 	.word	0x0800b1e3
 800b1b0:	0800b1d3 	.word	0x0800b1d3
 800b1b4:	0800b1e3 	.word	0x0800b1e3
 800b1b8:	0800b1e3 	.word	0x0800b1e3
 800b1bc:	0800b1e3 	.word	0x0800b1e3
 800b1c0:	0800b1db 	.word	0x0800b1db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1c4:	f7fd ff40 	bl	8009048 <HAL_RCC_GetPCLK1Freq>
 800b1c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b1ca:	e010      	b.n	800b1ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b1cc:	4b1c      	ldr	r3, [pc, #112]	; (800b240 <UART_SetConfig+0x290>)
 800b1ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b1d0:	e00d      	b.n	800b1ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1d2:	f7fd fe85 	bl	8008ee0 <HAL_RCC_GetSysClockFreq>
 800b1d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b1d8:	e009      	b.n	800b1ee <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b1da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b1e0:	e005      	b.n	800b1ee <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b1ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 8137 	beq.w	800b464 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	4a12      	ldr	r2, [pc, #72]	; (800b244 <UART_SetConfig+0x294>)
 800b1fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b200:	461a      	mov	r2, r3
 800b202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b204:	fbb3 f3f2 	udiv	r3, r3, r2
 800b208:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	4613      	mov	r3, r2
 800b210:	005b      	lsls	r3, r3, #1
 800b212:	4413      	add	r3, r2
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	429a      	cmp	r2, r3
 800b218:	d305      	bcc.n	800b226 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	429a      	cmp	r2, r3
 800b224:	d910      	bls.n	800b248 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b22c:	e11a      	b.n	800b464 <UART_SetConfig+0x4b4>
 800b22e:	bf00      	nop
 800b230:	cfff69f3 	.word	0xcfff69f3
 800b234:	40008000 	.word	0x40008000
 800b238:	40013800 	.word	0x40013800
 800b23c:	40004400 	.word	0x40004400
 800b240:	00f42400 	.word	0x00f42400
 800b244:	08021b3c 	.word	0x08021b3c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	2200      	movs	r2, #0
 800b24c:	60bb      	str	r3, [r7, #8]
 800b24e:	60fa      	str	r2, [r7, #12]
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b254:	4a8e      	ldr	r2, [pc, #568]	; (800b490 <UART_SetConfig+0x4e0>)
 800b256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	2200      	movs	r2, #0
 800b25e:	603b      	str	r3, [r7, #0]
 800b260:	607a      	str	r2, [r7, #4]
 800b262:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b26a:	f7f5 ff8b 	bl	8001184 <__aeabi_uldivmod>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	4610      	mov	r0, r2
 800b274:	4619      	mov	r1, r3
 800b276:	f04f 0200 	mov.w	r2, #0
 800b27a:	f04f 0300 	mov.w	r3, #0
 800b27e:	020b      	lsls	r3, r1, #8
 800b280:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b284:	0202      	lsls	r2, r0, #8
 800b286:	6979      	ldr	r1, [r7, #20]
 800b288:	6849      	ldr	r1, [r1, #4]
 800b28a:	0849      	lsrs	r1, r1, #1
 800b28c:	2000      	movs	r0, #0
 800b28e:	460c      	mov	r4, r1
 800b290:	4605      	mov	r5, r0
 800b292:	eb12 0804 	adds.w	r8, r2, r4
 800b296:	eb43 0905 	adc.w	r9, r3, r5
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	469a      	mov	sl, r3
 800b2a2:	4693      	mov	fp, r2
 800b2a4:	4652      	mov	r2, sl
 800b2a6:	465b      	mov	r3, fp
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	f7f5 ff6a 	bl	8001184 <__aeabi_uldivmod>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2b8:	6a3b      	ldr	r3, [r7, #32]
 800b2ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b2be:	d308      	bcc.n	800b2d2 <UART_SetConfig+0x322>
 800b2c0:	6a3b      	ldr	r3, [r7, #32]
 800b2c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2c6:	d204      	bcs.n	800b2d2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	6a3a      	ldr	r2, [r7, #32]
 800b2ce:	60da      	str	r2, [r3, #12]
 800b2d0:	e0c8      	b.n	800b464 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b2d8:	e0c4      	b.n	800b464 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b2e2:	d167      	bne.n	800b3b4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b2e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2e8:	2b08      	cmp	r3, #8
 800b2ea:	d828      	bhi.n	800b33e <UART_SetConfig+0x38e>
 800b2ec:	a201      	add	r2, pc, #4	; (adr r2, 800b2f4 <UART_SetConfig+0x344>)
 800b2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f2:	bf00      	nop
 800b2f4:	0800b319 	.word	0x0800b319
 800b2f8:	0800b321 	.word	0x0800b321
 800b2fc:	0800b329 	.word	0x0800b329
 800b300:	0800b33f 	.word	0x0800b33f
 800b304:	0800b32f 	.word	0x0800b32f
 800b308:	0800b33f 	.word	0x0800b33f
 800b30c:	0800b33f 	.word	0x0800b33f
 800b310:	0800b33f 	.word	0x0800b33f
 800b314:	0800b337 	.word	0x0800b337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b318:	f7fd fe96 	bl	8009048 <HAL_RCC_GetPCLK1Freq>
 800b31c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b31e:	e014      	b.n	800b34a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b320:	f7fd fea4 	bl	800906c <HAL_RCC_GetPCLK2Freq>
 800b324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b326:	e010      	b.n	800b34a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b328:	4b5a      	ldr	r3, [pc, #360]	; (800b494 <UART_SetConfig+0x4e4>)
 800b32a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b32c:	e00d      	b.n	800b34a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b32e:	f7fd fdd7 	bl	8008ee0 <HAL_RCC_GetSysClockFreq>
 800b332:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b334:	e009      	b.n	800b34a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b33a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b33c:	e005      	b.n	800b34a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b33e:	2300      	movs	r3, #0
 800b340:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b348:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 8089 	beq.w	800b464 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b356:	4a4e      	ldr	r2, [pc, #312]	; (800b490 <UART_SetConfig+0x4e0>)
 800b358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b35c:	461a      	mov	r2, r3
 800b35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b360:	fbb3 f3f2 	udiv	r3, r3, r2
 800b364:	005a      	lsls	r2, r3, #1
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	085b      	lsrs	r3, r3, #1
 800b36c:	441a      	add	r2, r3
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	fbb2 f3f3 	udiv	r3, r2, r3
 800b376:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	2b0f      	cmp	r3, #15
 800b37c:	d916      	bls.n	800b3ac <UART_SetConfig+0x3fc>
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b384:	d212      	bcs.n	800b3ac <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f023 030f 	bic.w	r3, r3, #15
 800b38e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	b29b      	uxth	r3, r3
 800b396:	f003 0307 	and.w	r3, r3, #7
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	8bfb      	ldrh	r3, [r7, #30]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	8bfa      	ldrh	r2, [r7, #30]
 800b3a8:	60da      	str	r2, [r3, #12]
 800b3aa:	e05b      	b.n	800b464 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b3b2:	e057      	b.n	800b464 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d828      	bhi.n	800b40e <UART_SetConfig+0x45e>
 800b3bc:	a201      	add	r2, pc, #4	; (adr r2, 800b3c4 <UART_SetConfig+0x414>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b3e9 	.word	0x0800b3e9
 800b3c8:	0800b3f1 	.word	0x0800b3f1
 800b3cc:	0800b3f9 	.word	0x0800b3f9
 800b3d0:	0800b40f 	.word	0x0800b40f
 800b3d4:	0800b3ff 	.word	0x0800b3ff
 800b3d8:	0800b40f 	.word	0x0800b40f
 800b3dc:	0800b40f 	.word	0x0800b40f
 800b3e0:	0800b40f 	.word	0x0800b40f
 800b3e4:	0800b407 	.word	0x0800b407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3e8:	f7fd fe2e 	bl	8009048 <HAL_RCC_GetPCLK1Freq>
 800b3ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3ee:	e014      	b.n	800b41a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3f0:	f7fd fe3c 	bl	800906c <HAL_RCC_GetPCLK2Freq>
 800b3f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b3f6:	e010      	b.n	800b41a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3f8:	4b26      	ldr	r3, [pc, #152]	; (800b494 <UART_SetConfig+0x4e4>)
 800b3fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b3fc:	e00d      	b.n	800b41a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3fe:	f7fd fd6f 	bl	8008ee0 <HAL_RCC_GetSysClockFreq>
 800b402:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b404:	e009      	b.n	800b41a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b40a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b40c:	e005      	b.n	800b41a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b40e:	2300      	movs	r3, #0
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b412:	2301      	movs	r3, #1
 800b414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b418:	bf00      	nop
    }

    if (pclk != 0U)
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d021      	beq.n	800b464 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	4a1a      	ldr	r2, [pc, #104]	; (800b490 <UART_SetConfig+0x4e0>)
 800b426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b42a:	461a      	mov	r2, r3
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	085b      	lsrs	r3, r3, #1
 800b438:	441a      	add	r2, r3
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b442:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	2b0f      	cmp	r3, #15
 800b448:	d909      	bls.n	800b45e <UART_SetConfig+0x4ae>
 800b44a:	6a3b      	ldr	r3, [r7, #32]
 800b44c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b450:	d205      	bcs.n	800b45e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b452:	6a3b      	ldr	r3, [r7, #32]
 800b454:	b29a      	uxth	r2, r3
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60da      	str	r2, [r3, #12]
 800b45c:	e002      	b.n	800b464 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2201      	movs	r2, #1
 800b468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2201      	movs	r2, #1
 800b470:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	2200      	movs	r2, #0
 800b478:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2200      	movs	r2, #0
 800b47e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b480:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b484:	4618      	mov	r0, r3
 800b486:	3730      	adds	r7, #48	; 0x30
 800b488:	46bd      	mov	sp, r7
 800b48a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b48e:	bf00      	nop
 800b490:	08021b3c 	.word	0x08021b3c
 800b494:	00f42400 	.word	0x00f42400

0800b498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a4:	f003 0301 	and.w	r3, r3, #1
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00a      	beq.n	800b4c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	430a      	orrs	r2, r1
 800b4c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c6:	f003 0302 	and.w	r3, r3, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e8:	f003 0304 	and.w	r3, r3, #4
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00a      	beq.n	800b506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	430a      	orrs	r2, r1
 800b504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50a:	f003 0308 	and.w	r3, r3, #8
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00a      	beq.n	800b528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	430a      	orrs	r2, r1
 800b526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b52c:	f003 0310 	and.w	r3, r3, #16
 800b530:	2b00      	cmp	r3, #0
 800b532:	d00a      	beq.n	800b54a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	430a      	orrs	r2, r1
 800b548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54e:	f003 0320 	and.w	r3, r3, #32
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00a      	beq.n	800b56c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	689b      	ldr	r3, [r3, #8]
 800b55c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	430a      	orrs	r2, r1
 800b56a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b574:	2b00      	cmp	r3, #0
 800b576:	d01a      	beq.n	800b5ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	430a      	orrs	r2, r1
 800b58c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b596:	d10a      	bne.n	800b5ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	430a      	orrs	r2, r1
 800b5ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d00a      	beq.n	800b5d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	430a      	orrs	r2, r1
 800b5ce:	605a      	str	r2, [r3, #4]
  }
}
 800b5d0:	bf00      	nop
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bc80      	pop	{r7}
 800b5d8:	4770      	bx	lr

0800b5da <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b086      	sub	sp, #24
 800b5de:	af02      	add	r7, sp, #8
 800b5e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5ea:	f7f7 f85b 	bl	80026a4 <HAL_GetTick>
 800b5ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f003 0308 	and.w	r3, r3, #8
 800b5fa:	2b08      	cmp	r3, #8
 800b5fc:	d10e      	bne.n	800b61c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f832 	bl	800b676 <UART_WaitOnFlagUntilTimeout>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b618:	2303      	movs	r3, #3
 800b61a:	e028      	b.n	800b66e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 0304 	and.w	r3, r3, #4
 800b626:	2b04      	cmp	r3, #4
 800b628:	d10e      	bne.n	800b648 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b62a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f81c 	bl	800b676 <UART_WaitOnFlagUntilTimeout>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e012      	b.n	800b66e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2220      	movs	r2, #32
 800b64c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2220      	movs	r2, #32
 800b654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b09c      	sub	sp, #112	; 0x70
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	60f8      	str	r0, [r7, #12]
 800b67e:	60b9      	str	r1, [r7, #8]
 800b680:	603b      	str	r3, [r7, #0]
 800b682:	4613      	mov	r3, r2
 800b684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b686:	e0a9      	b.n	800b7dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b68e:	f000 80a5 	beq.w	800b7dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b692:	f7f7 f807 	bl	80026a4 <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d302      	bcc.n	800b6a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800b6a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d140      	bne.n	800b72a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b0:	e853 3f00 	ldrex	r3, [r3]
 800b6b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b6bc:	667b      	str	r3, [r7, #100]	; 0x64
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b6cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6ce:	e841 2300 	strex	r3, r2, [r1]
 800b6d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1e6      	bne.n	800b6a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	3308      	adds	r3, #8
 800b6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e4:	e853 3f00 	ldrex	r3, [r3]
 800b6e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ec:	f023 0301 	bic.w	r3, r3, #1
 800b6f0:	663b      	str	r3, [r7, #96]	; 0x60
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	3308      	adds	r3, #8
 800b6f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b6fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800b6fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b702:	e841 2300 	strex	r3, r2, [r1]
 800b706:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1e5      	bne.n	800b6da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2220      	movs	r2, #32
 800b712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2220      	movs	r2, #32
 800b71a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800b726:	2303      	movs	r3, #3
 800b728:	e069      	b.n	800b7fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0304 	and.w	r3, r3, #4
 800b734:	2b00      	cmp	r3, #0
 800b736:	d051      	beq.n	800b7dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b746:	d149      	bne.n	800b7dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b750:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b766:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	461a      	mov	r2, r3
 800b76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b770:	637b      	str	r3, [r7, #52]	; 0x34
 800b772:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e6      	bne.n	800b752 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3308      	adds	r3, #8
 800b78a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	613b      	str	r3, [r7, #16]
   return(result);
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	f023 0301 	bic.w	r3, r3, #1
 800b79a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b7a4:	623a      	str	r2, [r7, #32]
 800b7a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a8:	69f9      	ldr	r1, [r7, #28]
 800b7aa:	6a3a      	ldr	r2, [r7, #32]
 800b7ac:	e841 2300 	strex	r3, r2, [r1]
 800b7b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1e5      	bne.n	800b784 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2220      	movs	r2, #32
 800b7c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2220      	movs	r2, #32
 800b7cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	e010      	b.n	800b7fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	69da      	ldr	r2, [r3, #28]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	bf0c      	ite	eq
 800b7ec:	2301      	moveq	r3, #1
 800b7ee:	2300      	movne	r3, #0
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	79fb      	ldrb	r3, [r7, #7]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	f43f af46 	beq.w	800b688 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3770      	adds	r7, #112	; 0x70
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
	...

0800b808 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b808:	b480      	push	{r7}
 800b80a:	b0a3      	sub	sp, #140	; 0x8c
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	4613      	mov	r3, r2
 800b814:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	88fa      	ldrh	r2, [r7, #6]
 800b820:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	88fa      	ldrh	r2, [r7, #6]
 800b828:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b83a:	d10e      	bne.n	800b85a <UART_Start_Receive_IT+0x52>
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d105      	bne.n	800b850 <UART_Start_Receive_IT+0x48>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b84a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b84e:	e02d      	b.n	800b8ac <UART_Start_Receive_IT+0xa4>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	22ff      	movs	r2, #255	; 0xff
 800b854:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b858:	e028      	b.n	800b8ac <UART_Start_Receive_IT+0xa4>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	689b      	ldr	r3, [r3, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10d      	bne.n	800b87e <UART_Start_Receive_IT+0x76>
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d104      	bne.n	800b874 <UART_Start_Receive_IT+0x6c>
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	22ff      	movs	r2, #255	; 0xff
 800b86e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b872:	e01b      	b.n	800b8ac <UART_Start_Receive_IT+0xa4>
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	227f      	movs	r2, #127	; 0x7f
 800b878:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b87c:	e016      	b.n	800b8ac <UART_Start_Receive_IT+0xa4>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	689b      	ldr	r3, [r3, #8]
 800b882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b886:	d10d      	bne.n	800b8a4 <UART_Start_Receive_IT+0x9c>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d104      	bne.n	800b89a <UART_Start_Receive_IT+0x92>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	227f      	movs	r2, #127	; 0x7f
 800b894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b898:	e008      	b.n	800b8ac <UART_Start_Receive_IT+0xa4>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	223f      	movs	r2, #63	; 0x3f
 800b89e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8a2:	e003      	b.n	800b8ac <UART_Start_Receive_IT+0xa4>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2222      	movs	r2, #34	; 0x22
 800b8b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8c6:	e853 3f00 	ldrex	r3, [r3]
 800b8ca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b8cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	3308      	adds	r3, #8
 800b8dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b8e0:	673a      	str	r2, [r7, #112]	; 0x70
 800b8e2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b8e6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b8ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e3      	bne.n	800b8bc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8fc:	d14f      	bne.n	800b99e <UART_Start_Receive_IT+0x196>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b904:	88fa      	ldrh	r2, [r7, #6]
 800b906:	429a      	cmp	r2, r3
 800b908:	d349      	bcc.n	800b99e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b912:	d107      	bne.n	800b924 <UART_Start_Receive_IT+0x11c>
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	691b      	ldr	r3, [r3, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d103      	bne.n	800b924 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4a46      	ldr	r2, [pc, #280]	; (800ba38 <UART_Start_Receive_IT+0x230>)
 800b920:	675a      	str	r2, [r3, #116]	; 0x74
 800b922:	e002      	b.n	800b92a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	4a45      	ldr	r2, [pc, #276]	; (800ba3c <UART_Start_Receive_IT+0x234>)
 800b928:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01a      	beq.n	800b968 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b93a:	e853 3f00 	ldrex	r3, [r3]
 800b93e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b954:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b956:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b95a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b95c:	e841 2300 	strex	r3, r2, [r1]
 800b960:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1e4      	bne.n	800b932 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3308      	adds	r3, #8
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b972:	e853 3f00 	ldrex	r3, [r3]
 800b976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b97e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3308      	adds	r3, #8
 800b986:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b988:	64ba      	str	r2, [r7, #72]	; 0x48
 800b98a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b98e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b990:	e841 2300 	strex	r3, r2, [r1]
 800b994:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d1e5      	bne.n	800b968 <UART_Start_Receive_IT+0x160>
 800b99c:	e046      	b.n	800ba2c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9a6:	d107      	bne.n	800b9b8 <UART_Start_Receive_IT+0x1b0>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	691b      	ldr	r3, [r3, #16]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4a23      	ldr	r2, [pc, #140]	; (800ba40 <UART_Start_Receive_IT+0x238>)
 800b9b4:	675a      	str	r2, [r3, #116]	; 0x74
 800b9b6:	e002      	b.n	800b9be <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4a22      	ldr	r2, [pc, #136]	; (800ba44 <UART_Start_Receive_IT+0x23c>)
 800b9bc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	691b      	ldr	r3, [r3, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d019      	beq.n	800b9fa <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ce:	e853 3f00 	ldrex	r3, [r3]
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b9da:	677b      	str	r3, [r7, #116]	; 0x74
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e6      	bne.n	800b9c6 <UART_Start_Receive_IT+0x1be>
 800b9f8:	e018      	b.n	800ba2c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	e853 3f00 	ldrex	r3, [r3]
 800ba06:	613b      	str	r3, [r7, #16]
   return(result);
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f043 0320 	orr.w	r3, r3, #32
 800ba0e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	461a      	mov	r2, r3
 800ba16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba18:	623b      	str	r3, [r7, #32]
 800ba1a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1c:	69f9      	ldr	r1, [r7, #28]
 800ba1e:	6a3a      	ldr	r2, [r7, #32]
 800ba20:	e841 2300 	strex	r3, r2, [r1]
 800ba24:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1e6      	bne.n	800b9fa <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	378c      	adds	r7, #140	; 0x8c
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bc80      	pop	{r7}
 800ba36:	4770      	bx	lr
 800ba38:	0800c41d 	.word	0x0800c41d
 800ba3c:	0800c0bd 	.word	0x0800c0bd
 800ba40:	0800bf05 	.word	0x0800bf05
 800ba44:	0800bd4d 	.word	0x0800bd4d

0800ba48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b08f      	sub	sp, #60	; 0x3c
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	e853 3f00 	ldrex	r3, [r3]
 800ba5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ba64:	637b      	str	r3, [r7, #52]	; 0x34
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba70:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e6      	bne.n	800ba50 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3308      	adds	r3, #8
 800ba88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	e853 3f00 	ldrex	r3, [r3]
 800ba90:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ba98:	633b      	str	r3, [r7, #48]	; 0x30
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	3308      	adds	r3, #8
 800baa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baa2:	61ba      	str	r2, [r7, #24]
 800baa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa6:	6979      	ldr	r1, [r7, #20]
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	e841 2300 	strex	r3, r2, [r1]
 800baae:	613b      	str	r3, [r7, #16]
   return(result);
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1e5      	bne.n	800ba82 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2220      	movs	r2, #32
 800baba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800babe:	bf00      	nop
 800bac0:	373c      	adds	r7, #60	; 0x3c
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bc80      	pop	{r7}
 800bac6:	4770      	bx	lr

0800bac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bac8:	b480      	push	{r7}
 800baca:	b095      	sub	sp, #84	; 0x54
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad8:	e853 3f00 	ldrex	r3, [r3]
 800badc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	461a      	mov	r2, r3
 800baec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baee:	643b      	str	r3, [r7, #64]	; 0x40
 800baf0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800baf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800baf6:	e841 2300 	strex	r3, r2, [r1]
 800bafa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bafc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1e6      	bne.n	800bad0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	3308      	adds	r3, #8
 800bb08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0a:	6a3b      	ldr	r3, [r7, #32]
 800bb0c:	e853 3f00 	ldrex	r3, [r3]
 800bb10:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb18:	f023 0301 	bic.w	r3, r3, #1
 800bb1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	3308      	adds	r3, #8
 800bb24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb26:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb2e:	e841 2300 	strex	r3, r2, [r1]
 800bb32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1e3      	bne.n	800bb02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d118      	bne.n	800bb74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f023 0310 	bic.w	r3, r3, #16
 800bb56:	647b      	str	r3, [r7, #68]	; 0x44
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb60:	61bb      	str	r3, [r7, #24]
 800bb62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb64:	6979      	ldr	r1, [r7, #20]
 800bb66:	69ba      	ldr	r2, [r7, #24]
 800bb68:	e841 2300 	strex	r3, r2, [r1]
 800bb6c:	613b      	str	r3, [r7, #16]
   return(result);
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1e6      	bne.n	800bb42 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2220      	movs	r2, #32
 800bb78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bb88:	bf00      	nop
 800bb8a:	3754      	adds	r7, #84	; 0x54
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bc80      	pop	{r7}
 800bb90:	4770      	bx	lr

0800bb92 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b090      	sub	sp, #64	; 0x40
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 0320 	and.w	r3, r3, #32
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d137      	bne.n	800bc1e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bbae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc0:	e853 3f00 	ldrex	r3, [r3]
 800bbc4:	623b      	str	r3, [r7, #32]
   return(result);
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	3308      	adds	r3, #8
 800bbd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbd6:	633a      	str	r2, [r7, #48]	; 0x30
 800bbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e5      	bne.n	800bbb6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	e853 3f00 	ldrex	r3, [r3]
 800bbf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbfe:	637b      	str	r3, [r7, #52]	; 0x34
 800bc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	461a      	mov	r2, r3
 800bc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc08:	61fb      	str	r3, [r7, #28]
 800bc0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc0c:	69b9      	ldr	r1, [r7, #24]
 800bc0e:	69fa      	ldr	r2, [r7, #28]
 800bc10:	e841 2300 	strex	r3, r2, [r1]
 800bc14:	617b      	str	r3, [r7, #20]
   return(result);
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d1e6      	bne.n	800bbea <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bc1c:	e002      	b.n	800bc24 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bc1e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bc20:	f7f7 fa2e 	bl	8003080 <HAL_UART_TxCpltCallback>
}
 800bc24:	bf00      	nop
 800bc26:	3740      	adds	r7, #64	; 0x40
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc38:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f7ff f99a 	bl	800af74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc40:	bf00      	nop
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b086      	sub	sp, #24
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc64:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc70:	2b80      	cmp	r3, #128	; 0x80
 800bc72:	d109      	bne.n	800bc88 <UART_DMAError+0x40>
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	2b21      	cmp	r3, #33	; 0x21
 800bc78:	d106      	bne.n	800bc88 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bc82:	6978      	ldr	r0, [r7, #20]
 800bc84:	f7ff fee0 	bl	800ba48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc92:	2b40      	cmp	r3, #64	; 0x40
 800bc94:	d109      	bne.n	800bcaa <UART_DMAError+0x62>
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b22      	cmp	r3, #34	; 0x22
 800bc9a:	d106      	bne.n	800bcaa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bca4:	6978      	ldr	r0, [r7, #20]
 800bca6:	f7ff ff0f 	bl	800bac8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcb0:	f043 0210 	orr.w	r2, r3, #16
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcba:	6978      	ldr	r0, [r7, #20]
 800bcbc:	f7ff f963 	bl	800af86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcc0:	bf00      	nop
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f7ff f94d 	bl	800af86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b088      	sub	sp, #32
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	e853 3f00 	ldrex	r3, [r3]
 800bd08:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	61bb      	str	r3, [r7, #24]
 800bd1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd1e:	6979      	ldr	r1, [r7, #20]
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	e841 2300 	strex	r3, r2, [r1]
 800bd26:	613b      	str	r3, [r7, #16]
   return(result);
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d1e6      	bne.n	800bcfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2220      	movs	r2, #32
 800bd32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7f7 f99f 	bl	8003080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd42:	bf00      	nop
 800bd44:	3720      	adds	r7, #32
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b09c      	sub	sp, #112	; 0x70
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd64:	2b22      	cmp	r3, #34	; 0x22
 800bd66:	f040 80be 	bne.w	800bee6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bd74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800bd78:	b2d9      	uxtb	r1, r3
 800bd7a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bd7e:	b2da      	uxtb	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd84:	400a      	ands	r2, r1
 800bd86:	b2d2      	uxtb	r2, r2
 800bd88:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8e:	1c5a      	adds	r2, r3, #1
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	3b01      	subs	r3, #1
 800bd9e:	b29a      	uxth	r2, r3
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	f040 80a1 	bne.w	800bef6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbc:	e853 3f00 	ldrex	r3, [r3]
 800bdc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bdc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdc8:	66bb      	str	r3, [r7, #104]	; 0x68
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bdd2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bdda:	e841 2300 	strex	r3, r2, [r1]
 800bdde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bde0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1e6      	bne.n	800bdb4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3308      	adds	r3, #8
 800bdec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	e853 3f00 	ldrex	r3, [r3]
 800bdf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf8:	f023 0301 	bic.w	r3, r3, #1
 800bdfc:	667b      	str	r3, [r7, #100]	; 0x64
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3308      	adds	r3, #8
 800be04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800be06:	647a      	str	r2, [r7, #68]	; 0x44
 800be08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800be0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be0e:	e841 2300 	strex	r3, r2, [r1]
 800be12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800be14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1e5      	bne.n	800bde6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2220      	movs	r2, #32
 800be1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a33      	ldr	r2, [pc, #204]	; (800bf00 <UART_RxISR_8BIT+0x1b4>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d01f      	beq.n	800be78 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be42:	2b00      	cmp	r3, #0
 800be44:	d018      	beq.n	800be78 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	e853 3f00 	ldrex	r3, [r3]
 800be52:	623b      	str	r3, [r7, #32]
   return(result);
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800be5a:	663b      	str	r3, [r7, #96]	; 0x60
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	461a      	mov	r2, r3
 800be62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be64:	633b      	str	r3, [r7, #48]	; 0x30
 800be66:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800be6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be6c:	e841 2300 	strex	r3, r2, [r1]
 800be70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1e6      	bne.n	800be46 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d12e      	bne.n	800bede <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	60fb      	str	r3, [r7, #12]
   return(result);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f023 0310 	bic.w	r3, r3, #16
 800be9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bea4:	61fb      	str	r3, [r7, #28]
 800bea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	69b9      	ldr	r1, [r7, #24]
 800beaa:	69fa      	ldr	r2, [r7, #28]
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	617b      	str	r3, [r7, #20]
   return(result);
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e6      	bne.n	800be86 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	f003 0310 	and.w	r3, r3, #16
 800bec2:	2b10      	cmp	r3, #16
 800bec4:	d103      	bne.n	800bece <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2210      	movs	r2, #16
 800becc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bed4:	4619      	mov	r1, r3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f7ff f85e 	bl	800af98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bedc:	e00b      	b.n	800bef6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7f7 f8e4 	bl	80030ac <HAL_UART_RxCpltCallback>
}
 800bee4:	e007      	b.n	800bef6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	699a      	ldr	r2, [r3, #24]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f042 0208 	orr.w	r2, r2, #8
 800bef4:	619a      	str	r2, [r3, #24]
}
 800bef6:	bf00      	nop
 800bef8:	3770      	adds	r7, #112	; 0x70
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	40008000 	.word	0x40008000

0800bf04 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b09c      	sub	sp, #112	; 0x70
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf12:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf1c:	2b22      	cmp	r3, #34	; 0x22
 800bf1e:	f040 80be 	bne.w	800c09e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf30:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bf32:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bf36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf46:	1c9a      	adds	r2, r3, #2
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	3b01      	subs	r3, #1
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f040 80a1 	bne.w	800c0ae <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf74:	e853 3f00 	ldrex	r3, [r3]
 800bf78:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bf7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf80:	667b      	str	r3, [r7, #100]	; 0x64
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	461a      	mov	r2, r3
 800bf88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf8a:	657b      	str	r3, [r7, #84]	; 0x54
 800bf8c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf92:	e841 2300 	strex	r3, r2, [r1]
 800bf96:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1e6      	bne.n	800bf6c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3308      	adds	r3, #8
 800bfa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa8:	e853 3f00 	ldrex	r3, [r3]
 800bfac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	f023 0301 	bic.w	r3, r3, #1
 800bfb4:	663b      	str	r3, [r7, #96]	; 0x60
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	3308      	adds	r3, #8
 800bfbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bfbe:	643a      	str	r2, [r7, #64]	; 0x40
 800bfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfc6:	e841 2300 	strex	r3, r2, [r1]
 800bfca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d1e5      	bne.n	800bf9e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2220      	movs	r2, #32
 800bfd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a33      	ldr	r2, [pc, #204]	; (800c0b8 <UART_RxISR_16BIT+0x1b4>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d01f      	beq.n	800c030 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d018      	beq.n	800c030 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c012:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	461a      	mov	r2, r3
 800c01a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c01e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c024:	e841 2300 	strex	r3, r2, [r1]
 800c028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1e6      	bne.n	800bffe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c034:	2b01      	cmp	r3, #1
 800c036:	d12e      	bne.n	800c096 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	e853 3f00 	ldrex	r3, [r3]
 800c04a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	f023 0310 	bic.w	r3, r3, #16
 800c052:	65bb      	str	r3, [r7, #88]	; 0x58
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	461a      	mov	r2, r3
 800c05a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c05c:	61bb      	str	r3, [r7, #24]
 800c05e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	6979      	ldr	r1, [r7, #20]
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	e841 2300 	strex	r3, r2, [r1]
 800c068:	613b      	str	r3, [r7, #16]
   return(result);
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d1e6      	bne.n	800c03e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	69db      	ldr	r3, [r3, #28]
 800c076:	f003 0310 	and.w	r3, r3, #16
 800c07a:	2b10      	cmp	r3, #16
 800c07c:	d103      	bne.n	800c086 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2210      	movs	r2, #16
 800c084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7fe ff82 	bl	800af98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c094:	e00b      	b.n	800c0ae <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7f7 f808 	bl	80030ac <HAL_UART_RxCpltCallback>
}
 800c09c:	e007      	b.n	800c0ae <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	699a      	ldr	r2, [r3, #24]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f042 0208 	orr.w	r2, r2, #8
 800c0ac:	619a      	str	r2, [r3, #24]
}
 800c0ae:	bf00      	nop
 800c0b0:	3770      	adds	r7, #112	; 0x70
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	40008000 	.word	0x40008000

0800c0bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b0ac      	sub	sp, #176	; 0xb0
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69db      	ldr	r3, [r3, #28]
 800c0d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0f2:	2b22      	cmp	r3, #34	; 0x22
 800c0f4:	f040 8182 	bne.w	800c3fc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c0fe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c102:	e125      	b.n	800c350 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c10e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c112:	b2d9      	uxtb	r1, r3
 800c114:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c11e:	400a      	ands	r2, r1
 800c120:	b2d2      	uxtb	r2, r2
 800c122:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c128:	1c5a      	adds	r2, r3, #1
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c134:	b29b      	uxth	r3, r3
 800c136:	3b01      	subs	r3, #1
 800c138:	b29a      	uxth	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	69db      	ldr	r3, [r3, #28]
 800c146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c14a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c14e:	f003 0307 	and.w	r3, r3, #7
 800c152:	2b00      	cmp	r3, #0
 800c154:	d053      	beq.n	800c1fe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d011      	beq.n	800c186 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d00b      	beq.n	800c186 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2201      	movs	r2, #1
 800c174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17c:	f043 0201 	orr.w	r2, r3, #1
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c18a:	f003 0302 	and.w	r3, r3, #2
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d011      	beq.n	800c1b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c196:	f003 0301 	and.w	r3, r3, #1
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00b      	beq.n	800c1b6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2202      	movs	r2, #2
 800c1a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ac:	f043 0204 	orr.w	r2, r3, #4
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1ba:	f003 0304 	and.w	r3, r3, #4
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d011      	beq.n	800c1e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c1c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1c6:	f003 0301 	and.w	r3, r3, #1
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00b      	beq.n	800c1e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2204      	movs	r2, #4
 800c1d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1dc:	f043 0202 	orr.w	r2, r3, #2
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d006      	beq.n	800c1fe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7fe fec8 	bl	800af86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c204:	b29b      	uxth	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	f040 80a2 	bne.w	800c350 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c214:	e853 3f00 	ldrex	r3, [r3]
 800c218:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c21c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c22e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c230:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c232:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c234:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c236:	e841 2300 	strex	r3, r2, [r1]
 800c23a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c23c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1e4      	bne.n	800c20c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	3308      	adds	r3, #8
 800c248:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c24c:	e853 3f00 	ldrex	r3, [r3]
 800c250:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c258:	f023 0301 	bic.w	r3, r3, #1
 800c25c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	3308      	adds	r3, #8
 800c266:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c26a:	66ba      	str	r2, [r7, #104]	; 0x68
 800c26c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c26e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c270:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c272:	e841 2300 	strex	r3, r2, [r1]
 800c276:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1e1      	bne.n	800c242 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2220      	movs	r2, #32
 800c282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a5f      	ldr	r2, [pc, #380]	; (800c414 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d021      	beq.n	800c2e0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d01a      	beq.n	800c2e0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2b2:	e853 3f00 	ldrex	r3, [r3]
 800c2b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c2b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2cc:	657b      	str	r3, [r7, #84]	; 0x54
 800c2ce:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2d4:	e841 2300 	strex	r3, r2, [r1]
 800c2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d1e4      	bne.n	800c2aa <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d130      	bne.n	800c34a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f6:	e853 3f00 	ldrex	r3, [r3]
 800c2fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	f023 0310 	bic.w	r3, r3, #16
 800c302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c310:	643b      	str	r3, [r7, #64]	; 0x40
 800c312:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c318:	e841 2300 	strex	r3, r2, [r1]
 800c31c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1e4      	bne.n	800c2ee <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	69db      	ldr	r3, [r3, #28]
 800c32a:	f003 0310 	and.w	r3, r3, #16
 800c32e:	2b10      	cmp	r3, #16
 800c330:	d103      	bne.n	800c33a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2210      	movs	r2, #16
 800c338:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7fe fe28 	bl	800af98 <HAL_UARTEx_RxEventCallback>
 800c348:	e002      	b.n	800c350 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7f6 feae 	bl	80030ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c350:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c35c:	f003 0320 	and.w	r3, r3, #32
 800c360:	2b00      	cmp	r3, #0
 800c362:	f47f aecf 	bne.w	800c104 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c36c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c370:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c374:	2b00      	cmp	r3, #0
 800c376:	d049      	beq.n	800c40c <UART_RxISR_8BIT_FIFOEN+0x350>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c37e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c382:	429a      	cmp	r2, r3
 800c384:	d242      	bcs.n	800c40c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3308      	adds	r3, #8
 800c38c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38e:	6a3b      	ldr	r3, [r7, #32]
 800c390:	e853 3f00 	ldrex	r3, [r3]
 800c394:	61fb      	str	r3, [r7, #28]
   return(result);
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c39c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c3aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c3ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3b2:	e841 2300 	strex	r3, r2, [r1]
 800c3b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e3      	bne.n	800c386 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a15      	ldr	r2, [pc, #84]	; (800c418 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c3c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f043 0320 	orr.w	r3, r3, #32
 800c3d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3e6:	61bb      	str	r3, [r7, #24]
 800c3e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ea:	6979      	ldr	r1, [r7, #20]
 800c3ec:	69ba      	ldr	r2, [r7, #24]
 800c3ee:	e841 2300 	strex	r3, r2, [r1]
 800c3f2:	613b      	str	r3, [r7, #16]
   return(result);
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1e4      	bne.n	800c3c4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c3fa:	e007      	b.n	800c40c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	699a      	ldr	r2, [r3, #24]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f042 0208 	orr.w	r2, r2, #8
 800c40a:	619a      	str	r2, [r3, #24]
}
 800c40c:	bf00      	nop
 800c40e:	37b0      	adds	r7, #176	; 0xb0
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	40008000 	.word	0x40008000
 800c418:	0800bd4d 	.word	0x0800bd4d

0800c41c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b0ae      	sub	sp, #184	; 0xb8
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c42a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	69db      	ldr	r3, [r3, #28]
 800c434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	689b      	ldr	r3, [r3, #8]
 800c448:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c452:	2b22      	cmp	r3, #34	; 0x22
 800c454:	f040 8186 	bne.w	800c764 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c45e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c462:	e129      	b.n	800c6b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c46a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c476:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c47a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c47e:	4013      	ands	r3, r2
 800c480:	b29a      	uxth	r2, r3
 800c482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c486:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c48c:	1c9a      	adds	r2, r3, #2
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c498:	b29b      	uxth	r3, r3
 800c49a:	3b01      	subs	r3, #1
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	69db      	ldr	r3, [r3, #28]
 800c4aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c4ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4b2:	f003 0307 	and.w	r3, r3, #7
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d053      	beq.n	800c562 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c4ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4be:	f003 0301 	and.w	r3, r3, #1
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d011      	beq.n	800c4ea <UART_RxISR_16BIT_FIFOEN+0xce>
 800c4c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00b      	beq.n	800c4ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4e0:	f043 0201 	orr.w	r2, r3, #1
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c4ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c4ee:	f003 0302 	and.w	r3, r3, #2
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d011      	beq.n	800c51a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c4f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c4fa:	f003 0301 	and.w	r3, r3, #1
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00b      	beq.n	800c51a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2202      	movs	r2, #2
 800c508:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c510:	f043 0204 	orr.w	r2, r3, #4
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c51a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c51e:	f003 0304 	and.w	r3, r3, #4
 800c522:	2b00      	cmp	r3, #0
 800c524:	d011      	beq.n	800c54a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c526:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c52a:	f003 0301 	and.w	r3, r3, #1
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00b      	beq.n	800c54a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2204      	movs	r2, #4
 800c538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c540:	f043 0202 	orr.w	r2, r3, #2
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c550:	2b00      	cmp	r3, #0
 800c552:	d006      	beq.n	800c562 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7fe fd16 	bl	800af86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c568:	b29b      	uxth	r3, r3
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	f040 80a4 	bne.w	800c6b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c578:	e853 3f00 	ldrex	r3, [r3]
 800c57c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c57e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	461a      	mov	r2, r3
 800c58e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c596:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c598:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c59a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c59e:	e841 2300 	strex	r3, r2, [r1]
 800c5a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1e2      	bne.n	800c570 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3308      	adds	r3, #8
 800c5b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c5b4:	e853 3f00 	ldrex	r3, [r3]
 800c5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c5ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5c0:	f023 0301 	bic.w	r3, r3, #1
 800c5c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3308      	adds	r3, #8
 800c5ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c5d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c5d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c5d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c5da:	e841 2300 	strex	r3, r2, [r1]
 800c5de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e1      	bne.n	800c5aa <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2220      	movs	r2, #32
 800c5ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a5f      	ldr	r2, [pc, #380]	; (800c77c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d021      	beq.n	800c648 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d01a      	beq.n	800c648 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c61a:	e853 3f00 	ldrex	r3, [r3]
 800c61e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c634:	65bb      	str	r3, [r7, #88]	; 0x58
 800c636:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c638:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c63a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c63c:	e841 2300 	strex	r3, r2, [r1]
 800c640:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1e4      	bne.n	800c612 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d130      	bne.n	800c6b2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	e853 3f00 	ldrex	r3, [r3]
 800c662:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c666:	f023 0310 	bic.w	r3, r3, #16
 800c66a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c678:	647b      	str	r3, [r7, #68]	; 0x44
 800c67a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c67e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c680:	e841 2300 	strex	r3, r2, [r1]
 800c684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e4      	bne.n	800c656 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	69db      	ldr	r3, [r3, #28]
 800c692:	f003 0310 	and.w	r3, r3, #16
 800c696:	2b10      	cmp	r3, #16
 800c698:	d103      	bne.n	800c6a2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2210      	movs	r2, #16
 800c6a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7fe fc74 	bl	800af98 <HAL_UARTEx_RxEventCallback>
 800c6b0:	e002      	b.n	800c6b8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7f6 fcfa 	bl	80030ac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c6b8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d006      	beq.n	800c6ce <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800c6c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c6c4:	f003 0320 	and.w	r3, r3, #32
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f47f aecb 	bne.w	800c464 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6d4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c6d8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d049      	beq.n	800c774 <UART_RxISR_16BIT_FIFOEN+0x358>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6e6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d242      	bcs.n	800c774 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3308      	adds	r3, #8
 800c70e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c712:	633a      	str	r2, [r7, #48]	; 0x30
 800c714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c71a:	e841 2300 	strex	r3, r2, [r1]
 800c71e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c722:	2b00      	cmp	r3, #0
 800c724:	d1e3      	bne.n	800c6ee <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	4a15      	ldr	r2, [pc, #84]	; (800c780 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c72a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	60fb      	str	r3, [r7, #12]
   return(result);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f043 0320 	orr.w	r3, r3, #32
 800c740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	461a      	mov	r2, r3
 800c74a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c74e:	61fb      	str	r3, [r7, #28]
 800c750:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c752:	69b9      	ldr	r1, [r7, #24]
 800c754:	69fa      	ldr	r2, [r7, #28]
 800c756:	e841 2300 	strex	r3, r2, [r1]
 800c75a:	617b      	str	r3, [r7, #20]
   return(result);
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d1e4      	bne.n	800c72c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c762:	e007      	b.n	800c774 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	699a      	ldr	r2, [r3, #24]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f042 0208 	orr.w	r2, r2, #8
 800c772:	619a      	str	r2, [r3, #24]
}
 800c774:	bf00      	nop
 800c776:	37b8      	adds	r7, #184	; 0xb8
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	40008000 	.word	0x40008000
 800c780:	0800bf05 	.word	0x0800bf05

0800c784 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c78c:	bf00      	nop
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	bc80      	pop	{r7}
 800c794:	4770      	bx	lr

0800c796 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c796:	b480      	push	{r7}
 800c798:	b083      	sub	sp, #12
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bc80      	pop	{r7}
 800c7a6:	4770      	bx	lr

0800c7a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c7b0:	bf00      	nop
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bc80      	pop	{r7}
 800c7b8:	4770      	bx	lr

0800c7ba <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b088      	sub	sp, #32
 800c7be:	af02      	add	r7, sp, #8
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	1d3b      	adds	r3, r7, #4
 800c7c4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d101      	bne.n	800c7da <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	e046      	b.n	800c868 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2224      	movs	r2, #36	; 0x24
 800c7e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	f022 0201 	bic.w	r2, r2, #1
 800c7f8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	430a      	orrs	r2, r1
 800c80c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d105      	bne.n	800c820 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c814:	1d3b      	adds	r3, r7, #4
 800c816:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f000 f911 	bl	800ca42 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681a      	ldr	r2, [r3, #0]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f042 0201 	orr.w	r2, r2, #1
 800c82e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c830:	f7f5 ff38 	bl	80026a4 <HAL_GetTick>
 800c834:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c836:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	2200      	movs	r2, #0
 800c840:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7fe ff16 	bl	800b676 <UART_WaitOnFlagUntilTimeout>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800c850:	2303      	movs	r3, #3
 800c852:	75fb      	strb	r3, [r7, #23]
 800c854:	e003      	b.n	800c85e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2220      	movs	r2, #32
 800c85a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800c866:	7dfb      	ldrb	r3, [r7, #23]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c870:	b480      	push	{r7}
 800c872:	b089      	sub	sp, #36	; 0x24
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d101      	bne.n	800c886 <HAL_UARTEx_EnableStopMode+0x16>
 800c882:	2302      	movs	r3, #2
 800c884:	e021      	b.n	800c8ca <HAL_UARTEx_EnableStopMode+0x5a>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	e853 3f00 	ldrex	r3, [r3]
 800c89a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	f043 0302 	orr.w	r3, r3, #2
 800c8a2:	61fb      	str	r3, [r7, #28]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	61bb      	str	r3, [r7, #24]
 800c8ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b0:	6979      	ldr	r1, [r7, #20]
 800c8b2:	69ba      	ldr	r2, [r7, #24]
 800c8b4:	e841 2300 	strex	r3, r2, [r1]
 800c8b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1e6      	bne.n	800c88e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3724      	adds	r7, #36	; 0x24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bc80      	pop	{r7}
 800c8d2:	4770      	bx	lr

0800c8d4 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d101      	bne.n	800c8ea <HAL_UARTEx_EnableFifoMode+0x16>
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	e02b      	b.n	800c942 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2224      	movs	r2, #36	; 0x24
 800c8f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f022 0201 	bic.w	r2, r2, #1
 800c910:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c918:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c920:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f8ac 	bl	800ca88 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2220      	movs	r2, #32
 800c934:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d101      	bne.n	800c962 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c95e:	2302      	movs	r3, #2
 800c960:	e02d      	b.n	800c9be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2224      	movs	r2, #36	; 0x24
 800c96e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f022 0201 	bic.w	r2, r2, #1
 800c988:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	683a      	ldr	r2, [r7, #0]
 800c99a:	430a      	orrs	r2, r1
 800c99c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f872 	bl	800ca88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2220      	movs	r2, #32
 800c9b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d101      	bne.n	800c9de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c9da:	2302      	movs	r3, #2
 800c9dc:	e02d      	b.n	800ca3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2224      	movs	r2, #36	; 0x24
 800c9ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f022 0201 	bic.w	r2, r2, #1
 800ca04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f000 f834 	bl	800ca88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800ca42:	b480      	push	{r7}
 800ca44:	b085      	sub	sp, #20
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	1d3b      	adds	r3, r7, #4
 800ca4c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	f023 0210 	bic.w	r2, r3, #16
 800ca5a:	893b      	ldrh	r3, [r7, #8]
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	430a      	orrs	r2, r1
 800ca64:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800ca70:	7abb      	ldrb	r3, [r7, #10]
 800ca72:	061a      	lsls	r2, r3, #24
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	605a      	str	r2, [r3, #4]
}
 800ca7c:	bf00      	nop
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bc80      	pop	{r7}
 800ca84:	4770      	bx	lr
	...

0800ca88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d108      	bne.n	800caaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800caa8:	e031      	b.n	800cb0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800caaa:	2308      	movs	r3, #8
 800caac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800caae:	2308      	movs	r3, #8
 800cab0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	0e5b      	lsrs	r3, r3, #25
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	f003 0307 	and.w	r3, r3, #7
 800cac0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	0f5b      	lsrs	r3, r3, #29
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	f003 0307 	and.w	r3, r3, #7
 800cad0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cad2:	7bbb      	ldrb	r3, [r7, #14]
 800cad4:	7b3a      	ldrb	r2, [r7, #12]
 800cad6:	4910      	ldr	r1, [pc, #64]	; (800cb18 <UARTEx_SetNbDataToProcess+0x90>)
 800cad8:	5c8a      	ldrb	r2, [r1, r2]
 800cada:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cade:	7b3a      	ldrb	r2, [r7, #12]
 800cae0:	490e      	ldr	r1, [pc, #56]	; (800cb1c <UARTEx_SetNbDataToProcess+0x94>)
 800cae2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cae4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cae8:	b29a      	uxth	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	7b7a      	ldrb	r2, [r7, #13]
 800caf4:	4908      	ldr	r1, [pc, #32]	; (800cb18 <UARTEx_SetNbDataToProcess+0x90>)
 800caf6:	5c8a      	ldrb	r2, [r1, r2]
 800caf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cafc:	7b7a      	ldrb	r2, [r7, #13]
 800cafe:	4907      	ldr	r1, [pc, #28]	; (800cb1c <UARTEx_SetNbDataToProcess+0x94>)
 800cb00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb02:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cb0e:	bf00      	nop
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bc80      	pop	{r7}
 800cb16:	4770      	bx	lr
 800cb18:	08021b54 	.word	0x08021b54
 800cb1c:	08021b5c 	.word	0x08021b5c

0800cb20 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800cb24:	f7f5 fc64 	bl	80023f0 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800cb28:	f000 f818 	bl	800cb5c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800cb2c:	bf00      	nop
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800cb30:	b480      	push	{r7}
 800cb32:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800cb34:	f3bf 8f4f 	dsb	sy
}
 800cb38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800cb3a:	4b06      	ldr	r3, [pc, #24]	; (800cb54 <__NVIC_SystemReset+0x24>)
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800cb42:	4904      	ldr	r1, [pc, #16]	; (800cb54 <__NVIC_SystemReset+0x24>)
 800cb44:	4b04      	ldr	r3, [pc, #16]	; (800cb58 <__NVIC_SystemReset+0x28>)
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800cb4a:	f3bf 8f4f 	dsb	sy
}
 800cb4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800cb50:	bf00      	nop
 800cb52:	e7fd      	b.n	800cb50 <__NVIC_SystemReset+0x20>
 800cb54:	e000ed00 	.word	0xe000ed00
 800cb58:	05fa0004 	.word	0x05fa0004

0800cb5c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800cb62:	2300      	movs	r3, #0
 800cb64:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800cb66:	2300      	movs	r3, #0
 800cb68:	9302      	str	r3, [sp, #8]
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	2301      	movs	r3, #1
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	4b59      	ldr	r3, [pc, #356]	; (800ccd8 <LoRaWAN_Init+0x17c>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	2100      	movs	r1, #0
 800cb78:	2002      	movs	r0, #2
 800cb7a:	f013 f887 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800cb7e:	2300      	movs	r3, #0
 800cb80:	9302      	str	r3, [sp, #8]
 800cb82:	2305      	movs	r3, #5
 800cb84:	9301      	str	r3, [sp, #4]
 800cb86:	2302      	movs	r3, #2
 800cb88:	9300      	str	r3, [sp, #0]
 800cb8a:	4b54      	ldr	r3, [pc, #336]	; (800ccdc <LoRaWAN_Init+0x180>)
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2100      	movs	r1, #0
 800cb90:	2002      	movs	r0, #2
 800cb92:	f013 f87b 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800cb96:	2300      	movs	r3, #0
 800cb98:	9302      	str	r3, [sp, #8]
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	9301      	str	r3, [sp, #4]
 800cb9e:	2301      	movs	r3, #1
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	4b4f      	ldr	r3, [pc, #316]	; (800cce0 <LoRaWAN_Init+0x184>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	2100      	movs	r1, #0
 800cba8:	2002      	movs	r0, #2
 800cbaa:	f013 f86f 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800cbae:	1d3b      	adds	r3, r7, #4
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	2000      	movs	r0, #0
 800cbb4:	f003 fa3c 	bl	8010030 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	0e1b      	lsrs	r3, r3, #24
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	0c1b      	lsrs	r3, r3, #16
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	0a1b      	lsrs	r3, r3, #8
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	9302      	str	r3, [sp, #8]
 800cbd0:	9101      	str	r1, [sp, #4]
 800cbd2:	9200      	str	r2, [sp, #0]
 800cbd4:	4b43      	ldr	r3, [pc, #268]	; (800cce4 <LoRaWAN_Init+0x188>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	2100      	movs	r1, #0
 800cbda:	2002      	movs	r0, #2
 800cbdc:	f013 f856 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800cbe0:	1d3b      	adds	r3, r7, #4
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	2001      	movs	r0, #1
 800cbe6:	f003 fa23 	bl	8010030 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	0e1b      	lsrs	r3, r3, #24
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	0c1b      	lsrs	r3, r3, #16
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	0a1b      	lsrs	r3, r3, #8
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	b2c0      	uxtb	r0, r0
 800cc04:	9003      	str	r0, [sp, #12]
 800cc06:	9302      	str	r3, [sp, #8]
 800cc08:	9101      	str	r1, [sp, #4]
 800cc0a:	9200      	str	r2, [sp, #0]
 800cc0c:	4b36      	ldr	r3, [pc, #216]	; (800cce8 <LoRaWAN_Init+0x18c>)
 800cc0e:	2200      	movs	r2, #0
 800cc10:	2100      	movs	r1, #0
 800cc12:	2002      	movs	r0, #2
 800cc14:	f013 f83a 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800cc18:	2300      	movs	r3, #0
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	4b33      	ldr	r3, [pc, #204]	; (800ccec <LoRaWAN_Init+0x190>)
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cc24:	4832      	ldr	r0, [pc, #200]	; (800ccf0 <LoRaWAN_Init+0x194>)
 800cc26:	f012 fd83 	bl	801f730 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	4b31      	ldr	r3, [pc, #196]	; (800ccf4 <LoRaWAN_Init+0x198>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cc36:	4830      	ldr	r0, [pc, #192]	; (800ccf8 <LoRaWAN_Init+0x19c>)
 800cc38:	f012 fd7a 	bl	801f730 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	4b2e      	ldr	r3, [pc, #184]	; (800ccfc <LoRaWAN_Init+0x1a0>)
 800cc42:	2201      	movs	r2, #1
 800cc44:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800cc48:	482d      	ldr	r0, [pc, #180]	; (800cd00 <LoRaWAN_Init+0x1a4>)
 800cc4a:	f012 fd71 	bl	801f730 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800cc4e:	2300      	movs	r3, #0
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	4b2c      	ldr	r3, [pc, #176]	; (800cd04 <LoRaWAN_Init+0x1a8>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800cc5a:	482b      	ldr	r0, [pc, #172]	; (800cd08 <LoRaWAN_Init+0x1ac>)
 800cc5c:	f012 fd68 	bl	801f730 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800cc60:	4a2a      	ldr	r2, [pc, #168]	; (800cd0c <LoRaWAN_Init+0x1b0>)
 800cc62:	2100      	movs	r1, #0
 800cc64:	2001      	movs	r0, #1
 800cc66:	f012 fccb 	bl	801f600 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800cc6a:	4a29      	ldr	r2, [pc, #164]	; (800cd10 <LoRaWAN_Init+0x1b4>)
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	2002      	movs	r0, #2
 800cc70:	f012 fcc6 	bl	801f600 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800cc74:	4a27      	ldr	r2, [pc, #156]	; (800cd14 <LoRaWAN_Init+0x1b8>)
 800cc76:	2100      	movs	r1, #0
 800cc78:	2004      	movs	r0, #4
 800cc7a:	f012 fcc1 	bl	801f600 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800cc7e:	4a26      	ldr	r2, [pc, #152]	; (800cd18 <LoRaWAN_Init+0x1bc>)
 800cc80:	2100      	movs	r1, #0
 800cc82:	2008      	movs	r0, #8
 800cc84:	f012 fcbc 	bl	801f600 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800cc88:	f000 fd26 	bl	800d6d8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800cc8c:	4923      	ldr	r1, [pc, #140]	; (800cd1c <LoRaWAN_Init+0x1c0>)
 800cc8e:	4824      	ldr	r0, [pc, #144]	; (800cd20 <LoRaWAN_Init+0x1c4>)
 800cc90:	f002 fa3c 	bl	800f10c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800cc94:	4823      	ldr	r0, [pc, #140]	; (800cd24 <LoRaWAN_Init+0x1c8>)
 800cc96:	f002 faa7 	bl	800f1e8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800cc9a:	4819      	ldr	r0, [pc, #100]	; (800cd00 <LoRaWAN_Init+0x1a4>)
 800cc9c:	f012 fd7e 	bl	801f79c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800cca0:	4b21      	ldr	r3, [pc, #132]	; (800cd28 <LoRaWAN_Init+0x1cc>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	4a21      	ldr	r2, [pc, #132]	; (800cd2c <LoRaWAN_Init+0x1d0>)
 800cca6:	7812      	ldrb	r2, [r2, #0]
 800cca8:	4611      	mov	r1, r2
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f002 fbf4 	bl	800f498 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800ccb0:	4b1f      	ldr	r3, [pc, #124]	; (800cd30 <LoRaWAN_Init+0x1d4>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d10b      	bne.n	800ccd0 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800ccb8:	4b1e      	ldr	r3, [pc, #120]	; (800cd34 <LoRaWAN_Init+0x1d8>)
 800ccba:	6819      	ldr	r1, [r3, #0]
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	9300      	str	r3, [sp, #0]
 800ccc0:	4b1d      	ldr	r3, [pc, #116]	; (800cd38 <LoRaWAN_Init+0x1dc>)
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	481d      	ldr	r0, [pc, #116]	; (800cd3c <LoRaWAN_Init+0x1e0>)
 800ccc6:	f012 fd33 	bl	801f730 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800ccca:	481c      	ldr	r0, [pc, #112]	; (800cd3c <LoRaWAN_Init+0x1e0>)
 800cccc:	f012 fd66 	bl	801f79c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	080211f0 	.word	0x080211f0
 800ccdc:	08021214 	.word	0x08021214
 800cce0:	08021238 	.word	0x08021238
 800cce4:	0802125c 	.word	0x0802125c
 800cce8:	08021280 	.word	0x08021280
 800ccec:	0800d1f5 	.word	0x0800d1f5
 800ccf0:	20000508 	.word	0x20000508
 800ccf4:	0800d207 	.word	0x0800d207
 800ccf8:	20000520 	.word	0x20000520
 800ccfc:	0800d219 	.word	0x0800d219
 800cd00:	20000538 	.word	0x20000538
 800cd04:	0800d5d9 	.word	0x0800d5d9
 800cd08:	200003fc 	.word	0x200003fc
 800cd0c:	0800f42d 	.word	0x0800f42d
 800cd10:	0800ceb5 	.word	0x0800ceb5
 800cd14:	0800d5fd 	.word	0x0800d5fd
 800cd18:	0800d559 	.word	0x0800d559
 800cd1c:	01030000 	.word	0x01030000
 800cd20:	20000024 	.word	0x20000024
 800cd24:	20000070 	.word	0x20000070
 800cd28:	20000020 	.word	0x20000020
 800cd2c:	20000021 	.word	0x20000021
 800cd30:	200003e0 	.word	0x200003e0
 800cd34:	20000088 	.word	0x20000088
 800cd38:	0800d1d1 	.word	0x0800d1d1
 800cd3c:	200003e4 	.word	0x200003e4

0800cd40 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800cd4a:	88fb      	ldrh	r3, [r7, #6]
 800cd4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd50:	d104      	bne.n	800cd5c <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800cd52:	2100      	movs	r1, #0
 800cd54:	2002      	movs	r0, #2
 800cd56:	f012 fc75 	bl	801f644 <UTIL_SEQ_SetTask>
      }
      break;
 800cd5a:	e000      	b.n	800cd5e <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800cd5c:	bf00      	nop
  }
}
 800cd5e:	bf00      	nop
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
	...

0800cd68 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800cd68:	b5b0      	push	{r4, r5, r7, lr}
 800cd6a:	b08a      	sub	sp, #40	; 0x28
 800cd6c:	af06      	add	r7, sp, #24
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f000 8088 	beq.w	800ce8e <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800cd7e:	4846      	ldr	r0, [pc, #280]	; (800ce98 <OnRxData+0x130>)
 800cd80:	f012 fd0c 	bl	801f79c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d057      	beq.n	800ce3c <OnRxData+0xd4>
    {
      if (appData != NULL)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d054      	beq.n	800ce3c <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d04d      	beq.n	800ce3c <OnRxData+0xd4>
        {
          switch (appData->Port)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d021      	beq.n	800cdec <OnRxData+0x84>
 800cda8:	2b03      	cmp	r3, #3
 800cdaa:	d149      	bne.n	800ce40 <OnRxData+0xd8>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	785b      	ldrb	r3, [r3, #1]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d117      	bne.n	800cde4 <OnRxData+0x7c>
              {
                switch (appData->Buffer[0])
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	d00e      	beq.n	800cddc <OnRxData+0x74>
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	dc12      	bgt.n	800cde8 <OnRxData+0x80>
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <OnRxData+0x64>
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d004      	beq.n	800cdd4 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800cdca:	e00d      	b.n	800cde8 <OnRxData+0x80>
                    LmHandlerRequestClass(CLASS_A);
 800cdcc:	2000      	movs	r0, #0
 800cdce:	f002 fd17 	bl	800f800 <LmHandlerRequestClass>
                    break;
 800cdd2:	e00a      	b.n	800cdea <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_B);
 800cdd4:	2001      	movs	r0, #1
 800cdd6:	f002 fd13 	bl	800f800 <LmHandlerRequestClass>
                    break;
 800cdda:	e006      	b.n	800cdea <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_C);
 800cddc:	2002      	movs	r0, #2
 800cdde:	f002 fd0f 	bl	800f800 <LmHandlerRequestClass>
                    break;
 800cde2:	e002      	b.n	800cdea <OnRxData+0x82>
                }
              }
 800cde4:	bf00      	nop
 800cde6:	e02e      	b.n	800ce46 <OnRxData+0xde>
                    break;
 800cde8:	bf00      	nop
              break;
 800cdea:	e02c      	b.n	800ce46 <OnRxData+0xde>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	785b      	ldrb	r3, [r3, #1]
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d127      	bne.n	800ce44 <OnRxData+0xdc>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	b2da      	uxtb	r2, r3
 800ce00:	4b26      	ldr	r3, [pc, #152]	; (800ce9c <OnRxData+0x134>)
 800ce02:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800ce04:	4b25      	ldr	r3, [pc, #148]	; (800ce9c <OnRxData+0x134>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10b      	bne.n	800ce24 <OnRxData+0xbc>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800ce0c:	4b24      	ldr	r3, [pc, #144]	; (800cea0 <OnRxData+0x138>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2100      	movs	r1, #0
 800ce12:	2003      	movs	r0, #3
 800ce14:	f012 ff3a 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800ce18:	2201      	movs	r2, #1
 800ce1a:	2120      	movs	r1, #32
 800ce1c:	4821      	ldr	r0, [pc, #132]	; (800cea4 <OnRxData+0x13c>)
 800ce1e:	f7fa faf3 	bl	8007408 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800ce22:	e00f      	b.n	800ce44 <OnRxData+0xdc>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800ce24:	4b20      	ldr	r3, [pc, #128]	; (800cea8 <OnRxData+0x140>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	2100      	movs	r1, #0
 800ce2a:	2003      	movs	r0, #3
 800ce2c:	f012 ff2e 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800ce30:	2200      	movs	r2, #0
 800ce32:	2120      	movs	r1, #32
 800ce34:	481b      	ldr	r0, [pc, #108]	; (800cea4 <OnRxData+0x13c>)
 800ce36:	f7fa fae7 	bl	8007408 <HAL_GPIO_WritePin>
              break;
 800ce3a:	e003      	b.n	800ce44 <OnRxData+0xdc>

            default:

              break;
          }
        }
 800ce3c:	bf00      	nop
 800ce3e:	e002      	b.n	800ce46 <OnRxData+0xde>
              break;
 800ce40:	bf00      	nop
 800ce42:	e000      	b.n	800ce46 <OnRxData+0xde>
              break;
 800ce44:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	7c1b      	ldrb	r3, [r3, #16]
 800ce4a:	2b05      	cmp	r3, #5
 800ce4c:	d81f      	bhi.n	800ce8e <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	7bfa      	ldrb	r2, [r7, #15]
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	7c09      	ldrb	r1, [r1, #16]
 800ce60:	4608      	mov	r0, r1
 800ce62:	4912      	ldr	r1, [pc, #72]	; (800ceac <OnRxData+0x144>)
 800ce64:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ce68:	6838      	ldr	r0, [r7, #0]
 800ce6a:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800ce6e:	4605      	mov	r5, r0
 800ce70:	6838      	ldr	r0, [r7, #0]
 800ce72:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800ce76:	9005      	str	r0, [sp, #20]
 800ce78:	9504      	str	r5, [sp, #16]
 800ce7a:	9103      	str	r1, [sp, #12]
 800ce7c:	9402      	str	r4, [sp, #8]
 800ce7e:	9201      	str	r2, [sp, #4]
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <OnRxData+0x148>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	2100      	movs	r1, #0
 800ce88:	2003      	movs	r0, #3
 800ce8a:	f012 feff 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800ce8e:	bf00      	nop
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bdb0      	pop	{r4, r5, r7, pc}
 800ce96:	bf00      	nop
 800ce98:	20000520 	.word	0x20000520
 800ce9c:	20000506 	.word	0x20000506
 800cea0:	080212a4 	.word	0x080212a4
 800cea4:	48000400 	.word	0x48000400
 800cea8:	080212b0 	.word	0x080212b0
 800ceac:	20000008 	.word	0x20000008
 800ceb0:	080212bc 	.word	0x080212bc

0800ceb4 <SendTxData>:

static void SendTxData(void)
{
 800ceb4:	b590      	push	{r4, r7, lr}
 800ceb6:	b091      	sub	sp, #68	; 0x44
 800ceb8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ceba:	23ff      	movs	r3, #255	; 0xff
 800cebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800cec0:	f7f5 fac0 	bl	8002444 <GetBatteryLevel>
 800cec4:	4603      	mov	r3, r0
 800cec6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800cece:	2300      	movs	r3, #0
 800ced0:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800cee2:	2300      	movs	r3, #0
 800cee4:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800ceea:	1d3b      	adds	r3, r7, #4
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7f5 fc6d 	bl	80027cc <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800cef2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	4b8f      	ldr	r3, [pc, #572]	; (800d138 <SendTxData+0x284>)
 800cefa:	2201      	movs	r2, #1
 800cefc:	2100      	movs	r1, #0
 800cefe:	2002      	movs	r0, #2
 800cf00:	f012 fec4 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7f4 f8f6 	bl	80010f8 <__aeabi_f2iz>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	b21b      	sxth	r3, r3
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	4b8a      	ldr	r3, [pc, #552]	; (800d13c <SendTxData+0x288>)
 800cf14:	2201      	movs	r2, #1
 800cf16:	2100      	movs	r1, #0
 800cf18:	2002      	movs	r0, #2
 800cf1a:	f012 feb7 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800cf1e:	4b88      	ldr	r3, [pc, #544]	; (800d140 <SendTxData+0x28c>)
 800cf20:	2202      	movs	r2, #2
 800cf22:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	4987      	ldr	r1, [pc, #540]	; (800d144 <SendTxData+0x290>)
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7f3 ff1f 	bl	8000d6c <__aeabi_fmul>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7f4 f907 	bl	8001144 <__aeabi_f2uiz>
 800cf36:	4603      	mov	r3, r0
 800cf38:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7f4 f8db 	bl	80010f8 <__aeabi_f2iz>
 800cf42:	4603      	mov	r3, r0
 800cf44:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	497f      	ldr	r1, [pc, #508]	; (800d148 <SendTxData+0x294>)
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7f3 ff0e 	bl	8000d6c <__aeabi_fmul>
 800cf50:	4603      	mov	r3, r0
 800cf52:	497c      	ldr	r1, [pc, #496]	; (800d144 <SendTxData+0x290>)
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7f3 ffbd 	bl	8000ed4 <__aeabi_fdiv>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7f4 f8f1 	bl	8001144 <__aeabi_f2uiz>
 800cf62:	4603      	mov	r3, r0
 800cf64:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800cf66:	4b76      	ldr	r3, [pc, #472]	; (800d140 <SendTxData+0x28c>)
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf6c:	1c59      	adds	r1, r3, #1
 800cf6e:	6339      	str	r1, [r7, #48]	; 0x30
 800cf70:	4413      	add	r3, r2
 800cf72:	4a76      	ldr	r2, [pc, #472]	; (800d14c <SendTxData+0x298>)
 800cf74:	7812      	ldrb	r2, [r2, #0]
 800cf76:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800cf78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cf7a:	0a1b      	lsrs	r3, r3, #8
 800cf7c:	b298      	uxth	r0, r3
 800cf7e:	4b70      	ldr	r3, [pc, #448]	; (800d140 <SendTxData+0x28c>)
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	1c59      	adds	r1, r3, #1
 800cf86:	6339      	str	r1, [r7, #48]	; 0x30
 800cf88:	4413      	add	r3, r2
 800cf8a:	b2c2      	uxtb	r2, r0
 800cf8c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800cf8e:	4b6c      	ldr	r3, [pc, #432]	; (800d140 <SendTxData+0x28c>)
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	1c59      	adds	r1, r3, #1
 800cf96:	6339      	str	r1, [r7, #48]	; 0x30
 800cf98:	4413      	add	r3, r2
 800cf9a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cf9c:	b2d2      	uxtb	r2, r2
 800cf9e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800cfa0:	4b67      	ldr	r3, [pc, #412]	; (800d140 <SendTxData+0x28c>)
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	1c59      	adds	r1, r3, #1
 800cfa8:	6339      	str	r1, [r7, #48]	; 0x30
 800cfaa:	4413      	add	r3, r2
 800cfac:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800cfae:	b2d2      	uxtb	r2, r2
 800cfb0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800cfb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cfb4:	0a1b      	lsrs	r3, r3, #8
 800cfb6:	b298      	uxth	r0, r3
 800cfb8:	4b61      	ldr	r3, [pc, #388]	; (800d140 <SendTxData+0x28c>)
 800cfba:	685a      	ldr	r2, [r3, #4]
 800cfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbe:	1c59      	adds	r1, r3, #1
 800cfc0:	6339      	str	r1, [r7, #48]	; 0x30
 800cfc2:	4413      	add	r3, r2
 800cfc4:	b2c2      	uxtb	r2, r0
 800cfc6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800cfc8:	4b5d      	ldr	r3, [pc, #372]	; (800d140 <SendTxData+0x28c>)
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfce:	1c59      	adds	r1, r3, #1
 800cfd0:	6339      	str	r1, [r7, #48]	; 0x30
 800cfd2:	4413      	add	r3, r2
 800cfd4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cfd6:	b2d2      	uxtb	r2, r2
 800cfd8:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800cfda:	4b5d      	ldr	r3, [pc, #372]	; (800d150 <SendTxData+0x29c>)
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	2b08      	cmp	r3, #8
 800cfe0:	d007      	beq.n	800cff2 <SendTxData+0x13e>
 800cfe2:	4b5b      	ldr	r3, [pc, #364]	; (800d150 <SendTxData+0x29c>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d003      	beq.n	800cff2 <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800cfea:	4b59      	ldr	r3, [pc, #356]	; (800d150 <SendTxData+0x29c>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d120      	bne.n	800d034 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800cff2:	4b53      	ldr	r3, [pc, #332]	; (800d140 <SendTxData+0x28c>)
 800cff4:	685a      	ldr	r2, [r3, #4]
 800cff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff8:	1c59      	adds	r1, r3, #1
 800cffa:	6339      	str	r1, [r7, #48]	; 0x30
 800cffc:	4413      	add	r3, r2
 800cffe:	2200      	movs	r2, #0
 800d000:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800d002:	4b4f      	ldr	r3, [pc, #316]	; (800d140 <SendTxData+0x28c>)
 800d004:	685a      	ldr	r2, [r3, #4]
 800d006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d008:	1c59      	adds	r1, r3, #1
 800d00a:	6339      	str	r1, [r7, #48]	; 0x30
 800d00c:	4413      	add	r3, r2
 800d00e:	2200      	movs	r2, #0
 800d010:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800d012:	4b4b      	ldr	r3, [pc, #300]	; (800d140 <SendTxData+0x28c>)
 800d014:	685a      	ldr	r2, [r3, #4]
 800d016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d018:	1c59      	adds	r1, r3, #1
 800d01a:	6339      	str	r1, [r7, #48]	; 0x30
 800d01c:	4413      	add	r3, r2
 800d01e:	2200      	movs	r2, #0
 800d020:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800d022:	4b47      	ldr	r3, [pc, #284]	; (800d140 <SendTxData+0x28c>)
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d028:	1c59      	adds	r1, r3, #1
 800d02a:	6339      	str	r1, [r7, #48]	; 0x30
 800d02c:	4413      	add	r3, r2
 800d02e:	2200      	movs	r2, #0
 800d030:	701a      	strb	r2, [r3, #0]
 800d032:	e05b      	b.n	800d0ec <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800d03c:	4b40      	ldr	r3, [pc, #256]	; (800d140 <SendTxData+0x28c>)
 800d03e:	685a      	ldr	r2, [r3, #4]
 800d040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d042:	1c59      	adds	r1, r3, #1
 800d044:	6339      	str	r1, [r7, #48]	; 0x30
 800d046:	18d4      	adds	r4, r2, r3
 800d048:	f7f5 f9fc 	bl	8002444 <GetBatteryLevel>
 800d04c:	4603      	mov	r3, r0
 800d04e:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	1418      	asrs	r0, r3, #16
 800d054:	4b3a      	ldr	r3, [pc, #232]	; (800d140 <SendTxData+0x28c>)
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d05a:	1c59      	adds	r1, r3, #1
 800d05c:	6339      	str	r1, [r7, #48]	; 0x30
 800d05e:	4413      	add	r3, r2
 800d060:	b2c2      	uxtb	r2, r0
 800d062:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	1218      	asrs	r0, r3, #8
 800d068:	4b35      	ldr	r3, [pc, #212]	; (800d140 <SendTxData+0x28c>)
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06e:	1c59      	adds	r1, r3, #1
 800d070:	6339      	str	r1, [r7, #48]	; 0x30
 800d072:	4413      	add	r3, r2
 800d074:	b2c2      	uxtb	r2, r0
 800d076:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800d078:	4b31      	ldr	r3, [pc, #196]	; (800d140 <SendTxData+0x28c>)
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d07e:	1c59      	adds	r1, r3, #1
 800d080:	6339      	str	r1, [r7, #48]	; 0x30
 800d082:	4413      	add	r3, r2
 800d084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d086:	b2d2      	uxtb	r2, r2
 800d088:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800d08a:	6a3b      	ldr	r3, [r7, #32]
 800d08c:	1418      	asrs	r0, r3, #16
 800d08e:	4b2c      	ldr	r3, [pc, #176]	; (800d140 <SendTxData+0x28c>)
 800d090:	685a      	ldr	r2, [r3, #4]
 800d092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d094:	1c59      	adds	r1, r3, #1
 800d096:	6339      	str	r1, [r7, #48]	; 0x30
 800d098:	4413      	add	r3, r2
 800d09a:	b2c2      	uxtb	r2, r0
 800d09c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800d09e:	6a3b      	ldr	r3, [r7, #32]
 800d0a0:	1218      	asrs	r0, r3, #8
 800d0a2:	4b27      	ldr	r3, [pc, #156]	; (800d140 <SendTxData+0x28c>)
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	1c59      	adds	r1, r3, #1
 800d0aa:	6339      	str	r1, [r7, #48]	; 0x30
 800d0ac:	4413      	add	r3, r2
 800d0ae:	b2c2      	uxtb	r2, r0
 800d0b0:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800d0b2:	4b23      	ldr	r3, [pc, #140]	; (800d140 <SendTxData+0x28c>)
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b8:	1c59      	adds	r1, r3, #1
 800d0ba:	6339      	str	r1, [r7, #48]	; 0x30
 800d0bc:	4413      	add	r3, r2
 800d0be:	6a3a      	ldr	r2, [r7, #32]
 800d0c0:	b2d2      	uxtb	r2, r2
 800d0c2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800d0c4:	8bfb      	ldrh	r3, [r7, #30]
 800d0c6:	0a1b      	lsrs	r3, r3, #8
 800d0c8:	b298      	uxth	r0, r3
 800d0ca:	4b1d      	ldr	r3, [pc, #116]	; (800d140 <SendTxData+0x28c>)
 800d0cc:	685a      	ldr	r2, [r3, #4]
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	1c59      	adds	r1, r3, #1
 800d0d2:	6339      	str	r1, [r7, #48]	; 0x30
 800d0d4:	4413      	add	r3, r2
 800d0d6:	b2c2      	uxtb	r2, r0
 800d0d8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800d0da:	4b19      	ldr	r3, [pc, #100]	; (800d140 <SendTxData+0x28c>)
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e0:	1c59      	adds	r1, r3, #1
 800d0e2:	6339      	str	r1, [r7, #48]	; 0x30
 800d0e4:	4413      	add	r3, r2
 800d0e6:	8bfa      	ldrh	r2, [r7, #30]
 800d0e8:	b2d2      	uxtb	r2, r2
 800d0ea:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	4b13      	ldr	r3, [pc, #76]	; (800d140 <SendTxData+0x28c>)
 800d0f2:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d0f4:	4b17      	ldr	r3, [pc, #92]	; (800d154 <SendTxData+0x2a0>)
 800d0f6:	7a5b      	ldrb	r3, [r3, #9]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d007      	beq.n	800d10c <SendTxData+0x258>
 800d0fc:	f002 fa6e 	bl	800f5dc <LmHandlerJoinStatus>
 800d100:	4603      	mov	r3, r0
 800d102:	2b01      	cmp	r3, #1
 800d104:	d102      	bne.n	800d10c <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d106:	4813      	ldr	r0, [pc, #76]	; (800d154 <SendTxData+0x2a0>)
 800d108:	f012 fbb6 	bl	801f878 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d10c:	4b10      	ldr	r3, [pc, #64]	; (800d150 <SendTxData+0x29c>)
 800d10e:	78db      	ldrb	r3, [r3, #3]
 800d110:	2200      	movs	r2, #0
 800d112:	4619      	mov	r1, r3
 800d114:	480a      	ldr	r0, [pc, #40]	; (800d140 <SendTxData+0x28c>)
 800d116:	f002 fa7d 	bl	800f614 <LmHandlerSend>
 800d11a:	4603      	mov	r3, r0
 800d11c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d120:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d124:	2b00      	cmp	r3, #0
 800d126:	d119      	bne.n	800d15c <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d128:	4b0b      	ldr	r3, [pc, #44]	; (800d158 <SendTxData+0x2a4>)
 800d12a:	2201      	movs	r2, #1
 800d12c:	2100      	movs	r1, #0
 800d12e:	2001      	movs	r0, #1
 800d130:	f012 fdac 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
 800d134:	e029      	b.n	800d18a <SendTxData+0x2d6>
 800d136:	bf00      	nop
 800d138:	08021304 	.word	0x08021304
 800d13c:	08021310 	.word	0x08021310
 800d140:	2000008c 	.word	0x2000008c
 800d144:	41200000 	.word	0x41200000
 800d148:	42c80000 	.word	0x42c80000
 800d14c:	20000506 	.word	0x20000506
 800d150:	20000070 	.word	0x20000070
 800d154:	20000538 	.word	0x20000538
 800d158:	0802131c 	.word	0x0802131c
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d15c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d160:	f113 0f06 	cmn.w	r3, #6
 800d164:	d111      	bne.n	800d18a <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d166:	f002 f98d 	bl	800f484 <LmHandlerGetDutyCycleWaitTime>
 800d16a:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800d16c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d00b      	beq.n	800d18a <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d174:	4a11      	ldr	r2, [pc, #68]	; (800d1bc <SendTxData+0x308>)
 800d176:	fba2 2303 	umull	r2, r3, r2, r3
 800d17a:	099b      	lsrs	r3, r3, #6
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	4b10      	ldr	r3, [pc, #64]	; (800d1c0 <SendTxData+0x30c>)
 800d180:	2201      	movs	r2, #1
 800d182:	2100      	movs	r1, #0
 800d184:	2001      	movs	r0, #1
 800d186:	f012 fd81 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800d18a:	4b0e      	ldr	r3, [pc, #56]	; (800d1c4 <SendTxData+0x310>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10f      	bne.n	800d1b2 <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d192:	480d      	ldr	r0, [pc, #52]	; (800d1c8 <SendTxData+0x314>)
 800d194:	f012 fb70 	bl	801f878 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d198:	4b0c      	ldr	r3, [pc, #48]	; (800d1cc <SendTxData+0x318>)
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	bf38      	it	cc
 800d1a2:	4613      	movcc	r3, r2
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	4808      	ldr	r0, [pc, #32]	; (800d1c8 <SendTxData+0x314>)
 800d1a8:	f012 fbd6 	bl	801f958 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d1ac:	4806      	ldr	r0, [pc, #24]	; (800d1c8 <SendTxData+0x314>)
 800d1ae:	f012 faf5 	bl	801f79c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d1b2:	bf00      	nop
 800d1b4:	373c      	adds	r7, #60	; 0x3c
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd90      	pop	{r4, r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	10624dd3 	.word	0x10624dd3
 800d1c0:	0802132c 	.word	0x0802132c
 800d1c4:	200003e0 	.word	0x200003e0
 800d1c8:	200003e4 	.word	0x200003e4
 800d1cc:	20000088 	.word	0x20000088

0800d1d0 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d1d8:	2100      	movs	r1, #0
 800d1da:	2002      	movs	r0, #2
 800d1dc:	f012 fa32 	bl	801f644 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d1e0:	4803      	ldr	r0, [pc, #12]	; (800d1f0 <OnTxTimerEvent+0x20>)
 800d1e2:	f012 fadb 	bl	801f79c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d1e6:	bf00      	nop
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	200003e4 	.word	0x200003e4

0800d1f4 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d1fc:	bf00      	nop
 800d1fe:	370c      	adds	r7, #12
 800d200:	46bd      	mov	sp, r7
 800d202:	bc80      	pop	{r7}
 800d204:	4770      	bx	lr

0800d206 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d206:	b480      	push	{r7}
 800d208:	b083      	sub	sp, #12
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d20e:	bf00      	nop
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	bc80      	pop	{r7}
 800d216:	4770      	bx	lr

0800d218 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d220:	bf00      	nop
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	bc80      	pop	{r7}
 800d228:	4770      	bx	lr
	...

0800d22c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af04      	add	r7, sp, #16
 800d232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d041      	beq.n	800d2be <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d03d      	beq.n	800d2be <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d242:	4821      	ldr	r0, [pc, #132]	; (800d2c8 <OnTxData+0x9c>)
 800d244:	f012 faaa 	bl	801f79c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d248:	4b20      	ldr	r3, [pc, #128]	; (800d2cc <OnTxData+0xa0>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	2100      	movs	r1, #0
 800d24e:	2002      	movs	r0, #2
 800d250:	f012 fd1c 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	7c12      	ldrb	r2, [r2, #16]
 800d25c:	4611      	mov	r1, r2
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d264:	4610      	mov	r0, r2
 800d266:	687a      	ldr	r2, [r7, #4]
 800d268:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d26c:	9203      	str	r2, [sp, #12]
 800d26e:	9002      	str	r0, [sp, #8]
 800d270:	9101      	str	r1, [sp, #4]
 800d272:	9300      	str	r3, [sp, #0]
 800d274:	4b16      	ldr	r3, [pc, #88]	; (800d2d0 <OnTxData+0xa4>)
 800d276:	2200      	movs	r2, #0
 800d278:	2100      	movs	r1, #0
 800d27a:	2003      	movs	r0, #3
 800d27c:	f012 fd06 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d280:	4b14      	ldr	r3, [pc, #80]	; (800d2d4 <OnTxData+0xa8>)
 800d282:	2200      	movs	r2, #0
 800d284:	2100      	movs	r1, #0
 800d286:	2003      	movs	r0, #3
 800d288:	f012 fd00 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	7a1b      	ldrb	r3, [r3, #8]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d10e      	bne.n	800d2b2 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	7a5b      	ldrb	r3, [r3, #9]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <OnTxData+0x74>
 800d29c:	4b0e      	ldr	r3, [pc, #56]	; (800d2d8 <OnTxData+0xac>)
 800d29e:	e000      	b.n	800d2a2 <OnTxData+0x76>
 800d2a0:	4b0e      	ldr	r3, [pc, #56]	; (800d2dc <OnTxData+0xb0>)
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	4b0e      	ldr	r3, [pc, #56]	; (800d2e0 <OnTxData+0xb4>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	2100      	movs	r1, #0
 800d2aa:	2003      	movs	r0, #3
 800d2ac:	f012 fcee 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d2b0:	e005      	b.n	800d2be <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d2b2:	4b0c      	ldr	r3, [pc, #48]	; (800d2e4 <OnTxData+0xb8>)
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	2003      	movs	r0, #3
 800d2ba:	f012 fce7 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 800d2be:	bf00      	nop
 800d2c0:	3708      	adds	r7, #8
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20000508 	.word	0x20000508
 800d2cc:	0802134c 	.word	0x0802134c
 800d2d0:	08021380 	.word	0x08021380
 800d2d4:	080213b4 	.word	0x080213b4
 800d2d8:	080213c4 	.word	0x080213c4
 800d2dc:	080213c8 	.word	0x080213c8
 800d2e0:	080213d0 	.word	0x080213d0
 800d2e4:	080213e4 	.word	0x080213e4

0800d2e8 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d039      	beq.n	800d36a <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d11e      	bne.n	800d33e <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800d300:	2100      	movs	r1, #0
 800d302:	2004      	movs	r0, #4
 800d304:	f012 f99e 	bl	801f644 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800d308:	481a      	ldr	r0, [pc, #104]	; (800d374 <OnJoinRequest+0x8c>)
 800d30a:	f012 fab5 	bl	801f878 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d30e:	4b1a      	ldr	r3, [pc, #104]	; (800d378 <OnJoinRequest+0x90>)
 800d310:	2200      	movs	r2, #0
 800d312:	2100      	movs	r1, #0
 800d314:	2002      	movs	r0, #2
 800d316:	f012 fcb9 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	79db      	ldrb	r3, [r3, #7]
 800d31e:	2b01      	cmp	r3, #1
 800d320:	d106      	bne.n	800d330 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d322:	4b16      	ldr	r3, [pc, #88]	; (800d37c <OnJoinRequest+0x94>)
 800d324:	2200      	movs	r2, #0
 800d326:	2100      	movs	r1, #0
 800d328:	2002      	movs	r0, #2
 800d32a:	f012 fcaf 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d32e:	e01c      	b.n	800d36a <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d330:	4b13      	ldr	r3, [pc, #76]	; (800d380 <OnJoinRequest+0x98>)
 800d332:	2200      	movs	r2, #0
 800d334:	2100      	movs	r1, #0
 800d336:	2002      	movs	r0, #2
 800d338:	f012 fca8 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 800d33c:	e015      	b.n	800d36a <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d33e:	4b11      	ldr	r3, [pc, #68]	; (800d384 <OnJoinRequest+0x9c>)
 800d340:	2200      	movs	r2, #0
 800d342:	2100      	movs	r1, #0
 800d344:	2002      	movs	r0, #2
 800d346:	f012 fca1 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	79db      	ldrb	r3, [r3, #7]
 800d34e:	2b02      	cmp	r3, #2
 800d350:	d10b      	bne.n	800d36a <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d352:	4b0d      	ldr	r3, [pc, #52]	; (800d388 <OnJoinRequest+0xa0>)
 800d354:	2200      	movs	r2, #0
 800d356:	2100      	movs	r1, #0
 800d358:	2002      	movs	r0, #2
 800d35a:	f012 fc97 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d35e:	4b0b      	ldr	r3, [pc, #44]	; (800d38c <OnJoinRequest+0xa4>)
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	2101      	movs	r1, #1
 800d364:	4618      	mov	r0, r3
 800d366:	f002 f897 	bl	800f498 <LmHandlerJoin>
}
 800d36a:	bf00      	nop
 800d36c:	3708      	adds	r7, #8
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	20000538 	.word	0x20000538
 800d378:	080213f4 	.word	0x080213f4
 800d37c:	0802140c 	.word	0x0802140c
 800d380:	0802142c 	.word	0x0802142c
 800d384:	0802144c 	.word	0x0802144c
 800d388:	08021468 	.word	0x08021468
 800d38c:	20000020 	.word	0x20000020

0800d390 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d392:	b093      	sub	sp, #76	; 0x4c
 800d394:	af0c      	add	r7, sp, #48	; 0x30
 800d396:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d056      	beq.n	800d44c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	2b02      	cmp	r3, #2
 800d3a4:	d008      	beq.n	800d3b8 <OnBeaconStatusChange+0x28>
 800d3a6:	2b03      	cmp	r3, #3
 800d3a8:	d049      	beq.n	800d43e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d3aa:	4b2b      	ldr	r3, [pc, #172]	; (800d458 <OnBeaconStatusChange+0xc8>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	2002      	movs	r0, #2
 800d3b2:	f012 fc6b 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d3b6:	e04a      	b.n	800d44e <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	7c1b      	ldrb	r3, [r3, #16]
 800d3bc:	4618      	mov	r0, r3
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d3c4:	461c      	mov	r4, r3
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d3cc:	461d      	mov	r5, r3
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	697a      	ldr	r2, [r7, #20]
 800d3d4:	6852      	ldr	r2, [r2, #4]
 800d3d6:	6979      	ldr	r1, [r7, #20]
 800d3d8:	7d89      	ldrb	r1, [r1, #22]
 800d3da:	460e      	mov	r6, r1
 800d3dc:	6979      	ldr	r1, [r7, #20]
 800d3de:	7dc9      	ldrb	r1, [r1, #23]
 800d3e0:	6139      	str	r1, [r7, #16]
 800d3e2:	6979      	ldr	r1, [r7, #20]
 800d3e4:	7e09      	ldrb	r1, [r1, #24]
 800d3e6:	60f9      	str	r1, [r7, #12]
 800d3e8:	6979      	ldr	r1, [r7, #20]
 800d3ea:	7e49      	ldrb	r1, [r1, #25]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	6979      	ldr	r1, [r7, #20]
 800d3f0:	7e89      	ldrb	r1, [r1, #26]
 800d3f2:	6079      	str	r1, [r7, #4]
 800d3f4:	6979      	ldr	r1, [r7, #20]
 800d3f6:	7ec9      	ldrb	r1, [r1, #27]
 800d3f8:	6039      	str	r1, [r7, #0]
 800d3fa:	6979      	ldr	r1, [r7, #20]
 800d3fc:	7f09      	ldrb	r1, [r1, #28]
 800d3fe:	910b      	str	r1, [sp, #44]	; 0x2c
 800d400:	f8d7 c000 	ldr.w	ip, [r7]
 800d404:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d408:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d40c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d410:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d414:	f8cd c020 	str.w	ip, [sp, #32]
 800d418:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d41c:	f8cd c01c 	str.w	ip, [sp, #28]
 800d420:	6939      	ldr	r1, [r7, #16]
 800d422:	9106      	str	r1, [sp, #24]
 800d424:	9605      	str	r6, [sp, #20]
 800d426:	9204      	str	r2, [sp, #16]
 800d428:	9303      	str	r3, [sp, #12]
 800d42a:	9502      	str	r5, [sp, #8]
 800d42c:	9401      	str	r4, [sp, #4]
 800d42e:	9000      	str	r0, [sp, #0]
 800d430:	4b0a      	ldr	r3, [pc, #40]	; (800d45c <OnBeaconStatusChange+0xcc>)
 800d432:	2200      	movs	r2, #0
 800d434:	2100      	movs	r1, #0
 800d436:	2002      	movs	r0, #2
 800d438:	f012 fc28 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d43c:	e007      	b.n	800d44e <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d43e:	4b08      	ldr	r3, [pc, #32]	; (800d460 <OnBeaconStatusChange+0xd0>)
 800d440:	2200      	movs	r2, #0
 800d442:	2100      	movs	r1, #0
 800d444:	2002      	movs	r0, #2
 800d446:	f012 fc21 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d44a:	e000      	b.n	800d44e <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800d44c:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d44e:	bf00      	nop
 800d450:	371c      	adds	r7, #28
 800d452:	46bd      	mov	sp, r7
 800d454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d456:	bf00      	nop
 800d458:	0802148c 	.word	0x0802148c
 800d45c:	080214a4 	.word	0x080214a4
 800d460:	08021518 	.word	0x08021518

0800d464 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800d464:	b480      	push	{r7}
 800d466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800d468:	bf00      	nop
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bc80      	pop	{r7}
 800d46e:	4770      	bx	lr

0800d470 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af02      	add	r7, sp, #8
 800d476:	4603      	mov	r3, r0
 800d478:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d47a:	79fb      	ldrb	r3, [r7, #7]
 800d47c:	4a06      	ldr	r2, [pc, #24]	; (800d498 <OnClassChange+0x28>)
 800d47e:	5cd3      	ldrb	r3, [r2, r3]
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	4b06      	ldr	r3, [pc, #24]	; (800d49c <OnClassChange+0x2c>)
 800d484:	2200      	movs	r2, #0
 800d486:	2100      	movs	r1, #0
 800d488:	2002      	movs	r0, #2
 800d48a:	f012 fbff 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d48e:	bf00      	nop
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	08021554 	.word	0x08021554
 800d49c:	08021538 	.word	0x08021538

0800d4a0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	f012 f8cc 	bl	801f644 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d4ac:	bf00      	nop
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d4b8:	4a0d      	ldr	r2, [pc, #52]	; (800d4f0 <OnTxPeriodicityChanged+0x40>)
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d4be:	4b0c      	ldr	r3, [pc, #48]	; (800d4f0 <OnTxPeriodicityChanged+0x40>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d103      	bne.n	800d4ce <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d4c6:	4b0a      	ldr	r3, [pc, #40]	; (800d4f0 <OnTxPeriodicityChanged+0x40>)
 800d4c8:	f242 7210 	movw	r2, #10000	; 0x2710
 800d4cc:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d4ce:	4809      	ldr	r0, [pc, #36]	; (800d4f4 <OnTxPeriodicityChanged+0x44>)
 800d4d0:	f012 f9d2 	bl	801f878 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d4d4:	4b06      	ldr	r3, [pc, #24]	; (800d4f0 <OnTxPeriodicityChanged+0x40>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4619      	mov	r1, r3
 800d4da:	4806      	ldr	r0, [pc, #24]	; (800d4f4 <OnTxPeriodicityChanged+0x44>)
 800d4dc:	f012 fa3c 	bl	801f958 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d4e0:	4804      	ldr	r0, [pc, #16]	; (800d4f4 <OnTxPeriodicityChanged+0x44>)
 800d4e2:	f012 f95b 	bl	801f79c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d4e6:	bf00      	nop
 800d4e8:	3708      	adds	r7, #8
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20000088 	.word	0x20000088
 800d4f4:	200003e4 	.word	0x200003e4

0800d4f8 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b083      	sub	sp, #12
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d502:	4a04      	ldr	r2, [pc, #16]	; (800d514 <OnTxFrameCtrlChanged+0x1c>)
 800d504:	79fb      	ldrb	r3, [r7, #7]
 800d506:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bc80      	pop	{r7}
 800d510:	4770      	bx	lr
 800d512:	bf00      	nop
 800d514:	20000070 	.word	0x20000070

0800d518 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d518:	b480      	push	{r7}
 800d51a:	b083      	sub	sp, #12
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d522:	4a04      	ldr	r2, [pc, #16]	; (800d534 <OnPingSlotPeriodicityChanged+0x1c>)
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bc80      	pop	{r7}
 800d530:	4770      	bx	lr
 800d532:	bf00      	nop
 800d534:	20000070 	.word	0x20000070

0800d538 <OnSystemReset>:

static void OnSystemReset(void)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d53c:	f002 fda9 	bl	8010092 <LmHandlerHalt>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d106      	bne.n	800d554 <OnSystemReset+0x1c>
 800d546:	f002 f849 	bl	800f5dc <LmHandlerJoinStatus>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b01      	cmp	r3, #1
 800d54e:	d101      	bne.n	800d554 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d550:	f7ff faee 	bl	800cb30 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d554:	bf00      	nop
 800d556:	bd80      	pop	{r7, pc}

0800d558 <StopJoin>:

static void StopJoin(void)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d55c:	4817      	ldr	r0, [pc, #92]	; (800d5bc <StopJoin+0x64>)
 800d55e:	f012 f98b 	bl	801f878 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d562:	f002 fd89 	bl	8010078 <LmHandlerStop>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d006      	beq.n	800d57a <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d56c:	4b14      	ldr	r3, [pc, #80]	; (800d5c0 <StopJoin+0x68>)
 800d56e:	2200      	movs	r2, #0
 800d570:	2100      	movs	r1, #0
 800d572:	2002      	movs	r0, #2
 800d574:	f012 fb8a 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
 800d578:	e01a      	b.n	800d5b0 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d57a:	4b12      	ldr	r3, [pc, #72]	; (800d5c4 <StopJoin+0x6c>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	2100      	movs	r1, #0
 800d580:	2002      	movs	r0, #2
 800d582:	f012 fb83 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d586:	4b10      	ldr	r3, [pc, #64]	; (800d5c8 <StopJoin+0x70>)
 800d588:	2201      	movs	r2, #1
 800d58a:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d58c:	4b0f      	ldr	r3, [pc, #60]	; (800d5cc <StopJoin+0x74>)
 800d58e:	2200      	movs	r2, #0
 800d590:	2100      	movs	r1, #0
 800d592:	2002      	movs	r0, #2
 800d594:	f012 fb7a 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d598:	480d      	ldr	r0, [pc, #52]	; (800d5d0 <StopJoin+0x78>)
 800d59a:	f001 fe25 	bl	800f1e8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d59e:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <StopJoin+0x70>)
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	2101      	movs	r1, #1
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f001 ff77 	bl	800f498 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800d5aa:	4804      	ldr	r0, [pc, #16]	; (800d5bc <StopJoin+0x64>)
 800d5ac:	f012 f8f6 	bl	801f79c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800d5b0:	4808      	ldr	r0, [pc, #32]	; (800d5d4 <StopJoin+0x7c>)
 800d5b2:	f012 f8f3 	bl	801f79c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800d5b6:	bf00      	nop
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	200003e4 	.word	0x200003e4
 800d5c0:	08021558 	.word	0x08021558
 800d5c4:	08021578 	.word	0x08021578
 800d5c8:	20000020 	.word	0x20000020
 800d5cc:	0802158c 	.word	0x0802158c
 800d5d0:	20000070 	.word	0x20000070
 800d5d4:	200003fc 	.word	0x200003fc

0800d5d8 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800d5e0:	4b05      	ldr	r3, [pc, #20]	; (800d5f8 <OnStopJoinTimerEvent+0x20>)
 800d5e2:	781b      	ldrb	r3, [r3, #0]
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	d103      	bne.n	800d5f0 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	2008      	movs	r0, #8
 800d5ec:	f012 f82a 	bl	801f644 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	20000020 	.word	0x20000020

0800d5fc <StoreContext>:

static void StoreContext(void)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d602:	23ff      	movs	r3, #255	; 0xff
 800d604:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800d606:	f002 fd79 	bl	80100fc <LmHandlerNvmDataStore>
 800d60a:	4603      	mov	r3, r0
 800d60c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800d60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d612:	f113 0f08 	cmn.w	r3, #8
 800d616:	d106      	bne.n	800d626 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800d618:	4b0a      	ldr	r3, [pc, #40]	; (800d644 <StoreContext+0x48>)
 800d61a:	2200      	movs	r2, #0
 800d61c:	2100      	movs	r1, #0
 800d61e:	2002      	movs	r0, #2
 800d620:	f012 fb34 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800d624:	e00a      	b.n	800d63c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800d626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d62a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d62e:	d105      	bne.n	800d63c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800d630:	4b05      	ldr	r3, [pc, #20]	; (800d648 <StoreContext+0x4c>)
 800d632:	2200      	movs	r2, #0
 800d634:	2100      	movs	r1, #0
 800d636:	2002      	movs	r0, #2
 800d638:	f012 fb28 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 800d63c:	bf00      	nop
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	080215ac 	.word	0x080215ac
 800d648:	080215c4 	.word	0x080215c4

0800d64c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	4603      	mov	r3, r0
 800d654:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800d656:	79fb      	ldrb	r3, [r7, #7]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d106      	bne.n	800d66a <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800d65c:	4b08      	ldr	r3, [pc, #32]	; (800d680 <OnNvmDataChange+0x34>)
 800d65e:	2200      	movs	r2, #0
 800d660:	2100      	movs	r1, #0
 800d662:	2002      	movs	r0, #2
 800d664:	f012 fb12 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800d668:	e005      	b.n	800d676 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800d66a:	4b06      	ldr	r3, [pc, #24]	; (800d684 <OnNvmDataChange+0x38>)
 800d66c:	2200      	movs	r2, #0
 800d66e:	2100      	movs	r1, #0
 800d670:	2002      	movs	r0, #2
 800d672:	f012 fb0b 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 800d676:	bf00      	nop
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	080215dc 	.word	0x080215dc
 800d684:	080215f0 	.word	0x080215f0

0800d688 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800d692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d696:	4807      	ldr	r0, [pc, #28]	; (800d6b4 <OnStoreContextRequest+0x2c>)
 800d698:	f7f4 f898 	bl	80017cc <FLASH_IF_Erase>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d104      	bne.n	800d6ac <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800d6a2:	683a      	ldr	r2, [r7, #0]
 800d6a4:	6879      	ldr	r1, [r7, #4]
 800d6a6:	4803      	ldr	r0, [pc, #12]	; (800d6b4 <OnStoreContextRequest+0x2c>)
 800d6a8:	f7f4 f840 	bl	800172c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800d6ac:	bf00      	nop
 800d6ae:	3708      	adds	r7, #8
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	0803f000 	.word	0x0803f000

0800d6b8 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800d6c2:	683a      	ldr	r2, [r7, #0]
 800d6c4:	4903      	ldr	r1, [pc, #12]	; (800d6d4 <OnRestoreContextRequest+0x1c>)
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7f4 f858 	bl	800177c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800d6cc:	bf00      	nop
 800d6ce:	3708      	adds	r7, #8
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	0803f000 	.word	0x0803f000

0800d6d8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800d6dc:	4b18      	ldr	r3, [pc, #96]	; (800d740 <LoraInfo_Init+0x68>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800d6e2:	4b17      	ldr	r3, [pc, #92]	; (800d740 <LoraInfo_Init+0x68>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800d6e8:	4b15      	ldr	r3, [pc, #84]	; (800d740 <LoraInfo_Init+0x68>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800d6ee:	4b14      	ldr	r3, [pc, #80]	; (800d740 <LoraInfo_Init+0x68>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800d6f4:	4b12      	ldr	r3, [pc, #72]	; (800d740 <LoraInfo_Init+0x68>)
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	f043 0320 	orr.w	r3, r3, #32
 800d6fc:	4a10      	ldr	r2, [pc, #64]	; (800d740 <LoraInfo_Init+0x68>)
 800d6fe:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800d700:	4b0f      	ldr	r3, [pc, #60]	; (800d740 <LoraInfo_Init+0x68>)
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d708:	4a0d      	ldr	r2, [pc, #52]	; (800d740 <LoraInfo_Init+0x68>)
 800d70a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800d70c:	4b0c      	ldr	r3, [pc, #48]	; (800d740 <LoraInfo_Init+0x68>)
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10c      	bne.n	800d72e <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800d714:	4b0b      	ldr	r3, [pc, #44]	; (800d744 <LoraInfo_Init+0x6c>)
 800d716:	2200      	movs	r2, #0
 800d718:	2100      	movs	r1, #0
 800d71a:	2000      	movs	r0, #0
 800d71c:	f012 fab6 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800d720:	bf00      	nop
 800d722:	f012 faa1 	bl	801fc68 <UTIL_ADV_TRACE_IsBufferEmpty>
 800d726:	4603      	mov	r3, r0
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d1fa      	bne.n	800d722 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800d72c:	e7fe      	b.n	800d72c <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800d72e:	4b04      	ldr	r3, [pc, #16]	; (800d740 <LoraInfo_Init+0x68>)
 800d730:	2200      	movs	r2, #0
 800d732:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800d734:	4b02      	ldr	r3, [pc, #8]	; (800d740 <LoraInfo_Init+0x68>)
 800d736:	2201      	movs	r2, #1
 800d738:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800d73a:	bf00      	nop
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	20000550 	.word	0x20000550
 800d744:	08021604 	.word	0x08021604

0800d748 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800d748:	b480      	push	{r7}
 800d74a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800d74c:	4b02      	ldr	r3, [pc, #8]	; (800d758 <LoraInfo_GetPtr+0x10>)
}
 800d74e:	4618      	mov	r0, r3
 800d750:	46bd      	mov	sp, r7
 800d752:	bc80      	pop	{r7}
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	20000550 	.word	0x20000550

0800d75c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d760:	f7f7 fb81 	bl	8004e66 <BSP_RADIO_Init>
 800d764:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d766:	4618      	mov	r0, r3
 800d768:	bd80      	pop	{r7, pc}

0800d76a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b082      	sub	sp, #8
 800d76e:	af00      	add	r7, sp, #0
 800d770:	4603      	mov	r3, r0
 800d772:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d774:	79fb      	ldrb	r3, [r7, #7]
 800d776:	4618      	mov	r0, r3
 800d778:	f7f7 fba6 	bl	8004ec8 <BSP_RADIO_ConfigRFSwitch>
 800d77c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}

0800d786 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d786:	b580      	push	{r7, lr}
 800d788:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d78a:	f7f7 fbeb 	bl	8004f64 <BSP_RADIO_GetTxConfig>
 800d78e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d790:	4618      	mov	r0, r3
 800d792:	bd80      	pop	{r7, pc}

0800d794 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d798:	f7f7 fbeb 	bl	8004f72 <BSP_RADIO_IsTCXO>
 800d79c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	bd80      	pop	{r7, pc}

0800d7a2 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d7a2:	b580      	push	{r7, lr}
 800d7a4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d7a6:	f7f7 fbeb 	bl	8004f80 <BSP_RADIO_IsDCDC>
 800d7aa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d7ba:	79fb      	ldrb	r3, [r7, #7]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7f7 fbe6 	bl	8004f8e <BSP_RADIO_GetRFOMaxPowerConfig>
 800d7c2:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	33f1      	adds	r3, #241	; 0xf1
 800d7d8:	2210      	movs	r2, #16
 800d7da:	2100      	movs	r1, #0
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f00e f827 	bl	801b830 <memset1>
    ctx->M_n = 0;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	22f0      	movs	r2, #240	; 0xf0
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f00e f81d 	bl	801b830 <memset1>
}
 800d7f6:	bf00      	nop
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b082      	sub	sp, #8
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	461a      	mov	r2, r3
 800d80c:	2110      	movs	r1, #16
 800d80e:	6838      	ldr	r0, [r7, #0]
 800d810:	f000 fe5c 	bl	800e4cc <lorawan_aes_set_key>
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b08c      	sub	sp, #48	; 0x30
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 80a1 	beq.w	800d976 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d83a:	f1c3 0310 	rsb	r3, r3, #16
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	4293      	cmp	r3, r2
 800d842:	bf28      	it	cs
 800d844:	4613      	movcs	r3, r2
 800d846:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d854:	4413      	add	r3, r2
 800d856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d858:	b292      	uxth	r2, r2
 800d85a:	68b9      	ldr	r1, [r7, #8]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f00d ffac 	bl	801b7ba <memcpy1>
        ctx->M_n += mlen;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86a:	441a      	add	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d878:	2b0f      	cmp	r3, #15
 800d87a:	f240 808d 	bls.w	800d998 <AES_CMAC_Update+0x17c>
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	429a      	cmp	r2, r3
 800d884:	f000 8088 	beq.w	800d998 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800d888:	2300      	movs	r3, #0
 800d88a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d88c:	e015      	b.n	800d8ba <AES_CMAC_Update+0x9e>
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d892:	4413      	add	r3, r2
 800d894:	33f1      	adds	r3, #241	; 0xf1
 800d896:	781a      	ldrb	r2, [r3, #0]
 800d898:	68f9      	ldr	r1, [r7, #12]
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	440b      	add	r3, r1
 800d89e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	4053      	eors	r3, r2
 800d8a6:	b2d9      	uxtb	r1, r3
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ac:	4413      	add	r3, r2
 800d8ae:	33f1      	adds	r3, #241	; 0xf1
 800d8b0:	460a      	mov	r2, r1
 800d8b2:	701a      	strb	r2, [r3, #0]
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	2b0f      	cmp	r3, #15
 800d8be:	dde6      	ble.n	800d88e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d8c6:	f107 0314 	add.w	r3, r7, #20
 800d8ca:	2210      	movs	r2, #16
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f00d ff74 	bl	801b7ba <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d8d2:	68fa      	ldr	r2, [r7, #12]
 800d8d4:	f107 0114 	add.w	r1, r7, #20
 800d8d8:	f107 0314 	add.w	r3, r7, #20
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f000 fed3 	bl	800e688 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	33f1      	adds	r3, #241	; 0xf1
 800d8e6:	f107 0114 	add.w	r1, r7, #20
 800d8ea:	2210      	movs	r2, #16
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f00d ff64 	bl	801b7ba <memcpy1>

        data += mlen;
 800d8f2:	68ba      	ldr	r2, [r7, #8]
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	4413      	add	r3, r2
 800d8f8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fe:	1ad3      	subs	r3, r2, r3
 800d900:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800d902:	e038      	b.n	800d976 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800d904:	2300      	movs	r3, #0
 800d906:	62bb      	str	r3, [r7, #40]	; 0x28
 800d908:	e013      	b.n	800d932 <AES_CMAC_Update+0x116>
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d90e:	4413      	add	r3, r2
 800d910:	33f1      	adds	r3, #241	; 0xf1
 800d912:	781a      	ldrb	r2, [r3, #0]
 800d914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d916:	68b9      	ldr	r1, [r7, #8]
 800d918:	440b      	add	r3, r1
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	4053      	eors	r3, r2
 800d91e:	b2d9      	uxtb	r1, r3
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	4413      	add	r3, r2
 800d926:	33f1      	adds	r3, #241	; 0xf1
 800d928:	460a      	mov	r2, r1
 800d92a:	701a      	strb	r2, [r3, #0]
 800d92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92e:	3301      	adds	r3, #1
 800d930:	62bb      	str	r3, [r7, #40]	; 0x28
 800d932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d934:	2b0f      	cmp	r3, #15
 800d936:	dde8      	ble.n	800d90a <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d93e:	f107 0314 	add.w	r3, r7, #20
 800d942:	2210      	movs	r2, #16
 800d944:	4618      	mov	r0, r3
 800d946:	f00d ff38 	bl	801b7ba <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d94a:	68fa      	ldr	r2, [r7, #12]
 800d94c:	f107 0114 	add.w	r1, r7, #20
 800d950:	f107 0314 	add.w	r3, r7, #20
 800d954:	4618      	mov	r0, r3
 800d956:	f000 fe97 	bl	800e688 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	33f1      	adds	r3, #241	; 0xf1
 800d95e:	f107 0114 	add.w	r1, r7, #20
 800d962:	2210      	movs	r2, #16
 800d964:	4618      	mov	r0, r3
 800d966:	f00d ff28 	bl	801b7ba <memcpy1>

        data += 16;
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	3310      	adds	r3, #16
 800d96e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	3b10      	subs	r3, #16
 800d974:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b10      	cmp	r3, #16
 800d97a:	d8c3      	bhi.n	800d904 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d982:	687a      	ldr	r2, [r7, #4]
 800d984:	b292      	uxth	r2, r2
 800d986:	68b9      	ldr	r1, [r7, #8]
 800d988:	4618      	mov	r0, r3
 800d98a:	f00d ff16 	bl	801b7ba <memcpy1>
    ctx->M_n = len;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	687a      	ldr	r2, [r7, #4]
 800d992:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d996:	e000      	b.n	800d99a <AES_CMAC_Update+0x17e>
            return;
 800d998:	bf00      	nop
}
 800d99a:	3730      	adds	r7, #48	; 0x30
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b092      	sub	sp, #72	; 0x48
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d9aa:	f107 031c 	add.w	r3, r7, #28
 800d9ae:	2210      	movs	r2, #16
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f00d ff3c 	bl	801b830 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	f107 011c 	add.w	r1, r7, #28
 800d9be:	f107 031c 	add.w	r3, r7, #28
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 fe60 	bl	800e688 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d9c8:	7f3b      	ldrb	r3, [r7, #28]
 800d9ca:	b25b      	sxtb	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	da30      	bge.n	800da32 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	647b      	str	r3, [r7, #68]	; 0x44
 800d9d4:	e01b      	b.n	800da0e <AES_CMAC_Final+0x6e>
 800d9d6:	f107 021c 	add.w	r2, r7, #28
 800d9da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9dc:	4413      	add	r3, r2
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	005b      	lsls	r3, r3, #1
 800d9e2:	b25a      	sxtb	r2, r3
 800d9e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	3348      	adds	r3, #72	; 0x48
 800d9ea:	443b      	add	r3, r7
 800d9ec:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d9f0:	09db      	lsrs	r3, r3, #7
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	b25b      	sxtb	r3, r3
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	b25b      	sxtb	r3, r3
 800d9fa:	b2d9      	uxtb	r1, r3
 800d9fc:	f107 021c 	add.w	r2, r7, #28
 800da00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da02:	4413      	add	r3, r2
 800da04:	460a      	mov	r2, r1
 800da06:	701a      	strb	r2, [r3, #0]
 800da08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da0a:	3301      	adds	r3, #1
 800da0c:	647b      	str	r3, [r7, #68]	; 0x44
 800da0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da10:	2b0e      	cmp	r3, #14
 800da12:	dde0      	ble.n	800d9d6 <AES_CMAC_Final+0x36>
 800da14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800da20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da24:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800da28:	43db      	mvns	r3, r3
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da30:	e027      	b.n	800da82 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800da32:	2300      	movs	r3, #0
 800da34:	643b      	str	r3, [r7, #64]	; 0x40
 800da36:	e01b      	b.n	800da70 <AES_CMAC_Final+0xd0>
 800da38:	f107 021c 	add.w	r2, r7, #28
 800da3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da3e:	4413      	add	r3, r2
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	b25a      	sxtb	r2, r3
 800da46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da48:	3301      	adds	r3, #1
 800da4a:	3348      	adds	r3, #72	; 0x48
 800da4c:	443b      	add	r3, r7
 800da4e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800da52:	09db      	lsrs	r3, r3, #7
 800da54:	b2db      	uxtb	r3, r3
 800da56:	b25b      	sxtb	r3, r3
 800da58:	4313      	orrs	r3, r2
 800da5a:	b25b      	sxtb	r3, r3
 800da5c:	b2d9      	uxtb	r1, r3
 800da5e:	f107 021c 	add.w	r2, r7, #28
 800da62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da64:	4413      	add	r3, r2
 800da66:	460a      	mov	r2, r1
 800da68:	701a      	strb	r2, [r3, #0]
 800da6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da6c:	3301      	adds	r3, #1
 800da6e:	643b      	str	r3, [r7, #64]	; 0x40
 800da70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da72:	2b0e      	cmp	r3, #14
 800da74:	dde0      	ble.n	800da38 <AES_CMAC_Final+0x98>
 800da76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da7a:	005b      	lsls	r3, r3, #1
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800da88:	2b10      	cmp	r3, #16
 800da8a:	d11d      	bne.n	800dac8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800da8c:	2300      	movs	r3, #0
 800da8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da90:	e016      	b.n	800dac0 <AES_CMAC_Final+0x120>
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da96:	4413      	add	r3, r2
 800da98:	f203 1301 	addw	r3, r3, #257	; 0x101
 800da9c:	781a      	ldrb	r2, [r3, #0]
 800da9e:	f107 011c 	add.w	r1, r7, #28
 800daa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa4:	440b      	add	r3, r1
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	4053      	eors	r3, r2
 800daaa:	b2d9      	uxtb	r1, r3
 800daac:	683a      	ldr	r2, [r7, #0]
 800daae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dab0:	4413      	add	r3, r2
 800dab2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dab6:	460a      	mov	r2, r1
 800dab8:	701a      	strb	r2, [r3, #0]
 800daba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dabc:	3301      	adds	r3, #1
 800dabe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac2:	2b0f      	cmp	r3, #15
 800dac4:	dde5      	ble.n	800da92 <AES_CMAC_Final+0xf2>
 800dac6:	e096      	b.n	800dbf6 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800dac8:	7f3b      	ldrb	r3, [r7, #28]
 800daca:	b25b      	sxtb	r3, r3
 800dacc:	2b00      	cmp	r3, #0
 800dace:	da30      	bge.n	800db32 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800dad0:	2300      	movs	r3, #0
 800dad2:	63bb      	str	r3, [r7, #56]	; 0x38
 800dad4:	e01b      	b.n	800db0e <AES_CMAC_Final+0x16e>
 800dad6:	f107 021c 	add.w	r2, r7, #28
 800dada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dadc:	4413      	add	r3, r2
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	b25a      	sxtb	r2, r3
 800dae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dae6:	3301      	adds	r3, #1
 800dae8:	3348      	adds	r3, #72	; 0x48
 800daea:	443b      	add	r3, r7
 800daec:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800daf0:	09db      	lsrs	r3, r3, #7
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	b25b      	sxtb	r3, r3
 800daf6:	4313      	orrs	r3, r2
 800daf8:	b25b      	sxtb	r3, r3
 800dafa:	b2d9      	uxtb	r1, r3
 800dafc:	f107 021c 	add.w	r2, r7, #28
 800db00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db02:	4413      	add	r3, r2
 800db04:	460a      	mov	r2, r1
 800db06:	701a      	strb	r2, [r3, #0]
 800db08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0a:	3301      	adds	r3, #1
 800db0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800db0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db10:	2b0e      	cmp	r3, #14
 800db12:	dde0      	ble.n	800dad6 <AES_CMAC_Final+0x136>
 800db14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800db20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db24:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800db28:	43db      	mvns	r3, r3
 800db2a:	b2db      	uxtb	r3, r3
 800db2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db30:	e027      	b.n	800db82 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800db32:	2300      	movs	r3, #0
 800db34:	637b      	str	r3, [r7, #52]	; 0x34
 800db36:	e01b      	b.n	800db70 <AES_CMAC_Final+0x1d0>
 800db38:	f107 021c 	add.w	r2, r7, #28
 800db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3e:	4413      	add	r3, r2
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	005b      	lsls	r3, r3, #1
 800db44:	b25a      	sxtb	r2, r3
 800db46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db48:	3301      	adds	r3, #1
 800db4a:	3348      	adds	r3, #72	; 0x48
 800db4c:	443b      	add	r3, r7
 800db4e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800db52:	09db      	lsrs	r3, r3, #7
 800db54:	b2db      	uxtb	r3, r3
 800db56:	b25b      	sxtb	r3, r3
 800db58:	4313      	orrs	r3, r2
 800db5a:	b25b      	sxtb	r3, r3
 800db5c:	b2d9      	uxtb	r1, r3
 800db5e:	f107 021c 	add.w	r2, r7, #28
 800db62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db64:	4413      	add	r3, r2
 800db66:	460a      	mov	r2, r1
 800db68:	701a      	strb	r2, [r3, #0]
 800db6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6c:	3301      	adds	r3, #1
 800db6e:	637b      	str	r3, [r7, #52]	; 0x34
 800db70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db72:	2b0e      	cmp	r3, #14
 800db74:	dde0      	ble.n	800db38 <AES_CMAC_Final+0x198>
 800db76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db7a:	005b      	lsls	r3, r3, #1
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db88:	683a      	ldr	r2, [r7, #0]
 800db8a:	4413      	add	r3, r2
 800db8c:	2280      	movs	r2, #128	; 0x80
 800db8e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800db92:	e007      	b.n	800dba4 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db9a:	683a      	ldr	r2, [r7, #0]
 800db9c:	4413      	add	r3, r2
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dbaa:	1c5a      	adds	r2, r3, #1
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dbb8:	2b0f      	cmp	r3, #15
 800dbba:	d9eb      	bls.n	800db94 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	633b      	str	r3, [r7, #48]	; 0x30
 800dbc0:	e016      	b.n	800dbf0 <AES_CMAC_Final+0x250>
 800dbc2:	683a      	ldr	r2, [r7, #0]
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	4413      	add	r3, r2
 800dbc8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dbcc:	781a      	ldrb	r2, [r3, #0]
 800dbce:	f107 011c 	add.w	r1, r7, #28
 800dbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd4:	440b      	add	r3, r1
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	4053      	eors	r3, r2
 800dbda:	b2d9      	uxtb	r1, r3
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dbe6:	460a      	mov	r2, r1
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	3301      	adds	r3, #1
 800dbee:	633b      	str	r3, [r7, #48]	; 0x30
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf2:	2b0f      	cmp	r3, #15
 800dbf4:	dde5      	ble.n	800dbc2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbfa:	e015      	b.n	800dc28 <AES_CMAC_Final+0x288>
 800dbfc:	683a      	ldr	r2, [r7, #0]
 800dbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc00:	4413      	add	r3, r2
 800dc02:	33f1      	adds	r3, #241	; 0xf1
 800dc04:	781a      	ldrb	r2, [r3, #0]
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0a:	440b      	add	r3, r1
 800dc0c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	4053      	eors	r3, r2
 800dc14:	b2d9      	uxtb	r1, r3
 800dc16:	683a      	ldr	r2, [r7, #0]
 800dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1a:	4413      	add	r3, r2
 800dc1c:	33f1      	adds	r3, #241	; 0xf1
 800dc1e:	460a      	mov	r2, r1
 800dc20:	701a      	strb	r2, [r3, #0]
 800dc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc24:	3301      	adds	r3, #1
 800dc26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc2a:	2b0f      	cmp	r3, #15
 800dc2c:	dde6      	ble.n	800dbfc <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dc34:	f107 030c 	add.w	r3, r7, #12
 800dc38:	2210      	movs	r2, #16
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f00d fdbd 	bl	801b7ba <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	f107 030c 	add.w	r3, r7, #12
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f000 fd1d 	bl	800e688 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800dc4e:	f107 031c 	add.w	r3, r7, #28
 800dc52:	2210      	movs	r2, #16
 800dc54:	2100      	movs	r1, #0
 800dc56:	4618      	mov	r0, r3
 800dc58:	f00d fdea 	bl	801b830 <memset1>
}
 800dc5c:	bf00      	nop
 800dc5e:	3748      	adds	r7, #72	; 0x48
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	781a      	ldrb	r2, [r3, #0]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	7852      	ldrb	r2, [r2, #1]
 800dc7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	3302      	adds	r3, #2
 800dc84:	683a      	ldr	r2, [r7, #0]
 800dc86:	7892      	ldrb	r2, [r2, #2]
 800dc88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	3303      	adds	r3, #3
 800dc8e:	683a      	ldr	r2, [r7, #0]
 800dc90:	78d2      	ldrb	r2, [r2, #3]
 800dc92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	3304      	adds	r3, #4
 800dc98:	683a      	ldr	r2, [r7, #0]
 800dc9a:	7912      	ldrb	r2, [r2, #4]
 800dc9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	3305      	adds	r3, #5
 800dca2:	683a      	ldr	r2, [r7, #0]
 800dca4:	7952      	ldrb	r2, [r2, #5]
 800dca6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	3306      	adds	r3, #6
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	7992      	ldrb	r2, [r2, #6]
 800dcb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	3307      	adds	r3, #7
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	79d2      	ldrb	r2, [r2, #7]
 800dcba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	7a12      	ldrb	r2, [r2, #8]
 800dcc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	3309      	adds	r3, #9
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	7a52      	ldrb	r2, [r2, #9]
 800dcce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	330a      	adds	r3, #10
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	7a92      	ldrb	r2, [r2, #10]
 800dcd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	330b      	adds	r3, #11
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	7ad2      	ldrb	r2, [r2, #11]
 800dce2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	330c      	adds	r3, #12
 800dce8:	683a      	ldr	r2, [r7, #0]
 800dcea:	7b12      	ldrb	r2, [r2, #12]
 800dcec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	330d      	adds	r3, #13
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	7b52      	ldrb	r2, [r2, #13]
 800dcf6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	330e      	adds	r3, #14
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	7b92      	ldrb	r2, [r2, #14]
 800dd00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	330f      	adds	r3, #15
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	7bd2      	ldrb	r2, [r2, #15]
 800dd0a:	701a      	strb	r2, [r3, #0]
#endif
}
 800dd0c:	bf00      	nop
 800dd0e:	370c      	adds	r7, #12
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bc80      	pop	{r7}
 800dd14:	4770      	bx	lr

0800dd16 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800dd16:	b480      	push	{r7}
 800dd18:	b085      	sub	sp, #20
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	60f8      	str	r0, [r7, #12]
 800dd1e:	60b9      	str	r1, [r7, #8]
 800dd20:	4613      	mov	r3, r2
 800dd22:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800dd24:	e007      	b.n	800dd36 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800dd26:	68ba      	ldr	r2, [r7, #8]
 800dd28:	1c53      	adds	r3, r2, #1
 800dd2a:	60bb      	str	r3, [r7, #8]
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	1c59      	adds	r1, r3, #1
 800dd30:	60f9      	str	r1, [r7, #12]
 800dd32:	7812      	ldrb	r2, [r2, #0]
 800dd34:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	1e5a      	subs	r2, r3, #1
 800dd3a:	71fa      	strb	r2, [r7, #7]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1f2      	bne.n	800dd26 <copy_block_nn+0x10>
}
 800dd40:	bf00      	nop
 800dd42:	bf00      	nop
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bc80      	pop	{r7}
 800dd4a:	4770      	bx	lr

0800dd4c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	781a      	ldrb	r2, [r3, #0]
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	4053      	eors	r3, r2
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	3301      	adds	r3, #1
 800dd6a:	7819      	ldrb	r1, [r3, #0]
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	781a      	ldrb	r2, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	3301      	adds	r3, #1
 800dd76:	404a      	eors	r2, r1
 800dd78:	b2d2      	uxtb	r2, r2
 800dd7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3302      	adds	r3, #2
 800dd80:	7819      	ldrb	r1, [r3, #0]
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	3302      	adds	r3, #2
 800dd86:	781a      	ldrb	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	3302      	adds	r3, #2
 800dd8c:	404a      	eors	r2, r1
 800dd8e:	b2d2      	uxtb	r2, r2
 800dd90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	3303      	adds	r3, #3
 800dd96:	7819      	ldrb	r1, [r3, #0]
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	3303      	adds	r3, #3
 800dd9c:	781a      	ldrb	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	3303      	adds	r3, #3
 800dda2:	404a      	eors	r2, r1
 800dda4:	b2d2      	uxtb	r2, r2
 800dda6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	3304      	adds	r3, #4
 800ddac:	7819      	ldrb	r1, [r3, #0]
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	3304      	adds	r3, #4
 800ddb2:	781a      	ldrb	r2, [r3, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3304      	adds	r3, #4
 800ddb8:	404a      	eors	r2, r1
 800ddba:	b2d2      	uxtb	r2, r2
 800ddbc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3305      	adds	r3, #5
 800ddc2:	7819      	ldrb	r1, [r3, #0]
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	3305      	adds	r3, #5
 800ddc8:	781a      	ldrb	r2, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	3305      	adds	r3, #5
 800ddce:	404a      	eors	r2, r1
 800ddd0:	b2d2      	uxtb	r2, r2
 800ddd2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	3306      	adds	r3, #6
 800ddd8:	7819      	ldrb	r1, [r3, #0]
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	3306      	adds	r3, #6
 800ddde:	781a      	ldrb	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3306      	adds	r3, #6
 800dde4:	404a      	eors	r2, r1
 800dde6:	b2d2      	uxtb	r2, r2
 800dde8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	3307      	adds	r3, #7
 800ddee:	7819      	ldrb	r1, [r3, #0]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	3307      	adds	r3, #7
 800ddf4:	781a      	ldrb	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	3307      	adds	r3, #7
 800ddfa:	404a      	eors	r2, r1
 800ddfc:	b2d2      	uxtb	r2, r2
 800ddfe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3308      	adds	r3, #8
 800de04:	7819      	ldrb	r1, [r3, #0]
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	3308      	adds	r3, #8
 800de0a:	781a      	ldrb	r2, [r3, #0]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	3308      	adds	r3, #8
 800de10:	404a      	eors	r2, r1
 800de12:	b2d2      	uxtb	r2, r2
 800de14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	3309      	adds	r3, #9
 800de1a:	7819      	ldrb	r1, [r3, #0]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	3309      	adds	r3, #9
 800de20:	781a      	ldrb	r2, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	3309      	adds	r3, #9
 800de26:	404a      	eors	r2, r1
 800de28:	b2d2      	uxtb	r2, r2
 800de2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	330a      	adds	r3, #10
 800de30:	7819      	ldrb	r1, [r3, #0]
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	330a      	adds	r3, #10
 800de36:	781a      	ldrb	r2, [r3, #0]
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	330a      	adds	r3, #10
 800de3c:	404a      	eors	r2, r1
 800de3e:	b2d2      	uxtb	r2, r2
 800de40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	330b      	adds	r3, #11
 800de46:	7819      	ldrb	r1, [r3, #0]
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	330b      	adds	r3, #11
 800de4c:	781a      	ldrb	r2, [r3, #0]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	330b      	adds	r3, #11
 800de52:	404a      	eors	r2, r1
 800de54:	b2d2      	uxtb	r2, r2
 800de56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	330c      	adds	r3, #12
 800de5c:	7819      	ldrb	r1, [r3, #0]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	330c      	adds	r3, #12
 800de62:	781a      	ldrb	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	330c      	adds	r3, #12
 800de68:	404a      	eors	r2, r1
 800de6a:	b2d2      	uxtb	r2, r2
 800de6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	330d      	adds	r3, #13
 800de72:	7819      	ldrb	r1, [r3, #0]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	330d      	adds	r3, #13
 800de78:	781a      	ldrb	r2, [r3, #0]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	330d      	adds	r3, #13
 800de7e:	404a      	eors	r2, r1
 800de80:	b2d2      	uxtb	r2, r2
 800de82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	330e      	adds	r3, #14
 800de88:	7819      	ldrb	r1, [r3, #0]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	330e      	adds	r3, #14
 800de8e:	781a      	ldrb	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	330e      	adds	r3, #14
 800de94:	404a      	eors	r2, r1
 800de96:	b2d2      	uxtb	r2, r2
 800de98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	330f      	adds	r3, #15
 800de9e:	7819      	ldrb	r1, [r3, #0]
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	330f      	adds	r3, #15
 800dea4:	781a      	ldrb	r2, [r3, #0]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	330f      	adds	r3, #15
 800deaa:	404a      	eors	r2, r1
 800deac:	b2d2      	uxtb	r2, r2
 800deae:	701a      	strb	r2, [r3, #0]
#endif
}
 800deb0:	bf00      	nop
 800deb2:	370c      	adds	r7, #12
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bc80      	pop	{r7}
 800deb8:	4770      	bx	lr

0800deba <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800deba:	b480      	push	{r7}
 800debc:	b085      	sub	sp, #20
 800debe:	af00      	add	r7, sp, #0
 800dec0:	60f8      	str	r0, [r7, #12]
 800dec2:	60b9      	str	r1, [r7, #8]
 800dec4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	781a      	ldrb	r2, [r3, #0]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	4053      	eors	r3, r2
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	3301      	adds	r3, #1
 800deda:	7819      	ldrb	r1, [r3, #0]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	3301      	adds	r3, #1
 800dee0:	781a      	ldrb	r2, [r3, #0]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	3301      	adds	r3, #1
 800dee6:	404a      	eors	r2, r1
 800dee8:	b2d2      	uxtb	r2, r2
 800deea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	3302      	adds	r3, #2
 800def0:	7819      	ldrb	r1, [r3, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3302      	adds	r3, #2
 800def6:	781a      	ldrb	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	3302      	adds	r3, #2
 800defc:	404a      	eors	r2, r1
 800defe:	b2d2      	uxtb	r2, r2
 800df00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	3303      	adds	r3, #3
 800df06:	7819      	ldrb	r1, [r3, #0]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	3303      	adds	r3, #3
 800df0c:	781a      	ldrb	r2, [r3, #0]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	3303      	adds	r3, #3
 800df12:	404a      	eors	r2, r1
 800df14:	b2d2      	uxtb	r2, r2
 800df16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	3304      	adds	r3, #4
 800df1c:	7819      	ldrb	r1, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	3304      	adds	r3, #4
 800df22:	781a      	ldrb	r2, [r3, #0]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3304      	adds	r3, #4
 800df28:	404a      	eors	r2, r1
 800df2a:	b2d2      	uxtb	r2, r2
 800df2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	3305      	adds	r3, #5
 800df32:	7819      	ldrb	r1, [r3, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	3305      	adds	r3, #5
 800df38:	781a      	ldrb	r2, [r3, #0]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	3305      	adds	r3, #5
 800df3e:	404a      	eors	r2, r1
 800df40:	b2d2      	uxtb	r2, r2
 800df42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	3306      	adds	r3, #6
 800df48:	7819      	ldrb	r1, [r3, #0]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3306      	adds	r3, #6
 800df4e:	781a      	ldrb	r2, [r3, #0]
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	3306      	adds	r3, #6
 800df54:	404a      	eors	r2, r1
 800df56:	b2d2      	uxtb	r2, r2
 800df58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	3307      	adds	r3, #7
 800df5e:	7819      	ldrb	r1, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	3307      	adds	r3, #7
 800df64:	781a      	ldrb	r2, [r3, #0]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	3307      	adds	r3, #7
 800df6a:	404a      	eors	r2, r1
 800df6c:	b2d2      	uxtb	r2, r2
 800df6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	3308      	adds	r3, #8
 800df74:	7819      	ldrb	r1, [r3, #0]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	3308      	adds	r3, #8
 800df7a:	781a      	ldrb	r2, [r3, #0]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3308      	adds	r3, #8
 800df80:	404a      	eors	r2, r1
 800df82:	b2d2      	uxtb	r2, r2
 800df84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	3309      	adds	r3, #9
 800df8a:	7819      	ldrb	r1, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3309      	adds	r3, #9
 800df90:	781a      	ldrb	r2, [r3, #0]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	3309      	adds	r3, #9
 800df96:	404a      	eors	r2, r1
 800df98:	b2d2      	uxtb	r2, r2
 800df9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	330a      	adds	r3, #10
 800dfa0:	7819      	ldrb	r1, [r3, #0]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	330a      	adds	r3, #10
 800dfa6:	781a      	ldrb	r2, [r3, #0]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	330a      	adds	r3, #10
 800dfac:	404a      	eors	r2, r1
 800dfae:	b2d2      	uxtb	r2, r2
 800dfb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	330b      	adds	r3, #11
 800dfb6:	7819      	ldrb	r1, [r3, #0]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	330b      	adds	r3, #11
 800dfbc:	781a      	ldrb	r2, [r3, #0]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	330b      	adds	r3, #11
 800dfc2:	404a      	eors	r2, r1
 800dfc4:	b2d2      	uxtb	r2, r2
 800dfc6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	330c      	adds	r3, #12
 800dfcc:	7819      	ldrb	r1, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	330c      	adds	r3, #12
 800dfd2:	781a      	ldrb	r2, [r3, #0]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	330c      	adds	r3, #12
 800dfd8:	404a      	eors	r2, r1
 800dfda:	b2d2      	uxtb	r2, r2
 800dfdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	330d      	adds	r3, #13
 800dfe2:	7819      	ldrb	r1, [r3, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	330d      	adds	r3, #13
 800dfe8:	781a      	ldrb	r2, [r3, #0]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	330d      	adds	r3, #13
 800dfee:	404a      	eors	r2, r1
 800dff0:	b2d2      	uxtb	r2, r2
 800dff2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	330e      	adds	r3, #14
 800dff8:	7819      	ldrb	r1, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	330e      	adds	r3, #14
 800dffe:	781a      	ldrb	r2, [r3, #0]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	330e      	adds	r3, #14
 800e004:	404a      	eors	r2, r1
 800e006:	b2d2      	uxtb	r2, r2
 800e008:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	330f      	adds	r3, #15
 800e00e:	7819      	ldrb	r1, [r3, #0]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	330f      	adds	r3, #15
 800e014:	781a      	ldrb	r2, [r3, #0]
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	330f      	adds	r3, #15
 800e01a:	404a      	eors	r2, r1
 800e01c:	b2d2      	uxtb	r2, r2
 800e01e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e020:	bf00      	nop
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	bc80      	pop	{r7}
 800e028:	4770      	bx	lr

0800e02a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e02a:	b580      	push	{r7, lr}
 800e02c:	b082      	sub	sp, #8
 800e02e:	af00      	add	r7, sp, #0
 800e030:	6078      	str	r0, [r7, #4]
 800e032:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e034:	6839      	ldr	r1, [r7, #0]
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff fe88 	bl	800dd4c <xor_block>
}
 800e03c:	bf00      	nop
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e044:	b480      	push	{r7}
 800e046:	b085      	sub	sp, #20
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	461a      	mov	r2, r3
 800e052:	4b48      	ldr	r3, [pc, #288]	; (800e174 <shift_sub_rows+0x130>)
 800e054:	5c9a      	ldrb	r2, [r3, r2]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	701a      	strb	r2, [r3, #0]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	3304      	adds	r3, #4
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	4619      	mov	r1, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	3304      	adds	r3, #4
 800e066:	4a43      	ldr	r2, [pc, #268]	; (800e174 <shift_sub_rows+0x130>)
 800e068:	5c52      	ldrb	r2, [r2, r1]
 800e06a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3308      	adds	r3, #8
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	4619      	mov	r1, r3
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3308      	adds	r3, #8
 800e078:	4a3e      	ldr	r2, [pc, #248]	; (800e174 <shift_sub_rows+0x130>)
 800e07a:	5c52      	ldrb	r2, [r2, r1]
 800e07c:	701a      	strb	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	330c      	adds	r3, #12
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	4619      	mov	r1, r3
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	330c      	adds	r3, #12
 800e08a:	4a3a      	ldr	r2, [pc, #232]	; (800e174 <shift_sub_rows+0x130>)
 800e08c:	5c52      	ldrb	r2, [r2, r1]
 800e08e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	785b      	ldrb	r3, [r3, #1]
 800e094:	73fb      	strb	r3, [r7, #15]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	3305      	adds	r3, #5
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	4619      	mov	r1, r3
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	4a34      	ldr	r2, [pc, #208]	; (800e174 <shift_sub_rows+0x130>)
 800e0a4:	5c52      	ldrb	r2, [r2, r1]
 800e0a6:	701a      	strb	r2, [r3, #0]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	3309      	adds	r3, #9
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	4619      	mov	r1, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	3305      	adds	r3, #5
 800e0b4:	4a2f      	ldr	r2, [pc, #188]	; (800e174 <shift_sub_rows+0x130>)
 800e0b6:	5c52      	ldrb	r2, [r2, r1]
 800e0b8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	330d      	adds	r3, #13
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	3309      	adds	r3, #9
 800e0c6:	4a2b      	ldr	r2, [pc, #172]	; (800e174 <shift_sub_rows+0x130>)
 800e0c8:	5c52      	ldrb	r2, [r2, r1]
 800e0ca:	701a      	strb	r2, [r3, #0]
 800e0cc:	7bfa      	ldrb	r2, [r7, #15]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	330d      	adds	r3, #13
 800e0d2:	4928      	ldr	r1, [pc, #160]	; (800e174 <shift_sub_rows+0x130>)
 800e0d4:	5c8a      	ldrb	r2, [r1, r2]
 800e0d6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	789b      	ldrb	r3, [r3, #2]
 800e0dc:	73fb      	strb	r3, [r7, #15]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	330a      	adds	r3, #10
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3302      	adds	r3, #2
 800e0ea:	4a22      	ldr	r2, [pc, #136]	; (800e174 <shift_sub_rows+0x130>)
 800e0ec:	5c52      	ldrb	r2, [r2, r1]
 800e0ee:	701a      	strb	r2, [r3, #0]
 800e0f0:	7bfa      	ldrb	r2, [r7, #15]
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	330a      	adds	r3, #10
 800e0f6:	491f      	ldr	r1, [pc, #124]	; (800e174 <shift_sub_rows+0x130>)
 800e0f8:	5c8a      	ldrb	r2, [r1, r2]
 800e0fa:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	799b      	ldrb	r3, [r3, #6]
 800e100:	73fb      	strb	r3, [r7, #15]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	330e      	adds	r3, #14
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	4619      	mov	r1, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	3306      	adds	r3, #6
 800e10e:	4a19      	ldr	r2, [pc, #100]	; (800e174 <shift_sub_rows+0x130>)
 800e110:	5c52      	ldrb	r2, [r2, r1]
 800e112:	701a      	strb	r2, [r3, #0]
 800e114:	7bfa      	ldrb	r2, [r7, #15]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	330e      	adds	r3, #14
 800e11a:	4916      	ldr	r1, [pc, #88]	; (800e174 <shift_sub_rows+0x130>)
 800e11c:	5c8a      	ldrb	r2, [r1, r2]
 800e11e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	7bdb      	ldrb	r3, [r3, #15]
 800e124:	73fb      	strb	r3, [r7, #15]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	330b      	adds	r3, #11
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	4619      	mov	r1, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	330f      	adds	r3, #15
 800e132:	4a10      	ldr	r2, [pc, #64]	; (800e174 <shift_sub_rows+0x130>)
 800e134:	5c52      	ldrb	r2, [r2, r1]
 800e136:	701a      	strb	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	3307      	adds	r3, #7
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	4619      	mov	r1, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	330b      	adds	r3, #11
 800e144:	4a0b      	ldr	r2, [pc, #44]	; (800e174 <shift_sub_rows+0x130>)
 800e146:	5c52      	ldrb	r2, [r2, r1]
 800e148:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	3303      	adds	r3, #3
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	4619      	mov	r1, r3
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	3307      	adds	r3, #7
 800e156:	4a07      	ldr	r2, [pc, #28]	; (800e174 <shift_sub_rows+0x130>)
 800e158:	5c52      	ldrb	r2, [r2, r1]
 800e15a:	701a      	strb	r2, [r3, #0]
 800e15c:	7bfa      	ldrb	r2, [r7, #15]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	3303      	adds	r3, #3
 800e162:	4904      	ldr	r1, [pc, #16]	; (800e174 <shift_sub_rows+0x130>)
 800e164:	5c8a      	ldrb	r2, [r1, r2]
 800e166:	701a      	strb	r2, [r3, #0]
}
 800e168:	bf00      	nop
 800e16a:	3714      	adds	r7, #20
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bc80      	pop	{r7}
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	08021b64 	.word	0x08021b64

0800e178 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e180:	f107 0308 	add.w	r3, r7, #8
 800e184:	6879      	ldr	r1, [r7, #4]
 800e186:	4618      	mov	r0, r3
 800e188:	f7ff fd6c 	bl	800dc64 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e18c:	7a3b      	ldrb	r3, [r7, #8]
 800e18e:	461a      	mov	r2, r3
 800e190:	4b9a      	ldr	r3, [pc, #616]	; (800e3fc <mix_sub_columns+0x284>)
 800e192:	5c9a      	ldrb	r2, [r3, r2]
 800e194:	7b7b      	ldrb	r3, [r7, #13]
 800e196:	4619      	mov	r1, r3
 800e198:	4b99      	ldr	r3, [pc, #612]	; (800e400 <mix_sub_columns+0x288>)
 800e19a:	5c5b      	ldrb	r3, [r3, r1]
 800e19c:	4053      	eors	r3, r2
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	7cbb      	ldrb	r3, [r7, #18]
 800e1a2:	4619      	mov	r1, r3
 800e1a4:	4b97      	ldr	r3, [pc, #604]	; (800e404 <mix_sub_columns+0x28c>)
 800e1a6:	5c5b      	ldrb	r3, [r3, r1]
 800e1a8:	4053      	eors	r3, r2
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	7dfb      	ldrb	r3, [r7, #23]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4b94      	ldr	r3, [pc, #592]	; (800e404 <mix_sub_columns+0x28c>)
 800e1b2:	5c5b      	ldrb	r3, [r3, r1]
 800e1b4:	4053      	eors	r3, r2
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e1bc:	7a3b      	ldrb	r3, [r7, #8]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	4b90      	ldr	r3, [pc, #576]	; (800e404 <mix_sub_columns+0x28c>)
 800e1c2:	5c9a      	ldrb	r2, [r3, r2]
 800e1c4:	7b7b      	ldrb	r3, [r7, #13]
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	4b8c      	ldr	r3, [pc, #560]	; (800e3fc <mix_sub_columns+0x284>)
 800e1ca:	5c5b      	ldrb	r3, [r3, r1]
 800e1cc:	4053      	eors	r3, r2
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	7cbb      	ldrb	r3, [r7, #18]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4b8a      	ldr	r3, [pc, #552]	; (800e400 <mix_sub_columns+0x288>)
 800e1d6:	5c5b      	ldrb	r3, [r3, r1]
 800e1d8:	4053      	eors	r3, r2
 800e1da:	b2d9      	uxtb	r1, r3
 800e1dc:	7dfb      	ldrb	r3, [r7, #23]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4b88      	ldr	r3, [pc, #544]	; (800e404 <mix_sub_columns+0x28c>)
 800e1e2:	5c9a      	ldrb	r2, [r3, r2]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	404a      	eors	r2, r1
 800e1ea:	b2d2      	uxtb	r2, r2
 800e1ec:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e1ee:	7a3b      	ldrb	r3, [r7, #8]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	4b84      	ldr	r3, [pc, #528]	; (800e404 <mix_sub_columns+0x28c>)
 800e1f4:	5c9a      	ldrb	r2, [r3, r2]
 800e1f6:	7b7b      	ldrb	r3, [r7, #13]
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4b82      	ldr	r3, [pc, #520]	; (800e404 <mix_sub_columns+0x28c>)
 800e1fc:	5c5b      	ldrb	r3, [r3, r1]
 800e1fe:	4053      	eors	r3, r2
 800e200:	b2da      	uxtb	r2, r3
 800e202:	7cbb      	ldrb	r3, [r7, #18]
 800e204:	4619      	mov	r1, r3
 800e206:	4b7d      	ldr	r3, [pc, #500]	; (800e3fc <mix_sub_columns+0x284>)
 800e208:	5c5b      	ldrb	r3, [r3, r1]
 800e20a:	4053      	eors	r3, r2
 800e20c:	b2d9      	uxtb	r1, r3
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
 800e210:	461a      	mov	r2, r3
 800e212:	4b7b      	ldr	r3, [pc, #492]	; (800e400 <mix_sub_columns+0x288>)
 800e214:	5c9a      	ldrb	r2, [r3, r2]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	3302      	adds	r3, #2
 800e21a:	404a      	eors	r2, r1
 800e21c:	b2d2      	uxtb	r2, r2
 800e21e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e220:	7a3b      	ldrb	r3, [r7, #8]
 800e222:	461a      	mov	r2, r3
 800e224:	4b76      	ldr	r3, [pc, #472]	; (800e400 <mix_sub_columns+0x288>)
 800e226:	5c9a      	ldrb	r2, [r3, r2]
 800e228:	7b7b      	ldrb	r3, [r7, #13]
 800e22a:	4619      	mov	r1, r3
 800e22c:	4b75      	ldr	r3, [pc, #468]	; (800e404 <mix_sub_columns+0x28c>)
 800e22e:	5c5b      	ldrb	r3, [r3, r1]
 800e230:	4053      	eors	r3, r2
 800e232:	b2da      	uxtb	r2, r3
 800e234:	7cbb      	ldrb	r3, [r7, #18]
 800e236:	4619      	mov	r1, r3
 800e238:	4b72      	ldr	r3, [pc, #456]	; (800e404 <mix_sub_columns+0x28c>)
 800e23a:	5c5b      	ldrb	r3, [r3, r1]
 800e23c:	4053      	eors	r3, r2
 800e23e:	b2d9      	uxtb	r1, r3
 800e240:	7dfb      	ldrb	r3, [r7, #23]
 800e242:	461a      	mov	r2, r3
 800e244:	4b6d      	ldr	r3, [pc, #436]	; (800e3fc <mix_sub_columns+0x284>)
 800e246:	5c9a      	ldrb	r2, [r3, r2]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	3303      	adds	r3, #3
 800e24c:	404a      	eors	r2, r1
 800e24e:	b2d2      	uxtb	r2, r2
 800e250:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e252:	7b3b      	ldrb	r3, [r7, #12]
 800e254:	461a      	mov	r2, r3
 800e256:	4b69      	ldr	r3, [pc, #420]	; (800e3fc <mix_sub_columns+0x284>)
 800e258:	5c9a      	ldrb	r2, [r3, r2]
 800e25a:	7c7b      	ldrb	r3, [r7, #17]
 800e25c:	4619      	mov	r1, r3
 800e25e:	4b68      	ldr	r3, [pc, #416]	; (800e400 <mix_sub_columns+0x288>)
 800e260:	5c5b      	ldrb	r3, [r3, r1]
 800e262:	4053      	eors	r3, r2
 800e264:	b2da      	uxtb	r2, r3
 800e266:	7dbb      	ldrb	r3, [r7, #22]
 800e268:	4619      	mov	r1, r3
 800e26a:	4b66      	ldr	r3, [pc, #408]	; (800e404 <mix_sub_columns+0x28c>)
 800e26c:	5c5b      	ldrb	r3, [r3, r1]
 800e26e:	4053      	eors	r3, r2
 800e270:	b2d9      	uxtb	r1, r3
 800e272:	7afb      	ldrb	r3, [r7, #11]
 800e274:	461a      	mov	r2, r3
 800e276:	4b63      	ldr	r3, [pc, #396]	; (800e404 <mix_sub_columns+0x28c>)
 800e278:	5c9a      	ldrb	r2, [r3, r2]
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	3304      	adds	r3, #4
 800e27e:	404a      	eors	r2, r1
 800e280:	b2d2      	uxtb	r2, r2
 800e282:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e284:	7b3b      	ldrb	r3, [r7, #12]
 800e286:	461a      	mov	r2, r3
 800e288:	4b5e      	ldr	r3, [pc, #376]	; (800e404 <mix_sub_columns+0x28c>)
 800e28a:	5c9a      	ldrb	r2, [r3, r2]
 800e28c:	7c7b      	ldrb	r3, [r7, #17]
 800e28e:	4619      	mov	r1, r3
 800e290:	4b5a      	ldr	r3, [pc, #360]	; (800e3fc <mix_sub_columns+0x284>)
 800e292:	5c5b      	ldrb	r3, [r3, r1]
 800e294:	4053      	eors	r3, r2
 800e296:	b2da      	uxtb	r2, r3
 800e298:	7dbb      	ldrb	r3, [r7, #22]
 800e29a:	4619      	mov	r1, r3
 800e29c:	4b58      	ldr	r3, [pc, #352]	; (800e400 <mix_sub_columns+0x288>)
 800e29e:	5c5b      	ldrb	r3, [r3, r1]
 800e2a0:	4053      	eors	r3, r2
 800e2a2:	b2d9      	uxtb	r1, r3
 800e2a4:	7afb      	ldrb	r3, [r7, #11]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	4b56      	ldr	r3, [pc, #344]	; (800e404 <mix_sub_columns+0x28c>)
 800e2aa:	5c9a      	ldrb	r2, [r3, r2]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3305      	adds	r3, #5
 800e2b0:	404a      	eors	r2, r1
 800e2b2:	b2d2      	uxtb	r2, r2
 800e2b4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e2b6:	7b3b      	ldrb	r3, [r7, #12]
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	4b52      	ldr	r3, [pc, #328]	; (800e404 <mix_sub_columns+0x28c>)
 800e2bc:	5c9a      	ldrb	r2, [r3, r2]
 800e2be:	7c7b      	ldrb	r3, [r7, #17]
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	4b50      	ldr	r3, [pc, #320]	; (800e404 <mix_sub_columns+0x28c>)
 800e2c4:	5c5b      	ldrb	r3, [r3, r1]
 800e2c6:	4053      	eors	r3, r2
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	7dbb      	ldrb	r3, [r7, #22]
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	4b4b      	ldr	r3, [pc, #300]	; (800e3fc <mix_sub_columns+0x284>)
 800e2d0:	5c5b      	ldrb	r3, [r3, r1]
 800e2d2:	4053      	eors	r3, r2
 800e2d4:	b2d9      	uxtb	r1, r3
 800e2d6:	7afb      	ldrb	r3, [r7, #11]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4b49      	ldr	r3, [pc, #292]	; (800e400 <mix_sub_columns+0x288>)
 800e2dc:	5c9a      	ldrb	r2, [r3, r2]
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	3306      	adds	r3, #6
 800e2e2:	404a      	eors	r2, r1
 800e2e4:	b2d2      	uxtb	r2, r2
 800e2e6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e2e8:	7b3b      	ldrb	r3, [r7, #12]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	4b44      	ldr	r3, [pc, #272]	; (800e400 <mix_sub_columns+0x288>)
 800e2ee:	5c9a      	ldrb	r2, [r3, r2]
 800e2f0:	7c7b      	ldrb	r3, [r7, #17]
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	4b43      	ldr	r3, [pc, #268]	; (800e404 <mix_sub_columns+0x28c>)
 800e2f6:	5c5b      	ldrb	r3, [r3, r1]
 800e2f8:	4053      	eors	r3, r2
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	7dbb      	ldrb	r3, [r7, #22]
 800e2fe:	4619      	mov	r1, r3
 800e300:	4b40      	ldr	r3, [pc, #256]	; (800e404 <mix_sub_columns+0x28c>)
 800e302:	5c5b      	ldrb	r3, [r3, r1]
 800e304:	4053      	eors	r3, r2
 800e306:	b2d9      	uxtb	r1, r3
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	461a      	mov	r2, r3
 800e30c:	4b3b      	ldr	r3, [pc, #236]	; (800e3fc <mix_sub_columns+0x284>)
 800e30e:	5c9a      	ldrb	r2, [r3, r2]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3307      	adds	r3, #7
 800e314:	404a      	eors	r2, r1
 800e316:	b2d2      	uxtb	r2, r2
 800e318:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e31a:	7c3b      	ldrb	r3, [r7, #16]
 800e31c:	461a      	mov	r2, r3
 800e31e:	4b37      	ldr	r3, [pc, #220]	; (800e3fc <mix_sub_columns+0x284>)
 800e320:	5c9a      	ldrb	r2, [r3, r2]
 800e322:	7d7b      	ldrb	r3, [r7, #21]
 800e324:	4619      	mov	r1, r3
 800e326:	4b36      	ldr	r3, [pc, #216]	; (800e400 <mix_sub_columns+0x288>)
 800e328:	5c5b      	ldrb	r3, [r3, r1]
 800e32a:	4053      	eors	r3, r2
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	7abb      	ldrb	r3, [r7, #10]
 800e330:	4619      	mov	r1, r3
 800e332:	4b34      	ldr	r3, [pc, #208]	; (800e404 <mix_sub_columns+0x28c>)
 800e334:	5c5b      	ldrb	r3, [r3, r1]
 800e336:	4053      	eors	r3, r2
 800e338:	b2d9      	uxtb	r1, r3
 800e33a:	7bfb      	ldrb	r3, [r7, #15]
 800e33c:	461a      	mov	r2, r3
 800e33e:	4b31      	ldr	r3, [pc, #196]	; (800e404 <mix_sub_columns+0x28c>)
 800e340:	5c9a      	ldrb	r2, [r3, r2]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	3308      	adds	r3, #8
 800e346:	404a      	eors	r2, r1
 800e348:	b2d2      	uxtb	r2, r2
 800e34a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e34c:	7c3b      	ldrb	r3, [r7, #16]
 800e34e:	461a      	mov	r2, r3
 800e350:	4b2c      	ldr	r3, [pc, #176]	; (800e404 <mix_sub_columns+0x28c>)
 800e352:	5c9a      	ldrb	r2, [r3, r2]
 800e354:	7d7b      	ldrb	r3, [r7, #21]
 800e356:	4619      	mov	r1, r3
 800e358:	4b28      	ldr	r3, [pc, #160]	; (800e3fc <mix_sub_columns+0x284>)
 800e35a:	5c5b      	ldrb	r3, [r3, r1]
 800e35c:	4053      	eors	r3, r2
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	7abb      	ldrb	r3, [r7, #10]
 800e362:	4619      	mov	r1, r3
 800e364:	4b26      	ldr	r3, [pc, #152]	; (800e400 <mix_sub_columns+0x288>)
 800e366:	5c5b      	ldrb	r3, [r3, r1]
 800e368:	4053      	eors	r3, r2
 800e36a:	b2d9      	uxtb	r1, r3
 800e36c:	7bfb      	ldrb	r3, [r7, #15]
 800e36e:	461a      	mov	r2, r3
 800e370:	4b24      	ldr	r3, [pc, #144]	; (800e404 <mix_sub_columns+0x28c>)
 800e372:	5c9a      	ldrb	r2, [r3, r2]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	3309      	adds	r3, #9
 800e378:	404a      	eors	r2, r1
 800e37a:	b2d2      	uxtb	r2, r2
 800e37c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e37e:	7c3b      	ldrb	r3, [r7, #16]
 800e380:	461a      	mov	r2, r3
 800e382:	4b20      	ldr	r3, [pc, #128]	; (800e404 <mix_sub_columns+0x28c>)
 800e384:	5c9a      	ldrb	r2, [r3, r2]
 800e386:	7d7b      	ldrb	r3, [r7, #21]
 800e388:	4619      	mov	r1, r3
 800e38a:	4b1e      	ldr	r3, [pc, #120]	; (800e404 <mix_sub_columns+0x28c>)
 800e38c:	5c5b      	ldrb	r3, [r3, r1]
 800e38e:	4053      	eors	r3, r2
 800e390:	b2da      	uxtb	r2, r3
 800e392:	7abb      	ldrb	r3, [r7, #10]
 800e394:	4619      	mov	r1, r3
 800e396:	4b19      	ldr	r3, [pc, #100]	; (800e3fc <mix_sub_columns+0x284>)
 800e398:	5c5b      	ldrb	r3, [r3, r1]
 800e39a:	4053      	eors	r3, r2
 800e39c:	b2d9      	uxtb	r1, r3
 800e39e:	7bfb      	ldrb	r3, [r7, #15]
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	4b17      	ldr	r3, [pc, #92]	; (800e400 <mix_sub_columns+0x288>)
 800e3a4:	5c9a      	ldrb	r2, [r3, r2]
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	330a      	adds	r3, #10
 800e3aa:	404a      	eors	r2, r1
 800e3ac:	b2d2      	uxtb	r2, r2
 800e3ae:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e3b0:	7c3b      	ldrb	r3, [r7, #16]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	4b12      	ldr	r3, [pc, #72]	; (800e400 <mix_sub_columns+0x288>)
 800e3b6:	5c9a      	ldrb	r2, [r3, r2]
 800e3b8:	7d7b      	ldrb	r3, [r7, #21]
 800e3ba:	4619      	mov	r1, r3
 800e3bc:	4b11      	ldr	r3, [pc, #68]	; (800e404 <mix_sub_columns+0x28c>)
 800e3be:	5c5b      	ldrb	r3, [r3, r1]
 800e3c0:	4053      	eors	r3, r2
 800e3c2:	b2da      	uxtb	r2, r3
 800e3c4:	7abb      	ldrb	r3, [r7, #10]
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	4b0e      	ldr	r3, [pc, #56]	; (800e404 <mix_sub_columns+0x28c>)
 800e3ca:	5c5b      	ldrb	r3, [r3, r1]
 800e3cc:	4053      	eors	r3, r2
 800e3ce:	b2d9      	uxtb	r1, r3
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	461a      	mov	r2, r3
 800e3d4:	4b09      	ldr	r3, [pc, #36]	; (800e3fc <mix_sub_columns+0x284>)
 800e3d6:	5c9a      	ldrb	r2, [r3, r2]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	330b      	adds	r3, #11
 800e3dc:	404a      	eors	r2, r1
 800e3de:	b2d2      	uxtb	r2, r2
 800e3e0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e3e2:	7d3b      	ldrb	r3, [r7, #20]
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	4b05      	ldr	r3, [pc, #20]	; (800e3fc <mix_sub_columns+0x284>)
 800e3e8:	5c9a      	ldrb	r2, [r3, r2]
 800e3ea:	7a7b      	ldrb	r3, [r7, #9]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	4b04      	ldr	r3, [pc, #16]	; (800e400 <mix_sub_columns+0x288>)
 800e3f0:	5c5b      	ldrb	r3, [r3, r1]
 800e3f2:	4053      	eors	r3, r2
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	7bbb      	ldrb	r3, [r7, #14]
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	e005      	b.n	800e408 <mix_sub_columns+0x290>
 800e3fc:	08021c64 	.word	0x08021c64
 800e400:	08021d64 	.word	0x08021d64
 800e404:	08021b64 	.word	0x08021b64
 800e408:	4b2d      	ldr	r3, [pc, #180]	; (800e4c0 <mix_sub_columns+0x348>)
 800e40a:	5c5b      	ldrb	r3, [r3, r1]
 800e40c:	4053      	eors	r3, r2
 800e40e:	b2d9      	uxtb	r1, r3
 800e410:	7cfb      	ldrb	r3, [r7, #19]
 800e412:	461a      	mov	r2, r3
 800e414:	4b2a      	ldr	r3, [pc, #168]	; (800e4c0 <mix_sub_columns+0x348>)
 800e416:	5c9a      	ldrb	r2, [r3, r2]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	330c      	adds	r3, #12
 800e41c:	404a      	eors	r2, r1
 800e41e:	b2d2      	uxtb	r2, r2
 800e420:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e422:	7d3b      	ldrb	r3, [r7, #20]
 800e424:	461a      	mov	r2, r3
 800e426:	4b26      	ldr	r3, [pc, #152]	; (800e4c0 <mix_sub_columns+0x348>)
 800e428:	5c9a      	ldrb	r2, [r3, r2]
 800e42a:	7a7b      	ldrb	r3, [r7, #9]
 800e42c:	4619      	mov	r1, r3
 800e42e:	4b25      	ldr	r3, [pc, #148]	; (800e4c4 <mix_sub_columns+0x34c>)
 800e430:	5c5b      	ldrb	r3, [r3, r1]
 800e432:	4053      	eors	r3, r2
 800e434:	b2da      	uxtb	r2, r3
 800e436:	7bbb      	ldrb	r3, [r7, #14]
 800e438:	4619      	mov	r1, r3
 800e43a:	4b23      	ldr	r3, [pc, #140]	; (800e4c8 <mix_sub_columns+0x350>)
 800e43c:	5c5b      	ldrb	r3, [r3, r1]
 800e43e:	4053      	eors	r3, r2
 800e440:	b2d9      	uxtb	r1, r3
 800e442:	7cfb      	ldrb	r3, [r7, #19]
 800e444:	461a      	mov	r2, r3
 800e446:	4b1e      	ldr	r3, [pc, #120]	; (800e4c0 <mix_sub_columns+0x348>)
 800e448:	5c9a      	ldrb	r2, [r3, r2]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	330d      	adds	r3, #13
 800e44e:	404a      	eors	r2, r1
 800e450:	b2d2      	uxtb	r2, r2
 800e452:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e454:	7d3b      	ldrb	r3, [r7, #20]
 800e456:	461a      	mov	r2, r3
 800e458:	4b19      	ldr	r3, [pc, #100]	; (800e4c0 <mix_sub_columns+0x348>)
 800e45a:	5c9a      	ldrb	r2, [r3, r2]
 800e45c:	7a7b      	ldrb	r3, [r7, #9]
 800e45e:	4619      	mov	r1, r3
 800e460:	4b17      	ldr	r3, [pc, #92]	; (800e4c0 <mix_sub_columns+0x348>)
 800e462:	5c5b      	ldrb	r3, [r3, r1]
 800e464:	4053      	eors	r3, r2
 800e466:	b2da      	uxtb	r2, r3
 800e468:	7bbb      	ldrb	r3, [r7, #14]
 800e46a:	4619      	mov	r1, r3
 800e46c:	4b15      	ldr	r3, [pc, #84]	; (800e4c4 <mix_sub_columns+0x34c>)
 800e46e:	5c5b      	ldrb	r3, [r3, r1]
 800e470:	4053      	eors	r3, r2
 800e472:	b2d9      	uxtb	r1, r3
 800e474:	7cfb      	ldrb	r3, [r7, #19]
 800e476:	461a      	mov	r2, r3
 800e478:	4b13      	ldr	r3, [pc, #76]	; (800e4c8 <mix_sub_columns+0x350>)
 800e47a:	5c9a      	ldrb	r2, [r3, r2]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	330e      	adds	r3, #14
 800e480:	404a      	eors	r2, r1
 800e482:	b2d2      	uxtb	r2, r2
 800e484:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e486:	7d3b      	ldrb	r3, [r7, #20]
 800e488:	461a      	mov	r2, r3
 800e48a:	4b0f      	ldr	r3, [pc, #60]	; (800e4c8 <mix_sub_columns+0x350>)
 800e48c:	5c9a      	ldrb	r2, [r3, r2]
 800e48e:	7a7b      	ldrb	r3, [r7, #9]
 800e490:	4619      	mov	r1, r3
 800e492:	4b0b      	ldr	r3, [pc, #44]	; (800e4c0 <mix_sub_columns+0x348>)
 800e494:	5c5b      	ldrb	r3, [r3, r1]
 800e496:	4053      	eors	r3, r2
 800e498:	b2da      	uxtb	r2, r3
 800e49a:	7bbb      	ldrb	r3, [r7, #14]
 800e49c:	4619      	mov	r1, r3
 800e49e:	4b08      	ldr	r3, [pc, #32]	; (800e4c0 <mix_sub_columns+0x348>)
 800e4a0:	5c5b      	ldrb	r3, [r3, r1]
 800e4a2:	4053      	eors	r3, r2
 800e4a4:	b2d9      	uxtb	r1, r3
 800e4a6:	7cfb      	ldrb	r3, [r7, #19]
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	4b06      	ldr	r3, [pc, #24]	; (800e4c4 <mix_sub_columns+0x34c>)
 800e4ac:	5c9a      	ldrb	r2, [r3, r2]
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	330f      	adds	r3, #15
 800e4b2:	404a      	eors	r2, r1
 800e4b4:	b2d2      	uxtb	r2, r2
 800e4b6:	701a      	strb	r2, [r3, #0]
  }
 800e4b8:	bf00      	nop
 800e4ba:	3718      	adds	r7, #24
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	08021b64 	.word	0x08021b64
 800e4c4:	08021c64 	.word	0x08021c64
 800e4c8:	08021d64 	.word	0x08021d64

0800e4cc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b086      	sub	sp, #24
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	60f8      	str	r0, [r7, #12]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	607a      	str	r2, [r7, #4]
 800e4d8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e4da:	7afb      	ldrb	r3, [r7, #11]
 800e4dc:	3b10      	subs	r3, #16
 800e4de:	2b10      	cmp	r3, #16
 800e4e0:	bf8c      	ite	hi
 800e4e2:	2201      	movhi	r2, #1
 800e4e4:	2200      	movls	r2, #0
 800e4e6:	b2d2      	uxtb	r2, r2
 800e4e8:	2a00      	cmp	r2, #0
 800e4ea:	d10d      	bne.n	800e508 <lorawan_aes_set_key+0x3c>
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e4f2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800e4f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	bf14      	ite	ne
 800e4fe:	2301      	movne	r3, #1
 800e500:	2300      	moveq	r3, #0
 800e502:	b2db      	uxtb	r3, r3
 800e504:	2b00      	cmp	r3, #0
 800e506:	d105      	bne.n	800e514 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e510:	23ff      	movs	r3, #255	; 0xff
 800e512:	e0b2      	b.n	800e67a <lorawan_aes_set_key+0x1ae>
        break;
 800e514:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	7afa      	ldrb	r2, [r7, #11]
 800e51a:	68f9      	ldr	r1, [r7, #12]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7ff fbfa 	bl	800dd16 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e522:	7afb      	ldrb	r3, [r7, #11]
 800e524:	331c      	adds	r3, #28
 800e526:	b2db      	uxtb	r3, r3
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e52c:	7c7b      	ldrb	r3, [r7, #17]
 800e52e:	091b      	lsrs	r3, r3, #4
 800e530:	b2db      	uxtb	r3, r3
 800e532:	3b01      	subs	r3, #1
 800e534:	b2da      	uxtb	r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e53c:	7afb      	ldrb	r3, [r7, #11]
 800e53e:	75fb      	strb	r3, [r7, #23]
 800e540:	2301      	movs	r3, #1
 800e542:	75bb      	strb	r3, [r7, #22]
 800e544:	e093      	b.n	800e66e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e546:	7dfb      	ldrb	r3, [r7, #23]
 800e548:	3b04      	subs	r3, #4
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	5cd3      	ldrb	r3, [r2, r3]
 800e54e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e550:	7dfb      	ldrb	r3, [r7, #23]
 800e552:	3b03      	subs	r3, #3
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	5cd3      	ldrb	r3, [r2, r3]
 800e558:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e55a:	7dfb      	ldrb	r3, [r7, #23]
 800e55c:	3b02      	subs	r3, #2
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	5cd3      	ldrb	r3, [r2, r3]
 800e562:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e564:	7dfb      	ldrb	r3, [r7, #23]
 800e566:	3b01      	subs	r3, #1
 800e568:	687a      	ldr	r2, [r7, #4]
 800e56a:	5cd3      	ldrb	r3, [r2, r3]
 800e56c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e56e:	7dfb      	ldrb	r3, [r7, #23]
 800e570:	7afa      	ldrb	r2, [r7, #11]
 800e572:	fbb3 f1f2 	udiv	r1, r3, r2
 800e576:	fb01 f202 	mul.w	r2, r1, r2
 800e57a:	1a9b      	subs	r3, r3, r2
 800e57c:	b2db      	uxtb	r3, r3
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d127      	bne.n	800e5d2 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800e582:	7d7b      	ldrb	r3, [r7, #21]
 800e584:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e586:	7d3b      	ldrb	r3, [r7, #20]
 800e588:	4a3e      	ldr	r2, [pc, #248]	; (800e684 <lorawan_aes_set_key+0x1b8>)
 800e58a:	5cd2      	ldrb	r2, [r2, r3]
 800e58c:	7dbb      	ldrb	r3, [r7, #22]
 800e58e:	4053      	eors	r3, r2
 800e590:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e592:	7cfb      	ldrb	r3, [r7, #19]
 800e594:	4a3b      	ldr	r2, [pc, #236]	; (800e684 <lorawan_aes_set_key+0x1b8>)
 800e596:	5cd3      	ldrb	r3, [r2, r3]
 800e598:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e59a:	7cbb      	ldrb	r3, [r7, #18]
 800e59c:	4a39      	ldr	r2, [pc, #228]	; (800e684 <lorawan_aes_set_key+0x1b8>)
 800e59e:	5cd3      	ldrb	r3, [r2, r3]
 800e5a0:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e5a2:	7c3b      	ldrb	r3, [r7, #16]
 800e5a4:	4a37      	ldr	r2, [pc, #220]	; (800e684 <lorawan_aes_set_key+0x1b8>)
 800e5a6:	5cd3      	ldrb	r3, [r2, r3]
 800e5a8:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e5aa:	7dbb      	ldrb	r3, [r7, #22]
 800e5ac:	005b      	lsls	r3, r3, #1
 800e5ae:	b25a      	sxtb	r2, r3
 800e5b0:	7dbb      	ldrb	r3, [r7, #22]
 800e5b2:	09db      	lsrs	r3, r3, #7
 800e5b4:	b2db      	uxtb	r3, r3
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	0049      	lsls	r1, r1, #1
 800e5ba:	440b      	add	r3, r1
 800e5bc:	4619      	mov	r1, r3
 800e5be:	00c8      	lsls	r0, r1, #3
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	440b      	add	r3, r1
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	b25b      	sxtb	r3, r3
 800e5ca:	4053      	eors	r3, r2
 800e5cc:	b25b      	sxtb	r3, r3
 800e5ce:	75bb      	strb	r3, [r7, #22]
 800e5d0:	e01c      	b.n	800e60c <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e5d2:	7afb      	ldrb	r3, [r7, #11]
 800e5d4:	2b18      	cmp	r3, #24
 800e5d6:	d919      	bls.n	800e60c <lorawan_aes_set_key+0x140>
 800e5d8:	7dfb      	ldrb	r3, [r7, #23]
 800e5da:	7afa      	ldrb	r2, [r7, #11]
 800e5dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5e0:	fb01 f202 	mul.w	r2, r1, r2
 800e5e4:	1a9b      	subs	r3, r3, r2
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	2b10      	cmp	r3, #16
 800e5ea:	d10f      	bne.n	800e60c <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800e5ec:	7d7b      	ldrb	r3, [r7, #21]
 800e5ee:	4a25      	ldr	r2, [pc, #148]	; (800e684 <lorawan_aes_set_key+0x1b8>)
 800e5f0:	5cd3      	ldrb	r3, [r2, r3]
 800e5f2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e5f4:	7d3b      	ldrb	r3, [r7, #20]
 800e5f6:	4a23      	ldr	r2, [pc, #140]	; (800e684 <lorawan_aes_set_key+0x1b8>)
 800e5f8:	5cd3      	ldrb	r3, [r2, r3]
 800e5fa:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e5fc:	7cfb      	ldrb	r3, [r7, #19]
 800e5fe:	4a21      	ldr	r2, [pc, #132]	; (800e684 <lorawan_aes_set_key+0x1b8>)
 800e600:	5cd3      	ldrb	r3, [r2, r3]
 800e602:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e604:	7cbb      	ldrb	r3, [r7, #18]
 800e606:	4a1f      	ldr	r2, [pc, #124]	; (800e684 <lorawan_aes_set_key+0x1b8>)
 800e608:	5cd3      	ldrb	r3, [r2, r3]
 800e60a:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e60c:	7dfa      	ldrb	r2, [r7, #23]
 800e60e:	7afb      	ldrb	r3, [r7, #11]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e614:	7c3b      	ldrb	r3, [r7, #16]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	5cd1      	ldrb	r1, [r2, r3]
 800e61a:	7dfb      	ldrb	r3, [r7, #23]
 800e61c:	7d7a      	ldrb	r2, [r7, #21]
 800e61e:	404a      	eors	r2, r1
 800e620:	b2d1      	uxtb	r1, r2
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e626:	7c3b      	ldrb	r3, [r7, #16]
 800e628:	3301      	adds	r3, #1
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	5cd1      	ldrb	r1, [r2, r3]
 800e62e:	7dfb      	ldrb	r3, [r7, #23]
 800e630:	3301      	adds	r3, #1
 800e632:	7d3a      	ldrb	r2, [r7, #20]
 800e634:	404a      	eors	r2, r1
 800e636:	b2d1      	uxtb	r1, r2
 800e638:	687a      	ldr	r2, [r7, #4]
 800e63a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e63c:	7c3b      	ldrb	r3, [r7, #16]
 800e63e:	3302      	adds	r3, #2
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	5cd1      	ldrb	r1, [r2, r3]
 800e644:	7dfb      	ldrb	r3, [r7, #23]
 800e646:	3302      	adds	r3, #2
 800e648:	7cfa      	ldrb	r2, [r7, #19]
 800e64a:	404a      	eors	r2, r1
 800e64c:	b2d1      	uxtb	r1, r2
 800e64e:	687a      	ldr	r2, [r7, #4]
 800e650:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e652:	7c3b      	ldrb	r3, [r7, #16]
 800e654:	3303      	adds	r3, #3
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	5cd1      	ldrb	r1, [r2, r3]
 800e65a:	7dfb      	ldrb	r3, [r7, #23]
 800e65c:	3303      	adds	r3, #3
 800e65e:	7cba      	ldrb	r2, [r7, #18]
 800e660:	404a      	eors	r2, r1
 800e662:	b2d1      	uxtb	r1, r2
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e668:	7dfb      	ldrb	r3, [r7, #23]
 800e66a:	3304      	adds	r3, #4
 800e66c:	75fb      	strb	r3, [r7, #23]
 800e66e:	7dfa      	ldrb	r2, [r7, #23]
 800e670:	7c7b      	ldrb	r3, [r7, #17]
 800e672:	429a      	cmp	r2, r3
 800e674:	f4ff af67 	bcc.w	800e546 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800e678:	2300      	movs	r3, #0
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3718      	adds	r7, #24
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	08021b64 	.word	0x08021b64

0800e688 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b08a      	sub	sp, #40	; 0x28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d038      	beq.n	800e710 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	f107 0314 	add.w	r3, r7, #20
 800e6a4:	68f9      	ldr	r1, [r7, #12]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7ff fc07 	bl	800deba <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6b2:	e014      	b.n	800e6de <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e6b4:	f107 0314 	add.w	r3, r7, #20
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff fd5d 	bl	800e178 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e6c4:	0112      	lsls	r2, r2, #4
 800e6c6:	441a      	add	r2, r3
 800e6c8:	f107 0314 	add.w	r3, r7, #20
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fcab 	bl	800e02a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6d8:	3301      	adds	r3, #1
 800e6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e6e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e6e8:	429a      	cmp	r2, r3
 800e6ea:	d3e3      	bcc.n	800e6b4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e6ec:	f107 0314 	add.w	r3, r7, #20
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7ff fca7 	bl	800e044 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e6fc:	0112      	lsls	r2, r2, #4
 800e6fe:	441a      	add	r2, r3
 800e700:	f107 0314 	add.w	r3, r7, #20
 800e704:	4619      	mov	r1, r3
 800e706:	68b8      	ldr	r0, [r7, #8]
 800e708:	f7ff fbd7 	bl	800deba <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e70c:	2300      	movs	r3, #0
 800e70e:	e000      	b.n	800e712 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e710:	23ff      	movs	r3, #255	; 0xff
}
 800e712:	4618      	mov	r0, r3
 800e714:	3728      	adds	r7, #40	; 0x28
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
	...

0800e71c <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800e71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e71e:	b0a1      	sub	sp, #132	; 0x84
 800e720:	af12      	add	r7, sp, #72	; 0x48
 800e722:	4603      	mov	r3, r0
 800e724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800e728:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e72c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e730:	4611      	mov	r1, r2
 800e732:	4618      	mov	r0, r3
 800e734:	f000 fa12 	bl	800eb5c <SecureElementGetKeyByID>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d174      	bne.n	800e828 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e73e:	2300      	movs	r3, #0
 800e740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e744:	e06c      	b.n	800e820 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800e746:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e74a:	4939      	ldr	r1, [pc, #228]	; (800e830 <PrintKey+0x114>)
 800e74c:	4613      	mov	r3, r2
 800e74e:	005b      	lsls	r3, r3, #1
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	440b      	add	r3, r1
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d15a      	bne.n	800e816 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800e760:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e764:	4932      	ldr	r1, [pc, #200]	; (800e830 <PrintKey+0x114>)
 800e766:	4613      	mov	r3, r2
 800e768:	005b      	lsls	r3, r3, #1
 800e76a:	4413      	add	r3, r2
 800e76c:	009b      	lsls	r3, r3, #2
 800e76e:	440b      	add	r3, r1
 800e770:	3308      	adds	r3, #8
 800e772:	6819      	ldr	r1, [r3, #0]
 800e774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e776:	785b      	ldrb	r3, [r3, #1]
 800e778:	461d      	mov	r5, r3
 800e77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77c:	789b      	ldrb	r3, [r3, #2]
 800e77e:	461e      	mov	r6, r3
 800e780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e782:	78db      	ldrb	r3, [r3, #3]
 800e784:	62bb      	str	r3, [r7, #40]	; 0x28
 800e786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e788:	791b      	ldrb	r3, [r3, #4]
 800e78a:	627b      	str	r3, [r7, #36]	; 0x24
 800e78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78e:	795b      	ldrb	r3, [r3, #5]
 800e790:	623b      	str	r3, [r7, #32]
 800e792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e794:	799b      	ldrb	r3, [r3, #6]
 800e796:	61fb      	str	r3, [r7, #28]
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	79db      	ldrb	r3, [r3, #7]
 800e79c:	61bb      	str	r3, [r7, #24]
 800e79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a0:	7a1b      	ldrb	r3, [r3, #8]
 800e7a2:	617b      	str	r3, [r7, #20]
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a6:	7a5b      	ldrb	r3, [r3, #9]
 800e7a8:	613b      	str	r3, [r7, #16]
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	7a9b      	ldrb	r3, [r3, #10]
 800e7ae:	60fb      	str	r3, [r7, #12]
 800e7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b2:	7adb      	ldrb	r3, [r3, #11]
 800e7b4:	60bb      	str	r3, [r7, #8]
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	7b1b      	ldrb	r3, [r3, #12]
 800e7ba:	607b      	str	r3, [r7, #4]
 800e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7be:	7b5b      	ldrb	r3, [r3, #13]
 800e7c0:	461c      	mov	r4, r3
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c4:	7b9b      	ldrb	r3, [r3, #14]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ca:	7bdb      	ldrb	r3, [r3, #15]
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d0:	7c1b      	ldrb	r3, [r3, #16]
 800e7d2:	9310      	str	r3, [sp, #64]	; 0x40
 800e7d4:	920f      	str	r2, [sp, #60]	; 0x3c
 800e7d6:	900e      	str	r0, [sp, #56]	; 0x38
 800e7d8:	940d      	str	r4, [sp, #52]	; 0x34
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	920c      	str	r2, [sp, #48]	; 0x30
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	920a      	str	r2, [sp, #40]	; 0x28
 800e7e6:	693a      	ldr	r2, [r7, #16]
 800e7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	9208      	str	r2, [sp, #32]
 800e7ee:	69ba      	ldr	r2, [r7, #24]
 800e7f0:	9207      	str	r2, [sp, #28]
 800e7f2:	69fa      	ldr	r2, [r7, #28]
 800e7f4:	9206      	str	r2, [sp, #24]
 800e7f6:	6a3a      	ldr	r2, [r7, #32]
 800e7f8:	9205      	str	r2, [sp, #20]
 800e7fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7fc:	9204      	str	r2, [sp, #16]
 800e7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e800:	9303      	str	r3, [sp, #12]
 800e802:	9602      	str	r6, [sp, #8]
 800e804:	9501      	str	r5, [sp, #4]
 800e806:	9100      	str	r1, [sp, #0]
 800e808:	4b0a      	ldr	r3, [pc, #40]	; (800e834 <PrintKey+0x118>)
 800e80a:	2200      	movs	r2, #0
 800e80c:	2100      	movs	r1, #0
 800e80e:	2002      	movs	r0, #2
 800e810:	f011 fa3c 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
 800e814:	e008      	b.n	800e828 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e816:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e81a:	3301      	adds	r3, #1
 800e81c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e824:	2b0a      	cmp	r3, #10
 800e826:	d98e      	bls.n	800e746 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800e828:	373c      	adds	r7, #60	; 0x3c
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e82e:	bf00      	nop
 800e830:	08021e64 	.word	0x08021e64
 800e834:	080216e8 	.word	0x080216e8

0800e838 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800e838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e83a:	b091      	sub	sp, #68	; 0x44
 800e83c:	af08      	add	r7, sp, #32
 800e83e:	4603      	mov	r3, r0
 800e840:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800e846:	f107 0310 	add.w	r3, r7, #16
 800e84a:	4618      	mov	r0, r3
 800e84c:	f000 fbda 	bl	800f004 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800e850:	7c3b      	ldrb	r3, [r7, #16]
 800e852:	7c7a      	ldrb	r2, [r7, #17]
 800e854:	7cb9      	ldrb	r1, [r7, #18]
 800e856:	7cf8      	ldrb	r0, [r7, #19]
 800e858:	7d3c      	ldrb	r4, [r7, #20]
 800e85a:	7d7d      	ldrb	r5, [r7, #21]
 800e85c:	7dbe      	ldrb	r6, [r7, #22]
 800e85e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800e862:	f8cd c01c 	str.w	ip, [sp, #28]
 800e866:	9606      	str	r6, [sp, #24]
 800e868:	9505      	str	r5, [sp, #20]
 800e86a:	9404      	str	r4, [sp, #16]
 800e86c:	9003      	str	r0, [sp, #12]
 800e86e:	9102      	str	r1, [sp, #8]
 800e870:	9201      	str	r2, [sp, #4]
 800e872:	9300      	str	r3, [sp, #0]
 800e874:	4b24      	ldr	r3, [pc, #144]	; (800e908 <PrintIds+0xd0>)
 800e876:	2200      	movs	r2, #0
 800e878:	2100      	movs	r1, #0
 800e87a:	2002      	movs	r0, #2
 800e87c:	f011 fa06 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800e880:	f107 0318 	add.w	r3, r7, #24
 800e884:	4618      	mov	r0, r3
 800e886:	f000 fbed 	bl	800f064 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800e88a:	7e3b      	ldrb	r3, [r7, #24]
 800e88c:	7e7a      	ldrb	r2, [r7, #25]
 800e88e:	7eb9      	ldrb	r1, [r7, #26]
 800e890:	7ef8      	ldrb	r0, [r7, #27]
 800e892:	7f3c      	ldrb	r4, [r7, #28]
 800e894:	7f7d      	ldrb	r5, [r7, #29]
 800e896:	7fbe      	ldrb	r6, [r7, #30]
 800e898:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800e89c:	f8cd c01c 	str.w	ip, [sp, #28]
 800e8a0:	9606      	str	r6, [sp, #24]
 800e8a2:	9505      	str	r5, [sp, #20]
 800e8a4:	9404      	str	r4, [sp, #16]
 800e8a6:	9003      	str	r0, [sp, #12]
 800e8a8:	9102      	str	r1, [sp, #8]
 800e8aa:	9201      	str	r2, [sp, #4]
 800e8ac:	9300      	str	r3, [sp, #0]
 800e8ae:	4b17      	ldr	r3, [pc, #92]	; (800e90c <PrintIds+0xd4>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	2002      	movs	r0, #2
 800e8b6:	f011 f9e9 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800e8ba:	f107 020c 	add.w	r2, r7, #12
 800e8be:	79fb      	ldrb	r3, [r7, #7]
 800e8c0:	4611      	mov	r1, r2
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f000 fc00 	bl	800f0c8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800e8c8:	f107 030c 	add.w	r3, r7, #12
 800e8cc:	3303      	adds	r3, #3
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	f107 030c 	add.w	r3, r7, #12
 800e8d6:	3302      	adds	r3, #2
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	4619      	mov	r1, r3
 800e8dc:	f107 030c 	add.w	r3, r7, #12
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	781b      	ldrb	r3, [r3, #0]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f107 030c 	add.w	r3, r7, #12
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	9303      	str	r3, [sp, #12]
 800e8ee:	9002      	str	r0, [sp, #8]
 800e8f0:	9101      	str	r1, [sp, #4]
 800e8f2:	9200      	str	r2, [sp, #0]
 800e8f4:	4b06      	ldr	r3, [pc, #24]	; (800e910 <PrintIds+0xd8>)
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	2002      	movs	r0, #2
 800e8fc:	f011 f9c6 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800e900:	bf00      	nop
 800e902:	3724      	adds	r7, #36	; 0x24
 800e904:	46bd      	mov	sp, r7
 800e906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e908:	08021744 	.word	0x08021744
 800e90c:	08021784 	.word	0x08021784
 800e910:	080217c4 	.word	0x080217c4

0800e914 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
 800e91a:	4603      	mov	r3, r0
 800e91c:	6039      	str	r1, [r7, #0]
 800e91e:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e920:	2300      	movs	r3, #0
 800e922:	73fb      	strb	r3, [r7, #15]
 800e924:	e01a      	b.n	800e95c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e926:	4b12      	ldr	r3, [pc, #72]	; (800e970 <GetKeyByID+0x5c>)
 800e928:	6819      	ldr	r1, [r3, #0]
 800e92a:	7bfa      	ldrb	r2, [r7, #15]
 800e92c:	4613      	mov	r3, r2
 800e92e:	011b      	lsls	r3, r3, #4
 800e930:	4413      	add	r3, r2
 800e932:	440b      	add	r3, r1
 800e934:	3318      	adds	r3, #24
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	79fa      	ldrb	r2, [r7, #7]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d10b      	bne.n	800e956 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e93e:	4b0c      	ldr	r3, [pc, #48]	; (800e970 <GetKeyByID+0x5c>)
 800e940:	6819      	ldr	r1, [r3, #0]
 800e942:	7bfa      	ldrb	r2, [r7, #15]
 800e944:	4613      	mov	r3, r2
 800e946:	011b      	lsls	r3, r3, #4
 800e948:	4413      	add	r3, r2
 800e94a:	3318      	adds	r3, #24
 800e94c:	18ca      	adds	r2, r1, r3
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e952:	2300      	movs	r3, #0
 800e954:	e006      	b.n	800e964 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e956:	7bfb      	ldrb	r3, [r7, #15]
 800e958:	3301      	adds	r3, #1
 800e95a:	73fb      	strb	r3, [r7, #15]
 800e95c:	7bfb      	ldrb	r3, [r7, #15]
 800e95e:	2b0a      	cmp	r3, #10
 800e960:	d9e1      	bls.n	800e926 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e962:	2303      	movs	r3, #3
}
 800e964:	4618      	mov	r0, r3
 800e966:	3714      	adds	r7, #20
 800e968:	46bd      	mov	sp, r7
 800e96a:	bc80      	pop	{r7}
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop
 800e970:	20000560 	.word	0x20000560

0800e974 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b0d1      	sub	sp, #324	; 0x144
 800e978:	af00      	add	r7, sp, #0
 800e97a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800e97e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800e982:	6020      	str	r0, [r4, #0]
 800e984:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800e988:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e98c:	6001      	str	r1, [r0, #0]
 800e98e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e992:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800e996:	600a      	str	r2, [r1, #0]
 800e998:	461a      	mov	r2, r3
 800e99a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e99e:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e9a2:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e9a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9a8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d003      	beq.n	800e9ba <ComputeCmac+0x46>
 800e9b2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d101      	bne.n	800e9be <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e9ba:	2302      	movs	r3, #2
 800e9bc:	e05d      	b.n	800ea7a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e9be:	f107 0314 	add.w	r3, r7, #20
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fe ff02 	bl	800d7cc <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e9c8:	f107 0210 	add.w	r2, r7, #16
 800e9cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9d0:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f7ff ff9b 	bl	800e914 <GetKeyByID>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e9e4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d144      	bne.n	800ea76 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e9ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e9f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	1c5a      	adds	r2, r3, #1
 800e9f8:	f107 0314 	add.w	r3, r7, #20
 800e9fc:	4611      	mov	r1, r2
 800e9fe:	4618      	mov	r0, r3
 800ea00:	f7fe fefd 	bl	800d7fe <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ea04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d009      	beq.n	800ea26 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800ea12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ea1a:	f107 0014 	add.w	r0, r7, #20
 800ea1e:	2210      	movs	r2, #16
 800ea20:	6819      	ldr	r1, [r3, #0]
 800ea22:	f7fe fefb 	bl	800d81c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ea26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea2a:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800ea2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ea32:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ea36:	f107 0014 	add.w	r0, r7, #20
 800ea3a:	6812      	ldr	r2, [r2, #0]
 800ea3c:	6819      	ldr	r1, [r3, #0]
 800ea3e:	f7fe feed 	bl	800d81c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ea42:	f107 0214 	add.w	r2, r7, #20
 800ea46:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fe ffa7 	bl	800d9a0 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800ea52:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800ea56:	461a      	mov	r2, r3
 800ea58:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ea5c:	021b      	lsls	r3, r3, #8
 800ea5e:	431a      	orrs	r2, r3
 800ea60:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ea64:	041b      	lsls	r3, r3, #16
 800ea66:	431a      	orrs	r2, r3
 800ea68:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ea6c:	061b      	lsls	r3, r3, #24
 800ea6e:	431a      	orrs	r2, r3
 800ea70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ea74:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ea76:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd90      	pop	{r4, r7, pc}

0800ea84 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d101      	bne.n	800ea96 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ea92:	2302      	movs	r3, #2
 800ea94:	e00a      	b.n	800eaac <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800ea96:	4a07      	ldr	r2, [pc, #28]	; (800eab4 <SecureElementInit+0x30>)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800ea9c:	4b05      	ldr	r3, [pc, #20]	; (800eab4 <SecureElementInit+0x30>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	22d8      	movs	r2, #216	; 0xd8
 800eaa2:	4905      	ldr	r1, [pc, #20]	; (800eab8 <SecureElementInit+0x34>)
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f00c fe88 	bl	801b7ba <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	20000560 	.word	0x20000560
 800eab8:	08022138 	.word	0x08022138

0800eabc <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b086      	sub	sp, #24
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800eac6:	2300      	movs	r3, #0
 800eac8:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800eaca:	f107 030c 	add.w	r3, r7, #12
 800eace:	4618      	mov	r0, r3
 800ead0:	f000 fa98 	bl	800f004 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800ead4:	f107 0308 	add.w	r3, r7, #8
 800ead8:	4619      	mov	r1, r3
 800eada:	2001      	movs	r0, #1
 800eadc:	f000 faf4 	bl	800f0c8 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d024      	beq.n	800eb30 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800eae6:	2300      	movs	r3, #0
 800eae8:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800eaea:	2300      	movs	r3, #0
 800eaec:	75bb      	strb	r3, [r7, #22]
 800eaee:	e00c      	b.n	800eb0a <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800eaf0:	7dbb      	ldrb	r3, [r7, #22]
 800eaf2:	3318      	adds	r3, #24
 800eaf4:	443b      	add	r3, r7
 800eaf6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d002      	beq.n	800eb04 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800eafe:	2301      	movs	r3, #1
 800eb00:	75fb      	strb	r3, [r7, #23]
                break;
 800eb02:	e005      	b.n	800eb10 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800eb04:	7dbb      	ldrb	r3, [r7, #22]
 800eb06:	3301      	adds	r3, #1
 800eb08:	75bb      	strb	r3, [r7, #22]
 800eb0a:	7dbb      	ldrb	r3, [r7, #22]
 800eb0c:	2b07      	cmp	r3, #7
 800eb0e:	d9ef      	bls.n	800eaf0 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	f083 0301 	eor.w	r3, r3, #1
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d009      	beq.n	800eb30 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800eb1c:	f107 020c 	add.w	r2, r7, #12
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	4610      	mov	r0, r2
 800eb24:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800eb26:	f107 030c 	add.w	r3, r7, #12
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f000 fa52 	bl	800efd4 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00c      	beq.n	800eb50 <SecureElementInitMcuID+0x94>
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d109      	bne.n	800eb50 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800eb3c:	f107 0208 	add.w	r2, r7, #8
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	4610      	mov	r0, r2
 800eb44:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	4619      	mov	r1, r3
 800eb4a:	2001      	movs	r0, #1
 800eb4c:	f000 faa2 	bl	800f094 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800eb50:	2300      	movs	r3, #0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3718      	adds	r7, #24
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
	...

0800eb5c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b085      	sub	sp, #20
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	4603      	mov	r3, r0
 800eb64:	6039      	str	r1, [r7, #0]
 800eb66:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb68:	2300      	movs	r3, #0
 800eb6a:	73fb      	strb	r3, [r7, #15]
 800eb6c:	e01a      	b.n	800eba4 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eb6e:	4b12      	ldr	r3, [pc, #72]	; (800ebb8 <SecureElementGetKeyByID+0x5c>)
 800eb70:	6819      	ldr	r1, [r3, #0]
 800eb72:	7bfa      	ldrb	r2, [r7, #15]
 800eb74:	4613      	mov	r3, r2
 800eb76:	011b      	lsls	r3, r3, #4
 800eb78:	4413      	add	r3, r2
 800eb7a:	440b      	add	r3, r1
 800eb7c:	3318      	adds	r3, #24
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	79fa      	ldrb	r2, [r7, #7]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d10b      	bne.n	800eb9e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800eb86:	4b0c      	ldr	r3, [pc, #48]	; (800ebb8 <SecureElementGetKeyByID+0x5c>)
 800eb88:	6819      	ldr	r1, [r3, #0]
 800eb8a:	7bfa      	ldrb	r2, [r7, #15]
 800eb8c:	4613      	mov	r3, r2
 800eb8e:	011b      	lsls	r3, r3, #4
 800eb90:	4413      	add	r3, r2
 800eb92:	3318      	adds	r3, #24
 800eb94:	18ca      	adds	r2, r1, r3
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	e006      	b.n	800ebac <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eb9e:	7bfb      	ldrb	r3, [r7, #15]
 800eba0:	3301      	adds	r3, #1
 800eba2:	73fb      	strb	r3, [r7, #15]
 800eba4:	7bfb      	ldrb	r3, [r7, #15]
 800eba6:	2b0a      	cmp	r3, #10
 800eba8:	d9e1      	bls.n	800eb6e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ebaa:	2303      	movs	r3, #3
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bc80      	pop	{r7}
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	20000560 	.word	0x20000560

0800ebbc <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	f7ff fdab 	bl	800e71c <PrintKey>
    PrintKey( NWK_KEY );
 800ebc6:	2001      	movs	r0, #1
 800ebc8:	f7ff fda8 	bl	800e71c <PrintKey>
    PrintKey( APP_S_KEY );
 800ebcc:	2009      	movs	r0, #9
 800ebce:	f7ff fda5 	bl	800e71c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ebd2:	2008      	movs	r0, #8
 800ebd4:	f7ff fda2 	bl	800e71c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800ebd8:	2000      	movs	r0, #0
 800ebda:	f7ff fe2d 	bl	800e838 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ebde:	2300      	movs	r3, #0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b082      	sub	sp, #8
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	4603      	mov	r3, r0
 800ebec:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800ebee:	200b      	movs	r0, #11
 800ebf0:	f7ff fd94 	bl	800e71c <PrintKey>
    PrintKey( MC_KE_KEY );
 800ebf4:	200c      	movs	r0, #12
 800ebf6:	f7ff fd91 	bl	800e71c <PrintKey>
    PrintKey( APP_S_KEY );
 800ebfa:	2009      	movs	r0, #9
 800ebfc:	f7ff fd8e 	bl	800e71c <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800ec00:	2008      	movs	r0, #8
 800ec02:	f7ff fd8b 	bl	800e71c <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800ec06:	200a      	movs	r0, #10
 800ec08:	f7ff fd88 	bl	800e71c <PrintKey>
    PrintIds( mode );
 800ec0c:	79fb      	ldrb	r3, [r7, #7]
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7ff fe12 	bl	800e838 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3708      	adds	r7, #8
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}
	...

0800ec20 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b088      	sub	sp, #32
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	4603      	mov	r3, r0
 800ec28:	6039      	str	r1, [r7, #0]
 800ec2a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec32:	2302      	movs	r3, #2
 800ec34:	e04c      	b.n	800ecd0 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec36:	2300      	movs	r3, #0
 800ec38:	77fb      	strb	r3, [r7, #31]
 800ec3a:	e045      	b.n	800ecc8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ec3c:	4b26      	ldr	r3, [pc, #152]	; (800ecd8 <SecureElementSetKey+0xb8>)
 800ec3e:	6819      	ldr	r1, [r3, #0]
 800ec40:	7ffa      	ldrb	r2, [r7, #31]
 800ec42:	4613      	mov	r3, r2
 800ec44:	011b      	lsls	r3, r3, #4
 800ec46:	4413      	add	r3, r2
 800ec48:	440b      	add	r3, r1
 800ec4a:	3318      	adds	r3, #24
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	79fa      	ldrb	r2, [r7, #7]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d136      	bne.n	800ecc2 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	2b0d      	cmp	r3, #13
 800ec58:	d123      	bne.n	800eca2 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ec5a:	2306      	movs	r3, #6
 800ec5c:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ec5e:	2300      	movs	r3, #0
 800ec60:	60fb      	str	r3, [r7, #12]
 800ec62:	f107 0310 	add.w	r3, r7, #16
 800ec66:	2200      	movs	r2, #0
 800ec68:	601a      	str	r2, [r3, #0]
 800ec6a:	605a      	str	r2, [r3, #4]
 800ec6c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ec6e:	f107 030c 	add.w	r3, r7, #12
 800ec72:	220c      	movs	r2, #12
 800ec74:	2110      	movs	r1, #16
 800ec76:	6838      	ldr	r0, [r7, #0]
 800ec78:	f000 f876 	bl	800ed68 <SecureElementAesEncrypt>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ec80:	4b15      	ldr	r3, [pc, #84]	; (800ecd8 <SecureElementSetKey+0xb8>)
 800ec82:	6819      	ldr	r1, [r3, #0]
 800ec84:	7ffa      	ldrb	r2, [r7, #31]
 800ec86:	4613      	mov	r3, r2
 800ec88:	011b      	lsls	r3, r3, #4
 800ec8a:	4413      	add	r3, r2
 800ec8c:	3318      	adds	r3, #24
 800ec8e:	440b      	add	r3, r1
 800ec90:	3301      	adds	r3, #1
 800ec92:	f107 010c 	add.w	r1, r7, #12
 800ec96:	2210      	movs	r2, #16
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f00c fd8e 	bl	801b7ba <memcpy1>
                return retval;
 800ec9e:	7fbb      	ldrb	r3, [r7, #30]
 800eca0:	e016      	b.n	800ecd0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800eca2:	4b0d      	ldr	r3, [pc, #52]	; (800ecd8 <SecureElementSetKey+0xb8>)
 800eca4:	6819      	ldr	r1, [r3, #0]
 800eca6:	7ffa      	ldrb	r2, [r7, #31]
 800eca8:	4613      	mov	r3, r2
 800ecaa:	011b      	lsls	r3, r3, #4
 800ecac:	4413      	add	r3, r2
 800ecae:	3318      	adds	r3, #24
 800ecb0:	440b      	add	r3, r1
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	2210      	movs	r2, #16
 800ecb6:	6839      	ldr	r1, [r7, #0]
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f00c fd7e 	bl	801b7ba <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	e006      	b.n	800ecd0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ecc2:	7ffb      	ldrb	r3, [r7, #31]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	77fb      	strb	r3, [r7, #31]
 800ecc8:	7ffb      	ldrb	r3, [r7, #31]
 800ecca:	2b0a      	cmp	r3, #10
 800eccc:	d9b6      	bls.n	800ec3c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ecce:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3720      	adds	r7, #32
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	20000560 	.word	0x20000560

0800ecdc <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af02      	add	r7, sp, #8
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
 800ece8:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800ecea:	78fb      	ldrb	r3, [r7, #3]
 800ecec:	2b0b      	cmp	r3, #11
 800ecee:	d901      	bls.n	800ecf4 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ecf0:	2303      	movs	r3, #3
 800ecf2:	e009      	b.n	800ed08 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ecf4:	78fa      	ldrb	r2, [r7, #3]
 800ecf6:	69bb      	ldr	r3, [r7, #24]
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	4613      	mov	r3, r2
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	68b9      	ldr	r1, [r7, #8]
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f7ff fe37 	bl	800e974 <ComputeCmac>
 800ed06:	4603      	mov	r3, r0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b088      	sub	sp, #32
 800ed14:	af02      	add	r7, sp, #8
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	607a      	str	r2, [r7, #4]
 800ed1c:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d101      	bne.n	800ed28 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ed24:	2302      	movs	r3, #2
 800ed26:	e01b      	b.n	800ed60 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800ed28:	2306      	movs	r3, #6
 800ed2a:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800ed30:	78fa      	ldrb	r2, [r7, #3]
 800ed32:	f107 0310 	add.w	r3, r7, #16
 800ed36:	9300      	str	r3, [sp, #0]
 800ed38:	4613      	mov	r3, r2
 800ed3a:	68ba      	ldr	r2, [r7, #8]
 800ed3c:	68f9      	ldr	r1, [r7, #12]
 800ed3e:	2000      	movs	r0, #0
 800ed40:	f7ff fe18 	bl	800e974 <ComputeCmac>
 800ed44:	4603      	mov	r3, r0
 800ed46:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ed48:	7dfb      	ldrb	r3, [r7, #23]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800ed4e:	7dfb      	ldrb	r3, [r7, #23]
 800ed50:	e006      	b.n	800ed60 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d001      	beq.n	800ed5e <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800ed5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3718      	adds	r7, #24
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b0c2      	sub	sp, #264	; 0x108
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ed74:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800ed78:	6001      	str	r1, [r0, #0]
 800ed7a:	4611      	mov	r1, r2
 800ed7c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ed80:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ed84:	6013      	str	r3, [r2, #0]
 800ed86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed8a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800ed8e:	460a      	mov	r2, r1
 800ed90:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d006      	beq.n	800eda6 <SecureElementAesEncrypt+0x3e>
 800ed98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d101      	bne.n	800edaa <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eda6:	2302      	movs	r3, #2
 800eda8:	e059      	b.n	800ee5e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800edaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f003 030f 	and.w	r3, r3, #15
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d001      	beq.n	800edc0 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800edbc:	2305      	movs	r3, #5
 800edbe:	e04e      	b.n	800ee5e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800edc0:	f107 0314 	add.w	r3, r7, #20
 800edc4:	22f0      	movs	r2, #240	; 0xf0
 800edc6:	2100      	movs	r1, #0
 800edc8:	4618      	mov	r0, r3
 800edca:	f00c fd31 	bl	801b830 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800edce:	f107 0210 	add.w	r2, r7, #16
 800edd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edd6:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800edda:	781b      	ldrb	r3, [r3, #0]
 800eddc:	4611      	mov	r1, r2
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff fd98 	bl	800e914 <GetKeyByID>
 800ede4:	4603      	mov	r3, r0
 800ede6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800edea:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d133      	bne.n	800ee5a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	3301      	adds	r3, #1
 800edf6:	f107 0214 	add.w	r2, r7, #20
 800edfa:	2110      	movs	r1, #16
 800edfc:	4618      	mov	r0, r3
 800edfe:	f7ff fb65 	bl	800e4cc <lorawan_aes_set_key>

        uint8_t block = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800ee08:	e020      	b.n	800ee4c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800ee0a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	18d0      	adds	r0, r2, r3
 800ee12:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ee16:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ee1a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ee1e:	6812      	ldr	r2, [r2, #0]
 800ee20:	4413      	add	r3, r2
 800ee22:	f107 0214 	add.w	r2, r7, #20
 800ee26:	4619      	mov	r1, r3
 800ee28:	f7ff fc2e 	bl	800e688 <lorawan_aes_encrypt>
            block = block + 16;
 800ee2c:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ee30:	3310      	adds	r3, #16
 800ee32:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800ee36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ee3e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ee42:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800ee46:	6812      	ldr	r2, [r2, #0]
 800ee48:	3a10      	subs	r2, #16
 800ee4a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800ee4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee50:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1d7      	bne.n	800ee0a <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800ee5a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	460b      	mov	r3, r1
 800ee72:	70fb      	strb	r3, [r7, #3]
 800ee74:	4613      	mov	r3, r2
 800ee76:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d101      	bne.n	800ee82 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ee7e:	2302      	movs	r3, #2
 800ee80:	e02e      	b.n	800eee0 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800ee82:	2306      	movs	r3, #6
 800ee84:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800ee86:	78bb      	ldrb	r3, [r7, #2]
 800ee88:	2b0c      	cmp	r3, #12
 800ee8a:	d104      	bne.n	800ee96 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ee8c:	78fb      	ldrb	r3, [r7, #3]
 800ee8e:	2b0b      	cmp	r3, #11
 800ee90:	d001      	beq.n	800ee96 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ee92:	2303      	movs	r3, #3
 800ee94:	e024      	b.n	800eee0 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800ee96:	2300      	movs	r3, #0
 800ee98:	60fb      	str	r3, [r7, #12]
 800ee9a:	f107 0310 	add.w	r3, r7, #16
 800ee9e:	2200      	movs	r2, #0
 800eea0:	601a      	str	r2, [r3, #0]
 800eea2:	605a      	str	r2, [r3, #4]
 800eea4:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800eea6:	f107 030c 	add.w	r3, r7, #12
 800eeaa:	78fa      	ldrb	r2, [r7, #3]
 800eeac:	2110      	movs	r1, #16
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7ff ff5a 	bl	800ed68 <SecureElementAesEncrypt>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800eeb8:	7ffb      	ldrb	r3, [r7, #31]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d001      	beq.n	800eec2 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800eebe:	7ffb      	ldrb	r3, [r7, #31]
 800eec0:	e00e      	b.n	800eee0 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800eec2:	f107 020c 	add.w	r2, r7, #12
 800eec6:	78bb      	ldrb	r3, [r7, #2]
 800eec8:	4611      	mov	r1, r2
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7ff fea8 	bl	800ec20 <SecureElementSetKey>
 800eed0:	4603      	mov	r3, r0
 800eed2:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800eed4:	7ffb      	ldrb	r3, [r7, #31]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d001      	beq.n	800eede <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800eeda:	7ffb      	ldrb	r3, [r7, #31]
 800eedc:	e000      	b.n	800eee0 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800eede:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3720      	adds	r7, #32
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60b9      	str	r1, [r7, #8]
 800eef0:	607b      	str	r3, [r7, #4]
 800eef2:	4603      	mov	r3, r0
 800eef4:	73fb      	strb	r3, [r7, #15]
 800eef6:	4613      	mov	r3, r2
 800eef8:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d005      	beq.n	800ef0c <SecureElementProcessJoinAccept+0x24>
 800ef00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d002      	beq.n	800ef0c <SecureElementProcessJoinAccept+0x24>
 800ef06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d101      	bne.n	800ef10 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef0c:	2302      	movs	r3, #2
 800ef0e:	e05c      	b.n	800efca <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ef10:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef14:	2b21      	cmp	r3, #33	; 0x21
 800ef16:	d901      	bls.n	800ef1c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ef18:	2305      	movs	r3, #5
 800ef1a:	e056      	b.n	800efca <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ef20:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	461a      	mov	r2, r3
 800ef28:	6879      	ldr	r1, [r7, #4]
 800ef2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef2c:	f00c fc45 	bl	801b7ba <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	1c58      	adds	r0, r3, #1
 800ef34:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef38:	3b01      	subs	r3, #1
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3e:	3301      	adds	r3, #1
 800ef40:	7dfa      	ldrb	r2, [r7, #23]
 800ef42:	f7ff ff11 	bl	800ed68 <SecureElementAesEncrypt>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d001      	beq.n	800ef50 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800ef4c:	2307      	movs	r3, #7
 800ef4e:	e03c      	b.n	800efca <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ef50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef52:	330b      	adds	r3, #11
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	09db      	lsrs	r3, r3, #7
 800ef58:	b2da      	uxtb	r2, r3
 800ef5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800ef5e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef62:	3b04      	subs	r3, #4
 800ef64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef66:	4413      	add	r3, r2
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef70:	3b03      	subs	r3, #3
 800ef72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef74:	4413      	add	r3, r2
 800ef76:	781b      	ldrb	r3, [r3, #0]
 800ef78:	021b      	lsls	r3, r3, #8
 800ef7a:	ea41 0203 	orr.w	r2, r1, r3
 800ef7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef82:	3b02      	subs	r3, #2
 800ef84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef86:	440b      	add	r3, r1
 800ef88:	781b      	ldrb	r3, [r3, #0]
 800ef8a:	041b      	lsls	r3, r3, #16
 800ef8c:	431a      	orrs	r2, r3
 800ef8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef92:	3b01      	subs	r3, #1
 800ef94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef96:	440b      	add	r3, r1
 800ef98:	781b      	ldrb	r3, [r3, #0]
 800ef9a:	061b      	lsls	r3, r3, #24
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800efa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d10d      	bne.n	800efc4 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800efa8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efac:	3b04      	subs	r3, #4
 800efae:	4619      	mov	r1, r3
 800efb0:	2301      	movs	r3, #1
 800efb2:	693a      	ldr	r2, [r7, #16]
 800efb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efb6:	f7ff feab 	bl	800ed10 <SecureElementVerifyAesCmac>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d003      	beq.n	800efc8 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800efc0:	2301      	movs	r3, #1
 800efc2:	e002      	b.n	800efca <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800efc4:	2304      	movs	r3, #4
 800efc6:	e000      	b.n	800efca <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3718      	adds	r7, #24
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
	...

0800efd4 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b082      	sub	sp, #8
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d101      	bne.n	800efe6 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800efe2:	2302      	movs	r3, #2
 800efe4:	e007      	b.n	800eff6 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800efe6:	4b06      	ldr	r3, [pc, #24]	; (800f000 <SecureElementSetDevEui+0x2c>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2208      	movs	r2, #8
 800efec:	6879      	ldr	r1, [r7, #4]
 800efee:	4618      	mov	r0, r3
 800eff0:	f00c fbe3 	bl	801b7ba <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800eff4:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	20000560 	.word	0x20000560

0800f004 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d101      	bne.n	800f016 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f012:	2302      	movs	r3, #2
 800f014:	e007      	b.n	800f026 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f016:	4b06      	ldr	r3, [pc, #24]	; (800f030 <SecureElementGetDevEui+0x2c>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	2208      	movs	r2, #8
 800f01c:	4619      	mov	r1, r3
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f00c fbcb 	bl	801b7ba <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f024:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f026:	4618      	mov	r0, r3
 800f028:	3708      	adds	r7, #8
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	20000560 	.word	0x20000560

0800f034 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d101      	bne.n	800f046 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f042:	2302      	movs	r3, #2
 800f044:	e008      	b.n	800f058 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f046:	4b06      	ldr	r3, [pc, #24]	; (800f060 <SecureElementSetJoinEui+0x2c>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	3308      	adds	r3, #8
 800f04c:	2208      	movs	r2, #8
 800f04e:	6879      	ldr	r1, [r7, #4]
 800f050:	4618      	mov	r0, r3
 800f052:	f00c fbb2 	bl	801b7ba <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f056:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3708      	adds	r7, #8
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}
 800f060:	20000560 	.word	0x20000560

0800f064 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f072:	2302      	movs	r3, #2
 800f074:	e008      	b.n	800f088 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f076:	4b06      	ldr	r3, [pc, #24]	; (800f090 <SecureElementGetJoinEui+0x2c>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	3308      	adds	r3, #8
 800f07c:	2208      	movs	r2, #8
 800f07e:	4619      	mov	r1, r3
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f00c fb9a 	bl	801b7ba <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f086:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	20000560 	.word	0x20000560

0800f094 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	4603      	mov	r3, r0
 800f09c:	6039      	str	r1, [r7, #0]
 800f09e:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f0a0:	79fb      	ldrb	r3, [r7, #7]
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d104      	bne.n	800f0b0 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f0a6:	4b07      	ldr	r3, [pc, #28]	; (800f0c4 <SecureElementSetDevAddr+0x30>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	683a      	ldr	r2, [r7, #0]
 800f0ac:	611a      	str	r2, [r3, #16]
 800f0ae:	e003      	b.n	800f0b8 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f0b0:	4b04      	ldr	r3, [pc, #16]	; (800f0c4 <SecureElementSetDevAddr+0x30>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f0b8:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	370c      	adds	r7, #12
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bc80      	pop	{r7}
 800f0c2:	4770      	bx	lr
 800f0c4:	20000560 	.word	0x20000560

0800f0c8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	6039      	str	r1, [r7, #0]
 800f0d2:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d101      	bne.n	800f0de <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f0da:	2302      	movs	r3, #2
 800f0dc:	e00e      	b.n	800f0fc <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f0de:	79fb      	ldrb	r3, [r7, #7]
 800f0e0:	2b02      	cmp	r3, #2
 800f0e2:	d105      	bne.n	800f0f0 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f0e4:	4b08      	ldr	r3, [pc, #32]	; (800f108 <SecureElementGetDevAddr+0x40>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	691a      	ldr	r2, [r3, #16]
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	601a      	str	r2, [r3, #0]
 800f0ee:	e004      	b.n	800f0fa <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f0f0:	4b05      	ldr	r3, [pc, #20]	; (800f108 <SecureElementGetDevAddr+0x40>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	695a      	ldr	r2, [r3, #20]
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f0fa:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	bc80      	pop	{r7}
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	20000560 	.word	0x20000560

0800f10c <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b082      	sub	sp, #8
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f116:	4a29      	ldr	r2, [pc, #164]	; (800f1bc <LmHandlerInit+0xb0>)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f11c:	4b28      	ldr	r3, [pc, #160]	; (800f1c0 <LmHandlerInit+0xb4>)
 800f11e:	4a29      	ldr	r2, [pc, #164]	; (800f1c4 <LmHandlerInit+0xb8>)
 800f120:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f122:	4b27      	ldr	r3, [pc, #156]	; (800f1c0 <LmHandlerInit+0xb4>)
 800f124:	4a28      	ldr	r2, [pc, #160]	; (800f1c8 <LmHandlerInit+0xbc>)
 800f126:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f128:	4b25      	ldr	r3, [pc, #148]	; (800f1c0 <LmHandlerInit+0xb4>)
 800f12a:	4a28      	ldr	r2, [pc, #160]	; (800f1cc <LmHandlerInit+0xc0>)
 800f12c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f12e:	4b24      	ldr	r3, [pc, #144]	; (800f1c0 <LmHandlerInit+0xb4>)
 800f130:	4a27      	ldr	r2, [pc, #156]	; (800f1d0 <LmHandlerInit+0xc4>)
 800f132:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f134:	4b21      	ldr	r3, [pc, #132]	; (800f1bc <LmHandlerInit+0xb0>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	4a26      	ldr	r2, [pc, #152]	; (800f1d4 <LmHandlerInit+0xc8>)
 800f13c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f13e:	4b1f      	ldr	r3, [pc, #124]	; (800f1bc <LmHandlerInit+0xb0>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	4a23      	ldr	r2, [pc, #140]	; (800f1d4 <LmHandlerInit+0xc8>)
 800f146:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f148:	4b1c      	ldr	r3, [pc, #112]	; (800f1bc <LmHandlerInit+0xb0>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	4a21      	ldr	r2, [pc, #132]	; (800f1d4 <LmHandlerInit+0xc8>)
 800f150:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f152:	4b1a      	ldr	r3, [pc, #104]	; (800f1bc <LmHandlerInit+0xb0>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	4a1e      	ldr	r2, [pc, #120]	; (800f1d4 <LmHandlerInit+0xc8>)
 800f15a:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f15c:	4b1d      	ldr	r3, [pc, #116]	; (800f1d4 <LmHandlerInit+0xc8>)
 800f15e:	4a1e      	ldr	r2, [pc, #120]	; (800f1d8 <LmHandlerInit+0xcc>)
 800f160:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f162:	4b16      	ldr	r3, [pc, #88]	; (800f1bc <LmHandlerInit+0xb0>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	699b      	ldr	r3, [r3, #24]
 800f168:	4a1a      	ldr	r2, [pc, #104]	; (800f1d4 <LmHandlerInit+0xc8>)
 800f16a:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	4a1b      	ldr	r2, [pc, #108]	; (800f1dc <LmHandlerInit+0xd0>)
 800f170:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800f172:	4b12      	ldr	r3, [pc, #72]	; (800f1bc <LmHandlerInit+0xb0>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f178:	4a18      	ldr	r2, [pc, #96]	; (800f1dc <LmHandlerInit+0xd0>)
 800f17a:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800f17c:	4b17      	ldr	r3, [pc, #92]	; (800f1dc <LmHandlerInit+0xd0>)
 800f17e:	4a18      	ldr	r2, [pc, #96]	; (800f1e0 <LmHandlerInit+0xd4>)
 800f180:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800f182:	4b16      	ldr	r3, [pc, #88]	; (800f1dc <LmHandlerInit+0xd0>)
 800f184:	4a17      	ldr	r2, [pc, #92]	; (800f1e4 <LmHandlerInit+0xd8>)
 800f186:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f188:	4914      	ldr	r1, [pc, #80]	; (800f1dc <LmHandlerInit+0xd0>)
 800f18a:	2000      	movs	r0, #0
 800f18c:	f000 fdb6 	bl	800fcfc <LmHandlerPackageRegister>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d002      	beq.n	800f19c <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800f196:	f04f 33ff 	mov.w	r3, #4294967295
 800f19a:	e00a      	b.n	800f1b2 <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f19c:	463b      	mov	r3, r7
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f001 fd2e 	bl	8010c00 <LmhpPackagesRegistrationInit>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d002      	beq.n	800f1b0 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800f1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ae:	e000      	b.n	800f1b2 <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	200005b8 	.word	0x200005b8
 800f1c0:	200005bc 	.word	0x200005bc
 800f1c4:	0800f9d5 	.word	0x0800f9d5
 800f1c8:	0800fa49 	.word	0x0800fa49
 800f1cc:	0800fb19 	.word	0x0800fb19
 800f1d0:	0800fc69 	.word	0x0800fc69
 800f1d4:	200005cc 	.word	0x200005cc
 800f1d8:	080101ad 	.word	0x080101ad
 800f1dc:	2000057c 	.word	0x2000057c
 800f1e0:	0800ffc1 	.word	0x0800ffc1
 800f1e4:	0800fff9 	.word	0x0800fff9

0800f1e8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b092      	sub	sp, #72	; 0x48
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f1f0:	2218      	movs	r2, #24
 800f1f2:	6879      	ldr	r1, [r7, #4]
 800f1f4:	4884      	ldr	r0, [pc, #528]	; (800f408 <LmHandlerConfigure+0x220>)
 800f1f6:	f00c fae0 	bl	801b7ba <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800f1fa:	4b84      	ldr	r3, [pc, #528]	; (800f40c <LmHandlerConfigure+0x224>)
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f200:	f7fe faa2 	bl	800d748 <LoraInfo_GetPtr>
 800f204:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f206:	4b80      	ldr	r3, [pc, #512]	; (800f408 <LmHandlerConfigure+0x220>)
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	461a      	mov	r2, r3
 800f20c:	2301      	movs	r3, #1
 800f20e:	4093      	lsls	r3, r2
 800f210:	461a      	mov	r2, r3
 800f212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	4013      	ands	r3, r2
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d106      	bne.n	800f22a <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f21c:	4b7c      	ldr	r3, [pc, #496]	; (800f410 <LmHandlerConfigure+0x228>)
 800f21e:	2201      	movs	r2, #1
 800f220:	2100      	movs	r1, #0
 800f222:	2000      	movs	r0, #0
 800f224:	f010 fd32 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f228:	e7fe      	b.n	800f228 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f22a:	4b77      	ldr	r3, [pc, #476]	; (800f408 <LmHandlerConfigure+0x220>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	461a      	mov	r2, r3
 800f230:	4978      	ldr	r1, [pc, #480]	; (800f414 <LmHandlerConfigure+0x22c>)
 800f232:	4879      	ldr	r0, [pc, #484]	; (800f418 <LmHandlerConfigure+0x230>)
 800f234:	f004 ffd8 	bl	80141e8 <LoRaMacInitialization>
 800f238:	4603      	mov	r3, r0
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d002      	beq.n	800f244 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800f23e:	f04f 33ff 	mov.w	r3, #4294967295
 800f242:	e0dc      	b.n	800f3fe <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800f244:	2327      	movs	r3, #39	; 0x27
 800f246:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f248:	f107 0318 	add.w	r3, r7, #24
 800f24c:	4618      	mov	r0, r3
 800f24e:	f005 fd57 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d103      	bne.n	800f260 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800f258:	4b70      	ldr	r3, [pc, #448]	; (800f41c <LmHandlerConfigure+0x234>)
 800f25a:	2201      	movs	r2, #1
 800f25c:	701a      	strb	r2, [r3, #0]
 800f25e:	e02a      	b.n	800f2b6 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800f260:	2328      	movs	r3, #40	; 0x28
 800f262:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800f264:	4b6e      	ldr	r3, [pc, #440]	; (800f420 <LmHandlerConfigure+0x238>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	691b      	ldr	r3, [r3, #16]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00c      	beq.n	800f288 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f26e:	f107 0318 	add.w	r3, r7, #24
 800f272:	4618      	mov	r0, r3
 800f274:	f005 fb6c 	bl	8014950 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800f278:	4b69      	ldr	r3, [pc, #420]	; (800f420 <LmHandlerConfigure+0x238>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	691b      	ldr	r3, [r3, #16]
 800f27e:	69fa      	ldr	r2, [r7, #28]
 800f280:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800f284:	4610      	mov	r0, r2
 800f286:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800f288:	2327      	movs	r3, #39	; 0x27
 800f28a:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f28c:	f107 0318 	add.w	r3, r7, #24
 800f290:	4618      	mov	r0, r3
 800f292:	f005 fd35 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d10c      	bne.n	800f2b6 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f29c:	2301      	movs	r3, #1
 800f29e:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f2a0:	f107 0318 	add.w	r3, r7, #24
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f005 fb53 	bl	8014950 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f2aa:	7f3b      	ldrb	r3, [r7, #28]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800f2b0:	4b5a      	ldr	r3, [pc, #360]	; (800f41c <LmHandlerConfigure+0x234>)
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800f2b6:	4b59      	ldr	r3, [pc, #356]	; (800f41c <LmHandlerConfigure+0x234>)
 800f2b8:	781b      	ldrb	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d022      	beq.n	800f304 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800f2be:	4b58      	ldr	r3, [pc, #352]	; (800f420 <LmHandlerConfigure+0x238>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	69db      	ldr	r3, [r3, #28]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d004      	beq.n	800f2d2 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800f2c8:	4b55      	ldr	r3, [pc, #340]	; (800f420 <LmHandlerConfigure+0x238>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	69db      	ldr	r3, [r3, #28]
 800f2ce:	2000      	movs	r0, #0
 800f2d0:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800f2d2:	2327      	movs	r3, #39	; 0x27
 800f2d4:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800f2d6:	f107 0318 	add.w	r3, r7, #24
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f005 fb38 	bl	8014950 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800f2e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2e6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f2ea:	4b47      	ldr	r3, [pc, #284]	; (800f408 <LmHandlerConfigure+0x220>)
 800f2ec:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800f2ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2f0:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800f2f4:	4b44      	ldr	r3, [pc, #272]	; (800f408 <LmHandlerConfigure+0x220>)
 800f2f6:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800f2f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2fa:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800f2fe:	4b42      	ldr	r3, [pc, #264]	; (800f408 <LmHandlerConfigure+0x220>)
 800f300:	709a      	strb	r2, [r3, #2]
 800f302:	e008      	b.n	800f316 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f304:	2305      	movs	r3, #5
 800f306:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f308:	2300      	movs	r3, #0
 800f30a:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f30c:	f107 0318 	add.w	r3, r7, #24
 800f310:	4618      	mov	r0, r3
 800f312:	f005 fcf5 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f316:	4b3f      	ldr	r3, [pc, #252]	; (800f414 <LmHandlerConfigure+0x22c>)
 800f318:	689b      	ldr	r3, [r3, #8]
 800f31a:	4a3e      	ldr	r2, [pc, #248]	; (800f414 <LmHandlerConfigure+0x22c>)
 800f31c:	68d2      	ldr	r2, [r2, #12]
 800f31e:	4611      	mov	r1, r2
 800f320:	4618      	mov	r0, r3
 800f322:	f7ff fbcb 	bl	800eabc <SecureElementInitMcuID>
 800f326:	4603      	mov	r3, r0
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f32c:	f04f 33ff 	mov.w	r3, #4294967295
 800f330:	e065      	b.n	800f3fe <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f332:	2306      	movs	r3, #6
 800f334:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f336:	f107 0318 	add.w	r3, r7, #24
 800f33a:	4618      	mov	r0, r3
 800f33c:	f005 fb08 	bl	8014950 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	4a38      	ldr	r2, [pc, #224]	; (800f424 <LmHandlerConfigure+0x23c>)
 800f344:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f346:	f107 0318 	add.w	r3, r7, #24
 800f34a:	4618      	mov	r0, r3
 800f34c:	f005 fcd8 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f350:	2302      	movs	r3, #2
 800f352:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f354:	4b33      	ldr	r3, [pc, #204]	; (800f424 <LmHandlerConfigure+0x23c>)
 800f356:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f358:	f107 0318 	add.w	r3, r7, #24
 800f35c:	4618      	mov	r0, r3
 800f35e:	f005 faf7 	bl	8014950 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f362:	2303      	movs	r3, #3
 800f364:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f366:	4b30      	ldr	r3, [pc, #192]	; (800f428 <LmHandlerConfigure+0x240>)
 800f368:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f36a:	f107 0318 	add.w	r3, r7, #24
 800f36e:	4618      	mov	r0, r3
 800f370:	f005 faee 	bl	8014950 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f374:	f7ff fc22 	bl	800ebbc <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f378:	230f      	movs	r3, #15
 800f37a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f37c:	2301      	movs	r3, #1
 800f37e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f380:	f107 0318 	add.w	r3, r7, #24
 800f384:	4618      	mov	r0, r3
 800f386:	f005 fcbb 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f38a:	2310      	movs	r3, #16
 800f38c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f38e:	2300      	movs	r3, #0
 800f390:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f392:	f107 0318 	add.w	r3, r7, #24
 800f396:	4618      	mov	r0, r3
 800f398:	f005 fcb2 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f39c:	2304      	movs	r3, #4
 800f39e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f3a0:	4b19      	ldr	r3, [pc, #100]	; (800f408 <LmHandlerConfigure+0x220>)
 800f3a2:	789b      	ldrb	r3, [r3, #2]
 800f3a4:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f3a6:	f107 0318 	add.w	r3, r7, #24
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f005 fca8 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f3b0:	233a      	movs	r3, #58	; 0x3a
 800f3b2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f3b4:	4b14      	ldr	r3, [pc, #80]	; (800f408 <LmHandlerConfigure+0x220>)
 800f3b6:	695b      	ldr	r3, [r3, #20]
 800f3b8:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f3ba:	f107 0318 	add.w	r3, r7, #24
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f005 fc9e 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f3c4:	230f      	movs	r3, #15
 800f3c6:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f3c8:	4b0f      	ldr	r3, [pc, #60]	; (800f408 <LmHandlerConfigure+0x220>)
 800f3ca:	781b      	ldrb	r3, [r3, #0]
 800f3cc:	f107 0210 	add.w	r2, r7, #16
 800f3d0:	4611      	mov	r1, r2
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f008 fbec 	bl	8017bb0 <RegionGetPhyParam>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	bf14      	ite	ne
 800f3e2:	2301      	movne	r3, #1
 800f3e4:	2300      	moveq	r3, #0
 800f3e6:	b2da      	uxtb	r2, r3
 800f3e8:	4b07      	ldr	r3, [pc, #28]	; (800f408 <LmHandlerConfigure+0x220>)
 800f3ea:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f3ec:	2014      	movs	r0, #20
 800f3ee:	f000 fad9 	bl	800f9a4 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f3f2:	4b05      	ldr	r3, [pc, #20]	; (800f408 <LmHandlerConfigure+0x220>)
 800f3f4:	79db      	ldrb	r3, [r3, #7]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f006 fafc 	bl	80159f4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3748      	adds	r7, #72	; 0x48
 800f402:	46bd      	mov	sp, r7
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	200005a0 	.word	0x200005a0
 800f40c:	200005e8 	.word	0x200005e8
 800f410:	080217f0 	.word	0x080217f0
 800f414:	200005cc 	.word	0x200005cc
 800f418:	200005bc 	.word	0x200005bc
 800f41c:	200006de 	.word	0x200006de
 800f420:	200005b8 	.word	0x200005b8
 800f424:	20000564 	.word	0x20000564
 800f428:	2000056c 	.word	0x2000056c

0800f42c <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f432:	f002 fe4d 	bl	80120d0 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f436:	f000 fd8f 	bl	800ff58 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f43a:	f000 fd63 	bl	800ff04 <LmHandlerPackageIsTxPending>
 800f43e:	4603      	mov	r3, r0
 800f440:	2b00      	cmp	r3, #0
 800f442:	d117      	bne.n	800f474 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800f444:	4b0d      	ldr	r3, [pc, #52]	; (800f47c <LmHandlerProcess+0x50>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d014      	beq.n	800f476 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800f44c:	2300      	movs	r3, #0
 800f44e:	703b      	strb	r3, [r7, #0]
 800f450:	2300      	movs	r3, #0
 800f452:	707b      	strb	r3, [r7, #1]
 800f454:	2300      	movs	r3, #0
 800f456:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800f458:	4b09      	ldr	r3, [pc, #36]	; (800f480 <LmHandlerProcess+0x54>)
 800f45a:	78d9      	ldrb	r1, [r3, #3]
 800f45c:	463b      	mov	r3, r7
 800f45e:	2200      	movs	r2, #0
 800f460:	4618      	mov	r0, r3
 800f462:	f000 f8d7 	bl	800f614 <LmHandlerSend>
 800f466:	4603      	mov	r3, r0
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d104      	bne.n	800f476 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800f46c:	4b03      	ldr	r3, [pc, #12]	; (800f47c <LmHandlerProcess+0x50>)
 800f46e:	2200      	movs	r2, #0
 800f470:	701a      	strb	r2, [r3, #0]
 800f472:	e000      	b.n	800f476 <LmHandlerProcess+0x4a>
        return;
 800f474:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}
 800f47c:	200005e8 	.word	0x200005e8
 800f480:	200005a0 	.word	0x200005a0

0800f484 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f484:	b480      	push	{r7}
 800f486:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f488:	4b02      	ldr	r3, [pc, #8]	; (800f494 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f48a:	681b      	ldr	r3, [r3, #0]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	46bd      	mov	sp, r7
 800f490:	bc80      	pop	{r7}
 800f492:	4770      	bx	lr
 800f494:	200005e4 	.word	0x200005e4

0800f498 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b092      	sub	sp, #72	; 0x48
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	4603      	mov	r3, r0
 800f4a0:	460a      	mov	r2, r1
 800f4a2:	71fb      	strb	r3, [r7, #7]
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f4a8:	2301      	movs	r3, #1
 800f4aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f4ae:	4b46      	ldr	r3, [pc, #280]	; (800f5c8 <LmHandlerJoin+0x130>)
 800f4b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f4ba:	4b43      	ldr	r3, [pc, #268]	; (800f5c8 <LmHandlerJoin+0x130>)
 800f4bc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f4c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f4c4:	79fb      	ldrb	r3, [r7, #7]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d10b      	bne.n	800f4e2 <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f4ca:	2302      	movs	r3, #2
 800f4cc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f4d0:	4b3e      	ldr	r3, [pc, #248]	; (800f5cc <LmHandlerJoin+0x134>)
 800f4d2:	2202      	movs	r2, #2
 800f4d4:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f4d6:	4a3d      	ldr	r2, [pc, #244]	; (800f5cc <LmHandlerJoin+0x134>)
 800f4d8:	79bb      	ldrb	r3, [r7, #6]
 800f4da:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f4dc:	f005 f93a 	bl	8014754 <LoRaMacStart>
 800f4e0:	e05c      	b.n	800f59c <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f4e8:	4b38      	ldr	r3, [pc, #224]	; (800f5cc <LmHandlerJoin+0x134>)
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f4ee:	4b36      	ldr	r3, [pc, #216]	; (800f5c8 <LmHandlerJoin+0x130>)
 800f4f0:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f4f4:	4b35      	ldr	r3, [pc, #212]	; (800f5cc <LmHandlerJoin+0x134>)
 800f4f6:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f4f8:	4b33      	ldr	r3, [pc, #204]	; (800f5c8 <LmHandlerJoin+0x130>)
 800f4fa:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f4fe:	4b33      	ldr	r3, [pc, #204]	; (800f5cc <LmHandlerJoin+0x134>)
 800f500:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f502:	4b32      	ldr	r3, [pc, #200]	; (800f5cc <LmHandlerJoin+0x134>)
 800f504:	2200      	movs	r2, #0
 800f506:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f508:	4a30      	ldr	r2, [pc, #192]	; (800f5cc <LmHandlerJoin+0x134>)
 800f50a:	79bb      	ldrb	r3, [r7, #6]
 800f50c:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800f50e:	4b30      	ldr	r3, [pc, #192]	; (800f5d0 <LmHandlerJoin+0x138>)
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	f083 0301 	eor.w	r3, r3, #1
 800f516:	b2db      	uxtb	r3, r3
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d034      	beq.n	800f586 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f51c:	231f      	movs	r3, #31
 800f51e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f520:	4b29      	ldr	r3, [pc, #164]	; (800f5c8 <LmHandlerJoin+0x130>)
 800f522:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f526:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f528:	f107 030c 	add.w	r3, r7, #12
 800f52c:	4618      	mov	r0, r3
 800f52e:	f005 fbe7 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f532:	2320      	movs	r3, #32
 800f534:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f536:	4b24      	ldr	r3, [pc, #144]	; (800f5c8 <LmHandlerJoin+0x130>)
 800f538:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f53c:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f53e:	f107 030c 	add.w	r3, r7, #12
 800f542:	4618      	mov	r0, r3
 800f544:	f005 fbdc 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f548:	2322      	movs	r3, #34	; 0x22
 800f54a:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f54c:	4b1e      	ldr	r3, [pc, #120]	; (800f5c8 <LmHandlerJoin+0x130>)
 800f54e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f552:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f554:	f107 030c 	add.w	r3, r7, #12
 800f558:	4618      	mov	r0, r3
 800f55a:	f005 fbd1 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f55e:	2321      	movs	r3, #33	; 0x21
 800f560:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800f562:	4b19      	ldr	r3, [pc, #100]	; (800f5c8 <LmHandlerJoin+0x130>)
 800f564:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f568:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f56a:	f107 030c 	add.w	r3, r7, #12
 800f56e:	4618      	mov	r0, r3
 800f570:	f005 fbc6 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f574:	2329      	movs	r3, #41	; 0x29
 800f576:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f578:	4b16      	ldr	r3, [pc, #88]	; (800f5d4 <LmHandlerJoin+0x13c>)
 800f57a:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f57c:	f107 030c 	add.w	r3, r7, #12
 800f580:	4618      	mov	r0, r3
 800f582:	f005 fbbd 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800f586:	f005 f8e5 	bl	8014754 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f58a:	2301      	movs	r3, #1
 800f58c:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f58e:	2301      	movs	r3, #1
 800f590:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f592:	f107 030c 	add.w	r3, r7, #12
 800f596:	4618      	mov	r0, r3
 800f598:	f005 fbb2 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800f59c:	4b0c      	ldr	r3, [pc, #48]	; (800f5d0 <LmHandlerJoin+0x138>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	f083 0301 	eor.w	r3, r3, #1
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d102      	bne.n	800f5b0 <LmHandlerJoin+0x118>
 800f5aa:	79bb      	ldrb	r3, [r7, #6]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d004      	beq.n	800f5ba <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f5b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f005 ff4d 	bl	8015454 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f5ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5bc:	4a06      	ldr	r2, [pc, #24]	; (800f5d8 <LmHandlerJoin+0x140>)
 800f5be:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800f5c0:	bf00      	nop
 800f5c2:	3748      	adds	r7, #72	; 0x48
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	200005a0 	.word	0x200005a0
 800f5cc:	20000094 	.word	0x20000094
 800f5d0:	200006de 	.word	0x200006de
 800f5d4:	01000400 	.word	0x01000400
 800f5d8:	200005e4 	.word	0x200005e4

0800f5dc <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08c      	sub	sp, #48	; 0x30
 800f5e0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f5e6:	1d3b      	adds	r3, r7, #4
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f005 f9b1 	bl	8014950 <LoRaMacMibGetRequestConfirm>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800f5f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d106      	bne.n	800f60a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f5fc:	7a3b      	ldrb	r3, [r7, #8]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d101      	bne.n	800f606 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f602:	2300      	movs	r3, #0
 800f604:	e002      	b.n	800f60c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f606:	2301      	movs	r3, #1
 800f608:	e000      	b.n	800f60c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f60a:	2300      	movs	r3, #0
    }
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3730      	adds	r7, #48	; 0x30
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b08a      	sub	sp, #40	; 0x28
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	460b      	mov	r3, r1
 800f61e:	70fb      	strb	r3, [r7, #3]
 800f620:	4613      	mov	r3, r2
 800f622:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f624:	23ff      	movs	r3, #255	; 0xff
 800f626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800f62a:	f002 faab 	bl	8011b84 <LoRaMacIsBusy>
 800f62e:	4603      	mov	r3, r0
 800f630:	2b00      	cmp	r3, #0
 800f632:	d002      	beq.n	800f63a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f634:	f06f 0301 	mvn.w	r3, #1
 800f638:	e0ab      	b.n	800f792 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800f63a:	f002 facb 	bl	8011bd4 <LoRaMacIsStopped>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f644:	f06f 0302 	mvn.w	r3, #2
 800f648:	e0a3      	b.n	800f792 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f64a:	f7ff ffc7 	bl	800f5dc <LmHandlerJoinStatus>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b01      	cmp	r3, #1
 800f652:	d00a      	beq.n	800f66a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800f654:	4b51      	ldr	r3, [pc, #324]	; (800f79c <LmHandlerSend+0x188>)
 800f656:	79db      	ldrb	r3, [r3, #7]
 800f658:	4a50      	ldr	r2, [pc, #320]	; (800f79c <LmHandlerSend+0x188>)
 800f65a:	7a12      	ldrb	r2, [r2, #8]
 800f65c:	4611      	mov	r1, r2
 800f65e:	4618      	mov	r0, r3
 800f660:	f7ff ff1a 	bl	800f498 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f664:	f06f 0302 	mvn.w	r3, #2
 800f668:	e093      	b.n	800f792 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800f66a:	4a4d      	ldr	r2, [pc, #308]	; (800f7a0 <LmHandlerSend+0x18c>)
 800f66c:	78fb      	ldrb	r3, [r7, #3]
 800f66e:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800f670:	78fb      	ldrb	r3, [r7, #3]
 800f672:	2b00      	cmp	r3, #0
 800f674:	bf14      	ite	ne
 800f676:	2301      	movne	r3, #1
 800f678:	2300      	moveq	r3, #0
 800f67a:	b2db      	uxtb	r3, r3
 800f67c:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f67e:	4b49      	ldr	r3, [pc, #292]	; (800f7a4 <LmHandlerSend+0x190>)
 800f680:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f684:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	785b      	ldrb	r3, [r3, #1]
 800f68a:	f107 020c 	add.w	r2, r7, #12
 800f68e:	4611      	mov	r1, r2
 800f690:	4618      	mov	r0, r3
 800f692:	f005 f8cd 	bl	8014830 <LoRaMacQueryTxPossible>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d009      	beq.n	800f6b0 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f69c:	2300      	movs	r3, #0
 800f69e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800f6a8:	23f9      	movs	r3, #249	; 0xf9
 800f6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6ae:	e009      	b.n	800f6c4 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	785b      	ldrb	r3, [r3, #1]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800f6c4:	4b36      	ldr	r3, [pc, #216]	; (800f7a0 <LmHandlerSend+0x18c>)
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	3310      	adds	r3, #16
 800f6ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6ce:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f6d2:	4b34      	ldr	r3, [pc, #208]	; (800f7a4 <LmHandlerSend+0x190>)
 800f6d4:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f6d8:	4b31      	ldr	r3, [pc, #196]	; (800f7a0 <LmHandlerSend+0x18c>)
 800f6da:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800f6dc:	78ba      	ldrb	r2, [r7, #2]
 800f6de:	f107 0310 	add.w	r3, r7, #16
 800f6e2:	4611      	mov	r1, r2
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f006 f84d 	bl	8015784 <LoRaMacMcpsRequest>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f6f0:	6a3b      	ldr	r3, [r7, #32]
 800f6f2:	4a2d      	ldr	r2, [pc, #180]	; (800f7a8 <LmHandlerSend+0x194>)
 800f6f4:	6013      	str	r3, [r2, #0]

    switch( status )
 800f6f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f6fa:	2b11      	cmp	r3, #17
 800f6fc:	d842      	bhi.n	800f784 <LmHandlerSend+0x170>
 800f6fe:	a201      	add	r2, pc, #4	; (adr r2, 800f704 <LmHandlerSend+0xf0>)
 800f700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f704:	0800f74d 	.word	0x0800f74d
 800f708:	0800f765 	.word	0x0800f765
 800f70c:	0800f785 	.word	0x0800f785
 800f710:	0800f785 	.word	0x0800f785
 800f714:	0800f785 	.word	0x0800f785
 800f718:	0800f785 	.word	0x0800f785
 800f71c:	0800f785 	.word	0x0800f785
 800f720:	0800f76d 	.word	0x0800f76d
 800f724:	0800f785 	.word	0x0800f785
 800f728:	0800f785 	.word	0x0800f785
 800f72c:	0800f785 	.word	0x0800f785
 800f730:	0800f77d 	.word	0x0800f77d
 800f734:	0800f785 	.word	0x0800f785
 800f738:	0800f785 	.word	0x0800f785
 800f73c:	0800f765 	.word	0x0800f765
 800f740:	0800f765 	.word	0x0800f765
 800f744:	0800f765 	.word	0x0800f765
 800f748:	0800f775 	.word	0x0800f775
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800f74c:	4b17      	ldr	r3, [pc, #92]	; (800f7ac <LmHandlerSend+0x198>)
 800f74e:	2200      	movs	r2, #0
 800f750:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800f752:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f756:	f113 0f07 	cmn.w	r3, #7
 800f75a:	d017      	beq.n	800f78c <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f75c:	2300      	movs	r3, #0
 800f75e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800f762:	e013      	b.n	800f78c <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f764:	23fe      	movs	r3, #254	; 0xfe
 800f766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f76a:	e010      	b.n	800f78e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f76c:	23fd      	movs	r3, #253	; 0xfd
 800f76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f772:	e00c      	b.n	800f78e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f774:	23fb      	movs	r3, #251	; 0xfb
 800f776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f77a:	e008      	b.n	800f78e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f77c:	23fa      	movs	r3, #250	; 0xfa
 800f77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f782:	e004      	b.n	800f78e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f784:	23ff      	movs	r3, #255	; 0xff
 800f786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f78a:	e000      	b.n	800f78e <LmHandlerSend+0x17a>
            break;
 800f78c:	bf00      	nop
    }

    return lmhStatus;
 800f78e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f792:	4618      	mov	r0, r3
 800f794:	3728      	adds	r7, #40	; 0x28
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	20000094 	.word	0x20000094
 800f7a0:	200000a0 	.word	0x200000a0
 800f7a4:	200005a0 	.word	0x200005a0
 800f7a8:	200005e4 	.word	0x200005e4
 800f7ac:	200005e8 	.word	0x200005e8

0800f7b0 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b086      	sub	sp, #24
 800f7b4:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f7b6:	2309      	movs	r3, #9
 800f7b8:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f7ba:	463b      	mov	r3, r7
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f005 fe49 	bl	8015454 <LoRaMacMlmeRequest>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	4a06      	ldr	r2, [pc, #24]	; (800f7e4 <LmHandlerDeviceTimeReq+0x34>)
 800f7ca:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800f7cc:	7dfb      	ldrb	r3, [r7, #23]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d101      	bne.n	800f7d6 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e001      	b.n	800f7da <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f7d6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3718      	adds	r7, #24
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	200005e4 	.word	0x200005e4

0800f7e8 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800f7f2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	370c      	adds	r7, #12
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bc80      	pop	{r7}
 800f7fe:	4770      	bx	lr

0800f800 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b08e      	sub	sp, #56	; 0x38
 800f804:	af00      	add	r7, sp, #0
 800f806:	4603      	mov	r3, r0
 800f808:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f80a:	2300      	movs	r3, #0
 800f80c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800f810:	f002 f9b8 	bl	8011b84 <LoRaMacIsBusy>
 800f814:	4603      	mov	r3, r0
 800f816:	2b00      	cmp	r3, #0
 800f818:	d002      	beq.n	800f820 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f81a:	f06f 0301 	mvn.w	r3, #1
 800f81e:	e073      	b.n	800f908 <LmHandlerRequestClass+0x108>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800f820:	f7ff fedc 	bl	800f5dc <LmHandlerJoinStatus>
 800f824:	4603      	mov	r3, r0
 800f826:	2b01      	cmp	r3, #1
 800f828:	d002      	beq.n	800f830 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f82a:	f06f 0302 	mvn.w	r3, #2
 800f82e:	e06b      	b.n	800f908 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f830:	2300      	movs	r3, #0
 800f832:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f834:	f107 030c 	add.w	r3, r7, #12
 800f838:	4618      	mov	r0, r3
 800f83a:	f005 f889 	bl	8014950 <LoRaMacMibGetRequestConfirm>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f844:	f04f 33ff 	mov.w	r3, #4294967295
 800f848:	e05e      	b.n	800f908 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800f84a:	7c3b      	ldrb	r3, [r7, #16]
 800f84c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800f850:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f854:	79fb      	ldrb	r3, [r7, #7]
 800f856:	429a      	cmp	r2, r3
 800f858:	d04d      	beq.n	800f8f6 <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800f85a:	79fb      	ldrb	r3, [r7, #7]
 800f85c:	2b02      	cmp	r3, #2
 800f85e:	d028      	beq.n	800f8b2 <LmHandlerRequestClass+0xb2>
 800f860:	2b02      	cmp	r3, #2
 800f862:	dc4a      	bgt.n	800f8fa <LmHandlerRequestClass+0xfa>
 800f864:	2b00      	cmp	r3, #0
 800f866:	d002      	beq.n	800f86e <LmHandlerRequestClass+0x6e>
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d01e      	beq.n	800f8aa <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800f86c:	e045      	b.n	800f8fa <LmHandlerRequestClass+0xfa>
                    if( currentClass != CLASS_A )
 800f86e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f872:	2b00      	cmp	r3, #0
 800f874:	d043      	beq.n	800f8fe <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800f876:	79fb      	ldrb	r3, [r7, #7]
 800f878:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f87a:	f107 030c 	add.w	r3, r7, #12
 800f87e:	4618      	mov	r0, r3
 800f880:	f005 fa3e 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d10b      	bne.n	800f8a2 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f88a:	4b21      	ldr	r3, [pc, #132]	; (800f910 <LmHandlerRequestClass+0x110>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f890:	2b00      	cmp	r3, #0
 800f892:	d034      	beq.n	800f8fe <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f894:	4b1e      	ldr	r3, [pc, #120]	; (800f910 <LmHandlerRequestClass+0x110>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f89a:	79fa      	ldrb	r2, [r7, #7]
 800f89c:	4610      	mov	r0, r2
 800f89e:	4798      	blx	r3
                break;
 800f8a0:	e02d      	b.n	800f8fe <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f8a2:	23ff      	movs	r3, #255	; 0xff
 800f8a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f8a8:	e029      	b.n	800f8fe <LmHandlerRequestClass+0xfe>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f8aa:	23ff      	movs	r3, #255	; 0xff
 800f8ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f8b0:	e028      	b.n	800f904 <LmHandlerRequestClass+0x104>
                    if( currentClass != CLASS_A )
 800f8b2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d003      	beq.n	800f8c2 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f8ba:	23ff      	movs	r3, #255	; 0xff
 800f8bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f8c0:	e01f      	b.n	800f902 <LmHandlerRequestClass+0x102>
                        mibReq.Param.Class = newClass;
 800f8c2:	79fb      	ldrb	r3, [r7, #7]
 800f8c4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f8c6:	f107 030c 	add.w	r3, r7, #12
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f005 fa18 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d10b      	bne.n	800f8ee <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f8d6:	4b0e      	ldr	r3, [pc, #56]	; (800f910 <LmHandlerRequestClass+0x110>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d010      	beq.n	800f902 <LmHandlerRequestClass+0x102>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f8e0:	4b0b      	ldr	r3, [pc, #44]	; (800f910 <LmHandlerRequestClass+0x110>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e6:	79fa      	ldrb	r2, [r7, #7]
 800f8e8:	4610      	mov	r0, r2
 800f8ea:	4798      	blx	r3
                break;
 800f8ec:	e009      	b.n	800f902 <LmHandlerRequestClass+0x102>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f8ee:	23ff      	movs	r3, #255	; 0xff
 800f8f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f8f4:	e005      	b.n	800f902 <LmHandlerRequestClass+0x102>
        }
    }
 800f8f6:	bf00      	nop
 800f8f8:	e004      	b.n	800f904 <LmHandlerRequestClass+0x104>
                break;
 800f8fa:	bf00      	nop
 800f8fc:	e002      	b.n	800f904 <LmHandlerRequestClass+0x104>
                break;
 800f8fe:	bf00      	nop
 800f900:	e000      	b.n	800f904 <LmHandlerRequestClass+0x104>
                break;
 800f902:	bf00      	nop
    return errorStatus;
 800f904:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3738      	adds	r7, #56	; 0x38
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	200005b8 	.word	0x200005b8

0800f914 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b08c      	sub	sp, #48	; 0x30
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d102      	bne.n	800f928 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f922:	f04f 33ff 	mov.w	r3, #4294967295
 800f926:	e010      	b.n	800f94a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f928:	2300      	movs	r3, #0
 800f92a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f92c:	f107 0308 	add.w	r3, r7, #8
 800f930:	4618      	mov	r0, r3
 800f932:	f005 f80d 	bl	8014950 <LoRaMacMibGetRequestConfirm>
 800f936:	4603      	mov	r3, r0
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d002      	beq.n	800f942 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f93c:	f04f 33ff 	mov.w	r3, #4294967295
 800f940:	e003      	b.n	800f94a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800f942:	7b3a      	ldrb	r2, [r7, #12]
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800f948:	2300      	movs	r3, #0
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3730      	adds	r7, #48	; 0x30
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}
	...

0800f954 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b08c      	sub	sp, #48	; 0x30
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d102      	bne.n	800f968 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f962:	f04f 33ff 	mov.w	r3, #4294967295
 800f966:	e016      	b.n	800f996 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800f968:	2320      	movs	r3, #32
 800f96a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800f96c:	f107 0308 	add.w	r3, r7, #8
 800f970:	4618      	mov	r0, r3
 800f972:	f004 ffed 	bl	8014950 <LoRaMacMibGetRequestConfirm>
 800f976:	4603      	mov	r3, r0
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d002      	beq.n	800f982 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f97c:	f04f 33ff 	mov.w	r3, #4294967295
 800f980:	e009      	b.n	800f996 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800f982:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f993 2000 	ldrsb.w	r2, [r3]
 800f990:	4b03      	ldr	r3, [pc, #12]	; (800f9a0 <LmHandlerGetTxDatarate+0x4c>)
 800f992:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3730      	adds	r7, #48	; 0x30
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	200005a0 	.word	0x200005a0

0800f9a4 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08c      	sub	sp, #48	; 0x30
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800f9ac:	2323      	movs	r3, #35	; 0x23
 800f9ae:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f9b4:	f107 0308 	add.w	r3, r7, #8
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f005 f9a1 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d002      	beq.n	800f9ca <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800f9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f9c8:	e000      	b.n	800f9cc <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3730      	adds	r7, #48	; 0x30
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800f9dc:	4b18      	ldr	r3, [pc, #96]	; (800fa40 <McpsConfirm+0x6c>)
 800f9de:	2201      	movs	r2, #1
 800f9e0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	785a      	ldrb	r2, [r3, #1]
 800f9e6:	4b16      	ldr	r3, [pc, #88]	; (800fa40 <McpsConfirm+0x6c>)
 800f9e8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	789b      	ldrb	r3, [r3, #2]
 800f9ee:	b25a      	sxtb	r2, r3
 800f9f0:	4b13      	ldr	r3, [pc, #76]	; (800fa40 <McpsConfirm+0x6c>)
 800f9f2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	68db      	ldr	r3, [r3, #12]
 800f9f8:	4a11      	ldr	r2, [pc, #68]	; (800fa40 <McpsConfirm+0x6c>)
 800f9fa:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fa02:	4b0f      	ldr	r3, [pc, #60]	; (800fa40 <McpsConfirm+0x6c>)
 800fa04:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	b2da      	uxtb	r2, r3
 800fa0c:	4b0c      	ldr	r3, [pc, #48]	; (800fa40 <McpsConfirm+0x6c>)
 800fa0e:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	791b      	ldrb	r3, [r3, #4]
 800fa14:	461a      	mov	r2, r3
 800fa16:	4b0a      	ldr	r3, [pc, #40]	; (800fa40 <McpsConfirm+0x6c>)
 800fa18:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800fa1a:	4b0a      	ldr	r3, [pc, #40]	; (800fa44 <McpsConfirm+0x70>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d004      	beq.n	800fa2e <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fa24:	4b07      	ldr	r3, [pc, #28]	; (800fa44 <McpsConfirm+0x70>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa2a:	4805      	ldr	r0, [pc, #20]	; (800fa40 <McpsConfirm+0x6c>)
 800fa2c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800fa2e:	6879      	ldr	r1, [r7, #4]
 800fa30:	2000      	movs	r0, #0
 800fa32:	f000 f9e9 	bl	800fe08 <LmHandlerPackagesNotify>
}
 800fa36:	bf00      	nop
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	200000a0 	.word	0x200000a0
 800fa44:	200005b8 	.word	0x200005b8

0800fa48 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b086      	sub	sp, #24
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800fa52:	2300      	movs	r3, #0
 800fa54:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800fa56:	4b2d      	ldr	r3, [pc, #180]	; (800fb0c <McpsIndication+0xc4>)
 800fa58:	2201      	movs	r2, #1
 800fa5a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	785a      	ldrb	r2, [r3, #1]
 800fa60:	4b2a      	ldr	r3, [pc, #168]	; (800fb0c <McpsIndication+0xc4>)
 800fa62:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800fa64:	4b29      	ldr	r3, [pc, #164]	; (800fb0c <McpsIndication+0xc4>)
 800fa66:	785b      	ldrb	r3, [r3, #1]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d14b      	bne.n	800fb04 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	791b      	ldrb	r3, [r3, #4]
 800fa70:	b25a      	sxtb	r2, r3
 800fa72:	4b26      	ldr	r3, [pc, #152]	; (800fb0c <McpsIndication+0xc4>)
 800fa74:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fa7c:	b25a      	sxtb	r2, r3
 800fa7e:	4b23      	ldr	r3, [pc, #140]	; (800fb0c <McpsIndication+0xc4>)
 800fa80:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fa88:	4b20      	ldr	r3, [pc, #128]	; (800fb0c <McpsIndication+0xc4>)
 800fa8a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	78da      	ldrb	r2, [r3, #3]
 800fa90:	4b1e      	ldr	r3, [pc, #120]	; (800fb0c <McpsIndication+0xc4>)
 800fa92:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	691b      	ldr	r3, [r3, #16]
 800fa98:	4a1c      	ldr	r2, [pc, #112]	; (800fb0c <McpsIndication+0xc4>)
 800fa9a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	78db      	ldrb	r3, [r3, #3]
 800faa0:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	7b1b      	ldrb	r3, [r3, #12]
 800faa6:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800faae:	4b18      	ldr	r3, [pc, #96]	; (800fb10 <McpsIndication+0xc8>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d007      	beq.n	800fac8 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800fab8:	4b15      	ldr	r3, [pc, #84]	; (800fb10 <McpsIndication+0xc8>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fabe:	f107 0210 	add.w	r2, r7, #16
 800fac2:	4912      	ldr	r1, [pc, #72]	; (800fb0c <McpsIndication+0xc4>)
 800fac4:	4610      	mov	r0, r2
 800fac6:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800fac8:	4b11      	ldr	r3, [pc, #68]	; (800fb10 <McpsIndication+0xc8>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800face:	2b00      	cmp	r3, #0
 800fad0:	d007      	beq.n	800fae2 <McpsIndication+0x9a>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	7e1b      	ldrb	r3, [r3, #24]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d003      	beq.n	800fae2 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800fada:	4b0d      	ldr	r3, [pc, #52]	; (800fb10 <McpsIndication+0xc8>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae0:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800fae2:	6879      	ldr	r1, [r7, #4]
 800fae4:	2001      	movs	r0, #1
 800fae6:	f000 f98f 	bl	800fe08 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800faea:	f107 030f 	add.w	r3, r7, #15
 800faee:	4618      	mov	r0, r3
 800faf0:	f7ff ff10 	bl	800f914 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	795b      	ldrb	r3, [r3, #5]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d004      	beq.n	800fb06 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800fafc:	4b05      	ldr	r3, [pc, #20]	; (800fb14 <McpsIndication+0xcc>)
 800fafe:	2201      	movs	r2, #1
 800fb00:	701a      	strb	r2, [r3, #0]
 800fb02:	e000      	b.n	800fb06 <McpsIndication+0xbe>
        return;
 800fb04:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}
 800fb0c:	200000bc 	.word	0x200000bc
 800fb10:	200005b8 	.word	0x200005b8
 800fb14:	200005e8 	.word	0x200005e8

0800fb18 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b08c      	sub	sp, #48	; 0x30
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fb20:	4b49      	ldr	r3, [pc, #292]	; (800fc48 <MlmeConfirm+0x130>)
 800fb22:	2200      	movs	r2, #0
 800fb24:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	785a      	ldrb	r2, [r3, #1]
 800fb2a:	4b47      	ldr	r3, [pc, #284]	; (800fc48 <MlmeConfirm+0x130>)
 800fb2c:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800fb2e:	4b47      	ldr	r3, [pc, #284]	; (800fc4c <MlmeConfirm+0x134>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d004      	beq.n	800fb42 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fb38:	4b44      	ldr	r3, [pc, #272]	; (800fc4c <MlmeConfirm+0x134>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb3e:	4842      	ldr	r0, [pc, #264]	; (800fc48 <MlmeConfirm+0x130>)
 800fb40:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800fb42:	6879      	ldr	r1, [r7, #4]
 800fb44:	2002      	movs	r0, #2
 800fb46:	f000 f95f 	bl	800fe08 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	781b      	ldrb	r3, [r3, #0]
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	2b0b      	cmp	r3, #11
 800fb52:	d872      	bhi.n	800fc3a <MlmeConfirm+0x122>
 800fb54:	a201      	add	r2, pc, #4	; (adr r2, 800fb5c <MlmeConfirm+0x44>)
 800fb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb5a:	bf00      	nop
 800fb5c:	0800fb8d 	.word	0x0800fb8d
 800fb60:	0800fc3b 	.word	0x0800fc3b
 800fb64:	0800fc3b 	.word	0x0800fc3b
 800fb68:	0800fc3b 	.word	0x0800fc3b
 800fb6c:	0800fc09 	.word	0x0800fc09
 800fb70:	0800fc3b 	.word	0x0800fc3b
 800fb74:	0800fc3b 	.word	0x0800fc3b
 800fb78:	0800fc3b 	.word	0x0800fc3b
 800fb7c:	0800fc3b 	.word	0x0800fc3b
 800fb80:	0800fc3b 	.word	0x0800fc3b
 800fb84:	0800fc21 	.word	0x0800fc21
 800fb88:	0800fc3b 	.word	0x0800fc3b
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800fb8c:	2306      	movs	r3, #6
 800fb8e:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800fb90:	f107 0308 	add.w	r3, r7, #8
 800fb94:	4618      	mov	r0, r3
 800fb96:	f004 fedb 	bl	8014950 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800fb9a:	4b2d      	ldr	r3, [pc, #180]	; (800fc50 <MlmeConfirm+0x138>)
 800fb9c:	79db      	ldrb	r3, [r3, #7]
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	4611      	mov	r1, r2
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7ff fa76 	bl	800f094 <SecureElementSetDevAddr>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d102      	bne.n	800fbb4 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	4a28      	ldr	r2, [pc, #160]	; (800fc54 <MlmeConfirm+0x13c>)
 800fbb2:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fbb4:	4828      	ldr	r0, [pc, #160]	; (800fc58 <MlmeConfirm+0x140>)
 800fbb6:	f7ff fecd 	bl	800f954 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800fbba:	4828      	ldr	r0, [pc, #160]	; (800fc5c <MlmeConfirm+0x144>)
 800fbbc:	f000 fa76 	bl	80100ac <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fbc0:	4b21      	ldr	r3, [pc, #132]	; (800fc48 <MlmeConfirm+0x130>)
 800fbc2:	785b      	ldrb	r3, [r3, #1]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d108      	bne.n	800fbda <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fbc8:	4b21      	ldr	r3, [pc, #132]	; (800fc50 <MlmeConfirm+0x138>)
 800fbca:	2200      	movs	r2, #0
 800fbcc:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fbce:	4b24      	ldr	r3, [pc, #144]	; (800fc60 <MlmeConfirm+0x148>)
 800fbd0:	785b      	ldrb	r3, [r3, #1]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7ff fe14 	bl	800f800 <LmHandlerRequestClass>
 800fbd8:	e002      	b.n	800fbe0 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800fbda:	4b1d      	ldr	r3, [pc, #116]	; (800fc50 <MlmeConfirm+0x138>)
 800fbdc:	22ff      	movs	r2, #255	; 0xff
 800fbde:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fbe0:	4b1a      	ldr	r3, [pc, #104]	; (800fc4c <MlmeConfirm+0x134>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d004      	beq.n	800fbf4 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fbea:	4b18      	ldr	r3, [pc, #96]	; (800fc4c <MlmeConfirm+0x134>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf0:	4817      	ldr	r0, [pc, #92]	; (800fc50 <MlmeConfirm+0x138>)
 800fbf2:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fbf4:	4b14      	ldr	r3, [pc, #80]	; (800fc48 <MlmeConfirm+0x130>)
 800fbf6:	785b      	ldrb	r3, [r3, #1]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d120      	bne.n	800fc3e <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800fbfc:	4b14      	ldr	r3, [pc, #80]	; (800fc50 <MlmeConfirm+0x138>)
 800fbfe:	79db      	ldrb	r3, [r3, #7]
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fe ffef 	bl	800ebe4 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800fc06:	e01a      	b.n	800fc3e <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800fc08:	4b16      	ldr	r3, [pc, #88]	; (800fc64 <MlmeConfirm+0x14c>)
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	7a1a      	ldrb	r2, [r3, #8]
 800fc12:	4b14      	ldr	r3, [pc, #80]	; (800fc64 <MlmeConfirm+0x14c>)
 800fc14:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	7a5a      	ldrb	r2, [r3, #9]
 800fc1a:	4b12      	ldr	r3, [pc, #72]	; (800fc64 <MlmeConfirm+0x14c>)
 800fc1c:	74da      	strb	r2, [r3, #19]
            }
            break;
 800fc1e:	e00f      	b.n	800fc40 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	785b      	ldrb	r3, [r3, #1]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d105      	bne.n	800fc34 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800fc28:	4b0d      	ldr	r3, [pc, #52]	; (800fc60 <MlmeConfirm+0x148>)
 800fc2a:	7c1b      	ldrb	r3, [r3, #16]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7ff fddb 	bl	800f7e8 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800fc32:	e005      	b.n	800fc40 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800fc34:	f7ff fdbc 	bl	800f7b0 <LmHandlerDeviceTimeReq>
            break;
 800fc38:	e002      	b.n	800fc40 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800fc3a:	bf00      	nop
 800fc3c:	e000      	b.n	800fc40 <MlmeConfirm+0x128>
            break;
 800fc3e:	bf00      	nop
    }
}
 800fc40:	bf00      	nop
 800fc42:	3730      	adds	r7, #48	; 0x30
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}
 800fc48:	200000a0 	.word	0x200000a0
 800fc4c:	200005b8 	.word	0x200005b8
 800fc50:	20000094 	.word	0x20000094
 800fc54:	20000564 	.word	0x20000564
 800fc58:	20000098 	.word	0x20000098
 800fc5c:	20000099 	.word	0x20000099
 800fc60:	200005a0 	.word	0x200005a0
 800fc64:	200000bc 	.word	0x200000bc

0800fc68 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800fc72:	4b20      	ldr	r3, [pc, #128]	; (800fcf4 <MlmeIndication+0x8c>)
 800fc74:	2200      	movs	r2, #0
 800fc76:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	785a      	ldrb	r2, [r3, #1]
 800fc7c:	4b1d      	ldr	r3, [pc, #116]	; (800fcf4 <MlmeIndication+0x8c>)
 800fc7e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	789b      	ldrb	r3, [r3, #2]
 800fc84:	b25a      	sxtb	r2, r3
 800fc86:	4b1b      	ldr	r3, [pc, #108]	; (800fcf4 <MlmeIndication+0x8c>)
 800fc88:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800fc8a:	683b      	ldr	r3, [r7, #0]
 800fc8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fc90:	b25a      	sxtb	r2, r3
 800fc92:	4b18      	ldr	r3, [pc, #96]	; (800fcf4 <MlmeIndication+0x8c>)
 800fc94:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fc9c:	4b15      	ldr	r3, [pc, #84]	; (800fcf4 <MlmeIndication+0x8c>)
 800fc9e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	78da      	ldrb	r2, [r3, #3]
 800fca4:	4b13      	ldr	r3, [pc, #76]	; (800fcf4 <MlmeIndication+0x8c>)
 800fca6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	4a11      	ldr	r2, [pc, #68]	; (800fcf4 <MlmeIndication+0x8c>)
 800fcae:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800fcb0:	4b11      	ldr	r3, [pc, #68]	; (800fcf8 <MlmeIndication+0x90>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d00d      	beq.n	800fcd6 <MlmeIndication+0x6e>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	2b0a      	cmp	r3, #10
 800fcc0:	d009      	beq.n	800fcd6 <MlmeIndication+0x6e>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	781b      	ldrb	r3, [r3, #0]
 800fcc6:	2b0e      	cmp	r3, #14
 800fcc8:	d005      	beq.n	800fcd6 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800fcca:	4b0b      	ldr	r3, [pc, #44]	; (800fcf8 <MlmeIndication+0x90>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd0:	4908      	ldr	r1, [pc, #32]	; (800fcf4 <MlmeIndication+0x8c>)
 800fcd2:	2000      	movs	r0, #0
 800fcd4:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800fcd6:	6879      	ldr	r1, [r7, #4]
 800fcd8:	2003      	movs	r0, #3
 800fcda:	f000 f895 	bl	800fe08 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	781b      	ldrb	r3, [r3, #0]
 800fce2:	2b0a      	cmp	r3, #10
 800fce4:	d001      	beq.n	800fcea <MlmeIndication+0x82>
 800fce6:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800fce8:	e000      	b.n	800fcec <MlmeIndication+0x84>
            break;
 800fcea:	bf00      	nop
    }
}
 800fcec:	bf00      	nop
 800fcee:	3708      	adds	r7, #8
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	200000bc 	.word	0x200000bc
 800fcf8:	200005b8 	.word	0x200005b8

0800fcfc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	4603      	mov	r3, r0
 800fd04:	6039      	str	r1, [r7, #0]
 800fd06:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	60fb      	str	r3, [r7, #12]
    switch( id )
 800fd0c:	79fb      	ldrb	r3, [r7, #7]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d104      	bne.n	800fd1c <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800fd12:	f000 fa8d 	bl	8010230 <LmhpCompliancePackageFactory>
 800fd16:	4603      	mov	r3, r0
 800fd18:	60fb      	str	r3, [r7, #12]
                break;
 800fd1a:	e00d      	b.n	800fd38 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800fd1c:	f107 020c 	add.w	r2, r7, #12
 800fd20:	79fb      	ldrb	r3, [r7, #7]
 800fd22:	4611      	mov	r1, r2
 800fd24:	4618      	mov	r0, r3
 800fd26:	f000 ff75 	bl	8010c14 <LmhpPackagesRegister>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d002      	beq.n	800fd36 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800fd30:	f04f 33ff 	mov.w	r3, #4294967295
 800fd34:	e03b      	b.n	800fdae <LmHandlerPackageRegister+0xb2>
                }
                break;
 800fd36:	bf00      	nop
            }
    }
    if( package != NULL )
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d035      	beq.n	800fdaa <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800fd3e:	79fb      	ldrb	r3, [r7, #7]
 800fd40:	68fa      	ldr	r2, [r7, #12]
 800fd42:	491d      	ldr	r1, [pc, #116]	; (800fdb8 <LmHandlerPackageRegister+0xbc>)
 800fd44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800fd48:	79fb      	ldrb	r3, [r7, #7]
 800fd4a:	4a1b      	ldr	r2, [pc, #108]	; (800fdb8 <LmHandlerPackageRegister+0xbc>)
 800fd4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd50:	4a1a      	ldr	r2, [pc, #104]	; (800fdbc <LmHandlerPackageRegister+0xc0>)
 800fd52:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800fd54:	4b1a      	ldr	r3, [pc, #104]	; (800fdc0 <LmHandlerPackageRegister+0xc4>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	79fb      	ldrb	r3, [r7, #7]
 800fd5a:	4917      	ldr	r1, [pc, #92]	; (800fdb8 <LmHandlerPackageRegister+0xbc>)
 800fd5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fd60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fd62:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800fd64:	4b16      	ldr	r3, [pc, #88]	; (800fdc0 <LmHandlerPackageRegister+0xc4>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	79fb      	ldrb	r3, [r7, #7]
 800fd6a:	4913      	ldr	r1, [pc, #76]	; (800fdb8 <LmHandlerPackageRegister+0xbc>)
 800fd6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fd70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800fd72:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fd74:	79fb      	ldrb	r3, [r7, #7]
 800fd76:	4a10      	ldr	r2, [pc, #64]	; (800fdb8 <LmHandlerPackageRegister+0xbc>)
 800fd78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd7c:	4a11      	ldr	r2, [pc, #68]	; (800fdc4 <LmHandlerPackageRegister+0xc8>)
 800fd7e:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fd80:	4b0f      	ldr	r3, [pc, #60]	; (800fdc0 <LmHandlerPackageRegister+0xc4>)
 800fd82:	681a      	ldr	r2, [r3, #0]
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	490c      	ldr	r1, [pc, #48]	; (800fdb8 <LmHandlerPackageRegister+0xbc>)
 800fd88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fd8c:	6992      	ldr	r2, [r2, #24]
 800fd8e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fd90:	79fb      	ldrb	r3, [r7, #7]
 800fd92:	4a09      	ldr	r2, [pc, #36]	; (800fdb8 <LmHandlerPackageRegister+0xbc>)
 800fd94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	4a0b      	ldr	r2, [pc, #44]	; (800fdc8 <LmHandlerPackageRegister+0xcc>)
 800fd9c:	6851      	ldr	r1, [r2, #4]
 800fd9e:	4a0a      	ldr	r2, [pc, #40]	; (800fdc8 <LmHandlerPackageRegister+0xcc>)
 800fda0:	7852      	ldrb	r2, [r2, #1]
 800fda2:	6838      	ldr	r0, [r7, #0]
 800fda4:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fda6:	2300      	movs	r3, #0
 800fda8:	e001      	b.n	800fdae <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fdaa:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3710      	adds	r7, #16
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	2000058c 	.word	0x2000058c
 800fdbc:	0800f499 	.word	0x0800f499
 800fdc0:	200005b8 	.word	0x200005b8
 800fdc4:	0800f7b1 	.word	0x0800f7b1
 800fdc8:	200000d0 	.word	0x200000d0

0800fdcc <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	2b04      	cmp	r3, #4
 800fdda:	d80e      	bhi.n	800fdfa <LmHandlerPackageIsInitialized+0x2e>
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	4a09      	ldr	r2, [pc, #36]	; (800fe04 <LmHandlerPackageIsInitialized+0x38>)
 800fde0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d007      	beq.n	800fdfa <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fdea:	79fb      	ldrb	r3, [r7, #7]
 800fdec:	4a05      	ldr	r2, [pc, #20]	; (800fe04 <LmHandlerPackageIsInitialized+0x38>)
 800fdee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	4798      	blx	r3
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	e000      	b.n	800fdfc <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800fdfa:	2300      	movs	r3, #0
    }
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	2000058c 	.word	0x2000058c

0800fe08 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	4603      	mov	r3, r0
 800fe10:	6039      	str	r1, [r7, #0]
 800fe12:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fe14:	2300      	movs	r3, #0
 800fe16:	73fb      	strb	r3, [r7, #15]
 800fe18:	e069      	b.n	800feee <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 800fe1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe1e:	4a38      	ldr	r2, [pc, #224]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800fe20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d051      	beq.n	800fecc <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800fe28:	79fb      	ldrb	r3, [r7, #7]
 800fe2a:	2b03      	cmp	r3, #3
 800fe2c:	d850      	bhi.n	800fed0 <LmHandlerPackagesNotify+0xc8>
 800fe2e:	a201      	add	r2, pc, #4	; (adr r2, 800fe34 <LmHandlerPackagesNotify+0x2c>)
 800fe30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe34:	0800fe45 	.word	0x0800fe45
 800fe38:	0800fe67 	.word	0x0800fe67
 800fe3c:	0800fe89 	.word	0x0800fe89
 800fe40:	0800feab 	.word	0x0800feab
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fe44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe48:	4a2d      	ldr	r2, [pc, #180]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800fe4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe4e:	699b      	ldr	r3, [r3, #24]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d03f      	beq.n	800fed4 <LmHandlerPackagesNotify+0xcc>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800fe54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe58:	4a29      	ldr	r2, [pc, #164]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800fe5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	6838      	ldr	r0, [r7, #0]
 800fe62:	4798      	blx	r3
                        }
                        break;
 800fe64:	e036      	b.n	800fed4 <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800fe66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe6a:	4a25      	ldr	r2, [pc, #148]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800fe6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe70:	69db      	ldr	r3, [r3, #28]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d030      	beq.n	800fed8 <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800fe76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe7a:	4a21      	ldr	r2, [pc, #132]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800fe7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe80:	69db      	ldr	r3, [r3, #28]
 800fe82:	6838      	ldr	r0, [r7, #0]
 800fe84:	4798      	blx	r3
                        }
                        break;
 800fe86:	e027      	b.n	800fed8 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800fe88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe8c:	4a1c      	ldr	r2, [pc, #112]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800fe8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe92:	6a1b      	ldr	r3, [r3, #32]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d021      	beq.n	800fedc <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800fe98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe9c:	4a18      	ldr	r2, [pc, #96]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800fe9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fea2:	6a1b      	ldr	r3, [r3, #32]
 800fea4:	6838      	ldr	r0, [r7, #0]
 800fea6:	4798      	blx	r3
                        }
                        break;
 800fea8:	e018      	b.n	800fedc <LmHandlerPackagesNotify+0xd4>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800feaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feae:	4a14      	ldr	r2, [pc, #80]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800feb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d012      	beq.n	800fee0 <LmHandlerPackagesNotify+0xd8>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800feba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800febe:	4a10      	ldr	r2, [pc, #64]	; (800ff00 <LmHandlerPackagesNotify+0xf8>)
 800fec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec6:	6838      	ldr	r0, [r7, #0]
 800fec8:	4798      	blx	r3
                        }
                        break;
 800feca:	e009      	b.n	800fee0 <LmHandlerPackagesNotify+0xd8>
                default:
                    {
                        break;
                    }
            }
        }
 800fecc:	bf00      	nop
 800fece:	e008      	b.n	800fee2 <LmHandlerPackagesNotify+0xda>
                        break;
 800fed0:	bf00      	nop
 800fed2:	e006      	b.n	800fee2 <LmHandlerPackagesNotify+0xda>
                        break;
 800fed4:	bf00      	nop
 800fed6:	e004      	b.n	800fee2 <LmHandlerPackagesNotify+0xda>
                        break;
 800fed8:	bf00      	nop
 800feda:	e002      	b.n	800fee2 <LmHandlerPackagesNotify+0xda>
                        break;
 800fedc:	bf00      	nop
 800fede:	e000      	b.n	800fee2 <LmHandlerPackagesNotify+0xda>
                        break;
 800fee0:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	3301      	adds	r3, #1
 800feea:	b2db      	uxtb	r3, r3
 800feec:	73fb      	strb	r3, [r7, #15]
 800feee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fef2:	2b04      	cmp	r3, #4
 800fef4:	dd91      	ble.n	800fe1a <LmHandlerPackagesNotify+0x12>
    }
}
 800fef6:	bf00      	nop
 800fef8:	bf00      	nop
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	2000058c 	.word	0x2000058c

0800ff04 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	71fb      	strb	r3, [r7, #7]
 800ff0e:	e018      	b.n	800ff42 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800ff10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff14:	4a0f      	ldr	r2, [pc, #60]	; (800ff54 <LmHandlerPackageIsTxPending+0x50>)
 800ff16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00b      	beq.n	800ff36 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800ff1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff22:	4a0c      	ldr	r2, [pc, #48]	; (800ff54 <LmHandlerPackageIsTxPending+0x50>)
 800ff24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff28:	68db      	ldr	r3, [r3, #12]
 800ff2a:	4798      	blx	r3
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800ff32:	2301      	movs	r3, #1
 800ff34:	e00a      	b.n	800ff4c <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	b2db      	uxtb	r3, r3
 800ff40:	71fb      	strb	r3, [r7, #7]
 800ff42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff46:	2b04      	cmp	r3, #4
 800ff48:	dde2      	ble.n	800ff10 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	2000058c 	.word	0x2000058c

0800ff58 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff5e:	2300      	movs	r3, #0
 800ff60:	71fb      	strb	r3, [r7, #7]
 800ff62:	e022      	b.n	800ffaa <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ff64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff68:	4a14      	ldr	r2, [pc, #80]	; (800ffbc <LmHandlerPackagesProcess+0x64>)
 800ff6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d015      	beq.n	800ff9e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ff72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff76:	4a11      	ldr	r2, [pc, #68]	; (800ffbc <LmHandlerPackagesProcess+0x64>)
 800ff78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff7c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00d      	beq.n	800ff9e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ff82:	79fb      	ldrb	r3, [r7, #7]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7ff ff21 	bl	800fdcc <LmHandlerPackageIsInitialized>
 800ff8a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d006      	beq.n	800ff9e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ff90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff94:	4a09      	ldr	r2, [pc, #36]	; (800ffbc <LmHandlerPackagesProcess+0x64>)
 800ff96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff9a:	691b      	ldr	r3, [r3, #16]
 800ff9c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	71fb      	strb	r3, [r7, #7]
 800ffaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffae:	2b04      	cmp	r3, #4
 800ffb0:	ddd8      	ble.n	800ff64 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ffb2:	bf00      	nop
 800ffb4:	bf00      	nop
 800ffb6:	3708      	adds	r7, #8
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	2000058c 	.word	0x2000058c

0800ffc0 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800ffca:	4a09      	ldr	r2, [pc, #36]	; (800fff0 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800ffcc:	79fb      	ldrb	r3, [r7, #7]
 800ffce:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800ffd0:	4b08      	ldr	r3, [pc, #32]	; (800fff4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d005      	beq.n	800ffe6 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800ffda:	4b06      	ldr	r3, [pc, #24]	; (800fff4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe0:	79fa      	ldrb	r2, [r7, #7]
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	4798      	blx	r3
    }
}
 800ffe6:	bf00      	nop
 800ffe8:	3708      	adds	r7, #8
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	200005a0 	.word	0x200005a0
 800fff4:	200005b8 	.word	0x200005b8

0800fff8 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	4603      	mov	r3, r0
 8010000:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8010002:	4a09      	ldr	r2, [pc, #36]	; (8010028 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 8010004:	79fb      	ldrb	r3, [r7, #7]
 8010006:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 8010008:	4b08      	ldr	r3, [pc, #32]	; (801002c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801000e:	2b00      	cmp	r3, #0
 8010010:	d005      	beq.n	801001e <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 8010012:	4b06      	ldr	r3, [pc, #24]	; (801002c <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010018:	79fa      	ldrb	r2, [r7, #7]
 801001a:	4610      	mov	r0, r2
 801001c:	4798      	blx	r3
    }
}
 801001e:	bf00      	nop
 8010020:	3708      	adds	r7, #8
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	200005a0 	.word	0x200005a0
 801002c:	200005b8 	.word	0x200005b8

08010030 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 8010030:	b480      	push	{r7}
 8010032:	b083      	sub	sp, #12
 8010034:	af00      	add	r7, sp, #0
 8010036:	4603      	mov	r3, r0
 8010038:	6039      	str	r1, [r7, #0]
 801003a:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d102      	bne.n	8010048 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8010042:	f04f 33ff 	mov.w	r3, #4294967295
 8010046:	e00e      	b.n	8010066 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 8010048:	79fb      	ldrb	r3, [r7, #7]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d002      	beq.n	8010054 <LmHandlerGetVersion+0x24>
 801004e:	2b01      	cmp	r3, #1
 8010050:	d004      	beq.n	801005c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 8010052:	e007      	b.n	8010064 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	4a06      	ldr	r2, [pc, #24]	; (8010070 <LmHandlerGetVersion+0x40>)
 8010058:	601a      	str	r2, [r3, #0]
            break;
 801005a:	e003      	b.n	8010064 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	4a05      	ldr	r2, [pc, #20]	; (8010074 <LmHandlerGetVersion+0x44>)
 8010060:	601a      	str	r2, [r3, #0]
            break;
 8010062:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010064:	2300      	movs	r3, #0
}
 8010066:	4618      	mov	r0, r3
 8010068:	370c      	adds	r7, #12
 801006a:	46bd      	mov	sp, r7
 801006c:	bc80      	pop	{r7}
 801006e:	4770      	bx	lr
 8010070:	01000400 	.word	0x01000400
 8010074:	02010001 	.word	0x02010001

08010078 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8010078:	b580      	push	{r7, lr}
 801007a:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 801007c:	f005 fce0 	bl	8015a40 <LoRaMacDeInitialization>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d101      	bne.n	801008a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010086:	2300      	movs	r3, #0
 8010088:	e001      	b.n	801008e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801008a:	f06f 0301 	mvn.w	r3, #1
    }
}
 801008e:	4618      	mov	r0, r3
 8010090:	bd80      	pop	{r7, pc}

08010092 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8010092:	b580      	push	{r7, lr}
 8010094:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8010096:	f004 fb93 	bl	80147c0 <LoRaMacHalt>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d101      	bne.n	80100a4 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80100a0:	2300      	movs	r3, #0
 80100a2:	e001      	b.n	80100a8 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 80100a4:	f06f 0301 	mvn.w	r3, #1
    }
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	bd80      	pop	{r7, pc}

080100ac <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b08c      	sub	sp, #48	; 0x30
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d102      	bne.n	80100c0 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80100ba:	f04f 33ff 	mov.w	r3, #4294967295
 80100be:	e016      	b.n	80100ee <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80100c0:	2321      	movs	r3, #33	; 0x21
 80100c2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80100c4:	f107 0308 	add.w	r3, r7, #8
 80100c8:	4618      	mov	r0, r3
 80100ca:	f004 fc41 	bl	8014950 <LoRaMacMibGetRequestConfirm>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80100d4:	f04f 33ff 	mov.w	r3, #4294967295
 80100d8:	e009      	b.n	80100ee <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 80100da:	f997 200c 	ldrsb.w	r2, [r7, #12]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f993 2000 	ldrsb.w	r2, [r3]
 80100e8:	4b03      	ldr	r3, [pc, #12]	; (80100f8 <LmHandlerGetTxPower+0x4c>)
 80100ea:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3730      	adds	r7, #48	; 0x30
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	200005a0 	.word	0x200005a0

080100fc <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08e      	sub	sp, #56	; 0x38
 8010100:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8010102:	2300      	movs	r3, #0
 8010104:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 8010108:	2300      	movs	r3, #0
 801010a:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 801010c:	f7ff ffc1 	bl	8010092 <LmHandlerHalt>
 8010110:	4603      	mov	r3, r0
 8010112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8010116:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801011a:	2b00      	cmp	r3, #0
 801011c:	d12f      	bne.n	801017e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 801011e:	f000 f859 	bl	80101d4 <NvmDataMgmtStoreBegin>
 8010122:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 8010124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010126:	f113 0f02 	cmn.w	r3, #2
 801012a:	d103      	bne.n	8010134 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 801012c:	23f8      	movs	r3, #248	; 0xf8
 801012e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010132:	e01c      	b.n	801016e <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8010134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010136:	2b00      	cmp	r3, #0
 8010138:	d104      	bne.n	8010144 <LmHandlerNvmDataStore+0x48>
 801013a:	4b1b      	ldr	r3, [pc, #108]	; (80101a8 <LmHandlerNvmDataStore+0xac>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	695b      	ldr	r3, [r3, #20]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d103      	bne.n	801014c <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010144:	23ff      	movs	r3, #255	; 0xff
 8010146:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801014a:	e010      	b.n	801016e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 801014c:	2327      	movs	r3, #39	; 0x27
 801014e:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8010150:	463b      	mov	r3, r7
 8010152:	4618      	mov	r0, r3
 8010154:	f004 fbfc 	bl	8014950 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 801015c:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 8010160:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 8010162:	4b11      	ldr	r3, [pc, #68]	; (80101a8 <LmHandlerNvmDataStore+0xac>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	695b      	ldr	r3, [r3, #20]
 8010168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801016a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801016c:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 801016e:	f000 f847 	bl	8010200 <NvmDataMgmtStoreEnd>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d002      	beq.n	801017e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8010178:	23ff      	movs	r3, #255	; 0xff
 801017a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 801017e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010182:	2b00      	cmp	r3, #0
 8010184:	d109      	bne.n	801019a <LmHandlerNvmDataStore+0x9e>
 8010186:	4b08      	ldr	r3, [pc, #32]	; (80101a8 <LmHandlerNvmDataStore+0xac>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	69db      	ldr	r3, [r3, #28]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d004      	beq.n	801019a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8010190:	4b05      	ldr	r3, [pc, #20]	; (80101a8 <LmHandlerNvmDataStore+0xac>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	69db      	ldr	r3, [r3, #28]
 8010196:	2001      	movs	r0, #1
 8010198:	4798      	blx	r3
    }

    return lmhStatus;
 801019a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3738      	adds	r7, #56	; 0x38
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	200005b8 	.word	0x200005b8

080101ac <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80101ac:	b480      	push	{r7}
 80101ae:	b083      	sub	sp, #12
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	4603      	mov	r3, r0
 80101b4:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80101b6:	4b06      	ldr	r3, [pc, #24]	; (80101d0 <NvmDataMgmtEvent+0x24>)
 80101b8:	881a      	ldrh	r2, [r3, #0]
 80101ba:	88fb      	ldrh	r3, [r7, #6]
 80101bc:	4313      	orrs	r3, r2
 80101be:	b29a      	uxth	r2, r3
 80101c0:	4b03      	ldr	r3, [pc, #12]	; (80101d0 <NvmDataMgmtEvent+0x24>)
 80101c2:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80101c4:	bf00      	nop
 80101c6:	370c      	adds	r7, #12
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bc80      	pop	{r7}
 80101cc:	4770      	bx	lr
 80101ce:	bf00      	nop
 80101d0:	200006e0 	.word	0x200006e0

080101d4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 80101d8:	4b08      	ldr	r3, [pc, #32]	; (80101fc <NvmDataMgmtStoreBegin+0x28>)
 80101da:	881b      	ldrh	r3, [r3, #0]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d102      	bne.n	80101e6 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 80101e0:	f06f 0301 	mvn.w	r3, #1
 80101e4:	e008      	b.n	80101f8 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 80101e6:	f004 fac3 	bl	8014770 <LoRaMacStop>
 80101ea:	4603      	mov	r3, r0
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d002      	beq.n	80101f6 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 80101f0:	f06f 0302 	mvn.w	r3, #2
 80101f4:	e000      	b.n	80101f8 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 80101f6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	200006e0 	.word	0x200006e0

08010200 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8010200:	b580      	push	{r7, lr}
 8010202:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8010204:	4b03      	ldr	r3, [pc, #12]	; (8010214 <NvmDataMgmtStoreEnd+0x14>)
 8010206:	2200      	movs	r2, #0
 8010208:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 801020a:	f004 faa3 	bl	8014754 <LoRaMacStart>
    return NVM_DATA_OK;
 801020e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010210:	4618      	mov	r0, r3
 8010212:	bd80      	pop	{r7, pc}
 8010214:	200006e0 	.word	0x200006e0

08010218 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 801021c:	2220      	movs	r2, #32
 801021e:	2100      	movs	r1, #0
 8010220:	4802      	ldr	r0, [pc, #8]	; (801022c <ClassBStatusReset+0x14>)
 8010222:	f00b fb05 	bl	801b830 <memset1>
}
 8010226:	bf00      	nop
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	200006f8 	.word	0x200006f8

08010230 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8010230:	b480      	push	{r7}
 8010232:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 8010234:	4b02      	ldr	r3, [pc, #8]	; (8010240 <LmhpCompliancePackageFactory+0x10>)
}
 8010236:	4618      	mov	r0, r3
 8010238:	46bd      	mov	sp, r7
 801023a:	bc80      	pop	{r7}
 801023c:	4770      	bx	lr
 801023e:	bf00      	nop
 8010240:	200000d8 	.word	0x200000d8

08010244 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b086      	sub	sp, #24
 8010248:	af02      	add	r7, sp, #8
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	4613      	mov	r3, r2
 8010250:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d018      	beq.n	801028a <LmhpComplianceInit+0x46>
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d015      	beq.n	801028a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 801025e:	4a19      	ldr	r2, [pc, #100]	; (80102c4 <LmhpComplianceInit+0x80>)
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 8010264:	4a18      	ldr	r2, [pc, #96]	; (80102c8 <LmhpComplianceInit+0x84>)
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 801026a:	4a17      	ldr	r2, [pc, #92]	; (80102c8 <LmhpComplianceInit+0x84>)
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 8010270:	4b15      	ldr	r3, [pc, #84]	; (80102c8 <LmhpComplianceInit+0x84>)
 8010272:	2201      	movs	r2, #1
 8010274:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8010276:	2300      	movs	r3, #0
 8010278:	9300      	str	r3, [sp, #0]
 801027a:	4b14      	ldr	r3, [pc, #80]	; (80102cc <LmhpComplianceInit+0x88>)
 801027c:	2200      	movs	r2, #0
 801027e:	f04f 31ff 	mov.w	r1, #4294967295
 8010282:	4813      	ldr	r0, [pc, #76]	; (80102d0 <LmhpComplianceInit+0x8c>)
 8010284:	f00f fa54 	bl	801f730 <UTIL_TIMER_Create>
 8010288:	e005      	b.n	8010296 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 801028a:	4b0e      	ldr	r3, [pc, #56]	; (80102c4 <LmhpComplianceInit+0x80>)
 801028c:	2200      	movs	r2, #0
 801028e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 8010290:	4b0d      	ldr	r3, [pc, #52]	; (80102c8 <LmhpComplianceInit+0x84>)
 8010292:	2200      	movs	r2, #0
 8010294:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 8010296:	4b0c      	ldr	r3, [pc, #48]	; (80102c8 <LmhpComplianceInit+0x84>)
 8010298:	2200      	movs	r2, #0
 801029a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 801029c:	f7ff ffbc 	bl	8010218 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 80102a0:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <LmhpComplianceInit+0x84>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 80102a6:	4b08      	ldr	r3, [pc, #32]	; (80102c8 <LmhpComplianceInit+0x84>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 80102ac:	4b06      	ldr	r3, [pc, #24]	; (80102c8 <LmhpComplianceInit+0x84>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 80102b4:	4b04      	ldr	r3, [pc, #16]	; (80102c8 <LmhpComplianceInit+0x84>)
 80102b6:	2200      	movs	r2, #0
 80102b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 80102bc:	bf00      	nop
 80102be:	3710      	adds	r7, #16
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	2000071c 	.word	0x2000071c
 80102c8:	200006e4 	.word	0x200006e4
 80102cc:	08010bcd 	.word	0x08010bcd
 80102d0:	20000720 	.word	0x20000720

080102d4 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80102d4:	b480      	push	{r7}
 80102d6:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80102d8:	4b02      	ldr	r3, [pc, #8]	; (80102e4 <LmhpComplianceIsInitialized+0x10>)
 80102da:	781b      	ldrb	r3, [r3, #0]
}
 80102dc:	4618      	mov	r0, r3
 80102de:	46bd      	mov	sp, r7
 80102e0:	bc80      	pop	{r7}
 80102e2:	4770      	bx	lr
 80102e4:	200006e4 	.word	0x200006e4

080102e8 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 80102e8:	b480      	push	{r7}
 80102ea:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 80102ec:	4b02      	ldr	r3, [pc, #8]	; (80102f8 <LmhpComplianceIsTxPending+0x10>)
 80102ee:	785b      	ldrb	r3, [r3, #1]
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bc80      	pop	{r7}
 80102f6:	4770      	bx	lr
 80102f8:	200006e4 	.word	0x200006e4

080102fc <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 80102fc:	b590      	push	{r4, r7, lr}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 8010302:	4b33      	ldr	r3, [pc, #204]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010304:	785b      	ldrb	r3, [r3, #1]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d03e      	beq.n	8010388 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 801030a:	f00f fbcf 	bl	801faac <UTIL_TIMER_GetCurrentTime>
 801030e:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8010310:	4b2f      	ldr	r3, [pc, #188]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010312:	685c      	ldr	r4, [r3, #4]
 8010314:	f7ff f8b6 	bl	800f484 <LmHandlerGetDutyCycleWaitTime>
 8010318:	4603      	mov	r3, r0
 801031a:	4423      	add	r3, r4
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	429a      	cmp	r2, r3
 8010320:	d941      	bls.n	80103a6 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 8010322:	4b2b      	ldr	r3, [pc, #172]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010324:	7a9b      	ldrb	r3, [r3, #10]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d03d      	beq.n	80103a6 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 801032a:	23e0      	movs	r3, #224	; 0xe0
 801032c:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 801032e:	4b28      	ldr	r3, [pc, #160]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010330:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 8010332:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8010334:	4b26      	ldr	r3, [pc, #152]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010336:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 8010338:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 801033a:	23ff      	movs	r3, #255	; 0xff
 801033c:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 801033e:	4b24      	ldr	r3, [pc, #144]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010340:	7a19      	ldrb	r1, [r3, #8]
 8010342:	463b      	mov	r3, r7
 8010344:	2201      	movs	r2, #1
 8010346:	4618      	mov	r0, r3
 8010348:	f7ff f964 	bl	800f614 <LmHandlerSend>
 801034c:	4603      	mov	r3, r0
 801034e:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8010350:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d004      	beq.n	8010362 <LmhpComplianceProcess+0x66>
 8010358:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801035c:	f113 0f07 	cmn.w	r3, #7
 8010360:	d106      	bne.n	8010370 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 8010362:	4b1b      	ldr	r3, [pc, #108]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010364:	2200      	movs	r2, #0
 8010366:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8010368:	4b19      	ldr	r3, [pc, #100]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 801036a:	2200      	movs	r2, #0
 801036c:	729a      	strb	r2, [r3, #10]
 801036e:	e007      	b.n	8010380 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 8010370:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8010374:	4817      	ldr	r0, [pc, #92]	; (80103d4 <LmhpComplianceProcess+0xd8>)
 8010376:	f00f faef 	bl	801f958 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 801037a:	4816      	ldr	r0, [pc, #88]	; (80103d4 <LmhpComplianceProcess+0xd8>)
 801037c:	f00f fa0e 	bl	801f79c <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 8010380:	4a13      	ldr	r2, [pc, #76]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	6053      	str	r3, [r2, #4]
 8010386:	e00e      	b.n	80103a6 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8010388:	4b11      	ldr	r3, [pc, #68]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 801038a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801038e:	2b00      	cmp	r3, #0
 8010390:	d009      	beq.n	80103a6 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 8010392:	4b0f      	ldr	r3, [pc, #60]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 8010394:	2200      	movs	r2, #0
 8010396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 801039a:	4b0d      	ldr	r3, [pc, #52]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 801039c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80103a0:	4618      	mov	r0, r3
 80103a2:	f7ff fa2d 	bl	800f800 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 80103a6:	4b0a      	ldr	r3, [pc, #40]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 80103a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d00a      	beq.n	80103c6 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 80103b0:	4b07      	ldr	r3, [pc, #28]	; (80103d0 <LmhpComplianceProcess+0xd4>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 80103b8:	4b07      	ldr	r3, [pc, #28]	; (80103d8 <LmhpComplianceProcess+0xdc>)
 80103ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d002      	beq.n	80103c6 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 80103c0:	4b05      	ldr	r3, [pc, #20]	; (80103d8 <LmhpComplianceProcess+0xdc>)
 80103c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103c4:	4798      	blx	r3
        }
    }
}
 80103c6:	bf00      	nop
 80103c8:	3714      	adds	r7, #20
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd90      	pop	{r4, r7, pc}
 80103ce:	bf00      	nop
 80103d0:	200006e4 	.word	0x200006e4
 80103d4:	20000720 	.word	0x20000720
 80103d8:	200000d8 	.word	0x200000d8

080103dc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80103dc:	b5b0      	push	{r4, r5, r7, lr}
 80103de:	b0a4      	sub	sp, #144	; 0x90
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 80103e4:	2300      	movs	r3, #0
 80103e6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 80103ea:	4bd0      	ldr	r3, [pc, #832]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	f083 0301 	eor.w	r3, r3, #1
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	f040 83bf 	bne.w	8010b78 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	78db      	ldrb	r3, [r3, #3]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d103      	bne.n	801040a <LmhpComplianceOnMcpsIndication+0x2e>
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	7b9b      	ldrb	r3, [r3, #14]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d005      	beq.n	8010416 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 801040a:	4bc8      	ldr	r3, [pc, #800]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 801040c:	8a1b      	ldrh	r3, [r3, #16]
 801040e:	3301      	adds	r3, #1
 8010410:	b29a      	uxth	r2, r3
 8010412:	4bc6      	ldr	r3, [pc, #792]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 8010414:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	7b5b      	ldrb	r3, [r3, #13]
 801041a:	f083 0301 	eor.w	r3, r3, #1
 801041e:	b2db      	uxtb	r3, r3
 8010420:	2b00      	cmp	r3, #0
 8010422:	f040 83ab 	bne.w	8010b7c <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	78db      	ldrb	r3, [r3, #3]
 801042a:	2be0      	cmp	r3, #224	; 0xe0
 801042c:	f040 83a8 	bne.w	8010b80 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 8010430:	4bbe      	ldr	r3, [pc, #760]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 8010432:	2200      	movs	r2, #0
 8010434:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	689a      	ldr	r2, [r3, #8]
 801043a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801043e:	1c59      	adds	r1, r3, #1
 8010440:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010444:	4413      	add	r3, r2
 8010446:	781b      	ldrb	r3, [r3, #0]
 8010448:	2b7f      	cmp	r3, #127	; 0x7f
 801044a:	f200 8372 	bhi.w	8010b32 <LmhpComplianceOnMcpsIndication+0x756>
 801044e:	a201      	add	r2, pc, #4	; (adr r2, 8010454 <LmhpComplianceOnMcpsIndication+0x78>)
 8010450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010454:	08010655 	.word	0x08010655
 8010458:	08010699 	.word	0x08010699
 801045c:	080106a3 	.word	0x080106a3
 8010460:	080106b9 	.word	0x080106b9
 8010464:	080106db 	.word	0x080106db
 8010468:	08010709 	.word	0x08010709
 801046c:	08010735 	.word	0x08010735
 8010470:	08010793 	.word	0x08010793
 8010474:	080107eb 	.word	0x080107eb
 8010478:	08010857 	.word	0x08010857
 801047c:	080108a7 	.word	0x080108a7
 8010480:	08010b33 	.word	0x08010b33
 8010484:	08010b33 	.word	0x08010b33
 8010488:	08010b33 	.word	0x08010b33
 801048c:	08010b33 	.word	0x08010b33
 8010490:	08010b33 	.word	0x08010b33
 8010494:	08010b33 	.word	0x08010b33
 8010498:	08010b33 	.word	0x08010b33
 801049c:	08010b33 	.word	0x08010b33
 80104a0:	08010b33 	.word	0x08010b33
 80104a4:	08010b33 	.word	0x08010b33
 80104a8:	08010b33 	.word	0x08010b33
 80104ac:	08010b33 	.word	0x08010b33
 80104b0:	08010b33 	.word	0x08010b33
 80104b4:	08010b33 	.word	0x08010b33
 80104b8:	08010b33 	.word	0x08010b33
 80104bc:	08010b33 	.word	0x08010b33
 80104c0:	08010b33 	.word	0x08010b33
 80104c4:	08010b33 	.word	0x08010b33
 80104c8:	08010b33 	.word	0x08010b33
 80104cc:	08010b33 	.word	0x08010b33
 80104d0:	08010b33 	.word	0x08010b33
 80104d4:	080108af 	.word	0x080108af
 80104d8:	080108c1 	.word	0x080108c1
 80104dc:	080108c9 	.word	0x080108c9
 80104e0:	08010b33 	.word	0x08010b33
 80104e4:	08010b33 	.word	0x08010b33
 80104e8:	08010b33 	.word	0x08010b33
 80104ec:	08010b33 	.word	0x08010b33
 80104f0:	08010b33 	.word	0x08010b33
 80104f4:	08010b33 	.word	0x08010b33
 80104f8:	08010b33 	.word	0x08010b33
 80104fc:	08010b33 	.word	0x08010b33
 8010500:	08010b33 	.word	0x08010b33
 8010504:	08010b33 	.word	0x08010b33
 8010508:	08010b33 	.word	0x08010b33
 801050c:	08010b33 	.word	0x08010b33
 8010510:	08010b33 	.word	0x08010b33
 8010514:	08010b33 	.word	0x08010b33
 8010518:	08010b33 	.word	0x08010b33
 801051c:	08010b33 	.word	0x08010b33
 8010520:	08010b33 	.word	0x08010b33
 8010524:	08010b33 	.word	0x08010b33
 8010528:	08010b33 	.word	0x08010b33
 801052c:	08010b33 	.word	0x08010b33
 8010530:	08010b33 	.word	0x08010b33
 8010534:	08010b33 	.word	0x08010b33
 8010538:	08010b33 	.word	0x08010b33
 801053c:	08010b33 	.word	0x08010b33
 8010540:	08010b33 	.word	0x08010b33
 8010544:	08010b33 	.word	0x08010b33
 8010548:	08010b33 	.word	0x08010b33
 801054c:	08010b33 	.word	0x08010b33
 8010550:	08010b33 	.word	0x08010b33
 8010554:	08010b33 	.word	0x08010b33
 8010558:	08010b33 	.word	0x08010b33
 801055c:	08010b33 	.word	0x08010b33
 8010560:	08010b33 	.word	0x08010b33
 8010564:	08010b33 	.word	0x08010b33
 8010568:	08010b33 	.word	0x08010b33
 801056c:	08010b33 	.word	0x08010b33
 8010570:	08010b33 	.word	0x08010b33
 8010574:	08010b33 	.word	0x08010b33
 8010578:	08010b33 	.word	0x08010b33
 801057c:	08010b33 	.word	0x08010b33
 8010580:	08010b33 	.word	0x08010b33
 8010584:	08010b33 	.word	0x08010b33
 8010588:	08010b33 	.word	0x08010b33
 801058c:	08010b33 	.word	0x08010b33
 8010590:	08010b33 	.word	0x08010b33
 8010594:	08010b33 	.word	0x08010b33
 8010598:	08010b33 	.word	0x08010b33
 801059c:	08010b33 	.word	0x08010b33
 80105a0:	08010b33 	.word	0x08010b33
 80105a4:	08010b33 	.word	0x08010b33
 80105a8:	08010b33 	.word	0x08010b33
 80105ac:	08010b33 	.word	0x08010b33
 80105b0:	08010b33 	.word	0x08010b33
 80105b4:	08010b33 	.word	0x08010b33
 80105b8:	08010b33 	.word	0x08010b33
 80105bc:	08010b33 	.word	0x08010b33
 80105c0:	08010b33 	.word	0x08010b33
 80105c4:	08010b33 	.word	0x08010b33
 80105c8:	08010b33 	.word	0x08010b33
 80105cc:	08010b33 	.word	0x08010b33
 80105d0:	08010b33 	.word	0x08010b33
 80105d4:	08010b33 	.word	0x08010b33
 80105d8:	08010b33 	.word	0x08010b33
 80105dc:	08010b33 	.word	0x08010b33
 80105e0:	08010b33 	.word	0x08010b33
 80105e4:	08010b33 	.word	0x08010b33
 80105e8:	08010b33 	.word	0x08010b33
 80105ec:	08010b33 	.word	0x08010b33
 80105f0:	08010b33 	.word	0x08010b33
 80105f4:	08010b33 	.word	0x08010b33
 80105f8:	08010b33 	.word	0x08010b33
 80105fc:	08010b33 	.word	0x08010b33
 8010600:	08010b33 	.word	0x08010b33
 8010604:	08010b33 	.word	0x08010b33
 8010608:	08010b33 	.word	0x08010b33
 801060c:	08010b33 	.word	0x08010b33
 8010610:	08010b33 	.word	0x08010b33
 8010614:	08010b33 	.word	0x08010b33
 8010618:	08010b33 	.word	0x08010b33
 801061c:	08010b33 	.word	0x08010b33
 8010620:	08010b33 	.word	0x08010b33
 8010624:	08010b33 	.word	0x08010b33
 8010628:	08010b33 	.word	0x08010b33
 801062c:	08010b33 	.word	0x08010b33
 8010630:	08010b33 	.word	0x08010b33
 8010634:	08010b33 	.word	0x08010b33
 8010638:	08010b33 	.word	0x08010b33
 801063c:	08010b33 	.word	0x08010b33
 8010640:	08010b33 	.word	0x08010b33
 8010644:	08010b33 	.word	0x08010b33
 8010648:	080108fb 	.word	0x080108fb
 801064c:	080109ab 	.word	0x080109ab
 8010650:	080109dd 	.word	0x080109dd
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8010654:	4b35      	ldr	r3, [pc, #212]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 8010656:	68da      	ldr	r2, [r3, #12]
 8010658:	4b34      	ldr	r3, [pc, #208]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 801065a:	7a9b      	ldrb	r3, [r3, #10]
 801065c:	1c59      	adds	r1, r3, #1
 801065e:	b2c8      	uxtb	r0, r1
 8010660:	4932      	ldr	r1, [pc, #200]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 8010662:	7288      	strb	r0, [r1, #10]
 8010664:	4413      	add	r3, r2
 8010666:	2200      	movs	r2, #0
 8010668:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 801066a:	4b30      	ldr	r3, [pc, #192]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 801066c:	68da      	ldr	r2, [r3, #12]
 801066e:	4b2f      	ldr	r3, [pc, #188]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 8010670:	7a9b      	ldrb	r3, [r3, #10]
 8010672:	1c59      	adds	r1, r3, #1
 8010674:	b2c8      	uxtb	r0, r1
 8010676:	492d      	ldr	r1, [pc, #180]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 8010678:	7288      	strb	r0, [r1, #10]
 801067a:	4413      	add	r3, r2
 801067c:	2206      	movs	r2, #6
 801067e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8010680:	4b2a      	ldr	r3, [pc, #168]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 8010682:	68da      	ldr	r2, [r3, #12]
 8010684:	4b29      	ldr	r3, [pc, #164]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 8010686:	7a9b      	ldrb	r3, [r3, #10]
 8010688:	1c59      	adds	r1, r3, #1
 801068a:	b2c8      	uxtb	r0, r1
 801068c:	4927      	ldr	r1, [pc, #156]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 801068e:	7288      	strb	r0, [r1, #10]
 8010690:	4413      	add	r3, r2
 8010692:	2201      	movs	r2, #1
 8010694:	701a      	strb	r2, [r3, #0]
                break;
 8010696:	e257      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 8010698:	4b24      	ldr	r3, [pc, #144]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 801069a:	2201      	movs	r2, #1
 801069c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 80106a0:	e252      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 80106a2:	4b23      	ldr	r3, [pc, #140]	; (8010730 <LmhpComplianceOnMcpsIndication+0x354>)
 80106a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	f000 8245 	beq.w	8010b36 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 80106ac:	4b20      	ldr	r3, [pc, #128]	; (8010730 <LmhpComplianceOnMcpsIndication+0x354>)
 80106ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106b0:	2101      	movs	r1, #1
 80106b2:	2002      	movs	r0, #2
 80106b4:	4798      	blx	r3
                }
                break;
 80106b6:	e23e      	b.n	8010b36 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	689a      	ldr	r2, [r3, #8]
 80106bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80106c0:	1c59      	adds	r1, r3, #1
 80106c2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80106c6:	4413      	add	r3, r2
 80106c8:	781a      	ldrb	r2, [r3, #0]
 80106ca:	4b18      	ldr	r3, [pc, #96]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 80106cc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 80106d0:	4b16      	ldr	r3, [pc, #88]	; (801072c <LmhpComplianceOnMcpsIndication+0x350>)
 80106d2:	2201      	movs	r2, #1
 80106d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 80106d8:	e236      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 80106da:	2304      	movs	r3, #4
 80106dc:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	689a      	ldr	r2, [r3, #8]
 80106e2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80106e6:	1c59      	adds	r1, r3, #1
 80106e8:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80106ec:	4413      	add	r3, r2
 80106ee:	781b      	ldrb	r3, [r3, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	bf14      	ite	ne
 80106f4:	2301      	movne	r3, #1
 80106f6:	2300      	moveq	r3, #0
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 80106fc:	f107 0308 	add.w	r3, r7, #8
 8010700:	4618      	mov	r0, r3
 8010702:	f004 fafd 	bl	8014d00 <LoRaMacMibSetRequestConfirm>
                break;
 8010706:	e21f      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	689a      	ldr	r2, [r3, #8]
 801070c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010710:	1c59      	adds	r1, r3, #1
 8010712:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010716:	4413      	add	r3, r2
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	2b00      	cmp	r3, #0
 801071c:	bf14      	ite	ne
 801071e:	2301      	movne	r3, #1
 8010720:	2300      	moveq	r3, #0
 8010722:	b2db      	uxtb	r3, r3
 8010724:	4618      	mov	r0, r3
 8010726:	f005 f965 	bl	80159f4 <LoRaMacTestSetDutyCycleOn>
                break;
 801072a:	e20d      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
 801072c:	200006e4 	.word	0x200006e4
 8010730:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8010734:	4ba5      	ldr	r3, [pc, #660]	; (80109cc <LmhpComplianceOnMcpsIndication+0x5f0>)
 8010736:	f107 0408 	add.w	r4, r7, #8
 801073a:	461d      	mov	r5, r3
 801073c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801073e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	689a      	ldr	r2, [r3, #8]
 8010750:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010754:	1c59      	adds	r1, r3, #1
 8010756:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801075a:	4413      	add	r3, r2
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8010762:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010766:	2b0a      	cmp	r3, #10
 8010768:	f200 81e7 	bhi.w	8010b3a <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 801076c:	4b98      	ldr	r3, [pc, #608]	; (80109d0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	f000 81e1 	beq.w	8010b3a <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8010778:	4b95      	ldr	r3, [pc, #596]	; (80109d0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	685a      	ldr	r2, [r3, #4]
 801077e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010782:	009b      	lsls	r3, r3, #2
 8010784:	3390      	adds	r3, #144	; 0x90
 8010786:	443b      	add	r3, r7
 8010788:	f853 3c88 	ldr.w	r3, [r3, #-136]
 801078c:	4618      	mov	r0, r3
 801078e:	4790      	blx	r2
                    }
                }
                break;
 8010790:	e1d3      	b.n	8010b3a <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	689a      	ldr	r2, [r3, #8]
 8010796:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801079a:	1c59      	adds	r1, r3, #1
 801079c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80107a0:	4413      	add	r3, r2
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 80107a8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d004      	beq.n	80107ba <LmhpComplianceOnMcpsIndication+0x3de>
 80107b0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80107b4:	2b02      	cmp	r3, #2
 80107b6:	f040 81c2 	bne.w	8010b3e <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80107ba:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80107be:	2b01      	cmp	r3, #1
 80107c0:	bf14      	ite	ne
 80107c2:	2301      	movne	r3, #1
 80107c4:	2300      	moveq	r3, #0
 80107c6:	b2db      	uxtb	r3, r3
 80107c8:	461a      	mov	r2, r3
 80107ca:	4b82      	ldr	r3, [pc, #520]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107cc:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 80107ce:	4b80      	ldr	r3, [pc, #512]	; (80109d0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	689b      	ldr	r3, [r3, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	f000 81b2 	beq.w	8010b3e <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 80107da:	4b7d      	ldr	r3, [pc, #500]	; (80109d0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	4a7c      	ldr	r2, [pc, #496]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107e2:	7a12      	ldrb	r2, [r2, #8]
 80107e4:	4610      	mov	r0, r2
 80107e6:	4798      	blx	r3
                    }
                }
                break;
 80107e8:	e1a9      	b.n	8010b3e <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 80107ea:	4b7a      	ldr	r3, [pc, #488]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107ec:	68da      	ldr	r2, [r3, #12]
 80107ee:	4b79      	ldr	r3, [pc, #484]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107f0:	7a9b      	ldrb	r3, [r3, #10]
 80107f2:	1c59      	adds	r1, r3, #1
 80107f4:	b2c8      	uxtb	r0, r1
 80107f6:	4977      	ldr	r1, [pc, #476]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80107f8:	7288      	strb	r0, [r1, #10]
 80107fa:	4413      	add	r3, r2
 80107fc:	2208      	movs	r2, #8
 80107fe:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8010800:	2301      	movs	r3, #1
 8010802:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8010806:	e019      	b.n	801083c <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	689a      	ldr	r2, [r3, #8]
 801080c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010810:	1c59      	adds	r1, r3, #1
 8010812:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010816:	4413      	add	r3, r2
 8010818:	781a      	ldrb	r2, [r3, #0]
 801081a:	4b6e      	ldr	r3, [pc, #440]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801081c:	68d9      	ldr	r1, [r3, #12]
 801081e:	4b6d      	ldr	r3, [pc, #436]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010820:	7a9b      	ldrb	r3, [r3, #10]
 8010822:	1c58      	adds	r0, r3, #1
 8010824:	b2c4      	uxtb	r4, r0
 8010826:	486b      	ldr	r0, [pc, #428]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010828:	7284      	strb	r4, [r0, #10]
 801082a:	440b      	add	r3, r1
 801082c:	3201      	adds	r2, #1
 801082e:	b2d2      	uxtb	r2, r2
 8010830:	701a      	strb	r2, [r3, #0]
                     i++ )
 8010832:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010836:	3301      	adds	r3, #1
 8010838:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 801083c:	4b65      	ldr	r3, [pc, #404]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801083e:	7a5a      	ldrb	r2, [r3, #9]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	7b1b      	ldrb	r3, [r3, #12]
 8010844:	4293      	cmp	r3, r2
 8010846:	bf28      	it	cs
 8010848:	4613      	movcs	r3, r2
 801084a:	b2db      	uxtb	r3, r3
 801084c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8010850:	429a      	cmp	r2, r3
 8010852:	d3d9      	bcc.n	8010808 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 8010854:	e178      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8010856:	4b5f      	ldr	r3, [pc, #380]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010858:	68da      	ldr	r2, [r3, #12]
 801085a:	4b5e      	ldr	r3, [pc, #376]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801085c:	7a9b      	ldrb	r3, [r3, #10]
 801085e:	1c59      	adds	r1, r3, #1
 8010860:	b2c8      	uxtb	r0, r1
 8010862:	495c      	ldr	r1, [pc, #368]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010864:	7288      	strb	r0, [r1, #10]
 8010866:	4413      	add	r3, r2
 8010868:	2209      	movs	r2, #9
 801086a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 801086c:	4b59      	ldr	r3, [pc, #356]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801086e:	8a18      	ldrh	r0, [r3, #16]
 8010870:	4b58      	ldr	r3, [pc, #352]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010872:	68da      	ldr	r2, [r3, #12]
 8010874:	4b57      	ldr	r3, [pc, #348]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010876:	7a9b      	ldrb	r3, [r3, #10]
 8010878:	1c59      	adds	r1, r3, #1
 801087a:	b2cc      	uxtb	r4, r1
 801087c:	4955      	ldr	r1, [pc, #340]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801087e:	728c      	strb	r4, [r1, #10]
 8010880:	4413      	add	r3, r2
 8010882:	b2c2      	uxtb	r2, r0
 8010884:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8010886:	4b53      	ldr	r3, [pc, #332]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010888:	8a1b      	ldrh	r3, [r3, #16]
 801088a:	0a1b      	lsrs	r3, r3, #8
 801088c:	b298      	uxth	r0, r3
 801088e:	4b51      	ldr	r3, [pc, #324]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010890:	68da      	ldr	r2, [r3, #12]
 8010892:	4b50      	ldr	r3, [pc, #320]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010894:	7a9b      	ldrb	r3, [r3, #10]
 8010896:	1c59      	adds	r1, r3, #1
 8010898:	b2cc      	uxtb	r4, r1
 801089a:	494e      	ldr	r1, [pc, #312]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801089c:	728c      	strb	r4, [r1, #10]
 801089e:	4413      	add	r3, r2
 80108a0:	b2c2      	uxtb	r2, r0
 80108a2:	701a      	strb	r2, [r3, #0]
                break;
 80108a4:	e150      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 80108a6:	4b4b      	ldr	r3, [pc, #300]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80108a8:	2200      	movs	r2, #0
 80108aa:	821a      	strh	r2, [r3, #16]
                break;
 80108ac:	e14c      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 80108ae:	2305      	movs	r3, #5
 80108b0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 80108b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80108b8:	4618      	mov	r0, r3
 80108ba:	f004 fdcb 	bl	8015454 <LoRaMacMlmeRequest>
                break;
 80108be:	e143      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 80108c0:	4b45      	ldr	r3, [pc, #276]	; (80109d8 <LmhpComplianceOnMcpsIndication+0x5fc>)
 80108c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108c4:	4798      	blx	r3
                break;
 80108c6:	e13f      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	689a      	ldr	r2, [r3, #8]
 80108cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80108d0:	1c59      	adds	r1, r3, #1
 80108d2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80108d6:	4413      	add	r3, r2
 80108d8:	781a      	ldrb	r2, [r3, #0]
 80108da:	4b3e      	ldr	r3, [pc, #248]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80108dc:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 80108de:	4b3c      	ldr	r3, [pc, #240]	; (80109d0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f000 812c 	beq.w	8010b42 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 80108ea:	4b39      	ldr	r3, [pc, #228]	; (80109d0 <LmhpComplianceOnMcpsIndication+0x5f4>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	68db      	ldr	r3, [r3, #12]
 80108f0:	4a38      	ldr	r2, [pc, #224]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80108f2:	7d52      	ldrb	r2, [r2, #21]
 80108f4:	4610      	mov	r0, r2
 80108f6:	4798      	blx	r3
                }
                break;
 80108f8:	e123      	b.n	8010b42 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	7b1b      	ldrb	r3, [r3, #12]
 80108fe:	2b07      	cmp	r3, #7
 8010900:	f040 8121 	bne.w	8010b46 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 8010904:	2306      	movs	r3, #6
 8010906:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	689a      	ldr	r2, [r3, #8]
 801090e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010912:	4413      	add	r3, r2
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	b21a      	sxth	r2, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6899      	ldr	r1, [r3, #8]
 801091c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010920:	3301      	adds	r3, #1
 8010922:	440b      	add	r3, r1
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	021b      	lsls	r3, r3, #8
 8010928:	b21b      	sxth	r3, r3
 801092a:	4313      	orrs	r3, r2
 801092c:	b21b      	sxth	r3, r3
 801092e:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 8010930:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 8010934:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010938:	3302      	adds	r3, #2
 801093a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	689a      	ldr	r2, [r3, #8]
 8010942:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010946:	4413      	add	r3, r2
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	4619      	mov	r1, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	689a      	ldr	r2, [r3, #8]
 8010950:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010954:	3301      	adds	r3, #1
 8010956:	4413      	add	r3, r2
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	021b      	lsls	r3, r3, #8
 801095c:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6899      	ldr	r1, [r3, #8]
 8010964:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010968:	3302      	adds	r3, #2
 801096a:	440b      	add	r3, r1
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8010970:	4313      	orrs	r3, r2
 8010972:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8010974:	2364      	movs	r3, #100	; 0x64
 8010976:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 801097a:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 801097c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010980:	3303      	adds	r3, #3
 8010982:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	689a      	ldr	r2, [r3, #8]
 801098a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801098e:	1c59      	adds	r1, r3, #1
 8010990:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010994:	4413      	add	r3, r2
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	b25b      	sxtb	r3, r3
 801099a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 801099e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80109a2:	4618      	mov	r0, r3
 80109a4:	f004 fd56 	bl	8015454 <LoRaMacMlmeRequest>
                }
                break;
 80109a8:	e0cd      	b.n	8010b46 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 80109aa:	233b      	movs	r3, #59	; 0x3b
 80109ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 80109b0:	2300      	movs	r3, #0
 80109b2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 80109b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80109ba:	4618      	mov	r0, r3
 80109bc:	f004 f9a0 	bl	8014d00 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 80109c0:	4b04      	ldr	r3, [pc, #16]	; (80109d4 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80109c2:	2201      	movs	r2, #1
 80109c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 80109c8:	e0be      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
 80109ca:	bf00      	nop
 80109cc:	0802183c 	.word	0x0802183c
 80109d0:	2000071c 	.word	0x2000071c
 80109d4:	200006e4 	.word	0x200006e4
 80109d8:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 80109dc:	232a      	movs	r3, #42	; 0x2a
 80109de:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 80109e0:	f107 0308 	add.w	r3, r7, #8
 80109e4:	4618      	mov	r0, r3
 80109e6:	f003 ffb3 	bl	8014950 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 80109f2:	4b65      	ldr	r3, [pc, #404]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109f4:	68da      	ldr	r2, [r3, #12]
 80109f6:	4b64      	ldr	r3, [pc, #400]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80109f8:	7a9b      	ldrb	r3, [r3, #10]
 80109fa:	1c59      	adds	r1, r3, #1
 80109fc:	b2c8      	uxtb	r0, r1
 80109fe:	4962      	ldr	r1, [pc, #392]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a00:	7288      	strb	r0, [r1, #10]
 8010a02:	4413      	add	r3, r2
 8010a04:	227f      	movs	r2, #127	; 0x7f
 8010a06:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8010a08:	4b60      	ldr	r3, [pc, #384]	; (8010b8c <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	4b5e      	ldr	r3, [pc, #376]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a0e:	68d9      	ldr	r1, [r3, #12]
 8010a10:	4b5d      	ldr	r3, [pc, #372]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a12:	7a9b      	ldrb	r3, [r3, #10]
 8010a14:	1c58      	adds	r0, r3, #1
 8010a16:	b2c4      	uxtb	r4, r0
 8010a18:	485b      	ldr	r0, [pc, #364]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a1a:	7284      	strb	r4, [r0, #10]
 8010a1c:	440b      	add	r3, r1
 8010a1e:	78d2      	ldrb	r2, [r2, #3]
 8010a20:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8010a22:	4b5a      	ldr	r3, [pc, #360]	; (8010b8c <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010a24:	681a      	ldr	r2, [r3, #0]
 8010a26:	4b58      	ldr	r3, [pc, #352]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a28:	68d9      	ldr	r1, [r3, #12]
 8010a2a:	4b57      	ldr	r3, [pc, #348]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a2c:	7a9b      	ldrb	r3, [r3, #10]
 8010a2e:	1c58      	adds	r0, r3, #1
 8010a30:	b2c4      	uxtb	r4, r0
 8010a32:	4855      	ldr	r0, [pc, #340]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a34:	7284      	strb	r4, [r0, #10]
 8010a36:	440b      	add	r3, r1
 8010a38:	7892      	ldrb	r2, [r2, #2]
 8010a3a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8010a3c:	4b53      	ldr	r3, [pc, #332]	; (8010b8c <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	4b51      	ldr	r3, [pc, #324]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a42:	68d9      	ldr	r1, [r3, #12]
 8010a44:	4b50      	ldr	r3, [pc, #320]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a46:	7a9b      	ldrb	r3, [r3, #10]
 8010a48:	1c58      	adds	r0, r3, #1
 8010a4a:	b2c4      	uxtb	r4, r0
 8010a4c:	484e      	ldr	r0, [pc, #312]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a4e:	7284      	strb	r4, [r0, #10]
 8010a50:	440b      	add	r3, r1
 8010a52:	7852      	ldrb	r2, [r2, #1]
 8010a54:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8010a56:	4b4d      	ldr	r3, [pc, #308]	; (8010b8c <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	4b4b      	ldr	r3, [pc, #300]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a5c:	68d9      	ldr	r1, [r3, #12]
 8010a5e:	4b4a      	ldr	r3, [pc, #296]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a60:	7a9b      	ldrb	r3, [r3, #10]
 8010a62:	1c58      	adds	r0, r3, #1
 8010a64:	b2c4      	uxtb	r4, r0
 8010a66:	4848      	ldr	r0, [pc, #288]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a68:	7284      	strb	r4, [r0, #10]
 8010a6a:	440b      	add	r3, r1
 8010a6c:	7812      	ldrb	r2, [r2, #0]
 8010a6e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8010a70:	4b45      	ldr	r3, [pc, #276]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a72:	68da      	ldr	r2, [r3, #12]
 8010a74:	4b44      	ldr	r3, [pc, #272]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a76:	7a9b      	ldrb	r3, [r3, #10]
 8010a78:	1c59      	adds	r1, r3, #1
 8010a7a:	b2c8      	uxtb	r0, r1
 8010a7c:	4942      	ldr	r1, [pc, #264]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a7e:	7288      	strb	r0, [r1, #10]
 8010a80:	4413      	add	r3, r2
 8010a82:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8010a86:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8010a88:	4b3f      	ldr	r3, [pc, #252]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a8a:	68da      	ldr	r2, [r3, #12]
 8010a8c:	4b3e      	ldr	r3, [pc, #248]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a8e:	7a9b      	ldrb	r3, [r3, #10]
 8010a90:	1c59      	adds	r1, r3, #1
 8010a92:	b2c8      	uxtb	r0, r1
 8010a94:	493c      	ldr	r1, [pc, #240]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010a96:	7288      	strb	r0, [r1, #10]
 8010a98:	4413      	add	r3, r2
 8010a9a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8010a9e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8010aa0:	4b39      	ldr	r3, [pc, #228]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aa2:	68da      	ldr	r2, [r3, #12]
 8010aa4:	4b38      	ldr	r3, [pc, #224]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aa6:	7a9b      	ldrb	r3, [r3, #10]
 8010aa8:	1c59      	adds	r1, r3, #1
 8010aaa:	b2c8      	uxtb	r0, r1
 8010aac:	4936      	ldr	r1, [pc, #216]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aae:	7288      	strb	r0, [r1, #10]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010ab6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8010ab8:	4b33      	ldr	r3, [pc, #204]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aba:	68da      	ldr	r2, [r3, #12]
 8010abc:	4b32      	ldr	r3, [pc, #200]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010abe:	7a9b      	ldrb	r3, [r3, #10]
 8010ac0:	1c59      	adds	r1, r3, #1
 8010ac2:	b2c8      	uxtb	r0, r1
 8010ac4:	4930      	ldr	r1, [pc, #192]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ac6:	7288      	strb	r0, [r1, #10]
 8010ac8:	4413      	add	r3, r2
 8010aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010ace:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8010ad0:	4b2d      	ldr	r3, [pc, #180]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ad2:	68da      	ldr	r2, [r3, #12]
 8010ad4:	4b2c      	ldr	r3, [pc, #176]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ad6:	7a9b      	ldrb	r3, [r3, #10]
 8010ad8:	1c59      	adds	r1, r3, #1
 8010ada:	b2c8      	uxtb	r0, r1
 8010adc:	492a      	ldr	r1, [pc, #168]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010ade:	7288      	strb	r0, [r1, #10]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010ae6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8010ae8:	4b27      	ldr	r3, [pc, #156]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aea:	68da      	ldr	r2, [r3, #12]
 8010aec:	4b26      	ldr	r3, [pc, #152]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010aee:	7a9b      	ldrb	r3, [r3, #10]
 8010af0:	1c59      	adds	r1, r3, #1
 8010af2:	b2c8      	uxtb	r0, r1
 8010af4:	4924      	ldr	r1, [pc, #144]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010af6:	7288      	strb	r0, [r1, #10]
 8010af8:	4413      	add	r3, r2
 8010afa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8010afe:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8010b00:	4b21      	ldr	r3, [pc, #132]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b02:	68da      	ldr	r2, [r3, #12]
 8010b04:	4b20      	ldr	r3, [pc, #128]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b06:	7a9b      	ldrb	r3, [r3, #10]
 8010b08:	1c59      	adds	r1, r3, #1
 8010b0a:	b2c8      	uxtb	r0, r1
 8010b0c:	491e      	ldr	r1, [pc, #120]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b0e:	7288      	strb	r0, [r1, #10]
 8010b10:	4413      	add	r3, r2
 8010b12:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8010b16:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8010b18:	4b1b      	ldr	r3, [pc, #108]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b1a:	68da      	ldr	r2, [r3, #12]
 8010b1c:	4b1a      	ldr	r3, [pc, #104]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b1e:	7a9b      	ldrb	r3, [r3, #10]
 8010b20:	1c59      	adds	r1, r3, #1
 8010b22:	b2c8      	uxtb	r0, r1
 8010b24:	4918      	ldr	r1, [pc, #96]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b26:	7288      	strb	r0, [r1, #10]
 8010b28:	4413      	add	r3, r2
 8010b2a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8010b2e:	701a      	strb	r2, [r3, #0]
                break;
 8010b30:	e00a      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 8010b32:	bf00      	nop
 8010b34:	e008      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b36:	bf00      	nop
 8010b38:	e006      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b3a:	bf00      	nop
 8010b3c:	e004      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b3e:	bf00      	nop
 8010b40:	e002      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b42:	bf00      	nop
 8010b44:	e000      	b.n	8010b48 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 8010b46:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 8010b48:	4b0f      	ldr	r3, [pc, #60]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b4a:	7a9b      	ldrb	r3, [r3, #10]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d00c      	beq.n	8010b6a <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 8010b50:	4b0f      	ldr	r3, [pc, #60]	; (8010b90 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010b52:	7a5b      	ldrb	r3, [r3, #9]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d114      	bne.n	8010b82 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 8010b58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010b5c:	480c      	ldr	r0, [pc, #48]	; (8010b90 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010b5e:	f00e fefb 	bl	801f958 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8010b62:	480b      	ldr	r0, [pc, #44]	; (8010b90 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010b64:	f00e fe1a 	bl	801f79c <UTIL_TIMER_Start>
 8010b68:	e00b      	b.n	8010b82 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 8010b6a:	4809      	ldr	r0, [pc, #36]	; (8010b90 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010b6c:	f00e fe84 	bl	801f878 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8010b70:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	705a      	strb	r2, [r3, #1]
 8010b76:	e004      	b.n	8010b82 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010b78:	bf00      	nop
 8010b7a:	e002      	b.n	8010b82 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010b7c:	bf00      	nop
 8010b7e:	e000      	b.n	8010b82 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010b80:	bf00      	nop
    }
}
 8010b82:	3790      	adds	r7, #144	; 0x90
 8010b84:	46bd      	mov	sp, r7
 8010b86:	bdb0      	pop	{r4, r5, r7, pc}
 8010b88:	200006e4 	.word	0x200006e4
 8010b8c:	2000071c 	.word	0x2000071c
 8010b90:	20000720 	.word	0x20000720

08010b94 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 8010b9c:	bf00      	nop
    }
}
 8010b9e:	bf00      	nop
 8010ba0:	370c      	adds	r7, #12
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bc80      	pop	{r7}
 8010ba6:	4770      	bx	lr

08010ba8 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8010ba8:	b480      	push	{r7}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010bb0:	4b05      	ldr	r3, [pc, #20]	; (8010bc8 <LmhpComplianceOnMlmeIndication+0x20>)
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	f083 0301 	eor.w	r3, r3, #1
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
    {
        return;
 8010bbc:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bc80      	pop	{r7}
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	200006e4 	.word	0x200006e4

08010bcc <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 8010bd4:	4b08      	ldr	r3, [pc, #32]	; (8010bf8 <OnProcessTimer+0x2c>)
 8010bd6:	7a9b      	ldrb	r3, [r3, #10]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d002      	beq.n	8010be2 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 8010bdc:	4b06      	ldr	r3, [pc, #24]	; (8010bf8 <OnProcessTimer+0x2c>)
 8010bde:	2201      	movs	r2, #1
 8010be0:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8010be2:	4b06      	ldr	r3, [pc, #24]	; (8010bfc <OnProcessTimer+0x30>)
 8010be4:	695b      	ldr	r3, [r3, #20]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d002      	beq.n	8010bf0 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 8010bea:	4b04      	ldr	r3, [pc, #16]	; (8010bfc <OnProcessTimer+0x30>)
 8010bec:	695b      	ldr	r3, [r3, #20]
 8010bee:	4798      	blx	r3
    }
}
 8010bf0:	bf00      	nop
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	200006e4 	.word	0x200006e4
 8010bfc:	200000d8 	.word	0x200000d8

08010c00 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010c00:	b480      	push	{r7}
 8010c02:	b083      	sub	sp, #12
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	370c      	adds	r7, #12
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bc80      	pop	{r7}
 8010c12:	4770      	bx	lr

08010c14 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	6039      	str	r1, [r7, #0]
 8010c1e:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010c20:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010c24:	4618      	mov	r0, r3
 8010c26:	370c      	adds	r7, #12
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bc80      	pop	{r7}
 8010c2c:	4770      	bx	lr
	...

08010c30 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010c30:	b590      	push	{r4, r7, lr}
 8010c32:	b083      	sub	sp, #12
 8010c34:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010c36:	f00e ff39 	bl	801faac <UTIL_TIMER_GetCurrentTime>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	4a0f      	ldr	r2, [pc, #60]	; (8010c7c <OnRadioTxDone+0x4c>)
 8010c3e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010c40:	4c0f      	ldr	r4, [pc, #60]	; (8010c80 <OnRadioTxDone+0x50>)
 8010c42:	463b      	mov	r3, r7
 8010c44:	4618      	mov	r0, r3
 8010c46:	f00e f9b3 	bl	801efb0 <SysTimeGet>
 8010c4a:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010c4e:	463a      	mov	r2, r7
 8010c50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c54:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010c58:	4a0a      	ldr	r2, [pc, #40]	; (8010c84 <OnRadioTxDone+0x54>)
 8010c5a:	7813      	ldrb	r3, [r2, #0]
 8010c5c:	f043 0320 	orr.w	r3, r3, #32
 8010c60:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c62:	f003 fa71 	bl	8014148 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010c66:	4b08      	ldr	r3, [pc, #32]	; (8010c88 <OnRadioTxDone+0x58>)
 8010c68:	2201      	movs	r2, #1
 8010c6a:	2100      	movs	r1, #0
 8010c6c:	2002      	movs	r0, #2
 8010c6e:	f00f f80d 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 8010c72:	bf00      	nop
 8010c74:	370c      	adds	r7, #12
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd90      	pop	{r4, r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	20001880 	.word	0x20001880
 8010c80:	20000738 	.word	0x20000738
 8010c84:	2000187c 	.word	0x2000187c
 8010c88:	08021868 	.word	0x08021868

08010c8c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	4608      	mov	r0, r1
 8010c96:	4611      	mov	r1, r2
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	817b      	strh	r3, [r7, #10]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	813b      	strh	r3, [r7, #8]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010ca6:	f00e ff01 	bl	801faac <UTIL_TIMER_GetCurrentTime>
 8010caa:	4603      	mov	r3, r0
 8010cac:	4a11      	ldr	r2, [pc, #68]	; (8010cf4 <OnRadioRxDone+0x68>)
 8010cae:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010cb0:	4a10      	ldr	r2, [pc, #64]	; (8010cf4 <OnRadioRxDone+0x68>)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010cb6:	4a0f      	ldr	r2, [pc, #60]	; (8010cf4 <OnRadioRxDone+0x68>)
 8010cb8:	897b      	ldrh	r3, [r7, #10]
 8010cba:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010cbc:	4a0d      	ldr	r2, [pc, #52]	; (8010cf4 <OnRadioRxDone+0x68>)
 8010cbe:	893b      	ldrh	r3, [r7, #8]
 8010cc0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010cc2:	4a0c      	ldr	r2, [pc, #48]	; (8010cf4 <OnRadioRxDone+0x68>)
 8010cc4:	79fb      	ldrb	r3, [r7, #7]
 8010cc6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010cc8:	4a0b      	ldr	r2, [pc, #44]	; (8010cf8 <OnRadioRxDone+0x6c>)
 8010cca:	7813      	ldrb	r3, [r2, #0]
 8010ccc:	f043 0310 	orr.w	r3, r3, #16
 8010cd0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8010cd2:	4a09      	ldr	r2, [pc, #36]	; (8010cf8 <OnRadioRxDone+0x6c>)
 8010cd4:	7813      	ldrb	r3, [r2, #0]
 8010cd6:	f043 0301 	orr.w	r3, r3, #1
 8010cda:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010cdc:	f003 fa34 	bl	8014148 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010ce0:	4b06      	ldr	r3, [pc, #24]	; (8010cfc <OnRadioRxDone+0x70>)
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	2100      	movs	r1, #0
 8010ce6:	2002      	movs	r0, #2
 8010ce8:	f00e ffd0 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 8010cec:	bf00      	nop
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	20001884 	.word	0x20001884
 8010cf8:	2000187c 	.word	0x2000187c
 8010cfc:	08021878 	.word	0x08021878

08010d00 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010d04:	4a07      	ldr	r2, [pc, #28]	; (8010d24 <OnRadioTxTimeout+0x24>)
 8010d06:	7813      	ldrb	r3, [r2, #0]
 8010d08:	f043 0308 	orr.w	r3, r3, #8
 8010d0c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d0e:	f003 fa1b 	bl	8014148 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010d12:	4b05      	ldr	r3, [pc, #20]	; (8010d28 <OnRadioTxTimeout+0x28>)
 8010d14:	2201      	movs	r2, #1
 8010d16:	2100      	movs	r1, #0
 8010d18:	2002      	movs	r0, #2
 8010d1a:	f00e ffb7 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 8010d1e:	bf00      	nop
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	2000187c 	.word	0x2000187c
 8010d28:	08021888 	.word	0x08021888

08010d2c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010d30:	4a04      	ldr	r2, [pc, #16]	; (8010d44 <OnRadioRxError+0x18>)
 8010d32:	7813      	ldrb	r3, [r2, #0]
 8010d34:	f043 0304 	orr.w	r3, r3, #4
 8010d38:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d3a:	f003 fa05 	bl	8014148 <OnMacProcessNotify>
}
 8010d3e:	bf00      	nop
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	2000187c 	.word	0x2000187c

08010d48 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010d4c:	4a07      	ldr	r2, [pc, #28]	; (8010d6c <OnRadioRxTimeout+0x24>)
 8010d4e:	7813      	ldrb	r3, [r2, #0]
 8010d50:	f043 0302 	orr.w	r3, r3, #2
 8010d54:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d56:	f003 f9f7 	bl	8014148 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010d5a:	4b05      	ldr	r3, [pc, #20]	; (8010d70 <OnRadioRxTimeout+0x28>)
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	2100      	movs	r1, #0
 8010d60:	2002      	movs	r0, #2
 8010d62:	f00e ff93 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 8010d66:	bf00      	nop
 8010d68:	bd80      	pop	{r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	2000187c 	.word	0x2000187c
 8010d70:	08021898 	.word	0x08021898

08010d74 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010d74:	b480      	push	{r7}
 8010d76:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d78:	4b08      	ldr	r3, [pc, #32]	; (8010d9c <UpdateRxSlotIdleState+0x28>)
 8010d7a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d7e:	2b02      	cmp	r3, #2
 8010d80:	d004      	beq.n	8010d8c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010d82:	4b07      	ldr	r3, [pc, #28]	; (8010da0 <UpdateRxSlotIdleState+0x2c>)
 8010d84:	2206      	movs	r2, #6
 8010d86:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010d8a:	e003      	b.n	8010d94 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d8c:	4b04      	ldr	r3, [pc, #16]	; (8010da0 <UpdateRxSlotIdleState+0x2c>)
 8010d8e:	2202      	movs	r2, #2
 8010d90:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 8010d94:	bf00      	nop
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bc80      	pop	{r7}
 8010d9a:	4770      	bx	lr
 8010d9c:	20000c54 	.word	0x20000c54
 8010da0:	20000738 	.word	0x20000738

08010da4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b092      	sub	sp, #72	; 0x48
 8010da8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010daa:	4b4a      	ldr	r3, [pc, #296]	; (8010ed4 <ProcessRadioTxDone+0x130>)
 8010dac:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010db0:	2b02      	cmp	r3, #2
 8010db2:	d002      	beq.n	8010dba <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010db4:	4b48      	ldr	r3, [pc, #288]	; (8010ed8 <ProcessRadioTxDone+0x134>)
 8010db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db8:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dba:	f3ef 8310 	mrs	r3, PRIMASK
 8010dbe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010dc4:	b672      	cpsid	i
}
 8010dc6:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010dc8:	f00e fe70 	bl	801faac <UTIL_TIMER_GetCurrentTime>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	4b43      	ldr	r3, [pc, #268]	; (8010edc <ProcessRadioTxDone+0x138>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010dd6:	4b42      	ldr	r3, [pc, #264]	; (8010ee0 <ProcessRadioTxDone+0x13c>)
 8010dd8:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dde:	1ad3      	subs	r3, r2, r3
 8010de0:	4619      	mov	r1, r3
 8010de2:	4840      	ldr	r0, [pc, #256]	; (8010ee4 <ProcessRadioTxDone+0x140>)
 8010de4:	f00e fdb8 	bl	801f958 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010de8:	483e      	ldr	r0, [pc, #248]	; (8010ee4 <ProcessRadioTxDone+0x140>)
 8010dea:	f00e fcd7 	bl	801f79c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010dee:	4b3c      	ldr	r3, [pc, #240]	; (8010ee0 <ProcessRadioTxDone+0x13c>)
 8010df0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010df6:	1ad3      	subs	r3, r2, r3
 8010df8:	4619      	mov	r1, r3
 8010dfa:	483b      	ldr	r0, [pc, #236]	; (8010ee8 <ProcessRadioTxDone+0x144>)
 8010dfc:	f00e fdac 	bl	801f958 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010e00:	4839      	ldr	r0, [pc, #228]	; (8010ee8 <ProcessRadioTxDone+0x144>)
 8010e02:	f00e fccb 	bl	801f79c <UTIL_TIMER_Start>
 8010e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e08:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e0c:	f383 8810 	msr	PRIMASK, r3
}
 8010e10:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 8010e12:	4b33      	ldr	r3, [pc, #204]	; (8010ee0 <ProcessRadioTxDone+0x13c>)
 8010e14:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d01a      	beq.n	8010e52 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8010e1c:	2315      	movs	r3, #21
 8010e1e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e22:	4b2c      	ldr	r3, [pc, #176]	; (8010ed4 <ProcessRadioTxDone+0x130>)
 8010e24:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e28:	f107 0220 	add.w	r2, r7, #32
 8010e2c:	4611      	mov	r1, r2
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f006 febe 	bl	8017bb0 <RegionGetPhyParam>
 8010e34:	4603      	mov	r3, r0
 8010e36:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010e38:	4b29      	ldr	r3, [pc, #164]	; (8010ee0 <ProcessRadioTxDone+0x13c>)
 8010e3a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	4413      	add	r3, r2
 8010e42:	4619      	mov	r1, r3
 8010e44:	4829      	ldr	r0, [pc, #164]	; (8010eec <ProcessRadioTxDone+0x148>)
 8010e46:	f00e fd87 	bl	801f958 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8010e4a:	4828      	ldr	r0, [pc, #160]	; (8010eec <ProcessRadioTxDone+0x148>)
 8010e4c:	f00e fca6 	bl	801f79c <UTIL_TIMER_Start>
 8010e50:	e003      	b.n	8010e5a <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010e52:	4b23      	ldr	r3, [pc, #140]	; (8010ee0 <ProcessRadioTxDone+0x13c>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010e5a:	4b20      	ldr	r3, [pc, #128]	; (8010edc <ProcessRadioTxDone+0x138>)
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	4a1d      	ldr	r2, [pc, #116]	; (8010ed4 <ProcessRadioTxDone+0x130>)
 8010e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010e62:	4b1f      	ldr	r3, [pc, #124]	; (8010ee0 <ProcessRadioTxDone+0x13c>)
 8010e64:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010e68:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010e6a:	4b1c      	ldr	r3, [pc, #112]	; (8010edc <ProcessRadioTxDone+0x138>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010e70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e74:	4618      	mov	r0, r3
 8010e76:	f00e f8d3 	bl	801f020 <SysTimeGetMcuTime>
 8010e7a:	4638      	mov	r0, r7
 8010e7c:	4b15      	ldr	r3, [pc, #84]	; (8010ed4 <ProcessRadioTxDone+0x130>)
 8010e7e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010e82:	9200      	str	r2, [sp, #0]
 8010e84:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010e88:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e8c:	ca06      	ldmia	r2, {r1, r2}
 8010e8e:	f00e f828 	bl	801eee2 <SysTimeSub>
 8010e92:	f107 0314 	add.w	r3, r7, #20
 8010e96:	463a      	mov	r2, r7
 8010e98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e9c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010ea0:	4b0f      	ldr	r3, [pc, #60]	; (8010ee0 <ProcessRadioTxDone+0x13c>)
 8010ea2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8010ea6:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010eac:	4b09      	ldr	r3, [pc, #36]	; (8010ed4 <ProcessRadioTxDone+0x130>)
 8010eae:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d101      	bne.n	8010eba <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010eba:	4b06      	ldr	r3, [pc, #24]	; (8010ed4 <ProcessRadioTxDone+0x130>)
 8010ebc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010ec0:	f107 0208 	add.w	r2, r7, #8
 8010ec4:	4611      	mov	r1, r2
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f006 fe93 	bl	8017bf2 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 8010ecc:	bf00      	nop
 8010ece:	3740      	adds	r7, #64	; 0x40
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	20000c54 	.word	0x20000c54
 8010ed8:	08021fb4 	.word	0x08021fb4
 8010edc:	20001880 	.word	0x20001880
 8010ee0:	20000738 	.word	0x20000738
 8010ee4:	20000ab8 	.word	0x20000ab8
 8010ee8:	20000ad0 	.word	0x20000ad0
 8010eec:	20000b38 	.word	0x20000b38

08010ef0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010ef4:	4b10      	ldr	r3, [pc, #64]	; (8010f38 <PrepareRxDoneAbort+0x48>)
 8010ef6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010efe:	4a0e      	ldr	r2, [pc, #56]	; (8010f38 <PrepareRxDoneAbort+0x48>)
 8010f00:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010f04:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <PrepareRxDoneAbort+0x48>)
 8010f06:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d002      	beq.n	8010f14 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 8010f0e:	2000      	movs	r0, #0
 8010f10:	f001 f9fa 	bl	8012308 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010f14:	4a08      	ldr	r2, [pc, #32]	; (8010f38 <PrepareRxDoneAbort+0x48>)
 8010f16:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010f1a:	f043 0302 	orr.w	r3, r3, #2
 8010f1e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010f22:	4a05      	ldr	r2, [pc, #20]	; (8010f38 <PrepareRxDoneAbort+0x48>)
 8010f24:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010f28:	f043 0310 	orr.w	r3, r3, #16
 8010f2c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 8010f30:	f7ff ff20 	bl	8010d74 <UpdateRxSlotIdleState>
}
 8010f34:	bf00      	nop
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	20000738 	.word	0x20000738

08010f3c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010f3c:	b590      	push	{r4, r7, lr}
 8010f3e:	b0ab      	sub	sp, #172	; 0xac
 8010f40:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010f42:	2312      	movs	r3, #18
 8010f44:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010f48:	4b81      	ldr	r3, [pc, #516]	; (8011150 <ProcessRadioRxDone+0x214>)
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 8010f50:	4b7f      	ldr	r3, [pc, #508]	; (8011150 <ProcessRadioRxDone+0x214>)
 8010f52:	891b      	ldrh	r3, [r3, #8]
 8010f54:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 8010f58:	4b7d      	ldr	r3, [pc, #500]	; (8011150 <ProcessRadioRxDone+0x214>)
 8010f5a:	895b      	ldrh	r3, [r3, #10]
 8010f5c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 8010f60:	4b7b      	ldr	r3, [pc, #492]	; (8011150 <ProcessRadioRxDone+0x214>)
 8010f62:	7b1b      	ldrb	r3, [r3, #12]
 8010f64:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010f72:	4b78      	ldr	r3, [pc, #480]	; (8011154 <ProcessRadioRxDone+0x218>)
 8010f74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010f82:	2301      	movs	r3, #1
 8010f84:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8010f8e:	4a72      	ldr	r2, [pc, #456]	; (8011158 <ProcessRadioRxDone+0x21c>)
 8010f90:	7813      	ldrb	r3, [r2, #0]
 8010f92:	f36f 0300 	bfc	r3, #0, #1
 8010f96:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010f98:	4b70      	ldr	r3, [pc, #448]	; (801115c <ProcessRadioRxDone+0x220>)
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8010fa0:	4a6e      	ldr	r2, [pc, #440]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fa2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010fa6:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 8010faa:	4a6c      	ldr	r2, [pc, #432]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010fb0:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010fb4:	4b69      	ldr	r3, [pc, #420]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fb6:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 8010fba:	4b68      	ldr	r3, [pc, #416]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fbc:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8010fc0:	4b66      	ldr	r3, [pc, #408]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8010fc8:	4b64      	ldr	r3, [pc, #400]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010fd0:	4b62      	ldr	r3, [pc, #392]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8010fd8:	4b60      	ldr	r3, [pc, #384]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fda:	2200      	movs	r2, #0
 8010fdc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8010fe0:	4b5e      	ldr	r3, [pc, #376]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8010fe8:	4b5c      	ldr	r3, [pc, #368]	; (801115c <ProcessRadioRxDone+0x220>)
 8010fea:	2200      	movs	r2, #0
 8010fec:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8010ff0:	4b5a      	ldr	r3, [pc, #360]	; (801115c <ProcessRadioRxDone+0x220>)
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010ff8:	4b58      	ldr	r3, [pc, #352]	; (801115c <ProcessRadioRxDone+0x220>)
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011000:	4b56      	ldr	r3, [pc, #344]	; (801115c <ProcessRadioRxDone+0x220>)
 8011002:	2200      	movs	r2, #0
 8011004:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8011008:	4b54      	ldr	r3, [pc, #336]	; (801115c <ProcessRadioRxDone+0x220>)
 801100a:	2200      	movs	r2, #0
 801100c:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011010:	4b52      	ldr	r3, [pc, #328]	; (801115c <ProcessRadioRxDone+0x220>)
 8011012:	2200      	movs	r2, #0
 8011014:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8011018:	4b50      	ldr	r3, [pc, #320]	; (801115c <ProcessRadioRxDone+0x220>)
 801101a:	2200      	movs	r2, #0
 801101c:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8011020:	4b4f      	ldr	r3, [pc, #316]	; (8011160 <ProcessRadioRxDone+0x224>)
 8011022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011024:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8011026:	4b4d      	ldr	r3, [pc, #308]	; (801115c <ProcessRadioRxDone+0x220>)
 8011028:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801102c:	2b00      	cmp	r3, #0
 801102e:	d102      	bne.n	8011036 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 8011030:	484c      	ldr	r0, [pc, #304]	; (8011164 <ProcessRadioRxDone+0x228>)
 8011032:	f00e fc21 	bl	801f878 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8011036:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801103a:	4619      	mov	r1, r3
 801103c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8011040:	f004 fe28 	bl	8015c94 <LoRaMacClassBRxBeacon>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00b      	beq.n	8011062 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 801104a:	4a44      	ldr	r2, [pc, #272]	; (801115c <ProcessRadioRxDone+0x220>)
 801104c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8011050:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8011054:	4a41      	ldr	r2, [pc, #260]	; (801115c <ProcessRadioRxDone+0x220>)
 8011056:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801105a:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 801105e:	f000 bc75 	b.w	801194c <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011062:	4b3c      	ldr	r3, [pc, #240]	; (8011154 <ProcessRadioRxDone+0x218>)
 8011064:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011068:	2b01      	cmp	r3, #1
 801106a:	d11e      	bne.n	80110aa <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801106c:	f004 fe25 	bl	8015cba <LoRaMacClassBIsPingExpected>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d00a      	beq.n	801108c <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011076:	2000      	movs	r0, #0
 8011078:	f004 fdd6 	bl	8015c28 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 801107c:	2000      	movs	r0, #0
 801107e:	f004 fdf7 	bl	8015c70 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8011082:	4b36      	ldr	r3, [pc, #216]	; (801115c <ProcessRadioRxDone+0x220>)
 8011084:	2204      	movs	r2, #4
 8011086:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 801108a:	e00e      	b.n	80110aa <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801108c:	f004 fe1c 	bl	8015cc8 <LoRaMacClassBIsMulticastExpected>
 8011090:	4603      	mov	r3, r0
 8011092:	2b00      	cmp	r3, #0
 8011094:	d009      	beq.n	80110aa <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011096:	2000      	movs	r0, #0
 8011098:	f004 fdd0 	bl	8015c3c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801109c:	2000      	movs	r0, #0
 801109e:	f004 fdf0 	bl	8015c82 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80110a2:	4b2e      	ldr	r3, [pc, #184]	; (801115c <ProcessRadioRxDone+0x220>)
 80110a4:	2205      	movs	r2, #5
 80110a6:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 80110aa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d107      	bne.n	80110c2 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110b2:	4b2a      	ldr	r3, [pc, #168]	; (801115c <ProcessRadioRxDone+0x220>)
 80110b4:	2201      	movs	r2, #1
 80110b6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 80110ba:	f7ff ff19 	bl	8010ef0 <PrepareRxDoneAbort>
        return;
 80110be:	f000 bc45 	b.w	801194c <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 80110c2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80110c6:	1c5a      	adds	r2, r3, #1
 80110c8:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 80110cc:	461a      	mov	r2, r3
 80110ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80110d2:	4413      	add	r3, r2
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 80110da:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80110de:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	3b01      	subs	r3, #1
 80110e6:	2b06      	cmp	r3, #6
 80110e8:	f200 8403 	bhi.w	80118f2 <ProcessRadioRxDone+0x9b6>
 80110ec:	a201      	add	r2, pc, #4	; (adr r2, 80110f4 <ProcessRadioRxDone+0x1b8>)
 80110ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f2:	bf00      	nop
 80110f4:	08011111 	.word	0x08011111
 80110f8:	080118f3 	.word	0x080118f3
 80110fc:	0801130f 	.word	0x0801130f
 8011100:	080118f3 	.word	0x080118f3
 8011104:	08011307 	.word	0x08011307
 8011108:	080118f3 	.word	0x080118f3
 801110c:	08011897 	.word	0x08011897
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011110:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011114:	2b10      	cmp	r3, #16
 8011116:	d807      	bhi.n	8011128 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011118:	4b10      	ldr	r3, [pc, #64]	; (801115c <ProcessRadioRxDone+0x220>)
 801111a:	2201      	movs	r2, #1
 801111c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011120:	f7ff fee6 	bl	8010ef0 <PrepareRxDoneAbort>
                return;
 8011124:	f000 bc12 	b.w	801194c <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 8011128:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801112c:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 801112e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011132:	b2db      	uxtb	r3, r3
 8011134:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011136:	4b07      	ldr	r3, [pc, #28]	; (8011154 <ProcessRadioRxDone+0x218>)
 8011138:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801113c:	2b00      	cmp	r3, #0
 801113e:	d013      	beq.n	8011168 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011140:	4b06      	ldr	r3, [pc, #24]	; (801115c <ProcessRadioRxDone+0x220>)
 8011142:	2201      	movs	r2, #1
 8011144:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011148:	f7ff fed2 	bl	8010ef0 <PrepareRxDoneAbort>
                return;
 801114c:	e3fe      	b.n	801194c <ProcessRadioRxDone+0xa10>
 801114e:	bf00      	nop
 8011150:	20001884 	.word	0x20001884
 8011154:	20000c54 	.word	0x20000c54
 8011158:	2000187c 	.word	0x2000187c
 801115c:	20000738 	.word	0x20000738
 8011160:	08021fb4 	.word	0x08021fb4
 8011164:	20000ad0 	.word	0x20000ad0
            }

            SecureElementGetJoinEui( joinEui );
 8011168:	f107 0308 	add.w	r3, r7, #8
 801116c:	4618      	mov	r0, r3
 801116e:	f7fd ff79 	bl	800f064 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8011172:	f107 0218 	add.w	r2, r7, #24
 8011176:	f107 0308 	add.w	r3, r7, #8
 801117a:	4619      	mov	r1, r3
 801117c:	20ff      	movs	r0, #255	; 0xff
 801117e:	f005 ff93 	bl	80170a8 <LoRaMacCryptoHandleJoinAccept>
 8011182:	4603      	mov	r3, r0
 8011184:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8011188:	2300      	movs	r3, #0
 801118a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801118e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011192:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011196:	b2db      	uxtb	r3, r3
 8011198:	b25b      	sxtb	r3, r3
 801119a:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801119c:	4bb1      	ldr	r3, [pc, #708]	; (8011464 <ProcessRadioRxDone+0x528>)
 801119e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80111a2:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 80111a4:	4baf      	ldr	r3, [pc, #700]	; (8011464 <ProcessRadioRxDone+0x528>)
 80111a6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80111aa:	1d39      	adds	r1, r7, #4
 80111ac:	2207      	movs	r2, #7
 80111ae:	4618      	mov	r0, r3
 80111b0:	f006 fd4e 	bl	8017c50 <RegionVerify>
 80111b4:	4603      	mov	r3, r0
 80111b6:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 80111ba:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80111be:	2b00      	cmp	r3, #0
 80111c0:	f040 8095 	bne.w	80112ee <ProcessRadioRxDone+0x3b2>
 80111c4:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 8090 	beq.w	80112ee <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80111ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80111d2:	461a      	mov	r2, r3
 80111d4:	4ba3      	ldr	r3, [pc, #652]	; (8011464 <ProcessRadioRxDone+0x528>)
 80111d6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80111da:	4ba2      	ldr	r3, [pc, #648]	; (8011464 <ProcessRadioRxDone+0x528>)
 80111dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80111e4:	021b      	lsls	r3, r3, #8
 80111e6:	4313      	orrs	r3, r2
 80111e8:	4a9e      	ldr	r2, [pc, #632]	; (8011464 <ProcessRadioRxDone+0x528>)
 80111ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80111ee:	4b9d      	ldr	r3, [pc, #628]	; (8011464 <ProcessRadioRxDone+0x528>)
 80111f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80111f8:	041b      	lsls	r3, r3, #16
 80111fa:	4313      	orrs	r3, r2
 80111fc:	4a99      	ldr	r2, [pc, #612]	; (8011464 <ProcessRadioRxDone+0x528>)
 80111fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8011202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011204:	4a97      	ldr	r2, [pc, #604]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011206:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 801120a:	4b96      	ldr	r3, [pc, #600]	; (8011464 <ProcessRadioRxDone+0x528>)
 801120c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8011210:	4619      	mov	r1, r3
 8011212:	2002      	movs	r0, #2
 8011214:	f7fd ff3e 	bl	800f094 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8011218:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801121c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8011220:	b2db      	uxtb	r3, r3
 8011222:	461a      	mov	r2, r3
 8011224:	4b8f      	ldr	r3, [pc, #572]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011226:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801122a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801122e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011232:	b2db      	uxtb	r3, r3
 8011234:	461a      	mov	r2, r3
 8011236:	4b8b      	ldr	r3, [pc, #556]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011238:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801123c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011240:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011244:	b2db      	uxtb	r3, r3
 8011246:	461a      	mov	r2, r3
 8011248:	4b86      	ldr	r3, [pc, #536]	; (8011464 <ProcessRadioRxDone+0x528>)
 801124a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 801124e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011252:	461a      	mov	r2, r3
 8011254:	4b83      	ldr	r3, [pc, #524]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011256:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8011258:	4b82      	ldr	r3, [pc, #520]	; (8011464 <ProcessRadioRxDone+0x528>)
 801125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801125c:	2b00      	cmp	r3, #0
 801125e:	d102      	bne.n	8011266 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8011260:	4b80      	ldr	r3, [pc, #512]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011262:	2201      	movs	r2, #1
 8011264:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011266:	4b7f      	ldr	r3, [pc, #508]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801126a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801126e:	fb02 f303 	mul.w	r3, r2, r3
 8011272:	4a7c      	ldr	r2, [pc, #496]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011274:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011276:	4b7b      	ldr	r3, [pc, #492]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801127a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801127e:	4a79      	ldr	r2, [pc, #484]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011280:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8011282:	4b78      	ldr	r3, [pc, #480]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011284:	2201      	movs	r2, #1
 8011286:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 801128a:	4b76      	ldr	r3, [pc, #472]	; (8011464 <ProcessRadioRxDone+0x528>)
 801128c:	2200      	movs	r2, #0
 801128e:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8011292:	f107 0318 	add.w	r3, r7, #24
 8011296:	3312      	adds	r3, #18
 8011298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 801129c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	3b11      	subs	r3, #17
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 80112aa:	4b6f      	ldr	r3, [pc, #444]	; (8011468 <ProcessRadioRxDone+0x52c>)
 80112ac:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80112b0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80112b4:	4b6b      	ldr	r3, [pc, #428]	; (8011464 <ProcessRadioRxDone+0x528>)
 80112b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80112ba:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80112be:	4611      	mov	r1, r2
 80112c0:	4618      	mov	r0, r3
 80112c2:	f006 fce6 	bl	8017c92 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80112c6:	4b67      	ldr	r3, [pc, #412]	; (8011464 <ProcessRadioRxDone+0x528>)
 80112c8:	2202      	movs	r2, #2
 80112ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80112ce:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80112d2:	4618      	mov	r0, r3
 80112d4:	f005 f9f2 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f000 8311 	beq.w	8011902 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 80112e0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80112e4:	4619      	mov	r1, r3
 80112e6:	2000      	movs	r0, #0
 80112e8:	f005 f95c 	bl	80165a4 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 80112ec:	e309      	b.n	8011902 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80112ee:	2001      	movs	r0, #1
 80112f0:	f005 f9e4 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	f000 8302 	beq.w	8011900 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80112fc:	2101      	movs	r1, #1
 80112fe:	2007      	movs	r0, #7
 8011300:	f005 f950 	bl	80165a4 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8011304:	e2fc      	b.n	8011900 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011306:	4b58      	ldr	r3, [pc, #352]	; (8011468 <ProcessRadioRxDone+0x52c>)
 8011308:	2201      	movs	r2, #1
 801130a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801130e:	4b55      	ldr	r3, [pc, #340]	; (8011464 <ProcessRadioRxDone+0x528>)
 8011310:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011314:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8011318:	4b53      	ldr	r3, [pc, #332]	; (8011468 <ProcessRadioRxDone+0x52c>)
 801131a:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 801131e:	b25b      	sxtb	r3, r3
 8011320:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8011324:	230d      	movs	r3, #13
 8011326:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801132a:	4b4e      	ldr	r3, [pc, #312]	; (8011464 <ProcessRadioRxDone+0x528>)
 801132c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011330:	2b00      	cmp	r3, #0
 8011332:	d002      	beq.n	801133a <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8011334:	230e      	movs	r3, #14
 8011336:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801133a:	4b4a      	ldr	r3, [pc, #296]	; (8011464 <ProcessRadioRxDone+0x528>)
 801133c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011340:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8011344:	4611      	mov	r1, r2
 8011346:	4618      	mov	r0, r3
 8011348:	f006 fc32 	bl	8017bb0 <RegionGetPhyParam>
 801134c:	4603      	mov	r3, r0
 801134e:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011350:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011354:	3b0d      	subs	r3, #13
 8011356:	b29b      	uxth	r3, r3
 8011358:	b21b      	sxth	r3, r3
 801135a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801135e:	b21a      	sxth	r2, r3
 8011360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011362:	b21b      	sxth	r3, r3
 8011364:	429a      	cmp	r2, r3
 8011366:	dc03      	bgt.n	8011370 <ProcessRadioRxDone+0x434>
 8011368:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801136c:	2b0b      	cmp	r3, #11
 801136e:	d806      	bhi.n	801137e <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011370:	4b3d      	ldr	r3, [pc, #244]	; (8011468 <ProcessRadioRxDone+0x52c>)
 8011372:	2201      	movs	r2, #1
 8011374:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011378:	f7ff fdba 	bl	8010ef0 <PrepareRxDoneAbort>
                return;
 801137c:	e2e6      	b.n	801194c <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 801137e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011382:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 8011384:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011388:	b2db      	uxtb	r3, r3
 801138a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 801138e:	4b37      	ldr	r3, [pc, #220]	; (801146c <ProcessRadioRxDone+0x530>)
 8011390:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011392:	23ff      	movs	r3, #255	; 0xff
 8011394:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8011398:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801139c:	4618      	mov	r0, r3
 801139e:	f006 f985 	bl	80176ac <LoRaMacParserData>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d006      	beq.n	80113b6 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80113a8:	4b2f      	ldr	r3, [pc, #188]	; (8011468 <ProcessRadioRxDone+0x52c>)
 80113aa:	2201      	movs	r2, #1
 80113ac:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80113b0:	f7ff fd9e 	bl	8010ef0 <PrepareRxDoneAbort>
                return;
 80113b4:	e2ca      	b.n	801194c <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80113b6:	4b2b      	ldr	r3, [pc, #172]	; (8011464 <ProcessRadioRxDone+0x528>)
 80113b8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d132      	bne.n	8011426 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 80113c0:	f004 fc7b 	bl	8015cba <LoRaMacClassBIsPingExpected>
 80113c4:	4603      	mov	r3, r0
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d014      	beq.n	80113f4 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80113ca:	2000      	movs	r0, #0
 80113cc:	f004 fc2c 	bl	8015c28 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80113d0:	2000      	movs	r0, #0
 80113d2:	f004 fc4d 	bl	8015c70 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80113d6:	4b24      	ldr	r3, [pc, #144]	; (8011468 <ProcessRadioRxDone+0x52c>)
 80113d8:	2204      	movs	r2, #4
 80113da:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80113de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113e0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80113e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	4619      	mov	r1, r3
 80113ec:	4610      	mov	r0, r2
 80113ee:	f004 fced 	bl	8015dcc <LoRaMacClassBSetFPendingBit>
 80113f2:	e018      	b.n	8011426 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80113f4:	f004 fc68 	bl	8015cc8 <LoRaMacClassBIsMulticastExpected>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d013      	beq.n	8011426 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80113fe:	2000      	movs	r0, #0
 8011400:	f004 fc1c 	bl	8015c3c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011404:	2000      	movs	r0, #0
 8011406:	f004 fc3c 	bl	8015c82 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801140a:	4b17      	ldr	r3, [pc, #92]	; (8011468 <ProcessRadioRxDone+0x52c>)
 801140c:	2205      	movs	r2, #5
 801140e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8011412:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011414:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011418:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801141c:	b2db      	uxtb	r3, r3
 801141e:	4619      	mov	r1, r3
 8011420:	4610      	mov	r0, r2
 8011422:	f004 fcd3 	bl	8015dcc <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8011426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011428:	4a0f      	ldr	r2, [pc, #60]	; (8011468 <ProcessRadioRxDone+0x52c>)
 801142a:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 801142e:	f107 0212 	add.w	r2, r7, #18
 8011432:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011436:	4611      	mov	r1, r2
 8011438:	4618      	mov	r0, r3
 801143a:	f002 fd81 	bl	8013f40 <DetermineFrameType>
 801143e:	4603      	mov	r3, r0
 8011440:	2b00      	cmp	r3, #0
 8011442:	d006      	beq.n	8011452 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011444:	4b08      	ldr	r3, [pc, #32]	; (8011468 <ProcessRadioRxDone+0x52c>)
 8011446:	2201      	movs	r2, #1
 8011448:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 801144c:	f7ff fd50 	bl	8010ef0 <PrepareRxDoneAbort>
                return;
 8011450:	e27c      	b.n	801194c <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011452:	2300      	movs	r3, #0
 8011454:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 8011458:	2300      	movs	r3, #0
 801145a:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801145c:	2300      	movs	r3, #0
 801145e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8011462:	e055      	b.n	8011510 <ProcessRadioRxDone+0x5d4>
 8011464:	20000c54 	.word	0x20000c54
 8011468:	20000738 	.word	0x20000738
 801146c:	20000970 	.word	0x20000970
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011470:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011474:	499f      	ldr	r1, [pc, #636]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 8011476:	4613      	mov	r3, r2
 8011478:	005b      	lsls	r3, r3, #1
 801147a:	4413      	add	r3, r2
 801147c:	011b      	lsls	r3, r3, #4
 801147e:	440b      	add	r3, r1
 8011480:	33ec      	adds	r3, #236	; 0xec
 8011482:	681a      	ldr	r2, [r3, #0]
 8011484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011486:	429a      	cmp	r2, r3
 8011488:	d13d      	bne.n	8011506 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 801148a:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 801148e:	4999      	ldr	r1, [pc, #612]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 8011490:	4613      	mov	r3, r2
 8011492:	005b      	lsls	r3, r3, #1
 8011494:	4413      	add	r3, r2
 8011496:	011b      	lsls	r3, r3, #4
 8011498:	440b      	add	r3, r1
 801149a:	33e9      	adds	r3, #233	; 0xe9
 801149c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d031      	beq.n	8011506 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 80114a2:	2301      	movs	r3, #1
 80114a4:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80114a8:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80114ac:	4991      	ldr	r1, [pc, #580]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 80114ae:	4613      	mov	r3, r2
 80114b0:	005b      	lsls	r3, r3, #1
 80114b2:	4413      	add	r3, r2
 80114b4:	011b      	lsls	r3, r3, #4
 80114b6:	440b      	add	r3, r1
 80114b8:	33ea      	adds	r3, #234	; 0xea
 80114ba:	781b      	ldrb	r3, [r3, #0]
 80114bc:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80114c0:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80114c4:	498b      	ldr	r1, [pc, #556]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 80114c6:	4613      	mov	r3, r2
 80114c8:	005b      	lsls	r3, r3, #1
 80114ca:	4413      	add	r3, r2
 80114cc:	011b      	lsls	r3, r3, #4
 80114ce:	440b      	add	r3, r1
 80114d0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80114da:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80114de:	4985      	ldr	r1, [pc, #532]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 80114e0:	4613      	mov	r3, r2
 80114e2:	005b      	lsls	r3, r3, #1
 80114e4:	4413      	add	r3, r2
 80114e6:	011b      	lsls	r3, r3, #4
 80114e8:	440b      	add	r3, r1
 80114ea:	33ec      	adds	r3, #236	; 0xec
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80114f2:	4b80      	ldr	r3, [pc, #512]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 80114f4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80114f8:	2b02      	cmp	r3, #2
 80114fa:	d10e      	bne.n	801151a <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80114fc:	4b7e      	ldr	r3, [pc, #504]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80114fe:	2203      	movs	r2, #3
 8011500:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 8011504:	e009      	b.n	801151a <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011506:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 801150a:	3301      	adds	r3, #1
 801150c:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8011510:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8011514:	2b00      	cmp	r3, #0
 8011516:	d0ab      	beq.n	8011470 <ProcessRadioRxDone+0x534>
 8011518:	e000      	b.n	801151c <ProcessRadioRxDone+0x5e0>
                    break;
 801151a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801151c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8011520:	2b01      	cmp	r3, #1
 8011522:	d117      	bne.n	8011554 <ProcessRadioRxDone+0x618>
 8011524:	7cbb      	ldrb	r3, [r7, #18]
 8011526:	2b03      	cmp	r3, #3
 8011528:	d10d      	bne.n	8011546 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 801152a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801152e:	f003 0320 	and.w	r3, r3, #32
 8011532:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011534:	2b00      	cmp	r3, #0
 8011536:	d106      	bne.n	8011546 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8011538:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801153c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011540:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011542:	2b00      	cmp	r3, #0
 8011544:	d006      	beq.n	8011554 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011546:	4b6c      	ldr	r3, [pc, #432]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011548:	2201      	movs	r2, #1
 801154a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 801154e:	f7ff fccf 	bl	8010ef0 <PrepareRxDoneAbort>
                return;
 8011552:	e1fb      	b.n	801194c <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8011554:	7cb9      	ldrb	r1, [r7, #18]
 8011556:	4c67      	ldr	r4, [pc, #412]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 8011558:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801155c:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8011560:	f107 0314 	add.w	r3, r7, #20
 8011564:	9301      	str	r3, [sp, #4]
 8011566:	f107 0313 	add.w	r3, r7, #19
 801156a:	9300      	str	r3, [sp, #0]
 801156c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8011570:	f000 fee4 	bl	801233c <GetFCntDown>
 8011574:	4603      	mov	r3, r0
 8011576:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801157a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801157e:	2b00      	cmp	r3, #0
 8011580:	d017      	beq.n	80115b2 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8011582:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011586:	2b07      	cmp	r3, #7
 8011588:	d104      	bne.n	8011594 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 801158a:	4b5b      	ldr	r3, [pc, #364]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 801158c:	2208      	movs	r2, #8
 801158e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8011592:	e003      	b.n	801159c <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011594:	4b58      	ldr	r3, [pc, #352]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011596:	2201      	movs	r2, #1
 8011598:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	4a56      	ldr	r2, [pc, #344]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80115a0:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	4a54      	ldr	r2, [pc, #336]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80115a8:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 80115ac:	f7ff fca0 	bl	8010ef0 <PrepareRxDoneAbort>
                return;
 80115b0:	e1cc      	b.n	801194c <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80115b2:	7cfa      	ldrb	r2, [r7, #19]
 80115b4:	6979      	ldr	r1, [r7, #20]
 80115b6:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80115ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80115be:	9300      	str	r3, [sp, #0]
 80115c0:	460b      	mov	r3, r1
 80115c2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80115c6:	f005 fed1 	bl	801736c <LoRaMacCryptoUnsecureMessage>
 80115ca:	4603      	mov	r3, r0
 80115cc:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80115d0:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d00f      	beq.n	80115f8 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80115d8:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80115dc:	2b02      	cmp	r3, #2
 80115de:	d104      	bne.n	80115ea <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80115e0:	4b45      	ldr	r3, [pc, #276]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80115e2:	220a      	movs	r2, #10
 80115e4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 80115e8:	e003      	b.n	80115f2 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80115ea:	4b43      	ldr	r3, [pc, #268]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80115ec:	220b      	movs	r2, #11
 80115ee:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 80115f2:	f7ff fc7d 	bl	8010ef0 <PrepareRxDoneAbort>
                return;
 80115f6:	e1a9      	b.n	801194c <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80115f8:	4b3f      	ldr	r3, [pc, #252]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8011600:	4a3d      	ldr	r2, [pc, #244]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011602:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8011606:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 801160a:	4b3b      	ldr	r3, [pc, #236]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 801160c:	2200      	movs	r2, #0
 801160e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8011612:	4b39      	ldr	r3, [pc, #228]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011614:	2200      	movs	r2, #0
 8011616:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	4a36      	ldr	r2, [pc, #216]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 801161e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	4a34      	ldr	r2, [pc, #208]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011626:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801162a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801162e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011632:	b2db      	uxtb	r3, r3
 8011634:	2b00      	cmp	r3, #0
 8011636:	bf14      	ite	ne
 8011638:	2301      	movne	r3, #1
 801163a:	2300      	moveq	r3, #0
 801163c:	b2da      	uxtb	r2, r3
 801163e:	4b2e      	ldr	r3, [pc, #184]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011640:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011644:	4b2c      	ldr	r3, [pc, #176]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011646:	2200      	movs	r2, #0
 8011648:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 801164c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011650:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011654:	b2db      	uxtb	r3, r3
 8011656:	2b00      	cmp	r3, #0
 8011658:	bf14      	ite	ne
 801165a:	2301      	movne	r3, #1
 801165c:	2300      	moveq	r3, #0
 801165e:	b2da      	uxtb	r2, r3
 8011660:	4b25      	ldr	r3, [pc, #148]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011662:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011666:	4b24      	ldr	r3, [pc, #144]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011668:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801166c:	2b00      	cmp	r3, #0
 801166e:	d004      	beq.n	801167a <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011670:	4b21      	ldr	r3, [pc, #132]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011672:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011676:	2b01      	cmp	r3, #1
 8011678:	d106      	bne.n	8011688 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801167a:	4b1e      	ldr	r3, [pc, #120]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 801167c:	2200      	movs	r2, #0
 801167e:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8011680:	4b1c      	ldr	r3, [pc, #112]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 8011682:	2201      	movs	r2, #1
 8011684:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011688:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801168c:	2b01      	cmp	r3, #1
 801168e:	d104      	bne.n	801169a <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011690:	4b19      	ldr	r3, [pc, #100]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 8011692:	2202      	movs	r2, #2
 8011694:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8011698:	e03a      	b.n	8011710 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 801169a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801169e:	f023 031f 	bic.w	r3, r3, #31
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	2ba0      	cmp	r3, #160	; 0xa0
 80116a6:	d12b      	bne.n	8011700 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 80116a8:	4b12      	ldr	r3, [pc, #72]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 80116aa:	2201      	movs	r2, #1
 80116ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80116b0:	4b10      	ldr	r3, [pc, #64]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 80116b2:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d102      	bne.n	80116c0 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 80116ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80116bc:	4a0d      	ldr	r2, [pc, #52]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 80116be:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80116c0:	4b0d      	ldr	r3, [pc, #52]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80116c2:	2201      	movs	r2, #1
 80116c4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80116c8:	4b0b      	ldr	r3, [pc, #44]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80116ca:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d01e      	beq.n	8011710 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 80116d2:	4b09      	ldr	r3, [pc, #36]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80116d4:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d019      	beq.n	8011710 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80116dc:	4b05      	ldr	r3, [pc, #20]	; (80116f4 <ProcessRadioRxDone+0x7b8>)
 80116de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80116e2:	4a05      	ldr	r2, [pc, #20]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80116e4:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 80116e8:	4b04      	ldr	r3, [pc, #16]	; (80116fc <ProcessRadioRxDone+0x7c0>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4a02      	ldr	r2, [pc, #8]	; (80116f8 <ProcessRadioRxDone+0x7bc>)
 80116ee:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 80116f2:	e00d      	b.n	8011710 <ProcessRadioRxDone+0x7d4>
 80116f4:	20000c54 	.word	0x20000c54
 80116f8:	20000738 	.word	0x20000738
 80116fc:	20001884 	.word	0x20001884
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011700:	4b94      	ldr	r3, [pc, #592]	; (8011954 <ProcessRadioRxDone+0xa18>)
 8011702:	2200      	movs	r2, #0
 8011704:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011708:	4b93      	ldr	r3, [pc, #588]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 801170a:	2200      	movs	r2, #0
 801170c:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8011710:	4b90      	ldr	r3, [pc, #576]	; (8011954 <ProcessRadioRxDone+0xa18>)
 8011712:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011716:	2b00      	cmp	r3, #0
 8011718:	d106      	bne.n	8011728 <ProcessRadioRxDone+0x7ec>
 801171a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801171e:	f003 0310 	and.w	r3, r3, #16
 8011722:	b2db      	uxtb	r3, r3
 8011724:	2b00      	cmp	r3, #0
 8011726:	d008      	beq.n	801173a <ProcessRadioRxDone+0x7fe>
 8011728:	4b8a      	ldr	r3, [pc, #552]	; (8011954 <ProcessRadioRxDone+0xa18>)
 801172a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801172e:	2b00      	cmp	r3, #0
 8011730:	d103      	bne.n	801173a <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8011732:	4b89      	ldr	r3, [pc, #548]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011734:	2201      	movs	r2, #1
 8011736:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801173a:	4b87      	ldr	r3, [pc, #540]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 801173c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011740:	4a85      	ldr	r2, [pc, #532]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011742:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 8011746:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 801174a:	4618      	mov	r0, r3
 801174c:	f001 ff8a 	bl	8013664 <RemoveMacCommands>

            switch( fType )
 8011750:	7cbb      	ldrb	r3, [r7, #18]
 8011752:	2b03      	cmp	r3, #3
 8011754:	d873      	bhi.n	801183e <ProcessRadioRxDone+0x902>
 8011756:	a201      	add	r2, pc, #4	; (adr r2, 801175c <ProcessRadioRxDone+0x820>)
 8011758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801175c:	0801176d 	.word	0x0801176d
 8011760:	080117bd 	.word	0x080117bd
 8011764:	080117f3 	.word	0x080117f3
 8011768:	08011819 	.word	0x08011819
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801176c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011770:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011774:	b2db      	uxtb	r3, r3
 8011776:	461c      	mov	r4, r3
 8011778:	4b77      	ldr	r3, [pc, #476]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 801177a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801177e:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011782:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011786:	f102 0010 	add.w	r0, r2, #16
 801178a:	9300      	str	r3, [sp, #0]
 801178c:	460b      	mov	r3, r1
 801178e:	4622      	mov	r2, r4
 8011790:	2100      	movs	r1, #0
 8011792:	f000 ff4f 	bl	8012634 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011796:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801179a:	4b6f      	ldr	r3, [pc, #444]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 801179c:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80117a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80117a2:	4a6d      	ldr	r2, [pc, #436]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80117a4:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80117a8:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80117ac:	4b6a      	ldr	r3, [pc, #424]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80117ae:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80117b2:	4b69      	ldr	r3, [pc, #420]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80117b4:	2201      	movs	r2, #1
 80117b6:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 80117ba:	e047      	b.n	801184c <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80117bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80117c0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	461c      	mov	r4, r3
 80117c8:	4b63      	ldr	r3, [pc, #396]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80117ca:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80117ce:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 80117d2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80117d6:	f102 0010 	add.w	r0, r2, #16
 80117da:	9300      	str	r3, [sp, #0]
 80117dc:	460b      	mov	r3, r1
 80117de:	4622      	mov	r2, r4
 80117e0:	2100      	movs	r1, #0
 80117e2:	f000 ff27 	bl	8012634 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80117e6:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80117ea:	4b5b      	ldr	r3, [pc, #364]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80117ec:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 80117f0:	e02c      	b.n	801184c <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80117f2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80117f4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80117f8:	4b57      	ldr	r3, [pc, #348]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80117fa:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80117fe:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	460b      	mov	r3, r1
 8011806:	2100      	movs	r1, #0
 8011808:	f000 ff14 	bl	8012634 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801180c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011810:	4b51      	ldr	r3, [pc, #324]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011812:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8011816:	e019      	b.n	801184c <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011818:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801181c:	4b4e      	ldr	r3, [pc, #312]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 801181e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011824:	4a4c      	ldr	r2, [pc, #304]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011826:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801182a:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801182e:	4b4a      	ldr	r3, [pc, #296]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011830:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8011834:	4b48      	ldr	r3, [pc, #288]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011836:	2201      	movs	r2, #1
 8011838:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 801183c:	e006      	b.n	801184c <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801183e:	4b46      	ldr	r3, [pc, #280]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011840:	2201      	movs	r2, #1
 8011842:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8011846:	f7ff fb53 	bl	8010ef0 <PrepareRxDoneAbort>
                    break;
 801184a:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 801184c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8011850:	2be0      	cmp	r3, #224	; 0xe0
 8011852:	d118      	bne.n	8011886 <ProcessRadioRxDone+0x94a>
 8011854:	4b3f      	ldr	r3, [pc, #252]	; (8011954 <ProcessRadioRxDone+0xa18>)
 8011856:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 801185a:	f083 0301 	eor.w	r3, r3, #1
 801185e:	b2db      	uxtb	r3, r3
 8011860:	2b00      	cmp	r3, #0
 8011862:	d010      	beq.n	8011886 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011864:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011868:	4b3b      	ldr	r3, [pc, #236]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 801186a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 801186e:	4b3a      	ldr	r3, [pc, #232]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011870:	2200      	movs	r2, #0
 8011872:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8011876:	4b38      	ldr	r3, [pc, #224]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011878:	2200      	movs	r2, #0
 801187a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 801187e:	4b36      	ldr	r3, [pc, #216]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011880:	2200      	movs	r2, #0
 8011882:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011886:	4a34      	ldr	r2, [pc, #208]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011888:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801188c:	f043 0302 	orr.w	r3, r3, #2
 8011890:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8011894:	e035      	b.n	8011902 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8011896:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801189a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801189e:	18d1      	adds	r1, r2, r3
 80118a0:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80118aa:	1ad3      	subs	r3, r2, r3
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	461a      	mov	r2, r3
 80118b0:	482a      	ldr	r0, [pc, #168]	; (801195c <ProcessRadioRxDone+0xa20>)
 80118b2:	f009 ff82 	bl	801b7ba <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80118b6:	4b28      	ldr	r3, [pc, #160]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80118b8:	2203      	movs	r2, #3
 80118ba:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80118be:	4b26      	ldr	r3, [pc, #152]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80118c6:	4b24      	ldr	r3, [pc, #144]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80118c8:	4a24      	ldr	r2, [pc, #144]	; (801195c <ProcessRadioRxDone+0xa20>)
 80118ca:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80118ce:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80118d2:	b2da      	uxtb	r2, r3
 80118d4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	b2da      	uxtb	r2, r3
 80118dc:	4b1e      	ldr	r3, [pc, #120]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80118de:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80118e2:	4a1d      	ldr	r2, [pc, #116]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80118e4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80118e8:	f043 0302 	orr.w	r3, r3, #2
 80118ec:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 80118f0:	e007      	b.n	8011902 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80118f2:	4b19      	ldr	r3, [pc, #100]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 80118f4:	2201      	movs	r2, #1
 80118f6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 80118fa:	f7ff faf9 	bl	8010ef0 <PrepareRxDoneAbort>
            break;
 80118fe:	e000      	b.n	8011902 <ProcessRadioRxDone+0x9c6>
            break;
 8011900:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011902:	4b15      	ldr	r3, [pc, #84]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011904:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011908:	2b00      	cmp	r3, #0
 801190a:	d004      	beq.n	8011916 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 801190c:	4b12      	ldr	r3, [pc, #72]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 801190e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011912:	2b01      	cmp	r3, #1
 8011914:	d10c      	bne.n	8011930 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 8011916:	4b10      	ldr	r3, [pc, #64]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011918:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801191c:	2b00      	cmp	r3, #0
 801191e:	d007      	beq.n	8011930 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8011920:	4b0d      	ldr	r3, [pc, #52]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011922:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8011926:	2b00      	cmp	r3, #0
 8011928:	d002      	beq.n	8011930 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 801192a:	2000      	movs	r0, #0
 801192c:	f000 fcec 	bl	8012308 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8011930:	4b09      	ldr	r3, [pc, #36]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 8011932:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8011936:	2b02      	cmp	r3, #2
 8011938:	d006      	beq.n	8011948 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 801193a:	4a07      	ldr	r2, [pc, #28]	; (8011958 <ProcessRadioRxDone+0xa1c>)
 801193c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011940:	f043 0310 	orr.w	r3, r3, #16
 8011944:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8011948:	f7ff fa14 	bl	8010d74 <UpdateRxSlotIdleState>
}
 801194c:	37a4      	adds	r7, #164	; 0xa4
 801194e:	46bd      	mov	sp, r7
 8011950:	bd90      	pop	{r4, r7, pc}
 8011952:	bf00      	nop
 8011954:	20000c54 	.word	0x20000c54
 8011958:	20000738 	.word	0x20000738
 801195c:	20000970 	.word	0x20000970

08011960 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011964:	4b11      	ldr	r3, [pc, #68]	; (80119ac <ProcessRadioTxTimeout+0x4c>)
 8011966:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801196a:	2b02      	cmp	r3, #2
 801196c:	d002      	beq.n	8011974 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801196e:	4b10      	ldr	r3, [pc, #64]	; (80119b0 <ProcessRadioTxTimeout+0x50>)
 8011970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011972:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011974:	f7ff f9fe 	bl	8010d74 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011978:	4b0e      	ldr	r3, [pc, #56]	; (80119b4 <ProcessRadioTxTimeout+0x54>)
 801197a:	2202      	movs	r2, #2
 801197c:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011980:	2002      	movs	r0, #2
 8011982:	f004 fe67 	bl	8016654 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8011986:	4b0b      	ldr	r3, [pc, #44]	; (80119b4 <ProcessRadioTxTimeout+0x54>)
 8011988:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801198c:	2b00      	cmp	r3, #0
 801198e:	d003      	beq.n	8011998 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8011990:	4b08      	ldr	r3, [pc, #32]	; (80119b4 <ProcessRadioTxTimeout+0x54>)
 8011992:	2201      	movs	r2, #1
 8011994:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011998:	4a06      	ldr	r2, [pc, #24]	; (80119b4 <ProcessRadioTxTimeout+0x54>)
 801199a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801199e:	f043 0310 	orr.w	r3, r3, #16
 80119a2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 80119a6:	bf00      	nop
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	20000c54 	.word	0x20000c54
 80119b0:	08021fb4 	.word	0x08021fb4
 80119b4:	20000738 	.word	0x20000738

080119b8 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b084      	sub	sp, #16
 80119bc:	af00      	add	r7, sp, #0
 80119be:	4603      	mov	r3, r0
 80119c0:	460a      	mov	r2, r1
 80119c2:	71fb      	strb	r3, [r7, #7]
 80119c4:	4613      	mov	r3, r2
 80119c6:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80119c8:	2300      	movs	r3, #0
 80119ca:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80119cc:	4b3d      	ldr	r3, [pc, #244]	; (8011ac4 <HandleRadioRxErrorTimeout+0x10c>)
 80119ce:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80119d2:	2b02      	cmp	r3, #2
 80119d4:	d002      	beq.n	80119dc <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80119d6:	4b3c      	ldr	r3, [pc, #240]	; (8011ac8 <HandleRadioRxErrorTimeout+0x110>)
 80119d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119da:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80119dc:	f004 f966 	bl	8015cac <LoRaMacClassBIsBeaconExpected>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d007      	beq.n	80119f6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80119e6:	2002      	movs	r0, #2
 80119e8:	f004 f914 	bl	8015c14 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80119ec:	2000      	movs	r0, #0
 80119ee:	f004 f936 	bl	8015c5e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80119f2:	2301      	movs	r3, #1
 80119f4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80119f6:	4b33      	ldr	r3, [pc, #204]	; (8011ac4 <HandleRadioRxErrorTimeout+0x10c>)
 80119f8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d119      	bne.n	8011a34 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011a00:	f004 f95b 	bl	8015cba <LoRaMacClassBIsPingExpected>
 8011a04:	4603      	mov	r3, r0
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d007      	beq.n	8011a1a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011a0a:	2000      	movs	r0, #0
 8011a0c:	f004 f90c 	bl	8015c28 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011a10:	2000      	movs	r0, #0
 8011a12:	f004 f92d 	bl	8015c70 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8011a16:	2301      	movs	r3, #1
 8011a18:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011a1a:	f004 f955 	bl	8015cc8 <LoRaMacClassBIsMulticastExpected>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d007      	beq.n	8011a34 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011a24:	2000      	movs	r0, #0
 8011a26:	f004 f909 	bl	8015c3c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	f004 f929 	bl	8015c82 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011a30:	2301      	movs	r3, #1
 8011a32:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8011a34:	7bfb      	ldrb	r3, [r7, #15]
 8011a36:	f083 0301 	eor.w	r3, r3, #1
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d03b      	beq.n	8011ab8 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011a40:	4b22      	ldr	r3, [pc, #136]	; (8011acc <HandleRadioRxErrorTimeout+0x114>)
 8011a42:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d122      	bne.n	8011a90 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011a4a:	4b20      	ldr	r3, [pc, #128]	; (8011acc <HandleRadioRxErrorTimeout+0x114>)
 8011a4c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d003      	beq.n	8011a5c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011a54:	4a1d      	ldr	r2, [pc, #116]	; (8011acc <HandleRadioRxErrorTimeout+0x114>)
 8011a56:	79fb      	ldrb	r3, [r7, #7]
 8011a58:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011a5c:	79fb      	ldrb	r3, [r7, #7]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f004 fdf8 	bl	8016654 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011a64:	4b17      	ldr	r3, [pc, #92]	; (8011ac4 <HandleRadioRxErrorTimeout+0x10c>)
 8011a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f00e f831 	bl	801fad0 <UTIL_TIMER_GetElapsedTime>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	4b16      	ldr	r3, [pc, #88]	; (8011acc <HandleRadioRxErrorTimeout+0x114>)
 8011a72:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d31e      	bcc.n	8011ab8 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011a7a:	4815      	ldr	r0, [pc, #84]	; (8011ad0 <HandleRadioRxErrorTimeout+0x118>)
 8011a7c:	f00d fefc 	bl	801f878 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011a80:	4a12      	ldr	r2, [pc, #72]	; (8011acc <HandleRadioRxErrorTimeout+0x114>)
 8011a82:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011a86:	f043 0310 	orr.w	r3, r3, #16
 8011a8a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8011a8e:	e013      	b.n	8011ab8 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011a90:	4b0e      	ldr	r3, [pc, #56]	; (8011acc <HandleRadioRxErrorTimeout+0x114>)
 8011a92:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d003      	beq.n	8011aa2 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8011a9a:	4a0c      	ldr	r2, [pc, #48]	; (8011acc <HandleRadioRxErrorTimeout+0x114>)
 8011a9c:	79bb      	ldrb	r3, [r7, #6]
 8011a9e:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011aa2:	79bb      	ldrb	r3, [r7, #6]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f004 fdd5 	bl	8016654 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8011aaa:	4a08      	ldr	r2, [pc, #32]	; (8011acc <HandleRadioRxErrorTimeout+0x114>)
 8011aac:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011ab0:	f043 0310 	orr.w	r3, r3, #16
 8011ab4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011ab8:	f7ff f95c 	bl	8010d74 <UpdateRxSlotIdleState>
}
 8011abc:	bf00      	nop
 8011abe:	3710      	adds	r7, #16
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	20000c54 	.word	0x20000c54
 8011ac8:	08021fb4 	.word	0x08021fb4
 8011acc:	20000738 	.word	0x20000738
 8011ad0:	20000ad0 	.word	0x20000ad0

08011ad4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011ad8:	2106      	movs	r1, #6
 8011ada:	2005      	movs	r0, #5
 8011adc:	f7ff ff6c 	bl	80119b8 <HandleRadioRxErrorTimeout>
}
 8011ae0:	bf00      	nop
 8011ae2:	bd80      	pop	{r7, pc}

08011ae4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011ae8:	2104      	movs	r1, #4
 8011aea:	2003      	movs	r0, #3
 8011aec:	f7ff ff64 	bl	80119b8 <HandleRadioRxErrorTimeout>
}
 8011af0:	bf00      	nop
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011afa:	f3ef 8310 	mrs	r3, PRIMASK
 8011afe:	607b      	str	r3, [r7, #4]
  return(result);
 8011b00:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011b02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011b04:	b672      	cpsid	i
}
 8011b06:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011b08:	4b1d      	ldr	r3, [pc, #116]	; (8011b80 <LoRaMacHandleIrqEvents+0x8c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011b0e:	4b1c      	ldr	r3, [pc, #112]	; (8011b80 <LoRaMacHandleIrqEvents+0x8c>)
 8011b10:	2200      	movs	r2, #0
 8011b12:	601a      	str	r2, [r3, #0]
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	f383 8810 	msr	PRIMASK, r3
}
 8011b1e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d027      	beq.n	8011b76 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011b26:	783b      	ldrb	r3, [r7, #0]
 8011b28:	f003 0320 	and.w	r3, r3, #32
 8011b2c:	b2db      	uxtb	r3, r3
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d001      	beq.n	8011b36 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011b32:	f7ff f937 	bl	8010da4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011b36:	783b      	ldrb	r3, [r7, #0]
 8011b38:	f003 0310 	and.w	r3, r3, #16
 8011b3c:	b2db      	uxtb	r3, r3
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d001      	beq.n	8011b46 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011b42:	f7ff f9fb 	bl	8010f3c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011b46:	783b      	ldrb	r3, [r7, #0]
 8011b48:	f003 0308 	and.w	r3, r3, #8
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011b52:	f7ff ff05 	bl	8011960 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011b56:	783b      	ldrb	r3, [r7, #0]
 8011b58:	f003 0304 	and.w	r3, r3, #4
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d001      	beq.n	8011b66 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011b62:	f7ff ffb7 	bl	8011ad4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011b66:	783b      	ldrb	r3, [r7, #0]
 8011b68:	f003 0302 	and.w	r3, r3, #2
 8011b6c:	b2db      	uxtb	r3, r3
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d001      	beq.n	8011b76 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011b72:	f7ff ffb7 	bl	8011ae4 <ProcessRadioRxTimeout>
        }
    }
}
 8011b76:	bf00      	nop
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	bf00      	nop
 8011b80:	2000187c 	.word	0x2000187c

08011b84 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011b84:	b480      	push	{r7}
 8011b86:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011b88:	4b10      	ldr	r3, [pc, #64]	; (8011bcc <LoRaMacIsBusy+0x48>)
 8011b8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b8e:	2b01      	cmp	r3, #1
 8011b90:	d101      	bne.n	8011b96 <LoRaMacIsBusy+0x12>
    {
        return false;
 8011b92:	2300      	movs	r3, #0
 8011b94:	e015      	b.n	8011bc2 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8011b96:	4b0e      	ldr	r3, [pc, #56]	; (8011bd0 <LoRaMacIsBusy+0x4c>)
 8011b98:	781b      	ldrb	r3, [r3, #0]
 8011b9a:	f003 0301 	and.w	r3, r3, #1
 8011b9e:	b2db      	uxtb	r3, r3
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d001      	beq.n	8011ba8 <LoRaMacIsBusy+0x24>
    {
        return true;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	e00c      	b.n	8011bc2 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011ba8:	4b08      	ldr	r3, [pc, #32]	; (8011bcc <LoRaMacIsBusy+0x48>)
 8011baa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d106      	bne.n	8011bc0 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011bb2:	4b06      	ldr	r3, [pc, #24]	; (8011bcc <LoRaMacIsBusy+0x48>)
 8011bb4:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d101      	bne.n	8011bc0 <LoRaMacIsBusy+0x3c>
    {
        return false;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	e000      	b.n	8011bc2 <LoRaMacIsBusy+0x3e>
    }
    return true;
 8011bc0:	2301      	movs	r3, #1
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bc80      	pop	{r7}
 8011bc8:	4770      	bx	lr
 8011bca:	bf00      	nop
 8011bcc:	20000738 	.word	0x20000738
 8011bd0:	2000187c 	.word	0x2000187c

08011bd4 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011bd8:	4b05      	ldr	r3, [pc, #20]	; (8011bf0 <LoRaMacIsStopped+0x1c>)
 8011bda:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bde:	2b01      	cmp	r3, #1
 8011be0:	d101      	bne.n	8011be6 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011be2:	2301      	movs	r3, #1
 8011be4:	e000      	b.n	8011be8 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bc80      	pop	{r7}
 8011bee:	4770      	bx	lr
 8011bf0:	20000738 	.word	0x20000738

08011bf4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011bfe:	4a04      	ldr	r2, [pc, #16]	; (8011c10 <LoRaMacEnableRequests+0x1c>)
 8011c00:	79fb      	ldrb	r3, [r7, #7]
 8011c02:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 8011c06:	bf00      	nop
 8011c08:	370c      	adds	r7, #12
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bc80      	pop	{r7}
 8011c0e:	4770      	bx	lr
 8011c10:	20000738 	.word	0x20000738

08011c14 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011c1a:	4b2c      	ldr	r3, [pc, #176]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011c1c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011c20:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011c22:	4b2a      	ldr	r3, [pc, #168]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011c24:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d14a      	bne.n	8011cc2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011c2c:	4b27      	ldr	r3, [pc, #156]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011c2e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011c32:	f003 0301 	and.w	r3, r3, #1
 8011c36:	b2db      	uxtb	r3, r3
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d006      	beq.n	8011c4a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011c3c:	4a23      	ldr	r2, [pc, #140]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011c3e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011c42:	f36f 0300 	bfc	r3, #0, #1
 8011c46:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011c4a:	4b20      	ldr	r3, [pc, #128]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011c4c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011c50:	f003 0304 	and.w	r3, r3, #4
 8011c54:	b2db      	uxtb	r3, r3
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d006      	beq.n	8011c68 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011c5a:	4a1c      	ldr	r2, [pc, #112]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011c5c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011c60:	f36f 0382 	bfc	r3, #2, #1
 8011c64:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011c68:	2001      	movs	r0, #1
 8011c6a:	f7ff ffc3 	bl	8011bf4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011c6e:	793b      	ldrb	r3, [r7, #4]
 8011c70:	f003 0301 	and.w	r3, r3, #1
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d005      	beq.n	8011c86 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011c7a:	4b14      	ldr	r3, [pc, #80]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011c7c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	4813      	ldr	r0, [pc, #76]	; (8011cd0 <LoRaMacHandleRequestEvents+0xbc>)
 8011c84:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011c86:	793b      	ldrb	r3, [r7, #4]
 8011c88:	f003 0304 	and.w	r3, r3, #4
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d00e      	beq.n	8011cb0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011c92:	4810      	ldr	r0, [pc, #64]	; (8011cd4 <LoRaMacHandleRequestEvents+0xc0>)
 8011c94:	f004 fd2c 	bl	80166f0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011c98:	f004 fd7c 	bl	8016794 <LoRaMacConfirmQueueGetCnt>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d006      	beq.n	8011cb0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011ca2:	4a0a      	ldr	r2, [pc, #40]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011ca4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011ca8:	f043 0304 	orr.w	r3, r3, #4
 8011cac:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011cb0:	f004 f828 	bl	8015d04 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011cb4:	4a05      	ldr	r2, [pc, #20]	; (8011ccc <LoRaMacHandleRequestEvents+0xb8>)
 8011cb6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011cba:	f36f 1304 	bfc	r3, #4, #1
 8011cbe:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8011cc2:	bf00      	nop
 8011cc4:	3708      	adds	r7, #8
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	bd80      	pop	{r7, pc}
 8011cca:	bf00      	nop
 8011ccc:	20000738 	.word	0x20000738
 8011cd0:	20000b78 	.word	0x20000b78
 8011cd4:	20000b8c 	.word	0x20000b8c

08011cd8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011cdc:	4b16      	ldr	r3, [pc, #88]	; (8011d38 <LoRaMacHandleIndicationEvents+0x60>)
 8011cde:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011ce2:	f003 0308 	and.w	r3, r3, #8
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d00d      	beq.n	8011d08 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011cec:	4a12      	ldr	r2, [pc, #72]	; (8011d38 <LoRaMacHandleIndicationEvents+0x60>)
 8011cee:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011cf2:	f36f 03c3 	bfc	r3, #3, #1
 8011cf6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011cfa:	4b0f      	ldr	r3, [pc, #60]	; (8011d38 <LoRaMacHandleIndicationEvents+0x60>)
 8011cfc:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	490e      	ldr	r1, [pc, #56]	; (8011d3c <LoRaMacHandleIndicationEvents+0x64>)
 8011d04:	480e      	ldr	r0, [pc, #56]	; (8011d40 <LoRaMacHandleIndicationEvents+0x68>)
 8011d06:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011d08:	4b0b      	ldr	r3, [pc, #44]	; (8011d38 <LoRaMacHandleIndicationEvents+0x60>)
 8011d0a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011d0e:	f003 0302 	and.w	r3, r3, #2
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d00d      	beq.n	8011d34 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011d18:	4a07      	ldr	r2, [pc, #28]	; (8011d38 <LoRaMacHandleIndicationEvents+0x60>)
 8011d1a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011d1e:	f36f 0341 	bfc	r3, #1, #1
 8011d22:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011d26:	4b04      	ldr	r3, [pc, #16]	; (8011d38 <LoRaMacHandleIndicationEvents+0x60>)
 8011d28:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	4903      	ldr	r1, [pc, #12]	; (8011d3c <LoRaMacHandleIndicationEvents+0x64>)
 8011d30:	4804      	ldr	r0, [pc, #16]	; (8011d44 <LoRaMacHandleIndicationEvents+0x6c>)
 8011d32:	4798      	blx	r3
    }
}
 8011d34:	bf00      	nop
 8011d36:	bd80      	pop	{r7, pc}
 8011d38:	20000738 	.word	0x20000738
 8011d3c:	20000bc4 	.word	0x20000bc4
 8011d40:	20000ba0 	.word	0x20000ba0
 8011d44:	20000b58 	.word	0x20000b58

08011d48 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011d4e:	4b2a      	ldr	r3, [pc, #168]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d50:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011d54:	f003 0301 	and.w	r3, r3, #1
 8011d58:	b2db      	uxtb	r3, r3
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d048      	beq.n	8011df0 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011d62:	2300      	movs	r3, #0
 8011d64:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011d66:	4b24      	ldr	r3, [pc, #144]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d68:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d004      	beq.n	8011d7a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011d70:	4b21      	ldr	r3, [pc, #132]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d72:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	d104      	bne.n	8011d84 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011d7a:	f002 f943 	bl	8014004 <CheckRetransUnconfirmedUplink>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	71fb      	strb	r3, [r7, #7]
 8011d82:	e010      	b.n	8011da6 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011d84:	4b1c      	ldr	r3, [pc, #112]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d86:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d10b      	bne.n	8011da6 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8011d8e:	4b1a      	ldr	r3, [pc, #104]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011d90:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d004      	beq.n	8011da2 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011d98:	f002 f960 	bl	801405c <CheckRetransConfirmedUplink>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	71fb      	strb	r3, [r7, #7]
 8011da0:	e001      	b.n	8011da6 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8011da2:	2301      	movs	r3, #1
 8011da4:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011da6:	79fb      	ldrb	r3, [r7, #7]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d00d      	beq.n	8011dc8 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011dac:	4813      	ldr	r0, [pc, #76]	; (8011dfc <LoRaMacHandleMcpsRequest+0xb4>)
 8011dae:	f00d fd63 	bl	801f878 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011db2:	4b11      	ldr	r3, [pc, #68]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011db4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011db8:	f023 0320 	bic.w	r3, r3, #32
 8011dbc:	4a0e      	ldr	r2, [pc, #56]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011dbe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011dc2:	f002 f985 	bl	80140d0 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011dc6:	e013      	b.n	8011df0 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8011dc8:	79bb      	ldrb	r3, [r7, #6]
 8011dca:	f083 0301 	eor.w	r3, r3, #1
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00d      	beq.n	8011df0 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011dd4:	4a08      	ldr	r2, [pc, #32]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011dd6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011dda:	f36f 1304 	bfc	r3, #4, #1
 8011dde:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8011de2:	4b05      	ldr	r3, [pc, #20]	; (8011df8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011de4:	2200      	movs	r2, #0
 8011de6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8011dea:	2000      	movs	r0, #0
 8011dec:	f000 f9c8 	bl	8012180 <OnTxDelayedTimerEvent>
}
 8011df0:	bf00      	nop
 8011df2:	3708      	adds	r7, #8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	20000738 	.word	0x20000738
 8011dfc:	20000aa0 	.word	0x20000aa0

08011e00 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011e04:	4b18      	ldr	r3, [pc, #96]	; (8011e68 <LoRaMacHandleMlmeRequest+0x68>)
 8011e06:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011e0a:	f003 0304 	and.w	r3, r3, #4
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d026      	beq.n	8011e62 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011e14:	2001      	movs	r0, #1
 8011e16:	f004 fc51 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d012      	beq.n	8011e46 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011e20:	2001      	movs	r0, #1
 8011e22:	f004 fbed 	bl	8016600 <LoRaMacConfirmQueueGetStatus>
 8011e26:	4603      	mov	r3, r0
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d103      	bne.n	8011e34 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011e2c:	4b0e      	ldr	r3, [pc, #56]	; (8011e68 <LoRaMacHandleMlmeRequest+0x68>)
 8011e2e:	2200      	movs	r2, #0
 8011e30:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e34:	4b0c      	ldr	r3, [pc, #48]	; (8011e68 <LoRaMacHandleMlmeRequest+0x68>)
 8011e36:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e3a:	f023 0302 	bic.w	r3, r3, #2
 8011e3e:	4a0a      	ldr	r2, [pc, #40]	; (8011e68 <LoRaMacHandleMlmeRequest+0x68>)
 8011e40:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011e44:	e00d      	b.n	8011e62 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8011e46:	2006      	movs	r0, #6
 8011e48:	f004 fc38 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d007      	beq.n	8011e62 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e52:	4b05      	ldr	r3, [pc, #20]	; (8011e68 <LoRaMacHandleMlmeRequest+0x68>)
 8011e54:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e58:	f023 0302 	bic.w	r3, r3, #2
 8011e5c:	4a02      	ldr	r2, [pc, #8]	; (8011e68 <LoRaMacHandleMlmeRequest+0x68>)
 8011e5e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011e62:	bf00      	nop
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	20000738 	.word	0x20000738

08011e6c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011e70:	200b      	movs	r0, #11
 8011e72:	f004 fc23 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d019      	beq.n	8011eb0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011e7c:	4b0e      	ldr	r3, [pc, #56]	; (8011eb8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e7e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011e82:	f003 0301 	and.w	r3, r3, #1
 8011e86:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d111      	bne.n	8011eb0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011e8c:	4b0a      	ldr	r3, [pc, #40]	; (8011eb8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e8e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011e92:	f003 0304 	and.w	r3, r3, #4
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d009      	beq.n	8011eb0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e9c:	4b06      	ldr	r3, [pc, #24]	; (8011eb8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011e9e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ea2:	f023 0302 	bic.w	r3, r3, #2
 8011ea6:	4a04      	ldr	r2, [pc, #16]	; (8011eb8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011ea8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011eac:	2301      	movs	r3, #1
 8011eae:	e000      	b.n	8011eb2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20000738 	.word	0x20000738

08011ebc <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	b083      	sub	sp, #12
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	71fb      	strb	r3, [r7, #7]
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	71bb      	strb	r3, [r7, #6]
 8011eca:	4613      	mov	r3, r2
 8011ecc:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8011ece:	79fb      	ldrb	r3, [r7, #7]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d00a      	beq.n	8011eea <CheckForMinimumAbpDatarate+0x2e>
 8011ed4:	79bb      	ldrb	r3, [r7, #6]
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d107      	bne.n	8011eea <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 8011eda:	797b      	ldrb	r3, [r7, #5]
 8011edc:	f083 0301 	eor.w	r3, r3, #1
 8011ee0:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d001      	beq.n	8011eea <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e000      	b.n	8011eec <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 8011eea:	2300      	movs	r3, #0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bc80      	pop	{r7}
 8011ef4:	4770      	bx	lr
	...

08011ef8 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011ef8:	b480      	push	{r7}
 8011efa:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011efc:	4b0d      	ldr	r3, [pc, #52]	; (8011f34 <LoRaMacCheckForRxAbort+0x3c>)
 8011efe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00f      	beq.n	8011f2a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011f0a:	4b0a      	ldr	r3, [pc, #40]	; (8011f34 <LoRaMacCheckForRxAbort+0x3c>)
 8011f0c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011f14:	4a07      	ldr	r2, [pc, #28]	; (8011f34 <LoRaMacCheckForRxAbort+0x3c>)
 8011f16:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011f1a:	4b06      	ldr	r3, [pc, #24]	; (8011f34 <LoRaMacCheckForRxAbort+0x3c>)
 8011f1c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f20:	f023 0302 	bic.w	r3, r3, #2
 8011f24:	4a03      	ldr	r2, [pc, #12]	; (8011f34 <LoRaMacCheckForRxAbort+0x3c>)
 8011f26:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011f2a:	bf00      	nop
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bc80      	pop	{r7}
 8011f30:	4770      	bx	lr
 8011f32:	bf00      	nop
 8011f34:	20000738 	.word	0x20000738

08011f38 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011f40:	2300      	movs	r3, #0
 8011f42:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011f44:	2300      	movs	r3, #0
 8011f46:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011f48:	4b51      	ldr	r3, [pc, #324]	; (8012090 <LoRaMacHandleNvm+0x158>)
 8011f4a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f040 8099 	bne.w	8012086 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2124      	movs	r1, #36	; 0x24
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f009 fc83 	bl	801b864 <Crc32>
 8011f5e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f64:	68ba      	ldr	r2, [r7, #8]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d006      	beq.n	8011f78 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	68ba      	ldr	r2, [r7, #8]
 8011f6e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011f70:	89fb      	ldrh	r3, [r7, #14]
 8011f72:	f043 0301 	orr.w	r3, r3, #1
 8011f76:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	3328      	adds	r3, #40	; 0x28
 8011f7c:	211c      	movs	r1, #28
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f009 fc70 	bl	801b864 <Crc32>
 8011f84:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f8a:	68ba      	ldr	r2, [r7, #8]
 8011f8c:	429a      	cmp	r2, r3
 8011f8e:	d006      	beq.n	8011f9e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	68ba      	ldr	r2, [r7, #8]
 8011f94:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011f96:	89fb      	ldrh	r3, [r7, #14]
 8011f98:	f043 0302 	orr.w	r3, r3, #2
 8011f9c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	3348      	adds	r3, #72	; 0x48
 8011fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	f009 fc5c 	bl	801b864 <Crc32>
 8011fac:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d007      	beq.n	8011fca <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011fc2:	89fb      	ldrh	r3, [r7, #14]
 8011fc4:	f043 0304 	orr.w	r3, r3, #4
 8011fc8:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8011fd0:	21d4      	movs	r1, #212	; 0xd4
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	f009 fc46 	bl	801b864 <Crc32>
 8011fd8:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011fe0:	68ba      	ldr	r2, [r7, #8]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d007      	beq.n	8011ff6 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	68ba      	ldr	r2, [r7, #8]
 8011fea:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011fee:	89fb      	ldrh	r3, [r7, #14]
 8011ff0:	f043 0308 	orr.w	r3, r3, #8
 8011ff4:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011ffc:	2110      	movs	r1, #16
 8011ffe:	4618      	mov	r0, r3
 8012000:	f009 fc30 	bl	801b864 <Crc32>
 8012004:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 801200c:	68ba      	ldr	r2, [r7, #8]
 801200e:	429a      	cmp	r2, r3
 8012010:	d007      	beq.n	8012022 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	68ba      	ldr	r2, [r7, #8]
 8012016:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801201a:	89fb      	ldrh	r3, [r7, #14]
 801201c:	f043 0310 	orr.w	r3, r3, #16
 8012020:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8012028:	f44f 715e 	mov.w	r1, #888	; 0x378
 801202c:	4618      	mov	r0, r3
 801202e:	f009 fc19 	bl	801b864 <Crc32>
 8012032:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 801203a:	68ba      	ldr	r2, [r7, #8]
 801203c:	429a      	cmp	r2, r3
 801203e:	d007      	beq.n	8012050 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	68ba      	ldr	r2, [r7, #8]
 8012044:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8012048:	89fb      	ldrh	r3, [r7, #14]
 801204a:	f043 0320 	orr.w	r3, r3, #32
 801204e:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8012056:	2114      	movs	r1, #20
 8012058:	4618      	mov	r0, r3
 801205a:	f009 fc03 	bl	801b864 <Crc32>
 801205e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	429a      	cmp	r2, r3
 801206a:	d007      	beq.n	801207c <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	68ba      	ldr	r2, [r7, #8]
 8012070:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8012074:	89fb      	ldrh	r3, [r7, #14]
 8012076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801207a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 801207c:	89fb      	ldrh	r3, [r7, #14]
 801207e:	4618      	mov	r0, r3
 8012080:	f002 f878 	bl	8014174 <CallNvmDataChangeCallback>
 8012084:	e000      	b.n	8012088 <LoRaMacHandleNvm+0x150>
        return;
 8012086:	bf00      	nop
}
 8012088:	3710      	adds	r7, #16
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}
 801208e:	bf00      	nop
 8012090:	20000738 	.word	0x20000738

08012094 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00d      	beq.n	80120c0 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 80120a4:	6838      	ldr	r0, [r7, #0]
 80120a6:	f00d fd13 	bl	801fad0 <UTIL_TIMER_GetElapsedTime>
 80120aa:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 80120ac:	68fa      	ldr	r2, [r7, #12]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	429a      	cmp	r2, r3
 80120b2:	d905      	bls.n	80120c0 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 80120b4:	4b05      	ldr	r3, [pc, #20]	; (80120cc <LoRaMacHandleResponseTimeout+0x38>)
 80120b6:	2200      	movs	r2, #0
 80120b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 80120bc:	2301      	movs	r3, #1
 80120be:	e000      	b.n	80120c2 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 80120c0:	2300      	movs	r3, #0
}
 80120c2:	4618      	mov	r0, r3
 80120c4:	3710      	adds	r7, #16
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	20000c54 	.word	0x20000c54

080120d0 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 80120d0:	b580      	push	{r7, lr}
 80120d2:	b082      	sub	sp, #8
 80120d4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80120d6:	2300      	movs	r3, #0
 80120d8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80120da:	f7ff fd0b 	bl	8011af4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80120de:	f003 fe80 	bl	8015de2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 80120e2:	4b25      	ldr	r3, [pc, #148]	; (8012178 <LoRaMacProcess+0xa8>)
 80120e4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80120e8:	f003 0310 	and.w	r3, r3, #16
 80120ec:	b2db      	uxtb	r3, r3
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d023      	beq.n	801213a <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 80120f2:	2000      	movs	r0, #0
 80120f4:	f7ff fd7e 	bl	8011bf4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 80120f8:	f7ff fefe 	bl	8011ef8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 80120fc:	f002 f858 	bl	80141b0 <IsRequestPending>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d006      	beq.n	8012114 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012106:	f7ff feb1 	bl	8011e6c <LoRaMacCheckForBeaconAcquisition>
 801210a:	4603      	mov	r3, r0
 801210c:	461a      	mov	r2, r3
 801210e:	79fb      	ldrb	r3, [r7, #7]
 8012110:	4313      	orrs	r3, r2
 8012112:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8012114:	79fb      	ldrb	r3, [r7, #7]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d103      	bne.n	8012122 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801211a:	f7ff fe71 	bl	8011e00 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801211e:	f7ff fe13 	bl	8011d48 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012122:	f7ff fd77 	bl	8011c14 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012126:	2001      	movs	r0, #1
 8012128:	f7ff fd64 	bl	8011bf4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 801212c:	4a12      	ldr	r2, [pc, #72]	; (8012178 <LoRaMacProcess+0xa8>)
 801212e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012132:	f043 0320 	orr.w	r3, r3, #32
 8012136:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 801213a:	f7ff fdcd 	bl	8011cd8 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801213e:	4b0e      	ldr	r3, [pc, #56]	; (8012178 <LoRaMacProcess+0xa8>)
 8012140:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012144:	2b02      	cmp	r3, #2
 8012146:	d101      	bne.n	801214c <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8012148:	f001 fc1a 	bl	8013980 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 801214c:	4b0a      	ldr	r3, [pc, #40]	; (8012178 <LoRaMacProcess+0xa8>)
 801214e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8012152:	f003 0320 	and.w	r3, r3, #32
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b00      	cmp	r3, #0
 801215a:	d009      	beq.n	8012170 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 801215c:	4a06      	ldr	r2, [pc, #24]	; (8012178 <LoRaMacProcess+0xa8>)
 801215e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8012162:	f36f 1345 	bfc	r3, #5, #1
 8012166:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 801216a:	4804      	ldr	r0, [pc, #16]	; (801217c <LoRaMacProcess+0xac>)
 801216c:	f7ff fee4 	bl	8011f38 <LoRaMacHandleNvm>
    }
}
 8012170:	bf00      	nop
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	20000738 	.word	0x20000738
 801217c:	20000c54 	.word	0x20000c54

08012180 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012188:	481e      	ldr	r0, [pc, #120]	; (8012204 <OnTxDelayedTimerEvent+0x84>)
 801218a:	f00d fb75 	bl	801f878 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801218e:	4b1e      	ldr	r3, [pc, #120]	; (8012208 <OnTxDelayedTimerEvent+0x88>)
 8012190:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012194:	f023 0320 	bic.w	r3, r3, #32
 8012198:	4a1b      	ldr	r2, [pc, #108]	; (8012208 <OnTxDelayedTimerEvent+0x88>)
 801219a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801219e:	4b1b      	ldr	r3, [pc, #108]	; (801220c <OnTxDelayedTimerEvent+0x8c>)
 80121a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121a4:	4a18      	ldr	r2, [pc, #96]	; (8012208 <OnTxDelayedTimerEvent+0x88>)
 80121a6:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 80121aa:	4611      	mov	r1, r2
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7ff ff71 	bl	8012094 <LoRaMacHandleResponseTimeout>
 80121b2:	4603      	mov	r3, r0
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d11e      	bne.n	80121f6 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 80121b8:	2001      	movs	r0, #1
 80121ba:	f001 f92b 	bl	8013414 <ScheduleTx>
 80121be:	4603      	mov	r3, r0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d01a      	beq.n	80121fa <OnTxDelayedTimerEvent+0x7a>
 80121c4:	2b0b      	cmp	r3, #11
 80121c6:	d018      	beq.n	80121fa <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80121c8:	4b10      	ldr	r3, [pc, #64]	; (801220c <OnTxDelayedTimerEvent+0x8c>)
 80121ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80121ce:	b2da      	uxtb	r2, r3
 80121d0:	4b0d      	ldr	r3, [pc, #52]	; (8012208 <OnTxDelayedTimerEvent+0x88>)
 80121d2:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80121d6:	4b0c      	ldr	r3, [pc, #48]	; (8012208 <OnTxDelayedTimerEvent+0x88>)
 80121d8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80121dc:	4b0a      	ldr	r3, [pc, #40]	; (8012208 <OnTxDelayedTimerEvent+0x88>)
 80121de:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80121e2:	4b09      	ldr	r3, [pc, #36]	; (8012208 <OnTxDelayedTimerEvent+0x88>)
 80121e4:	2209      	movs	r2, #9
 80121e6:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80121ea:	2009      	movs	r0, #9
 80121ec:	f004 fa32 	bl	8016654 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80121f0:	f001 ff6e 	bl	80140d0 <StopRetransmission>
            break;
 80121f4:	e002      	b.n	80121fc <OnTxDelayedTimerEvent+0x7c>
        return;
 80121f6:	bf00      	nop
 80121f8:	e000      	b.n	80121fc <OnTxDelayedTimerEvent+0x7c>
            break;
 80121fa:	bf00      	nop
        }
    }
}
 80121fc:	3708      	adds	r7, #8
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}
 8012202:	bf00      	nop
 8012204:	20000aa0 	.word	0x20000aa0
 8012208:	20000738 	.word	0x20000738
 801220c:	20000c54 	.word	0x20000c54

08012210 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b082      	sub	sp, #8
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8012218:	4b17      	ldr	r3, [pc, #92]	; (8012278 <OnRxWindow1TimerEvent+0x68>)
 801221a:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 801221e:	4b16      	ldr	r3, [pc, #88]	; (8012278 <OnRxWindow1TimerEvent+0x68>)
 8012220:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8012224:	4b15      	ldr	r3, [pc, #84]	; (801227c <OnRxWindow1TimerEvent+0x6c>)
 8012226:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 801222a:	b25a      	sxtb	r2, r3
 801222c:	4b12      	ldr	r3, [pc, #72]	; (8012278 <OnRxWindow1TimerEvent+0x68>)
 801222e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012232:	4b12      	ldr	r3, [pc, #72]	; (801227c <OnRxWindow1TimerEvent+0x6c>)
 8012234:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012238:	4b0f      	ldr	r3, [pc, #60]	; (8012278 <OnRxWindow1TimerEvent+0x68>)
 801223a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801223e:	4b0f      	ldr	r3, [pc, #60]	; (801227c <OnRxWindow1TimerEvent+0x6c>)
 8012240:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012244:	4b0c      	ldr	r3, [pc, #48]	; (8012278 <OnRxWindow1TimerEvent+0x68>)
 8012246:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 801224a:	4b0b      	ldr	r3, [pc, #44]	; (8012278 <OnRxWindow1TimerEvent+0x68>)
 801224c:	2200      	movs	r2, #0
 801224e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8012252:	4b09      	ldr	r3, [pc, #36]	; (8012278 <OnRxWindow1TimerEvent+0x68>)
 8012254:	2200      	movs	r2, #0
 8012256:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801225a:	4b08      	ldr	r3, [pc, #32]	; (801227c <OnRxWindow1TimerEvent+0x6c>)
 801225c:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012260:	4b05      	ldr	r3, [pc, #20]	; (8012278 <OnRxWindow1TimerEvent+0x68>)
 8012262:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8012266:	4906      	ldr	r1, [pc, #24]	; (8012280 <OnRxWindow1TimerEvent+0x70>)
 8012268:	4806      	ldr	r0, [pc, #24]	; (8012284 <OnRxWindow1TimerEvent+0x74>)
 801226a:	f001 fb55 	bl	8013918 <RxWindowSetup>
}
 801226e:	bf00      	nop
 8012270:	3708      	adds	r7, #8
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}
 8012276:	bf00      	nop
 8012278:	20000738 	.word	0x20000738
 801227c:	20000c54 	.word	0x20000c54
 8012280:	20000af0 	.word	0x20000af0
 8012284:	20000ab8 	.word	0x20000ab8

08012288 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012290:	4b19      	ldr	r3, [pc, #100]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 8012292:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012296:	2b00      	cmp	r3, #0
 8012298:	d029      	beq.n	80122ee <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801229a:	4b17      	ldr	r3, [pc, #92]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 801229c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80122a0:	4b15      	ldr	r3, [pc, #84]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 80122a2:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80122a6:	4b15      	ldr	r3, [pc, #84]	; (80122fc <OnRxWindow2TimerEvent+0x74>)
 80122a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122aa:	4a13      	ldr	r2, [pc, #76]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 80122ac:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80122b0:	4b12      	ldr	r3, [pc, #72]	; (80122fc <OnRxWindow2TimerEvent+0x74>)
 80122b2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80122b6:	4b10      	ldr	r3, [pc, #64]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 80122b8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80122bc:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <OnRxWindow2TimerEvent+0x74>)
 80122be:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80122c2:	4b0d      	ldr	r3, [pc, #52]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 80122c4:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80122c8:	4b0b      	ldr	r3, [pc, #44]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 80122ca:	2200      	movs	r2, #0
 80122cc:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80122d0:	4b09      	ldr	r3, [pc, #36]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 80122d2:	2201      	movs	r2, #1
 80122d4:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80122d8:	4b08      	ldr	r3, [pc, #32]	; (80122fc <OnRxWindow2TimerEvent+0x74>)
 80122da:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80122de:	4b06      	ldr	r3, [pc, #24]	; (80122f8 <OnRxWindow2TimerEvent+0x70>)
 80122e0:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80122e4:	4906      	ldr	r1, [pc, #24]	; (8012300 <OnRxWindow2TimerEvent+0x78>)
 80122e6:	4807      	ldr	r0, [pc, #28]	; (8012304 <OnRxWindow2TimerEvent+0x7c>)
 80122e8:	f001 fb16 	bl	8013918 <RxWindowSetup>
 80122ec:	e000      	b.n	80122f0 <OnRxWindow2TimerEvent+0x68>
        return;
 80122ee:	bf00      	nop
}
 80122f0:	3708      	adds	r7, #8
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop
 80122f8:	20000738 	.word	0x20000738
 80122fc:	20000c54 	.word	0x20000c54
 8012300:	20000b08 	.word	0x20000b08
 8012304:	20000ad0 	.word	0x20000ad0

08012308 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b082      	sub	sp, #8
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8012310:	4808      	ldr	r0, [pc, #32]	; (8012334 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8012312:	f00d fab1 	bl	801f878 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8012316:	4b08      	ldr	r3, [pc, #32]	; (8012338 <OnRetransmitTimeoutTimerEvent+0x30>)
 8012318:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801231c:	2b00      	cmp	r3, #0
 801231e:	d003      	beq.n	8012328 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8012320:	4b05      	ldr	r3, [pc, #20]	; (8012338 <OnRetransmitTimeoutTimerEvent+0x30>)
 8012322:	2201      	movs	r2, #1
 8012324:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 8012328:	f001 ff0e 	bl	8014148 <OnMacProcessNotify>
}
 801232c:	bf00      	nop
 801232e:	3708      	adds	r7, #8
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	20000b38 	.word	0x20000b38
 8012338:	20000738 	.word	0x20000738

0801233c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	60ba      	str	r2, [r7, #8]
 8012344:	607b      	str	r3, [r7, #4]
 8012346:	4603      	mov	r3, r0
 8012348:	73fb      	strb	r3, [r7, #15]
 801234a:	460b      	mov	r3, r1
 801234c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d005      	beq.n	8012360 <GetFCntDown+0x24>
 8012354:	69bb      	ldr	r3, [r7, #24]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d002      	beq.n	8012360 <GetFCntDown+0x24>
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d101      	bne.n	8012364 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012360:	2309      	movs	r3, #9
 8012362:	e028      	b.n	80123b6 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012364:	7bfb      	ldrb	r3, [r7, #15]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d016      	beq.n	8012398 <GetFCntDown+0x5c>
 801236a:	2b01      	cmp	r3, #1
 801236c:	d118      	bne.n	80123a0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801236e:	79bb      	ldrb	r3, [r7, #6]
 8012370:	2b01      	cmp	r3, #1
 8012372:	d10d      	bne.n	8012390 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012374:	7bbb      	ldrb	r3, [r7, #14]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d002      	beq.n	8012380 <GetFCntDown+0x44>
 801237a:	7bbb      	ldrb	r3, [r7, #14]
 801237c:	2b03      	cmp	r3, #3
 801237e:	d103      	bne.n	8012388 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	2202      	movs	r2, #2
 8012384:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8012386:	e00d      	b.n	80123a4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	2201      	movs	r2, #1
 801238c:	701a      	strb	r2, [r3, #0]
            break;
 801238e:	e009      	b.n	80123a4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012390:	69bb      	ldr	r3, [r7, #24]
 8012392:	2203      	movs	r2, #3
 8012394:	701a      	strb	r2, [r3, #0]
            break;
 8012396:	e005      	b.n	80123a4 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	2204      	movs	r2, #4
 801239c:	701a      	strb	r2, [r3, #0]
            break;
 801239e:	e001      	b.n	80123a4 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80123a0:	2305      	movs	r3, #5
 80123a2:	e008      	b.n	80123b6 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	7818      	ldrb	r0, [r3, #0]
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	89db      	ldrh	r3, [r3, #14]
 80123ac:	69fa      	ldr	r2, [r7, #28]
 80123ae:	4619      	mov	r1, r3
 80123b0:	f004 fd8e 	bl	8016ed0 <LoRaMacCryptoGetFCntDown>
 80123b4:	4603      	mov	r3, r0
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3710      	adds	r7, #16
 80123ba:	46bd      	mov	sp, r7
 80123bc:	bd80      	pop	{r7, pc}
	...

080123c0 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80123c0:	b5b0      	push	{r4, r5, r7, lr}
 80123c2:	b084      	sub	sp, #16
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	4603      	mov	r3, r0
 80123c8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123ca:	2303      	movs	r3, #3
 80123cc:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80123ce:	4b6e      	ldr	r3, [pc, #440]	; (8012588 <SwitchClass+0x1c8>)
 80123d0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80123d4:	2b02      	cmp	r3, #2
 80123d6:	f000 80bb 	beq.w	8012550 <SwitchClass+0x190>
 80123da:	2b02      	cmp	r3, #2
 80123dc:	f300 80ce 	bgt.w	801257c <SwitchClass+0x1bc>
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d003      	beq.n	80123ec <SwitchClass+0x2c>
 80123e4:	2b01      	cmp	r3, #1
 80123e6:	f000 80a5 	beq.w	8012534 <SwitchClass+0x174>
 80123ea:	e0c7      	b.n	801257c <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80123ec:	79fb      	ldrb	r3, [r7, #7]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d109      	bne.n	8012406 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80123f2:	4b65      	ldr	r3, [pc, #404]	; (8012588 <SwitchClass+0x1c8>)
 80123f4:	4a64      	ldr	r2, [pc, #400]	; (8012588 <SwitchClass+0x1c8>)
 80123f6:	3374      	adds	r3, #116	; 0x74
 80123f8:	326c      	adds	r2, #108	; 0x6c
 80123fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80123fe:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8012402:	2300      	movs	r3, #0
 8012404:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 8012406:	79fb      	ldrb	r3, [r7, #7]
 8012408:	2b01      	cmp	r3, #1
 801240a:	d10c      	bne.n	8012426 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 801240c:	79fb      	ldrb	r3, [r7, #7]
 801240e:	4618      	mov	r0, r3
 8012410:	f003 fc7e 	bl	8015d10 <LoRaMacClassBSwitchClass>
 8012414:	4603      	mov	r3, r0
 8012416:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8012418:	7bfb      	ldrb	r3, [r7, #15]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d103      	bne.n	8012426 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 801241e:	4a5a      	ldr	r2, [pc, #360]	; (8012588 <SwitchClass+0x1c8>)
 8012420:	79fb      	ldrb	r3, [r7, #7]
 8012422:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 8012426:	79fb      	ldrb	r3, [r7, #7]
 8012428:	2b02      	cmp	r3, #2
 801242a:	f040 80a2 	bne.w	8012572 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801242e:	4a56      	ldr	r2, [pc, #344]	; (8012588 <SwitchClass+0x1c8>)
 8012430:	79fb      	ldrb	r3, [r7, #7]
 8012432:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8012436:	4a55      	ldr	r2, [pc, #340]	; (801258c <SwitchClass+0x1cc>)
 8012438:	4b54      	ldr	r3, [pc, #336]	; (801258c <SwitchClass+0x1cc>)
 801243a:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 801243e:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 8012442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012446:	e895 0003 	ldmia.w	r5, {r0, r1}
 801244a:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801244e:	4b4f      	ldr	r3, [pc, #316]	; (801258c <SwitchClass+0x1cc>)
 8012450:	2202      	movs	r2, #2
 8012452:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012456:	2300      	movs	r3, #0
 8012458:	73bb      	strb	r3, [r7, #14]
 801245a:	e05b      	b.n	8012514 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801245c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012460:	4949      	ldr	r1, [pc, #292]	; (8012588 <SwitchClass+0x1c8>)
 8012462:	4613      	mov	r3, r2
 8012464:	005b      	lsls	r3, r3, #1
 8012466:	4413      	add	r3, r2
 8012468:	011b      	lsls	r3, r3, #4
 801246a:	440b      	add	r3, r1
 801246c:	33e9      	adds	r3, #233	; 0xe9
 801246e:	781b      	ldrb	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d049      	beq.n	8012508 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8012474:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012478:	4943      	ldr	r1, [pc, #268]	; (8012588 <SwitchClass+0x1c8>)
 801247a:	4613      	mov	r3, r2
 801247c:	005b      	lsls	r3, r3, #1
 801247e:	4413      	add	r3, r2
 8012480:	011b      	lsls	r3, r3, #4
 8012482:	440b      	add	r3, r1
 8012484:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012488:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801248a:	2b02      	cmp	r3, #2
 801248c:	d13c      	bne.n	8012508 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 801248e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012492:	493d      	ldr	r1, [pc, #244]	; (8012588 <SwitchClass+0x1c8>)
 8012494:	4613      	mov	r3, r2
 8012496:	005b      	lsls	r3, r3, #1
 8012498:	4413      	add	r3, r2
 801249a:	011b      	lsls	r3, r3, #4
 801249c:	440b      	add	r3, r1
 801249e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4a38      	ldr	r2, [pc, #224]	; (8012588 <SwitchClass+0x1c8>)
 80124a6:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 80124a8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80124ac:	4936      	ldr	r1, [pc, #216]	; (8012588 <SwitchClass+0x1c8>)
 80124ae:	4613      	mov	r3, r2
 80124b0:	005b      	lsls	r3, r3, #1
 80124b2:	4413      	add	r3, r2
 80124b4:	011b      	lsls	r3, r3, #4
 80124b6:	440b      	add	r3, r1
 80124b8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80124bc:	f993 3000 	ldrsb.w	r3, [r3]
 80124c0:	b2da      	uxtb	r2, r3
 80124c2:	4b31      	ldr	r3, [pc, #196]	; (8012588 <SwitchClass+0x1c8>)
 80124c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80124c8:	4b30      	ldr	r3, [pc, #192]	; (801258c <SwitchClass+0x1cc>)
 80124ca:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80124ce:	4b2f      	ldr	r3, [pc, #188]	; (801258c <SwitchClass+0x1cc>)
 80124d0:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80124d4:	4b2c      	ldr	r3, [pc, #176]	; (8012588 <SwitchClass+0x1c8>)
 80124d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124d8:	4a2c      	ldr	r2, [pc, #176]	; (801258c <SwitchClass+0x1cc>)
 80124da:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80124de:	4b2a      	ldr	r3, [pc, #168]	; (8012588 <SwitchClass+0x1c8>)
 80124e0:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80124e4:	4b29      	ldr	r3, [pc, #164]	; (801258c <SwitchClass+0x1cc>)
 80124e6:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80124ea:	4b27      	ldr	r3, [pc, #156]	; (8012588 <SwitchClass+0x1c8>)
 80124ec:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80124f0:	4b26      	ldr	r3, [pc, #152]	; (801258c <SwitchClass+0x1cc>)
 80124f2:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80124f6:	4b25      	ldr	r3, [pc, #148]	; (801258c <SwitchClass+0x1cc>)
 80124f8:	2203      	movs	r2, #3
 80124fa:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80124fe:	4b23      	ldr	r3, [pc, #140]	; (801258c <SwitchClass+0x1cc>)
 8012500:	2201      	movs	r2, #1
 8012502:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 8012506:	e009      	b.n	801251c <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801250c:	b2db      	uxtb	r3, r3
 801250e:	3301      	adds	r3, #1
 8012510:	b2db      	uxtb	r3, r3
 8012512:	73bb      	strb	r3, [r7, #14]
 8012514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012518:	2b00      	cmp	r3, #0
 801251a:	dd9f      	ble.n	801245c <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 801251c:	4b1b      	ldr	r3, [pc, #108]	; (801258c <SwitchClass+0x1cc>)
 801251e:	2200      	movs	r2, #0
 8012520:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8012524:	4b1a      	ldr	r3, [pc, #104]	; (8012590 <SwitchClass+0x1d0>)
 8012526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012528:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801252a:	f001 fa29 	bl	8013980 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 801252e:	2300      	movs	r3, #0
 8012530:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012532:	e01e      	b.n	8012572 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8012534:	79fb      	ldrb	r3, [r7, #7]
 8012536:	4618      	mov	r0, r3
 8012538:	f003 fbea 	bl	8015d10 <LoRaMacClassBSwitchClass>
 801253c:	4603      	mov	r3, r0
 801253e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8012540:	7bfb      	ldrb	r3, [r7, #15]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d117      	bne.n	8012576 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012546:	4a10      	ldr	r2, [pc, #64]	; (8012588 <SwitchClass+0x1c8>)
 8012548:	79fb      	ldrb	r3, [r7, #7]
 801254a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 801254e:	e012      	b.n	8012576 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012550:	79fb      	ldrb	r3, [r7, #7]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d111      	bne.n	801257a <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8012556:	4b0d      	ldr	r3, [pc, #52]	; (801258c <SwitchClass+0x1cc>)
 8012558:	2206      	movs	r2, #6
 801255a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 801255e:	4a0a      	ldr	r2, [pc, #40]	; (8012588 <SwitchClass+0x1c8>)
 8012560:	79fb      	ldrb	r3, [r7, #7]
 8012562:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8012566:	4b0a      	ldr	r3, [pc, #40]	; (8012590 <SwitchClass+0x1d0>)
 8012568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801256a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801256c:	2300      	movs	r3, #0
 801256e:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012570:	e003      	b.n	801257a <SwitchClass+0x1ba>
            break;
 8012572:	bf00      	nop
 8012574:	e002      	b.n	801257c <SwitchClass+0x1bc>
            break;
 8012576:	bf00      	nop
 8012578:	e000      	b.n	801257c <SwitchClass+0x1bc>
            break;
 801257a:	bf00      	nop
        }
    }

    return status;
 801257c:	7bfb      	ldrb	r3, [r7, #15]
}
 801257e:	4618      	mov	r0, r3
 8012580:	3710      	adds	r7, #16
 8012582:	46bd      	mov	sp, r7
 8012584:	bdb0      	pop	{r4, r5, r7, pc}
 8012586:	bf00      	nop
 8012588:	20000c54 	.word	0x20000c54
 801258c:	20000738 	.word	0x20000738
 8012590:	08021fb4 	.word	0x08021fb4

08012594 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b086      	sub	sp, #24
 8012598:	af00      	add	r7, sp, #0
 801259a:	4603      	mov	r3, r0
 801259c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801259e:	4b10      	ldr	r3, [pc, #64]	; (80125e0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80125a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80125a4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80125a6:	79fb      	ldrb	r3, [r7, #7]
 80125a8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80125aa:	230d      	movs	r3, #13
 80125ac:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80125ae:	4b0c      	ldr	r3, [pc, #48]	; (80125e0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80125b0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d001      	beq.n	80125bc <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80125b8:	230e      	movs	r3, #14
 80125ba:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80125bc:	4b08      	ldr	r3, [pc, #32]	; (80125e0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80125be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80125c2:	f107 0210 	add.w	r2, r7, #16
 80125c6:	4611      	mov	r1, r2
 80125c8:	4618      	mov	r0, r3
 80125ca:	f005 faf1 	bl	8017bb0 <RegionGetPhyParam>
 80125ce:	4603      	mov	r3, r0
 80125d0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	b2db      	uxtb	r3, r3
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3718      	adds	r7, #24
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
 80125de:	bf00      	nop
 80125e0:	20000c54 	.word	0x20000c54

080125e4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	4603      	mov	r3, r0
 80125ec:	71fb      	strb	r3, [r7, #7]
 80125ee:	460b      	mov	r3, r1
 80125f0:	71bb      	strb	r3, [r7, #6]
 80125f2:	4613      	mov	r3, r2
 80125f4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80125fa:	2300      	movs	r3, #0
 80125fc:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80125fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012602:	4618      	mov	r0, r3
 8012604:	f7ff ffc6 	bl	8012594 <GetMaxAppPayloadWithoutFOptsLength>
 8012608:	4603      	mov	r3, r0
 801260a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 801260c:	79fb      	ldrb	r3, [r7, #7]
 801260e:	b29a      	uxth	r2, r3
 8012610:	797b      	ldrb	r3, [r7, #5]
 8012612:	b29b      	uxth	r3, r3
 8012614:	4413      	add	r3, r2
 8012616:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8012618:	89ba      	ldrh	r2, [r7, #12]
 801261a:	89fb      	ldrh	r3, [r7, #14]
 801261c:	429a      	cmp	r2, r3
 801261e:	d804      	bhi.n	801262a <ValidatePayloadLength+0x46>
 8012620:	89bb      	ldrh	r3, [r7, #12]
 8012622:	2bff      	cmp	r3, #255	; 0xff
 8012624:	d801      	bhi.n	801262a <ValidatePayloadLength+0x46>
    {
        return true;
 8012626:	2301      	movs	r3, #1
 8012628:	e000      	b.n	801262c <ValidatePayloadLength+0x48>
    }
    return false;
 801262a:	2300      	movs	r3, #0
}
 801262c:	4618      	mov	r0, r3
 801262e:	3710      	adds	r7, #16
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8012634:	b590      	push	{r4, r7, lr}
 8012636:	b0a5      	sub	sp, #148	; 0x94
 8012638:	af02      	add	r7, sp, #8
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	4608      	mov	r0, r1
 801263e:	4611      	mov	r1, r2
 8012640:	461a      	mov	r2, r3
 8012642:	4603      	mov	r3, r0
 8012644:	70fb      	strb	r3, [r7, #3]
 8012646:	460b      	mov	r3, r1
 8012648:	70bb      	strb	r3, [r7, #2]
 801264a:	4613      	mov	r3, r2
 801264c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801264e:	2300      	movs	r3, #0
 8012650:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012654:	2300      	movs	r3, #0
 8012656:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801265a:	2300      	movs	r3, #0
 801265c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8012660:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012664:	2b00      	cmp	r3, #0
 8012666:	f000 84ab 	beq.w	8012fc0 <ProcessMacCommands+0x98c>
 801266a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801266e:	2b01      	cmp	r3, #1
 8012670:	f040 84ac 	bne.w	8012fcc <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012674:	f000 bca4 	b.w	8012fc0 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012678:	78fb      	ldrb	r3, [r7, #3]
 801267a:	687a      	ldr	r2, [r7, #4]
 801267c:	4413      	add	r3, r2
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	4618      	mov	r0, r3
 8012682:	f003 fe43 	bl	801630c <LoRaMacCommandsGetCmdSize>
 8012686:	4603      	mov	r3, r0
 8012688:	461a      	mov	r2, r3
 801268a:	78fb      	ldrb	r3, [r7, #3]
 801268c:	441a      	add	r2, r3
 801268e:	78bb      	ldrb	r3, [r7, #2]
 8012690:	429a      	cmp	r2, r3
 8012692:	f300 849d 	bgt.w	8012fd0 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012696:	78fb      	ldrb	r3, [r7, #3]
 8012698:	1c5a      	adds	r2, r3, #1
 801269a:	70fa      	strb	r2, [r7, #3]
 801269c:	461a      	mov	r2, r3
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	4413      	add	r3, r2
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	3b02      	subs	r3, #2
 80126a6:	2b11      	cmp	r3, #17
 80126a8:	f200 8494 	bhi.w	8012fd4 <ProcessMacCommands+0x9a0>
 80126ac:	a201      	add	r2, pc, #4	; (adr r2, 80126b4 <ProcessMacCommands+0x80>)
 80126ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126b2:	bf00      	nop
 80126b4:	080126fd 	.word	0x080126fd
 80126b8:	0801273f 	.word	0x0801273f
 80126bc:	080128bb 	.word	0x080128bb
 80126c0:	080128f9 	.word	0x080128f9
 80126c4:	080129f1 	.word	0x080129f1
 80126c8:	08012a41 	.word	0x08012a41
 80126cc:	08012afd 	.word	0x08012afd
 80126d0:	08012b53 	.word	0x08012b53
 80126d4:	08012c39 	.word	0x08012c39
 80126d8:	08012fd5 	.word	0x08012fd5
 80126dc:	08012fd5 	.word	0x08012fd5
 80126e0:	08012ce1 	.word	0x08012ce1
 80126e4:	08012fd5 	.word	0x08012fd5
 80126e8:	08012fd5 	.word	0x08012fd5
 80126ec:	08012e01 	.word	0x08012e01
 80126f0:	08012e35 	.word	0x08012e35
 80126f4:	08012ec5 	.word	0x08012ec5
 80126f8:	08012f3b 	.word	0x08012f3b
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80126fc:	2005      	movs	r0, #5
 80126fe:	f003 ffdd 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 8012702:	4603      	mov	r3, r0
 8012704:	2b00      	cmp	r3, #0
 8012706:	f000 845b 	beq.w	8012fc0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801270a:	2105      	movs	r1, #5
 801270c:	2000      	movs	r0, #0
 801270e:	f003 ff49 	bl	80165a4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8012712:	78fb      	ldrb	r3, [r7, #3]
 8012714:	1c5a      	adds	r2, r3, #1
 8012716:	70fa      	strb	r2, [r7, #3]
 8012718:	461a      	mov	r2, r3
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4413      	add	r3, r2
 801271e:	781a      	ldrb	r2, [r3, #0]
 8012720:	4bb0      	ldr	r3, [pc, #704]	; (80129e4 <ProcessMacCommands+0x3b0>)
 8012722:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8012726:	78fb      	ldrb	r3, [r7, #3]
 8012728:	1c5a      	adds	r2, r3, #1
 801272a:	70fa      	strb	r2, [r7, #3]
 801272c:	461a      	mov	r2, r3
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	4413      	add	r3, r2
 8012732:	781a      	ldrb	r2, [r3, #0]
 8012734:	4bab      	ldr	r3, [pc, #684]	; (80129e4 <ProcessMacCommands+0x3b0>)
 8012736:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 801273a:	f000 bc41 	b.w	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801273e:	2300      	movs	r3, #0
 8012740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012744:	2300      	movs	r3, #0
 8012746:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 801274a:	2300      	movs	r3, #0
 801274c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012750:	2300      	movs	r3, #0
 8012752:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8012756:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801275a:	f083 0301 	eor.w	r3, r3, #1
 801275e:	b2db      	uxtb	r3, r3
 8012760:	2b00      	cmp	r3, #0
 8012762:	f000 80a5 	beq.w	80128b0 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8012766:	2301      	movs	r3, #1
 8012768:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 801276c:	78fb      	ldrb	r3, [r7, #3]
 801276e:	3b01      	subs	r3, #1
 8012770:	687a      	ldr	r2, [r7, #4]
 8012772:	4413      	add	r3, r2
 8012774:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012776:	4b9c      	ldr	r3, [pc, #624]	; (80129e8 <ProcessMacCommands+0x3b4>)
 8012778:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801277c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012780:	4b99      	ldr	r3, [pc, #612]	; (80129e8 <ProcessMacCommands+0x3b4>)
 8012782:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012786:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801278a:	4b97      	ldr	r3, [pc, #604]	; (80129e8 <ProcessMacCommands+0x3b4>)
 801278c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012790:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012794:	4b94      	ldr	r3, [pc, #592]	; (80129e8 <ProcessMacCommands+0x3b4>)
 8012796:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801279a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801279e:	4b92      	ldr	r3, [pc, #584]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80127a0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80127a4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80127a8:	4b8f      	ldr	r3, [pc, #572]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80127aa:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80127ae:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80127b0:	4b8d      	ldr	r3, [pc, #564]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80127b2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d008      	beq.n	80127cc <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80127ba:	78ba      	ldrb	r2, [r7, #2]
 80127bc:	78fb      	ldrb	r3, [r7, #3]
 80127be:	1ad3      	subs	r3, r2, r3
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	3301      	adds	r3, #1
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80127ca:	e002      	b.n	80127d2 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80127cc:	2305      	movs	r3, #5
 80127ce:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80127d2:	4b85      	ldr	r3, [pc, #532]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80127d4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80127d8:	f107 0456 	add.w	r4, r7, #86	; 0x56
 80127dc:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80127e0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80127e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80127e8:	9301      	str	r3, [sp, #4]
 80127ea:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80127ee:	9300      	str	r3, [sp, #0]
 80127f0:	4623      	mov	r3, r4
 80127f2:	f005 fae4 	bl	8017dbe <RegionLinkAdrReq>
 80127f6:	4603      	mov	r3, r0
 80127f8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80127fc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012800:	f003 0307 	and.w	r3, r3, #7
 8012804:	2b07      	cmp	r3, #7
 8012806:	d119      	bne.n	801283c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8012808:	4b77      	ldr	r3, [pc, #476]	; (80129e8 <ProcessMacCommands+0x3b4>)
 801280a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801280e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8012812:	429a      	cmp	r2, r3
 8012814:	da03      	bge.n	801281e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8012816:	4b74      	ldr	r3, [pc, #464]	; (80129e8 <ProcessMacCommands+0x3b4>)
 8012818:	2201      	movs	r2, #1
 801281a:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 801281e:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012822:	4b71      	ldr	r3, [pc, #452]	; (80129e8 <ProcessMacCommands+0x3b4>)
 8012824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012828:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 801282c:	4b6e      	ldr	r3, [pc, #440]	; (80129e8 <ProcessMacCommands+0x3b4>)
 801282e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8012832:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012836:	4b6c      	ldr	r3, [pc, #432]	; (80129e8 <ProcessMacCommands+0x3b4>)
 8012838:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801283c:	2300      	movs	r3, #0
 801283e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012842:	e00b      	b.n	801285c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8012844:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8012848:	2201      	movs	r2, #1
 801284a:	4619      	mov	r1, r3
 801284c:	2003      	movs	r0, #3
 801284e:	f003 fbfd 	bl	801604c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012852:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012856:	3301      	adds	r3, #1
 8012858:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801285c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012860:	4a62      	ldr	r2, [pc, #392]	; (80129ec <ProcessMacCommands+0x3b8>)
 8012862:	fba2 2303 	umull	r2, r3, r2, r3
 8012866:	089b      	lsrs	r3, r3, #2
 8012868:	b2db      	uxtb	r3, r3
 801286a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 801286e:	429a      	cmp	r2, r3
 8012870:	d3e8      	bcc.n	8012844 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8012872:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012876:	78fb      	ldrb	r3, [r7, #3]
 8012878:	4413      	add	r3, r2
 801287a:	b2db      	uxtb	r3, r3
 801287c:	3b01      	subs	r3, #1
 801287e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8012880:	78fa      	ldrb	r2, [r7, #3]
 8012882:	78bb      	ldrb	r3, [r7, #2]
 8012884:	429a      	cmp	r2, r3
 8012886:	d20a      	bcs.n	801289e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8012888:	78fb      	ldrb	r3, [r7, #3]
 801288a:	1c5a      	adds	r2, r3, #1
 801288c:	70fa      	strb	r2, [r7, #3]
 801288e:	461a      	mov	r2, r3
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4413      	add	r3, r2
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	2b03      	cmp	r3, #3
 8012898:	f43f af68 	beq.w	801276c <ProcessMacCommands+0x138>
 801289c:	e000      	b.n	80128a0 <ProcessMacCommands+0x26c>
                            break;
 801289e:	bf00      	nop

                    if( macIndex < commandsSize )
 80128a0:	78fa      	ldrb	r2, [r7, #3]
 80128a2:	78bb      	ldrb	r3, [r7, #2]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d206      	bcs.n	80128b6 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80128a8:	78fb      	ldrb	r3, [r7, #3]
 80128aa:	3b01      	subs	r3, #1
 80128ac:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80128ae:	e002      	b.n	80128b6 <ProcessMacCommands+0x282>
                    macIndex += 4;
 80128b0:	78fb      	ldrb	r3, [r7, #3]
 80128b2:	3304      	adds	r3, #4
 80128b4:	70fb      	strb	r3, [r7, #3]
                break;
 80128b6:	bf00      	nop
 80128b8:	e382      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80128ba:	78fb      	ldrb	r3, [r7, #3]
 80128bc:	1c5a      	adds	r2, r3, #1
 80128be:	70fa      	strb	r2, [r7, #3]
 80128c0:	461a      	mov	r2, r3
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	4413      	add	r3, r2
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	f003 030f 	and.w	r3, r3, #15
 80128cc:	b2da      	uxtb	r2, r3
 80128ce:	4b46      	ldr	r3, [pc, #280]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80128d0:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80128d4:	4b44      	ldr	r3, [pc, #272]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80128d6:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80128da:	461a      	mov	r2, r3
 80128dc:	2301      	movs	r3, #1
 80128de:	4093      	lsls	r3, r2
 80128e0:	b29a      	uxth	r2, r3
 80128e2:	4b41      	ldr	r3, [pc, #260]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80128e4:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80128e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80128ec:	2200      	movs	r2, #0
 80128ee:	4619      	mov	r1, r3
 80128f0:	2004      	movs	r0, #4
 80128f2:	f003 fbab 	bl	801604c <LoRaMacCommandsAddCmd>
                break;
 80128f6:	e363      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80128f8:	2307      	movs	r3, #7
 80128fa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80128fe:	78fb      	ldrb	r3, [r7, #3]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	4413      	add	r3, r2
 8012904:	781b      	ldrb	r3, [r3, #0]
 8012906:	091b      	lsrs	r3, r3, #4
 8012908:	b2db      	uxtb	r3, r3
 801290a:	b25b      	sxtb	r3, r3
 801290c:	f003 0307 	and.w	r3, r3, #7
 8012910:	b25b      	sxtb	r3, r3
 8012912:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8012916:	78fb      	ldrb	r3, [r7, #3]
 8012918:	687a      	ldr	r2, [r7, #4]
 801291a:	4413      	add	r3, r2
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	b25b      	sxtb	r3, r3
 8012920:	f003 030f 	and.w	r3, r3, #15
 8012924:	b25b      	sxtb	r3, r3
 8012926:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801292a:	78fb      	ldrb	r3, [r7, #3]
 801292c:	3301      	adds	r3, #1
 801292e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012930:	78fb      	ldrb	r3, [r7, #3]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	70fa      	strb	r2, [r7, #3]
 8012936:	461a      	mov	r2, r3
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4413      	add	r3, r2
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012940:	78fb      	ldrb	r3, [r7, #3]
 8012942:	1c5a      	adds	r2, r3, #1
 8012944:	70fa      	strb	r2, [r7, #3]
 8012946:	461a      	mov	r2, r3
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	4413      	add	r3, r2
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	021a      	lsls	r2, r3, #8
 8012950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012952:	4313      	orrs	r3, r2
 8012954:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012956:	78fb      	ldrb	r3, [r7, #3]
 8012958:	1c5a      	adds	r2, r3, #1
 801295a:	70fa      	strb	r2, [r7, #3]
 801295c:	461a      	mov	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	4413      	add	r3, r2
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	041a      	lsls	r2, r3, #16
 8012966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012968:	4313      	orrs	r3, r2
 801296a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 801296c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801296e:	2264      	movs	r2, #100	; 0x64
 8012970:	fb02 f303 	mul.w	r3, r2, r3
 8012974:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8012976:	4b1c      	ldr	r3, [pc, #112]	; (80129e8 <ProcessMacCommands+0x3b4>)
 8012978:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801297c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012980:	4611      	mov	r1, r2
 8012982:	4618      	mov	r0, r3
 8012984:	f005 fa42 	bl	8017e0c <RegionRxParamSetupReq>
 8012988:	4603      	mov	r3, r0
 801298a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801298e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012992:	f003 0307 	and.w	r3, r3, #7
 8012996:	2b07      	cmp	r3, #7
 8012998:	d117      	bne.n	80129ca <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801299a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801299e:	b2da      	uxtb	r2, r3
 80129a0:	4b11      	ldr	r3, [pc, #68]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80129a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80129a6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80129aa:	b2da      	uxtb	r2, r3
 80129ac:	4b0e      	ldr	r3, [pc, #56]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80129ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80129b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129b4:	4a0c      	ldr	r2, [pc, #48]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80129b6:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80129b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ba:	4a0b      	ldr	r2, [pc, #44]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80129bc:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80129be:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80129c2:	b2da      	uxtb	r2, r3
 80129c4:	4b08      	ldr	r3, [pc, #32]	; (80129e8 <ProcessMacCommands+0x3b4>)
 80129c6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 80129ca:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80129ce:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80129d2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80129d6:	2201      	movs	r2, #1
 80129d8:	4619      	mov	r1, r3
 80129da:	2005      	movs	r0, #5
 80129dc:	f003 fb36 	bl	801604c <LoRaMacCommandsAddCmd>
                break;
 80129e0:	bf00      	nop
 80129e2:	e2ed      	b.n	8012fc0 <ProcessMacCommands+0x98c>
 80129e4:	20000738 	.word	0x20000738
 80129e8:	20000c54 	.word	0x20000c54
 80129ec:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80129f0:	23ff      	movs	r3, #255	; 0xff
 80129f2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80129f6:	4bb7      	ldr	r3, [pc, #732]	; (8012cd4 <ProcessMacCommands+0x6a0>)
 80129f8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d00d      	beq.n	8012a1c <ProcessMacCommands+0x3e8>
 8012a00:	4bb4      	ldr	r3, [pc, #720]	; (8012cd4 <ProcessMacCommands+0x6a0>)
 8012a02:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d007      	beq.n	8012a1c <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012a0c:	4bb1      	ldr	r3, [pc, #708]	; (8012cd4 <ProcessMacCommands+0x6a0>)
 8012a0e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	4798      	blx	r3
 8012a16:	4603      	mov	r3, r0
 8012a18:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012a1c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012a20:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012a24:	787b      	ldrb	r3, [r7, #1]
 8012a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a2a:	b2db      	uxtb	r3, r3
 8012a2c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012a30:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a34:	2202      	movs	r2, #2
 8012a36:	4619      	mov	r1, r3
 8012a38:	2006      	movs	r0, #6
 8012a3a:	f003 fb07 	bl	801604c <LoRaMacCommandsAddCmd>
                break;
 8012a3e:	e2bf      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012a40:	2303      	movs	r3, #3
 8012a42:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012a46:	78fb      	ldrb	r3, [r7, #3]
 8012a48:	1c5a      	adds	r2, r3, #1
 8012a4a:	70fa      	strb	r2, [r7, #3]
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	4413      	add	r3, r2
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	b25b      	sxtb	r3, r3
 8012a56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8012a5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012a5e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012a60:	78fb      	ldrb	r3, [r7, #3]
 8012a62:	1c5a      	adds	r2, r3, #1
 8012a64:	70fa      	strb	r2, [r7, #3]
 8012a66:	461a      	mov	r2, r3
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	4413      	add	r3, r2
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012a70:	78fb      	ldrb	r3, [r7, #3]
 8012a72:	1c5a      	adds	r2, r3, #1
 8012a74:	70fa      	strb	r2, [r7, #3]
 8012a76:	461a      	mov	r2, r3
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	4413      	add	r3, r2
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	021a      	lsls	r2, r3, #8
 8012a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a82:	4313      	orrs	r3, r2
 8012a84:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012a86:	78fb      	ldrb	r3, [r7, #3]
 8012a88:	1c5a      	adds	r2, r3, #1
 8012a8a:	70fa      	strb	r2, [r7, #3]
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	4413      	add	r3, r2
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	041a      	lsls	r2, r3, #16
 8012a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a9e:	2264      	movs	r2, #100	; 0x64
 8012aa0:	fb02 f303 	mul.w	r3, r2, r3
 8012aa4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8012aaa:	78fb      	ldrb	r3, [r7, #3]
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	70fa      	strb	r2, [r7, #3]
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	b25b      	sxtb	r3, r3
 8012aba:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012abe:	4b86      	ldr	r3, [pc, #536]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012ac0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ac4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012ac8:	4611      	mov	r1, r2
 8012aca:	4618      	mov	r0, r3
 8012acc:	f005 f9b9 	bl	8017e42 <RegionNewChannelReq>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012ad8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012adc:	b25b      	sxtb	r3, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	db0a      	blt.n	8012af8 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8012ae2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012ae6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012aea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012aee:	2201      	movs	r2, #1
 8012af0:	4619      	mov	r1, r3
 8012af2:	2007      	movs	r0, #7
 8012af4:	f003 faaa 	bl	801604c <LoRaMacCommandsAddCmd>
                }
                break;
 8012af8:	bf00      	nop
 8012afa:	e261      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012afc:	78fb      	ldrb	r3, [r7, #3]
 8012afe:	1c5a      	adds	r2, r3, #1
 8012b00:	70fa      	strb	r2, [r7, #3]
 8012b02:	461a      	mov	r2, r3
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	4413      	add	r3, r2
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	f003 030f 	and.w	r3, r3, #15
 8012b0e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012b12:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d104      	bne.n	8012b24 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8012b1a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b1e:	3301      	adds	r3, #1
 8012b20:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012b24:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012b2c:	fb02 f303 	mul.w	r3, r2, r3
 8012b30:	461a      	mov	r2, r3
 8012b32:	4b69      	ldr	r3, [pc, #420]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012b34:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012b36:	4b68      	ldr	r3, [pc, #416]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b3a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012b3e:	4a66      	ldr	r2, [pc, #408]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012b40:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012b42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b46:	2200      	movs	r2, #0
 8012b48:	4619      	mov	r1, r3
 8012b4a:	2008      	movs	r0, #8
 8012b4c:	f003 fa7e 	bl	801604c <LoRaMacCommandsAddCmd>
                break;
 8012b50:	e236      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012b52:	78fb      	ldrb	r3, [r7, #3]
 8012b54:	1c5a      	adds	r2, r3, #1
 8012b56:	70fa      	strb	r2, [r7, #3]
 8012b58:	461a      	mov	r2, r3
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012b64:	2300      	movs	r3, #0
 8012b66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012b70:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b74:	f003 0320 	and.w	r3, r3, #32
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012b82:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b86:	f003 0310 	and.w	r3, r3, #16
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d002      	beq.n	8012b94 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012b8e:	2301      	movs	r3, #1
 8012b90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012b94:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012b98:	f003 030f 	and.w	r3, r3, #15
 8012b9c:	b2db      	uxtb	r3, r3
 8012b9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012ba2:	4b4d      	ldr	r3, [pc, #308]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012ba4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ba8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012bac:	4611      	mov	r1, r2
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f005 f962 	bl	8017e78 <RegionTxParamSetupReq>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bba:	d03b      	beq.n	8012c34 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012bbc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012bc0:	4b45      	ldr	r3, [pc, #276]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012bc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012bc6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012bca:	4b43      	ldr	r3, [pc, #268]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012bcc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012bd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	4b41      	ldr	r3, [pc, #260]	; (8012cdc <ProcessMacCommands+0x6a8>)
 8012bd8:	5c9b      	ldrb	r3, [r3, r2]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7ee f86e 	bl	8000cbc <__aeabi_ui2f>
 8012be0:	4603      	mov	r3, r0
 8012be2:	4a3d      	ldr	r2, [pc, #244]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012be8:	2302      	movs	r3, #2
 8012bea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012bee:	4b3a      	ldr	r3, [pc, #232]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012bf0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012bf4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012bf8:	4b37      	ldr	r3, [pc, #220]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012bfa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012bfe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012c02:	4611      	mov	r1, r2
 8012c04:	4618      	mov	r0, r3
 8012c06:	f004 ffd3 	bl	8017bb0 <RegionGetPhyParam>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c10:	b25a      	sxtb	r2, r3
 8012c12:	4b31      	ldr	r3, [pc, #196]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012c14:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012c18:	4293      	cmp	r3, r2
 8012c1a:	bfb8      	it	lt
 8012c1c:	4613      	movlt	r3, r2
 8012c1e:	b25a      	sxtb	r2, r3
 8012c20:	4b2d      	ldr	r3, [pc, #180]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012c26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	2009      	movs	r0, #9
 8012c30:	f003 fa0c 	bl	801604c <LoRaMacCommandsAddCmd>
                }
                break;
 8012c34:	bf00      	nop
 8012c36:	e1c3      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012c38:	2303      	movs	r3, #3
 8012c3a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012c3e:	78fb      	ldrb	r3, [r7, #3]
 8012c40:	1c5a      	adds	r2, r3, #1
 8012c42:	70fa      	strb	r2, [r7, #3]
 8012c44:	461a      	mov	r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	4413      	add	r3, r2
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012c50:	78fb      	ldrb	r3, [r7, #3]
 8012c52:	1c5a      	adds	r2, r3, #1
 8012c54:	70fa      	strb	r2, [r7, #3]
 8012c56:	461a      	mov	r2, r3
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012c60:	78fb      	ldrb	r3, [r7, #3]
 8012c62:	1c5a      	adds	r2, r3, #1
 8012c64:	70fa      	strb	r2, [r7, #3]
 8012c66:	461a      	mov	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	021a      	lsls	r2, r3, #8
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	4313      	orrs	r3, r2
 8012c74:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012c76:	78fb      	ldrb	r3, [r7, #3]
 8012c78:	1c5a      	adds	r2, r3, #1
 8012c7a:	70fa      	strb	r2, [r7, #3]
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	4413      	add	r3, r2
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	041a      	lsls	r2, r3, #16
 8012c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c88:	4313      	orrs	r3, r2
 8012c8a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	2264      	movs	r2, #100	; 0x64
 8012c90:	fb02 f303 	mul.w	r3, r2, r3
 8012c94:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012c96:	4b10      	ldr	r3, [pc, #64]	; (8012cd8 <ProcessMacCommands+0x6a4>)
 8012c98:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012c9c:	f107 0220 	add.w	r2, r7, #32
 8012ca0:	4611      	mov	r1, r2
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f005 f903 	bl	8017eae <RegionDlChannelReq>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	b2db      	uxtb	r3, r3
 8012cac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012cb0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012cb4:	b25b      	sxtb	r3, r3
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	db0a      	blt.n	8012cd0 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 8012cba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012cbe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012cc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	4619      	mov	r1, r3
 8012cca:	200a      	movs	r0, #10
 8012ccc:	f003 f9be 	bl	801604c <LoRaMacCommandsAddCmd>
                }
                break;
 8012cd0:	bf00      	nop
 8012cd2:	e175      	b.n	8012fc0 <ProcessMacCommands+0x98c>
 8012cd4:	20000738 	.word	0x20000738
 8012cd8:	20000c54 	.word	0x20000c54
 8012cdc:	08021ee8 	.word	0x08021ee8
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012ce0:	2009      	movs	r0, #9
 8012ce2:	f003 fceb 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f000 8084 	beq.w	8012df6 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012cee:	2109      	movs	r1, #9
 8012cf0:	2000      	movs	r0, #0
 8012cf2:	f003 fc57 	bl	80165a4 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012cf6:	f107 0318 	add.w	r3, r7, #24
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	601a      	str	r2, [r3, #0]
 8012cfe:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012d00:	f107 0310 	add.w	r3, r7, #16
 8012d04:	2200      	movs	r2, #0
 8012d06:	601a      	str	r2, [r3, #0]
 8012d08:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012d0a:	f107 0308 	add.w	r3, r7, #8
 8012d0e:	2200      	movs	r2, #0
 8012d10:	601a      	str	r2, [r3, #0]
 8012d12:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012d14:	78fb      	ldrb	r3, [r7, #3]
 8012d16:	1c5a      	adds	r2, r3, #1
 8012d18:	70fa      	strb	r2, [r7, #3]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	4413      	add	r3, r2
 8012d20:	781b      	ldrb	r3, [r3, #0]
 8012d22:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012d24:	78fb      	ldrb	r3, [r7, #3]
 8012d26:	1c5a      	adds	r2, r3, #1
 8012d28:	70fa      	strb	r2, [r7, #3]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	4413      	add	r3, r2
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	021a      	lsls	r2, r3, #8
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	4313      	orrs	r3, r2
 8012d38:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012d3a:	78fb      	ldrb	r3, [r7, #3]
 8012d3c:	1c5a      	adds	r2, r3, #1
 8012d3e:	70fa      	strb	r2, [r7, #3]
 8012d40:	461a      	mov	r2, r3
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4413      	add	r3, r2
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	041a      	lsls	r2, r3, #16
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	4313      	orrs	r3, r2
 8012d4e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012d50:	78fb      	ldrb	r3, [r7, #3]
 8012d52:	1c5a      	adds	r2, r3, #1
 8012d54:	70fa      	strb	r2, [r7, #3]
 8012d56:	461a      	mov	r2, r3
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	4413      	add	r3, r2
 8012d5c:	781b      	ldrb	r3, [r3, #0]
 8012d5e:	061a      	lsls	r2, r3, #24
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	4313      	orrs	r3, r2
 8012d64:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012d66:	78fb      	ldrb	r3, [r7, #3]
 8012d68:	1c5a      	adds	r2, r3, #1
 8012d6a:	70fa      	strb	r2, [r7, #3]
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	4413      	add	r3, r2
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	b21b      	sxth	r3, r3
 8012d76:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012d78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012d82:	fb02 f303 	mul.w	r3, r2, r3
 8012d86:	121b      	asrs	r3, r3, #8
 8012d88:	b21b      	sxth	r3, r3
 8012d8a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012d8c:	f107 0310 	add.w	r3, r7, #16
 8012d90:	f107 0218 	add.w	r2, r7, #24
 8012d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d98:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012d9c:	693a      	ldr	r2, [r7, #16]
 8012d9e:	4b8f      	ldr	r3, [pc, #572]	; (8012fdc <ProcessMacCommands+0x9a8>)
 8012da0:	4413      	add	r3, r2
 8012da2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012da4:	f107 0308 	add.w	r3, r7, #8
 8012da8:	4618      	mov	r0, r3
 8012daa:	f00c f901 	bl	801efb0 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012dae:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012db2:	4b8b      	ldr	r3, [pc, #556]	; (8012fe0 <ProcessMacCommands+0x9ac>)
 8012db4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012db8:	9200      	str	r2, [sp, #0]
 8012dba:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012dbe:	f107 0210 	add.w	r2, r7, #16
 8012dc2:	ca06      	ldmia	r2, {r1, r2}
 8012dc4:	f00c f88d 	bl	801eee2 <SysTimeSub>
 8012dc8:	f107 0010 	add.w	r0, r7, #16
 8012dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dce:	9300      	str	r3, [sp, #0]
 8012dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012dd2:	f107 0208 	add.w	r2, r7, #8
 8012dd6:	ca06      	ldmia	r2, {r1, r2}
 8012dd8:	f00c f84a 	bl	801ee70 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012ddc:	f107 0310 	add.w	r3, r7, #16
 8012de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012de4:	f00c f8b6 	bl	801ef54 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012de8:	f002 ffd0 	bl	8015d8c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012dec:	4b7c      	ldr	r3, [pc, #496]	; (8012fe0 <ProcessMacCommands+0x9ac>)
 8012dee:	2201      	movs	r2, #1
 8012df0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8012df4:	e0e4      	b.n	8012fc0 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8012df6:	4b7a      	ldr	r3, [pc, #488]	; (8012fe0 <ProcessMacCommands+0x9ac>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 8012dfe:	e0df      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012e00:	200c      	movs	r0, #12
 8012e02:	f003 fc5b 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 8012e06:	4603      	mov	r3, r0
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	f000 80d9 	beq.w	8012fc0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012e0e:	210c      	movs	r1, #12
 8012e10:	2000      	movs	r0, #0
 8012e12:	f003 fbc7 	bl	80165a4 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012e16:	4b72      	ldr	r3, [pc, #456]	; (8012fe0 <ProcessMacCommands+0x9ac>)
 8012e18:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012e1c:	2b04      	cmp	r3, #4
 8012e1e:	f000 80cf 	beq.w	8012fc0 <ProcessMacCommands+0x98c>
 8012e22:	4b6f      	ldr	r3, [pc, #444]	; (8012fe0 <ProcessMacCommands+0x9ac>)
 8012e24:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012e28:	2b05      	cmp	r3, #5
 8012e2a:	f000 80c9 	beq.w	8012fc0 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012e2e:	f002 ff8e 	bl	8015d4e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012e32:	e0c5      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012e34:	2303      	movs	r3, #3
 8012e36:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012e3e:	78fb      	ldrb	r3, [r7, #3]
 8012e40:	1c5a      	adds	r2, r3, #1
 8012e42:	70fa      	strb	r2, [r7, #3]
 8012e44:	461a      	mov	r2, r3
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	4413      	add	r3, r2
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012e4e:	78fb      	ldrb	r3, [r7, #3]
 8012e50:	1c5a      	adds	r2, r3, #1
 8012e52:	70fa      	strb	r2, [r7, #3]
 8012e54:	461a      	mov	r2, r3
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	4413      	add	r3, r2
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	021b      	lsls	r3, r3, #8
 8012e5e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e60:	4313      	orrs	r3, r2
 8012e62:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012e64:	78fb      	ldrb	r3, [r7, #3]
 8012e66:	1c5a      	adds	r2, r3, #1
 8012e68:	70fa      	strb	r2, [r7, #3]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	4413      	add	r3, r2
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	041b      	lsls	r3, r3, #16
 8012e74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e76:	4313      	orrs	r3, r2
 8012e78:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e7c:	2264      	movs	r2, #100	; 0x64
 8012e7e:	fb02 f303 	mul.w	r3, r2, r3
 8012e82:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012e84:	78fb      	ldrb	r3, [r7, #3]
 8012e86:	1c5a      	adds	r2, r3, #1
 8012e88:	70fa      	strb	r2, [r7, #3]
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	4413      	add	r3, r2
 8012e90:	781b      	ldrb	r3, [r3, #0]
 8012e92:	f003 030f 	and.w	r3, r3, #15
 8012e96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012e9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012e9e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f002 ff5a 	bl	8015d5a <LoRaMacClassBPingSlotChannelReq>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012eac:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012eb0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8012eb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012eb8:	2201      	movs	r2, #1
 8012eba:	4619      	mov	r1, r3
 8012ebc:	2011      	movs	r0, #17
 8012ebe:	f003 f8c5 	bl	801604c <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8012ec2:	e07d      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012ec4:	200d      	movs	r0, #13
 8012ec6:	f003 fbf9 	bl	80166bc <LoRaMacConfirmQueueIsCmdActive>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d077      	beq.n	8012fc0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012ed0:	210d      	movs	r1, #13
 8012ed2:	2000      	movs	r0, #0
 8012ed4:	f003 fb66 	bl	80165a4 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012ee4:	78fb      	ldrb	r3, [r7, #3]
 8012ee6:	1c5a      	adds	r2, r3, #1
 8012ee8:	70fa      	strb	r2, [r7, #3]
 8012eea:	461a      	mov	r2, r3
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	4413      	add	r3, r2
 8012ef0:	781b      	ldrb	r3, [r3, #0]
 8012ef2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012ef6:	78fb      	ldrb	r3, [r7, #3]
 8012ef8:	1c5a      	adds	r2, r3, #1
 8012efa:	70fa      	strb	r2, [r7, #3]
 8012efc:	461a      	mov	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4413      	add	r3, r2
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	021b      	lsls	r3, r3, #8
 8012f06:	b21a      	sxth	r2, r3
 8012f08:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012f0c:	4313      	orrs	r3, r2
 8012f0e:	b21b      	sxth	r3, r3
 8012f10:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012f14:	78fb      	ldrb	r3, [r7, #3]
 8012f16:	1c5a      	adds	r2, r3, #1
 8012f18:	70fa      	strb	r2, [r7, #3]
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	4413      	add	r3, r2
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012f26:	4b2f      	ldr	r3, [pc, #188]	; (8012fe4 <ProcessMacCommands+0x9b0>)
 8012f28:	681a      	ldr	r2, [r3, #0]
 8012f2a:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012f2e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012f32:	4618      	mov	r0, r3
 8012f34:	f002 ff1d 	bl	8015d72 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012f38:	e042      	b.n	8012fc0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012f40:	78fb      	ldrb	r3, [r7, #3]
 8012f42:	1c5a      	adds	r2, r3, #1
 8012f44:	70fa      	strb	r2, [r7, #3]
 8012f46:	461a      	mov	r2, r3
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4413      	add	r3, r2
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012f52:	78fb      	ldrb	r3, [r7, #3]
 8012f54:	1c5a      	adds	r2, r3, #1
 8012f56:	70fa      	strb	r2, [r7, #3]
 8012f58:	461a      	mov	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	4413      	add	r3, r2
 8012f5e:	781b      	ldrb	r3, [r3, #0]
 8012f60:	021b      	lsls	r3, r3, #8
 8012f62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f66:	4313      	orrs	r3, r2
 8012f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012f6c:	78fb      	ldrb	r3, [r7, #3]
 8012f6e:	1c5a      	adds	r2, r3, #1
 8012f70:	70fa      	strb	r2, [r7, #3]
 8012f72:	461a      	mov	r2, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	4413      	add	r3, r2
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	041b      	lsls	r3, r3, #16
 8012f7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012f80:	4313      	orrs	r3, r2
 8012f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012f8a:	2264      	movs	r2, #100	; 0x64
 8012f8c:	fb02 f303 	mul.w	r3, r2, r3
 8012f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012f94:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012f98:	f002 fefe 	bl	8015d98 <LoRaMacClassBBeaconFreqReq>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d003      	beq.n	8012faa <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012fa8:	e002      	b.n	8012fb0 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012faa:	2300      	movs	r3, #0
 8012fac:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012fb0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	2013      	movs	r0, #19
 8012fba:	f003 f847 	bl	801604c <LoRaMacCommandsAddCmd>
                }
                break;
 8012fbe:	bf00      	nop
    while( macIndex < commandsSize )
 8012fc0:	78fa      	ldrb	r2, [r7, #3]
 8012fc2:	78bb      	ldrb	r3, [r7, #2]
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	f4ff ab57 	bcc.w	8012678 <ProcessMacCommands+0x44>
 8012fca:	e004      	b.n	8012fd6 <ProcessMacCommands+0x9a2>
        return;
 8012fcc:	bf00      	nop
 8012fce:	e002      	b.n	8012fd6 <ProcessMacCommands+0x9a2>
            return;
 8012fd0:	bf00      	nop
 8012fd2:	e000      	b.n	8012fd6 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012fd4:	bf00      	nop
        }
    }
}
 8012fd6:	378c      	adds	r7, #140	; 0x8c
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	bd90      	pop	{r4, r7, pc}
 8012fdc:	12d53d80 	.word	0x12d53d80
 8012fe0:	20000738 	.word	0x20000738
 8012fe4:	20001884 	.word	0x20001884

08012fe8 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b08e      	sub	sp, #56	; 0x38
 8012fec:	af02      	add	r7, sp, #8
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	607a      	str	r2, [r7, #4]
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	72fb      	strb	r3, [r7, #11]
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ffc:	2303      	movs	r3, #3
 8012ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013002:	4b66      	ldr	r3, [pc, #408]	; (801319c <Send+0x1b4>)
 8013004:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013008:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 801300c:	4b63      	ldr	r3, [pc, #396]	; (801319c <Send+0x1b4>)
 801300e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013012:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013016:	4b61      	ldr	r3, [pc, #388]	; (801319c <Send+0x1b4>)
 8013018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801301a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801301c:	4b5f      	ldr	r3, [pc, #380]	; (801319c <Send+0x1b4>)
 801301e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013022:	2b00      	cmp	r3, #0
 8013024:	d101      	bne.n	801302a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8013026:	2307      	movs	r3, #7
 8013028:	e0b4      	b.n	8013194 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801302a:	4b5c      	ldr	r3, [pc, #368]	; (801319c <Send+0x1b4>)
 801302c:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8013030:	2b00      	cmp	r3, #0
 8013032:	d102      	bne.n	801303a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8013034:	4b59      	ldr	r3, [pc, #356]	; (801319c <Send+0x1b4>)
 8013036:	2200      	movs	r2, #0
 8013038:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801303a:	2300      	movs	r3, #0
 801303c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8013040:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013044:	f36f 0303 	bfc	r3, #0, #4
 8013048:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 801304c:	4b53      	ldr	r3, [pc, #332]	; (801319c <Send+0x1b4>)
 801304e:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8013052:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013056:	f362 13c7 	bfi	r3, r2, #7, #1
 801305a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801305e:	4b4f      	ldr	r3, [pc, #316]	; (801319c <Send+0x1b4>)
 8013060:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013064:	2b01      	cmp	r3, #1
 8013066:	d106      	bne.n	8013076 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8013068:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801306c:	f043 0310 	orr.w	r3, r3, #16
 8013070:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8013074:	e005      	b.n	8013082 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8013076:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801307a:	f36f 1304 	bfc	r3, #4, #1
 801307e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8013082:	4b46      	ldr	r3, [pc, #280]	; (801319c <Send+0x1b4>)
 8013084:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013088:	2b00      	cmp	r3, #0
 801308a:	d005      	beq.n	8013098 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 801308c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013090:	f043 0320 	orr.w	r3, r3, #32
 8013094:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8013098:	2301      	movs	r3, #1
 801309a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 801309c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80130a4:	b2db      	uxtb	r3, r3
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	bf14      	ite	ne
 80130aa:	2301      	movne	r3, #1
 80130ac:	2300      	moveq	r3, #0
 80130ae:	b2db      	uxtb	r3, r3
 80130b0:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80130b2:	4b3a      	ldr	r3, [pc, #232]	; (801319c <Send+0x1b4>)
 80130b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130b6:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80130b8:	4b38      	ldr	r3, [pc, #224]	; (801319c <Send+0x1b4>)
 80130ba:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80130be:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80130c0:	4b36      	ldr	r3, [pc, #216]	; (801319c <Send+0x1b4>)
 80130c2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80130c6:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80130c8:	4b34      	ldr	r3, [pc, #208]	; (801319c <Send+0x1b4>)
 80130ca:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80130ce:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80130d2:	4b32      	ldr	r3, [pc, #200]	; (801319c <Send+0x1b4>)
 80130d4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80130d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80130dc:	4b2f      	ldr	r3, [pc, #188]	; (801319c <Send+0x1b4>)
 80130de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80130e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80130e6:	4b2d      	ldr	r3, [pc, #180]	; (801319c <Send+0x1b4>)
 80130e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80130ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80130f0:	4b2a      	ldr	r3, [pc, #168]	; (801319c <Send+0x1b4>)
 80130f2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80130f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 80130fa:	f107 0014 	add.w	r0, r7, #20
 80130fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013102:	9300      	str	r3, [sp, #0]
 8013104:	4b26      	ldr	r3, [pc, #152]	; (80131a0 <Send+0x1b8>)
 8013106:	4a27      	ldr	r2, [pc, #156]	; (80131a4 <Send+0x1bc>)
 8013108:	4927      	ldr	r1, [pc, #156]	; (80131a8 <Send+0x1c0>)
 801310a:	f002 fcbf 	bl	8015a8c <LoRaMacAdrCalcNext>
 801310e:	4603      	mov	r3, r0
 8013110:	461a      	mov	r2, r3
 8013112:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013116:	f362 1386 	bfi	r3, r2, #6, #1
 801311a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801311e:	7afa      	ldrb	r2, [r7, #11]
 8013120:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8013124:	893b      	ldrh	r3, [r7, #8]
 8013126:	9300      	str	r3, [sp, #0]
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	68f8      	ldr	r0, [r7, #12]
 801312c:	f000 fc72 	bl	8013a14 <PrepareFrame>
 8013130:	4603      	mov	r3, r0
 8013132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8013136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801313a:	2b00      	cmp	r3, #0
 801313c:	d003      	beq.n	8013146 <Send+0x15e>
 801313e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013142:	2b0a      	cmp	r3, #10
 8013144:	d107      	bne.n	8013156 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8013146:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801314a:	4618      	mov	r0, r3
 801314c:	f000 f962 	bl	8013414 <ScheduleTx>
 8013150:	4603      	mov	r3, r0
 8013152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8013156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801315a:	2b00      	cmp	r3, #0
 801315c:	d00a      	beq.n	8013174 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801315e:	4a0f      	ldr	r2, [pc, #60]	; (801319c <Send+0x1b4>)
 8013160:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013164:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8013168:	4a0c      	ldr	r2, [pc, #48]	; (801319c <Send+0x1b4>)
 801316a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801316e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8013172:	e00d      	b.n	8013190 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8013174:	4b09      	ldr	r3, [pc, #36]	; (801319c <Send+0x1b4>)
 8013176:	2200      	movs	r2, #0
 8013178:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317e:	4a07      	ldr	r2, [pc, #28]	; (801319c <Send+0x1b4>)
 8013180:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8013182:	f003 f809 	bl	8016198 <LoRaMacCommandsRemoveNoneStickyCmds>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d001      	beq.n	8013190 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801318c:	2313      	movs	r3, #19
 801318e:	e001      	b.n	8013194 <Send+0x1ac>
        }
    }
    return status;
 8013190:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013194:	4618      	mov	r0, r3
 8013196:	3730      	adds	r7, #48	; 0x30
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}
 801319c:	20000c54 	.word	0x20000c54
 80131a0:	20000cbc 	.word	0x20000cbc
 80131a4:	20000c8c 	.word	0x20000c8c
 80131a8:	20000c8d 	.word	0x20000c8d

080131ac <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b084      	sub	sp, #16
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	4603      	mov	r3, r0
 80131b4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80131b6:	2300      	movs	r3, #0
 80131b8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80131ba:	2300      	movs	r3, #0
 80131bc:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80131be:	2301      	movs	r3, #1
 80131c0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80131c2:	79fb      	ldrb	r3, [r7, #7]
 80131c4:	2bff      	cmp	r3, #255	; 0xff
 80131c6:	d11f      	bne.n	8013208 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80131c8:	2000      	movs	r0, #0
 80131ca:	f7ff f8f9 	bl	80123c0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80131ce:	4b15      	ldr	r3, [pc, #84]	; (8013224 <SendReJoinReq+0x78>)
 80131d0:	2200      	movs	r2, #0
 80131d2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80131d6:	4b13      	ldr	r3, [pc, #76]	; (8013224 <SendReJoinReq+0x78>)
 80131d8:	4a13      	ldr	r2, [pc, #76]	; (8013228 <SendReJoinReq+0x7c>)
 80131da:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80131de:	4b11      	ldr	r3, [pc, #68]	; (8013224 <SendReJoinReq+0x78>)
 80131e0:	22ff      	movs	r2, #255	; 0xff
 80131e2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80131e6:	7b3b      	ldrb	r3, [r7, #12]
 80131e8:	f36f 1347 	bfc	r3, #5, #3
 80131ec:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 80131ee:	7b3a      	ldrb	r2, [r7, #12]
 80131f0:	4b0c      	ldr	r3, [pc, #48]	; (8013224 <SendReJoinReq+0x78>)
 80131f2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 80131f6:	480d      	ldr	r0, [pc, #52]	; (801322c <SendReJoinReq+0x80>)
 80131f8:	f7fb ff34 	bl	800f064 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 80131fc:	480c      	ldr	r0, [pc, #48]	; (8013230 <SendReJoinReq+0x84>)
 80131fe:	f7fb ff01 	bl	800f004 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8013202:	2300      	movs	r3, #0
 8013204:	73fb      	strb	r3, [r7, #15]

            break;
 8013206:	e002      	b.n	801320e <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013208:	2302      	movs	r3, #2
 801320a:	73bb      	strb	r3, [r7, #14]
            break;
 801320c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801320e:	7bfb      	ldrb	r3, [r7, #15]
 8013210:	4618      	mov	r0, r3
 8013212:	f000 f8ff 	bl	8013414 <ScheduleTx>
 8013216:	4603      	mov	r3, r0
 8013218:	73bb      	strb	r3, [r7, #14]
    return status;
 801321a:	7bbb      	ldrb	r3, [r7, #14]
}
 801321c:	4618      	mov	r0, r3
 801321e:	3710      	adds	r7, #16
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}
 8013224:	20000738 	.word	0x20000738
 8013228:	2000073a 	.word	0x2000073a
 801322c:	20000846 	.word	0x20000846
 8013230:	2000084e 	.word	0x2000084e

08013234 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8013234:	b580      	push	{r7, lr}
 8013236:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8013238:	f002 fd38 	bl	8015cac <LoRaMacClassBIsBeaconExpected>
 801323c:	4603      	mov	r3, r0
 801323e:	2b00      	cmp	r3, #0
 8013240:	d001      	beq.n	8013246 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8013242:	230e      	movs	r3, #14
 8013244:	e013      	b.n	801326e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013246:	4b0b      	ldr	r3, [pc, #44]	; (8013274 <CheckForClassBCollision+0x40>)
 8013248:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801324c:	2b01      	cmp	r3, #1
 801324e:	d10d      	bne.n	801326c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013250:	f002 fd33 	bl	8015cba <LoRaMacClassBIsPingExpected>
 8013254:	4603      	mov	r3, r0
 8013256:	2b00      	cmp	r3, #0
 8013258:	d001      	beq.n	801325e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801325a:	230f      	movs	r3, #15
 801325c:	e007      	b.n	801326e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801325e:	f002 fd33 	bl	8015cc8 <LoRaMacClassBIsMulticastExpected>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d001      	beq.n	801326c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013268:	230f      	movs	r3, #15
 801326a:	e000      	b.n	801326e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 801326c:	2300      	movs	r3, #0
}
 801326e:	4618      	mov	r0, r3
 8013270:	bd80      	pop	{r7, pc}
 8013272:	bf00      	nop
 8013274:	20000c54 	.word	0x20000c54

08013278 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8013278:	b590      	push	{r4, r7, lr}
 801327a:	b083      	sub	sp, #12
 801327c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801327e:	4b2d      	ldr	r3, [pc, #180]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 8013280:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013284:	4b2b      	ldr	r3, [pc, #172]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 8013286:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801328a:	4b2a      	ldr	r3, [pc, #168]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 801328c:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8013290:	4b28      	ldr	r3, [pc, #160]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 8013292:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8013296:	4b27      	ldr	r3, [pc, #156]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 8013298:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801329c:	b25b      	sxtb	r3, r3
 801329e:	f004 fe6a 	bl	8017f76 <RegionApplyDrOffset>
 80132a2:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132a4:	b259      	sxtb	r1, r3
 80132a6:	4b23      	ldr	r3, [pc, #140]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 80132a8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80132ac:	4b21      	ldr	r3, [pc, #132]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 80132ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132b0:	4821      	ldr	r0, [pc, #132]	; (8013338 <ComputeRxWindowParameters+0xc0>)
 80132b2:	9000      	str	r0, [sp, #0]
 80132b4:	4620      	mov	r0, r4
 80132b6:	f004 fd1f 	bl	8017cf8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132ba:	4b1e      	ldr	r3, [pc, #120]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 80132bc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80132c0:	4b1c      	ldr	r3, [pc, #112]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 80132c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132c6:	b259      	sxtb	r1, r3
 80132c8:	4b1a      	ldr	r3, [pc, #104]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 80132ca:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80132ce:	4b19      	ldr	r3, [pc, #100]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 80132d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80132d2:	4c1a      	ldr	r4, [pc, #104]	; (801333c <ComputeRxWindowParameters+0xc4>)
 80132d4:	9400      	str	r4, [sp, #0]
 80132d6:	f004 fd0f 	bl	8017cf8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80132da:	4b16      	ldr	r3, [pc, #88]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 80132dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80132de:	4a18      	ldr	r2, [pc, #96]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 80132e0:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80132e4:	4413      	add	r3, r2
 80132e6:	4a16      	ldr	r2, [pc, #88]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 80132e8:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80132ec:	4b11      	ldr	r3, [pc, #68]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 80132ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80132f0:	4a13      	ldr	r2, [pc, #76]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 80132f2:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80132f6:	4413      	add	r3, r2
 80132f8:	4a11      	ldr	r2, [pc, #68]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 80132fa:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 80132fe:	4b10      	ldr	r3, [pc, #64]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 8013300:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013304:	2b04      	cmp	r3, #4
 8013306:	d011      	beq.n	801332c <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013308:	4b0a      	ldr	r3, [pc, #40]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 801330a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801330c:	4a0c      	ldr	r2, [pc, #48]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 801330e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013312:	4413      	add	r3, r2
 8013314:	4a0a      	ldr	r2, [pc, #40]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 8013316:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801331a:	4b06      	ldr	r3, [pc, #24]	; (8013334 <ComputeRxWindowParameters+0xbc>)
 801331c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801331e:	4a08      	ldr	r2, [pc, #32]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 8013320:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8013324:	4413      	add	r3, r2
 8013326:	4a06      	ldr	r2, [pc, #24]	; (8013340 <ComputeRxWindowParameters+0xc8>)
 8013328:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 801332c:	bf00      	nop
 801332e:	3704      	adds	r7, #4
 8013330:	46bd      	mov	sp, r7
 8013332:	bd90      	pop	{r4, r7, pc}
 8013334:	20000c54 	.word	0x20000c54
 8013338:	20000af0 	.word	0x20000af0
 801333c:	20000b08 	.word	0x20000b08
 8013340:	20000738 	.word	0x20000738

08013344 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b082      	sub	sp, #8
 8013348:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801334a:	2300      	movs	r3, #0
 801334c:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801334e:	4b13      	ldr	r3, [pc, #76]	; (801339c <VerifyTxFrame+0x58>)
 8013350:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013354:	2b00      	cmp	r3, #0
 8013356:	d01b      	beq.n	8013390 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013358:	1d3b      	adds	r3, r7, #4
 801335a:	4618      	mov	r0, r3
 801335c:	f002 ff6c 	bl	8016238 <LoRaMacCommandsGetSizeSerializedCmds>
 8013360:	4603      	mov	r3, r0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d001      	beq.n	801336a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013366:	2313      	movs	r3, #19
 8013368:	e013      	b.n	8013392 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801336a:	4b0d      	ldr	r3, [pc, #52]	; (80133a0 <VerifyTxFrame+0x5c>)
 801336c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013370:	4a0a      	ldr	r2, [pc, #40]	; (801339c <VerifyTxFrame+0x58>)
 8013372:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	b2d2      	uxtb	r2, r2
 801337a:	4618      	mov	r0, r3
 801337c:	f7ff f932 	bl	80125e4 <ValidatePayloadLength>
 8013380:	4603      	mov	r3, r0
 8013382:	f083 0301 	eor.w	r3, r3, #1
 8013386:	b2db      	uxtb	r3, r3
 8013388:	2b00      	cmp	r3, #0
 801338a:	d001      	beq.n	8013390 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 801338c:	2308      	movs	r3, #8
 801338e:	e000      	b.n	8013392 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013390:	2300      	movs	r3, #0
}
 8013392:	4618      	mov	r0, r3
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	20000c54 	.word	0x20000c54
 80133a0:	20000738 	.word	0x20000738

080133a4 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80133aa:	4b18      	ldr	r3, [pc, #96]	; (801340c <SerializeTxFrame+0x68>)
 80133ac:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d002      	beq.n	80133ba <SerializeTxFrame+0x16>
 80133b4:	2b04      	cmp	r3, #4
 80133b6:	d011      	beq.n	80133dc <SerializeTxFrame+0x38>
 80133b8:	e021      	b.n	80133fe <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80133ba:	4815      	ldr	r0, [pc, #84]	; (8013410 <SerializeTxFrame+0x6c>)
 80133bc:	f004 fa6a 	bl	8017894 <LoRaMacSerializerJoinRequest>
 80133c0:	4603      	mov	r3, r0
 80133c2:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80133c4:	79fb      	ldrb	r3, [r7, #7]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d001      	beq.n	80133ce <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133ca:	2311      	movs	r3, #17
 80133cc:	e01a      	b.n	8013404 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80133ce:	4b0f      	ldr	r3, [pc, #60]	; (801340c <SerializeTxFrame+0x68>)
 80133d0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133d4:	b29a      	uxth	r2, r3
 80133d6:	4b0d      	ldr	r3, [pc, #52]	; (801340c <SerializeTxFrame+0x68>)
 80133d8:	801a      	strh	r2, [r3, #0]
            break;
 80133da:	e012      	b.n	8013402 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80133dc:	480c      	ldr	r0, [pc, #48]	; (8013410 <SerializeTxFrame+0x6c>)
 80133de:	f004 fadb 	bl	8017998 <LoRaMacSerializerData>
 80133e2:	4603      	mov	r3, r0
 80133e4:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80133e6:	79fb      	ldrb	r3, [r7, #7]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d001      	beq.n	80133f0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133ec:	2311      	movs	r3, #17
 80133ee:	e009      	b.n	8013404 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80133f0:	4b06      	ldr	r3, [pc, #24]	; (801340c <SerializeTxFrame+0x68>)
 80133f2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133f6:	b29a      	uxth	r2, r3
 80133f8:	4b04      	ldr	r3, [pc, #16]	; (801340c <SerializeTxFrame+0x68>)
 80133fa:	801a      	strh	r2, [r3, #0]
            break;
 80133fc:	e001      	b.n	8013402 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80133fe:	2303      	movs	r3, #3
 8013400:	e000      	b.n	8013404 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8013402:	2300      	movs	r3, #0
}
 8013404:	4618      	mov	r0, r3
 8013406:	3708      	adds	r7, #8
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	20000738 	.word	0x20000738
 8013410:	20000840 	.word	0x20000840

08013414 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b090      	sub	sp, #64	; 0x40
 8013418:	af02      	add	r7, sp, #8
 801341a:	4603      	mov	r3, r0
 801341c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801341e:	2303      	movs	r3, #3
 8013420:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8013424:	f7ff ff06 	bl	8013234 <CheckForClassBCollision>
 8013428:	4603      	mov	r3, r0
 801342a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801342e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013432:	2b00      	cmp	r3, #0
 8013434:	d002      	beq.n	801343c <ScheduleTx+0x28>
    {
        return status;
 8013436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801343a:	e092      	b.n	8013562 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 801343c:	f000 f8f8 	bl	8013630 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013440:	f7ff ffb0 	bl	80133a4 <SerializeTxFrame>
 8013444:	4603      	mov	r3, r0
 8013446:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801344a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801344e:	2b00      	cmp	r3, #0
 8013450:	d002      	beq.n	8013458 <ScheduleTx+0x44>
    {
        return status;
 8013452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013456:	e084      	b.n	8013562 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8013458:	4b44      	ldr	r3, [pc, #272]	; (801356c <ScheduleTx+0x158>)
 801345a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801345c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801345e:	4b43      	ldr	r3, [pc, #268]	; (801356c <ScheduleTx+0x158>)
 8013460:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013464:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8013466:	4b41      	ldr	r3, [pc, #260]	; (801356c <ScheduleTx+0x158>)
 8013468:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 801346c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801346e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013472:	4618      	mov	r0, r3
 8013474:	f00b fdd4 	bl	801f020 <SysTimeGetMcuTime>
 8013478:	4638      	mov	r0, r7
 801347a:	4b3c      	ldr	r3, [pc, #240]	; (801356c <ScheduleTx+0x158>)
 801347c:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8013480:	9200      	str	r2, [sp, #0]
 8013482:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013486:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801348a:	ca06      	ldmia	r2, {r1, r2}
 801348c:	f00b fd29 	bl	801eee2 <SysTimeSub>
 8013490:	f107 0320 	add.w	r3, r7, #32
 8013494:	463a      	mov	r2, r7
 8013496:	e892 0003 	ldmia.w	r2, {r0, r1}
 801349a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801349e:	4b33      	ldr	r3, [pc, #204]	; (801356c <ScheduleTx+0x158>)
 80134a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a2:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80134a4:	2300      	movs	r3, #0
 80134a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80134aa:	2301      	movs	r3, #1
 80134ac:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80134ae:	4b30      	ldr	r3, [pc, #192]	; (8013570 <ScheduleTx+0x15c>)
 80134b0:	881b      	ldrh	r3, [r3, #0]
 80134b2:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80134b4:	4b2d      	ldr	r3, [pc, #180]	; (801356c <ScheduleTx+0x158>)
 80134b6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d104      	bne.n	80134c8 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80134be:	2301      	movs	r3, #1
 80134c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80134c4:	2300      	movs	r3, #0
 80134c6:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80134c8:	4b28      	ldr	r3, [pc, #160]	; (801356c <ScheduleTx+0x158>)
 80134ca:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80134ce:	f107 0114 	add.w	r1, r7, #20
 80134d2:	4b28      	ldr	r3, [pc, #160]	; (8013574 <ScheduleTx+0x160>)
 80134d4:	9300      	str	r3, [sp, #0]
 80134d6:	4b28      	ldr	r3, [pc, #160]	; (8013578 <ScheduleTx+0x164>)
 80134d8:	4a28      	ldr	r2, [pc, #160]	; (801357c <ScheduleTx+0x168>)
 80134da:	f004 fd29 	bl	8017f30 <RegionNextChannel>
 80134de:	4603      	mov	r3, r0
 80134e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80134e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d025      	beq.n	8013538 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80134ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134f0:	2b0b      	cmp	r3, #11
 80134f2:	d11e      	bne.n	8013532 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80134f4:	4b1e      	ldr	r3, [pc, #120]	; (8013570 <ScheduleTx+0x15c>)
 80134f6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d01c      	beq.n	8013538 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80134fe:	7bfb      	ldrb	r3, [r7, #15]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d013      	beq.n	801352c <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013504:	4b1a      	ldr	r3, [pc, #104]	; (8013570 <ScheduleTx+0x15c>)
 8013506:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801350a:	f043 0320 	orr.w	r3, r3, #32
 801350e:	4a18      	ldr	r2, [pc, #96]	; (8013570 <ScheduleTx+0x15c>)
 8013510:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013514:	4b16      	ldr	r3, [pc, #88]	; (8013570 <ScheduleTx+0x15c>)
 8013516:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801351a:	4619      	mov	r1, r3
 801351c:	4818      	ldr	r0, [pc, #96]	; (8013580 <ScheduleTx+0x16c>)
 801351e:	f00c fa1b 	bl	801f958 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8013522:	4817      	ldr	r0, [pc, #92]	; (8013580 <ScheduleTx+0x16c>)
 8013524:	f00c f93a 	bl	801f79c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8013528:	2300      	movs	r3, #0
 801352a:	e01a      	b.n	8013562 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 801352c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013530:	e017      	b.n	8013562 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8013532:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013536:	e014      	b.n	8013562 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013538:	f7ff fe9e 	bl	8013278 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801353c:	f7ff ff02 	bl	8013344 <VerifyTxFrame>
 8013540:	4603      	mov	r3, r0
 8013542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013546:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801354a:	2b00      	cmp	r3, #0
 801354c:	d002      	beq.n	8013554 <ScheduleTx+0x140>
    {
        return status;
 801354e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013552:	e006      	b.n	8013562 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013554:	4b06      	ldr	r3, [pc, #24]	; (8013570 <ScheduleTx+0x15c>)
 8013556:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 801355a:	4618      	mov	r0, r3
 801355c:	f000 fb76 	bl	8013c4c <SendFrameOnChannel>
 8013560:	4603      	mov	r3, r0
}
 8013562:	4618      	mov	r0, r3
 8013564:	3738      	adds	r7, #56	; 0x38
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	20000c54 	.word	0x20000c54
 8013570:	20000738 	.word	0x20000738
 8013574:	20000c84 	.word	0x20000c84
 8013578:	20000bcc 	.word	0x20000bcc
 801357c:	20000b53 	.word	0x20000b53
 8013580:	20000aa0 	.word	0x20000aa0

08013584 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b084      	sub	sp, #16
 8013588:	af00      	add	r7, sp, #0
 801358a:	4603      	mov	r3, r0
 801358c:	460a      	mov	r2, r1
 801358e:	71fb      	strb	r3, [r7, #7]
 8013590:	4613      	mov	r3, r2
 8013592:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013594:	2312      	movs	r3, #18
 8013596:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8013598:	2300      	movs	r3, #0
 801359a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 801359c:	4b22      	ldr	r3, [pc, #136]	; (8013628 <SecureFrame+0xa4>)
 801359e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d002      	beq.n	80135ac <SecureFrame+0x28>
 80135a6:	2b04      	cmp	r3, #4
 80135a8:	d011      	beq.n	80135ce <SecureFrame+0x4a>
 80135aa:	e036      	b.n	801361a <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80135ac:	481f      	ldr	r0, [pc, #124]	; (801362c <SecureFrame+0xa8>)
 80135ae:	f003 fd3d 	bl	801702c <LoRaMacCryptoPrepareJoinRequest>
 80135b2:	4603      	mov	r3, r0
 80135b4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80135b6:	7bfb      	ldrb	r3, [r7, #15]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d001      	beq.n	80135c0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80135bc:	2311      	movs	r3, #17
 80135be:	e02f      	b.n	8013620 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80135c0:	4b19      	ldr	r3, [pc, #100]	; (8013628 <SecureFrame+0xa4>)
 80135c2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80135c6:	b29a      	uxth	r2, r3
 80135c8:	4b17      	ldr	r3, [pc, #92]	; (8013628 <SecureFrame+0xa4>)
 80135ca:	801a      	strh	r2, [r3, #0]
            break;
 80135cc:	e027      	b.n	801361e <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80135ce:	f107 0308 	add.w	r3, r7, #8
 80135d2:	4618      	mov	r0, r3
 80135d4:	f003 fc64 	bl	8016ea0 <LoRaMacCryptoGetFCntUp>
 80135d8:	4603      	mov	r3, r0
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d001      	beq.n	80135e2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80135de:	2312      	movs	r3, #18
 80135e0:	e01e      	b.n	8013620 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80135e2:	4b11      	ldr	r3, [pc, #68]	; (8013628 <SecureFrame+0xa4>)
 80135e4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d002      	beq.n	80135f2 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	3b01      	subs	r3, #1
 80135f0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80135f2:	68b8      	ldr	r0, [r7, #8]
 80135f4:	79ba      	ldrb	r2, [r7, #6]
 80135f6:	79f9      	ldrb	r1, [r7, #7]
 80135f8:	4b0c      	ldr	r3, [pc, #48]	; (801362c <SecureFrame+0xa8>)
 80135fa:	f003 fe3f 	bl	801727c <LoRaMacCryptoSecureMessage>
 80135fe:	4603      	mov	r3, r0
 8013600:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013602:	7bfb      	ldrb	r3, [r7, #15]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d001      	beq.n	801360c <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013608:	2311      	movs	r3, #17
 801360a:	e009      	b.n	8013620 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801360c:	4b06      	ldr	r3, [pc, #24]	; (8013628 <SecureFrame+0xa4>)
 801360e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013612:	b29a      	uxth	r2, r3
 8013614:	4b04      	ldr	r3, [pc, #16]	; (8013628 <SecureFrame+0xa4>)
 8013616:	801a      	strh	r2, [r3, #0]
            break;
 8013618:	e001      	b.n	801361e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801361a:	2303      	movs	r3, #3
 801361c:	e000      	b.n	8013620 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801361e:	2300      	movs	r3, #0
}
 8013620:	4618      	mov	r0, r3
 8013622:	3710      	adds	r7, #16
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}
 8013628:	20000738 	.word	0x20000738
 801362c:	20000840 	.word	0x20000840

08013630 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013630:	b480      	push	{r7}
 8013632:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8013634:	4b09      	ldr	r3, [pc, #36]	; (801365c <CalculateBackOff+0x2c>)
 8013636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013638:	2b00      	cmp	r3, #0
 801363a:	d10a      	bne.n	8013652 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801363c:	4b07      	ldr	r3, [pc, #28]	; (801365c <CalculateBackOff+0x2c>)
 801363e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8013642:	3b01      	subs	r3, #1
 8013644:	4a06      	ldr	r2, [pc, #24]	; (8013660 <CalculateBackOff+0x30>)
 8013646:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 801364a:	fb02 f303 	mul.w	r3, r2, r3
 801364e:	4a03      	ldr	r2, [pc, #12]	; (801365c <CalculateBackOff+0x2c>)
 8013650:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013652:	bf00      	nop
 8013654:	46bd      	mov	sp, r7
 8013656:	bc80      	pop	{r7}
 8013658:	4770      	bx	lr
 801365a:	bf00      	nop
 801365c:	20000c54 	.word	0x20000c54
 8013660:	20000738 	.word	0x20000738

08013664 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
 801366a:	4603      	mov	r3, r0
 801366c:	7139      	strb	r1, [r7, #4]
 801366e:	71fb      	strb	r3, [r7, #7]
 8013670:	4613      	mov	r3, r2
 8013672:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013674:	79fb      	ldrb	r3, [r7, #7]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d002      	beq.n	8013680 <RemoveMacCommands+0x1c>
 801367a:	79fb      	ldrb	r3, [r7, #7]
 801367c:	2b01      	cmp	r3, #1
 801367e:	d10d      	bne.n	801369c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013680:	79bb      	ldrb	r3, [r7, #6]
 8013682:	2b01      	cmp	r3, #1
 8013684:	d108      	bne.n	8013698 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8013686:	793b      	ldrb	r3, [r7, #4]
 8013688:	f003 0320 	and.w	r3, r3, #32
 801368c:	b2db      	uxtb	r3, r3
 801368e:	2b00      	cmp	r3, #0
 8013690:	d004      	beq.n	801369c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8013692:	f002 fda5 	bl	80161e0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8013696:	e001      	b.n	801369c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013698:	f002 fda2 	bl	80161e0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801369c:	bf00      	nop
 801369e:	3708      	adds	r7, #8
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bd80      	pop	{r7, pc}

080136a4 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80136a4:	b5b0      	push	{r4, r5, r7, lr}
 80136a6:	b092      	sub	sp, #72	; 0x48
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	4603      	mov	r3, r0
 80136ac:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80136ae:	79fb      	ldrb	r3, [r7, #7]
 80136b0:	f083 0301 	eor.w	r3, r3, #1
 80136b4:	b2db      	uxtb	r3, r3
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d003      	beq.n	80136c2 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80136ba:	4b88      	ldr	r3, [pc, #544]	; (80138dc <ResetMacParameters+0x238>)
 80136bc:	2200      	movs	r2, #0
 80136be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80136c2:	4b86      	ldr	r3, [pc, #536]	; (80138dc <ResetMacParameters+0x238>)
 80136c4:	2200      	movs	r2, #0
 80136c6:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80136c8:	4b85      	ldr	r3, [pc, #532]	; (80138e0 <ResetMacParameters+0x23c>)
 80136ca:	2200      	movs	r2, #0
 80136cc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80136d0:	4b83      	ldr	r3, [pc, #524]	; (80138e0 <ResetMacParameters+0x23c>)
 80136d2:	2200      	movs	r2, #0
 80136d4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 80136d8:	4b81      	ldr	r3, [pc, #516]	; (80138e0 <ResetMacParameters+0x23c>)
 80136da:	2200      	movs	r2, #0
 80136dc:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80136e0:	4b7e      	ldr	r3, [pc, #504]	; (80138dc <ResetMacParameters+0x238>)
 80136e2:	2200      	movs	r2, #0
 80136e4:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80136e8:	4b7c      	ldr	r3, [pc, #496]	; (80138dc <ResetMacParameters+0x238>)
 80136ea:	2201      	movs	r2, #1
 80136ec:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80136f0:	4b7a      	ldr	r3, [pc, #488]	; (80138dc <ResetMacParameters+0x238>)
 80136f2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80136f6:	4b79      	ldr	r3, [pc, #484]	; (80138dc <ResetMacParameters+0x238>)
 80136f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80136fc:	4b77      	ldr	r3, [pc, #476]	; (80138dc <ResetMacParameters+0x238>)
 80136fe:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8013702:	4b76      	ldr	r3, [pc, #472]	; (80138dc <ResetMacParameters+0x238>)
 8013704:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013708:	4b74      	ldr	r3, [pc, #464]	; (80138dc <ResetMacParameters+0x238>)
 801370a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 801370e:	4b73      	ldr	r3, [pc, #460]	; (80138dc <ResetMacParameters+0x238>)
 8013710:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013714:	4b71      	ldr	r3, [pc, #452]	; (80138dc <ResetMacParameters+0x238>)
 8013716:	4a71      	ldr	r2, [pc, #452]	; (80138dc <ResetMacParameters+0x238>)
 8013718:	336c      	adds	r3, #108	; 0x6c
 801371a:	32b4      	adds	r2, #180	; 0xb4
 801371c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013720:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013724:	4b6d      	ldr	r3, [pc, #436]	; (80138dc <ResetMacParameters+0x238>)
 8013726:	4a6d      	ldr	r2, [pc, #436]	; (80138dc <ResetMacParameters+0x238>)
 8013728:	3374      	adds	r3, #116	; 0x74
 801372a:	32bc      	adds	r2, #188	; 0xbc
 801372c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013730:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013734:	4b69      	ldr	r3, [pc, #420]	; (80138dc <ResetMacParameters+0x238>)
 8013736:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 801373a:	4b68      	ldr	r3, [pc, #416]	; (80138dc <ResetMacParameters+0x238>)
 801373c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013740:	4b66      	ldr	r3, [pc, #408]	; (80138dc <ResetMacParameters+0x238>)
 8013742:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8013746:	4b65      	ldr	r3, [pc, #404]	; (80138dc <ResetMacParameters+0x238>)
 8013748:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801374c:	4b63      	ldr	r3, [pc, #396]	; (80138dc <ResetMacParameters+0x238>)
 801374e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013752:	4a62      	ldr	r2, [pc, #392]	; (80138dc <ResetMacParameters+0x238>)
 8013754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013758:	4b60      	ldr	r3, [pc, #384]	; (80138dc <ResetMacParameters+0x238>)
 801375a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801375e:	4a5f      	ldr	r2, [pc, #380]	; (80138dc <ResetMacParameters+0x238>)
 8013760:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013764:	4b5d      	ldr	r3, [pc, #372]	; (80138dc <ResetMacParameters+0x238>)
 8013766:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 801376a:	4b5c      	ldr	r3, [pc, #368]	; (80138dc <ResetMacParameters+0x238>)
 801376c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013770:	4b5a      	ldr	r3, [pc, #360]	; (80138dc <ResetMacParameters+0x238>)
 8013772:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8013776:	4b59      	ldr	r3, [pc, #356]	; (80138dc <ResetMacParameters+0x238>)
 8013778:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 801377c:	4b58      	ldr	r3, [pc, #352]	; (80138e0 <ResetMacParameters+0x23c>)
 801377e:	2200      	movs	r2, #0
 8013780:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8013784:	4b55      	ldr	r3, [pc, #340]	; (80138dc <ResetMacParameters+0x238>)
 8013786:	2200      	movs	r2, #0
 8013788:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801378c:	4b53      	ldr	r3, [pc, #332]	; (80138dc <ResetMacParameters+0x238>)
 801378e:	2200      	movs	r2, #0
 8013790:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8013794:	4b51      	ldr	r3, [pc, #324]	; (80138dc <ResetMacParameters+0x238>)
 8013796:	2200      	movs	r2, #0
 8013798:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 801379c:	4b4f      	ldr	r3, [pc, #316]	; (80138dc <ResetMacParameters+0x238>)
 801379e:	2200      	movs	r2, #0
 80137a0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80137a4:	4b4d      	ldr	r3, [pc, #308]	; (80138dc <ResetMacParameters+0x238>)
 80137a6:	2200      	movs	r2, #0
 80137a8:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 80137ac:	4b4b      	ldr	r3, [pc, #300]	; (80138dc <ResetMacParameters+0x238>)
 80137ae:	2200      	movs	r2, #0
 80137b0:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80137b4:	4b49      	ldr	r3, [pc, #292]	; (80138dc <ResetMacParameters+0x238>)
 80137b6:	2200      	movs	r2, #0
 80137b8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80137bc:	4b47      	ldr	r3, [pc, #284]	; (80138dc <ResetMacParameters+0x238>)
 80137be:	2200      	movs	r2, #0
 80137c0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80137c4:	4b45      	ldr	r3, [pc, #276]	; (80138dc <ResetMacParameters+0x238>)
 80137c6:	2200      	movs	r2, #0
 80137c8:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80137cc:	4b43      	ldr	r3, [pc, #268]	; (80138dc <ResetMacParameters+0x238>)
 80137ce:	2200      	movs	r2, #0
 80137d0:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80137d4:	4b41      	ldr	r3, [pc, #260]	; (80138dc <ResetMacParameters+0x238>)
 80137d6:	2200      	movs	r2, #0
 80137d8:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80137dc:	2301      	movs	r3, #1
 80137de:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80137e0:	4b40      	ldr	r3, [pc, #256]	; (80138e4 <ResetMacParameters+0x240>)
 80137e2:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80137e4:	4b40      	ldr	r3, [pc, #256]	; (80138e8 <ResetMacParameters+0x244>)
 80137e6:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 80137e8:	4b40      	ldr	r3, [pc, #256]	; (80138ec <ResetMacParameters+0x248>)
 80137ea:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80137ec:	4b3b      	ldr	r3, [pc, #236]	; (80138dc <ResetMacParameters+0x238>)
 80137ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137f2:	f107 020c 	add.w	r2, r7, #12
 80137f6:	4611      	mov	r1, r2
 80137f8:	4618      	mov	r0, r3
 80137fa:	f004 fa11 	bl	8017c20 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80137fe:	4b38      	ldr	r3, [pc, #224]	; (80138e0 <ResetMacParameters+0x23c>)
 8013800:	2200      	movs	r2, #0
 8013802:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013806:	4b36      	ldr	r3, [pc, #216]	; (80138e0 <ResetMacParameters+0x23c>)
 8013808:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 801380c:	4b34      	ldr	r3, [pc, #208]	; (80138e0 <ResetMacParameters+0x23c>)
 801380e:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8013812:	4b32      	ldr	r3, [pc, #200]	; (80138dc <ResetMacParameters+0x238>)
 8013814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013816:	4a32      	ldr	r2, [pc, #200]	; (80138e0 <ResetMacParameters+0x23c>)
 8013818:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801381c:	4b2f      	ldr	r3, [pc, #188]	; (80138dc <ResetMacParameters+0x238>)
 801381e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013822:	4b2f      	ldr	r3, [pc, #188]	; (80138e0 <ResetMacParameters+0x23c>)
 8013824:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013828:	4b2c      	ldr	r3, [pc, #176]	; (80138dc <ResetMacParameters+0x238>)
 801382a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801382e:	4b2c      	ldr	r3, [pc, #176]	; (80138e0 <ResetMacParameters+0x23c>)
 8013830:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013834:	4b2a      	ldr	r3, [pc, #168]	; (80138e0 <ResetMacParameters+0x23c>)
 8013836:	2200      	movs	r2, #0
 8013838:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801383c:	4b28      	ldr	r3, [pc, #160]	; (80138e0 <ResetMacParameters+0x23c>)
 801383e:	2201      	movs	r2, #1
 8013840:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013844:	4b25      	ldr	r3, [pc, #148]	; (80138dc <ResetMacParameters+0x238>)
 8013846:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801384a:	4b25      	ldr	r3, [pc, #148]	; (80138e0 <ResetMacParameters+0x23c>)
 801384c:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013850:	4a23      	ldr	r2, [pc, #140]	; (80138e0 <ResetMacParameters+0x23c>)
 8013852:	4b23      	ldr	r3, [pc, #140]	; (80138e0 <ResetMacParameters+0x23c>)
 8013854:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8013858:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801385c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801385e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013860:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013864:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013868:	4b1d      	ldr	r3, [pc, #116]	; (80138e0 <ResetMacParameters+0x23c>)
 801386a:	2201      	movs	r2, #1
 801386c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013870:	4b1b      	ldr	r3, [pc, #108]	; (80138e0 <ResetMacParameters+0x23c>)
 8013872:	2202      	movs	r2, #2
 8013874:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013878:	2300      	movs	r3, #0
 801387a:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 801387c:	2300      	movs	r3, #0
 801387e:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8013880:	4b17      	ldr	r3, [pc, #92]	; (80138e0 <ResetMacParameters+0x23c>)
 8013882:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013886:	2b00      	cmp	r3, #0
 8013888:	d009      	beq.n	801389e <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801388a:	4b15      	ldr	r3, [pc, #84]	; (80138e0 <ResetMacParameters+0x23c>)
 801388c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013894:	4b12      	ldr	r3, [pc, #72]	; (80138e0 <ResetMacParameters+0x23c>)
 8013896:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801389a:	695b      	ldr	r3, [r3, #20]
 801389c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801389e:	4b14      	ldr	r3, [pc, #80]	; (80138f0 <ResetMacParameters+0x24c>)
 80138a0:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80138a2:	4b14      	ldr	r3, [pc, #80]	; (80138f4 <ResetMacParameters+0x250>)
 80138a4:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80138a6:	4b14      	ldr	r3, [pc, #80]	; (80138f8 <ResetMacParameters+0x254>)
 80138a8:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80138aa:	4b14      	ldr	r3, [pc, #80]	; (80138fc <ResetMacParameters+0x258>)
 80138ac:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80138ae:	4b14      	ldr	r3, [pc, #80]	; (8013900 <ResetMacParameters+0x25c>)
 80138b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80138b2:	4b14      	ldr	r3, [pc, #80]	; (8013904 <ResetMacParameters+0x260>)
 80138b4:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80138b6:	4b14      	ldr	r3, [pc, #80]	; (8013908 <ResetMacParameters+0x264>)
 80138b8:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80138ba:	4b14      	ldr	r3, [pc, #80]	; (801390c <ResetMacParameters+0x268>)
 80138bc:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 80138be:	4b14      	ldr	r3, [pc, #80]	; (8013910 <ResetMacParameters+0x26c>)
 80138c0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80138c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80138c6:	f107 031c 	add.w	r3, r7, #28
 80138ca:	4a12      	ldr	r2, [pc, #72]	; (8013914 <ResetMacParameters+0x270>)
 80138cc:	4618      	mov	r0, r3
 80138ce:	f002 f996 	bl	8015bfe <LoRaMacClassBInit>
}
 80138d2:	bf00      	nop
 80138d4:	3748      	adds	r7, #72	; 0x48
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bdb0      	pop	{r4, r5, r7, pc}
 80138da:	bf00      	nop
 80138dc:	20000c54 	.word	0x20000c54
 80138e0:	20000738 	.word	0x20000738
 80138e4:	20000e78 	.word	0x20000e78
 80138e8:	20000e8c 	.word	0x20000e8c
 80138ec:	200017ec 	.word	0x200017ec
 80138f0:	20000ba0 	.word	0x20000ba0
 80138f4:	20000b58 	.word	0x20000b58
 80138f8:	20000b8c 	.word	0x20000b8c
 80138fc:	20000bc9 	.word	0x20000bc9
 8013900:	20000d38 	.word	0x20000d38
 8013904:	20000c9c 	.word	0x20000c9c
 8013908:	20000ca0 	.word	0x20000ca0
 801390c:	20000d3c 	.word	0x20000d3c
 8013910:	20000d84 	.word	0x20000d84
 8013914:	20001208 	.word	0x20001208

08013918 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
 801391e:	6078      	str	r0, [r7, #4]
 8013920:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f00b ffa8 	bl	801f878 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013928:	4b11      	ldr	r3, [pc, #68]	; (8013970 <RxWindowSetup+0x58>)
 801392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801392c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801392e:	4b11      	ldr	r3, [pc, #68]	; (8013974 <RxWindowSetup+0x5c>)
 8013930:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013934:	4a10      	ldr	r2, [pc, #64]	; (8013978 <RxWindowSetup+0x60>)
 8013936:	6839      	ldr	r1, [r7, #0]
 8013938:	4618      	mov	r0, r3
 801393a:	f004 fa01 	bl	8017d40 <RegionRxConfig>
 801393e:	4603      	mov	r3, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	d010      	beq.n	8013966 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013944:	4b0d      	ldr	r3, [pc, #52]	; (801397c <RxWindowSetup+0x64>)
 8013946:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 801394a:	4b0c      	ldr	r3, [pc, #48]	; (801397c <RxWindowSetup+0x64>)
 801394c:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013950:	4b07      	ldr	r3, [pc, #28]	; (8013970 <RxWindowSetup+0x58>)
 8013952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013954:	4a07      	ldr	r2, [pc, #28]	; (8013974 <RxWindowSetup+0x5c>)
 8013956:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013958:	4610      	mov	r0, r2
 801395a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	7cda      	ldrb	r2, [r3, #19]
 8013960:	4b06      	ldr	r3, [pc, #24]	; (801397c <RxWindowSetup+0x64>)
 8013962:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8013966:	bf00      	nop
 8013968:	3708      	adds	r7, #8
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}
 801396e:	bf00      	nop
 8013970:	08021fb4 	.word	0x08021fb4
 8013974:	20000c54 	.word	0x20000c54
 8013978:	20000b5c 	.word	0x20000b5c
 801397c:	20000738 	.word	0x20000738

08013980 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013980:	b590      	push	{r4, r7, lr}
 8013982:	b083      	sub	sp, #12
 8013984:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013986:	4b1e      	ldr	r3, [pc, #120]	; (8013a00 <OpenContinuousRxCWindow+0x80>)
 8013988:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801398c:	4b1c      	ldr	r3, [pc, #112]	; (8013a00 <OpenContinuousRxCWindow+0x80>)
 801398e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013992:	b259      	sxtb	r1, r3
 8013994:	4b1a      	ldr	r3, [pc, #104]	; (8013a00 <OpenContinuousRxCWindow+0x80>)
 8013996:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801399a:	4b19      	ldr	r3, [pc, #100]	; (8013a00 <OpenContinuousRxCWindow+0x80>)
 801399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801399e:	4c19      	ldr	r4, [pc, #100]	; (8013a04 <OpenContinuousRxCWindow+0x84>)
 80139a0:	9400      	str	r4, [sp, #0]
 80139a2:	f004 f9a9 	bl	8017cf8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80139a6:	4b18      	ldr	r3, [pc, #96]	; (8013a08 <OpenContinuousRxCWindow+0x88>)
 80139a8:	2202      	movs	r2, #2
 80139aa:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80139ae:	4b14      	ldr	r3, [pc, #80]	; (8013a00 <OpenContinuousRxCWindow+0x80>)
 80139b0:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80139b4:	4b14      	ldr	r3, [pc, #80]	; (8013a08 <OpenContinuousRxCWindow+0x88>)
 80139b6:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80139ba:	4b13      	ldr	r3, [pc, #76]	; (8013a08 <OpenContinuousRxCWindow+0x88>)
 80139bc:	2201      	movs	r2, #1
 80139be:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80139c2:	4b0f      	ldr	r3, [pc, #60]	; (8013a00 <OpenContinuousRxCWindow+0x80>)
 80139c4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80139c8:	4a10      	ldr	r2, [pc, #64]	; (8013a0c <OpenContinuousRxCWindow+0x8c>)
 80139ca:	490e      	ldr	r1, [pc, #56]	; (8013a04 <OpenContinuousRxCWindow+0x84>)
 80139cc:	4618      	mov	r0, r3
 80139ce:	f004 f9b7 	bl	8017d40 <RegionRxConfig>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d00f      	beq.n	80139f8 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80139d8:	4b0b      	ldr	r3, [pc, #44]	; (8013a08 <OpenContinuousRxCWindow+0x88>)
 80139da:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80139de:	4b0a      	ldr	r3, [pc, #40]	; (8013a08 <OpenContinuousRxCWindow+0x88>)
 80139e0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 80139e4:	4b0a      	ldr	r3, [pc, #40]	; (8013a10 <OpenContinuousRxCWindow+0x90>)
 80139e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139e8:	2000      	movs	r0, #0
 80139ea:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80139ec:	4b06      	ldr	r3, [pc, #24]	; (8013a08 <OpenContinuousRxCWindow+0x88>)
 80139ee:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80139f2:	4b05      	ldr	r3, [pc, #20]	; (8013a08 <OpenContinuousRxCWindow+0x88>)
 80139f4:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80139f8:	bf00      	nop
 80139fa:	3704      	adds	r7, #4
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd90      	pop	{r4, r7, pc}
 8013a00:	20000c54 	.word	0x20000c54
 8013a04:	20000b20 	.word	0x20000b20
 8013a08:	20000738 	.word	0x20000738
 8013a0c:	20000b5c 	.word	0x20000b5c
 8013a10:	08021fb4 	.word	0x08021fb4

08013a14 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b088      	sub	sp, #32
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	60b9      	str	r1, [r7, #8]
 8013a1e:	603b      	str	r3, [r7, #0]
 8013a20:	4613      	mov	r3, r2
 8013a22:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013a24:	4b82      	ldr	r3, [pc, #520]	; (8013c30 <PrepareFrame+0x21c>)
 8013a26:	2200      	movs	r2, #0
 8013a28:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8013a2a:	4b81      	ldr	r3, [pc, #516]	; (8013c30 <PrepareFrame+0x21c>)
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8013a32:	2300      	movs	r3, #0
 8013a34:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8013a36:	2300      	movs	r3, #0
 8013a38:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d101      	bne.n	8013a48 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013a44:	2300      	movs	r3, #0
 8013a46:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013a48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a4a:	461a      	mov	r2, r3
 8013a4c:	6839      	ldr	r1, [r7, #0]
 8013a4e:	4879      	ldr	r0, [pc, #484]	; (8013c34 <PrepareFrame+0x220>)
 8013a50:	f007 feb3 	bl	801b7ba <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013a54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a56:	b2da      	uxtb	r2, r3
 8013a58:	4b75      	ldr	r3, [pc, #468]	; (8013c30 <PrepareFrame+0x21c>)
 8013a5a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	781a      	ldrb	r2, [r3, #0]
 8013a62:	4b73      	ldr	r3, [pc, #460]	; (8013c30 <PrepareFrame+0x21c>)
 8013a64:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	781b      	ldrb	r3, [r3, #0]
 8013a6a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	2b07      	cmp	r3, #7
 8013a72:	f000 80b9 	beq.w	8013be8 <PrepareFrame+0x1d4>
 8013a76:	2b07      	cmp	r3, #7
 8013a78:	f300 80d0 	bgt.w	8013c1c <PrepareFrame+0x208>
 8013a7c:	2b02      	cmp	r3, #2
 8013a7e:	d006      	beq.n	8013a8e <PrepareFrame+0x7a>
 8013a80:	2b04      	cmp	r3, #4
 8013a82:	f040 80cb 	bne.w	8013c1c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013a86:	4b6a      	ldr	r3, [pc, #424]	; (8013c30 <PrepareFrame+0x21c>)
 8013a88:	2201      	movs	r2, #1
 8013a8a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013a8e:	4b68      	ldr	r3, [pc, #416]	; (8013c30 <PrepareFrame+0x21c>)
 8013a90:	2204      	movs	r2, #4
 8013a92:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013a96:	4b66      	ldr	r3, [pc, #408]	; (8013c30 <PrepareFrame+0x21c>)
 8013a98:	4a67      	ldr	r2, [pc, #412]	; (8013c38 <PrepareFrame+0x224>)
 8013a9a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013a9e:	4b64      	ldr	r3, [pc, #400]	; (8013c30 <PrepareFrame+0x21c>)
 8013aa0:	22ff      	movs	r2, #255	; 0xff
 8013aa2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	781a      	ldrb	r2, [r3, #0]
 8013aaa:	4b61      	ldr	r3, [pc, #388]	; (8013c30 <PrepareFrame+0x21c>)
 8013aac:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013ab0:	4a5f      	ldr	r2, [pc, #380]	; (8013c30 <PrepareFrame+0x21c>)
 8013ab2:	79fb      	ldrb	r3, [r7, #7]
 8013ab4:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013ab8:	4b60      	ldr	r3, [pc, #384]	; (8013c3c <PrepareFrame+0x228>)
 8013aba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8013abe:	4a5c      	ldr	r2, [pc, #368]	; (8013c30 <PrepareFrame+0x21c>)
 8013ac0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	781a      	ldrb	r2, [r3, #0]
 8013ac8:	4b59      	ldr	r3, [pc, #356]	; (8013c30 <PrepareFrame+0x21c>)
 8013aca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013ace:	4b58      	ldr	r3, [pc, #352]	; (8013c30 <PrepareFrame+0x21c>)
 8013ad0:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013ad4:	4b56      	ldr	r3, [pc, #344]	; (8013c30 <PrepareFrame+0x21c>)
 8013ad6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8013ada:	4b55      	ldr	r3, [pc, #340]	; (8013c30 <PrepareFrame+0x21c>)
 8013adc:	4a55      	ldr	r2, [pc, #340]	; (8013c34 <PrepareFrame+0x220>)
 8013ade:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013ae2:	f107 0318 	add.w	r3, r7, #24
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f003 f9da 	bl	8016ea0 <LoRaMacCryptoGetFCntUp>
 8013aec:	4603      	mov	r3, r0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d001      	beq.n	8013af6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013af2:	2312      	movs	r3, #18
 8013af4:	e098      	b.n	8013c28 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	4b4d      	ldr	r3, [pc, #308]	; (8013c30 <PrepareFrame+0x21c>)
 8013afc:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8013b00:	4b4b      	ldr	r3, [pc, #300]	; (8013c30 <PrepareFrame+0x21c>)
 8013b02:	2200      	movs	r2, #0
 8013b04:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8013b08:	4b49      	ldr	r3, [pc, #292]	; (8013c30 <PrepareFrame+0x21c>)
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013b10:	69bb      	ldr	r3, [r7, #24]
 8013b12:	4a47      	ldr	r2, [pc, #284]	; (8013c30 <PrepareFrame+0x21c>)
 8013b14:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013b18:	f107 0314 	add.w	r3, r7, #20
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f002 fb8b 	bl	8016238 <LoRaMacCommandsGetSizeSerializedCmds>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d001      	beq.n	8013b2c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b28:	2313      	movs	r3, #19
 8013b2a:	e07d      	b.n	8013c28 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d076      	beq.n	8013c20 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013b32:	4b42      	ldr	r3, [pc, #264]	; (8013c3c <PrepareFrame+0x228>)
 8013b34:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f7fe fd2b 	bl	8012594 <GetMaxAppPayloadWithoutFOptsLength>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013b42:	4b3b      	ldr	r3, [pc, #236]	; (8013c30 <PrepareFrame+0x21c>)
 8013b44:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d01d      	beq.n	8013b88 <PrepareFrame+0x174>
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	2b0f      	cmp	r3, #15
 8013b50:	d81a      	bhi.n	8013b88 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013b52:	f107 0314 	add.w	r3, r7, #20
 8013b56:	4a3a      	ldr	r2, [pc, #232]	; (8013c40 <PrepareFrame+0x22c>)
 8013b58:	4619      	mov	r1, r3
 8013b5a:	200f      	movs	r0, #15
 8013b5c:	f002 fb82 	bl	8016264 <LoRaMacCommandsSerializeCmds>
 8013b60:	4603      	mov	r3, r0
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d001      	beq.n	8013b6a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b66:	2313      	movs	r3, #19
 8013b68:	e05e      	b.n	8013c28 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	f003 030f 	and.w	r3, r3, #15
 8013b70:	b2d9      	uxtb	r1, r3
 8013b72:	68ba      	ldr	r2, [r7, #8]
 8013b74:	7813      	ldrb	r3, [r2, #0]
 8013b76:	f361 0303 	bfi	r3, r1, #0, #4
 8013b7a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	781a      	ldrb	r2, [r3, #0]
 8013b80:	4b2b      	ldr	r3, [pc, #172]	; (8013c30 <PrepareFrame+0x21c>)
 8013b82:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013b86:	e04b      	b.n	8013c20 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013b88:	4b29      	ldr	r3, [pc, #164]	; (8013c30 <PrepareFrame+0x21c>)
 8013b8a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d010      	beq.n	8013bb4 <PrepareFrame+0x1a0>
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	2b0f      	cmp	r3, #15
 8013b96:	d90d      	bls.n	8013bb4 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013b98:	7ffb      	ldrb	r3, [r7, #31]
 8013b9a:	f107 0114 	add.w	r1, r7, #20
 8013b9e:	4a29      	ldr	r2, [pc, #164]	; (8013c44 <PrepareFrame+0x230>)
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f002 fb5f 	bl	8016264 <LoRaMacCommandsSerializeCmds>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d001      	beq.n	8013bb0 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013bac:	2313      	movs	r3, #19
 8013bae:	e03b      	b.n	8013c28 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013bb0:	230a      	movs	r3, #10
 8013bb2:	e039      	b.n	8013c28 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013bb4:	7ffb      	ldrb	r3, [r7, #31]
 8013bb6:	f107 0114 	add.w	r1, r7, #20
 8013bba:	4a22      	ldr	r2, [pc, #136]	; (8013c44 <PrepareFrame+0x230>)
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f002 fb51 	bl	8016264 <LoRaMacCommandsSerializeCmds>
 8013bc2:	4603      	mov	r3, r0
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d001      	beq.n	8013bcc <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013bc8:	2313      	movs	r3, #19
 8013bca:	e02d      	b.n	8013c28 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013bcc:	4b18      	ldr	r3, [pc, #96]	; (8013c30 <PrepareFrame+0x21c>)
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013bd4:	4b16      	ldr	r3, [pc, #88]	; (8013c30 <PrepareFrame+0x21c>)
 8013bd6:	4a1b      	ldr	r2, [pc, #108]	; (8013c44 <PrepareFrame+0x230>)
 8013bd8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	b2da      	uxtb	r2, r3
 8013be0:	4b13      	ldr	r3, [pc, #76]	; (8013c30 <PrepareFrame+0x21c>)
 8013be2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013be6:	e01b      	b.n	8013c20 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d01a      	beq.n	8013c24 <PrepareFrame+0x210>
 8013bee:	4b10      	ldr	r3, [pc, #64]	; (8013c30 <PrepareFrame+0x21c>)
 8013bf0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d015      	beq.n	8013c24 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8013bf8:	4813      	ldr	r0, [pc, #76]	; (8013c48 <PrepareFrame+0x234>)
 8013bfa:	4b0d      	ldr	r3, [pc, #52]	; (8013c30 <PrepareFrame+0x21c>)
 8013bfc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013c00:	b29b      	uxth	r3, r3
 8013c02:	461a      	mov	r2, r3
 8013c04:	6839      	ldr	r1, [r7, #0]
 8013c06:	f007 fdd8 	bl	801b7ba <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8013c0a:	4b09      	ldr	r3, [pc, #36]	; (8013c30 <PrepareFrame+0x21c>)
 8013c0c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	3301      	adds	r3, #1
 8013c14:	b29a      	uxth	r2, r3
 8013c16:	4b06      	ldr	r3, [pc, #24]	; (8013c30 <PrepareFrame+0x21c>)
 8013c18:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013c1a:	e003      	b.n	8013c24 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013c1c:	2302      	movs	r3, #2
 8013c1e:	e003      	b.n	8013c28 <PrepareFrame+0x214>
            break;
 8013c20:	bf00      	nop
 8013c22:	e000      	b.n	8013c26 <PrepareFrame+0x212>
            break;
 8013c24:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013c26:	2300      	movs	r3, #0
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3720      	adds	r7, #32
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}
 8013c30:	20000738 	.word	0x20000738
 8013c34:	20000870 	.word	0x20000870
 8013c38:	2000073a 	.word	0x2000073a
 8013c3c:	20000c54 	.word	0x20000c54
 8013c40:	20000850 	.word	0x20000850
 8013c44:	20000bd4 	.word	0x20000bd4
 8013c48:	2000073b 	.word	0x2000073b

08013c4c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b08a      	sub	sp, #40	; 0x28
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	4603      	mov	r3, r0
 8013c54:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c56:	2303      	movs	r3, #3
 8013c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013c60:	79fb      	ldrb	r3, [r7, #7]
 8013c62:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c64:	4b4b      	ldr	r3, [pc, #300]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013c66:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c6a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013c6c:	4b49      	ldr	r3, [pc, #292]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013c6e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013c72:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013c74:	4b47      	ldr	r3, [pc, #284]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c7a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013c7c:	4b45      	ldr	r3, [pc, #276]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c82:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013c84:	4b44      	ldr	r3, [pc, #272]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013c86:	881b      	ldrh	r3, [r3, #0]
 8013c88:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013c8a:	4b42      	ldr	r3, [pc, #264]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013c8c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013c90:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013c92:	4b40      	ldr	r3, [pc, #256]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013c94:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013c98:	f107 020f 	add.w	r2, r7, #15
 8013c9c:	f107 0110 	add.w	r1, r7, #16
 8013ca0:	4b3e      	ldr	r3, [pc, #248]	; (8013d9c <SendFrameOnChannel+0x150>)
 8013ca2:	f004 f86b 	bl	8017d7c <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013ca6:	4b3c      	ldr	r3, [pc, #240]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013ca8:	2201      	movs	r2, #1
 8013caa:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013cae:	4b39      	ldr	r3, [pc, #228]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013cb0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013cb4:	b2da      	uxtb	r2, r3
 8013cb6:	4b38      	ldr	r3, [pc, #224]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013cb8:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8013cbc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013cc0:	4b35      	ldr	r3, [pc, #212]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013cc2:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8013cc6:	79fb      	ldrb	r3, [r7, #7]
 8013cc8:	4a33      	ldr	r2, [pc, #204]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013cca:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013cce:	4b32      	ldr	r3, [pc, #200]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013cd0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013cd4:	4a30      	ldr	r2, [pc, #192]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013cd6:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013cda:	4b2f      	ldr	r3, [pc, #188]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013cdc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013ce0:	4a2d      	ldr	r2, [pc, #180]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013ce2:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013ce6:	f001 fff6 	bl	8015cd6 <LoRaMacClassBIsBeaconModeActive>
 8013cea:	4603      	mov	r3, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d00b      	beq.n	8013d08 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013cf0:	4b29      	ldr	r3, [pc, #164]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013cf2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f002 f858 	bl	8015dac <LoRaMacClassBIsUplinkCollision>
 8013cfc:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013cfe:	6a3b      	ldr	r3, [r7, #32]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d001      	beq.n	8013d08 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013d04:	2310      	movs	r3, #16
 8013d06:	e040      	b.n	8013d8a <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013d08:	4b22      	ldr	r3, [pc, #136]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013d0a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013d0e:	2b01      	cmp	r3, #1
 8013d10:	d101      	bne.n	8013d16 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013d12:	f002 f855 	bl	8015dc0 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013d16:	f001 ffef 	bl	8015cf8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013d1a:	4b1e      	ldr	r3, [pc, #120]	; (8013d94 <SendFrameOnChannel+0x148>)
 8013d1c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013d20:	b2db      	uxtb	r3, r3
 8013d22:	4a1d      	ldr	r2, [pc, #116]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d24:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8013d28:	4611      	mov	r1, r2
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7ff fc2a 	bl	8013584 <SecureFrame>
 8013d30:	4603      	mov	r3, r0
 8013d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d002      	beq.n	8013d44 <SendFrameOnChannel+0xf8>
    {
        return status;
 8013d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d42:	e022      	b.n	8013d8a <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013d44:	4b14      	ldr	r3, [pc, #80]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d46:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d4a:	f043 0302 	orr.w	r3, r3, #2
 8013d4e:	4a12      	ldr	r2, [pc, #72]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d50:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8013d54:	4b10      	ldr	r3, [pc, #64]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d56:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	b2da      	uxtb	r2, r3
 8013d5e:	4b0e      	ldr	r3, [pc, #56]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d60:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8013d64:	4b0c      	ldr	r3, [pc, #48]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d66:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013d6a:	4b0b      	ldr	r3, [pc, #44]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d6c:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8013d70:	4b09      	ldr	r3, [pc, #36]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d72:	2200      	movs	r2, #0
 8013d74:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013d78:	4b09      	ldr	r3, [pc, #36]	; (8013da0 <SendFrameOnChannel+0x154>)
 8013d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d7c:	4a06      	ldr	r2, [pc, #24]	; (8013d98 <SendFrameOnChannel+0x14c>)
 8013d7e:	8812      	ldrh	r2, [r2, #0]
 8013d80:	b2d2      	uxtb	r2, r2
 8013d82:	4611      	mov	r1, r2
 8013d84:	4807      	ldr	r0, [pc, #28]	; (8013da4 <SendFrameOnChannel+0x158>)
 8013d86:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013d88:	2300      	movs	r3, #0
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3728      	adds	r7, #40	; 0x28
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	20000c54 	.word	0x20000c54
 8013d98:	20000738 	.word	0x20000738
 8013d9c:	20000b54 	.word	0x20000b54
 8013da0:	08021fb4 	.word	0x08021fb4
 8013da4:	2000073a 	.word	0x2000073a

08013da8 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b082      	sub	sp, #8
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	4603      	mov	r3, r0
 8013db0:	6039      	str	r1, [r7, #0]
 8013db2:	80fb      	strh	r3, [r7, #6]
 8013db4:	4613      	mov	r3, r2
 8013db6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013db8:	4b09      	ldr	r3, [pc, #36]	; (8013de0 <SetTxContinuousWave+0x38>)
 8013dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dbc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013dc0:	88fa      	ldrh	r2, [r7, #6]
 8013dc2:	6838      	ldr	r0, [r7, #0]
 8013dc4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013dc6:	4b07      	ldr	r3, [pc, #28]	; (8013de4 <SetTxContinuousWave+0x3c>)
 8013dc8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dcc:	f043 0302 	orr.w	r3, r3, #2
 8013dd0:	4a04      	ldr	r2, [pc, #16]	; (8013de4 <SetTxContinuousWave+0x3c>)
 8013dd2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013dd6:	2300      	movs	r3, #0
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3708      	adds	r7, #8
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	08021fb4 	.word	0x08021fb4
 8013de4:	20000738 	.word	0x20000738

08013de8 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8013dee:	2300      	movs	r3, #0
 8013df0:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013df2:	4b49      	ldr	r3, [pc, #292]	; (8013f18 <RestoreNvmData+0x130>)
 8013df4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d001      	beq.n	8013e00 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	e087      	b.n	8013f10 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8013e00:	2124      	movs	r1, #36	; 0x24
 8013e02:	4846      	ldr	r0, [pc, #280]	; (8013f1c <RestoreNvmData+0x134>)
 8013e04:	f007 fd2e 	bl	801b864 <Crc32>
 8013e08:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8013e0a:	4b44      	ldr	r3, [pc, #272]	; (8013f1c <RestoreNvmData+0x134>)
 8013e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e0e:	687a      	ldr	r2, [r7, #4]
 8013e10:	429a      	cmp	r2, r3
 8013e12:	d001      	beq.n	8013e18 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e14:	2317      	movs	r3, #23
 8013e16:	e07b      	b.n	8013f10 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8013e18:	211c      	movs	r1, #28
 8013e1a:	4841      	ldr	r0, [pc, #260]	; (8013f20 <RestoreNvmData+0x138>)
 8013e1c:	f007 fd22 	bl	801b864 <Crc32>
 8013e20:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8013e22:	4b3e      	ldr	r3, [pc, #248]	; (8013f1c <RestoreNvmData+0x134>)
 8013e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e26:	687a      	ldr	r2, [r7, #4]
 8013e28:	429a      	cmp	r2, r3
 8013e2a:	d001      	beq.n	8013e30 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e2c:	2317      	movs	r3, #23
 8013e2e:	e06f      	b.n	8013f10 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8013e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013e34:	483b      	ldr	r0, [pc, #236]	; (8013f24 <RestoreNvmData+0x13c>)
 8013e36:	f007 fd15 	bl	801b864 <Crc32>
 8013e3a:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8013e3c:	4b37      	ldr	r3, [pc, #220]	; (8013f1c <RestoreNvmData+0x134>)
 8013e3e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	429a      	cmp	r2, r3
 8013e46:	d001      	beq.n	8013e4c <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e48:	2317      	movs	r3, #23
 8013e4a:	e061      	b.n	8013f10 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8013e4c:	21d4      	movs	r1, #212	; 0xd4
 8013e4e:	4836      	ldr	r0, [pc, #216]	; (8013f28 <RestoreNvmData+0x140>)
 8013e50:	f007 fd08 	bl	801b864 <Crc32>
 8013e54:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8013e56:	4b31      	ldr	r3, [pc, #196]	; (8013f1c <RestoreNvmData+0x134>)
 8013e58:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013e5c:	687a      	ldr	r2, [r7, #4]
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d001      	beq.n	8013e66 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e62:	2317      	movs	r3, #23
 8013e64:	e054      	b.n	8013f10 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8013e66:	2110      	movs	r1, #16
 8013e68:	4830      	ldr	r0, [pc, #192]	; (8013f2c <RestoreNvmData+0x144>)
 8013e6a:	f007 fcfb 	bl	801b864 <Crc32>
 8013e6e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8013e70:	4b2a      	ldr	r3, [pc, #168]	; (8013f1c <RestoreNvmData+0x134>)
 8013e72:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8013e76:	687a      	ldr	r2, [r7, #4]
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d001      	beq.n	8013e80 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e7c:	2317      	movs	r3, #23
 8013e7e:	e047      	b.n	8013f10 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8013e80:	f44f 715e 	mov.w	r1, #888	; 0x378
 8013e84:	482a      	ldr	r0, [pc, #168]	; (8013f30 <RestoreNvmData+0x148>)
 8013e86:	f007 fced 	bl	801b864 <Crc32>
 8013e8a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8013e8c:	4b23      	ldr	r3, [pc, #140]	; (8013f1c <RestoreNvmData+0x134>)
 8013e8e:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8013e92:	687a      	ldr	r2, [r7, #4]
 8013e94:	429a      	cmp	r2, r3
 8013e96:	d001      	beq.n	8013e9c <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013e98:	2317      	movs	r3, #23
 8013e9a:	e039      	b.n	8013f10 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8013e9c:	2114      	movs	r1, #20
 8013e9e:	4825      	ldr	r0, [pc, #148]	; (8013f34 <RestoreNvmData+0x14c>)
 8013ea0:	f007 fce0 	bl	801b864 <Crc32>
 8013ea4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8013ea6:	4b1d      	ldr	r3, [pc, #116]	; (8013f1c <RestoreNvmData+0x134>)
 8013ea8:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d001      	beq.n	8013eb6 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013eb2:	2317      	movs	r3, #23
 8013eb4:	e02c      	b.n	8013f10 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8013eb6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013eba:	4918      	ldr	r1, [pc, #96]	; (8013f1c <RestoreNvmData+0x134>)
 8013ebc:	481e      	ldr	r0, [pc, #120]	; (8013f38 <RestoreNvmData+0x150>)
 8013ebe:	f007 fc7c 	bl	801b7ba <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8013ec2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013ec6:	2100      	movs	r1, #0
 8013ec8:	4814      	ldr	r0, [pc, #80]	; (8013f1c <RestoreNvmData+0x134>)
 8013eca:	f007 fcb1 	bl	801b830 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013ece:	4b12      	ldr	r3, [pc, #72]	; (8013f18 <RestoreNvmData+0x130>)
 8013ed0:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013ed4:	4b10      	ldr	r3, [pc, #64]	; (8013f18 <RestoreNvmData+0x130>)
 8013ed6:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8013eda:	4b17      	ldr	r3, [pc, #92]	; (8013f38 <RestoreNvmData+0x150>)
 8013edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ede:	4a0e      	ldr	r2, [pc, #56]	; (8013f18 <RestoreNvmData+0x130>)
 8013ee0:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013ee4:	4b14      	ldr	r3, [pc, #80]	; (8013f38 <RestoreNvmData+0x150>)
 8013ee6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013eea:	4b0b      	ldr	r3, [pc, #44]	; (8013f18 <RestoreNvmData+0x130>)
 8013eec:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013ef0:	4b09      	ldr	r3, [pc, #36]	; (8013f18 <RestoreNvmData+0x130>)
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013ef8:	4b07      	ldr	r3, [pc, #28]	; (8013f18 <RestoreNvmData+0x130>)
 8013efa:	2202      	movs	r2, #2
 8013efc:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013f00:	4b0e      	ldr	r3, [pc, #56]	; (8013f3c <RestoreNvmData+0x154>)
 8013f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f04:	4a0c      	ldr	r2, [pc, #48]	; (8013f38 <RestoreNvmData+0x150>)
 8013f06:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013f0a:	4610      	mov	r0, r2
 8013f0c:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013f0e:	2300      	movs	r3, #0
}
 8013f10:	4618      	mov	r0, r3
 8013f12:	3708      	adds	r7, #8
 8013f14:	46bd      	mov	sp, r7
 8013f16:	bd80      	pop	{r7, pc}
 8013f18:	20000738 	.word	0x20000738
 8013f1c:	20001220 	.word	0x20001220
 8013f20:	20001248 	.word	0x20001248
 8013f24:	20001268 	.word	0x20001268
 8013f28:	2000136c 	.word	0x2000136c
 8013f2c:	20001444 	.word	0x20001444
 8013f30:	20001458 	.word	0x20001458
 8013f34:	200017d4 	.word	0x200017d4
 8013f38:	20000c54 	.word	0x20000c54
 8013f3c:	08021fb4 	.word	0x08021fb4

08013f40 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013f40:	b480      	push	{r7}
 8013f42:	b083      	sub	sp, #12
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d002      	beq.n	8013f56 <DetermineFrameType+0x16>
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d101      	bne.n	8013f5a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f56:	2303      	movs	r3, #3
 8013f58:	e03b      	b.n	8013fd2 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	7b1b      	ldrb	r3, [r3, #12]
 8013f5e:	f003 030f 	and.w	r3, r3, #15
 8013f62:	b2db      	uxtb	r3, r3
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d008      	beq.n	8013f7a <DetermineFrameType+0x3a>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d003      	beq.n	8013f7a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	2200      	movs	r2, #0
 8013f76:	701a      	strb	r2, [r3, #0]
 8013f78:	e02a      	b.n	8013fd0 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d103      	bne.n	8013f8c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	2201      	movs	r2, #1
 8013f88:	701a      	strb	r2, [r3, #0]
 8013f8a:	e021      	b.n	8013fd0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	7b1b      	ldrb	r3, [r3, #12]
 8013f90:	f003 030f 	and.w	r3, r3, #15
 8013f94:	b2db      	uxtb	r3, r3
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d108      	bne.n	8013fac <DetermineFrameType+0x6c>
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d103      	bne.n	8013fac <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	2202      	movs	r2, #2
 8013fa8:	701a      	strb	r2, [r3, #0]
 8013faa:	e011      	b.n	8013fd0 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	7b1b      	ldrb	r3, [r3, #12]
 8013fb0:	f003 030f 	and.w	r3, r3, #15
 8013fb4:	b2db      	uxtb	r3, r3
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d108      	bne.n	8013fcc <DetermineFrameType+0x8c>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d003      	beq.n	8013fcc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013fc4:	683b      	ldr	r3, [r7, #0]
 8013fc6:	2203      	movs	r2, #3
 8013fc8:	701a      	strb	r2, [r3, #0]
 8013fca:	e001      	b.n	8013fd0 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013fcc:	2318      	movs	r3, #24
 8013fce:	e000      	b.n	8013fd2 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013fd0:	2300      	movs	r3, #0
}
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	370c      	adds	r7, #12
 8013fd6:	46bd      	mov	sp, r7
 8013fd8:	bc80      	pop	{r7}
 8013fda:	4770      	bx	lr

08013fdc <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8013fdc:	b480      	push	{r7}
 8013fde:	b083      	sub	sp, #12
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	460a      	mov	r2, r1
 8013fe6:	71fb      	strb	r3, [r7, #7]
 8013fe8:	4613      	mov	r3, r2
 8013fea:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8013fec:	79fa      	ldrb	r2, [r7, #7]
 8013fee:	79bb      	ldrb	r3, [r7, #6]
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d301      	bcc.n	8013ff8 <CheckRetrans+0x1c>
    {
        return true;
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	e000      	b.n	8013ffa <CheckRetrans+0x1e>
    }
    return false;
 8013ff8:	2300      	movs	r3, #0
}
 8013ffa:	4618      	mov	r0, r3
 8013ffc:	370c      	adds	r7, #12
 8013ffe:	46bd      	mov	sp, r7
 8014000:	bc80      	pop	{r7}
 8014002:	4770      	bx	lr

08014004 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8014004:	b580      	push	{r7, lr}
 8014006:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8014008:	4b12      	ldr	r3, [pc, #72]	; (8014054 <CheckRetransUnconfirmedUplink+0x50>)
 801400a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801400e:	4a12      	ldr	r2, [pc, #72]	; (8014058 <CheckRetransUnconfirmedUplink+0x54>)
 8014010:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8014014:	4611      	mov	r1, r2
 8014016:	4618      	mov	r0, r3
 8014018:	f7ff ffe0 	bl	8013fdc <CheckRetrans>
 801401c:	4603      	mov	r3, r0
 801401e:	2b00      	cmp	r3, #0
 8014020:	d001      	beq.n	8014026 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8014022:	2301      	movs	r3, #1
 8014024:	e014      	b.n	8014050 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8014026:	4b0b      	ldr	r3, [pc, #44]	; (8014054 <CheckRetransUnconfirmedUplink+0x50>)
 8014028:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801402c:	f003 0302 	and.w	r3, r3, #2
 8014030:	b2db      	uxtb	r3, r3
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00b      	beq.n	801404e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8014036:	4b07      	ldr	r3, [pc, #28]	; (8014054 <CheckRetransUnconfirmedUplink+0x50>)
 8014038:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801403c:	2b00      	cmp	r3, #0
 801403e:	d004      	beq.n	801404a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8014040:	4b04      	ldr	r3, [pc, #16]	; (8014054 <CheckRetransUnconfirmedUplink+0x50>)
 8014042:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8014046:	2b01      	cmp	r3, #1
 8014048:	d101      	bne.n	801404e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 801404a:	2301      	movs	r3, #1
 801404c:	e000      	b.n	8014050 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 801404e:	2300      	movs	r3, #0
}
 8014050:	4618      	mov	r0, r3
 8014052:	bd80      	pop	{r7, pc}
 8014054:	20000738 	.word	0x20000738
 8014058:	20000c54 	.word	0x20000c54

0801405c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801405c:	b580      	push	{r7, lr}
 801405e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8014060:	4b10      	ldr	r3, [pc, #64]	; (80140a4 <CheckRetransConfirmedUplink+0x48>)
 8014062:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014066:	4a10      	ldr	r2, [pc, #64]	; (80140a8 <CheckRetransConfirmedUplink+0x4c>)
 8014068:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 801406c:	4611      	mov	r1, r2
 801406e:	4618      	mov	r0, r3
 8014070:	f7ff ffb4 	bl	8013fdc <CheckRetrans>
 8014074:	4603      	mov	r3, r0
 8014076:	2b00      	cmp	r3, #0
 8014078:	d001      	beq.n	801407e <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801407a:	2301      	movs	r3, #1
 801407c:	e00f      	b.n	801409e <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801407e:	4b09      	ldr	r3, [pc, #36]	; (80140a4 <CheckRetransConfirmedUplink+0x48>)
 8014080:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8014084:	f003 0302 	and.w	r3, r3, #2
 8014088:	b2db      	uxtb	r3, r3
 801408a:	2b00      	cmp	r3, #0
 801408c:	d006      	beq.n	801409c <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801408e:	4b05      	ldr	r3, [pc, #20]	; (80140a4 <CheckRetransConfirmedUplink+0x48>)
 8014090:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8014094:	2b00      	cmp	r3, #0
 8014096:	d001      	beq.n	801409c <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8014098:	2301      	movs	r3, #1
 801409a:	e000      	b.n	801409e <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 801409c:	2300      	movs	r3, #0
}
 801409e:	4618      	mov	r0, r3
 80140a0:	bd80      	pop	{r7, pc}
 80140a2:	bf00      	nop
 80140a4:	20000738 	.word	0x20000738
 80140a8:	20000c54 	.word	0x20000c54

080140ac <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 80140ac:	b480      	push	{r7}
 80140ae:	b083      	sub	sp, #12
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ba:	d002      	beq.n	80140c2 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	3301      	adds	r3, #1
 80140c0:	607b      	str	r3, [r7, #4]
    }
    return counter;
 80140c2:	687b      	ldr	r3, [r7, #4]
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	370c      	adds	r7, #12
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bc80      	pop	{r7}
 80140cc:	4770      	bx	lr
	...

080140d0 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80140d4:	4b1a      	ldr	r3, [pc, #104]	; (8014140 <StopRetransmission+0x70>)
 80140d6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80140da:	f003 0302 	and.w	r3, r3, #2
 80140de:	b2db      	uxtb	r3, r3
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d009      	beq.n	80140f8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80140e4:	4b16      	ldr	r3, [pc, #88]	; (8014140 <StopRetransmission+0x70>)
 80140e6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d011      	beq.n	8014112 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80140ee:	4b14      	ldr	r3, [pc, #80]	; (8014140 <StopRetransmission+0x70>)
 80140f0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d00c      	beq.n	8014112 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80140f8:	4b12      	ldr	r3, [pc, #72]	; (8014144 <StopRetransmission+0x74>)
 80140fa:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d007      	beq.n	8014112 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8014102:	4b10      	ldr	r3, [pc, #64]	; (8014144 <StopRetransmission+0x74>)
 8014104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014106:	4618      	mov	r0, r3
 8014108:	f7ff ffd0 	bl	80140ac <IncreaseAdrAckCounter>
 801410c:	4603      	mov	r3, r0
 801410e:	4a0d      	ldr	r2, [pc, #52]	; (8014144 <StopRetransmission+0x74>)
 8014110:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8014112:	4b0b      	ldr	r3, [pc, #44]	; (8014140 <StopRetransmission+0x70>)
 8014114:	2200      	movs	r2, #0
 8014116:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 801411a:	4b09      	ldr	r3, [pc, #36]	; (8014140 <StopRetransmission+0x70>)
 801411c:	2200      	movs	r2, #0
 801411e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8014122:	4b07      	ldr	r3, [pc, #28]	; (8014140 <StopRetransmission+0x70>)
 8014124:	2200      	movs	r2, #0
 8014126:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801412a:	4b05      	ldr	r3, [pc, #20]	; (8014140 <StopRetransmission+0x70>)
 801412c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014130:	f023 0302 	bic.w	r3, r3, #2
 8014134:	4a02      	ldr	r2, [pc, #8]	; (8014140 <StopRetransmission+0x70>)
 8014136:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 801413a:	2301      	movs	r3, #1
}
 801413c:	4618      	mov	r0, r3
 801413e:	bd80      	pop	{r7, pc}
 8014140:	20000738 	.word	0x20000738
 8014144:	20000c54 	.word	0x20000c54

08014148 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8014148:	b580      	push	{r7, lr}
 801414a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 801414c:	4b08      	ldr	r3, [pc, #32]	; (8014170 <OnMacProcessNotify+0x28>)
 801414e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014152:	2b00      	cmp	r3, #0
 8014154:	d00a      	beq.n	801416c <OnMacProcessNotify+0x24>
 8014156:	4b06      	ldr	r3, [pc, #24]	; (8014170 <OnMacProcessNotify+0x28>)
 8014158:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801415c:	695b      	ldr	r3, [r3, #20]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d004      	beq.n	801416c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8014162:	4b03      	ldr	r3, [pc, #12]	; (8014170 <OnMacProcessNotify+0x28>)
 8014164:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014168:	695b      	ldr	r3, [r3, #20]
 801416a:	4798      	blx	r3
    }
}
 801416c:	bf00      	nop
 801416e:	bd80      	pop	{r7, pc}
 8014170:	20000738 	.word	0x20000738

08014174 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b082      	sub	sp, #8
 8014178:	af00      	add	r7, sp, #0
 801417a:	4603      	mov	r3, r0
 801417c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 801417e:	4b0b      	ldr	r3, [pc, #44]	; (80141ac <CallNvmDataChangeCallback+0x38>)
 8014180:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014184:	2b00      	cmp	r3, #0
 8014186:	d00c      	beq.n	80141a2 <CallNvmDataChangeCallback+0x2e>
 8014188:	4b08      	ldr	r3, [pc, #32]	; (80141ac <CallNvmDataChangeCallback+0x38>)
 801418a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801418e:	691b      	ldr	r3, [r3, #16]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d006      	beq.n	80141a2 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8014194:	4b05      	ldr	r3, [pc, #20]	; (80141ac <CallNvmDataChangeCallback+0x38>)
 8014196:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801419a:	691b      	ldr	r3, [r3, #16]
 801419c:	88fa      	ldrh	r2, [r7, #6]
 801419e:	4610      	mov	r0, r2
 80141a0:	4798      	blx	r3
    }
}
 80141a2:	bf00      	nop
 80141a4:	3708      	adds	r7, #8
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	20000738 	.word	0x20000738

080141b0 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80141b0:	b480      	push	{r7}
 80141b2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80141b4:	4b0b      	ldr	r3, [pc, #44]	; (80141e4 <IsRequestPending+0x34>)
 80141b6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80141ba:	f003 0304 	and.w	r3, r3, #4
 80141be:	b2db      	uxtb	r3, r3
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d107      	bne.n	80141d4 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80141c4:	4b07      	ldr	r3, [pc, #28]	; (80141e4 <IsRequestPending+0x34>)
 80141c6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80141ca:	f003 0301 	and.w	r3, r3, #1
 80141ce:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d001      	beq.n	80141d8 <IsRequestPending+0x28>
    {
        return 1;
 80141d4:	2301      	movs	r3, #1
 80141d6:	e000      	b.n	80141da <IsRequestPending+0x2a>
    }
    return 0;
 80141d8:	2300      	movs	r3, #0
}
 80141da:	4618      	mov	r0, r3
 80141dc:	46bd      	mov	sp, r7
 80141de:	bc80      	pop	{r7}
 80141e0:	4770      	bx	lr
 80141e2:	bf00      	nop
 80141e4:	20000738 	.word	0x20000738

080141e8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80141e8:	b590      	push	{r4, r7, lr}
 80141ea:	b091      	sub	sp, #68	; 0x44
 80141ec:	af02      	add	r7, sp, #8
 80141ee:	6178      	str	r0, [r7, #20]
 80141f0:	6139      	str	r1, [r7, #16]
 80141f2:	4613      	mov	r3, r2
 80141f4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d002      	beq.n	8014202 <LoRaMacInitialization+0x1a>
 80141fc:	693b      	ldr	r3, [r7, #16]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d101      	bne.n	8014206 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014202:	2303      	movs	r3, #3
 8014204:	e27a      	b.n	80146fc <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d00b      	beq.n	8014226 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8014212:	2b00      	cmp	r3, #0
 8014214:	d007      	beq.n	8014226 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801421a:	2b00      	cmp	r3, #0
 801421c:	d003      	beq.n	8014226 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8014222:	2b00      	cmp	r3, #0
 8014224:	d101      	bne.n	801422a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014226:	2303      	movs	r3, #3
 8014228:	e268      	b.n	80146fc <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 801422a:	7bfb      	ldrb	r3, [r7, #15]
 801422c:	4618      	mov	r0, r3
 801422e:	f003 fcaa 	bl	8017b86 <RegionIsActive>
 8014232:	4603      	mov	r3, r0
 8014234:	f083 0301 	eor.w	r3, r3, #1
 8014238:	b2db      	uxtb	r3, r3
 801423a:	2b00      	cmp	r3, #0
 801423c:	d001      	beq.n	8014242 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801423e:	2309      	movs	r3, #9
 8014240:	e25c      	b.n	80146fc <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8014242:	6978      	ldr	r0, [r7, #20]
 8014244:	f002 f930 	bl	80164a8 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8014248:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801424c:	2100      	movs	r1, #0
 801424e:	48c7      	ldr	r0, [pc, #796]	; (801456c <LoRaMacInitialization+0x384>)
 8014250:	f007 faee 	bl	801b830 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8014254:	f240 521c 	movw	r2, #1308	; 0x51c
 8014258:	2100      	movs	r1, #0
 801425a:	48c5      	ldr	r0, [pc, #788]	; (8014570 <LoRaMacInitialization+0x388>)
 801425c:	f007 fae8 	bl	801b830 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8014260:	4ac2      	ldr	r2, [pc, #776]	; (801456c <LoRaMacInitialization+0x384>)
 8014262:	7bfb      	ldrb	r3, [r7, #15]
 8014264:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8014268:	4bc0      	ldr	r3, [pc, #768]	; (801456c <LoRaMacInitialization+0x384>)
 801426a:	2200      	movs	r2, #0
 801426c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8014270:	4bbe      	ldr	r3, [pc, #760]	; (801456c <LoRaMacInitialization+0x384>)
 8014272:	2200      	movs	r2, #0
 8014274:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8014278:	4bbc      	ldr	r3, [pc, #752]	; (801456c <LoRaMacInitialization+0x384>)
 801427a:	4abe      	ldr	r2, [pc, #760]	; (8014574 <LoRaMacInitialization+0x38c>)
 801427c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014280:	2300      	movs	r3, #0
 8014282:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014286:	4bbc      	ldr	r3, [pc, #752]	; (8014578 <LoRaMacInitialization+0x390>)
 8014288:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801428a:	4bbc      	ldr	r3, [pc, #752]	; (801457c <LoRaMacInitialization+0x394>)
 801428c:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 801428e:	4bbc      	ldr	r3, [pc, #752]	; (8014580 <LoRaMacInitialization+0x398>)
 8014290:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014292:	4bb6      	ldr	r3, [pc, #728]	; (801456c <LoRaMacInitialization+0x384>)
 8014294:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014298:	f107 021c 	add.w	r2, r7, #28
 801429c:	4611      	mov	r1, r2
 801429e:	4618      	mov	r0, r3
 80142a0:	f003 fcbe 	bl	8017c20 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80142a4:	230f      	movs	r3, #15
 80142a6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142aa:	4bb0      	ldr	r3, [pc, #704]	; (801456c <LoRaMacInitialization+0x384>)
 80142ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142b0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80142b4:	4611      	mov	r1, r2
 80142b6:	4618      	mov	r0, r3
 80142b8:	f003 fc7a 	bl	8017bb0 <RegionGetPhyParam>
 80142bc:	4603      	mov	r3, r0
 80142be:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80142c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	bf14      	ite	ne
 80142c6:	2301      	movne	r3, #1
 80142c8:	2300      	moveq	r3, #0
 80142ca:	b2da      	uxtb	r2, r3
 80142cc:	4ba7      	ldr	r3, [pc, #668]	; (801456c <LoRaMacInitialization+0x384>)
 80142ce:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80142d2:	230a      	movs	r3, #10
 80142d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142d8:	4ba4      	ldr	r3, [pc, #656]	; (801456c <LoRaMacInitialization+0x384>)
 80142da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80142e2:	4611      	mov	r1, r2
 80142e4:	4618      	mov	r0, r3
 80142e6:	f003 fc63 	bl	8017bb0 <RegionGetPhyParam>
 80142ea:	4603      	mov	r3, r0
 80142ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80142ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f0:	b25a      	sxtb	r2, r3
 80142f2:	4b9e      	ldr	r3, [pc, #632]	; (801456c <LoRaMacInitialization+0x384>)
 80142f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80142f8:	2306      	movs	r3, #6
 80142fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80142fe:	4b9b      	ldr	r3, [pc, #620]	; (801456c <LoRaMacInitialization+0x384>)
 8014300:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014304:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014308:	4611      	mov	r1, r2
 801430a:	4618      	mov	r0, r3
 801430c:	f003 fc50 	bl	8017bb0 <RegionGetPhyParam>
 8014310:	4603      	mov	r3, r0
 8014312:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8014314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014316:	b25a      	sxtb	r2, r3
 8014318:	4b94      	ldr	r3, [pc, #592]	; (801456c <LoRaMacInitialization+0x384>)
 801431a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801431e:	2310      	movs	r3, #16
 8014320:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014324:	4b91      	ldr	r3, [pc, #580]	; (801456c <LoRaMacInitialization+0x384>)
 8014326:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801432a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801432e:	4611      	mov	r1, r2
 8014330:	4618      	mov	r0, r3
 8014332:	f003 fc3d 	bl	8017bb0 <RegionGetPhyParam>
 8014336:	4603      	mov	r3, r0
 8014338:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 801433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433c:	4a8b      	ldr	r2, [pc, #556]	; (801456c <LoRaMacInitialization+0x384>)
 801433e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8014342:	2311      	movs	r3, #17
 8014344:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014348:	4b88      	ldr	r3, [pc, #544]	; (801456c <LoRaMacInitialization+0x384>)
 801434a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801434e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014352:	4611      	mov	r1, r2
 8014354:	4618      	mov	r0, r3
 8014356:	f003 fc2b 	bl	8017bb0 <RegionGetPhyParam>
 801435a:	4603      	mov	r3, r0
 801435c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014360:	4a82      	ldr	r2, [pc, #520]	; (801456c <LoRaMacInitialization+0x384>)
 8014362:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8014366:	2312      	movs	r3, #18
 8014368:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801436c:	4b7f      	ldr	r3, [pc, #508]	; (801456c <LoRaMacInitialization+0x384>)
 801436e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014372:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014376:	4611      	mov	r1, r2
 8014378:	4618      	mov	r0, r3
 801437a:	f003 fc19 	bl	8017bb0 <RegionGetPhyParam>
 801437e:	4603      	mov	r3, r0
 8014380:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014384:	4a79      	ldr	r2, [pc, #484]	; (801456c <LoRaMacInitialization+0x384>)
 8014386:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801438a:	2313      	movs	r3, #19
 801438c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014390:	4b76      	ldr	r3, [pc, #472]	; (801456c <LoRaMacInitialization+0x384>)
 8014392:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014396:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801439a:	4611      	mov	r1, r2
 801439c:	4618      	mov	r0, r3
 801439e:	f003 fc07 	bl	8017bb0 <RegionGetPhyParam>
 80143a2:	4603      	mov	r3, r0
 80143a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80143a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a8:	4a70      	ldr	r2, [pc, #448]	; (801456c <LoRaMacInitialization+0x384>)
 80143aa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80143ae:	2314      	movs	r3, #20
 80143b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143b4:	4b6d      	ldr	r3, [pc, #436]	; (801456c <LoRaMacInitialization+0x384>)
 80143b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80143ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80143be:	4611      	mov	r1, r2
 80143c0:	4618      	mov	r0, r3
 80143c2:	f003 fbf5 	bl	8017bb0 <RegionGetPhyParam>
 80143c6:	4603      	mov	r3, r0
 80143c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80143ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143cc:	4a67      	ldr	r2, [pc, #412]	; (801456c <LoRaMacInitialization+0x384>)
 80143ce:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80143d2:	2316      	movs	r3, #22
 80143d4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143d8:	4b64      	ldr	r3, [pc, #400]	; (801456c <LoRaMacInitialization+0x384>)
 80143da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80143de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80143e2:	4611      	mov	r1, r2
 80143e4:	4618      	mov	r0, r3
 80143e6:	f003 fbe3 	bl	8017bb0 <RegionGetPhyParam>
 80143ea:	4603      	mov	r3, r0
 80143ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80143ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f0:	b2da      	uxtb	r2, r3
 80143f2:	4b5e      	ldr	r3, [pc, #376]	; (801456c <LoRaMacInitialization+0x384>)
 80143f4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80143f8:	2317      	movs	r3, #23
 80143fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143fe:	4b5b      	ldr	r3, [pc, #364]	; (801456c <LoRaMacInitialization+0x384>)
 8014400:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014404:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014408:	4611      	mov	r1, r2
 801440a:	4618      	mov	r0, r3
 801440c:	f003 fbd0 	bl	8017bb0 <RegionGetPhyParam>
 8014410:	4603      	mov	r3, r0
 8014412:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8014414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014416:	4a55      	ldr	r2, [pc, #340]	; (801456c <LoRaMacInitialization+0x384>)
 8014418:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441e:	4a53      	ldr	r2, [pc, #332]	; (801456c <LoRaMacInitialization+0x384>)
 8014420:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8014424:	2318      	movs	r3, #24
 8014426:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801442a:	4b50      	ldr	r3, [pc, #320]	; (801456c <LoRaMacInitialization+0x384>)
 801442c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014430:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014434:	4611      	mov	r1, r2
 8014436:	4618      	mov	r0, r3
 8014438:	f003 fbba 	bl	8017bb0 <RegionGetPhyParam>
 801443c:	4603      	mov	r3, r0
 801443e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8014440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014442:	b2da      	uxtb	r2, r3
 8014444:	4b49      	ldr	r3, [pc, #292]	; (801456c <LoRaMacInitialization+0x384>)
 8014446:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801444c:	b2da      	uxtb	r2, r3
 801444e:	4b47      	ldr	r3, [pc, #284]	; (801456c <LoRaMacInitialization+0x384>)
 8014450:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8014454:	231d      	movs	r3, #29
 8014456:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801445a:	4b44      	ldr	r3, [pc, #272]	; (801456c <LoRaMacInitialization+0x384>)
 801445c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014460:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014464:	4611      	mov	r1, r2
 8014466:	4618      	mov	r0, r3
 8014468:	f003 fba2 	bl	8017bb0 <RegionGetPhyParam>
 801446c:	4603      	mov	r3, r0
 801446e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014472:	b2da      	uxtb	r2, r3
 8014474:	4b3d      	ldr	r3, [pc, #244]	; (801456c <LoRaMacInitialization+0x384>)
 8014476:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801447a:	231e      	movs	r3, #30
 801447c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014480:	4b3a      	ldr	r3, [pc, #232]	; (801456c <LoRaMacInitialization+0x384>)
 8014482:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014486:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801448a:	4611      	mov	r1, r2
 801448c:	4618      	mov	r0, r3
 801448e:	f003 fb8f 	bl	8017bb0 <RegionGetPhyParam>
 8014492:	4603      	mov	r3, r0
 8014494:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8014496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014498:	b2da      	uxtb	r2, r3
 801449a:	4b34      	ldr	r3, [pc, #208]	; (801456c <LoRaMacInitialization+0x384>)
 801449c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80144a0:	231f      	movs	r3, #31
 80144a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144a6:	4b31      	ldr	r3, [pc, #196]	; (801456c <LoRaMacInitialization+0x384>)
 80144a8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80144ac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80144b0:	4611      	mov	r1, r2
 80144b2:	4618      	mov	r0, r3
 80144b4:	f003 fb7c 	bl	8017bb0 <RegionGetPhyParam>
 80144b8:	4603      	mov	r3, r0
 80144ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80144bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144be:	4a2b      	ldr	r2, [pc, #172]	; (801456c <LoRaMacInitialization+0x384>)
 80144c0:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80144c4:	2320      	movs	r3, #32
 80144c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144ca:	4b28      	ldr	r3, [pc, #160]	; (801456c <LoRaMacInitialization+0x384>)
 80144cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80144d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80144d4:	4611      	mov	r1, r2
 80144d6:	4618      	mov	r0, r3
 80144d8:	f003 fb6a 	bl	8017bb0 <RegionGetPhyParam>
 80144dc:	4603      	mov	r3, r0
 80144de:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80144e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e2:	4a22      	ldr	r2, [pc, #136]	; (801456c <LoRaMacInitialization+0x384>)
 80144e4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80144e8:	230b      	movs	r3, #11
 80144ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144ee:	4b1f      	ldr	r3, [pc, #124]	; (801456c <LoRaMacInitialization+0x384>)
 80144f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80144f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80144f8:	4611      	mov	r1, r2
 80144fa:	4618      	mov	r0, r3
 80144fc:	f003 fb58 	bl	8017bb0 <RegionGetPhyParam>
 8014500:	4603      	mov	r3, r0
 8014502:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8014504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014506:	b29a      	uxth	r2, r3
 8014508:	4b18      	ldr	r3, [pc, #96]	; (801456c <LoRaMacInitialization+0x384>)
 801450a:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801450e:	230c      	movs	r3, #12
 8014510:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014514:	4b15      	ldr	r3, [pc, #84]	; (801456c <LoRaMacInitialization+0x384>)
 8014516:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801451a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801451e:	4611      	mov	r1, r2
 8014520:	4618      	mov	r0, r3
 8014522:	f003 fb45 	bl	8017bb0 <RegionGetPhyParam>
 8014526:	4603      	mov	r3, r0
 8014528:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 801452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801452c:	b29a      	uxth	r2, r3
 801452e:	4b0f      	ldr	r3, [pc, #60]	; (801456c <LoRaMacInitialization+0x384>)
 8014530:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8014534:	4b0d      	ldr	r3, [pc, #52]	; (801456c <LoRaMacInitialization+0x384>)
 8014536:	2201      	movs	r2, #1
 8014538:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 801453c:	4b0b      	ldr	r3, [pc, #44]	; (801456c <LoRaMacInitialization+0x384>)
 801453e:	220a      	movs	r2, #10
 8014540:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8014544:	4b09      	ldr	r3, [pc, #36]	; (801456c <LoRaMacInitialization+0x384>)
 8014546:	2206      	movs	r2, #6
 8014548:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 801454c:	4b07      	ldr	r3, [pc, #28]	; (801456c <LoRaMacInitialization+0x384>)
 801454e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014552:	4a06      	ldr	r2, [pc, #24]	; (801456c <LoRaMacInitialization+0x384>)
 8014554:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8014556:	4b05      	ldr	r3, [pc, #20]	; (801456c <LoRaMacInitialization+0x384>)
 8014558:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 801455c:	4b03      	ldr	r3, [pc, #12]	; (801456c <LoRaMacInitialization+0x384>)
 801455e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8014562:	4b02      	ldr	r3, [pc, #8]	; (801456c <LoRaMacInitialization+0x384>)
 8014564:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014568:	e00c      	b.n	8014584 <LoRaMacInitialization+0x39c>
 801456a:	bf00      	nop
 801456c:	20000c54 	.word	0x20000c54
 8014570:	20000738 	.word	0x20000738
 8014574:	01000400 	.word	0x01000400
 8014578:	20000e78 	.word	0x20000e78
 801457c:	20000e8c 	.word	0x20000e8c
 8014580:	200017ec 	.word	0x200017ec
 8014584:	4a5f      	ldr	r2, [pc, #380]	; (8014704 <LoRaMacInitialization+0x51c>)
 8014586:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8014588:	4b5e      	ldr	r3, [pc, #376]	; (8014704 <LoRaMacInitialization+0x51c>)
 801458a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801458e:	4a5d      	ldr	r2, [pc, #372]	; (8014704 <LoRaMacInitialization+0x51c>)
 8014590:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8014592:	4b5c      	ldr	r3, [pc, #368]	; (8014704 <LoRaMacInitialization+0x51c>)
 8014594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014598:	4a5a      	ldr	r2, [pc, #360]	; (8014704 <LoRaMacInitialization+0x51c>)
 801459a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 801459c:	4b59      	ldr	r3, [pc, #356]	; (8014704 <LoRaMacInitialization+0x51c>)
 801459e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80145a2:	4a58      	ldr	r2, [pc, #352]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145a4:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80145a6:	4b57      	ldr	r3, [pc, #348]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80145ac:	4a55      	ldr	r2, [pc, #340]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145ae:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80145b0:	4b54      	ldr	r3, [pc, #336]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145b2:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 80145b6:	4b53      	ldr	r3, [pc, #332]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145b8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80145bc:	4b51      	ldr	r3, [pc, #324]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145be:	2201      	movs	r2, #1
 80145c0:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80145c4:	4a50      	ldr	r2, [pc, #320]	; (8014708 <LoRaMacInitialization+0x520>)
 80145c6:	693b      	ldr	r3, [r7, #16]
 80145c8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 80145cc:	2000      	movs	r0, #0
 80145ce:	f7ff f869 	bl	80136a4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80145d2:	4b4c      	ldr	r3, [pc, #304]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145d4:	2201      	movs	r2, #1
 80145d6:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 80145da:	4a4b      	ldr	r2, [pc, #300]	; (8014708 <LoRaMacInitialization+0x520>)
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80145e2:	4b49      	ldr	r3, [pc, #292]	; (8014708 <LoRaMacInitialization+0x520>)
 80145e4:	2200      	movs	r2, #0
 80145e6:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 80145ea:	4b47      	ldr	r3, [pc, #284]	; (8014708 <LoRaMacInitialization+0x520>)
 80145ec:	2201      	movs	r2, #1
 80145ee:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80145f2:	4b44      	ldr	r3, [pc, #272]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145f4:	2200      	movs	r2, #0
 80145f6:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80145f8:	4b42      	ldr	r3, [pc, #264]	; (8014704 <LoRaMacInitialization+0x51c>)
 80145fa:	2200      	movs	r2, #0
 80145fc:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80145fe:	2300      	movs	r3, #0
 8014600:	9300      	str	r3, [sp, #0]
 8014602:	4b42      	ldr	r3, [pc, #264]	; (801470c <LoRaMacInitialization+0x524>)
 8014604:	2200      	movs	r2, #0
 8014606:	f04f 31ff 	mov.w	r1, #4294967295
 801460a:	4841      	ldr	r0, [pc, #260]	; (8014710 <LoRaMacInitialization+0x528>)
 801460c:	f00b f890 	bl	801f730 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8014610:	2300      	movs	r3, #0
 8014612:	9300      	str	r3, [sp, #0]
 8014614:	4b3f      	ldr	r3, [pc, #252]	; (8014714 <LoRaMacInitialization+0x52c>)
 8014616:	2200      	movs	r2, #0
 8014618:	f04f 31ff 	mov.w	r1, #4294967295
 801461c:	483e      	ldr	r0, [pc, #248]	; (8014718 <LoRaMacInitialization+0x530>)
 801461e:	f00b f887 	bl	801f730 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8014622:	2300      	movs	r3, #0
 8014624:	9300      	str	r3, [sp, #0]
 8014626:	4b3d      	ldr	r3, [pc, #244]	; (801471c <LoRaMacInitialization+0x534>)
 8014628:	2200      	movs	r2, #0
 801462a:	f04f 31ff 	mov.w	r1, #4294967295
 801462e:	483c      	ldr	r0, [pc, #240]	; (8014720 <LoRaMacInitialization+0x538>)
 8014630:	f00b f87e 	bl	801f730 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8014634:	2300      	movs	r3, #0
 8014636:	9300      	str	r3, [sp, #0]
 8014638:	4b3a      	ldr	r3, [pc, #232]	; (8014724 <LoRaMacInitialization+0x53c>)
 801463a:	2200      	movs	r2, #0
 801463c:	f04f 31ff 	mov.w	r1, #4294967295
 8014640:	4839      	ldr	r0, [pc, #228]	; (8014728 <LoRaMacInitialization+0x540>)
 8014642:	f00b f875 	bl	801f730 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8014646:	4c2f      	ldr	r4, [pc, #188]	; (8014704 <LoRaMacInitialization+0x51c>)
 8014648:	463b      	mov	r3, r7
 801464a:	4618      	mov	r0, r3
 801464c:	f00a fce8 	bl	801f020 <SysTimeGetMcuTime>
 8014650:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8014654:	463a      	mov	r2, r7
 8014656:	e892 0003 	ldmia.w	r2, {r0, r1}
 801465a:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 801465e:	4b33      	ldr	r3, [pc, #204]	; (801472c <LoRaMacInitialization+0x544>)
 8014660:	2200      	movs	r2, #0
 8014662:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8014664:	4b28      	ldr	r3, [pc, #160]	; (8014708 <LoRaMacInitialization+0x520>)
 8014666:	4a32      	ldr	r2, [pc, #200]	; (8014730 <LoRaMacInitialization+0x548>)
 8014668:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801466c:	4b26      	ldr	r3, [pc, #152]	; (8014708 <LoRaMacInitialization+0x520>)
 801466e:	4a31      	ldr	r2, [pc, #196]	; (8014734 <LoRaMacInitialization+0x54c>)
 8014670:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8014674:	4b24      	ldr	r3, [pc, #144]	; (8014708 <LoRaMacInitialization+0x520>)
 8014676:	4a30      	ldr	r2, [pc, #192]	; (8014738 <LoRaMacInitialization+0x550>)
 8014678:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801467c:	4b22      	ldr	r3, [pc, #136]	; (8014708 <LoRaMacInitialization+0x520>)
 801467e:	4a2f      	ldr	r2, [pc, #188]	; (801473c <LoRaMacInitialization+0x554>)
 8014680:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8014684:	4b20      	ldr	r3, [pc, #128]	; (8014708 <LoRaMacInitialization+0x520>)
 8014686:	4a2e      	ldr	r2, [pc, #184]	; (8014740 <LoRaMacInitialization+0x558>)
 8014688:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801468c:	4b2d      	ldr	r3, [pc, #180]	; (8014744 <LoRaMacInitialization+0x55c>)
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	482d      	ldr	r0, [pc, #180]	; (8014748 <LoRaMacInitialization+0x560>)
 8014692:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8014694:	482d      	ldr	r0, [pc, #180]	; (801474c <LoRaMacInitialization+0x564>)
 8014696:	f7fa f9f5 	bl	800ea84 <SecureElementInit>
 801469a:	4603      	mov	r3, r0
 801469c:	2b00      	cmp	r3, #0
 801469e:	d001      	beq.n	80146a4 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80146a0:	2311      	movs	r3, #17
 80146a2:	e02b      	b.n	80146fc <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80146a4:	4817      	ldr	r0, [pc, #92]	; (8014704 <LoRaMacInitialization+0x51c>)
 80146a6:	f002 fbbf 	bl	8016e28 <LoRaMacCryptoInit>
 80146aa:	4603      	mov	r3, r0
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d001      	beq.n	80146b4 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80146b0:	2311      	movs	r3, #17
 80146b2:	e023      	b.n	80146fc <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80146b4:	f001 fcba 	bl	801602c <LoRaMacCommandsInit>
 80146b8:	4603      	mov	r3, r0
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d001      	beq.n	80146c2 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80146be:	2313      	movs	r3, #19
 80146c0:	e01c      	b.n	80146fc <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80146c2:	4823      	ldr	r0, [pc, #140]	; (8014750 <LoRaMacInitialization+0x568>)
 80146c4:	f002 fc50 	bl	8016f68 <LoRaMacCryptoSetMulticastReference>
 80146c8:	4603      	mov	r3, r0
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d001      	beq.n	80146d2 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80146ce:	2311      	movs	r3, #17
 80146d0:	e014      	b.n	80146fc <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80146d2:	4b1c      	ldr	r3, [pc, #112]	; (8014744 <LoRaMacInitialization+0x55c>)
 80146d4:	695b      	ldr	r3, [r3, #20]
 80146d6:	4798      	blx	r3
 80146d8:	4603      	mov	r3, r0
 80146da:	4618      	mov	r0, r3
 80146dc:	f007 f848 	bl	801b770 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80146e0:	4b18      	ldr	r3, [pc, #96]	; (8014744 <LoRaMacInitialization+0x55c>)
 80146e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146e4:	4a07      	ldr	r2, [pc, #28]	; (8014704 <LoRaMacInitialization+0x51c>)
 80146e6:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80146ea:	4610      	mov	r0, r2
 80146ec:	4798      	blx	r3
    Radio.Sleep( );
 80146ee:	4b15      	ldr	r3, [pc, #84]	; (8014744 <LoRaMacInitialization+0x55c>)
 80146f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146f2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80146f4:	2001      	movs	r0, #1
 80146f6:	f7fd fa7d 	bl	8011bf4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80146fa:	2300      	movs	r3, #0
}
 80146fc:	4618      	mov	r0, r3
 80146fe:	373c      	adds	r7, #60	; 0x3c
 8014700:	46bd      	mov	sp, r7
 8014702:	bd90      	pop	{r4, r7, pc}
 8014704:	20000c54 	.word	0x20000c54
 8014708:	20000738 	.word	0x20000738
 801470c:	08012181 	.word	0x08012181
 8014710:	20000aa0 	.word	0x20000aa0
 8014714:	08012211 	.word	0x08012211
 8014718:	20000ab8 	.word	0x20000ab8
 801471c:	08012289 	.word	0x08012289
 8014720:	20000ad0 	.word	0x20000ad0
 8014724:	08012309 	.word	0x08012309
 8014728:	20000b38 	.word	0x20000b38
 801472c:	2000187c 	.word	0x2000187c
 8014730:	08010c31 	.word	0x08010c31
 8014734:	08010c8d 	.word	0x08010c8d
 8014738:	08010d2d 	.word	0x08010d2d
 801473c:	08010d01 	.word	0x08010d01
 8014740:	08010d49 	.word	0x08010d49
 8014744:	08021fb4 	.word	0x08021fb4
 8014748:	20000a84 	.word	0x20000a84
 801474c:	20000da0 	.word	0x20000da0
 8014750:	20000d3c 	.word	0x20000d3c

08014754 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8014754:	b580      	push	{r7, lr}
 8014756:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014758:	4b04      	ldr	r3, [pc, #16]	; (801476c <LoRaMacStart+0x18>)
 801475a:	2200      	movs	r2, #0
 801475c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8014760:	f7fc fb08 	bl	8010d74 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8014764:	2300      	movs	r3, #0
}
 8014766:	4618      	mov	r0, r3
 8014768:	bd80      	pop	{r7, pc}
 801476a:	bf00      	nop
 801476c:	20000738 	.word	0x20000738

08014770 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014770:	b580      	push	{r7, lr}
 8014772:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014774:	f7fd fa06 	bl	8011b84 <LoRaMacIsBusy>
 8014778:	4603      	mov	r3, r0
 801477a:	f083 0301 	eor.w	r3, r3, #1
 801477e:	b2db      	uxtb	r3, r3
 8014780:	2b00      	cmp	r3, #0
 8014782:	d00d      	beq.n	80147a0 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014784:	4b0b      	ldr	r3, [pc, #44]	; (80147b4 <LoRaMacStop+0x44>)
 8014786:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801478a:	2b02      	cmp	r3, #2
 801478c:	d102      	bne.n	8014794 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801478e:	4b0a      	ldr	r3, [pc, #40]	; (80147b8 <LoRaMacStop+0x48>)
 8014790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014792:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8014794:	4b09      	ldr	r3, [pc, #36]	; (80147bc <LoRaMacStop+0x4c>)
 8014796:	2201      	movs	r2, #1
 8014798:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 801479c:	2300      	movs	r3, #0
 801479e:	e007      	b.n	80147b0 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80147a0:	4b06      	ldr	r3, [pc, #24]	; (80147bc <LoRaMacStop+0x4c>)
 80147a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80147a6:	2b01      	cmp	r3, #1
 80147a8:	d101      	bne.n	80147ae <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80147aa:	2300      	movs	r3, #0
 80147ac:	e000      	b.n	80147b0 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80147ae:	2301      	movs	r3, #1
}
 80147b0:	4618      	mov	r0, r3
 80147b2:	bd80      	pop	{r7, pc}
 80147b4:	20000c54 	.word	0x20000c54
 80147b8:	08021fb4 	.word	0x08021fb4
 80147bc:	20000738 	.word	0x20000738

080147c0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80147c4:	4812      	ldr	r0, [pc, #72]	; (8014810 <LoRaMacHalt+0x50>)
 80147c6:	f00b f857 	bl	801f878 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80147ca:	4812      	ldr	r0, [pc, #72]	; (8014814 <LoRaMacHalt+0x54>)
 80147cc:	f00b f854 	bl	801f878 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80147d0:	4811      	ldr	r0, [pc, #68]	; (8014818 <LoRaMacHalt+0x58>)
 80147d2:	f00b f851 	bl	801f878 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80147d6:	4811      	ldr	r0, [pc, #68]	; (801481c <LoRaMacHalt+0x5c>)
 80147d8:	f00b f84e 	bl	801f878 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80147dc:	f001 fa8c 	bl	8015cf8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80147e0:	4b0f      	ldr	r3, [pc, #60]	; (8014820 <LoRaMacHalt+0x60>)
 80147e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147e4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80147e6:	4b0f      	ldr	r3, [pc, #60]	; (8014824 <LoRaMacHalt+0x64>)
 80147e8:	2200      	movs	r2, #0
 80147ea:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80147ee:	480e      	ldr	r0, [pc, #56]	; (8014828 <LoRaMacHalt+0x68>)
 80147f0:	f7fd fba2 	bl	8011f38 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80147f4:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80147f8:	490b      	ldr	r1, [pc, #44]	; (8014828 <LoRaMacHalt+0x68>)
 80147fa:	480c      	ldr	r0, [pc, #48]	; (801482c <LoRaMacHalt+0x6c>)
 80147fc:	f006 ffdd 	bl	801b7ba <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8014800:	4b08      	ldr	r3, [pc, #32]	; (8014824 <LoRaMacHalt+0x64>)
 8014802:	2201      	movs	r2, #1
 8014804:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014808:	2300      	movs	r3, #0
}
 801480a:	4618      	mov	r0, r3
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	20000aa0 	.word	0x20000aa0
 8014814:	20000ab8 	.word	0x20000ab8
 8014818:	20000ad0 	.word	0x20000ad0
 801481c:	20000b38 	.word	0x20000b38
 8014820:	08021fb4 	.word	0x08021fb4
 8014824:	20000738 	.word	0x20000738
 8014828:	20000c54 	.word	0x20000c54
 801482c:	20001220 	.word	0x20001220

08014830 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014830:	b590      	push	{r4, r7, lr}
 8014832:	b08d      	sub	sp, #52	; 0x34
 8014834:	af02      	add	r7, sp, #8
 8014836:	4603      	mov	r3, r0
 8014838:	6039      	str	r1, [r7, #0]
 801483a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801483c:	4b42      	ldr	r3, [pc, #264]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 801483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014840:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014842:	4b41      	ldr	r3, [pc, #260]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 8014844:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8014848:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801484a:	4b3f      	ldr	r3, [pc, #252]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 801484c:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8014850:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8014852:	4b3e      	ldr	r3, [pc, #248]	; (801494c <LoRaMacQueryTxPossible+0x11c>)
 8014854:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014858:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801485a:	2300      	movs	r3, #0
 801485c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d101      	bne.n	8014868 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014864:	2303      	movs	r3, #3
 8014866:	e06b      	b.n	8014940 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014868:	2300      	movs	r3, #0
 801486a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801486c:	4b36      	ldr	r3, [pc, #216]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 801486e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014872:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014874:	4b34      	ldr	r3, [pc, #208]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 8014876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014878:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801487a:	4b33      	ldr	r3, [pc, #204]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 801487c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014880:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014882:	4b31      	ldr	r3, [pc, #196]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 8014884:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8014888:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801488a:	4b2f      	ldr	r3, [pc, #188]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 801488c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014890:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014894:	4b2c      	ldr	r3, [pc, #176]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 8014896:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801489a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 801489e:	4b2b      	ldr	r3, [pc, #172]	; (801494c <LoRaMacQueryTxPossible+0x11c>)
 80148a0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80148a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80148a8:	4b27      	ldr	r3, [pc, #156]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 80148aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80148ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80148b2:	4b25      	ldr	r3, [pc, #148]	; (8014948 <LoRaMacQueryTxPossible+0x118>)
 80148b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80148bc:	f107 040d 	add.w	r4, r7, #13
 80148c0:	f107 020e 	add.w	r2, r7, #14
 80148c4:	f107 010f 	add.w	r1, r7, #15
 80148c8:	f107 0014 	add.w	r0, r7, #20
 80148cc:	f107 0310 	add.w	r3, r7, #16
 80148d0:	9300      	str	r3, [sp, #0]
 80148d2:	4623      	mov	r3, r4
 80148d4:	f001 f8da 	bl	8015a8c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80148d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fd fe59 	bl	8012594 <GetMaxAppPayloadWithoutFOptsLength>
 80148e2:	4603      	mov	r3, r0
 80148e4:	461a      	mov	r2, r3
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80148ea:	f107 0308 	add.w	r3, r7, #8
 80148ee:	4618      	mov	r0, r3
 80148f0:	f001 fca2 	bl	8016238 <LoRaMacCommandsGetSizeSerializedCmds>
 80148f4:	4603      	mov	r3, r0
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d001      	beq.n	80148fe <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80148fa:	2313      	movs	r3, #19
 80148fc:	e020      	b.n	8014940 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	2b0f      	cmp	r3, #15
 8014902:	d819      	bhi.n	8014938 <LoRaMacQueryTxPossible+0x108>
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	785b      	ldrb	r3, [r3, #1]
 8014908:	461a      	mov	r2, r3
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	429a      	cmp	r2, r3
 801490e:	d313      	bcc.n	8014938 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	785a      	ldrb	r2, [r3, #1]
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	b2db      	uxtb	r3, r3
 8014918:	1ad3      	subs	r3, r2, r3
 801491a:	b2da      	uxtb	r2, r3
 801491c:	683b      	ldr	r3, [r7, #0]
 801491e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8014920:	683b      	ldr	r3, [r7, #0]
 8014922:	785b      	ldrb	r3, [r3, #1]
 8014924:	4619      	mov	r1, r3
 8014926:	79fa      	ldrb	r2, [r7, #7]
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	4413      	add	r3, r2
 801492c:	4299      	cmp	r1, r3
 801492e:	d301      	bcc.n	8014934 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8014930:	2300      	movs	r3, #0
 8014932:	e005      	b.n	8014940 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014934:	2308      	movs	r3, #8
 8014936:	e003      	b.n	8014940 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014938:	683b      	ldr	r3, [r7, #0]
 801493a:	2200      	movs	r2, #0
 801493c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801493e:	2308      	movs	r3, #8
    }
}
 8014940:	4618      	mov	r0, r3
 8014942:	372c      	adds	r7, #44	; 0x2c
 8014944:	46bd      	mov	sp, r7
 8014946:	bd90      	pop	{r4, r7, pc}
 8014948:	20000c54 	.word	0x20000c54
 801494c:	20000738 	.word	0x20000738

08014950 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014950:	b590      	push	{r4, r7, lr}
 8014952:	b087      	sub	sp, #28
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014958:	2300      	movs	r3, #0
 801495a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d101      	bne.n	8014966 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014962:	2303      	movs	r3, #3
 8014964:	e1c4      	b.n	8014cf0 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	781b      	ldrb	r3, [r3, #0]
 801496a:	2b41      	cmp	r3, #65	; 0x41
 801496c:	f200 81b9 	bhi.w	8014ce2 <LoRaMacMibGetRequestConfirm+0x392>
 8014970:	a201      	add	r2, pc, #4	; (adr r2, 8014978 <LoRaMacMibGetRequestConfirm+0x28>)
 8014972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014976:	bf00      	nop
 8014978:	08014a81 	.word	0x08014a81
 801497c:	08014a8d 	.word	0x08014a8d
 8014980:	08014a99 	.word	0x08014a99
 8014984:	08014aa5 	.word	0x08014aa5
 8014988:	08014ab1 	.word	0x08014ab1
 801498c:	08014abd 	.word	0x08014abd
 8014990:	08014ac9 	.word	0x08014ac9
 8014994:	08014ce3 	.word	0x08014ce3
 8014998:	08014ce3 	.word	0x08014ce3
 801499c:	08014ce3 	.word	0x08014ce3
 80149a0:	08014ce3 	.word	0x08014ce3
 80149a4:	08014ce3 	.word	0x08014ce3
 80149a8:	08014ce3 	.word	0x08014ce3
 80149ac:	08014ce3 	.word	0x08014ce3
 80149b0:	08014ce3 	.word	0x08014ce3
 80149b4:	08014add 	.word	0x08014add
 80149b8:	08014ae9 	.word	0x08014ae9
 80149bc:	08014af5 	.word	0x08014af5
 80149c0:	08014b17 	.word	0x08014b17
 80149c4:	08014b29 	.word	0x08014b29
 80149c8:	08014b3b 	.word	0x08014b3b
 80149cc:	08014b4d 	.word	0x08014b4d
 80149d0:	08014b81 	.word	0x08014b81
 80149d4:	08014b5f 	.word	0x08014b5f
 80149d8:	08014ba3 	.word	0x08014ba3
 80149dc:	08014baf 	.word	0x08014baf
 80149e0:	08014bb9 	.word	0x08014bb9
 80149e4:	08014bc3 	.word	0x08014bc3
 80149e8:	08014bcd 	.word	0x08014bcd
 80149ec:	08014bd7 	.word	0x08014bd7
 80149f0:	08014be1 	.word	0x08014be1
 80149f4:	08014c0d 	.word	0x08014c0d
 80149f8:	08014c19 	.word	0x08014c19
 80149fc:	08014c31 	.word	0x08014c31
 8014a00:	08014c25 	.word	0x08014c25
 8014a04:	08014c3d 	.word	0x08014c3d
 8014a08:	08014c47 	.word	0x08014c47
 8014a0c:	08014c53 	.word	0x08014c53
 8014a10:	08014c6f 	.word	0x08014c6f
 8014a14:	08014c5f 	.word	0x08014c5f
 8014a18:	08014c67 	.word	0x08014c67
 8014a1c:	08014ce3 	.word	0x08014ce3
 8014a20:	08014c7b 	.word	0x08014c7b
 8014a24:	08014ce3 	.word	0x08014ce3
 8014a28:	08014ce3 	.word	0x08014ce3
 8014a2c:	08014ce3 	.word	0x08014ce3
 8014a30:	08014ce3 	.word	0x08014ce3
 8014a34:	08014ce3 	.word	0x08014ce3
 8014a38:	08014ce3 	.word	0x08014ce3
 8014a3c:	08014ce3 	.word	0x08014ce3
 8014a40:	08014ce3 	.word	0x08014ce3
 8014a44:	08014ce3 	.word	0x08014ce3
 8014a48:	08014ce3 	.word	0x08014ce3
 8014a4c:	08014ce3 	.word	0x08014ce3
 8014a50:	08014ce3 	.word	0x08014ce3
 8014a54:	08014ce3 	.word	0x08014ce3
 8014a58:	08014ce3 	.word	0x08014ce3
 8014a5c:	08014ce3 	.word	0x08014ce3
 8014a60:	08014c8f 	.word	0x08014c8f
 8014a64:	08014c9b 	.word	0x08014c9b
 8014a68:	08014ca7 	.word	0x08014ca7
 8014a6c:	08014cb3 	.word	0x08014cb3
 8014a70:	08014cbf 	.word	0x08014cbf
 8014a74:	08014ccb 	.word	0x08014ccb
 8014a78:	08014cd7 	.word	0x08014cd7
 8014a7c:	08014cdd 	.word	0x08014cdd
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014a80:	4b9d      	ldr	r3, [pc, #628]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014a82:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	711a      	strb	r2, [r3, #4]
            break;
 8014a8a:	e130      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014a8c:	4b9a      	ldr	r3, [pc, #616]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014a8e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	711a      	strb	r2, [r3, #4]
            break;
 8014a96:	e12a      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	f7fa fab1 	bl	800f004 <SecureElementGetDevEui>
            break;
 8014aa2:	e124      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	685b      	ldr	r3, [r3, #4]
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	f7fa fadb 	bl	800f064 <SecureElementGetJoinEui>
            break;
 8014aae:	e11e      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014ab0:	4b91      	ldr	r3, [pc, #580]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ab2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	711a      	strb	r2, [r3, #4]
            break;
 8014aba:	e118      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014abc:	4b8e      	ldr	r3, [pc, #568]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014abe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	605a      	str	r2, [r3, #4]
            break;
 8014ac6:	e112      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8014ac8:	4b8b      	ldr	r3, [pc, #556]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014aca:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	3304      	adds	r3, #4
 8014ad2:	4619      	mov	r1, r3
 8014ad4:	4610      	mov	r0, r2
 8014ad6:	f7fa faf7 	bl	800f0c8 <SecureElementGetDevAddr>
            break;
 8014ada:	e108      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014adc:	4b86      	ldr	r3, [pc, #536]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ade:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	711a      	strb	r2, [r3, #4]
            break;
 8014ae6:	e102      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014ae8:	4b83      	ldr	r3, [pc, #524]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014aea:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	711a      	strb	r2, [r3, #4]
            break;
 8014af2:	e0fc      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014af4:	231c      	movs	r3, #28
 8014af6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014af8:	4b7f      	ldr	r3, [pc, #508]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014afa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014afe:	f107 0210 	add.w	r2, r7, #16
 8014b02:	4611      	mov	r1, r2
 8014b04:	4618      	mov	r0, r3
 8014b06:	f003 f853 	bl	8017bb0 <RegionGetPhyParam>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014b0e:	68fa      	ldr	r2, [r7, #12]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	605a      	str	r2, [r3, #4]
            break;
 8014b14:	e0eb      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	4a77      	ldr	r2, [pc, #476]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b1a:	3304      	adds	r3, #4
 8014b1c:	326c      	adds	r2, #108	; 0x6c
 8014b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b22:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014b26:	e0e2      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4a73      	ldr	r2, [pc, #460]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b2c:	3304      	adds	r3, #4
 8014b2e:	32b4      	adds	r2, #180	; 0xb4
 8014b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b34:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014b38:	e0d9      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	4a6e      	ldr	r2, [pc, #440]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b3e:	3304      	adds	r3, #4
 8014b40:	3274      	adds	r2, #116	; 0x74
 8014b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b46:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014b4a:	e0d0      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	4a6a      	ldr	r2, [pc, #424]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b50:	3304      	adds	r3, #4
 8014b52:	32bc      	adds	r2, #188	; 0xbc
 8014b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b58:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014b5c:	e0c7      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8014b5e:	231a      	movs	r3, #26
 8014b60:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b62:	4b65      	ldr	r3, [pc, #404]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b68:	f107 0210 	add.w	r2, r7, #16
 8014b6c:	4611      	mov	r1, r2
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f003 f81e 	bl	8017bb0 <RegionGetPhyParam>
 8014b74:	4603      	mov	r3, r0
 8014b76:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014b78:	68fa      	ldr	r2, [r7, #12]
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	605a      	str	r2, [r3, #4]
            break;
 8014b7e:	e0b6      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014b80:	2319      	movs	r3, #25
 8014b82:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014b84:	4b5c      	ldr	r3, [pc, #368]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014b86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b8a:	f107 0210 	add.w	r2, r7, #16
 8014b8e:	4611      	mov	r1, r2
 8014b90:	4618      	mov	r0, r3
 8014b92:	f003 f80d 	bl	8017bb0 <RegionGetPhyParam>
 8014b96:	4603      	mov	r3, r0
 8014b98:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014b9a:	68fa      	ldr	r2, [r7, #12]
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	605a      	str	r2, [r3, #4]
            break;
 8014ba0:	e0a5      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014ba2:	4b55      	ldr	r3, [pc, #340]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ba4:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	711a      	strb	r2, [r3, #4]
            break;
 8014bac:	e09f      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014bae:	4b52      	ldr	r3, [pc, #328]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	605a      	str	r2, [r3, #4]
            break;
 8014bb6:	e09a      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014bb8:	4b4f      	ldr	r3, [pc, #316]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	605a      	str	r2, [r3, #4]
            break;
 8014bc0:	e095      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014bc2:	4b4d      	ldr	r3, [pc, #308]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	605a      	str	r2, [r3, #4]
            break;
 8014bca:	e090      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014bcc:	4b4a      	ldr	r3, [pc, #296]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	605a      	str	r2, [r3, #4]
            break;
 8014bd4:	e08b      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8014bd6:	4b48      	ldr	r3, [pc, #288]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	605a      	str	r2, [r3, #4]
            break;
 8014bde:	e086      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8014be0:	2302      	movs	r3, #2
 8014be2:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014be4:	4b44      	ldr	r3, [pc, #272]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014be6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014bea:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014bec:	4b42      	ldr	r3, [pc, #264]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014bee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014bf2:	f107 0210 	add.w	r2, r7, #16
 8014bf6:	4611      	mov	r1, r2
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f002 ffd9 	bl	8017bb0 <RegionGetPhyParam>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	b25a      	sxtb	r2, r3
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	711a      	strb	r2, [r3, #4]
            break;
 8014c0a:	e070      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014c0c:	4b3a      	ldr	r3, [pc, #232]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c0e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	711a      	strb	r2, [r3, #4]
            break;
 8014c16:	e06a      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014c18:	4b37      	ldr	r3, [pc, #220]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c1a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	711a      	strb	r2, [r3, #4]
            break;
 8014c22:	e064      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014c24:	4b34      	ldr	r3, [pc, #208]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c26:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	711a      	strb	r2, [r3, #4]
            break;
 8014c2e:	e05e      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014c30:	4b31      	ldr	r3, [pc, #196]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c32:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	711a      	strb	r2, [r3, #4]
            break;
 8014c3a:	e058      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014c3c:	4b2e      	ldr	r3, [pc, #184]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	605a      	str	r2, [r3, #4]
            break;
 8014c44:	e053      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8014c46:	4b2c      	ldr	r3, [pc, #176]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c48:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	711a      	strb	r2, [r3, #4]
            break;
 8014c50:	e04d      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014c52:	4b29      	ldr	r3, [pc, #164]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c54:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	605a      	str	r2, [r3, #4]
            break;
 8014c5c:	e047      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	4a25      	ldr	r2, [pc, #148]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c62:	605a      	str	r2, [r3, #4]
            break;
 8014c64:	e043      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	4a24      	ldr	r2, [pc, #144]	; (8014cfc <LoRaMacMibGetRequestConfirm+0x3ac>)
 8014c6a:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014c6c:	e03f      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014c6e:	4b22      	ldr	r3, [pc, #136]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c70:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	605a      	str	r2, [r3, #4]
            break;
 8014c78:	e039      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	4a1e      	ldr	r2, [pc, #120]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c7e:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8014c82:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014c84:	687c      	ldr	r4, [r7, #4]
 8014c86:	f003 f9a5 	bl	8017fd4 <RegionGetVersion>
 8014c8a:	60a0      	str	r0, [r4, #8]
            break;
 8014c8c:	e02f      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8014c8e:	4b1a      	ldr	r3, [pc, #104]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c90:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	605a      	str	r2, [r3, #4]
            break;
 8014c98:	e029      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8014c9a:	4b17      	ldr	r3, [pc, #92]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014c9c:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	711a      	strb	r2, [r3, #4]
            break;
 8014ca4:	e023      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014ca6:	4b14      	ldr	r3, [pc, #80]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ca8:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	809a      	strh	r2, [r3, #4]
            break;
 8014cb0:	e01d      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014cb2:	4b11      	ldr	r3, [pc, #68]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014cb4:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	809a      	strh	r2, [r3, #4]
            break;
 8014cbc:	e017      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8014cbe:	4b0e      	ldr	r3, [pc, #56]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014cc0:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	809a      	strh	r2, [r3, #4]
            break;
 8014cc8:	e011      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8014cca:	4b0b      	ldr	r3, [pc, #44]	; (8014cf8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014ccc:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	809a      	strh	r2, [r3, #4]
            break;
 8014cd4:	e00b      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014cd6:	2318      	movs	r3, #24
 8014cd8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014cda:	e008      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014cdc:	2318      	movs	r3, #24
 8014cde:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014ce0:	e005      	b.n	8014cee <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f001 f81f 	bl	8015d26 <LoRaMacClassBMibGetRequestConfirm>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	75fb      	strb	r3, [r7, #23]
            break;
 8014cec:	bf00      	nop
        }
    }
    return status;
 8014cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	371c      	adds	r7, #28
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd90      	pop	{r4, r7, pc}
 8014cf8:	20000c54 	.word	0x20000c54
 8014cfc:	20001220 	.word	0x20001220

08014d00 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b086      	sub	sp, #24
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014d08:	2300      	movs	r3, #0
 8014d0a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d101      	bne.n	8014d16 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014d12:	2303      	movs	r3, #3
 8014d14:	e396      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014d16:	4bbd      	ldr	r3, [pc, #756]	; (801500c <LoRaMacMibSetRequestConfirm+0x30c>)
 8014d18:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014d1c:	f003 0302 	and.w	r3, r3, #2
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d001      	beq.n	8014d28 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014d24:	2301      	movs	r3, #1
 8014d26:	e38d      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	781b      	ldrb	r3, [r3, #0]
 8014d2c:	2b41      	cmp	r3, #65	; 0x41
 8014d2e:	f200 835d 	bhi.w	80153ec <LoRaMacMibSetRequestConfirm+0x6ec>
 8014d32:	a201      	add	r2, pc, #4	; (adr r2, 8014d38 <LoRaMacMibSetRequestConfirm+0x38>)
 8014d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d38:	08014e41 	.word	0x08014e41
 8014d3c:	08014e51 	.word	0x08014e51
 8014d40:	08014e6b 	.word	0x08014e6b
 8014d44:	08014e83 	.word	0x08014e83
 8014d48:	08014e9b 	.word	0x08014e9b
 8014d4c:	08014ea7 	.word	0x08014ea7
 8014d50:	08014eb3 	.word	0x08014eb3
 8014d54:	08014edd 	.word	0x08014edd
 8014d58:	08014f03 	.word	0x08014f03
 8014d5c:	08014f29 	.word	0x08014f29
 8014d60:	08014f4f 	.word	0x08014f4f
 8014d64:	08014f75 	.word	0x08014f75
 8014d68:	08014f9b 	.word	0x08014f9b
 8014d6c:	08014fc1 	.word	0x08014fc1
 8014d70:	08014fe7 	.word	0x08014fe7
 8014d74:	08015015 	.word	0x08015015
 8014d78:	08015035 	.word	0x08015035
 8014d7c:	080153ed 	.word	0x080153ed
 8014d80:	08015041 	.word	0x08015041
 8014d84:	080150b1 	.word	0x080150b1
 8014d88:	080150f1 	.word	0x080150f1
 8014d8c:	08015153 	.word	0x08015153
 8014d90:	080151c3 	.word	0x080151c3
 8014d94:	08015193 	.word	0x08015193
 8014d98:	080151f3 	.word	0x080151f3
 8014d9c:	08015215 	.word	0x08015215
 8014da0:	0801521f 	.word	0x0801521f
 8014da4:	08015229 	.word	0x08015229
 8014da8:	08015233 	.word	0x08015233
 8014dac:	0801523d 	.word	0x0801523d
 8014db0:	080153ed 	.word	0x080153ed
 8014db4:	08015247 	.word	0x08015247
 8014db8:	08015279 	.word	0x08015279
 8014dbc:	080152ed 	.word	0x080152ed
 8014dc0:	080152b3 	.word	0x080152b3
 8014dc4:	0801531f 	.word	0x0801531f
 8014dc8:	08015335 	.word	0x08015335
 8014dcc:	0801534d 	.word	0x0801534d
 8014dd0:	08015359 	.word	0x08015359
 8014dd4:	08015365 	.word	0x08015365
 8014dd8:	080153ed 	.word	0x080153ed
 8014ddc:	0801536f 	.word	0x0801536f
 8014de0:	080153ed 	.word	0x080153ed
 8014de4:	080153ed 	.word	0x080153ed
 8014de8:	080153ed 	.word	0x080153ed
 8014dec:	080153ed 	.word	0x080153ed
 8014df0:	080153ed 	.word	0x080153ed
 8014df4:	080153ed 	.word	0x080153ed
 8014df8:	080153ed 	.word	0x080153ed
 8014dfc:	080153ed 	.word	0x080153ed
 8014e00:	080153ed 	.word	0x080153ed
 8014e04:	080153ed 	.word	0x080153ed
 8014e08:	080153ed 	.word	0x080153ed
 8014e0c:	080153ed 	.word	0x080153ed
 8014e10:	080153ed 	.word	0x080153ed
 8014e14:	080153ed 	.word	0x080153ed
 8014e18:	080153ed 	.word	0x080153ed
 8014e1c:	080153ed 	.word	0x080153ed
 8014e20:	08015399 	.word	0x08015399
 8014e24:	080153a5 	.word	0x080153a5
 8014e28:	080153b1 	.word	0x080153b1
 8014e2c:	080153bd 	.word	0x080153bd
 8014e30:	080153c9 	.word	0x080153c9
 8014e34:	080153d5 	.word	0x080153d5
 8014e38:	080153e1 	.word	0x080153e1
 8014e3c:	080153e7 	.word	0x080153e7
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	791b      	ldrb	r3, [r3, #4]
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7fd fabb 	bl	80123c0 <SwitchClass>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	75fb      	strb	r3, [r7, #23]
            break;
 8014e4e:	e2ee      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	791b      	ldrb	r3, [r3, #4]
 8014e54:	2b02      	cmp	r3, #2
 8014e56:	d005      	beq.n	8014e64 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	791a      	ldrb	r2, [r3, #4]
 8014e5c:	4b6c      	ldr	r3, [pc, #432]	; (8015010 <LoRaMacMibSetRequestConfirm+0x310>)
 8014e5e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e62:	e2e4      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e64:	2303      	movs	r3, #3
 8014e66:	75fb      	strb	r3, [r7, #23]
            break;
 8014e68:	e2e1      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	685b      	ldr	r3, [r3, #4]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fa f8b0 	bl	800efd4 <SecureElementSetDevEui>
 8014e74:	4603      	mov	r3, r0
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	f000 82be 	beq.w	80153f8 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e7c:	2303      	movs	r3, #3
 8014e7e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e80:	e2ba      	b.n	80153f8 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	4618      	mov	r0, r3
 8014e88:	f7fa f8d4 	bl	800f034 <SecureElementSetJoinEui>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	f000 82b4 	beq.w	80153fc <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e94:	2303      	movs	r3, #3
 8014e96:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e98:	e2b0      	b.n	80153fc <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	791a      	ldrb	r2, [r3, #4]
 8014e9e:	4b5c      	ldr	r3, [pc, #368]	; (8015010 <LoRaMacMibSetRequestConfirm+0x310>)
 8014ea0:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014ea4:	e2c3      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	685b      	ldr	r3, [r3, #4]
 8014eaa:	4a59      	ldr	r2, [pc, #356]	; (8015010 <LoRaMacMibSetRequestConfirm+0x310>)
 8014eac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014eb0:	e2bd      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014eb2:	4b57      	ldr	r3, [pc, #348]	; (8015010 <LoRaMacMibSetRequestConfirm+0x310>)
 8014eb4:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	685b      	ldr	r3, [r3, #4]
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	4610      	mov	r0, r2
 8014ec0:	f7fa f8e8 	bl	800f094 <SecureElementSetDevAddr>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d002      	beq.n	8014ed0 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014eca:	2303      	movs	r3, #3
 8014ecc:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014ece:	e2ae      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	4a4e      	ldr	r2, [pc, #312]	; (8015010 <LoRaMacMibSetRequestConfirm+0x310>)
 8014ed6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014eda:	e2a8      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	685b      	ldr	r3, [r3, #4]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d00b      	beq.n	8014efc <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	4619      	mov	r1, r3
 8014eea:	2000      	movs	r0, #0
 8014eec:	f002 f866 	bl	8016fbc <LoRaMacCryptoSetKey>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	f000 8284 	beq.w	8015400 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ef8:	2311      	movs	r3, #17
 8014efa:	e2a3      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014efc:	2303      	movs	r3, #3
 8014efe:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f00:	e27e      	b.n	8015400 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d00b      	beq.n	8014f22 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	685b      	ldr	r3, [r3, #4]
 8014f0e:	4619      	mov	r1, r3
 8014f10:	2001      	movs	r0, #1
 8014f12:	f002 f853 	bl	8016fbc <LoRaMacCryptoSetKey>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	f000 8273 	beq.w	8015404 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014f1e:	2311      	movs	r3, #17
 8014f20:	e290      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f22:	2303      	movs	r3, #3
 8014f24:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f26:	e26d      	b.n	8015404 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	685b      	ldr	r3, [r3, #4]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d00b      	beq.n	8014f48 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	4619      	mov	r1, r3
 8014f36:	2008      	movs	r0, #8
 8014f38:	f002 f840 	bl	8016fbc <LoRaMacCryptoSetKey>
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f000 8262 	beq.w	8015408 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014f44:	2311      	movs	r3, #17
 8014f46:	e27d      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f48:	2303      	movs	r3, #3
 8014f4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f4c:	e25c      	b.n	8015408 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d00b      	beq.n	8014f6e <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	685b      	ldr	r3, [r3, #4]
 8014f5a:	4619      	mov	r1, r3
 8014f5c:	2009      	movs	r0, #9
 8014f5e:	f002 f82d 	bl	8016fbc <LoRaMacCryptoSetKey>
 8014f62:	4603      	mov	r3, r0
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	f000 8251 	beq.w	801540c <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014f6a:	2311      	movs	r3, #17
 8014f6c:	e26a      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f6e:	2303      	movs	r3, #3
 8014f70:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f72:	e24b      	b.n	801540c <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	685b      	ldr	r3, [r3, #4]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00b      	beq.n	8014f94 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	4619      	mov	r1, r3
 8014f82:	200c      	movs	r0, #12
 8014f84:	f002 f81a 	bl	8016fbc <LoRaMacCryptoSetKey>
 8014f88:	4603      	mov	r3, r0
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	f000 8240 	beq.w	8015410 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014f90:	2311      	movs	r3, #17
 8014f92:	e257      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f94:	2303      	movs	r3, #3
 8014f96:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f98:	e23a      	b.n	8015410 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d00b      	beq.n	8014fba <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	200d      	movs	r0, #13
 8014faa:	f002 f807 	bl	8016fbc <LoRaMacCryptoSetKey>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	f000 822f 	beq.w	8015414 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014fb6:	2311      	movs	r3, #17
 8014fb8:	e244      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fba:	2303      	movs	r3, #3
 8014fbc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014fbe:	e229      	b.n	8015414 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d00b      	beq.n	8014fe0 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	4619      	mov	r1, r3
 8014fce:	200e      	movs	r0, #14
 8014fd0:	f001 fff4 	bl	8016fbc <LoRaMacCryptoSetKey>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	f000 821e 	beq.w	8015418 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014fdc:	2311      	movs	r3, #17
 8014fde:	e231      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fe0:	2303      	movs	r3, #3
 8014fe2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014fe4:	e218      	b.n	8015418 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	685b      	ldr	r3, [r3, #4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d00b      	beq.n	8015006 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	200f      	movs	r0, #15
 8014ff6:	f001 ffe1 	bl	8016fbc <LoRaMacCryptoSetKey>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	f000 820d 	beq.w	801541c <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015002:	2311      	movs	r3, #17
 8015004:	e21e      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015006:	2303      	movs	r3, #3
 8015008:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801500a:	e207      	b.n	801541c <LoRaMacMibSetRequestConfirm+0x71c>
 801500c:	20000738 	.word	0x20000738
 8015010:	20000c54 	.word	0x20000c54
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	791a      	ldrb	r2, [r3, #4]
 8015018:	4bb2      	ldr	r3, [pc, #712]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801501a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801501e:	4bb2      	ldr	r3, [pc, #712]	; (80152e8 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8015020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015022:	4ab0      	ldr	r2, [pc, #704]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015024:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8015028:	4610      	mov	r0, r2
 801502a:	4798      	blx	r3
            Radio.Sleep( );
 801502c:	4bae      	ldr	r3, [pc, #696]	; (80152e8 <LoRaMacMibSetRequestConfirm+0x5e8>)
 801502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015030:	4798      	blx	r3
            break;
 8015032:	e1fc      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	791a      	ldrb	r2, [r3, #4]
 8015038:	4baa      	ldr	r3, [pc, #680]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801503a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 801503e:	e1f6      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	7a1b      	ldrb	r3, [r3, #8]
 8015044:	b25b      	sxtb	r3, r3
 8015046:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8015048:	4ba6      	ldr	r3, [pc, #664]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801504a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801504e:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8015050:	4ba4      	ldr	r3, [pc, #656]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015052:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015056:	f107 0108 	add.w	r1, r7, #8
 801505a:	2207      	movs	r2, #7
 801505c:	4618      	mov	r0, r3
 801505e:	f002 fdf7 	bl	8017c50 <RegionVerify>
 8015062:	4603      	mov	r3, r0
 8015064:	f083 0301 	eor.w	r3, r3, #1
 8015068:	b2db      	uxtb	r3, r3
 801506a:	2b00      	cmp	r3, #0
 801506c:	d002      	beq.n	8015074 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801506e:	2303      	movs	r3, #3
 8015070:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8015072:	e1dc      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801507a:	4b9a      	ldr	r3, [pc, #616]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801507c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015080:	f107 0108 	add.w	r1, r7, #8
 8015084:	2200      	movs	r2, #0
 8015086:	4618      	mov	r0, r3
 8015088:	f002 fde2 	bl	8017c50 <RegionVerify>
 801508c:	4603      	mov	r3, r0
 801508e:	f083 0301 	eor.w	r3, r3, #1
 8015092:	b2db      	uxtb	r3, r3
 8015094:	2b00      	cmp	r3, #0
 8015096:	d002      	beq.n	801509e <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015098:	2303      	movs	r3, #3
 801509a:	75fb      	strb	r3, [r7, #23]
            break;
 801509c:	e1c7      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801509e:	4b91      	ldr	r3, [pc, #580]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	336c      	adds	r3, #108	; 0x6c
 80150a4:	3204      	adds	r2, #4
 80150a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150aa:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80150ae:	e1be      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	7a1b      	ldrb	r3, [r3, #8]
 80150b4:	b25b      	sxtb	r3, r3
 80150b6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80150b8:	4b8a      	ldr	r3, [pc, #552]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150ba:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80150be:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80150c0:	4b88      	ldr	r3, [pc, #544]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150c2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80150c6:	f107 0108 	add.w	r1, r7, #8
 80150ca:	2207      	movs	r2, #7
 80150cc:	4618      	mov	r0, r3
 80150ce:	f002 fdbf 	bl	8017c50 <RegionVerify>
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d008      	beq.n	80150ea <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80150d8:	4b82      	ldr	r3, [pc, #520]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150da:	687a      	ldr	r2, [r7, #4]
 80150dc:	33b4      	adds	r3, #180	; 0xb4
 80150de:	3204      	adds	r2, #4
 80150e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80150e4:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80150e8:	e1a1      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150ea:	2303      	movs	r3, #3
 80150ec:	75fb      	strb	r3, [r7, #23]
            break;
 80150ee:	e19e      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	7a1b      	ldrb	r3, [r3, #8]
 80150f4:	b25b      	sxtb	r3, r3
 80150f6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80150f8:	4b7a      	ldr	r3, [pc, #488]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80150fa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80150fe:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8015100:	4b78      	ldr	r3, [pc, #480]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015102:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015106:	f107 0108 	add.w	r1, r7, #8
 801510a:	2207      	movs	r2, #7
 801510c:	4618      	mov	r0, r3
 801510e:	f002 fd9f 	bl	8017c50 <RegionVerify>
 8015112:	4603      	mov	r3, r0
 8015114:	2b00      	cmp	r3, #0
 8015116:	d019      	beq.n	801514c <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8015118:	4b72      	ldr	r3, [pc, #456]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	3374      	adds	r3, #116	; 0x74
 801511e:	3204      	adds	r2, #4
 8015120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015124:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8015128:	4b6e      	ldr	r3, [pc, #440]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801512a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801512e:	2b02      	cmp	r3, #2
 8015130:	f040 8176 	bne.w	8015420 <LoRaMacMibSetRequestConfirm+0x720>
 8015134:	4b6b      	ldr	r3, [pc, #428]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015136:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801513a:	2b00      	cmp	r3, #0
 801513c:	f000 8170 	beq.w	8015420 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8015140:	4b69      	ldr	r3, [pc, #420]	; (80152e8 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8015142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015144:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8015146:	f7fe fc1b 	bl	8013980 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801514a:	e169      	b.n	8015420 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801514c:	2303      	movs	r3, #3
 801514e:	75fb      	strb	r3, [r7, #23]
            break;
 8015150:	e166      	b.n	8015420 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	7a1b      	ldrb	r3, [r3, #8]
 8015156:	b25b      	sxtb	r3, r3
 8015158:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801515a:	4b62      	ldr	r3, [pc, #392]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801515c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8015160:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8015162:	4b60      	ldr	r3, [pc, #384]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015164:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015168:	f107 0108 	add.w	r1, r7, #8
 801516c:	2207      	movs	r2, #7
 801516e:	4618      	mov	r0, r3
 8015170:	f002 fd6e 	bl	8017c50 <RegionVerify>
 8015174:	4603      	mov	r3, r0
 8015176:	2b00      	cmp	r3, #0
 8015178:	d008      	beq.n	801518c <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 801517a:	4b5a      	ldr	r3, [pc, #360]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801517c:	687a      	ldr	r2, [r7, #4]
 801517e:	33bc      	adds	r3, #188	; 0xbc
 8015180:	3204      	adds	r2, #4
 8015182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015186:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801518a:	e150      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801518c:	2303      	movs	r3, #3
 801518e:	75fb      	strb	r3, [r7, #23]
            break;
 8015190:	e14d      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	685b      	ldr	r3, [r3, #4]
 8015196:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8015198:	2301      	movs	r3, #1
 801519a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 801519c:	4b51      	ldr	r3, [pc, #324]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801519e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80151a2:	f107 020c 	add.w	r2, r7, #12
 80151a6:	4611      	mov	r1, r2
 80151a8:	4618      	mov	r0, r3
 80151aa:	f002 fd8a 	bl	8017cc2 <RegionChanMaskSet>
 80151ae:	4603      	mov	r3, r0
 80151b0:	f083 0301 	eor.w	r3, r3, #1
 80151b4:	b2db      	uxtb	r3, r3
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	f000 8134 	beq.w	8015424 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151bc:	2303      	movs	r3, #3
 80151be:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80151c0:	e130      	b.n	8015424 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	685b      	ldr	r3, [r3, #4]
 80151c6:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80151c8:	2300      	movs	r3, #0
 80151ca:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80151cc:	4b45      	ldr	r3, [pc, #276]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80151ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80151d2:	f107 020c 	add.w	r2, r7, #12
 80151d6:	4611      	mov	r1, r2
 80151d8:	4618      	mov	r0, r3
 80151da:	f002 fd72 	bl	8017cc2 <RegionChanMaskSet>
 80151de:	4603      	mov	r3, r0
 80151e0:	f083 0301 	eor.w	r3, r3, #1
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	f000 811e 	beq.w	8015428 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151ec:	2303      	movs	r3, #3
 80151ee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80151f0:	e11a      	b.n	8015428 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	791b      	ldrb	r3, [r3, #4]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d009      	beq.n	801520e <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80151fe:	2b0f      	cmp	r3, #15
 8015200:	d805      	bhi.n	801520e <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	791a      	ldrb	r2, [r3, #4]
 8015206:	4b37      	ldr	r3, [pc, #220]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015208:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801520c:	e10f      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801520e:	2303      	movs	r3, #3
 8015210:	75fb      	strb	r3, [r7, #23]
            break;
 8015212:	e10c      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	685b      	ldr	r3, [r3, #4]
 8015218:	4a32      	ldr	r2, [pc, #200]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801521a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 801521c:	e107      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	685b      	ldr	r3, [r3, #4]
 8015222:	4a30      	ldr	r2, [pc, #192]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015224:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8015226:	e102      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	685b      	ldr	r3, [r3, #4]
 801522c:	4a2d      	ldr	r2, [pc, #180]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801522e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8015230:	e0fd      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	4a2b      	ldr	r2, [pc, #172]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015238:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 801523a:	e0f8      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	685b      	ldr	r3, [r3, #4]
 8015240:	4a28      	ldr	r2, [pc, #160]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015242:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8015244:	e0f3      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801524c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 801524e:	4b25      	ldr	r3, [pc, #148]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015250:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015254:	f107 0108 	add.w	r1, r7, #8
 8015258:	2206      	movs	r2, #6
 801525a:	4618      	mov	r0, r3
 801525c:	f002 fcf8 	bl	8017c50 <RegionVerify>
 8015260:	4603      	mov	r3, r0
 8015262:	2b00      	cmp	r3, #0
 8015264:	d005      	beq.n	8015272 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8015266:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801526a:	4b1e      	ldr	r3, [pc, #120]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801526c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015270:	e0dd      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015272:	2303      	movs	r3, #3
 8015274:	75fb      	strb	r3, [r7, #23]
            break;
 8015276:	e0da      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801527e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015280:	4b18      	ldr	r3, [pc, #96]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8015282:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015286:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015288:	4b16      	ldr	r3, [pc, #88]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801528a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801528e:	f107 0108 	add.w	r1, r7, #8
 8015292:	2205      	movs	r2, #5
 8015294:	4618      	mov	r0, r3
 8015296:	f002 fcdb 	bl	8017c50 <RegionVerify>
 801529a:	4603      	mov	r3, r0
 801529c:	2b00      	cmp	r3, #0
 801529e:	d005      	beq.n	80152ac <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80152a0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80152a4:	4b0f      	ldr	r3, [pc, #60]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80152a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80152aa:	e0c0      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80152ac:	2303      	movs	r3, #3
 80152ae:	75fb      	strb	r3, [r7, #23]
            break;
 80152b0:	e0bd      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80152b8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 80152ba:	4b0a      	ldr	r3, [pc, #40]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80152bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80152c0:	f107 0108 	add.w	r1, r7, #8
 80152c4:	220a      	movs	r2, #10
 80152c6:	4618      	mov	r0, r3
 80152c8:	f002 fcc2 	bl	8017c50 <RegionVerify>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d005      	beq.n	80152de <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 80152d2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80152d6:	4b03      	ldr	r3, [pc, #12]	; (80152e4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80152d8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80152dc:	e0a7      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80152de:	2303      	movs	r3, #3
 80152e0:	75fb      	strb	r3, [r7, #23]
            break;
 80152e2:	e0a4      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
 80152e4:	20000c54 	.word	0x20000c54
 80152e8:	08021fb4 	.word	0x08021fb4
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80152f2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 80152f4:	4b55      	ldr	r3, [pc, #340]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 80152f6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80152fa:	f107 0108 	add.w	r1, r7, #8
 80152fe:	2209      	movs	r2, #9
 8015300:	4618      	mov	r0, r3
 8015302:	f002 fca5 	bl	8017c50 <RegionVerify>
 8015306:	4603      	mov	r3, r0
 8015308:	2b00      	cmp	r3, #0
 801530a:	d005      	beq.n	8015318 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 801530c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015310:	4b4e      	ldr	r3, [pc, #312]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 8015312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015316:	e08a      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015318:	2303      	movs	r3, #3
 801531a:	75fb      	strb	r3, [r7, #23]
            break;
 801531c:	e087      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	685b      	ldr	r3, [r3, #4]
 8015322:	4a4a      	ldr	r2, [pc, #296]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 8015324:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015328:	4b48      	ldr	r3, [pc, #288]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 801532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801532e:	4a47      	ldr	r2, [pc, #284]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 8015330:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8015332:	e07c      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	791a      	ldrb	r2, [r3, #4]
 8015338:	4b44      	ldr	r3, [pc, #272]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 801533a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 801533e:	4b43      	ldr	r3, [pc, #268]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 8015340:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015344:	4b41      	ldr	r3, [pc, #260]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 8015346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 801534a:	e070      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	685b      	ldr	r3, [r3, #4]
 8015350:	4a3e      	ldr	r2, [pc, #248]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 8015352:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8015356:	e06a      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	4a3b      	ldr	r2, [pc, #236]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 801535e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8015362:	e064      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8015364:	f7fe fd40 	bl	8013de8 <RestoreNvmData>
 8015368:	4603      	mov	r3, r0
 801536a:	75fb      	strb	r3, [r7, #23]
            break;
 801536c:	e05f      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	799b      	ldrb	r3, [r3, #6]
 8015372:	2b01      	cmp	r3, #1
 8015374:	d80d      	bhi.n	8015392 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8015376:	4a35      	ldr	r2, [pc, #212]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	685b      	ldr	r3, [r3, #4]
 801537c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6858      	ldr	r0, [r3, #4]
 8015384:	f001 fd7c 	bl	8016e80 <LoRaMacCryptoSetLrWanVersion>
 8015388:	4603      	mov	r3, r0
 801538a:	2b00      	cmp	r3, #0
 801538c:	d04e      	beq.n	801542c <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801538e:	2311      	movs	r3, #17
 8015390:	e058      	b.n	8015444 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015392:	2303      	movs	r3, #3
 8015394:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015396:	e049      	b.n	801542c <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	685b      	ldr	r3, [r3, #4]
 801539c:	4a2b      	ldr	r2, [pc, #172]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 801539e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 80153a2:	e044      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	791a      	ldrb	r2, [r3, #4]
 80153a8:	4b28      	ldr	r3, [pc, #160]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 80153aa:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 80153ae:	e03e      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	889a      	ldrh	r2, [r3, #4]
 80153b4:	4b25      	ldr	r3, [pc, #148]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 80153b6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80153ba:	e038      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	889a      	ldrh	r2, [r3, #4]
 80153c0:	4b22      	ldr	r3, [pc, #136]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 80153c2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80153c6:	e032      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	889a      	ldrh	r2, [r3, #4]
 80153cc:	4b1f      	ldr	r3, [pc, #124]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 80153ce:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 80153d2:	e02c      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	889a      	ldrh	r2, [r3, #4]
 80153d8:	4b1c      	ldr	r3, [pc, #112]	; (801544c <LoRaMacMibSetRequestConfirm+0x74c>)
 80153da:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80153de:	e026      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80153e0:	2318      	movs	r3, #24
 80153e2:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80153e4:	e023      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80153e6:	2318      	movs	r3, #24
 80153e8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80153ea:	e020      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f000 fca4 	bl	8015d3a <LoRaMacMibClassBSetRequestConfirm>
 80153f2:	4603      	mov	r3, r0
 80153f4:	75fb      	strb	r3, [r7, #23]
            break;
 80153f6:	e01a      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153f8:	bf00      	nop
 80153fa:	e018      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80153fc:	bf00      	nop
 80153fe:	e016      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015400:	bf00      	nop
 8015402:	e014      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015404:	bf00      	nop
 8015406:	e012      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015408:	bf00      	nop
 801540a:	e010      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801540c:	bf00      	nop
 801540e:	e00e      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015410:	bf00      	nop
 8015412:	e00c      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015414:	bf00      	nop
 8015416:	e00a      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015418:	bf00      	nop
 801541a:	e008      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801541c:	bf00      	nop
 801541e:	e006      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015420:	bf00      	nop
 8015422:	e004      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015424:	bf00      	nop
 8015426:	e002      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8015428:	bf00      	nop
 801542a:	e000      	b.n	801542e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801542c:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 801542e:	7dfb      	ldrb	r3, [r7, #23]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d106      	bne.n	8015442 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8015434:	4a06      	ldr	r2, [pc, #24]	; (8015450 <LoRaMacMibSetRequestConfirm+0x750>)
 8015436:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801543a:	f043 0320 	orr.w	r3, r3, #32
 801543e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 8015442:	7dfb      	ldrb	r3, [r7, #23]
}
 8015444:	4618      	mov	r0, r3
 8015446:	3718      	adds	r7, #24
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	20000c54 	.word	0x20000c54
 8015450:	20000738 	.word	0x20000738

08015454 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b08a      	sub	sp, #40	; 0x28
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801545c:	2302      	movs	r3, #2
 801545e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8015462:	2300      	movs	r3, #0
 8015464:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d101      	bne.n	8015470 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801546c:	2303      	movs	r3, #3
 801546e:	e17e      	b.n	801576e <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2200      	movs	r2, #0
 8015474:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8015476:	f7fc fb85 	bl	8011b84 <LoRaMacIsBusy>
 801547a:	4603      	mov	r3, r0
 801547c:	2b00      	cmp	r3, #0
 801547e:	d001      	beq.n	8015484 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8015480:	2301      	movs	r3, #1
 8015482:	e174      	b.n	801576e <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8015484:	f001 f992 	bl	80167ac <LoRaMacConfirmQueueIsFull>
 8015488:	4603      	mov	r3, r0
 801548a:	2b00      	cmp	r3, #0
 801548c:	d001      	beq.n	8015492 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 801548e:	2301      	movs	r3, #1
 8015490:	e16d      	b.n	801576e <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015492:	f001 f97f 	bl	8016794 <LoRaMacConfirmQueueGetCnt>
 8015496:	4603      	mov	r3, r0
 8015498:	2b00      	cmp	r3, #0
 801549a:	d104      	bne.n	80154a6 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801549c:	2214      	movs	r2, #20
 801549e:	2100      	movs	r1, #0
 80154a0:	48b5      	ldr	r0, [pc, #724]	; (8015778 <LoRaMacMlmeRequest+0x324>)
 80154a2:	f006 f9c5 	bl	801b830 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80154a6:	4bb5      	ldr	r3, [pc, #724]	; (801577c <LoRaMacMlmeRequest+0x328>)
 80154a8:	2201      	movs	r2, #1
 80154aa:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80154ae:	4ab3      	ldr	r2, [pc, #716]	; (801577c <LoRaMacMlmeRequest+0x328>)
 80154b0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80154b4:	f043 0304 	orr.w	r3, r3, #4
 80154b8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80154c4:	2301      	movs	r3, #1
 80154c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 80154ca:	2300      	movs	r3, #0
 80154cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 80154d0:	2300      	movs	r3, #0
 80154d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	781b      	ldrb	r3, [r3, #0]
 80154da:	3b01      	subs	r3, #1
 80154dc:	2b0c      	cmp	r3, #12
 80154de:	f200 811a 	bhi.w	8015716 <LoRaMacMlmeRequest+0x2c2>
 80154e2:	a201      	add	r2, pc, #4	; (adr r2, 80154e8 <LoRaMacMlmeRequest+0x94>)
 80154e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154e8:	0801551d 	.word	0x0801551d
 80154ec:	08015717 	.word	0x08015717
 80154f0:	08015717 	.word	0x08015717
 80154f4:	08015717 	.word	0x08015717
 80154f8:	080155fb 	.word	0x080155fb
 80154fc:	0801561f 	.word	0x0801561f
 8015500:	08015717 	.word	0x08015717
 8015504:	08015717 	.word	0x08015717
 8015508:	0801563d 	.word	0x0801563d
 801550c:	08015717 	.word	0x08015717
 8015510:	080156e5 	.word	0x080156e5
 8015514:	08015679 	.word	0x08015679
 8015518:	080156c3 	.word	0x080156c3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801551c:	4b97      	ldr	r3, [pc, #604]	; (801577c <LoRaMacMlmeRequest+0x328>)
 801551e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015522:	f003 0320 	and.w	r3, r3, #32
 8015526:	2b00      	cmp	r3, #0
 8015528:	d001      	beq.n	801552e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 801552a:	2301      	movs	r3, #1
 801552c:	e11f      	b.n	801576e <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	791b      	ldrb	r3, [r3, #4]
 8015532:	2b02      	cmp	r3, #2
 8015534:	d135      	bne.n	80155a2 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 8015536:	2000      	movs	r0, #0
 8015538:	f7fe f8b4 	bl	80136a4 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801553c:	4b90      	ldr	r3, [pc, #576]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 801553e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	795b      	ldrb	r3, [r3, #5]
 8015546:	b25b      	sxtb	r3, r3
 8015548:	2200      	movs	r2, #0
 801554a:	4619      	mov	r1, r3
 801554c:	f002 fcca 	bl	8017ee4 <RegionAlternateDr>
 8015550:	4603      	mov	r3, r0
 8015552:	461a      	mov	r2, r3
 8015554:	4b8a      	ldr	r3, [pc, #552]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 8015556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015560:	4b87      	ldr	r3, [pc, #540]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 8015562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8015566:	2307      	movs	r3, #7
 8015568:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 801556c:	20ff      	movs	r0, #255	; 0xff
 801556e:	f7fd fe1d 	bl	80131ac <SendReJoinReq>
 8015572:	4603      	mov	r3, r0
 8015574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8015578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801557c:	2b00      	cmp	r3, #0
 801557e:	f000 80cc 	beq.w	801571a <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015582:	4b7f      	ldr	r3, [pc, #508]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 8015584:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	795b      	ldrb	r3, [r3, #5]
 801558c:	b25b      	sxtb	r3, r3
 801558e:	2201      	movs	r2, #1
 8015590:	4619      	mov	r1, r3
 8015592:	f002 fca7 	bl	8017ee4 <RegionAlternateDr>
 8015596:	4603      	mov	r3, r0
 8015598:	461a      	mov	r2, r3
 801559a:	4b79      	ldr	r3, [pc, #484]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 801559c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80155a0:	e0bb      	b.n	801571a <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	791b      	ldrb	r3, [r3, #4]
 80155a6:	2b01      	cmp	r3, #1
 80155a8:	f040 80b7 	bne.w	801571a <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80155ac:	4b74      	ldr	r3, [pc, #464]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 80155ae:	2200      	movs	r2, #0
 80155b0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80155b4:	2302      	movs	r3, #2
 80155b6:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80155b8:	4b71      	ldr	r3, [pc, #452]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 80155ba:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80155be:	f107 020c 	add.w	r2, r7, #12
 80155c2:	4611      	mov	r1, r2
 80155c4:	4618      	mov	r0, r3
 80155c6:	f002 fb2b 	bl	8017c20 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	791a      	ldrb	r2, [r3, #4]
 80155ce:	4b6c      	ldr	r3, [pc, #432]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 80155d0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80155d4:	2300      	movs	r3, #0
 80155d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 80155da:	2301      	movs	r3, #1
 80155dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 80155e0:	f7fe fdb2 	bl	8014148 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80155e4:	4a65      	ldr	r2, [pc, #404]	; (801577c <LoRaMacMlmeRequest+0x328>)
 80155e6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80155ea:	f043 0310 	orr.w	r3, r3, #16
 80155ee:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 80155f2:	2300      	movs	r3, #0
 80155f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80155f8:	e08f      	b.n	801571a <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80155fa:	2300      	movs	r3, #0
 80155fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015600:	f107 031c 	add.w	r3, r7, #28
 8015604:	2200      	movs	r2, #0
 8015606:	4619      	mov	r1, r3
 8015608:	2002      	movs	r0, #2
 801560a:	f000 fd1f 	bl	801604c <LoRaMacCommandsAddCmd>
 801560e:	4603      	mov	r3, r0
 8015610:	2b00      	cmp	r3, #0
 8015612:	f000 8084 	beq.w	801571e <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015616:	2313      	movs	r3, #19
 8015618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 801561c:	e07f      	b.n	801571e <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	8898      	ldrh	r0, [r3, #4]
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	6899      	ldr	r1, [r3, #8]
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801562c:	b2db      	uxtb	r3, r3
 801562e:	461a      	mov	r2, r3
 8015630:	f7fe fbba 	bl	8013da8 <SetTxContinuousWave>
 8015634:	4603      	mov	r3, r0
 8015636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801563a:	e077      	b.n	801572c <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801563c:	2300      	movs	r3, #0
 801563e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8015642:	f107 0308 	add.w	r3, r7, #8
 8015646:	4619      	mov	r1, r3
 8015648:	200d      	movs	r0, #13
 801564a:	f000 fd7f 	bl	801614c <LoRaMacCommandsGetCmd>
 801564e:	4603      	mov	r3, r0
 8015650:	2b00      	cmp	r3, #0
 8015652:	d103      	bne.n	801565c <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8015654:	2300      	movs	r3, #0
 8015656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 801565a:	e062      	b.n	8015722 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801565c:	f107 031c 	add.w	r3, r7, #28
 8015660:	2200      	movs	r2, #0
 8015662:	4619      	mov	r1, r3
 8015664:	200d      	movs	r0, #13
 8015666:	f000 fcf1 	bl	801604c <LoRaMacCommandsAddCmd>
 801566a:	4603      	mov	r3, r0
 801566c:	2b00      	cmp	r3, #0
 801566e:	d058      	beq.n	8015722 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015670:	2313      	movs	r3, #19
 8015672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015676:	e054      	b.n	8015722 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015678:	4b41      	ldr	r3, [pc, #260]	; (8015780 <LoRaMacMlmeRequest+0x32c>)
 801567a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801567e:	2b00      	cmp	r3, #0
 8015680:	d151      	bne.n	8015726 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	791b      	ldrb	r3, [r3, #4]
 8015686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	791b      	ldrb	r3, [r3, #4]
 801568e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015692:	b2db      	uxtb	r3, r3
 8015694:	4618      	mov	r0, r3
 8015696:	f000 fb25 	bl	8015ce4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801569a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801569e:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80156a0:	2300      	movs	r3, #0
 80156a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80156a6:	f107 031c 	add.w	r3, r7, #28
 80156aa:	2201      	movs	r2, #1
 80156ac:	4619      	mov	r1, r3
 80156ae:	2010      	movs	r0, #16
 80156b0:	f000 fccc 	bl	801604c <LoRaMacCommandsAddCmd>
 80156b4:	4603      	mov	r3, r0
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d035      	beq.n	8015726 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80156ba:	2313      	movs	r3, #19
 80156bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 80156c0:	e031      	b.n	8015726 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80156c2:	2300      	movs	r3, #0
 80156c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80156c8:	f107 031c 	add.w	r3, r7, #28
 80156cc:	2200      	movs	r2, #0
 80156ce:	4619      	mov	r1, r3
 80156d0:	2012      	movs	r0, #18
 80156d2:	f000 fcbb 	bl	801604c <LoRaMacCommandsAddCmd>
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d026      	beq.n	801572a <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80156dc:	2313      	movs	r3, #19
 80156de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80156e2:	e022      	b.n	801572a <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80156e4:	2301      	movs	r3, #1
 80156e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80156ea:	f000 fab1 	bl	8015c50 <LoRaMacClassBIsAcquisitionInProgress>
 80156ee:	4603      	mov	r3, r0
 80156f0:	f083 0301 	eor.w	r3, r3, #1
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d009      	beq.n	801570e <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80156fa:	2000      	movs	r0, #0
 80156fc:	f000 fa8a 	bl	8015c14 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8015700:	2000      	movs	r0, #0
 8015702:	f000 faac 	bl	8015c5e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8015706:	2300      	movs	r3, #0
 8015708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801570c:	e00e      	b.n	801572c <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 801570e:	2301      	movs	r3, #1
 8015710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015714:	e00a      	b.n	801572c <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 8015716:	bf00      	nop
 8015718:	e008      	b.n	801572c <LoRaMacMlmeRequest+0x2d8>
            break;
 801571a:	bf00      	nop
 801571c:	e006      	b.n	801572c <LoRaMacMlmeRequest+0x2d8>
            break;
 801571e:	bf00      	nop
 8015720:	e004      	b.n	801572c <LoRaMacMlmeRequest+0x2d8>
            break;
 8015722:	bf00      	nop
 8015724:	e002      	b.n	801572c <LoRaMacMlmeRequest+0x2d8>
            break;
 8015726:	bf00      	nop
 8015728:	e000      	b.n	801572c <LoRaMacMlmeRequest+0x2d8>
            break;
 801572a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801572c:	4b13      	ldr	r3, [pc, #76]	; (801577c <LoRaMacMlmeRequest+0x328>)
 801572e:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8015736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801573a:	2b00      	cmp	r3, #0
 801573c:	d010      	beq.n	8015760 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801573e:	f001 f829 	bl	8016794 <LoRaMacConfirmQueueGetCnt>
 8015742:	4603      	mov	r3, r0
 8015744:	2b00      	cmp	r3, #0
 8015746:	d110      	bne.n	801576a <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 8015748:	4b0c      	ldr	r3, [pc, #48]	; (801577c <LoRaMacMlmeRequest+0x328>)
 801574a:	2200      	movs	r2, #0
 801574c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8015750:	4a0a      	ldr	r2, [pc, #40]	; (801577c <LoRaMacMlmeRequest+0x328>)
 8015752:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015756:	f36f 0382 	bfc	r3, #2, #1
 801575a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 801575e:	e004      	b.n	801576a <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8015760:	f107 0320 	add.w	r3, r7, #32
 8015764:	4618      	mov	r0, r3
 8015766:	f000 fec1 	bl	80164ec <LoRaMacConfirmQueueAdd>
    }
    return status;
 801576a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801576e:	4618      	mov	r0, r3
 8015770:	3728      	adds	r7, #40	; 0x28
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}
 8015776:	bf00      	nop
 8015778:	20000b8c 	.word	0x20000b8c
 801577c:	20000738 	.word	0x20000738
 8015780:	20000c54 	.word	0x20000c54

08015784 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8015784:	b5b0      	push	{r4, r5, r7, lr}
 8015786:	b092      	sub	sp, #72	; 0x48
 8015788:	af02      	add	r7, sp, #8
 801578a:	6078      	str	r0, [r7, #4]
 801578c:	460b      	mov	r3, r1
 801578e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015790:	2302      	movs	r3, #2
 8015792:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8015796:	2300      	movs	r3, #0
 8015798:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 801579c:	2300      	movs	r3, #0
 801579e:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80157a0:	2300      	movs	r3, #0
 80157a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 80157a6:	2300      	movs	r3, #0
 80157a8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d101      	bne.n	80157b6 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80157b2:	2303      	movs	r3, #3
 80157b4:	e113      	b.n	80159de <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	2200      	movs	r2, #0
 80157ba:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80157bc:	f7fc f9e2 	bl	8011b84 <LoRaMacIsBusy>
 80157c0:	4603      	mov	r3, r0
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d001      	beq.n	80157ca <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80157c6:	2301      	movs	r3, #1
 80157c8:	e109      	b.n	80159de <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f107 040c 	add.w	r4, r7, #12
 80157d0:	461d      	mov	r5, r3
 80157d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80157d6:	682b      	ldr	r3, [r5, #0]
 80157d8:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80157da:	2300      	movs	r3, #0
 80157dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80157e0:	2214      	movs	r2, #20
 80157e2:	2100      	movs	r1, #0
 80157e4:	4880      	ldr	r0, [pc, #512]	; (80159e8 <LoRaMacMcpsRequest+0x264>)
 80157e6:	f006 f823 	bl	801b830 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80157ea:	4b80      	ldr	r3, [pc, #512]	; (80159ec <LoRaMacMcpsRequest+0x268>)
 80157ec:	2201      	movs	r2, #1
 80157ee:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80157f2:	4b7f      	ldr	r3, [pc, #508]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 80157f4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80157f8:	2b02      	cmp	r3, #2
 80157fa:	d111      	bne.n	8015820 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80157fc:	4b7c      	ldr	r3, [pc, #496]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 80157fe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8015802:	2b02      	cmp	r3, #2
 8015804:	d10c      	bne.n	8015820 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8015806:	4b7a      	ldr	r3, [pc, #488]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 8015808:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 801580c:	f083 0301 	eor.w	r3, r3, #1
 8015810:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8015812:	2b00      	cmp	r3, #0
 8015814:	d004      	beq.n	8015820 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8015816:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8015818:	2b00      	cmp	r3, #0
 801581a:	d101      	bne.n	8015820 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 801581c:	2301      	movs	r3, #1
 801581e:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8015820:	7b3b      	ldrb	r3, [r7, #12]
 8015822:	2b03      	cmp	r3, #3
 8015824:	d030      	beq.n	8015888 <LoRaMacMcpsRequest+0x104>
 8015826:	2b03      	cmp	r3, #3
 8015828:	dc3f      	bgt.n	80158aa <LoRaMacMcpsRequest+0x126>
 801582a:	2b00      	cmp	r3, #0
 801582c:	d002      	beq.n	8015834 <LoRaMacMcpsRequest+0xb0>
 801582e:	2b01      	cmp	r3, #1
 8015830:	d015      	beq.n	801585e <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015832:	e03a      	b.n	80158aa <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8015834:	2301      	movs	r3, #1
 8015836:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801583a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801583e:	2202      	movs	r2, #2
 8015840:	f362 1347 	bfi	r3, r2, #5, #3
 8015844:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8015848:	7c3b      	ldrb	r3, [r7, #16]
 801584a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8015852:	8b3b      	ldrh	r3, [r7, #24]
 8015854:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8015856:	7ebb      	ldrb	r3, [r7, #26]
 8015858:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801585c:	e026      	b.n	80158ac <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801585e:	2301      	movs	r3, #1
 8015860:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015864:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015868:	2204      	movs	r2, #4
 801586a:	f362 1347 	bfi	r3, r2, #5, #3
 801586e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8015872:	7c3b      	ldrb	r3, [r7, #16]
 8015874:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 801587c:	8b3b      	ldrh	r3, [r7, #24]
 801587e:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8015880:	7ebb      	ldrb	r3, [r7, #26]
 8015882:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015886:	e011      	b.n	80158ac <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8015888:	2301      	movs	r3, #1
 801588a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801588e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015892:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015896:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801589a:	693b      	ldr	r3, [r7, #16]
 801589c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 801589e:	8abb      	ldrh	r3, [r7, #20]
 80158a0:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 80158a2:	7dbb      	ldrb	r3, [r7, #22]
 80158a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80158a8:	e000      	b.n	80158ac <LoRaMacMcpsRequest+0x128>
            break;
 80158aa:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80158ac:	2302      	movs	r3, #2
 80158ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80158b2:	4b4f      	ldr	r3, [pc, #316]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 80158b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80158b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80158bc:	4b4c      	ldr	r3, [pc, #304]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 80158be:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158c2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80158c6:	4611      	mov	r1, r2
 80158c8:	4618      	mov	r0, r3
 80158ca:	f002 f971 	bl	8017bb0 <RegionGetPhyParam>
 80158ce:	4603      	mov	r3, r0
 80158d0:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80158d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d4:	b25b      	sxtb	r3, r3
 80158d6:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80158da:	4293      	cmp	r3, r2
 80158dc:	bfb8      	it	lt
 80158de:	4613      	movlt	r3, r2
 80158e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80158e4:	4b42      	ldr	r3, [pc, #264]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 80158e6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80158ea:	4a41      	ldr	r2, [pc, #260]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 80158ec:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80158f0:	4a3f      	ldr	r2, [pc, #252]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 80158f2:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fc fae0 	bl	8011ebc <CheckForMinimumAbpDatarate>
 80158fc:	4603      	mov	r3, r0
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d002      	beq.n	8015908 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8015902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015904:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8015908:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801590c:	2b00      	cmp	r3, #0
 801590e:	d05f      	beq.n	80159d0 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8015910:	4b37      	ldr	r3, [pc, #220]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 8015912:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015916:	f083 0301 	eor.w	r3, r3, #1
 801591a:	b2db      	uxtb	r3, r3
 801591c:	2b00      	cmp	r3, #0
 801591e:	d10e      	bne.n	801593e <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8015920:	4b33      	ldr	r3, [pc, #204]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 8015922:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015926:	4a32      	ldr	r2, [pc, #200]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 8015928:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 801592c:	4a30      	ldr	r2, [pc, #192]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 801592e:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8015932:	4618      	mov	r0, r3
 8015934:	f7fc fac2 	bl	8011ebc <CheckForMinimumAbpDatarate>
 8015938:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801593a:	2b00      	cmp	r3, #0
 801593c:	d01c      	beq.n	8015978 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801593e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8015942:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015946:	4b2a      	ldr	r3, [pc, #168]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 8015948:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801594c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015950:	4b27      	ldr	r3, [pc, #156]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 8015952:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015956:	f107 0120 	add.w	r1, r7, #32
 801595a:	2205      	movs	r2, #5
 801595c:	4618      	mov	r0, r3
 801595e:	f002 f977 	bl	8017c50 <RegionVerify>
 8015962:	4603      	mov	r3, r0
 8015964:	2b00      	cmp	r3, #0
 8015966:	d005      	beq.n	8015974 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015968:	f997 2020 	ldrsb.w	r2, [r7, #32]
 801596c:	4b20      	ldr	r3, [pc, #128]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 801596e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015972:	e001      	b.n	8015978 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015974:	2303      	movs	r3, #3
 8015976:	e032      	b.n	80159de <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8015978:	4b1d      	ldr	r3, [pc, #116]	; (80159f0 <LoRaMacMcpsRequest+0x26c>)
 801597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801597e:	4a1b      	ldr	r2, [pc, #108]	; (80159ec <LoRaMacMcpsRequest+0x268>)
 8015980:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8015984:	4611      	mov	r1, r2
 8015986:	4618      	mov	r0, r3
 8015988:	f7fc fb84 	bl	8012094 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 801598c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801598e:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8015992:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015996:	78fb      	ldrb	r3, [r7, #3]
 8015998:	9300      	str	r3, [sp, #0]
 801599a:	4613      	mov	r3, r2
 801599c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801599e:	f7fd fb23 	bl	8012fe8 <Send>
 80159a2:	4603      	mov	r3, r0
 80159a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 80159a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d10b      	bne.n	80159c8 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80159b0:	7b3a      	ldrb	r2, [r7, #12]
 80159b2:	4b0e      	ldr	r3, [pc, #56]	; (80159ec <LoRaMacMcpsRequest+0x268>)
 80159b4:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80159b8:	4a0c      	ldr	r2, [pc, #48]	; (80159ec <LoRaMacMcpsRequest+0x268>)
 80159ba:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80159be:	f043 0301 	orr.w	r3, r3, #1
 80159c2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 80159c6:	e003      	b.n	80159d0 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80159c8:	4b08      	ldr	r3, [pc, #32]	; (80159ec <LoRaMacMcpsRequest+0x268>)
 80159ca:	2200      	movs	r2, #0
 80159cc:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80159d0:	4b06      	ldr	r3, [pc, #24]	; (80159ec <LoRaMacMcpsRequest+0x268>)
 80159d2:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	611a      	str	r2, [r3, #16]

    return status;
 80159da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3740      	adds	r7, #64	; 0x40
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bdb0      	pop	{r4, r5, r7, pc}
 80159e6:	bf00      	nop
 80159e8:	20000b78 	.word	0x20000b78
 80159ec:	20000738 	.word	0x20000738
 80159f0:	20000c54 	.word	0x20000c54

080159f4 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b084      	sub	sp, #16
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	4603      	mov	r3, r0
 80159fc:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80159fe:	79fb      	ldrb	r3, [r7, #7]
 8015a00:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8015a02:	4b0d      	ldr	r3, [pc, #52]	; (8015a38 <LoRaMacTestSetDutyCycleOn+0x44>)
 8015a04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a08:	f107 010c 	add.w	r1, r7, #12
 8015a0c:	220f      	movs	r2, #15
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f002 f91e 	bl	8017c50 <RegionVerify>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d00a      	beq.n	8015a30 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8015a1a:	4a07      	ldr	r2, [pc, #28]	; (8015a38 <LoRaMacTestSetDutyCycleOn+0x44>)
 8015a1c:	79fb      	ldrb	r3, [r7, #7]
 8015a1e:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8015a22:	4a06      	ldr	r2, [pc, #24]	; (8015a3c <LoRaMacTestSetDutyCycleOn+0x48>)
 8015a24:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015a28:	f043 0320 	orr.w	r3, r3, #32
 8015a2c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8015a30:	bf00      	nop
 8015a32:	3710      	adds	r7, #16
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bd80      	pop	{r7, pc}
 8015a38:	20000c54 	.word	0x20000c54
 8015a3c:	20000738 	.word	0x20000738

08015a40 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015a44:	f7fe fe94 	bl	8014770 <LoRaMacStop>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d112      	bne.n	8015a74 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8015a4e:	480b      	ldr	r0, [pc, #44]	; (8015a7c <LoRaMacDeInitialization+0x3c>)
 8015a50:	f009 ff12 	bl	801f878 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015a54:	480a      	ldr	r0, [pc, #40]	; (8015a80 <LoRaMacDeInitialization+0x40>)
 8015a56:	f009 ff0f 	bl	801f878 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015a5a:	480a      	ldr	r0, [pc, #40]	; (8015a84 <LoRaMacDeInitialization+0x44>)
 8015a5c:	f009 ff0c 	bl	801f878 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015a60:	f000 f94a 	bl	8015cf8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8015a64:	2000      	movs	r0, #0
 8015a66:	f7fd fe1d 	bl	80136a4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8015a6a:	4b07      	ldr	r3, [pc, #28]	; (8015a88 <LoRaMacDeInitialization+0x48>)
 8015a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a6e:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015a70:	2300      	movs	r3, #0
 8015a72:	e000      	b.n	8015a76 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015a74:	2301      	movs	r3, #1
    }
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	20000aa0 	.word	0x20000aa0
 8015a80:	20000ab8 	.word	0x20000ab8
 8015a84:	20000ad0 	.word	0x20000ad0
 8015a88:	08021fb4 	.word	0x08021fb4

08015a8c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b08c      	sub	sp, #48	; 0x30
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	60b9      	str	r1, [r7, #8]
 8015a96:	607a      	str	r2, [r7, #4]
 8015a98:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	7b1b      	ldrb	r3, [r3, #12]
 8015aa4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	7b5b      	ldrb	r3, [r3, #13]
 8015aac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	7b9b      	ldrb	r3, [r3, #14]
 8015ab4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	685a      	ldr	r2, [r3, #4]
 8015abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015abe:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	785b      	ldrb	r3, [r3, #1]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	f000 8088 	beq.w	8015bda <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015aca:	2302      	movs	r3, #2
 8015acc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	7bdb      	ldrb	r3, [r3, #15]
 8015ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	7c1b      	ldrb	r3, [r3, #16]
 8015adc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015ae0:	4611      	mov	r1, r2
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f002 f864 	bl	8017bb0 <RegionGetPhyParam>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015aec:	6a3b      	ldr	r3, [r7, #32]
 8015aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8015af2:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8015af6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8015afa:	4293      	cmp	r3, r2
 8015afc:	bfb8      	it	lt
 8015afe:	4613      	movlt	r3, r2
 8015b00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	8912      	ldrh	r2, [r2, #8]
 8015b0c:	4293      	cmp	r3, r2
 8015b0e:	d302      	bcc.n	8015b16 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8015b10:	2301      	movs	r3, #1
 8015b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	685b      	ldr	r3, [r3, #4]
 8015b1a:	68fa      	ldr	r2, [r7, #12]
 8015b1c:	8912      	ldrh	r2, [r2, #8]
 8015b1e:	4611      	mov	r1, r2
 8015b20:	68fa      	ldr	r2, [r7, #12]
 8015b22:	8952      	ldrh	r2, [r2, #10]
 8015b24:	440a      	add	r2, r1
 8015b26:	4293      	cmp	r3, r2
 8015b28:	d30f      	bcc.n	8015b4a <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8015b2a:	230a      	movs	r3, #10
 8015b2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	7c1b      	ldrb	r3, [r3, #16]
 8015b34:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015b38:	4611      	mov	r1, r2
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f002 f838 	bl	8017bb0 <RegionGetPhyParam>
 8015b40:	4603      	mov	r3, r0
 8015b42:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8015b44:	6a3b      	ldr	r3, [r7, #32]
 8015b46:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	68fa      	ldr	r2, [r7, #12]
 8015b50:	8912      	ldrh	r2, [r2, #8]
 8015b52:	4611      	mov	r1, r2
 8015b54:	68fa      	ldr	r2, [r7, #12]
 8015b56:	8952      	ldrh	r2, [r2, #10]
 8015b58:	0052      	lsls	r2, r2, #1
 8015b5a:	440a      	add	r2, r1
 8015b5c:	4293      	cmp	r3, r2
 8015b5e:	d33c      	bcc.n	8015bda <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	68fa      	ldr	r2, [r7, #12]
 8015b66:	8912      	ldrh	r2, [r2, #8]
 8015b68:	1a9b      	subs	r3, r3, r2
 8015b6a:	68fa      	ldr	r2, [r7, #12]
 8015b6c:	8952      	ldrh	r2, [r2, #10]
 8015b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015b72:	fb01 f202 	mul.w	r2, r1, r2
 8015b76:	1a9b      	subs	r3, r3, r2
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d12e      	bne.n	8015bda <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8015b7c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015b80:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d110      	bne.n	8015baa <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	781b      	ldrb	r3, [r3, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d009      	beq.n	8015ba4 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015b90:	2302      	movs	r3, #2
 8015b92:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	7c1b      	ldrb	r3, [r3, #16]
 8015b98:	f107 0210 	add.w	r2, r7, #16
 8015b9c:	4611      	mov	r1, r2
 8015b9e:	4618      	mov	r0, r3
 8015ba0:	f002 f83e 	bl	8017c20 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8015baa:	2321      	movs	r3, #33	; 0x21
 8015bac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8015bb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015bb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	7bdb      	ldrb	r3, [r3, #15]
 8015bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	7c1b      	ldrb	r3, [r3, #16]
 8015bc4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015bc8:	4611      	mov	r1, r2
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f001 fff0 	bl	8017bb0 <RegionGetPhyParam>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8015bd4:	6a3b      	ldr	r3, [r7, #32]
 8015bd6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015be0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015be8:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015bf0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015bf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	3730      	adds	r7, #48	; 0x30
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd80      	pop	{r7, pc}

08015bfe <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8015bfe:	b480      	push	{r7}
 8015c00:	b085      	sub	sp, #20
 8015c02:	af00      	add	r7, sp, #0
 8015c04:	60f8      	str	r0, [r7, #12]
 8015c06:	60b9      	str	r1, [r7, #8]
 8015c08:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c0a:	bf00      	nop
 8015c0c:	3714      	adds	r7, #20
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bc80      	pop	{r7}
 8015c12:	4770      	bx	lr

08015c14 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8015c14:	b480      	push	{r7}
 8015c16:	b083      	sub	sp, #12
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c1e:	bf00      	nop
 8015c20:	370c      	adds	r7, #12
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bc80      	pop	{r7}
 8015c26:	4770      	bx	lr

08015c28 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8015c28:	b480      	push	{r7}
 8015c2a:	b083      	sub	sp, #12
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	4603      	mov	r3, r0
 8015c30:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c32:	bf00      	nop
 8015c34:	370c      	adds	r7, #12
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bc80      	pop	{r7}
 8015c3a:	4770      	bx	lr

08015c3c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b083      	sub	sp, #12
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	4603      	mov	r3, r0
 8015c44:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c46:	bf00      	nop
 8015c48:	370c      	adds	r7, #12
 8015c4a:	46bd      	mov	sp, r7
 8015c4c:	bc80      	pop	{r7}
 8015c4e:	4770      	bx	lr

08015c50 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8015c50:	b480      	push	{r7}
 8015c52:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8015c54:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bc80      	pop	{r7}
 8015c5c:	4770      	bx	lr

08015c5e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015c5e:	b480      	push	{r7}
 8015c60:	b083      	sub	sp, #12
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c66:	bf00      	nop
 8015c68:	370c      	adds	r7, #12
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bc80      	pop	{r7}
 8015c6e:	4770      	bx	lr

08015c70 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015c70:	b480      	push	{r7}
 8015c72:	b083      	sub	sp, #12
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c78:	bf00      	nop
 8015c7a:	370c      	adds	r7, #12
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bc80      	pop	{r7}
 8015c80:	4770      	bx	lr

08015c82 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015c82:	b480      	push	{r7}
 8015c84:	b083      	sub	sp, #12
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015c8a:	bf00      	nop
 8015c8c:	370c      	adds	r7, #12
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bc80      	pop	{r7}
 8015c92:	4770      	bx	lr

08015c94 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8015c94:	b480      	push	{r7}
 8015c96:	b083      	sub	sp, #12
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015ca0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	370c      	adds	r7, #12
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bc80      	pop	{r7}
 8015caa:	4770      	bx	lr

08015cac <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8015cac:	b480      	push	{r7}
 8015cae:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015cb0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bc80      	pop	{r7}
 8015cb8:	4770      	bx	lr

08015cba <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8015cba:	b480      	push	{r7}
 8015cbc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015cbe:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bc80      	pop	{r7}
 8015cc6:	4770      	bx	lr

08015cc8 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8015cc8:	b480      	push	{r7}
 8015cca:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015ccc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bc80      	pop	{r7}
 8015cd4:	4770      	bx	lr

08015cd6 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015cd6:	b480      	push	{r7}
 8015cd8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015cda:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bc80      	pop	{r7}
 8015ce2:	4770      	bx	lr

08015ce4 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015ce4:	b480      	push	{r7}
 8015ce6:	b083      	sub	sp, #12
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	4603      	mov	r3, r0
 8015cec:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cee:	bf00      	nop
 8015cf0:	370c      	adds	r7, #12
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bc80      	pop	{r7}
 8015cf6:	4770      	bx	lr

08015cf8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015cf8:	b480      	push	{r7}
 8015cfa:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015cfc:	bf00      	nop
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bc80      	pop	{r7}
 8015d02:	4770      	bx	lr

08015d04 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015d04:	b480      	push	{r7}
 8015d06:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d08:	bf00      	nop
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	bc80      	pop	{r7}
 8015d0e:	4770      	bx	lr

08015d10 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8015d10:	b480      	push	{r7}
 8015d12:	b083      	sub	sp, #12
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	4603      	mov	r3, r0
 8015d18:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015d1a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	370c      	adds	r7, #12
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bc80      	pop	{r7}
 8015d24:	4770      	bx	lr

08015d26 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015d26:	b480      	push	{r7}
 8015d28:	b083      	sub	sp, #12
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015d2e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	370c      	adds	r7, #12
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bc80      	pop	{r7}
 8015d38:	4770      	bx	lr

08015d3a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015d3a:	b480      	push	{r7}
 8015d3c:	b083      	sub	sp, #12
 8015d3e:	af00      	add	r7, sp, #0
 8015d40:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015d42:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d44:	4618      	mov	r0, r3
 8015d46:	370c      	adds	r7, #12
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	bc80      	pop	{r7}
 8015d4c:	4770      	bx	lr

08015d4e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015d4e:	b480      	push	{r7}
 8015d50:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d52:	bf00      	nop
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bc80      	pop	{r7}
 8015d58:	4770      	bx	lr

08015d5a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015d5a:	b480      	push	{r7}
 8015d5c:	b083      	sub	sp, #12
 8015d5e:	af00      	add	r7, sp, #0
 8015d60:	4603      	mov	r3, r0
 8015d62:	6039      	str	r1, [r7, #0]
 8015d64:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8015d66:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	370c      	adds	r7, #12
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bc80      	pop	{r7}
 8015d70:	4770      	bx	lr

08015d72 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015d72:	b480      	push	{r7}
 8015d74:	b083      	sub	sp, #12
 8015d76:	af00      	add	r7, sp, #0
 8015d78:	4603      	mov	r3, r0
 8015d7a:	603a      	str	r2, [r7, #0]
 8015d7c:	80fb      	strh	r3, [r7, #6]
 8015d7e:	460b      	mov	r3, r1
 8015d80:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d82:	bf00      	nop
 8015d84:	370c      	adds	r7, #12
 8015d86:	46bd      	mov	sp, r7
 8015d88:	bc80      	pop	{r7}
 8015d8a:	4770      	bx	lr

08015d8c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015d8c:	b480      	push	{r7}
 8015d8e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015d90:	bf00      	nop
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bc80      	pop	{r7}
 8015d96:	4770      	bx	lr

08015d98 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015d98:	b480      	push	{r7}
 8015d9a:	b083      	sub	sp, #12
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015da0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	370c      	adds	r7, #12
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bc80      	pop	{r7}
 8015daa:	4770      	bx	lr

08015dac <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015dac:	b480      	push	{r7}
 8015dae:	b083      	sub	sp, #12
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015db4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	370c      	adds	r7, #12
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bc80      	pop	{r7}
 8015dbe:	4770      	bx	lr

08015dc0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015dc4:	bf00      	nop
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bc80      	pop	{r7}
 8015dca:	4770      	bx	lr

08015dcc <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8015dcc:	b480      	push	{r7}
 8015dce:	b083      	sub	sp, #12
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	460b      	mov	r3, r1
 8015dd6:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015dd8:	bf00      	nop
 8015dda:	370c      	adds	r7, #12
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bc80      	pop	{r7}
 8015de0:	4770      	bx	lr

08015de2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015de2:	b480      	push	{r7}
 8015de4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015de6:	bf00      	nop
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bc80      	pop	{r7}
 8015dec:	4770      	bx	lr

08015dee <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015dee:	b480      	push	{r7}
 8015df0:	b085      	sub	sp, #20
 8015df2:	af00      	add	r7, sp, #0
 8015df4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	81fb      	strh	r3, [r7, #14]
 8015dfe:	e00a      	b.n	8015e16 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015e00:	89fb      	ldrh	r3, [r7, #14]
 8015e02:	68ba      	ldr	r2, [r7, #8]
 8015e04:	4413      	add	r3, r2
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d001      	beq.n	8015e10 <IsSlotFree+0x22>
        {
            return false;
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	e006      	b.n	8015e1e <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015e10:	89fb      	ldrh	r3, [r7, #14]
 8015e12:	3301      	adds	r3, #1
 8015e14:	81fb      	strh	r3, [r7, #14]
 8015e16:	89fb      	ldrh	r3, [r7, #14]
 8015e18:	2b0f      	cmp	r3, #15
 8015e1a:	d9f1      	bls.n	8015e00 <IsSlotFree+0x12>
        }
    }
    return true;
 8015e1c:	2301      	movs	r3, #1
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3714      	adds	r7, #20
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bc80      	pop	{r7}
 8015e26:	4770      	bx	lr

08015e28 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015e32:	e007      	b.n	8015e44 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015e34:	79fb      	ldrb	r3, [r7, #7]
 8015e36:	3301      	adds	r3, #1
 8015e38:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015e3a:	79fb      	ldrb	r3, [r7, #7]
 8015e3c:	2b20      	cmp	r3, #32
 8015e3e:	d101      	bne.n	8015e44 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015e40:	2300      	movs	r3, #0
 8015e42:	e012      	b.n	8015e6a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015e44:	79fb      	ldrb	r3, [r7, #7]
 8015e46:	011b      	lsls	r3, r3, #4
 8015e48:	3308      	adds	r3, #8
 8015e4a:	4a0a      	ldr	r2, [pc, #40]	; (8015e74 <MallocNewMacCommandSlot+0x4c>)
 8015e4c:	4413      	add	r3, r2
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7ff ffcd 	bl	8015dee <IsSlotFree>
 8015e54:	4603      	mov	r3, r0
 8015e56:	f083 0301 	eor.w	r3, r3, #1
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d1e9      	bne.n	8015e34 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015e60:	79fb      	ldrb	r3, [r7, #7]
 8015e62:	011b      	lsls	r3, r3, #4
 8015e64:	3308      	adds	r3, #8
 8015e66:	4a03      	ldr	r2, [pc, #12]	; (8015e74 <MallocNewMacCommandSlot+0x4c>)
 8015e68:	4413      	add	r3, r2
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3708      	adds	r7, #8
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	20001894 	.word	0x20001894

08015e78 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d101      	bne.n	8015e8a <FreeMacCommandSlot+0x12>
    {
        return false;
 8015e86:	2300      	movs	r3, #0
 8015e88:	e005      	b.n	8015e96 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015e8a:	2210      	movs	r2, #16
 8015e8c:	2100      	movs	r1, #0
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f005 fcce 	bl	801b830 <memset1>

    return true;
 8015e94:	2301      	movs	r3, #1
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	3708      	adds	r7, #8
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}

08015e9e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015e9e:	b480      	push	{r7}
 8015ea0:	b083      	sub	sp, #12
 8015ea2:	af00      	add	r7, sp, #0
 8015ea4:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d101      	bne.n	8015eb0 <LinkedListInit+0x12>
    {
        return false;
 8015eac:	2300      	movs	r3, #0
 8015eae:	e006      	b.n	8015ebe <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2200      	movs	r2, #0
 8015eba:	605a      	str	r2, [r3, #4]

    return true;
 8015ebc:	2301      	movs	r3, #1
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	370c      	adds	r7, #12
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bc80      	pop	{r7}
 8015ec6:	4770      	bx	lr

08015ec8 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015ec8:	b480      	push	{r7}
 8015eca:	b083      	sub	sp, #12
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d002      	beq.n	8015ede <LinkedListAdd+0x16>
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d101      	bne.n	8015ee2 <LinkedListAdd+0x1a>
    {
        return false;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	e015      	b.n	8015f0e <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d102      	bne.n	8015ef0 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	683a      	ldr	r2, [r7, #0]
 8015eee:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	685b      	ldr	r3, [r3, #4]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d003      	beq.n	8015f00 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	683a      	ldr	r2, [r7, #0]
 8015efe:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	2200      	movs	r2, #0
 8015f04:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	683a      	ldr	r2, [r7, #0]
 8015f0a:	605a      	str	r2, [r3, #4]

    return true;
 8015f0c:	2301      	movs	r3, #1
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	370c      	adds	r7, #12
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bc80      	pop	{r7}
 8015f16:	4770      	bx	lr

08015f18 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015f18:	b480      	push	{r7}
 8015f1a:	b085      	sub	sp, #20
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
 8015f20:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d002      	beq.n	8015f2e <LinkedListGetPrevious+0x16>
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d101      	bne.n	8015f32 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	e016      	b.n	8015f60 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015f38:	683a      	ldr	r2, [r7, #0]
 8015f3a:	68fb      	ldr	r3, [r7, #12]
 8015f3c:	429a      	cmp	r2, r3
 8015f3e:	d00c      	beq.n	8015f5a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015f40:	e002      	b.n	8015f48 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d007      	beq.n	8015f5e <LinkedListGetPrevious+0x46>
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	683a      	ldr	r2, [r7, #0]
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d1f4      	bne.n	8015f42 <LinkedListGetPrevious+0x2a>
 8015f58:	e001      	b.n	8015f5e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015f5e:	68fb      	ldr	r3, [r7, #12]
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3714      	adds	r7, #20
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bc80      	pop	{r7}
 8015f68:	4770      	bx	lr

08015f6a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015f6a:	b580      	push	{r7, lr}
 8015f6c:	b084      	sub	sp, #16
 8015f6e:	af00      	add	r7, sp, #0
 8015f70:	6078      	str	r0, [r7, #4]
 8015f72:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d002      	beq.n	8015f80 <LinkedListRemove+0x16>
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d101      	bne.n	8015f84 <LinkedListRemove+0x1a>
    {
        return false;
 8015f80:	2300      	movs	r3, #0
 8015f82:	e020      	b.n	8015fc6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f7ff ffc6 	bl	8015f18 <LinkedListGetPrevious>
 8015f8c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	683a      	ldr	r2, [r7, #0]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	d103      	bne.n	8015fa0 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	681a      	ldr	r2, [r3, #0]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	683a      	ldr	r2, [r7, #0]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d102      	bne.n	8015fb0 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	68fa      	ldr	r2, [r7, #12]
 8015fae:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d003      	beq.n	8015fbe <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	601a      	str	r2, [r3, #0]

    return true;
 8015fc4:	2301      	movs	r3, #1
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	3710      	adds	r7, #16
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	bd80      	pop	{r7, pc}
	...

08015fd0 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b083      	sub	sp, #12
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015fda:	79fb      	ldrb	r3, [r7, #7]
 8015fdc:	2b11      	cmp	r3, #17
 8015fde:	bf8c      	ite	hi
 8015fe0:	2201      	movhi	r2, #1
 8015fe2:	2200      	movls	r2, #0
 8015fe4:	b2d2      	uxtb	r2, r2
 8015fe6:	2a00      	cmp	r2, #0
 8015fe8:	d10c      	bne.n	8016004 <IsSticky+0x34>
 8015fea:	2201      	movs	r2, #1
 8015fec:	409a      	lsls	r2, r3
 8015fee:	4b08      	ldr	r3, [pc, #32]	; (8016010 <IsSticky+0x40>)
 8015ff0:	4013      	ands	r3, r2
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	bf14      	ite	ne
 8015ff6:	2301      	movne	r3, #1
 8015ff8:	2300      	moveq	r3, #0
 8015ffa:	b2db      	uxtb	r3, r3
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d001      	beq.n	8016004 <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8016000:	2301      	movs	r3, #1
 8016002:	e000      	b.n	8016006 <IsSticky+0x36>
        default:
            return false;
 8016004:	2300      	movs	r3, #0
    }
}
 8016006:	4618      	mov	r0, r3
 8016008:	370c      	adds	r7, #12
 801600a:	46bd      	mov	sp, r7
 801600c:	bc80      	pop	{r7}
 801600e:	4770      	bx	lr
 8016010:	00020720 	.word	0x00020720

08016014 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8016014:	b480      	push	{r7}
 8016016:	b083      	sub	sp, #12
 8016018:	af00      	add	r7, sp, #0
 801601a:	4603      	mov	r3, r0
 801601c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 801601e:	2300      	movs	r3, #0
    }
}
 8016020:	4618      	mov	r0, r3
 8016022:	370c      	adds	r7, #12
 8016024:	46bd      	mov	sp, r7
 8016026:	bc80      	pop	{r7}
 8016028:	4770      	bx	lr
	...

0801602c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801602c:	b580      	push	{r7, lr}
 801602e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8016030:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8016034:	2100      	movs	r1, #0
 8016036:	4804      	ldr	r0, [pc, #16]	; (8016048 <LoRaMacCommandsInit+0x1c>)
 8016038:	f005 fbfa 	bl	801b830 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801603c:	4802      	ldr	r0, [pc, #8]	; (8016048 <LoRaMacCommandsInit+0x1c>)
 801603e:	f7ff ff2e 	bl	8015e9e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8016042:	2300      	movs	r3, #0
}
 8016044:	4618      	mov	r0, r3
 8016046:	bd80      	pop	{r7, pc}
 8016048:	20001894 	.word	0x20001894

0801604c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b086      	sub	sp, #24
 8016050:	af00      	add	r7, sp, #0
 8016052:	4603      	mov	r3, r0
 8016054:	60b9      	str	r1, [r7, #8]
 8016056:	607a      	str	r2, [r7, #4]
 8016058:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801605a:	68bb      	ldr	r3, [r7, #8]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d101      	bne.n	8016064 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8016060:	2301      	movs	r3, #1
 8016062:	e03b      	b.n	80160dc <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8016064:	f7ff fee0 	bl	8015e28 <MallocNewMacCommandSlot>
 8016068:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801606a:	697b      	ldr	r3, [r7, #20]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d101      	bne.n	8016074 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8016070:	2302      	movs	r3, #2
 8016072:	e033      	b.n	80160dc <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8016074:	6979      	ldr	r1, [r7, #20]
 8016076:	481b      	ldr	r0, [pc, #108]	; (80160e4 <LoRaMacCommandsAddCmd+0x98>)
 8016078:	f7ff ff26 	bl	8015ec8 <LinkedListAdd>
 801607c:	4603      	mov	r3, r0
 801607e:	f083 0301 	eor.w	r3, r3, #1
 8016082:	b2db      	uxtb	r3, r3
 8016084:	2b00      	cmp	r3, #0
 8016086:	d001      	beq.n	801608c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8016088:	2305      	movs	r3, #5
 801608a:	e027      	b.n	80160dc <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	7bfa      	ldrb	r2, [r7, #15]
 8016090:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8016092:	697b      	ldr	r3, [r7, #20]
 8016094:	687a      	ldr	r2, [r7, #4]
 8016096:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	3305      	adds	r3, #5
 801609c:	687a      	ldr	r2, [r7, #4]
 801609e:	b292      	uxth	r2, r2
 80160a0:	68b9      	ldr	r1, [r7, #8]
 80160a2:	4618      	mov	r0, r3
 80160a4:	f005 fb89 	bl	801b7ba <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80160a8:	7bfb      	ldrb	r3, [r7, #15]
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7ff ff90 	bl	8015fd0 <IsSticky>
 80160b0:	4603      	mov	r3, r0
 80160b2:	461a      	mov	r2, r3
 80160b4:	697b      	ldr	r3, [r7, #20]
 80160b6:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80160b8:	7bfb      	ldrb	r3, [r7, #15]
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7ff ffaa 	bl	8016014 <IsConfirmationRequired>
 80160c0:	4603      	mov	r3, r0
 80160c2:	461a      	mov	r2, r3
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80160c8:	4b06      	ldr	r3, [pc, #24]	; (80160e4 <LoRaMacCommandsAddCmd+0x98>)
 80160ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	4413      	add	r3, r2
 80160d2:	3301      	adds	r3, #1
 80160d4:	4a03      	ldr	r2, [pc, #12]	; (80160e4 <LoRaMacCommandsAddCmd+0x98>)
 80160d6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80160da:	2300      	movs	r3, #0
}
 80160dc:	4618      	mov	r0, r3
 80160de:	3718      	adds	r7, #24
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}
 80160e4:	20001894 	.word	0x20001894

080160e8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d101      	bne.n	80160fa <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80160f6:	2301      	movs	r3, #1
 80160f8:	e021      	b.n	801613e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80160fa:	6879      	ldr	r1, [r7, #4]
 80160fc:	4812      	ldr	r0, [pc, #72]	; (8016148 <LoRaMacCommandsRemoveCmd+0x60>)
 80160fe:	f7ff ff34 	bl	8015f6a <LinkedListRemove>
 8016102:	4603      	mov	r3, r0
 8016104:	f083 0301 	eor.w	r3, r3, #1
 8016108:	b2db      	uxtb	r3, r3
 801610a:	2b00      	cmp	r3, #0
 801610c:	d001      	beq.n	8016112 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801610e:	2303      	movs	r3, #3
 8016110:	e015      	b.n	801613e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8016112:	4b0d      	ldr	r3, [pc, #52]	; (8016148 <LoRaMacCommandsRemoveCmd+0x60>)
 8016114:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	1ad3      	subs	r3, r2, r3
 801611e:	3b01      	subs	r3, #1
 8016120:	4a09      	ldr	r2, [pc, #36]	; (8016148 <LoRaMacCommandsRemoveCmd+0x60>)
 8016122:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f7ff fea6 	bl	8015e78 <FreeMacCommandSlot>
 801612c:	4603      	mov	r3, r0
 801612e:	f083 0301 	eor.w	r3, r3, #1
 8016132:	b2db      	uxtb	r3, r3
 8016134:	2b00      	cmp	r3, #0
 8016136:	d001      	beq.n	801613c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8016138:	2305      	movs	r3, #5
 801613a:	e000      	b.n	801613e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801613c:	2300      	movs	r3, #0
}
 801613e:	4618      	mov	r0, r3
 8016140:	3708      	adds	r7, #8
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	20001894 	.word	0x20001894

0801614c <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 801614c:	b480      	push	{r7}
 801614e:	b085      	sub	sp, #20
 8016150:	af00      	add	r7, sp, #0
 8016152:	4603      	mov	r3, r0
 8016154:	6039      	str	r1, [r7, #0]
 8016156:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8016158:	4b0e      	ldr	r3, [pc, #56]	; (8016194 <LoRaMacCommandsGetCmd+0x48>)
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 801615e:	e002      	b.n	8016166 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d004      	beq.n	8016176 <LoRaMacCommandsGetCmd+0x2a>
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	791b      	ldrb	r3, [r3, #4]
 8016170:	79fa      	ldrb	r2, [r7, #7]
 8016172:	429a      	cmp	r2, r3
 8016174:	d1f4      	bne.n	8016160 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	68fa      	ldr	r2, [r7, #12]
 801617a:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d101      	bne.n	8016186 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8016182:	2303      	movs	r3, #3
 8016184:	e000      	b.n	8016188 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8016186:	2300      	movs	r3, #0
}
 8016188:	4618      	mov	r0, r3
 801618a:	3714      	adds	r7, #20
 801618c:	46bd      	mov	sp, r7
 801618e:	bc80      	pop	{r7}
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop
 8016194:	20001894 	.word	0x20001894

08016198 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b082      	sub	sp, #8
 801619c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801619e:	4b0f      	ldr	r3, [pc, #60]	; (80161dc <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80161a4:	e012      	b.n	80161cc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	7b1b      	ldrb	r3, [r3, #12]
 80161aa:	f083 0301 	eor.w	r3, r3, #1
 80161ae:	b2db      	uxtb	r3, r3
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d008      	beq.n	80161c6 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f7ff ff94 	bl	80160e8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	607b      	str	r3, [r7, #4]
 80161c4:	e002      	b.n	80161cc <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d1e9      	bne.n	80161a6 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80161d2:	2300      	movs	r3, #0
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3708      	adds	r7, #8
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	20001894 	.word	0x20001894

080161e0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b082      	sub	sp, #8
 80161e4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80161e6:	4b13      	ldr	r3, [pc, #76]	; (8016234 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80161ec:	e01a      	b.n	8016224 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	791b      	ldrb	r3, [r3, #4]
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7ff fee9 	bl	8015fd0 <IsSticky>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b00      	cmp	r3, #0
 8016202:	d00d      	beq.n	8016220 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	791b      	ldrb	r3, [r3, #4]
 8016208:	4618      	mov	r0, r3
 801620a:	f7ff ff03 	bl	8016014 <IsConfirmationRequired>
 801620e:	4603      	mov	r3, r0
 8016210:	f083 0301 	eor.w	r3, r3, #1
 8016214:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8016216:	2b00      	cmp	r3, #0
 8016218:	d002      	beq.n	8016220 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801621a:	6878      	ldr	r0, [r7, #4]
 801621c:	f7ff ff64 	bl	80160e8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d1e1      	bne.n	80161ee <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801622a:	2300      	movs	r3, #0
}
 801622c:	4618      	mov	r0, r3
 801622e:	3708      	adds	r7, #8
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}
 8016234:	20001894 	.word	0x20001894

08016238 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8016238:	b480      	push	{r7}
 801623a:	b083      	sub	sp, #12
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d101      	bne.n	801624a <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8016246:	2301      	movs	r3, #1
 8016248:	e005      	b.n	8016256 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 801624a:	4b05      	ldr	r3, [pc, #20]	; (8016260 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 801624c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8016254:	2300      	movs	r3, #0
}
 8016256:	4618      	mov	r0, r3
 8016258:	370c      	adds	r7, #12
 801625a:	46bd      	mov	sp, r7
 801625c:	bc80      	pop	{r7}
 801625e:	4770      	bx	lr
 8016260:	20001894 	.word	0x20001894

08016264 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b088      	sub	sp, #32
 8016268:	af00      	add	r7, sp, #0
 801626a:	60f8      	str	r0, [r7, #12]
 801626c:	60b9      	str	r1, [r7, #8]
 801626e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8016270:	4b25      	ldr	r3, [pc, #148]	; (8016308 <LoRaMacCommandsSerializeCmds+0xa4>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8016276:	2300      	movs	r3, #0
 8016278:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d002      	beq.n	8016286 <LoRaMacCommandsSerializeCmds+0x22>
 8016280:	68bb      	ldr	r3, [r7, #8]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d126      	bne.n	80162d4 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8016286:	2301      	movs	r3, #1
 8016288:	e039      	b.n	80162fe <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801628a:	7efb      	ldrb	r3, [r7, #27]
 801628c:	68fa      	ldr	r2, [r7, #12]
 801628e:	1ad2      	subs	r2, r2, r3
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	689b      	ldr	r3, [r3, #8]
 8016294:	3301      	adds	r3, #1
 8016296:	429a      	cmp	r2, r3
 8016298:	d320      	bcc.n	80162dc <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801629a:	7efb      	ldrb	r3, [r7, #27]
 801629c:	1c5a      	adds	r2, r3, #1
 801629e:	76fa      	strb	r2, [r7, #27]
 80162a0:	461a      	mov	r2, r3
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	4413      	add	r3, r2
 80162a6:	69fa      	ldr	r2, [r7, #28]
 80162a8:	7912      	ldrb	r2, [r2, #4]
 80162aa:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80162ac:	7efb      	ldrb	r3, [r7, #27]
 80162ae:	687a      	ldr	r2, [r7, #4]
 80162b0:	18d0      	adds	r0, r2, r3
 80162b2:	69fb      	ldr	r3, [r7, #28]
 80162b4:	1d59      	adds	r1, r3, #5
 80162b6:	69fb      	ldr	r3, [r7, #28]
 80162b8:	689b      	ldr	r3, [r3, #8]
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	461a      	mov	r2, r3
 80162be:	f005 fa7c 	bl	801b7ba <memcpy1>
            itr += curElement->PayloadSize;
 80162c2:	69fb      	ldr	r3, [r7, #28]
 80162c4:	689b      	ldr	r3, [r3, #8]
 80162c6:	b2da      	uxtb	r2, r3
 80162c8:	7efb      	ldrb	r3, [r7, #27]
 80162ca:	4413      	add	r3, r2
 80162cc:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80162d4:	69fb      	ldr	r3, [r7, #28]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d1d7      	bne.n	801628a <LoRaMacCommandsSerializeCmds+0x26>
 80162da:	e009      	b.n	80162f0 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 80162dc:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 80162de:	e007      	b.n	80162f0 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 80162e6:	69f8      	ldr	r0, [r7, #28]
 80162e8:	f7ff fefe 	bl	80160e8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 80162f0:	69fb      	ldr	r3, [r7, #28]
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d1f4      	bne.n	80162e0 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 80162f6:	68b8      	ldr	r0, [r7, #8]
 80162f8:	f7ff ff9e 	bl	8016238 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 80162fc:	2300      	movs	r3, #0
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3720      	adds	r7, #32
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	20001894 	.word	0x20001894

0801630c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 801630c:	b480      	push	{r7}
 801630e:	b085      	sub	sp, #20
 8016310:	af00      	add	r7, sp, #0
 8016312:	4603      	mov	r3, r0
 8016314:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8016316:	2300      	movs	r3, #0
 8016318:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801631a:	79fb      	ldrb	r3, [r7, #7]
 801631c:	3b02      	subs	r3, #2
 801631e:	2b11      	cmp	r3, #17
 8016320:	d850      	bhi.n	80163c4 <LoRaMacCommandsGetCmdSize+0xb8>
 8016322:	a201      	add	r2, pc, #4	; (adr r2, 8016328 <LoRaMacCommandsGetCmdSize+0x1c>)
 8016324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016328:	08016371 	.word	0x08016371
 801632c:	08016377 	.word	0x08016377
 8016330:	0801637d 	.word	0x0801637d
 8016334:	08016383 	.word	0x08016383
 8016338:	08016389 	.word	0x08016389
 801633c:	0801638f 	.word	0x0801638f
 8016340:	08016395 	.word	0x08016395
 8016344:	0801639b 	.word	0x0801639b
 8016348:	080163a1 	.word	0x080163a1
 801634c:	080163c5 	.word	0x080163c5
 8016350:	080163c5 	.word	0x080163c5
 8016354:	080163a7 	.word	0x080163a7
 8016358:	080163c5 	.word	0x080163c5
 801635c:	080163c5 	.word	0x080163c5
 8016360:	080163ad 	.word	0x080163ad
 8016364:	080163b3 	.word	0x080163b3
 8016368:	080163b9 	.word	0x080163b9
 801636c:	080163bf 	.word	0x080163bf
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8016370:	2303      	movs	r3, #3
 8016372:	73fb      	strb	r3, [r7, #15]
            break;
 8016374:	e027      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8016376:	2305      	movs	r3, #5
 8016378:	73fb      	strb	r3, [r7, #15]
            break;
 801637a:	e024      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801637c:	2302      	movs	r3, #2
 801637e:	73fb      	strb	r3, [r7, #15]
            break;
 8016380:	e021      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8016382:	2305      	movs	r3, #5
 8016384:	73fb      	strb	r3, [r7, #15]
            break;
 8016386:	e01e      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8016388:	2301      	movs	r3, #1
 801638a:	73fb      	strb	r3, [r7, #15]
            break;
 801638c:	e01b      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801638e:	2306      	movs	r3, #6
 8016390:	73fb      	strb	r3, [r7, #15]
            break;
 8016392:	e018      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8016394:	2302      	movs	r3, #2
 8016396:	73fb      	strb	r3, [r7, #15]
            break;
 8016398:	e015      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801639a:	2302      	movs	r3, #2
 801639c:	73fb      	strb	r3, [r7, #15]
            break;
 801639e:	e012      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80163a0:	2305      	movs	r3, #5
 80163a2:	73fb      	strb	r3, [r7, #15]
            break;
 80163a4:	e00f      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80163a6:	2306      	movs	r3, #6
 80163a8:	73fb      	strb	r3, [r7, #15]
            break;
 80163aa:	e00c      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80163ac:	2301      	movs	r3, #1
 80163ae:	73fb      	strb	r3, [r7, #15]
            break;
 80163b0:	e009      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80163b2:	2305      	movs	r3, #5
 80163b4:	73fb      	strb	r3, [r7, #15]
            break;
 80163b6:	e006      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80163b8:	2304      	movs	r3, #4
 80163ba:	73fb      	strb	r3, [r7, #15]
            break;
 80163bc:	e003      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80163be:	2304      	movs	r3, #4
 80163c0:	73fb      	strb	r3, [r7, #15]
            break;
 80163c2:	e000      	b.n	80163c6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80163c4:	bf00      	nop
        }
    }
    return cidSize;
 80163c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	3714      	adds	r7, #20
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bc80      	pop	{r7}
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop

080163d4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80163d4:	b480      	push	{r7}
 80163d6:	b083      	sub	sp, #12
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	4a07      	ldr	r2, [pc, #28]	; (80163fc <IncreaseBufferPointer+0x28>)
 80163e0:	4293      	cmp	r3, r2
 80163e2:	d102      	bne.n	80163ea <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80163e4:	4b06      	ldr	r3, [pc, #24]	; (8016400 <IncreaseBufferPointer+0x2c>)
 80163e6:	607b      	str	r3, [r7, #4]
 80163e8:	e002      	b.n	80163f0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	3304      	adds	r3, #4
 80163ee:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80163f0:	687b      	ldr	r3, [r7, #4]
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	370c      	adds	r7, #12
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bc80      	pop	{r7}
 80163fa:	4770      	bx	lr
 80163fc:	20001abc 	.word	0x20001abc
 8016400:	20001aac 	.word	0x20001aac

08016404 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8016404:	b480      	push	{r7}
 8016406:	b083      	sub	sp, #12
 8016408:	af00      	add	r7, sp, #0
 801640a:	4603      	mov	r3, r0
 801640c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801640e:	79fb      	ldrb	r3, [r7, #7]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d101      	bne.n	8016418 <IsListEmpty+0x14>
    {
        return true;
 8016414:	2301      	movs	r3, #1
 8016416:	e000      	b.n	801641a <IsListEmpty+0x16>
    }
    return false;
 8016418:	2300      	movs	r3, #0
}
 801641a:	4618      	mov	r0, r3
 801641c:	370c      	adds	r7, #12
 801641e:	46bd      	mov	sp, r7
 8016420:	bc80      	pop	{r7}
 8016422:	4770      	bx	lr

08016424 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8016424:	b480      	push	{r7}
 8016426:	b083      	sub	sp, #12
 8016428:	af00      	add	r7, sp, #0
 801642a:	4603      	mov	r3, r0
 801642c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801642e:	79fb      	ldrb	r3, [r7, #7]
 8016430:	2b04      	cmp	r3, #4
 8016432:	d901      	bls.n	8016438 <IsListFull+0x14>
    {
        return true;
 8016434:	2301      	movs	r3, #1
 8016436:	e000      	b.n	801643a <IsListFull+0x16>
    }
    return false;
 8016438:	2300      	movs	r3, #0
}
 801643a:	4618      	mov	r0, r3
 801643c:	370c      	adds	r7, #12
 801643e:	46bd      	mov	sp, r7
 8016440:	bc80      	pop	{r7}
 8016442:	4770      	bx	lr

08016444 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b086      	sub	sp, #24
 8016448:	af00      	add	r7, sp, #0
 801644a:	4603      	mov	r3, r0
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
 8016450:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8016452:	68bb      	ldr	r3, [r7, #8]
 8016454:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016456:	4b13      	ldr	r3, [pc, #76]	; (80164a4 <GetElement+0x60>)
 8016458:	f893 3020 	ldrb.w	r3, [r3, #32]
 801645c:	4618      	mov	r0, r3
 801645e:	f7ff ffd1 	bl	8016404 <IsListEmpty>
 8016462:	4603      	mov	r3, r0
 8016464:	2b00      	cmp	r3, #0
 8016466:	d001      	beq.n	801646c <GetElement+0x28>
    {
        return NULL;
 8016468:	2300      	movs	r3, #0
 801646a:	e017      	b.n	801649c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801646c:	2300      	movs	r3, #0
 801646e:	74fb      	strb	r3, [r7, #19]
 8016470:	e00d      	b.n	801648e <GetElement+0x4a>
    {
        if( element->Request == request )
 8016472:	697b      	ldr	r3, [r7, #20]
 8016474:	781b      	ldrb	r3, [r3, #0]
 8016476:	7bfa      	ldrb	r2, [r7, #15]
 8016478:	429a      	cmp	r2, r3
 801647a:	d101      	bne.n	8016480 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	e00d      	b.n	801649c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016480:	6978      	ldr	r0, [r7, #20]
 8016482:	f7ff ffa7 	bl	80163d4 <IncreaseBufferPointer>
 8016486:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016488:	7cfb      	ldrb	r3, [r7, #19]
 801648a:	3301      	adds	r3, #1
 801648c:	74fb      	strb	r3, [r7, #19]
 801648e:	4b05      	ldr	r3, [pc, #20]	; (80164a4 <GetElement+0x60>)
 8016490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016494:	7cfa      	ldrb	r2, [r7, #19]
 8016496:	429a      	cmp	r2, r3
 8016498:	d3eb      	bcc.n	8016472 <GetElement+0x2e>
    }

    return NULL;
 801649a:	2300      	movs	r3, #0
}
 801649c:	4618      	mov	r0, r3
 801649e:	3718      	adds	r7, #24
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	20001aa0 	.word	0x20001aa0

080164a8 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b082      	sub	sp, #8
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80164b0:	4a0c      	ldr	r2, [pc, #48]	; (80164e4 <LoRaMacConfirmQueueInit+0x3c>)
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80164b6:	4b0b      	ldr	r3, [pc, #44]	; (80164e4 <LoRaMacConfirmQueueInit+0x3c>)
 80164b8:	2200      	movs	r2, #0
 80164ba:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80164be:	4b09      	ldr	r3, [pc, #36]	; (80164e4 <LoRaMacConfirmQueueInit+0x3c>)
 80164c0:	4a09      	ldr	r2, [pc, #36]	; (80164e8 <LoRaMacConfirmQueueInit+0x40>)
 80164c2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80164c4:	4b07      	ldr	r3, [pc, #28]	; (80164e4 <LoRaMacConfirmQueueInit+0x3c>)
 80164c6:	4a08      	ldr	r2, [pc, #32]	; (80164e8 <LoRaMacConfirmQueueInit+0x40>)
 80164c8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80164ca:	2214      	movs	r2, #20
 80164cc:	21ff      	movs	r1, #255	; 0xff
 80164ce:	4806      	ldr	r0, [pc, #24]	; (80164e8 <LoRaMacConfirmQueueInit+0x40>)
 80164d0:	f005 f9ae 	bl	801b830 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80164d4:	4b03      	ldr	r3, [pc, #12]	; (80164e4 <LoRaMacConfirmQueueInit+0x3c>)
 80164d6:	2201      	movs	r2, #1
 80164d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80164dc:	bf00      	nop
 80164de:	3708      	adds	r7, #8
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}
 80164e4:	20001aa0 	.word	0x20001aa0
 80164e8:	20001aac 	.word	0x20001aac

080164ec <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b082      	sub	sp, #8
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80164f4:	4b19      	ldr	r3, [pc, #100]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 80164f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80164fa:	4618      	mov	r0, r3
 80164fc:	f7ff ff92 	bl	8016424 <IsListFull>
 8016500:	4603      	mov	r3, r0
 8016502:	2b00      	cmp	r3, #0
 8016504:	d001      	beq.n	801650a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8016506:	2300      	movs	r3, #0
 8016508:	e024      	b.n	8016554 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801650a:	4b14      	ldr	r3, [pc, #80]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 801650c:	689b      	ldr	r3, [r3, #8]
 801650e:	687a      	ldr	r2, [r7, #4]
 8016510:	7812      	ldrb	r2, [r2, #0]
 8016512:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8016514:	4b11      	ldr	r3, [pc, #68]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 8016516:	689b      	ldr	r3, [r3, #8]
 8016518:	687a      	ldr	r2, [r7, #4]
 801651a:	7852      	ldrb	r2, [r2, #1]
 801651c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801651e:	4b0f      	ldr	r3, [pc, #60]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 8016520:	689b      	ldr	r3, [r3, #8]
 8016522:	687a      	ldr	r2, [r7, #4]
 8016524:	78d2      	ldrb	r2, [r2, #3]
 8016526:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8016528:	4b0c      	ldr	r3, [pc, #48]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 801652a:	689b      	ldr	r3, [r3, #8]
 801652c:	687a      	ldr	r2, [r7, #4]
 801652e:	7892      	ldrb	r2, [r2, #2]
 8016530:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8016532:	4b0a      	ldr	r3, [pc, #40]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 8016534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016538:	3301      	adds	r3, #1
 801653a:	b2da      	uxtb	r2, r3
 801653c:	4b07      	ldr	r3, [pc, #28]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 801653e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8016542:	4b06      	ldr	r3, [pc, #24]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 8016544:	689b      	ldr	r3, [r3, #8]
 8016546:	4618      	mov	r0, r3
 8016548:	f7ff ff44 	bl	80163d4 <IncreaseBufferPointer>
 801654c:	4603      	mov	r3, r0
 801654e:	4a03      	ldr	r2, [pc, #12]	; (801655c <LoRaMacConfirmQueueAdd+0x70>)
 8016550:	6093      	str	r3, [r2, #8]

    return true;
 8016552:	2301      	movs	r3, #1
}
 8016554:	4618      	mov	r0, r3
 8016556:	3708      	adds	r7, #8
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}
 801655c:	20001aa0 	.word	0x20001aa0

08016560 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016560:	b580      	push	{r7, lr}
 8016562:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016564:	4b0e      	ldr	r3, [pc, #56]	; (80165a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016566:	f893 3020 	ldrb.w	r3, [r3, #32]
 801656a:	4618      	mov	r0, r3
 801656c:	f7ff ff4a 	bl	8016404 <IsListEmpty>
 8016570:	4603      	mov	r3, r0
 8016572:	2b00      	cmp	r3, #0
 8016574:	d001      	beq.n	801657a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8016576:	2300      	movs	r3, #0
 8016578:	e010      	b.n	801659c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801657a:	4b09      	ldr	r3, [pc, #36]	; (80165a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801657c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016580:	3b01      	subs	r3, #1
 8016582:	b2da      	uxtb	r2, r3
 8016584:	4b06      	ldr	r3, [pc, #24]	; (80165a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016586:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801658a:	4b05      	ldr	r3, [pc, #20]	; (80165a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801658c:	685b      	ldr	r3, [r3, #4]
 801658e:	4618      	mov	r0, r3
 8016590:	f7ff ff20 	bl	80163d4 <IncreaseBufferPointer>
 8016594:	4603      	mov	r3, r0
 8016596:	4a02      	ldr	r2, [pc, #8]	; (80165a0 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016598:	6053      	str	r3, [r2, #4]

    return true;
 801659a:	2301      	movs	r3, #1
}
 801659c:	4618      	mov	r0, r3
 801659e:	bd80      	pop	{r7, pc}
 80165a0:	20001aa0 	.word	0x20001aa0

080165a4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b084      	sub	sp, #16
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	4603      	mov	r3, r0
 80165ac:	460a      	mov	r2, r1
 80165ae:	71fb      	strb	r3, [r7, #7]
 80165b0:	4613      	mov	r3, r2
 80165b2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80165b4:	2300      	movs	r3, #0
 80165b6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80165b8:	4b10      	ldr	r3, [pc, #64]	; (80165fc <LoRaMacConfirmQueueSetStatus+0x58>)
 80165ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80165be:	4618      	mov	r0, r3
 80165c0:	f7ff ff20 	bl	8016404 <IsListEmpty>
 80165c4:	4603      	mov	r3, r0
 80165c6:	f083 0301 	eor.w	r3, r3, #1
 80165ca:	b2db      	uxtb	r3, r3
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d011      	beq.n	80165f4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80165d0:	4b0a      	ldr	r3, [pc, #40]	; (80165fc <LoRaMacConfirmQueueSetStatus+0x58>)
 80165d2:	6859      	ldr	r1, [r3, #4]
 80165d4:	4b09      	ldr	r3, [pc, #36]	; (80165fc <LoRaMacConfirmQueueSetStatus+0x58>)
 80165d6:	689a      	ldr	r2, [r3, #8]
 80165d8:	79bb      	ldrb	r3, [r7, #6]
 80165da:	4618      	mov	r0, r3
 80165dc:	f7ff ff32 	bl	8016444 <GetElement>
 80165e0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d005      	beq.n	80165f4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	79fa      	ldrb	r2, [r7, #7]
 80165ec:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	2201      	movs	r2, #1
 80165f2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80165f4:	bf00      	nop
 80165f6:	3710      	adds	r7, #16
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bd80      	pop	{r7, pc}
 80165fc:	20001aa0 	.word	0x20001aa0

08016600 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	4603      	mov	r3, r0
 8016608:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801660a:	2300      	movs	r3, #0
 801660c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801660e:	4b10      	ldr	r3, [pc, #64]	; (8016650 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016614:	4618      	mov	r0, r3
 8016616:	f7ff fef5 	bl	8016404 <IsListEmpty>
 801661a:	4603      	mov	r3, r0
 801661c:	f083 0301 	eor.w	r3, r3, #1
 8016620:	b2db      	uxtb	r3, r3
 8016622:	2b00      	cmp	r3, #0
 8016624:	d00e      	beq.n	8016644 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016626:	4b0a      	ldr	r3, [pc, #40]	; (8016650 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016628:	6859      	ldr	r1, [r3, #4]
 801662a:	4b09      	ldr	r3, [pc, #36]	; (8016650 <LoRaMacConfirmQueueGetStatus+0x50>)
 801662c:	689a      	ldr	r2, [r3, #8]
 801662e:	79fb      	ldrb	r3, [r7, #7]
 8016630:	4618      	mov	r0, r3
 8016632:	f7ff ff07 	bl	8016444 <GetElement>
 8016636:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d002      	beq.n	8016644 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	785b      	ldrb	r3, [r3, #1]
 8016642:	e000      	b.n	8016646 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016644:	2301      	movs	r3, #1
}
 8016646:	4618      	mov	r0, r3
 8016648:	3710      	adds	r7, #16
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	20001aa0 	.word	0x20001aa0

08016654 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b084      	sub	sp, #16
 8016658:	af00      	add	r7, sp, #0
 801665a:	4603      	mov	r3, r0
 801665c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801665e:	4b16      	ldr	r3, [pc, #88]	; (80166b8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8016664:	4a14      	ldr	r2, [pc, #80]	; (80166b8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016666:	79fb      	ldrb	r3, [r7, #7]
 8016668:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801666c:	4b12      	ldr	r3, [pc, #72]	; (80166b8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801666e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016672:	4618      	mov	r0, r3
 8016674:	f7ff fec6 	bl	8016404 <IsListEmpty>
 8016678:	4603      	mov	r3, r0
 801667a:	f083 0301 	eor.w	r3, r3, #1
 801667e:	b2db      	uxtb	r3, r3
 8016680:	2b00      	cmp	r3, #0
 8016682:	d015      	beq.n	80166b0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	79fa      	ldrb	r2, [r7, #7]
 8016688:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	78db      	ldrb	r3, [r3, #3]
 801668e:	f083 0301 	eor.w	r3, r3, #1
 8016692:	b2db      	uxtb	r3, r3
 8016694:	2b00      	cmp	r3, #0
 8016696:	d002      	beq.n	801669e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	2201      	movs	r2, #1
 801669c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801669e:	68f8      	ldr	r0, [r7, #12]
 80166a0:	f7ff fe98 	bl	80163d4 <IncreaseBufferPointer>
 80166a4:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80166a6:	4b04      	ldr	r3, [pc, #16]	; (80166b8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80166a8:	689b      	ldr	r3, [r3, #8]
 80166aa:	68fa      	ldr	r2, [r7, #12]
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d1e9      	bne.n	8016684 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80166b0:	bf00      	nop
 80166b2:	3710      	adds	r7, #16
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}
 80166b8:	20001aa0 	.word	0x20001aa0

080166bc <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b082      	sub	sp, #8
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	4603      	mov	r3, r0
 80166c4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80166c6:	4b09      	ldr	r3, [pc, #36]	; (80166ec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80166c8:	6859      	ldr	r1, [r3, #4]
 80166ca:	4b08      	ldr	r3, [pc, #32]	; (80166ec <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80166cc:	689a      	ldr	r2, [r3, #8]
 80166ce:	79fb      	ldrb	r3, [r7, #7]
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7ff feb7 	bl	8016444 <GetElement>
 80166d6:	4603      	mov	r3, r0
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d001      	beq.n	80166e0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80166dc:	2301      	movs	r3, #1
 80166de:	e000      	b.n	80166e2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80166e0:	2300      	movs	r3, #0
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	3708      	adds	r7, #8
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd80      	pop	{r7, pc}
 80166ea:	bf00      	nop
 80166ec:	20001aa0 	.word	0x20001aa0

080166f0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b084      	sub	sp, #16
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80166f8:	4b25      	ldr	r3, [pc, #148]	; (8016790 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80166fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80166fe:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8016700:	2300      	movs	r3, #0
 8016702:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8016704:	f107 0308 	add.w	r3, r7, #8
 8016708:	2204      	movs	r2, #4
 801670a:	2100      	movs	r1, #0
 801670c:	4618      	mov	r0, r3
 801670e:	f005 f88f 	bl	801b830 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8016712:	2300      	movs	r3, #0
 8016714:	73fb      	strb	r3, [r7, #15]
 8016716:	e032      	b.n	801677e <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8016718:	4b1d      	ldr	r3, [pc, #116]	; (8016790 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801671a:	685b      	ldr	r3, [r3, #4]
 801671c:	781a      	ldrb	r2, [r3, #0]
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8016722:	4b1b      	ldr	r3, [pc, #108]	; (8016790 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016724:	685b      	ldr	r3, [r3, #4]
 8016726:	785a      	ldrb	r2, [r3, #1]
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801672c:	4b18      	ldr	r3, [pc, #96]	; (8016790 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	789b      	ldrb	r3, [r3, #2]
 8016732:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8016734:	7b7b      	ldrb	r3, [r7, #13]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d005      	beq.n	8016746 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801673a:	4b15      	ldr	r3, [pc, #84]	; (8016790 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	689b      	ldr	r3, [r3, #8]
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	4798      	blx	r3
 8016744:	e00b      	b.n	801675e <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8016746:	4b12      	ldr	r3, [pc, #72]	; (8016790 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016748:	685b      	ldr	r3, [r3, #4]
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801674e:	4b10      	ldr	r3, [pc, #64]	; (8016790 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016750:	685b      	ldr	r3, [r3, #4]
 8016752:	785b      	ldrb	r3, [r3, #1]
 8016754:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8016756:	4b0e      	ldr	r3, [pc, #56]	; (8016790 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016758:	685b      	ldr	r3, [r3, #4]
 801675a:	78db      	ldrb	r3, [r3, #3]
 801675c:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801675e:	f7ff feff 	bl	8016560 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8016762:	7b7b      	ldrb	r3, [r7, #13]
 8016764:	f083 0301 	eor.w	r3, r3, #1
 8016768:	b2db      	uxtb	r3, r3
 801676a:	2b00      	cmp	r3, #0
 801676c:	d004      	beq.n	8016778 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801676e:	f107 0308 	add.w	r3, r7, #8
 8016772:	4618      	mov	r0, r3
 8016774:	f7ff feba 	bl	80164ec <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016778:	7bfb      	ldrb	r3, [r7, #15]
 801677a:	3301      	adds	r3, #1
 801677c:	73fb      	strb	r3, [r7, #15]
 801677e:	7bfa      	ldrb	r2, [r7, #15]
 8016780:	7bbb      	ldrb	r3, [r7, #14]
 8016782:	429a      	cmp	r2, r3
 8016784:	d3c8      	bcc.n	8016718 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8016786:	bf00      	nop
 8016788:	bf00      	nop
 801678a:	3710      	adds	r7, #16
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	20001aa0 	.word	0x20001aa0

08016794 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8016794:	b480      	push	{r7}
 8016796:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016798:	4b03      	ldr	r3, [pc, #12]	; (80167a8 <LoRaMacConfirmQueueGetCnt+0x14>)
 801679a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801679e:	4618      	mov	r0, r3
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bc80      	pop	{r7}
 80167a4:	4770      	bx	lr
 80167a6:	bf00      	nop
 80167a8:	20001aa0 	.word	0x20001aa0

080167ac <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80167b0:	4b06      	ldr	r3, [pc, #24]	; (80167cc <LoRaMacConfirmQueueIsFull+0x20>)
 80167b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7ff fe34 	bl	8016424 <IsListFull>
 80167bc:	4603      	mov	r3, r0
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d001      	beq.n	80167c6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80167c2:	2301      	movs	r3, #1
 80167c4:	e000      	b.n	80167c8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80167c6:	2300      	movs	r3, #0
    }
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	20001aa0 	.word	0x20001aa0

080167d0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b08e      	sub	sp, #56	; 0x38
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	607b      	str	r3, [r7, #4]
 80167da:	460b      	mov	r3, r1
 80167dc:	817b      	strh	r3, [r7, #10]
 80167de:	4613      	mov	r3, r2
 80167e0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d101      	bne.n	80167ec <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80167e8:	2309      	movs	r3, #9
 80167ea:	e086      	b.n	80168fa <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80167ec:	2300      	movs	r3, #0
 80167ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80167f2:	2301      	movs	r3, #1
 80167f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80167f6:	2300      	movs	r3, #0
 80167f8:	623b      	str	r3, [r7, #32]
 80167fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80167fe:	2200      	movs	r2, #0
 8016800:	601a      	str	r2, [r3, #0]
 8016802:	605a      	str	r2, [r3, #4]
 8016804:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8016806:	2300      	movs	r3, #0
 8016808:	613b      	str	r3, [r7, #16]
 801680a:	f107 0314 	add.w	r3, r7, #20
 801680e:	2200      	movs	r2, #0
 8016810:	601a      	str	r2, [r3, #0]
 8016812:	605a      	str	r2, [r3, #4]
 8016814:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8016816:	2301      	movs	r3, #1
 8016818:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801681a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801681e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	b2db      	uxtb	r3, r3
 8016824:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	0a1b      	lsrs	r3, r3, #8
 801682a:	b2db      	uxtb	r3, r3
 801682c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	0c1b      	lsrs	r3, r3, #16
 8016832:	b2db      	uxtb	r3, r3
 8016834:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	0e1b      	lsrs	r3, r3, #24
 801683a:	b2db      	uxtb	r3, r3
 801683c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801683e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016840:	b2db      	uxtb	r3, r3
 8016842:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8016844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016846:	0a1b      	lsrs	r3, r3, #8
 8016848:	b2db      	uxtb	r3, r3
 801684a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801684c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801684e:	0c1b      	lsrs	r3, r3, #16
 8016850:	b2db      	uxtb	r3, r3
 8016852:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8016854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016856:	0e1b      	lsrs	r3, r3, #24
 8016858:	b2db      	uxtb	r3, r3
 801685a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801685c:	e048      	b.n	80168f0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801685e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016860:	b2db      	uxtb	r3, r3
 8016862:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8016864:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016866:	3301      	adds	r3, #1
 8016868:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801686a:	f107 0320 	add.w	r3, r7, #32
 801686e:	7a7a      	ldrb	r2, [r7, #9]
 8016870:	f107 0010 	add.w	r0, r7, #16
 8016874:	2110      	movs	r1, #16
 8016876:	f7f8 fa77 	bl	800ed68 <SecureElementAesEncrypt>
 801687a:	4603      	mov	r3, r0
 801687c:	2b00      	cmp	r3, #0
 801687e:	d001      	beq.n	8016884 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016880:	230e      	movs	r3, #14
 8016882:	e03a      	b.n	80168fa <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016884:	2300      	movs	r3, #0
 8016886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801688a:	e01e      	b.n	80168ca <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801688c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016894:	4413      	add	r3, r2
 8016896:	461a      	mov	r2, r3
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	4413      	add	r3, r2
 801689c:	7819      	ldrb	r1, [r3, #0]
 801689e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80168a2:	3338      	adds	r3, #56	; 0x38
 80168a4:	443b      	add	r3, r7
 80168a6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80168aa:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80168ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80168b2:	4403      	add	r3, r0
 80168b4:	4618      	mov	r0, r3
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	4403      	add	r3, r0
 80168ba:	404a      	eors	r2, r1
 80168bc:	b2d2      	uxtb	r2, r2
 80168be:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80168c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80168c4:	3301      	adds	r3, #1
 80168c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80168ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80168ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80168d2:	2a10      	cmp	r2, #16
 80168d4:	bfa8      	it	ge
 80168d6:	2210      	movge	r2, #16
 80168d8:	b212      	sxth	r2, r2
 80168da:	4293      	cmp	r3, r2
 80168dc:	dbd6      	blt.n	801688c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80168de:	897b      	ldrh	r3, [r7, #10]
 80168e0:	3b10      	subs	r3, #16
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80168e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80168ea:	3310      	adds	r3, #16
 80168ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80168f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	dcb2      	bgt.n	801685e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80168f8:	2300      	movs	r3, #0
}
 80168fa:	4618      	mov	r0, r3
 80168fc:	3738      	adds	r7, #56	; 0x38
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}

08016902 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8016902:	b490      	push	{r4, r7}
 8016904:	b082      	sub	sp, #8
 8016906:	af00      	add	r7, sp, #0
 8016908:	4604      	mov	r4, r0
 801690a:	4608      	mov	r0, r1
 801690c:	4611      	mov	r1, r2
 801690e:	461a      	mov	r2, r3
 8016910:	4623      	mov	r3, r4
 8016912:	80fb      	strh	r3, [r7, #6]
 8016914:	4603      	mov	r3, r0
 8016916:	717b      	strb	r3, [r7, #5]
 8016918:	460b      	mov	r3, r1
 801691a:	713b      	strb	r3, [r7, #4]
 801691c:	4613      	mov	r3, r2
 801691e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8016920:	69bb      	ldr	r3, [r7, #24]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d101      	bne.n	801692a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016926:	2309      	movs	r3, #9
 8016928:	e04e      	b.n	80169c8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801692a:	69bb      	ldr	r3, [r7, #24]
 801692c:	2249      	movs	r2, #73	; 0x49
 801692e:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8016930:	69bb      	ldr	r3, [r7, #24]
 8016932:	3301      	adds	r3, #1
 8016934:	2200      	movs	r2, #0
 8016936:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016938:	69bb      	ldr	r3, [r7, #24]
 801693a:	3302      	adds	r3, #2
 801693c:	2200      	movs	r2, #0
 801693e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016940:	69bb      	ldr	r3, [r7, #24]
 8016942:	3303      	adds	r3, #3
 8016944:	2200      	movs	r2, #0
 8016946:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016948:	69bb      	ldr	r3, [r7, #24]
 801694a:	3304      	adds	r3, #4
 801694c:	2200      	movs	r2, #0
 801694e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016950:	69bb      	ldr	r3, [r7, #24]
 8016952:	3305      	adds	r3, #5
 8016954:	78fa      	ldrb	r2, [r7, #3]
 8016956:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016958:	69bb      	ldr	r3, [r7, #24]
 801695a:	3306      	adds	r3, #6
 801695c:	693a      	ldr	r2, [r7, #16]
 801695e:	b2d2      	uxtb	r2, r2
 8016960:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8016962:	693b      	ldr	r3, [r7, #16]
 8016964:	0a1a      	lsrs	r2, r3, #8
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	3307      	adds	r3, #7
 801696a:	b2d2      	uxtb	r2, r2
 801696c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801696e:	693b      	ldr	r3, [r7, #16]
 8016970:	0c1a      	lsrs	r2, r3, #16
 8016972:	69bb      	ldr	r3, [r7, #24]
 8016974:	3308      	adds	r3, #8
 8016976:	b2d2      	uxtb	r2, r2
 8016978:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801697a:	693b      	ldr	r3, [r7, #16]
 801697c:	0e1a      	lsrs	r2, r3, #24
 801697e:	69bb      	ldr	r3, [r7, #24]
 8016980:	3309      	adds	r3, #9
 8016982:	b2d2      	uxtb	r2, r2
 8016984:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8016986:	69bb      	ldr	r3, [r7, #24]
 8016988:	330a      	adds	r3, #10
 801698a:	697a      	ldr	r2, [r7, #20]
 801698c:	b2d2      	uxtb	r2, r2
 801698e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016990:	697b      	ldr	r3, [r7, #20]
 8016992:	0a1a      	lsrs	r2, r3, #8
 8016994:	69bb      	ldr	r3, [r7, #24]
 8016996:	330b      	adds	r3, #11
 8016998:	b2d2      	uxtb	r2, r2
 801699a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801699c:	697b      	ldr	r3, [r7, #20]
 801699e:	0c1a      	lsrs	r2, r3, #16
 80169a0:	69bb      	ldr	r3, [r7, #24]
 80169a2:	330c      	adds	r3, #12
 80169a4:	b2d2      	uxtb	r2, r2
 80169a6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	0e1a      	lsrs	r2, r3, #24
 80169ac:	69bb      	ldr	r3, [r7, #24]
 80169ae:	330d      	adds	r3, #13
 80169b0:	b2d2      	uxtb	r2, r2
 80169b2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80169b4:	69bb      	ldr	r3, [r7, #24]
 80169b6:	330e      	adds	r3, #14
 80169b8:	2200      	movs	r2, #0
 80169ba:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80169bc:	69bb      	ldr	r3, [r7, #24]
 80169be:	330f      	adds	r3, #15
 80169c0:	88fa      	ldrh	r2, [r7, #6]
 80169c2:	b2d2      	uxtb	r2, r2
 80169c4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80169c6:	2300      	movs	r3, #0
}
 80169c8:	4618      	mov	r0, r3
 80169ca:	3708      	adds	r7, #8
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bc90      	pop	{r4, r7}
 80169d0:	4770      	bx	lr

080169d2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80169d2:	b590      	push	{r4, r7, lr}
 80169d4:	b08b      	sub	sp, #44	; 0x2c
 80169d6:	af04      	add	r7, sp, #16
 80169d8:	6078      	str	r0, [r7, #4]
 80169da:	4608      	mov	r0, r1
 80169dc:	4611      	mov	r1, r2
 80169de:	461a      	mov	r2, r3
 80169e0:	4603      	mov	r3, r0
 80169e2:	807b      	strh	r3, [r7, #2]
 80169e4:	460b      	mov	r3, r1
 80169e6:	707b      	strb	r3, [r7, #1]
 80169e8:	4613      	mov	r3, r2
 80169ea:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d002      	beq.n	80169f8 <ComputeCmacB0+0x26>
 80169f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d101      	bne.n	80169fc <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80169f8:	2309      	movs	r3, #9
 80169fa:	e024      	b.n	8016a46 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80169fc:	887b      	ldrh	r3, [r7, #2]
 80169fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a02:	d901      	bls.n	8016a08 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016a04:	230d      	movs	r3, #13
 8016a06:	e01e      	b.n	8016a46 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016a08:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8016a0c:	783a      	ldrb	r2, [r7, #0]
 8016a0e:	7879      	ldrb	r1, [r7, #1]
 8016a10:	8878      	ldrh	r0, [r7, #2]
 8016a12:	f107 0308 	add.w	r3, r7, #8
 8016a16:	9302      	str	r3, [sp, #8]
 8016a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a1a:	9301      	str	r3, [sp, #4]
 8016a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a1e:	9300      	str	r3, [sp, #0]
 8016a20:	4623      	mov	r3, r4
 8016a22:	f7ff ff6e 	bl	8016902 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016a26:	887a      	ldrh	r2, [r7, #2]
 8016a28:	7879      	ldrb	r1, [r7, #1]
 8016a2a:	f107 0008 	add.w	r0, r7, #8
 8016a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a30:	9300      	str	r3, [sp, #0]
 8016a32:	460b      	mov	r3, r1
 8016a34:	6879      	ldr	r1, [r7, #4]
 8016a36:	f7f8 f951 	bl	800ecdc <SecureElementComputeAesCmac>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d001      	beq.n	8016a44 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016a40:	230e      	movs	r3, #14
 8016a42:	e000      	b.n	8016a46 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016a44:	2300      	movs	r3, #0
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	371c      	adds	r7, #28
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	bd90      	pop	{r4, r7, pc}

08016a4e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016a4e:	b590      	push	{r4, r7, lr}
 8016a50:	b0cd      	sub	sp, #308	; 0x134
 8016a52:	af04      	add	r7, sp, #16
 8016a54:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016a58:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016a5c:	6020      	str	r0, [r4, #0]
 8016a5e:	460c      	mov	r4, r1
 8016a60:	4610      	mov	r0, r2
 8016a62:	4619      	mov	r1, r3
 8016a64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a68:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016a6c:	4622      	mov	r2, r4
 8016a6e:	801a      	strh	r2, [r3, #0]
 8016a70:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a74:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016a78:	4602      	mov	r2, r0
 8016a7a:	701a      	strb	r2, [r3, #0]
 8016a7c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016a84:	460a      	mov	r2, r1
 8016a86:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016a88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a8c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d101      	bne.n	8016a9a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a96:	2309      	movs	r3, #9
 8016a98:	e063      	b.n	8016b62 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016a9a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016a9e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016aa2:	881b      	ldrh	r3, [r3, #0]
 8016aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016aa8:	d901      	bls.n	8016aae <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016aaa:	230d      	movs	r3, #13
 8016aac:	e059      	b.n	8016b62 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016aae:	f107 030c 	add.w	r3, r7, #12
 8016ab2:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016ab6:	2100      	movs	r1, #0
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f004 feb9 	bl	801b830 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016abe:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016ac2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016ac6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016aca:	781a      	ldrb	r2, [r3, #0]
 8016acc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016ad0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016ad4:	7819      	ldrb	r1, [r3, #0]
 8016ad6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016ada:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016ade:	8818      	ldrh	r0, [r3, #0]
 8016ae0:	f107 030c 	add.w	r3, r7, #12
 8016ae4:	9302      	str	r3, [sp, #8]
 8016ae6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016aea:	9301      	str	r3, [sp, #4]
 8016aec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016af0:	9300      	str	r3, [sp, #0]
 8016af2:	4623      	mov	r3, r4
 8016af4:	f7ff ff05 	bl	8016902 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016af8:	f107 030c 	add.w	r3, r7, #12
 8016afc:	3310      	adds	r3, #16
 8016afe:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8016b02:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016b06:	8812      	ldrh	r2, [r2, #0]
 8016b08:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016b0c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8016b10:	6809      	ldr	r1, [r1, #0]
 8016b12:	4618      	mov	r0, r3
 8016b14:	f004 fe51 	bl	801b7ba <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016b18:	2306      	movs	r3, #6
 8016b1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8016b1e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016b22:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016b26:	881b      	ldrh	r3, [r3, #0]
 8016b28:	3310      	adds	r3, #16
 8016b2a:	4619      	mov	r1, r3
 8016b2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016b30:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016b34:	781b      	ldrb	r3, [r3, #0]
 8016b36:	f107 000c 	add.w	r0, r7, #12
 8016b3a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016b3e:	f7f8 f8e7 	bl	800ed10 <SecureElementVerifyAesCmac>
 8016b42:	4603      	mov	r3, r0
 8016b44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016b48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d101      	bne.n	8016b54 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016b50:	2300      	movs	r3, #0
 8016b52:	e006      	b.n	8016b62 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016b54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016b58:	2b01      	cmp	r3, #1
 8016b5a:	d101      	bne.n	8016b60 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	e000      	b.n	8016b62 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016b60:	230e      	movs	r3, #14
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd90      	pop	{r4, r7, pc}

08016b6c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016b6c:	b480      	push	{r7}
 8016b6e:	b085      	sub	sp, #20
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	4603      	mov	r3, r0
 8016b74:	6039      	str	r1, [r7, #0]
 8016b76:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016b78:	2300      	movs	r3, #0
 8016b7a:	73fb      	strb	r3, [r7, #15]
 8016b7c:	e011      	b.n	8016ba2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016b7e:	7bfb      	ldrb	r3, [r7, #15]
 8016b80:	4a0c      	ldr	r2, [pc, #48]	; (8016bb4 <GetKeyAddrItem+0x48>)
 8016b82:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016b86:	79fa      	ldrb	r2, [r7, #7]
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d107      	bne.n	8016b9c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016b8c:	7bfb      	ldrb	r3, [r7, #15]
 8016b8e:	009b      	lsls	r3, r3, #2
 8016b90:	4a08      	ldr	r2, [pc, #32]	; (8016bb4 <GetKeyAddrItem+0x48>)
 8016b92:	441a      	add	r2, r3
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016b98:	2300      	movs	r3, #0
 8016b9a:	e006      	b.n	8016baa <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016b9c:	7bfb      	ldrb	r3, [r7, #15]
 8016b9e:	3301      	adds	r3, #1
 8016ba0:	73fb      	strb	r3, [r7, #15]
 8016ba2:	7bfb      	ldrb	r3, [r7, #15]
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d9ea      	bls.n	8016b7e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016ba8:	230b      	movs	r3, #11
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3714      	adds	r7, #20
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bc80      	pop	{r7}
 8016bb2:	4770      	bx	lr
 8016bb4:	20000110 	.word	0x20000110

08016bb8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b088      	sub	sp, #32
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	60b9      	str	r1, [r7, #8]
 8016bc0:	607a      	str	r2, [r7, #4]
 8016bc2:	461a      	mov	r2, r3
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	73fb      	strb	r3, [r7, #15]
 8016bc8:	4613      	mov	r3, r2
 8016bca:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016bcc:	2300      	movs	r3, #0
 8016bce:	613b      	str	r3, [r7, #16]
 8016bd0:	f107 0314 	add.w	r3, r7, #20
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	601a      	str	r2, [r3, #0]
 8016bd8:	605a      	str	r2, [r3, #4]
 8016bda:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8016bdc:	7bfb      	ldrb	r3, [r7, #15]
 8016bde:	2b08      	cmp	r3, #8
 8016be0:	d002      	beq.n	8016be8 <DeriveSessionKey10x+0x30>
 8016be2:	2b09      	cmp	r3, #9
 8016be4:	d003      	beq.n	8016bee <DeriveSessionKey10x+0x36>
 8016be6:	e005      	b.n	8016bf4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8016be8:	2301      	movs	r3, #1
 8016bea:	743b      	strb	r3, [r7, #16]
            break;
 8016bec:	e004      	b.n	8016bf8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8016bee:	2302      	movs	r3, #2
 8016bf0:	743b      	strb	r3, [r7, #16]
            break;
 8016bf2:	e001      	b.n	8016bf8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016bf4:	230a      	movs	r3, #10
 8016bf6:	e02a      	b.n	8016c4e <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	b2db      	uxtb	r3, r3
 8016bfc:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8016bfe:	68bb      	ldr	r3, [r7, #8]
 8016c00:	0a1b      	lsrs	r3, r3, #8
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	0c1b      	lsrs	r3, r3, #16
 8016c0a:	b2db      	uxtb	r3, r3
 8016c0c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	b2db      	uxtb	r3, r3
 8016c12:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	0a1b      	lsrs	r3, r3, #8
 8016c18:	b2db      	uxtb	r3, r3
 8016c1a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	0c1b      	lsrs	r3, r3, #16
 8016c20:	b2db      	uxtb	r3, r3
 8016c22:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016c24:	89bb      	ldrh	r3, [r7, #12]
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016c2a:	89bb      	ldrh	r3, [r7, #12]
 8016c2c:	0a1b      	lsrs	r3, r3, #8
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	b2db      	uxtb	r3, r3
 8016c32:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016c34:	7bfa      	ldrb	r2, [r7, #15]
 8016c36:	f107 0310 	add.w	r3, r7, #16
 8016c3a:	2101      	movs	r1, #1
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7f8 f913 	bl	800ee68 <SecureElementDeriveAndStoreKey>
 8016c42:	4603      	mov	r3, r0
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d001      	beq.n	8016c4c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c48:	230e      	movs	r3, #14
 8016c4a:	e000      	b.n	8016c4e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c4c:	2300      	movs	r3, #0
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	3720      	adds	r7, #32
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}
	...

08016c58 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	4603      	mov	r3, r0
 8016c60:	6039      	str	r1, [r7, #0]
 8016c62:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d101      	bne.n	8016c6e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c6a:	2309      	movs	r3, #9
 8016c6c:	e029      	b.n	8016cc2 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8016c6e:	79fb      	ldrb	r3, [r7, #7]
 8016c70:	3b01      	subs	r3, #1
 8016c72:	2b03      	cmp	r3, #3
 8016c74:	d822      	bhi.n	8016cbc <GetLastFcntDown+0x64>
 8016c76:	a201      	add	r2, pc, #4	; (adr r2, 8016c7c <GetLastFcntDown+0x24>)
 8016c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c7c:	08016c8d 	.word	0x08016c8d
 8016c80:	08016c99 	.word	0x08016c99
 8016c84:	08016ca5 	.word	0x08016ca5
 8016c88:	08016cb1 	.word	0x08016cb1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016c8c:	4b0f      	ldr	r3, [pc, #60]	; (8016ccc <GetLastFcntDown+0x74>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	691a      	ldr	r2, [r3, #16]
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	601a      	str	r2, [r3, #0]
            break;
 8016c96:	e013      	b.n	8016cc0 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016c98:	4b0c      	ldr	r3, [pc, #48]	; (8016ccc <GetLastFcntDown+0x74>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	695a      	ldr	r2, [r3, #20]
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	601a      	str	r2, [r3, #0]
            break;
 8016ca2:	e00d      	b.n	8016cc0 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016ca4:	4b09      	ldr	r3, [pc, #36]	; (8016ccc <GetLastFcntDown+0x74>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	699a      	ldr	r2, [r3, #24]
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	601a      	str	r2, [r3, #0]
            break;
 8016cae:	e007      	b.n	8016cc0 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016cb0:	4b06      	ldr	r3, [pc, #24]	; (8016ccc <GetLastFcntDown+0x74>)
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	69da      	ldr	r2, [r3, #28]
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	601a      	str	r2, [r3, #0]
            break;
 8016cba:	e001      	b.n	8016cc0 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016cbc:	2305      	movs	r3, #5
 8016cbe:	e000      	b.n	8016cc2 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016cc0:	2300      	movs	r3, #0
}
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	370c      	adds	r7, #12
 8016cc6:	46bd      	mov	sp, r7
 8016cc8:	bc80      	pop	{r7}
 8016cca:	4770      	bx	lr
 8016ccc:	20001ac4 	.word	0x20001ac4

08016cd0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b084      	sub	sp, #16
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	6039      	str	r1, [r7, #0]
 8016cda:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016ce0:	f107 020c 	add.w	r2, r7, #12
 8016ce4:	79fb      	ldrb	r3, [r7, #7]
 8016ce6:	4611      	mov	r1, r2
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f7ff ffb5 	bl	8016c58 <GetLastFcntDown>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d001      	beq.n	8016cf8 <CheckFCntDown+0x28>
    {
        return false;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	e00a      	b.n	8016d0e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	683a      	ldr	r2, [r7, #0]
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d803      	bhi.n	8016d08 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8016d00:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d06:	d101      	bne.n	8016d0c <CheckFCntDown+0x3c>
    {
        return true;
 8016d08:	2301      	movs	r3, #1
 8016d0a:	e000      	b.n	8016d0e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8016d0c:	2300      	movs	r3, #0
    }
}
 8016d0e:	4618      	mov	r0, r3
 8016d10:	3710      	adds	r7, #16
 8016d12:	46bd      	mov	sp, r7
 8016d14:	bd80      	pop	{r7, pc}
	...

08016d18 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016d18:	b480      	push	{r7}
 8016d1a:	b083      	sub	sp, #12
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	4603      	mov	r3, r0
 8016d20:	6039      	str	r1, [r7, #0]
 8016d22:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016d24:	79fb      	ldrb	r3, [r7, #7]
 8016d26:	3b01      	subs	r3, #1
 8016d28:	2b03      	cmp	r3, #3
 8016d2a:	d82b      	bhi.n	8016d84 <UpdateFCntDown+0x6c>
 8016d2c:	a201      	add	r2, pc, #4	; (adr r2, 8016d34 <UpdateFCntDown+0x1c>)
 8016d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d32:	bf00      	nop
 8016d34:	08016d45 	.word	0x08016d45
 8016d38:	08016d57 	.word	0x08016d57
 8016d3c:	08016d69 	.word	0x08016d69
 8016d40:	08016d7b 	.word	0x08016d7b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016d44:	4b12      	ldr	r3, [pc, #72]	; (8016d90 <UpdateFCntDown+0x78>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	683a      	ldr	r2, [r7, #0]
 8016d4a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016d4c:	4b10      	ldr	r3, [pc, #64]	; (8016d90 <UpdateFCntDown+0x78>)
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	683a      	ldr	r2, [r7, #0]
 8016d52:	621a      	str	r2, [r3, #32]
            break;
 8016d54:	e017      	b.n	8016d86 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8016d56:	4b0e      	ldr	r3, [pc, #56]	; (8016d90 <UpdateFCntDown+0x78>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	683a      	ldr	r2, [r7, #0]
 8016d5c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8016d5e:	4b0c      	ldr	r3, [pc, #48]	; (8016d90 <UpdateFCntDown+0x78>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	683a      	ldr	r2, [r7, #0]
 8016d64:	621a      	str	r2, [r3, #32]
            break;
 8016d66:	e00e      	b.n	8016d86 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016d68:	4b09      	ldr	r3, [pc, #36]	; (8016d90 <UpdateFCntDown+0x78>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	683a      	ldr	r2, [r7, #0]
 8016d6e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8016d70:	4b07      	ldr	r3, [pc, #28]	; (8016d90 <UpdateFCntDown+0x78>)
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	683a      	ldr	r2, [r7, #0]
 8016d76:	621a      	str	r2, [r3, #32]
            break;
 8016d78:	e005      	b.n	8016d86 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016d7a:	4b05      	ldr	r3, [pc, #20]	; (8016d90 <UpdateFCntDown+0x78>)
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	683a      	ldr	r2, [r7, #0]
 8016d80:	61da      	str	r2, [r3, #28]
            break;
 8016d82:	e000      	b.n	8016d86 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016d84:	bf00      	nop
    }
}
 8016d86:	bf00      	nop
 8016d88:	370c      	adds	r7, #12
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bc80      	pop	{r7}
 8016d8e:	4770      	bx	lr
 8016d90:	20001ac4 	.word	0x20001ac4

08016d94 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016d94:	b480      	push	{r7}
 8016d96:	b083      	sub	sp, #12
 8016d98:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016d9a:	4b18      	ldr	r3, [pc, #96]	; (8016dfc <ResetFCnts+0x68>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	2200      	movs	r2, #0
 8016da0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016da2:	4b16      	ldr	r3, [pc, #88]	; (8016dfc <ResetFCnts+0x68>)
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	f04f 32ff 	mov.w	r2, #4294967295
 8016daa:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016dac:	4b13      	ldr	r3, [pc, #76]	; (8016dfc <ResetFCnts+0x68>)
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	f04f 32ff 	mov.w	r2, #4294967295
 8016db4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016db6:	4b11      	ldr	r3, [pc, #68]	; (8016dfc <ResetFCnts+0x68>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	f04f 32ff 	mov.w	r2, #4294967295
 8016dbe:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016dc0:	4b0e      	ldr	r3, [pc, #56]	; (8016dfc <ResetFCnts+0x68>)
 8016dc2:	681a      	ldr	r2, [r3, #0]
 8016dc4:	4b0d      	ldr	r3, [pc, #52]	; (8016dfc <ResetFCnts+0x68>)
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	6992      	ldr	r2, [r2, #24]
 8016dca:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016dcc:	2300      	movs	r3, #0
 8016dce:	607b      	str	r3, [r7, #4]
 8016dd0:	e00b      	b.n	8016dea <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8016dd2:	4b0a      	ldr	r3, [pc, #40]	; (8016dfc <ResetFCnts+0x68>)
 8016dd4:	681a      	ldr	r2, [r3, #0]
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	3306      	adds	r3, #6
 8016dda:	009b      	lsls	r3, r3, #2
 8016ddc:	4413      	add	r3, r2
 8016dde:	f04f 32ff 	mov.w	r2, #4294967295
 8016de2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	3301      	adds	r3, #1
 8016de8:	607b      	str	r3, [r7, #4]
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	ddf0      	ble.n	8016dd2 <ResetFCnts+0x3e>
    }
}
 8016df0:	bf00      	nop
 8016df2:	bf00      	nop
 8016df4:	370c      	adds	r7, #12
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bc80      	pop	{r7}
 8016dfa:	4770      	bx	lr
 8016dfc:	20001ac4 	.word	0x20001ac4

08016e00 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8016e00:	b480      	push	{r7}
 8016e02:	b083      	sub	sp, #12
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8016e08:	4b06      	ldr	r3, [pc, #24]	; (8016e24 <IsJoinNonce10xOk+0x24>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	689b      	ldr	r3, [r3, #8]
 8016e0e:	687a      	ldr	r2, [r7, #4]
 8016e10:	429a      	cmp	r2, r3
 8016e12:	bf8c      	ite	hi
 8016e14:	2301      	movhi	r3, #1
 8016e16:	2300      	movls	r3, #0
 8016e18:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	370c      	adds	r7, #12
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bc80      	pop	{r7}
 8016e22:	4770      	bx	lr
 8016e24:	20001ac4 	.word	0x20001ac4

08016e28 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d101      	bne.n	8016e3a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016e36:	2308      	movs	r3, #8
 8016e38:	e01c      	b.n	8016e74 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016e3a:	4a10      	ldr	r2, [pc, #64]	; (8016e7c <LoRaMacCryptoInit+0x54>)
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016e40:	4b0e      	ldr	r3, [pc, #56]	; (8016e7c <LoRaMacCryptoInit+0x54>)
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	2228      	movs	r2, #40	; 0x28
 8016e46:	2100      	movs	r1, #0
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f004 fcf1 	bl	801b830 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016e4e:	4b0b      	ldr	r3, [pc, #44]	; (8016e7c <LoRaMacCryptoInit+0x54>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	2201      	movs	r2, #1
 8016e54:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016e56:	4b09      	ldr	r3, [pc, #36]	; (8016e7c <LoRaMacCryptoInit+0x54>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016e5e:	4b07      	ldr	r3, [pc, #28]	; (8016e7c <LoRaMacCryptoInit+0x54>)
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	2201      	movs	r2, #1
 8016e64:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016e66:	4b05      	ldr	r3, [pc, #20]	; (8016e7c <LoRaMacCryptoInit+0x54>)
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2200      	movs	r2, #0
 8016e6c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016e6e:	f7ff ff91 	bl	8016d94 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016e72:	2300      	movs	r3, #0
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	3708      	adds	r7, #8
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	bd80      	pop	{r7, pc}
 8016e7c:	20001ac4 	.word	0x20001ac4

08016e80 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016e80:	b480      	push	{r7}
 8016e82:	b083      	sub	sp, #12
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016e88:	4b04      	ldr	r3, [pc, #16]	; (8016e9c <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	687a      	ldr	r2, [r7, #4]
 8016e8e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016e90:	2300      	movs	r3, #0
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	370c      	adds	r7, #12
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bc80      	pop	{r7}
 8016e9a:	4770      	bx	lr
 8016e9c:	20001ac4 	.word	0x20001ac4

08016ea0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b083      	sub	sp, #12
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d101      	bne.n	8016eb2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016eae:	2309      	movs	r3, #9
 8016eb0:	e006      	b.n	8016ec0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016eb2:	4b06      	ldr	r3, [pc, #24]	; (8016ecc <LoRaMacCryptoGetFCntUp+0x2c>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	1c5a      	adds	r2, r3, #1
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016ebe:	2300      	movs	r3, #0
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	370c      	adds	r7, #12
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	bc80      	pop	{r7}
 8016ec8:	4770      	bx	lr
 8016eca:	bf00      	nop
 8016ecc:	20001ac4 	.word	0x20001ac4

08016ed0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b088      	sub	sp, #32
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	60b9      	str	r1, [r7, #8]
 8016eda:	607a      	str	r2, [r7, #4]
 8016edc:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016ee6:	2312      	movs	r3, #18
 8016ee8:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d101      	bne.n	8016ef4 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ef0:	2309      	movs	r3, #9
 8016ef2:	e035      	b.n	8016f60 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016ef4:	f107 0214 	add.w	r2, r7, #20
 8016ef8:	7bfb      	ldrb	r3, [r7, #15]
 8016efa:	4611      	mov	r1, r2
 8016efc:	4618      	mov	r0, r3
 8016efe:	f7ff feab 	bl	8016c58 <GetLastFcntDown>
 8016f02:	4603      	mov	r3, r0
 8016f04:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016f06:	7efb      	ldrb	r3, [r7, #27]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d001      	beq.n	8016f10 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8016f0c:	7efb      	ldrb	r3, [r7, #27]
 8016f0e:	e027      	b.n	8016f60 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016f10:	697b      	ldr	r3, [r7, #20]
 8016f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f16:	d103      	bne.n	8016f20 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	68ba      	ldr	r2, [r7, #8]
 8016f1c:	601a      	str	r2, [r3, #0]
 8016f1e:	e01e      	b.n	8016f5e <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016f20:	697b      	ldr	r3, [r7, #20]
 8016f22:	b29b      	uxth	r3, r3
 8016f24:	68ba      	ldr	r2, [r7, #8]
 8016f26:	1ad3      	subs	r3, r2, r3
 8016f28:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8016f2a:	69fb      	ldr	r3, [r7, #28]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	dd05      	ble.n	8016f3c <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016f30:	697a      	ldr	r2, [r7, #20]
 8016f32:	69fb      	ldr	r3, [r7, #28]
 8016f34:	441a      	add	r2, r3
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	601a      	str	r2, [r3, #0]
 8016f3a:	e010      	b.n	8016f5e <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8016f3c:	69fb      	ldr	r3, [r7, #28]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d104      	bne.n	8016f4c <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016f42:	697a      	ldr	r2, [r7, #20]
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016f48:	2307      	movs	r3, #7
 8016f4a:	e009      	b.n	8016f60 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016f4c:	697b      	ldr	r3, [r7, #20]
 8016f4e:	0c1b      	lsrs	r3, r3, #16
 8016f50:	041b      	lsls	r3, r3, #16
 8016f52:	68ba      	ldr	r2, [r7, #8]
 8016f54:	4413      	add	r3, r2
 8016f56:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016f5e:	2300      	movs	r3, #0
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3720      	adds	r7, #32
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016f68:	b480      	push	{r7}
 8016f6a:	b085      	sub	sp, #20
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d101      	bne.n	8016f7a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016f76:	2309      	movs	r3, #9
 8016f78:	e019      	b.n	8016fae <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	60fb      	str	r3, [r7, #12]
 8016f7e:	e012      	b.n	8016fa6 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016f80:	4b0d      	ldr	r3, [pc, #52]	; (8016fb8 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016f82:	6819      	ldr	r1, [r3, #0]
 8016f84:	68fa      	ldr	r2, [r7, #12]
 8016f86:	4613      	mov	r3, r2
 8016f88:	005b      	lsls	r3, r3, #1
 8016f8a:	4413      	add	r3, r2
 8016f8c:	011b      	lsls	r3, r3, #4
 8016f8e:	461a      	mov	r2, r3
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	4413      	add	r3, r2
 8016f94:	68fa      	ldr	r2, [r7, #12]
 8016f96:	3206      	adds	r2, #6
 8016f98:	0092      	lsls	r2, r2, #2
 8016f9a:	440a      	add	r2, r1
 8016f9c:	3204      	adds	r2, #4
 8016f9e:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	60fb      	str	r3, [r7, #12]
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	dde9      	ble.n	8016f80 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016fac:	2300      	movs	r3, #0
}
 8016fae:	4618      	mov	r0, r3
 8016fb0:	3714      	adds	r7, #20
 8016fb2:	46bd      	mov	sp, r7
 8016fb4:	bc80      	pop	{r7}
 8016fb6:	4770      	bx	lr
 8016fb8:	20001ac4 	.word	0x20001ac4

08016fbc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016fbc:	b580      	push	{r7, lr}
 8016fbe:	b082      	sub	sp, #8
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	6039      	str	r1, [r7, #0]
 8016fc6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016fc8:	79fb      	ldrb	r3, [r7, #7]
 8016fca:	6839      	ldr	r1, [r7, #0]
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7f7 fe27 	bl	800ec20 <SecureElementSetKey>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d001      	beq.n	8016fdc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016fd8:	230e      	movs	r3, #14
 8016fda:	e021      	b.n	8017020 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016fdc:	79fb      	ldrb	r3, [r7, #7]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d11d      	bne.n	801701e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016fe2:	4b11      	ldr	r3, [pc, #68]	; (8017028 <LoRaMacCryptoSetKey+0x6c>)
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	789b      	ldrb	r3, [r3, #2]
 8016fe8:	210b      	movs	r1, #11
 8016fea:	4618      	mov	r0, r3
 8016fec:	f000 fa58 	bl	80174a0 <LoRaMacCryptoDeriveLifeTimeKey>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d001      	beq.n	8016ffa <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ff6:	230e      	movs	r3, #14
 8016ff8:	e012      	b.n	8017020 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016ffa:	210c      	movs	r1, #12
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	f000 fa4f 	bl	80174a0 <LoRaMacCryptoDeriveLifeTimeKey>
 8017002:	4603      	mov	r3, r0
 8017004:	2b00      	cmp	r3, #0
 8017006:	d001      	beq.n	801700c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017008:	230e      	movs	r3, #14
 801700a:	e009      	b.n	8017020 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801700c:	210a      	movs	r1, #10
 801700e:	2000      	movs	r0, #0
 8017010:	f000 fa46 	bl	80174a0 <LoRaMacCryptoDeriveLifeTimeKey>
 8017014:	4603      	mov	r3, r0
 8017016:	2b00      	cmp	r3, #0
 8017018:	d001      	beq.n	801701e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801701a:	230e      	movs	r3, #14
 801701c:	e000      	b.n	8017020 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801701e:	2300      	movs	r3, #0
}
 8017020:	4618      	mov	r0, r3
 8017022:	3708      	adds	r7, #8
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}
 8017028:	20001ac4 	.word	0x20001ac4

0801702c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b086      	sub	sp, #24
 8017030:	af02      	add	r7, sp, #8
 8017032:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d101      	bne.n	801703e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801703a:	2309      	movs	r3, #9
 801703c:	e02d      	b.n	801709a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 801703e:	2301      	movs	r3, #1
 8017040:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8017042:	4b18      	ldr	r3, [pc, #96]	; (80170a4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	889a      	ldrh	r2, [r3, #4]
 8017048:	3201      	adds	r2, #1
 801704a:	b292      	uxth	r2, r2
 801704c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 801704e:	4b15      	ldr	r3, [pc, #84]	; (80170a4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	889a      	ldrh	r2, [r3, #4]
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f000 fc1b 	bl	8017894 <LoRaMacSerializerJoinRequest>
 801705e:	4603      	mov	r3, r0
 8017060:	2b00      	cmp	r3, #0
 8017062:	d001      	beq.n	8017068 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017064:	2310      	movs	r3, #16
 8017066:	e018      	b.n	801709a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6819      	ldr	r1, [r3, #0]
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	3318      	adds	r3, #24
 8017070:	7bfa      	ldrb	r2, [r7, #15]
 8017072:	9300      	str	r3, [sp, #0]
 8017074:	4613      	mov	r3, r2
 8017076:	2213      	movs	r2, #19
 8017078:	2000      	movs	r0, #0
 801707a:	f7f7 fe2f 	bl	800ecdc <SecureElementComputeAesCmac>
 801707e:	4603      	mov	r3, r0
 8017080:	2b00      	cmp	r3, #0
 8017082:	d001      	beq.n	8017088 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017084:	230e      	movs	r3, #14
 8017086:	e008      	b.n	801709a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f000 fc03 	bl	8017894 <LoRaMacSerializerJoinRequest>
 801708e:	4603      	mov	r3, r0
 8017090:	2b00      	cmp	r3, #0
 8017092:	d001      	beq.n	8017098 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017094:	2310      	movs	r3, #16
 8017096:	e000      	b.n	801709a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017098:	2300      	movs	r3, #0
}
 801709a:	4618      	mov	r0, r3
 801709c:	3710      	adds	r7, #16
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}
 80170a2:	bf00      	nop
 80170a4:	20001ac4 	.word	0x20001ac4

080170a8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 80170a8:	b590      	push	{r4, r7, lr}
 80170aa:	b097      	sub	sp, #92	; 0x5c
 80170ac:	af04      	add	r7, sp, #16
 80170ae:	4603      	mov	r3, r0
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	607a      	str	r2, [r7, #4]
 80170b4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d002      	beq.n	80170c2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d101      	bne.n	80170c6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80170c2:	2309      	movs	r3, #9
 80170c4:	e0d3      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80170c6:	2312      	movs	r3, #18
 80170c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80170cc:	2300      	movs	r3, #0
 80170ce:	617b      	str	r3, [r7, #20]
 80170d0:	f107 0318 	add.w	r3, r7, #24
 80170d4:	221d      	movs	r2, #29
 80170d6:	2100      	movs	r1, #0
 80170d8:	4618      	mov	r0, r3
 80170da:	f009 ffeb 	bl	80210b4 <memset>
    uint8_t versionMinor         = 0;
 80170de:	2300      	movs	r3, #0
 80170e0:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80170e2:	4b65      	ldr	r3, [pc, #404]	; (8017278 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	889b      	ldrh	r3, [r3, #4]
 80170e8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	681c      	ldr	r4, [r3, #0]
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	791b      	ldrb	r3, [r3, #4]
 80170f4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80170f8:	7bf8      	ldrb	r0, [r7, #15]
 80170fa:	f107 0213 	add.w	r2, r7, #19
 80170fe:	9202      	str	r2, [sp, #8]
 8017100:	f107 0214 	add.w	r2, r7, #20
 8017104:	9201      	str	r2, [sp, #4]
 8017106:	9300      	str	r3, [sp, #0]
 8017108:	4623      	mov	r3, r4
 801710a:	460a      	mov	r2, r1
 801710c:	68b9      	ldr	r1, [r7, #8]
 801710e:	f7f7 feeb 	bl	800eee8 <SecureElementProcessJoinAccept>
 8017112:	4603      	mov	r3, r0
 8017114:	2b00      	cmp	r3, #0
 8017116:	d001      	beq.n	801711c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017118:	230e      	movs	r3, #14
 801711a:	e0a8      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	6818      	ldr	r0, [r3, #0]
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	791b      	ldrb	r3, [r3, #4]
 8017124:	b29a      	uxth	r2, r3
 8017126:	f107 0314 	add.w	r3, r7, #20
 801712a:	4619      	mov	r1, r3
 801712c:	f004 fb45 	bl	801b7ba <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017130:	6878      	ldr	r0, [r7, #4]
 8017132:	f000 f9f0 	bl	8017516 <LoRaMacParserJoinAccept>
 8017136:	4603      	mov	r3, r0
 8017138:	2b00      	cmp	r3, #0
 801713a:	d001      	beq.n	8017140 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801713c:	230f      	movs	r3, #15
 801713e:	e096      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8017140:	2300      	movs	r3, #0
 8017142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	799b      	ldrb	r3, [r3, #6]
 801714a:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	79db      	ldrb	r3, [r3, #7]
 8017150:	021b      	lsls	r3, r3, #8
 8017152:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017154:	4313      	orrs	r3, r2
 8017156:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	7a1b      	ldrb	r3, [r3, #8]
 801715c:	041b      	lsls	r3, r3, #16
 801715e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017160:	4313      	orrs	r3, r2
 8017162:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8017164:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017166:	f7ff fe4b 	bl	8016e00 <IsJoinNonce10xOk>
 801716a:	4603      	mov	r3, r0
 801716c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8017170:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017174:	2b00      	cmp	r3, #0
 8017176:	d010      	beq.n	801719a <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8017178:	4b3f      	ldr	r3, [pc, #252]	; (8017278 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801717e:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8017180:	7cfb      	ldrb	r3, [r7, #19]
 8017182:	210b      	movs	r1, #11
 8017184:	4618      	mov	r0, r3
 8017186:	f000 f98b 	bl	80174a0 <LoRaMacCryptoDeriveLifeTimeKey>
 801718a:	4603      	mov	r3, r0
 801718c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017190:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017194:	2b00      	cmp	r3, #0
 8017196:	d005      	beq.n	80171a4 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8017198:	e001      	b.n	801719e <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801719a:	2303      	movs	r3, #3
 801719c:	e067      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 801719e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171a2:	e064      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 80171a4:	210c      	movs	r1, #12
 80171a6:	2000      	movs	r0, #0
 80171a8:	f000 f97a 	bl	80174a0 <LoRaMacCryptoDeriveLifeTimeKey>
 80171ac:	4603      	mov	r3, r0
 80171ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80171b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d002      	beq.n	80171c0 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 80171ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171be:	e056      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 80171c0:	210a      	movs	r1, #10
 80171c2:	2000      	movs	r0, #0
 80171c4:	f000 f96c 	bl	80174a0 <LoRaMacCryptoDeriveLifeTimeKey>
 80171c8:	4603      	mov	r3, r0
 80171ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80171ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d002      	beq.n	80171dc <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 80171d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171da:	e048      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	7a5b      	ldrb	r3, [r3, #9]
 80171e0:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	7a9b      	ldrb	r3, [r3, #10]
 80171e6:	021b      	lsls	r3, r3, #8
 80171e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171ea:	4313      	orrs	r3, r2
 80171ec:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	7adb      	ldrb	r3, [r3, #11]
 80171f2:	041b      	lsls	r3, r3, #16
 80171f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80171f6:	4313      	orrs	r3, r2
 80171f8:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80171fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80171fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017200:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017202:	2009      	movs	r0, #9
 8017204:	f7ff fcd8 	bl	8016bb8 <DeriveSessionKey10x>
 8017208:	4603      	mov	r3, r0
 801720a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801720e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017212:	2b00      	cmp	r3, #0
 8017214:	d002      	beq.n	801721c <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8017216:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801721a:	e028      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 801721c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017222:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017224:	2008      	movs	r0, #8
 8017226:	f7ff fcc7 	bl	8016bb8 <DeriveSessionKey10x>
 801722a:	4603      	mov	r3, r0
 801722c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017230:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017234:	2b00      	cmp	r3, #0
 8017236:	d002      	beq.n	801723e <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8017238:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801723c:	e017      	b.n	801726e <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 801723e:	4b0e      	ldr	r3, [pc, #56]	; (8017278 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	7cfa      	ldrb	r2, [r7, #19]
 8017244:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8017246:	4b0c      	ldr	r3, [pc, #48]	; (8017278 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	2200      	movs	r2, #0
 801724c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801724e:	4b0a      	ldr	r3, [pc, #40]	; (8017278 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	f04f 32ff 	mov.w	r2, #4294967295
 8017256:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8017258:	4b07      	ldr	r3, [pc, #28]	; (8017278 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	f04f 32ff 	mov.w	r2, #4294967295
 8017260:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8017262:	4b05      	ldr	r3, [pc, #20]	; (8017278 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	f04f 32ff 	mov.w	r2, #4294967295
 801726a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 801726c:	2300      	movs	r3, #0
}
 801726e:	4618      	mov	r0, r3
 8017270:	374c      	adds	r7, #76	; 0x4c
 8017272:	46bd      	mov	sp, r7
 8017274:	bd90      	pop	{r4, r7, pc}
 8017276:	bf00      	nop
 8017278:	20001ac4 	.word	0x20001ac4

0801727c <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 801727c:	b590      	push	{r4, r7, lr}
 801727e:	b08b      	sub	sp, #44	; 0x2c
 8017280:	af04      	add	r7, sp, #16
 8017282:	60f8      	str	r0, [r7, #12]
 8017284:	607b      	str	r3, [r7, #4]
 8017286:	460b      	mov	r3, r1
 8017288:	72fb      	strb	r3, [r7, #11]
 801728a:	4613      	mov	r3, r2
 801728c:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801728e:	2312      	movs	r3, #18
 8017290:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8017292:	2309      	movs	r3, #9
 8017294:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d101      	bne.n	80172a0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801729c:	2309      	movs	r3, #9
 801729e:	e05f      	b.n	8017360 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80172a0:	4b31      	ldr	r3, [pc, #196]	; (8017368 <LoRaMacCryptoSecureMessage+0xec>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	68db      	ldr	r3, [r3, #12]
 80172a6:	68fa      	ldr	r2, [r7, #12]
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d201      	bcs.n	80172b0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80172ac:	2306      	movs	r3, #6
 80172ae:	e057      	b.n	8017360 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d101      	bne.n	80172be <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80172ba:	2308      	movs	r3, #8
 80172bc:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80172be:	4b2a      	ldr	r3, [pc, #168]	; (8017368 <LoRaMacCryptoSecureMessage+0xec>)
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	68db      	ldr	r3, [r3, #12]
 80172c4:	68fa      	ldr	r2, [r7, #12]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d916      	bls.n	80172f8 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80172d4:	b219      	sxth	r1, r3
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	689c      	ldr	r4, [r3, #8]
 80172da:	7dfa      	ldrb	r2, [r7, #23]
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	9301      	str	r3, [sp, #4]
 80172e0:	2300      	movs	r3, #0
 80172e2:	9300      	str	r3, [sp, #0]
 80172e4:	4623      	mov	r3, r4
 80172e6:	f7ff fa73 	bl	80167d0 <PayloadEncrypt>
 80172ea:	4603      	mov	r3, r0
 80172ec:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80172ee:	7dbb      	ldrb	r3, [r7, #22]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d001      	beq.n	80172f8 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80172f4:	7dbb      	ldrb	r3, [r7, #22]
 80172f6:	e033      	b.n	8017360 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f000 fb4d 	bl	8017998 <LoRaMacSerializerData>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017304:	2310      	movs	r3, #16
 8017306:	e02b      	b.n	8017360 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017308:	2308      	movs	r3, #8
 801730a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	6818      	ldr	r0, [r3, #0]
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	791b      	ldrb	r3, [r3, #4]
 8017314:	b29b      	uxth	r3, r3
 8017316:	3b04      	subs	r3, #4
 8017318:	b299      	uxth	r1, r3
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	689b      	ldr	r3, [r3, #8]
 801731e:	687a      	ldr	r2, [r7, #4]
 8017320:	322c      	adds	r2, #44	; 0x2c
 8017322:	7dfc      	ldrb	r4, [r7, #23]
 8017324:	9203      	str	r2, [sp, #12]
 8017326:	68fa      	ldr	r2, [r7, #12]
 8017328:	9202      	str	r2, [sp, #8]
 801732a:	9301      	str	r3, [sp, #4]
 801732c:	2300      	movs	r3, #0
 801732e:	9300      	str	r3, [sp, #0]
 8017330:	2300      	movs	r3, #0
 8017332:	4622      	mov	r2, r4
 8017334:	f7ff fb4d 	bl	80169d2 <ComputeCmacB0>
 8017338:	4603      	mov	r3, r0
 801733a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801733c:	7dbb      	ldrb	r3, [r7, #22]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d001      	beq.n	8017346 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8017342:	7dbb      	ldrb	r3, [r7, #22]
 8017344:	e00c      	b.n	8017360 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8017346:	6878      	ldr	r0, [r7, #4]
 8017348:	f000 fb26 	bl	8017998 <LoRaMacSerializerData>
 801734c:	4603      	mov	r3, r0
 801734e:	2b00      	cmp	r3, #0
 8017350:	d001      	beq.n	8017356 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017352:	2310      	movs	r3, #16
 8017354:	e004      	b.n	8017360 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8017356:	4b04      	ldr	r3, [pc, #16]	; (8017368 <LoRaMacCryptoSecureMessage+0xec>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	68fa      	ldr	r2, [r7, #12]
 801735c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 801735e:	2300      	movs	r3, #0
}
 8017360:	4618      	mov	r0, r3
 8017362:	371c      	adds	r7, #28
 8017364:	46bd      	mov	sp, r7
 8017366:	bd90      	pop	{r4, r7, pc}
 8017368:	20001ac4 	.word	0x20001ac4

0801736c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 801736c:	b590      	push	{r4, r7, lr}
 801736e:	b08b      	sub	sp, #44	; 0x2c
 8017370:	af04      	add	r7, sp, #16
 8017372:	60b9      	str	r1, [r7, #8]
 8017374:	607b      	str	r3, [r7, #4]
 8017376:	4603      	mov	r3, r0
 8017378:	73fb      	strb	r3, [r7, #15]
 801737a:	4613      	mov	r3, r2
 801737c:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017380:	2b00      	cmp	r3, #0
 8017382:	d101      	bne.n	8017388 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017384:	2309      	movs	r3, #9
 8017386:	e084      	b.n	8017492 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8017388:	7bbb      	ldrb	r3, [r7, #14]
 801738a:	6879      	ldr	r1, [r7, #4]
 801738c:	4618      	mov	r0, r3
 801738e:	f7ff fc9f 	bl	8016cd0 <CheckFCntDown>
 8017392:	4603      	mov	r3, r0
 8017394:	f083 0301 	eor.w	r3, r3, #1
 8017398:	b2db      	uxtb	r3, r3
 801739a:	2b00      	cmp	r3, #0
 801739c:	d001      	beq.n	80173a2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 801739e:	2306      	movs	r3, #6
 80173a0:	e077      	b.n	8017492 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80173a2:	2312      	movs	r3, #18
 80173a4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80173a6:	2309      	movs	r3, #9
 80173a8:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80173aa:	2308      	movs	r3, #8
 80173ac:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80173ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173b0:	f000 f97c 	bl	80176ac <LoRaMacParserData>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d001      	beq.n	80173be <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80173ba:	230f      	movs	r3, #15
 80173bc:	e069      	b.n	8017492 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80173be:	f107 0210 	add.w	r2, r7, #16
 80173c2:	7bfb      	ldrb	r3, [r7, #15]
 80173c4:	4611      	mov	r1, r2
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7ff fbd0 	bl	8016b6c <GetKeyAddrItem>
 80173cc:	4603      	mov	r3, r0
 80173ce:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80173d0:	7d7b      	ldrb	r3, [r7, #21]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d001      	beq.n	80173da <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80173d6:	7d7b      	ldrb	r3, [r7, #21]
 80173d8:	e05b      	b.n	8017492 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80173da:	693b      	ldr	r3, [r7, #16]
 80173dc:	785b      	ldrb	r3, [r3, #1]
 80173de:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80173e0:	693b      	ldr	r3, [r7, #16]
 80173e2:	789b      	ldrb	r3, [r3, #2]
 80173e4:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80173e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e8:	689b      	ldr	r3, [r3, #8]
 80173ea:	68ba      	ldr	r2, [r7, #8]
 80173ec:	429a      	cmp	r2, r3
 80173ee:	d001      	beq.n	80173f4 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80173f0:	2302      	movs	r3, #2
 80173f2:	e04e      	b.n	8017492 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80173f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f6:	7b1b      	ldrb	r3, [r3, #12]
 80173f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80173fc:	b2db      	uxtb	r3, r3
 80173fe:	2b00      	cmp	r3, #0
 8017400:	bf14      	ite	ne
 8017402:	2301      	movne	r3, #1
 8017404:	2300      	moveq	r3, #0
 8017406:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017408:	4b24      	ldr	r3, [pc, #144]	; (801749c <LoRaMacCryptoUnsecureMessage+0x130>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	789b      	ldrb	r3, [r3, #2]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d101      	bne.n	8017416 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8017412:	2300      	movs	r3, #0
 8017414:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8017416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017418:	6818      	ldr	r0, [r3, #0]
 801741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801741c:	791b      	ldrb	r3, [r3, #4]
 801741e:	b29b      	uxth	r3, r3
 8017420:	3b04      	subs	r3, #4
 8017422:	b299      	uxth	r1, r3
 8017424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017428:	7dbc      	ldrb	r4, [r7, #22]
 801742a:	7d3a      	ldrb	r2, [r7, #20]
 801742c:	9303      	str	r3, [sp, #12]
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	9302      	str	r3, [sp, #8]
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	9301      	str	r3, [sp, #4]
 8017436:	2301      	movs	r3, #1
 8017438:	9300      	str	r3, [sp, #0]
 801743a:	4623      	mov	r3, r4
 801743c:	f7ff fb07 	bl	8016a4e <VerifyCmacB0>
 8017440:	4603      	mov	r3, r0
 8017442:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017444:	7d7b      	ldrb	r3, [r7, #21]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d001      	beq.n	801744e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801744a:	7d7b      	ldrb	r3, [r7, #21]
 801744c:	e021      	b.n	8017492 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017450:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d101      	bne.n	801745c <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017458:	2308      	movs	r3, #8
 801745a:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801745e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017462:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017466:	b219      	sxth	r1, r3
 8017468:	7dfa      	ldrb	r2, [r7, #23]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	2301      	movs	r3, #1
 8017470:	9300      	str	r3, [sp, #0]
 8017472:	68bb      	ldr	r3, [r7, #8]
 8017474:	f7ff f9ac 	bl	80167d0 <PayloadEncrypt>
 8017478:	4603      	mov	r3, r0
 801747a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801747c:	7d7b      	ldrb	r3, [r7, #21]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d001      	beq.n	8017486 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8017482:	7d7b      	ldrb	r3, [r7, #21]
 8017484:	e005      	b.n	8017492 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8017486:	7bbb      	ldrb	r3, [r7, #14]
 8017488:	6879      	ldr	r1, [r7, #4]
 801748a:	4618      	mov	r0, r3
 801748c:	f7ff fc44 	bl	8016d18 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8017490:	2300      	movs	r3, #0
}
 8017492:	4618      	mov	r0, r3
 8017494:	371c      	adds	r7, #28
 8017496:	46bd      	mov	sp, r7
 8017498:	bd90      	pop	{r4, r7, pc}
 801749a:	bf00      	nop
 801749c:	20001ac4 	.word	0x20001ac4

080174a0 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b088      	sub	sp, #32
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	4603      	mov	r3, r0
 80174a8:	460a      	mov	r2, r1
 80174aa:	71fb      	strb	r3, [r7, #7]
 80174ac:	4613      	mov	r3, r2
 80174ae:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80174b0:	2300      	movs	r3, #0
 80174b2:	60fb      	str	r3, [r7, #12]
 80174b4:	f107 0310 	add.w	r3, r7, #16
 80174b8:	2200      	movs	r2, #0
 80174ba:	601a      	str	r2, [r3, #0]
 80174bc:	605a      	str	r2, [r3, #4]
 80174be:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80174c0:	2300      	movs	r3, #0
 80174c2:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80174c4:	79bb      	ldrb	r3, [r7, #6]
 80174c6:	2b0c      	cmp	r3, #12
 80174c8:	d00b      	beq.n	80174e2 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 80174ca:	2b0c      	cmp	r3, #12
 80174cc:	dc0f      	bgt.n	80174ee <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 80174ce:	2b0a      	cmp	r3, #10
 80174d0:	d00a      	beq.n	80174e8 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 80174d2:	2b0b      	cmp	r3, #11
 80174d4:	d10b      	bne.n	80174ee <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80174d6:	79fb      	ldrb	r3, [r7, #7]
 80174d8:	2b01      	cmp	r3, #1
 80174da:	d10a      	bne.n	80174f2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 80174dc:	2320      	movs	r3, #32
 80174de:	733b      	strb	r3, [r7, #12]
            }
            break;
 80174e0:	e007      	b.n	80174f2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80174e2:	230b      	movs	r3, #11
 80174e4:	77fb      	strb	r3, [r7, #31]
            break;
 80174e6:	e005      	b.n	80174f4 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80174e8:	2330      	movs	r3, #48	; 0x30
 80174ea:	733b      	strb	r3, [r7, #12]
            break;
 80174ec:	e002      	b.n	80174f4 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80174ee:	230a      	movs	r3, #10
 80174f0:	e00d      	b.n	801750e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80174f2:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80174f4:	79ba      	ldrb	r2, [r7, #6]
 80174f6:	7ff9      	ldrb	r1, [r7, #31]
 80174f8:	f107 030c 	add.w	r3, r7, #12
 80174fc:	4618      	mov	r0, r3
 80174fe:	f7f7 fcb3 	bl	800ee68 <SecureElementDeriveAndStoreKey>
 8017502:	4603      	mov	r3, r0
 8017504:	2b00      	cmp	r3, #0
 8017506:	d001      	beq.n	801750c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017508:	230e      	movs	r3, #14
 801750a:	e000      	b.n	801750e <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801750c:	2300      	movs	r3, #0
}
 801750e:	4618      	mov	r0, r3
 8017510:	3720      	adds	r7, #32
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}

08017516 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8017516:	b580      	push	{r7, lr}
 8017518:	b084      	sub	sp, #16
 801751a:	af00      	add	r7, sp, #0
 801751c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d003      	beq.n	801752c <LoRaMacParserJoinAccept+0x16>
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d101      	bne.n	8017530 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801752c:	2302      	movs	r3, #2
 801752e:	e0b9      	b.n	80176a4 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8017530:	2300      	movs	r3, #0
 8017532:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	681a      	ldr	r2, [r3, #0]
 8017538:	89fb      	ldrh	r3, [r7, #14]
 801753a:	1c59      	adds	r1, r3, #1
 801753c:	81f9      	strh	r1, [r7, #14]
 801753e:	4413      	add	r3, r2
 8017540:	781a      	ldrb	r2, [r3, #0]
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	1d98      	adds	r0, r3, #6
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681a      	ldr	r2, [r3, #0]
 801754e:	89fb      	ldrh	r3, [r7, #14]
 8017550:	4413      	add	r3, r2
 8017552:	2203      	movs	r2, #3
 8017554:	4619      	mov	r1, r3
 8017556:	f004 f930 	bl	801b7ba <memcpy1>
    bufItr = bufItr + 3;
 801755a:	89fb      	ldrh	r3, [r7, #14]
 801755c:	3303      	adds	r3, #3
 801755e:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	f103 0009 	add.w	r0, r3, #9
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	681a      	ldr	r2, [r3, #0]
 801756a:	89fb      	ldrh	r3, [r7, #14]
 801756c:	4413      	add	r3, r2
 801756e:	2203      	movs	r2, #3
 8017570:	4619      	mov	r1, r3
 8017572:	f004 f922 	bl	801b7ba <memcpy1>
    bufItr = bufItr + 3;
 8017576:	89fb      	ldrh	r3, [r7, #14]
 8017578:	3303      	adds	r3, #3
 801757a:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681a      	ldr	r2, [r3, #0]
 8017580:	89fb      	ldrh	r3, [r7, #14]
 8017582:	1c59      	adds	r1, r3, #1
 8017584:	81f9      	strh	r1, [r7, #14]
 8017586:	4413      	add	r3, r2
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	461a      	mov	r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681a      	ldr	r2, [r3, #0]
 8017594:	89fb      	ldrh	r3, [r7, #14]
 8017596:	1c59      	adds	r1, r3, #1
 8017598:	81f9      	strh	r1, [r7, #14]
 801759a:	4413      	add	r3, r2
 801759c:	781b      	ldrb	r3, [r3, #0]
 801759e:	021a      	lsls	r2, r3, #8
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	68db      	ldr	r3, [r3, #12]
 80175a4:	431a      	orrs	r2, r3
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	89fb      	ldrh	r3, [r7, #14]
 80175b0:	1c59      	adds	r1, r3, #1
 80175b2:	81f9      	strh	r1, [r7, #14]
 80175b4:	4413      	add	r3, r2
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	041a      	lsls	r2, r3, #16
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	68db      	ldr	r3, [r3, #12]
 80175be:	431a      	orrs	r2, r3
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681a      	ldr	r2, [r3, #0]
 80175c8:	89fb      	ldrh	r3, [r7, #14]
 80175ca:	1c59      	adds	r1, r3, #1
 80175cc:	81f9      	strh	r1, [r7, #14]
 80175ce:	4413      	add	r3, r2
 80175d0:	781b      	ldrb	r3, [r3, #0]
 80175d2:	061a      	lsls	r2, r3, #24
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	68db      	ldr	r3, [r3, #12]
 80175d8:	431a      	orrs	r2, r3
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681a      	ldr	r2, [r3, #0]
 80175e2:	89fb      	ldrh	r3, [r7, #14]
 80175e4:	1c59      	adds	r1, r3, #1
 80175e6:	81f9      	strh	r1, [r7, #14]
 80175e8:	4413      	add	r3, r2
 80175ea:	781a      	ldrb	r2, [r3, #0]
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	681a      	ldr	r2, [r3, #0]
 80175f4:	89fb      	ldrh	r3, [r7, #14]
 80175f6:	1c59      	adds	r1, r3, #1
 80175f8:	81f9      	strh	r1, [r7, #14]
 80175fa:	4413      	add	r3, r2
 80175fc:	781a      	ldrb	r2, [r3, #0]
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	791b      	ldrb	r3, [r3, #4]
 8017606:	1f1a      	subs	r2, r3, #4
 8017608:	89fb      	ldrh	r3, [r7, #14]
 801760a:	1ad3      	subs	r3, r2, r3
 801760c:	2b10      	cmp	r3, #16
 801760e:	d10e      	bne.n	801762e <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	f103 0012 	add.w	r0, r3, #18
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	681a      	ldr	r2, [r3, #0]
 801761a:	89fb      	ldrh	r3, [r7, #14]
 801761c:	4413      	add	r3, r2
 801761e:	2210      	movs	r2, #16
 8017620:	4619      	mov	r1, r3
 8017622:	f004 f8ca 	bl	801b7ba <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8017626:	89fb      	ldrh	r3, [r7, #14]
 8017628:	3310      	adds	r3, #16
 801762a:	81fb      	strh	r3, [r7, #14]
 801762c:	e008      	b.n	8017640 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	791b      	ldrb	r3, [r3, #4]
 8017632:	1f1a      	subs	r2, r3, #4
 8017634:	89fb      	ldrh	r3, [r7, #14]
 8017636:	1ad3      	subs	r3, r2, r3
 8017638:	2b00      	cmp	r3, #0
 801763a:	dd01      	ble.n	8017640 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 801763c:	2301      	movs	r3, #1
 801763e:	e031      	b.n	80176a4 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	89fb      	ldrh	r3, [r7, #14]
 8017646:	1c59      	adds	r1, r3, #1
 8017648:	81f9      	strh	r1, [r7, #14]
 801764a:	4413      	add	r3, r2
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	461a      	mov	r2, r3
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	89fb      	ldrh	r3, [r7, #14]
 801765a:	1c59      	adds	r1, r3, #1
 801765c:	81f9      	strh	r1, [r7, #14]
 801765e:	4413      	add	r3, r2
 8017660:	781b      	ldrb	r3, [r3, #0]
 8017662:	021a      	lsls	r2, r3, #8
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017668:	431a      	orrs	r2, r3
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681a      	ldr	r2, [r3, #0]
 8017672:	89fb      	ldrh	r3, [r7, #14]
 8017674:	1c59      	adds	r1, r3, #1
 8017676:	81f9      	strh	r1, [r7, #14]
 8017678:	4413      	add	r3, r2
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	041a      	lsls	r2, r3, #16
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017682:	431a      	orrs	r2, r3
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681a      	ldr	r2, [r3, #0]
 801768c:	89fb      	ldrh	r3, [r7, #14]
 801768e:	1c59      	adds	r1, r3, #1
 8017690:	81f9      	strh	r1, [r7, #14]
 8017692:	4413      	add	r3, r2
 8017694:	781b      	ldrb	r3, [r3, #0]
 8017696:	061a      	lsls	r2, r3, #24
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801769c:	431a      	orrs	r2, r3
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80176a2:	2300      	movs	r3, #0
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3710      	adds	r7, #16
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b084      	sub	sp, #16
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d003      	beq.n	80176c2 <LoRaMacParserData+0x16>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d101      	bne.n	80176c6 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80176c2:	2302      	movs	r3, #2
 80176c4:	e0e2      	b.n	801788c <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80176c6:	2300      	movs	r3, #0
 80176c8:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	89fb      	ldrh	r3, [r7, #14]
 80176d0:	1c59      	adds	r1, r3, #1
 80176d2:	81f9      	strh	r1, [r7, #14]
 80176d4:	4413      	add	r3, r2
 80176d6:	781a      	ldrb	r2, [r3, #0]
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	681a      	ldr	r2, [r3, #0]
 80176e0:	89fb      	ldrh	r3, [r7, #14]
 80176e2:	1c59      	adds	r1, r3, #1
 80176e4:	81f9      	strh	r1, [r7, #14]
 80176e6:	4413      	add	r3, r2
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	461a      	mov	r2, r3
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681a      	ldr	r2, [r3, #0]
 80176f4:	89fb      	ldrh	r3, [r7, #14]
 80176f6:	1c59      	adds	r1, r3, #1
 80176f8:	81f9      	strh	r1, [r7, #14]
 80176fa:	4413      	add	r3, r2
 80176fc:	781b      	ldrb	r3, [r3, #0]
 80176fe:	021a      	lsls	r2, r3, #8
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	689b      	ldr	r3, [r3, #8]
 8017704:	431a      	orrs	r2, r3
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681a      	ldr	r2, [r3, #0]
 801770e:	89fb      	ldrh	r3, [r7, #14]
 8017710:	1c59      	adds	r1, r3, #1
 8017712:	81f9      	strh	r1, [r7, #14]
 8017714:	4413      	add	r3, r2
 8017716:	781b      	ldrb	r3, [r3, #0]
 8017718:	041a      	lsls	r2, r3, #16
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	689b      	ldr	r3, [r3, #8]
 801771e:	431a      	orrs	r2, r3
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	681a      	ldr	r2, [r3, #0]
 8017728:	89fb      	ldrh	r3, [r7, #14]
 801772a:	1c59      	adds	r1, r3, #1
 801772c:	81f9      	strh	r1, [r7, #14]
 801772e:	4413      	add	r3, r2
 8017730:	781b      	ldrb	r3, [r3, #0]
 8017732:	061a      	lsls	r2, r3, #24
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	689b      	ldr	r3, [r3, #8]
 8017738:	431a      	orrs	r2, r3
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	681a      	ldr	r2, [r3, #0]
 8017742:	89fb      	ldrh	r3, [r7, #14]
 8017744:	1c59      	adds	r1, r3, #1
 8017746:	81f9      	strh	r1, [r7, #14]
 8017748:	4413      	add	r3, r2
 801774a:	781a      	ldrb	r2, [r3, #0]
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	681a      	ldr	r2, [r3, #0]
 8017754:	89fb      	ldrh	r3, [r7, #14]
 8017756:	1c59      	adds	r1, r3, #1
 8017758:	81f9      	strh	r1, [r7, #14]
 801775a:	4413      	add	r3, r2
 801775c:	781b      	ldrb	r3, [r3, #0]
 801775e:	b29a      	uxth	r2, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681a      	ldr	r2, [r3, #0]
 8017768:	89fb      	ldrh	r3, [r7, #14]
 801776a:	1c59      	adds	r1, r3, #1
 801776c:	81f9      	strh	r1, [r7, #14]
 801776e:	4413      	add	r3, r2
 8017770:	781b      	ldrb	r3, [r3, #0]
 8017772:	0219      	lsls	r1, r3, #8
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	89db      	ldrh	r3, [r3, #14]
 8017778:	b21a      	sxth	r2, r3
 801777a:	b20b      	sxth	r3, r1
 801777c:	4313      	orrs	r3, r2
 801777e:	b21b      	sxth	r3, r3
 8017780:	b29a      	uxth	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f103 0010 	add.w	r0, r3, #16
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	681a      	ldr	r2, [r3, #0]
 8017790:	89fb      	ldrh	r3, [r7, #14]
 8017792:	18d1      	adds	r1, r2, r3
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	7b1b      	ldrb	r3, [r3, #12]
 8017798:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801779c:	b2db      	uxtb	r3, r3
 801779e:	b29b      	uxth	r3, r3
 80177a0:	461a      	mov	r2, r3
 80177a2:	f004 f80a 	bl	801b7ba <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	7b1b      	ldrb	r3, [r3, #12]
 80177aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80177ae:	b2db      	uxtb	r3, r3
 80177b0:	b29a      	uxth	r2, r3
 80177b2:	89fb      	ldrh	r3, [r7, #14]
 80177b4:	4413      	add	r3, r2
 80177b6:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	2200      	movs	r2, #0
 80177bc:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	2200      	movs	r2, #0
 80177c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	791b      	ldrb	r3, [r3, #4]
 80177cc:	461a      	mov	r2, r3
 80177ce:	89fb      	ldrh	r3, [r7, #14]
 80177d0:	1ad3      	subs	r3, r2, r3
 80177d2:	2b04      	cmp	r3, #4
 80177d4:	dd28      	ble.n	8017828 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	89fb      	ldrh	r3, [r7, #14]
 80177dc:	1c59      	adds	r1, r3, #1
 80177de:	81f9      	strh	r1, [r7, #14]
 80177e0:	4413      	add	r3, r2
 80177e2:	781a      	ldrb	r2, [r3, #0]
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	791a      	ldrb	r2, [r3, #4]
 80177ee:	89fb      	ldrh	r3, [r7, #14]
 80177f0:	b2db      	uxtb	r3, r3
 80177f2:	1ad3      	subs	r3, r2, r3
 80177f4:	b2db      	uxtb	r3, r3
 80177f6:	3b04      	subs	r3, #4
 80177f8:	b2da      	uxtb	r2, r3
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681a      	ldr	r2, [r3, #0]
 8017808:	89fb      	ldrh	r3, [r7, #14]
 801780a:	18d1      	adds	r1, r2, r3
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017812:	b29b      	uxth	r3, r3
 8017814:	461a      	mov	r2, r3
 8017816:	f003 ffd0 	bl	801b7ba <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017820:	b29a      	uxth	r2, r3
 8017822:	89fb      	ldrh	r3, [r7, #14]
 8017824:	4413      	add	r3, r2
 8017826:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681a      	ldr	r2, [r3, #0]
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	791b      	ldrb	r3, [r3, #4]
 8017830:	3b04      	subs	r3, #4
 8017832:	4413      	add	r3, r2
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	461a      	mov	r2, r3
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	6819      	ldr	r1, [r3, #0]
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	791b      	ldrb	r3, [r3, #4]
 8017848:	3b03      	subs	r3, #3
 801784a:	440b      	add	r3, r1
 801784c:	781b      	ldrb	r3, [r3, #0]
 801784e:	021b      	lsls	r3, r3, #8
 8017850:	431a      	orrs	r2, r3
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	6819      	ldr	r1, [r3, #0]
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	791b      	ldrb	r3, [r3, #4]
 8017862:	3b02      	subs	r3, #2
 8017864:	440b      	add	r3, r1
 8017866:	781b      	ldrb	r3, [r3, #0]
 8017868:	041b      	lsls	r3, r3, #16
 801786a:	431a      	orrs	r2, r3
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	6819      	ldr	r1, [r3, #0]
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	791b      	ldrb	r3, [r3, #4]
 801787c:	3b01      	subs	r3, #1
 801787e:	440b      	add	r3, r1
 8017880:	781b      	ldrb	r3, [r3, #0]
 8017882:	061b      	lsls	r3, r3, #24
 8017884:	431a      	orrs	r2, r3
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801788a:	2300      	movs	r3, #0
}
 801788c:	4618      	mov	r0, r3
 801788e:	3710      	adds	r7, #16
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}

08017894 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b084      	sub	sp, #16
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d003      	beq.n	80178aa <LoRaMacSerializerJoinRequest+0x16>
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d101      	bne.n	80178ae <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80178aa:	2301      	movs	r3, #1
 80178ac:	e070      	b.n	8017990 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80178ae:	2300      	movs	r3, #0
 80178b0:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	791b      	ldrb	r3, [r3, #4]
 80178b6:	2b16      	cmp	r3, #22
 80178b8:	d801      	bhi.n	80178be <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80178ba:	2302      	movs	r3, #2
 80178bc:	e068      	b.n	8017990 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	89fb      	ldrh	r3, [r7, #14]
 80178c4:	1c59      	adds	r1, r3, #1
 80178c6:	81f9      	strh	r1, [r7, #14]
 80178c8:	4413      	add	r3, r2
 80178ca:	687a      	ldr	r2, [r7, #4]
 80178cc:	7952      	ldrb	r2, [r2, #5]
 80178ce:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	681a      	ldr	r2, [r3, #0]
 80178d4:	89fb      	ldrh	r3, [r7, #14]
 80178d6:	18d0      	adds	r0, r2, r3
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	3306      	adds	r3, #6
 80178dc:	2208      	movs	r2, #8
 80178de:	4619      	mov	r1, r3
 80178e0:	f003 ff86 	bl	801b7f0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80178e4:	89fb      	ldrh	r3, [r7, #14]
 80178e6:	3308      	adds	r3, #8
 80178e8:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681a      	ldr	r2, [r3, #0]
 80178ee:	89fb      	ldrh	r3, [r7, #14]
 80178f0:	18d0      	adds	r0, r2, r3
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	330e      	adds	r3, #14
 80178f6:	2208      	movs	r2, #8
 80178f8:	4619      	mov	r1, r3
 80178fa:	f003 ff79 	bl	801b7f0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80178fe:	89fb      	ldrh	r3, [r7, #14]
 8017900:	3308      	adds	r3, #8
 8017902:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	8ad9      	ldrh	r1, [r3, #22]
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681a      	ldr	r2, [r3, #0]
 801790c:	89fb      	ldrh	r3, [r7, #14]
 801790e:	1c58      	adds	r0, r3, #1
 8017910:	81f8      	strh	r0, [r7, #14]
 8017912:	4413      	add	r3, r2
 8017914:	b2ca      	uxtb	r2, r1
 8017916:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	8adb      	ldrh	r3, [r3, #22]
 801791c:	0a1b      	lsrs	r3, r3, #8
 801791e:	b299      	uxth	r1, r3
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681a      	ldr	r2, [r3, #0]
 8017924:	89fb      	ldrh	r3, [r7, #14]
 8017926:	1c58      	adds	r0, r3, #1
 8017928:	81f8      	strh	r0, [r7, #14]
 801792a:	4413      	add	r3, r2
 801792c:	b2ca      	uxtb	r2, r1
 801792e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6999      	ldr	r1, [r3, #24]
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681a      	ldr	r2, [r3, #0]
 8017938:	89fb      	ldrh	r3, [r7, #14]
 801793a:	1c58      	adds	r0, r3, #1
 801793c:	81f8      	strh	r0, [r7, #14]
 801793e:	4413      	add	r3, r2
 8017940:	b2ca      	uxtb	r2, r1
 8017942:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	699b      	ldr	r3, [r3, #24]
 8017948:	0a19      	lsrs	r1, r3, #8
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	681a      	ldr	r2, [r3, #0]
 801794e:	89fb      	ldrh	r3, [r7, #14]
 8017950:	1c58      	adds	r0, r3, #1
 8017952:	81f8      	strh	r0, [r7, #14]
 8017954:	4413      	add	r3, r2
 8017956:	b2ca      	uxtb	r2, r1
 8017958:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	699b      	ldr	r3, [r3, #24]
 801795e:	0c19      	lsrs	r1, r3, #16
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	681a      	ldr	r2, [r3, #0]
 8017964:	89fb      	ldrh	r3, [r7, #14]
 8017966:	1c58      	adds	r0, r3, #1
 8017968:	81f8      	strh	r0, [r7, #14]
 801796a:	4413      	add	r3, r2
 801796c:	b2ca      	uxtb	r2, r1
 801796e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	699b      	ldr	r3, [r3, #24]
 8017974:	0e19      	lsrs	r1, r3, #24
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	681a      	ldr	r2, [r3, #0]
 801797a:	89fb      	ldrh	r3, [r7, #14]
 801797c:	1c58      	adds	r0, r3, #1
 801797e:	81f8      	strh	r0, [r7, #14]
 8017980:	4413      	add	r3, r2
 8017982:	b2ca      	uxtb	r2, r1
 8017984:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017986:	89fb      	ldrh	r3, [r7, #14]
 8017988:	b2da      	uxtb	r2, r3
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801798e:	2300      	movs	r3, #0
}
 8017990:	4618      	mov	r0, r3
 8017992:	3710      	adds	r7, #16
 8017994:	46bd      	mov	sp, r7
 8017996:	bd80      	pop	{r7, pc}

08017998 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b084      	sub	sp, #16
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d003      	beq.n	80179ae <LoRaMacSerializerData+0x16>
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d101      	bne.n	80179b2 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80179ae:	2301      	movs	r3, #1
 80179b0:	e0e5      	b.n	8017b7e <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80179b2:	2300      	movs	r3, #0
 80179b4:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80179b6:	2308      	movs	r3, #8
 80179b8:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	7b1b      	ldrb	r3, [r3, #12]
 80179be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80179c2:	b2db      	uxtb	r3, r3
 80179c4:	b29a      	uxth	r2, r3
 80179c6:	89bb      	ldrh	r3, [r7, #12]
 80179c8:	4413      	add	r3, r2
 80179ca:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d002      	beq.n	80179dc <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80179d6:	89bb      	ldrh	r3, [r7, #12]
 80179d8:	3301      	adds	r3, #1
 80179da:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179e2:	b29a      	uxth	r2, r3
 80179e4:	89bb      	ldrh	r3, [r7, #12]
 80179e6:	4413      	add	r3, r2
 80179e8:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80179ea:	89bb      	ldrh	r3, [r7, #12]
 80179ec:	3304      	adds	r3, #4
 80179ee:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	791b      	ldrb	r3, [r3, #4]
 80179f4:	b29b      	uxth	r3, r3
 80179f6:	89ba      	ldrh	r2, [r7, #12]
 80179f8:	429a      	cmp	r2, r3
 80179fa:	d901      	bls.n	8017a00 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80179fc:	2302      	movs	r3, #2
 80179fe:	e0be      	b.n	8017b7e <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681a      	ldr	r2, [r3, #0]
 8017a04:	89fb      	ldrh	r3, [r7, #14]
 8017a06:	1c59      	adds	r1, r3, #1
 8017a08:	81f9      	strh	r1, [r7, #14]
 8017a0a:	4413      	add	r3, r2
 8017a0c:	687a      	ldr	r2, [r7, #4]
 8017a0e:	7952      	ldrb	r2, [r2, #5]
 8017a10:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	6899      	ldr	r1, [r3, #8]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681a      	ldr	r2, [r3, #0]
 8017a1a:	89fb      	ldrh	r3, [r7, #14]
 8017a1c:	1c58      	adds	r0, r3, #1
 8017a1e:	81f8      	strh	r0, [r7, #14]
 8017a20:	4413      	add	r3, r2
 8017a22:	b2ca      	uxtb	r2, r1
 8017a24:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	689b      	ldr	r3, [r3, #8]
 8017a2a:	0a19      	lsrs	r1, r3, #8
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	681a      	ldr	r2, [r3, #0]
 8017a30:	89fb      	ldrh	r3, [r7, #14]
 8017a32:	1c58      	adds	r0, r3, #1
 8017a34:	81f8      	strh	r0, [r7, #14]
 8017a36:	4413      	add	r3, r2
 8017a38:	b2ca      	uxtb	r2, r1
 8017a3a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	689b      	ldr	r3, [r3, #8]
 8017a40:	0c19      	lsrs	r1, r3, #16
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	681a      	ldr	r2, [r3, #0]
 8017a46:	89fb      	ldrh	r3, [r7, #14]
 8017a48:	1c58      	adds	r0, r3, #1
 8017a4a:	81f8      	strh	r0, [r7, #14]
 8017a4c:	4413      	add	r3, r2
 8017a4e:	b2ca      	uxtb	r2, r1
 8017a50:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	689b      	ldr	r3, [r3, #8]
 8017a56:	0e19      	lsrs	r1, r3, #24
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681a      	ldr	r2, [r3, #0]
 8017a5c:	89fb      	ldrh	r3, [r7, #14]
 8017a5e:	1c58      	adds	r0, r3, #1
 8017a60:	81f8      	strh	r0, [r7, #14]
 8017a62:	4413      	add	r3, r2
 8017a64:	b2ca      	uxtb	r2, r1
 8017a66:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	681a      	ldr	r2, [r3, #0]
 8017a6c:	89fb      	ldrh	r3, [r7, #14]
 8017a6e:	1c59      	adds	r1, r3, #1
 8017a70:	81f9      	strh	r1, [r7, #14]
 8017a72:	4413      	add	r3, r2
 8017a74:	687a      	ldr	r2, [r7, #4]
 8017a76:	7b12      	ldrb	r2, [r2, #12]
 8017a78:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	89d9      	ldrh	r1, [r3, #14]
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681a      	ldr	r2, [r3, #0]
 8017a82:	89fb      	ldrh	r3, [r7, #14]
 8017a84:	1c58      	adds	r0, r3, #1
 8017a86:	81f8      	strh	r0, [r7, #14]
 8017a88:	4413      	add	r3, r2
 8017a8a:	b2ca      	uxtb	r2, r1
 8017a8c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	89db      	ldrh	r3, [r3, #14]
 8017a92:	0a1b      	lsrs	r3, r3, #8
 8017a94:	b299      	uxth	r1, r3
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	681a      	ldr	r2, [r3, #0]
 8017a9a:	89fb      	ldrh	r3, [r7, #14]
 8017a9c:	1c58      	adds	r0, r3, #1
 8017a9e:	81f8      	strh	r0, [r7, #14]
 8017aa0:	4413      	add	r3, r2
 8017aa2:	b2ca      	uxtb	r2, r1
 8017aa4:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	681a      	ldr	r2, [r3, #0]
 8017aaa:	89fb      	ldrh	r3, [r7, #14]
 8017aac:	18d0      	adds	r0, r2, r3
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f103 0110 	add.w	r1, r3, #16
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	7b1b      	ldrb	r3, [r3, #12]
 8017ab8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017abc:	b2db      	uxtb	r3, r3
 8017abe:	b29b      	uxth	r3, r3
 8017ac0:	461a      	mov	r2, r3
 8017ac2:	f003 fe7a 	bl	801b7ba <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	7b1b      	ldrb	r3, [r3, #12]
 8017aca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017ace:	b2db      	uxtb	r3, r3
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	89fb      	ldrh	r3, [r7, #14]
 8017ad4:	4413      	add	r3, r2
 8017ad6:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d009      	beq.n	8017af6 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681a      	ldr	r2, [r3, #0]
 8017ae6:	89fb      	ldrh	r3, [r7, #14]
 8017ae8:	1c59      	adds	r1, r3, #1
 8017aea:	81f9      	strh	r1, [r7, #14]
 8017aec:	4413      	add	r3, r2
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017af4:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	681a      	ldr	r2, [r3, #0]
 8017afa:	89fb      	ldrh	r3, [r7, #14]
 8017afc:	18d0      	adds	r0, r2, r3
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	461a      	mov	r2, r3
 8017b0c:	f003 fe55 	bl	801b7ba <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017b16:	b29a      	uxth	r2, r3
 8017b18:	89fb      	ldrh	r3, [r7, #14]
 8017b1a:	4413      	add	r3, r2
 8017b1c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	681a      	ldr	r2, [r3, #0]
 8017b26:	89fb      	ldrh	r3, [r7, #14]
 8017b28:	1c58      	adds	r0, r3, #1
 8017b2a:	81f8      	strh	r0, [r7, #14]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	b2ca      	uxtb	r2, r1
 8017b30:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b36:	0a19      	lsrs	r1, r3, #8
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681a      	ldr	r2, [r3, #0]
 8017b3c:	89fb      	ldrh	r3, [r7, #14]
 8017b3e:	1c58      	adds	r0, r3, #1
 8017b40:	81f8      	strh	r0, [r7, #14]
 8017b42:	4413      	add	r3, r2
 8017b44:	b2ca      	uxtb	r2, r1
 8017b46:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b4c:	0c19      	lsrs	r1, r3, #16
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	681a      	ldr	r2, [r3, #0]
 8017b52:	89fb      	ldrh	r3, [r7, #14]
 8017b54:	1c58      	adds	r0, r3, #1
 8017b56:	81f8      	strh	r0, [r7, #14]
 8017b58:	4413      	add	r3, r2
 8017b5a:	b2ca      	uxtb	r2, r1
 8017b5c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b62:	0e19      	lsrs	r1, r3, #24
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681a      	ldr	r2, [r3, #0]
 8017b68:	89fb      	ldrh	r3, [r7, #14]
 8017b6a:	1c58      	adds	r0, r3, #1
 8017b6c:	81f8      	strh	r0, [r7, #14]
 8017b6e:	4413      	add	r3, r2
 8017b70:	b2ca      	uxtb	r2, r1
 8017b72:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017b74:	89fb      	ldrh	r3, [r7, #14]
 8017b76:	b2da      	uxtb	r2, r3
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017b7c:	2300      	movs	r3, #0
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3710      	adds	r7, #16
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}

08017b86 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8017b86:	b480      	push	{r7}
 8017b88:	b083      	sub	sp, #12
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	4603      	mov	r3, r0
 8017b8e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b90:	79fb      	ldrb	r3, [r7, #7]
 8017b92:	2b05      	cmp	r3, #5
 8017b94:	d002      	beq.n	8017b9c <RegionIsActive+0x16>
 8017b96:	2b08      	cmp	r3, #8
 8017b98:	d002      	beq.n	8017ba0 <RegionIsActive+0x1a>
 8017b9a:	e003      	b.n	8017ba4 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	e002      	b.n	8017ba6 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	e000      	b.n	8017ba6 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017ba4:	2300      	movs	r3, #0
        }
    }
}
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	370c      	adds	r7, #12
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bc80      	pop	{r7}
 8017bae:	4770      	bx	lr

08017bb0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b084      	sub	sp, #16
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	6039      	str	r1, [r7, #0]
 8017bba:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017bc0:	79fb      	ldrb	r3, [r7, #7]
 8017bc2:	2b05      	cmp	r3, #5
 8017bc4:	d002      	beq.n	8017bcc <RegionGetPhyParam+0x1c>
 8017bc6:	2b08      	cmp	r3, #8
 8017bc8:	d006      	beq.n	8017bd8 <RegionGetPhyParam+0x28>
 8017bca:	e00b      	b.n	8017be4 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017bcc:	6838      	ldr	r0, [r7, #0]
 8017bce:	f001 fad5 	bl	801917c <RegionEU868GetPhyParam>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	60fb      	str	r3, [r7, #12]
 8017bd6:	e007      	b.n	8017be8 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8017bd8:	6838      	ldr	r0, [r7, #0]
 8017bda:	f002 fc55 	bl	801a488 <RegionUS915GetPhyParam>
 8017bde:	4603      	mov	r3, r0
 8017be0:	60fb      	str	r3, [r7, #12]
 8017be2:	e001      	b.n	8017be8 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017be4:	68bb      	ldr	r3, [r7, #8]
 8017be6:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	4618      	mov	r0, r3
 8017bec:	3710      	adds	r7, #16
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b082      	sub	sp, #8
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	4603      	mov	r3, r0
 8017bfa:	6039      	str	r1, [r7, #0]
 8017bfc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017bfe:	79fb      	ldrb	r3, [r7, #7]
 8017c00:	2b05      	cmp	r3, #5
 8017c02:	d002      	beq.n	8017c0a <RegionSetBandTxDone+0x18>
 8017c04:	2b08      	cmp	r3, #8
 8017c06:	d004      	beq.n	8017c12 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017c08:	e007      	b.n	8017c1a <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 8017c0a:	6838      	ldr	r0, [r7, #0]
 8017c0c:	f001 fbfc 	bl	8019408 <RegionEU868SetBandTxDone>
 8017c10:	e003      	b.n	8017c1a <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8017c12:	6838      	ldr	r0, [r7, #0]
 8017c14:	f002 fd94 	bl	801a740 <RegionUS915SetBandTxDone>
 8017c18:	bf00      	nop
        }
    }
}
 8017c1a:	3708      	adds	r7, #8
 8017c1c:	46bd      	mov	sp, r7
 8017c1e:	bd80      	pop	{r7, pc}

08017c20 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	b082      	sub	sp, #8
 8017c24:	af00      	add	r7, sp, #0
 8017c26:	4603      	mov	r3, r0
 8017c28:	6039      	str	r1, [r7, #0]
 8017c2a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017c2c:	79fb      	ldrb	r3, [r7, #7]
 8017c2e:	2b05      	cmp	r3, #5
 8017c30:	d002      	beq.n	8017c38 <RegionInitDefaults+0x18>
 8017c32:	2b08      	cmp	r3, #8
 8017c34:	d004      	beq.n	8017c40 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8017c36:	e007      	b.n	8017c48 <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 8017c38:	6838      	ldr	r0, [r7, #0]
 8017c3a:	f001 fc11 	bl	8019460 <RegionEU868InitDefaults>
 8017c3e:	e003      	b.n	8017c48 <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 8017c40:	6838      	ldr	r0, [r7, #0]
 8017c42:	f002 fda9 	bl	801a798 <RegionUS915InitDefaults>
 8017c46:	bf00      	nop
        }
    }
}
 8017c48:	bf00      	nop
 8017c4a:	3708      	adds	r7, #8
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b082      	sub	sp, #8
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	4603      	mov	r3, r0
 8017c58:	6039      	str	r1, [r7, #0]
 8017c5a:	71fb      	strb	r3, [r7, #7]
 8017c5c:	4613      	mov	r3, r2
 8017c5e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017c60:	79fb      	ldrb	r3, [r7, #7]
 8017c62:	2b05      	cmp	r3, #5
 8017c64:	d002      	beq.n	8017c6c <RegionVerify+0x1c>
 8017c66:	2b08      	cmp	r3, #8
 8017c68:	d007      	beq.n	8017c7a <RegionVerify+0x2a>
 8017c6a:	e00d      	b.n	8017c88 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8017c6c:	79bb      	ldrb	r3, [r7, #6]
 8017c6e:	4619      	mov	r1, r3
 8017c70:	6838      	ldr	r0, [r7, #0]
 8017c72:	f001 fc93 	bl	801959c <RegionEU868Verify>
 8017c76:	4603      	mov	r3, r0
 8017c78:	e007      	b.n	8017c8a <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8017c7a:	79bb      	ldrb	r3, [r7, #6]
 8017c7c:	4619      	mov	r1, r3
 8017c7e:	6838      	ldr	r0, [r7, #0]
 8017c80:	f002 febc 	bl	801a9fc <RegionUS915Verify>
 8017c84:	4603      	mov	r3, r0
 8017c86:	e000      	b.n	8017c8a <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8017c88:	2300      	movs	r3, #0
        }
    }
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}

08017c92 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017c92:	b580      	push	{r7, lr}
 8017c94:	b082      	sub	sp, #8
 8017c96:	af00      	add	r7, sp, #0
 8017c98:	4603      	mov	r3, r0
 8017c9a:	6039      	str	r1, [r7, #0]
 8017c9c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017c9e:	79fb      	ldrb	r3, [r7, #7]
 8017ca0:	2b05      	cmp	r3, #5
 8017ca2:	d002      	beq.n	8017caa <RegionApplyCFList+0x18>
 8017ca4:	2b08      	cmp	r3, #8
 8017ca6:	d004      	beq.n	8017cb2 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017ca8:	e007      	b.n	8017cba <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 8017caa:	6838      	ldr	r0, [r7, #0]
 8017cac:	f001 fcf2 	bl	8019694 <RegionEU868ApplyCFList>
 8017cb0:	e003      	b.n	8017cba <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 8017cb2:	6838      	ldr	r0, [r7, #0]
 8017cb4:	f002 ff18 	bl	801aae8 <RegionUS915ApplyCFList>
 8017cb8:	bf00      	nop
        }
    }
}
 8017cba:	bf00      	nop
 8017cbc:	3708      	adds	r7, #8
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}

08017cc2 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017cc2:	b580      	push	{r7, lr}
 8017cc4:	b082      	sub	sp, #8
 8017cc6:	af00      	add	r7, sp, #0
 8017cc8:	4603      	mov	r3, r0
 8017cca:	6039      	str	r1, [r7, #0]
 8017ccc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017cce:	79fb      	ldrb	r3, [r7, #7]
 8017cd0:	2b05      	cmp	r3, #5
 8017cd2:	d002      	beq.n	8017cda <RegionChanMaskSet+0x18>
 8017cd4:	2b08      	cmp	r3, #8
 8017cd6:	d005      	beq.n	8017ce4 <RegionChanMaskSet+0x22>
 8017cd8:	e009      	b.n	8017cee <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8017cda:	6838      	ldr	r0, [r7, #0]
 8017cdc:	f001 fd4e 	bl	801977c <RegionEU868ChanMaskSet>
 8017ce0:	4603      	mov	r3, r0
 8017ce2:	e005      	b.n	8017cf0 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8017ce4:	6838      	ldr	r0, [r7, #0]
 8017ce6:	f002 ff73 	bl	801abd0 <RegionUS915ChanMaskSet>
 8017cea:	4603      	mov	r3, r0
 8017cec:	e000      	b.n	8017cf0 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017cee:	2300      	movs	r3, #0
        }
    }
}
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	3708      	adds	r7, #8
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}

08017cf8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	603b      	str	r3, [r7, #0]
 8017d00:	4603      	mov	r3, r0
 8017d02:	71fb      	strb	r3, [r7, #7]
 8017d04:	460b      	mov	r3, r1
 8017d06:	71bb      	strb	r3, [r7, #6]
 8017d08:	4613      	mov	r3, r2
 8017d0a:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017d0c:	79fb      	ldrb	r3, [r7, #7]
 8017d0e:	2b05      	cmp	r3, #5
 8017d10:	d002      	beq.n	8017d18 <RegionComputeRxWindowParameters+0x20>
 8017d12:	2b08      	cmp	r3, #8
 8017d14:	d008      	beq.n	8017d28 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8017d16:	e00f      	b.n	8017d38 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017d18:	7979      	ldrb	r1, [r7, #5]
 8017d1a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017d1e:	693b      	ldr	r3, [r7, #16]
 8017d20:	683a      	ldr	r2, [r7, #0]
 8017d22:	f001 fd55 	bl	80197d0 <RegionEU868ComputeRxWindowParameters>
 8017d26:	e007      	b.n	8017d38 <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8017d28:	7979      	ldrb	r1, [r7, #5]
 8017d2a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017d2e:	693b      	ldr	r3, [r7, #16]
 8017d30:	683a      	ldr	r2, [r7, #0]
 8017d32:	f002 ffb5 	bl	801aca0 <RegionUS915ComputeRxWindowParameters>
 8017d36:	bf00      	nop
        }
    }
}
 8017d38:	bf00      	nop
 8017d3a:	3708      	adds	r7, #8
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b084      	sub	sp, #16
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	4603      	mov	r3, r0
 8017d48:	60b9      	str	r1, [r7, #8]
 8017d4a:	607a      	str	r2, [r7, #4]
 8017d4c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017d4e:	7bfb      	ldrb	r3, [r7, #15]
 8017d50:	2b05      	cmp	r3, #5
 8017d52:	d002      	beq.n	8017d5a <RegionRxConfig+0x1a>
 8017d54:	2b08      	cmp	r3, #8
 8017d56:	d006      	beq.n	8017d66 <RegionRxConfig+0x26>
 8017d58:	e00b      	b.n	8017d72 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017d5a:	6879      	ldr	r1, [r7, #4]
 8017d5c:	68b8      	ldr	r0, [r7, #8]
 8017d5e:	f001 fd91 	bl	8019884 <RegionEU868RxConfig>
 8017d62:	4603      	mov	r3, r0
 8017d64:	e006      	b.n	8017d74 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8017d66:	6879      	ldr	r1, [r7, #4]
 8017d68:	68b8      	ldr	r0, [r7, #8]
 8017d6a:	f002 ffe3 	bl	801ad34 <RegionUS915RxConfig>
 8017d6e:	4603      	mov	r3, r0
 8017d70:	e000      	b.n	8017d74 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017d72:	2300      	movs	r3, #0
        }
    }
}
 8017d74:	4618      	mov	r0, r3
 8017d76:	3710      	adds	r7, #16
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	bd80      	pop	{r7, pc}

08017d7c <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b084      	sub	sp, #16
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	60b9      	str	r1, [r7, #8]
 8017d84:	607a      	str	r2, [r7, #4]
 8017d86:	603b      	str	r3, [r7, #0]
 8017d88:	4603      	mov	r3, r0
 8017d8a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017d8c:	7bfb      	ldrb	r3, [r7, #15]
 8017d8e:	2b05      	cmp	r3, #5
 8017d90:	d002      	beq.n	8017d98 <RegionTxConfig+0x1c>
 8017d92:	2b08      	cmp	r3, #8
 8017d94:	d007      	beq.n	8017da6 <RegionTxConfig+0x2a>
 8017d96:	e00d      	b.n	8017db4 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017d98:	683a      	ldr	r2, [r7, #0]
 8017d9a:	6879      	ldr	r1, [r7, #4]
 8017d9c:	68b8      	ldr	r0, [r7, #8]
 8017d9e:	f001 fe41 	bl	8019a24 <RegionEU868TxConfig>
 8017da2:	4603      	mov	r3, r0
 8017da4:	e007      	b.n	8017db6 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8017da6:	683a      	ldr	r2, [r7, #0]
 8017da8:	6879      	ldr	r1, [r7, #4]
 8017daa:	68b8      	ldr	r0, [r7, #8]
 8017dac:	f003 f846 	bl	801ae3c <RegionUS915TxConfig>
 8017db0:	4603      	mov	r3, r0
 8017db2:	e000      	b.n	8017db6 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017db4:	2300      	movs	r3, #0
        }
    }
}
 8017db6:	4618      	mov	r0, r3
 8017db8:	3710      	adds	r7, #16
 8017dba:	46bd      	mov	sp, r7
 8017dbc:	bd80      	pop	{r7, pc}

08017dbe <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017dbe:	b580      	push	{r7, lr}
 8017dc0:	b086      	sub	sp, #24
 8017dc2:	af02      	add	r7, sp, #8
 8017dc4:	60b9      	str	r1, [r7, #8]
 8017dc6:	607a      	str	r2, [r7, #4]
 8017dc8:	603b      	str	r3, [r7, #0]
 8017dca:	4603      	mov	r3, r0
 8017dcc:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017dce:	7bfb      	ldrb	r3, [r7, #15]
 8017dd0:	2b05      	cmp	r3, #5
 8017dd2:	d002      	beq.n	8017dda <RegionLinkAdrReq+0x1c>
 8017dd4:	2b08      	cmp	r3, #8
 8017dd6:	d00a      	beq.n	8017dee <RegionLinkAdrReq+0x30>
 8017dd8:	e013      	b.n	8017e02 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	9300      	str	r3, [sp, #0]
 8017dde:	69bb      	ldr	r3, [r7, #24]
 8017de0:	683a      	ldr	r2, [r7, #0]
 8017de2:	6879      	ldr	r1, [r7, #4]
 8017de4:	68b8      	ldr	r0, [r7, #8]
 8017de6:	f001 feed 	bl	8019bc4 <RegionEU868LinkAdrReq>
 8017dea:	4603      	mov	r3, r0
 8017dec:	e00a      	b.n	8017e04 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8017dee:	69fb      	ldr	r3, [r7, #28]
 8017df0:	9300      	str	r3, [sp, #0]
 8017df2:	69bb      	ldr	r3, [r7, #24]
 8017df4:	683a      	ldr	r2, [r7, #0]
 8017df6:	6879      	ldr	r1, [r7, #4]
 8017df8:	68b8      	ldr	r0, [r7, #8]
 8017dfa:	f003 f8c9 	bl	801af90 <RegionUS915LinkAdrReq>
 8017dfe:	4603      	mov	r3, r0
 8017e00:	e000      	b.n	8017e04 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017e02:	2300      	movs	r3, #0
        }
    }
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	3710      	adds	r7, #16
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}

08017e0c <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	4603      	mov	r3, r0
 8017e14:	6039      	str	r1, [r7, #0]
 8017e16:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017e18:	79fb      	ldrb	r3, [r7, #7]
 8017e1a:	2b05      	cmp	r3, #5
 8017e1c:	d002      	beq.n	8017e24 <RegionRxParamSetupReq+0x18>
 8017e1e:	2b08      	cmp	r3, #8
 8017e20:	d005      	beq.n	8017e2e <RegionRxParamSetupReq+0x22>
 8017e22:	e009      	b.n	8017e38 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017e24:	6838      	ldr	r0, [r7, #0]
 8017e26:	f001 ffef 	bl	8019e08 <RegionEU868RxParamSetupReq>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	e005      	b.n	8017e3a <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8017e2e:	6838      	ldr	r0, [r7, #0]
 8017e30:	f003 fac8 	bl	801b3c4 <RegionUS915RxParamSetupReq>
 8017e34:	4603      	mov	r3, r0
 8017e36:	e000      	b.n	8017e3a <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017e38:	2300      	movs	r3, #0
        }
    }
}
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	3708      	adds	r7, #8
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}

08017e42 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017e42:	b580      	push	{r7, lr}
 8017e44:	b082      	sub	sp, #8
 8017e46:	af00      	add	r7, sp, #0
 8017e48:	4603      	mov	r3, r0
 8017e4a:	6039      	str	r1, [r7, #0]
 8017e4c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017e4e:	79fb      	ldrb	r3, [r7, #7]
 8017e50:	2b05      	cmp	r3, #5
 8017e52:	d002      	beq.n	8017e5a <RegionNewChannelReq+0x18>
 8017e54:	2b08      	cmp	r3, #8
 8017e56:	d005      	beq.n	8017e64 <RegionNewChannelReq+0x22>
 8017e58:	e009      	b.n	8017e6e <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017e5a:	6838      	ldr	r0, [r7, #0]
 8017e5c:	f002 f812 	bl	8019e84 <RegionEU868NewChannelReq>
 8017e60:	4603      	mov	r3, r0
 8017e62:	e005      	b.n	8017e70 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8017e64:	6838      	ldr	r0, [r7, #0]
 8017e66:	f003 faf9 	bl	801b45c <RegionUS915NewChannelReq>
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	e000      	b.n	8017e70 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017e6e:	2300      	movs	r3, #0
        }
    }
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	3708      	adds	r7, #8
 8017e74:	46bd      	mov	sp, r7
 8017e76:	bd80      	pop	{r7, pc}

08017e78 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b082      	sub	sp, #8
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	4603      	mov	r3, r0
 8017e80:	6039      	str	r1, [r7, #0]
 8017e82:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017e84:	79fb      	ldrb	r3, [r7, #7]
 8017e86:	2b05      	cmp	r3, #5
 8017e88:	d002      	beq.n	8017e90 <RegionTxParamSetupReq+0x18>
 8017e8a:	2b08      	cmp	r3, #8
 8017e8c:	d005      	beq.n	8017e9a <RegionTxParamSetupReq+0x22>
 8017e8e:	e009      	b.n	8017ea4 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017e90:	6838      	ldr	r0, [r7, #0]
 8017e92:	f002 f855 	bl	8019f40 <RegionEU868TxParamSetupReq>
 8017e96:	4603      	mov	r3, r0
 8017e98:	e005      	b.n	8017ea6 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8017e9a:	6838      	ldr	r0, [r7, #0]
 8017e9c:	f003 fae9 	bl	801b472 <RegionUS915TxParamSetupReq>
 8017ea0:	4603      	mov	r3, r0
 8017ea2:	e000      	b.n	8017ea6 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017ea4:	2300      	movs	r3, #0
        }
    }
}
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	3708      	adds	r7, #8
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	bd80      	pop	{r7, pc}

08017eae <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017eae:	b580      	push	{r7, lr}
 8017eb0:	b082      	sub	sp, #8
 8017eb2:	af00      	add	r7, sp, #0
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	6039      	str	r1, [r7, #0]
 8017eb8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017eba:	79fb      	ldrb	r3, [r7, #7]
 8017ebc:	2b05      	cmp	r3, #5
 8017ebe:	d002      	beq.n	8017ec6 <RegionDlChannelReq+0x18>
 8017ec0:	2b08      	cmp	r3, #8
 8017ec2:	d005      	beq.n	8017ed0 <RegionDlChannelReq+0x22>
 8017ec4:	e009      	b.n	8017eda <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017ec6:	6838      	ldr	r0, [r7, #0]
 8017ec8:	f002 f846 	bl	8019f58 <RegionEU868DlChannelReq>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	e005      	b.n	8017edc <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8017ed0:	6838      	ldr	r0, [r7, #0]
 8017ed2:	f003 fad9 	bl	801b488 <RegionUS915DlChannelReq>
 8017ed6:	4603      	mov	r3, r0
 8017ed8:	e000      	b.n	8017edc <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017eda:	2300      	movs	r3, #0
        }
    }
}
 8017edc:	4618      	mov	r0, r3
 8017ede:	3708      	adds	r7, #8
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	bd80      	pop	{r7, pc}

08017ee4 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b082      	sub	sp, #8
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	4603      	mov	r3, r0
 8017eec:	71fb      	strb	r3, [r7, #7]
 8017eee:	460b      	mov	r3, r1
 8017ef0:	71bb      	strb	r3, [r7, #6]
 8017ef2:	4613      	mov	r3, r2
 8017ef4:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017ef6:	79fb      	ldrb	r3, [r7, #7]
 8017ef8:	2b05      	cmp	r3, #5
 8017efa:	d002      	beq.n	8017f02 <RegionAlternateDr+0x1e>
 8017efc:	2b08      	cmp	r3, #8
 8017efe:	d009      	beq.n	8017f14 <RegionAlternateDr+0x30>
 8017f00:	e011      	b.n	8017f26 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017f02:	797a      	ldrb	r2, [r7, #5]
 8017f04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017f08:	4611      	mov	r1, r2
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f002 f86e 	bl	8019fec <RegionEU868AlternateDr>
 8017f10:	4603      	mov	r3, r0
 8017f12:	e009      	b.n	8017f28 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8017f14:	797a      	ldrb	r2, [r7, #5]
 8017f16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017f1a:	4611      	mov	r1, r2
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f003 fabf 	bl	801b4a0 <RegionUS915AlternateDr>
 8017f22:	4603      	mov	r3, r0
 8017f24:	e000      	b.n	8017f28 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017f26:	2300      	movs	r3, #0
        }
    }
}
 8017f28:	4618      	mov	r0, r3
 8017f2a:	3708      	adds	r7, #8
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	bd80      	pop	{r7, pc}

08017f30 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b084      	sub	sp, #16
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	60b9      	str	r1, [r7, #8]
 8017f38:	607a      	str	r2, [r7, #4]
 8017f3a:	603b      	str	r3, [r7, #0]
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017f40:	7bfb      	ldrb	r3, [r7, #15]
 8017f42:	2b05      	cmp	r3, #5
 8017f44:	d002      	beq.n	8017f4c <RegionNextChannel+0x1c>
 8017f46:	2b08      	cmp	r3, #8
 8017f48:	d008      	beq.n	8017f5c <RegionNextChannel+0x2c>
 8017f4a:	e00f      	b.n	8017f6c <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017f4c:	69bb      	ldr	r3, [r7, #24]
 8017f4e:	683a      	ldr	r2, [r7, #0]
 8017f50:	6879      	ldr	r1, [r7, #4]
 8017f52:	68b8      	ldr	r0, [r7, #8]
 8017f54:	f002 f85a 	bl	801a00c <RegionEU868NextChannel>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	e008      	b.n	8017f6e <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8017f5c:	69bb      	ldr	r3, [r7, #24]
 8017f5e:	683a      	ldr	r2, [r7, #0]
 8017f60:	6879      	ldr	r1, [r7, #4]
 8017f62:	68b8      	ldr	r0, [r7, #8]
 8017f64:	f003 fad2 	bl	801b50c <RegionUS915NextChannel>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	e000      	b.n	8017f6e <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017f6c:	2309      	movs	r3, #9
        }
    }
}
 8017f6e:	4618      	mov	r0, r3
 8017f70:	3710      	adds	r7, #16
 8017f72:	46bd      	mov	sp, r7
 8017f74:	bd80      	pop	{r7, pc}

08017f76 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017f76:	b590      	push	{r4, r7, lr}
 8017f78:	b083      	sub	sp, #12
 8017f7a:	af00      	add	r7, sp, #0
 8017f7c:	4604      	mov	r4, r0
 8017f7e:	4608      	mov	r0, r1
 8017f80:	4611      	mov	r1, r2
 8017f82:	461a      	mov	r2, r3
 8017f84:	4623      	mov	r3, r4
 8017f86:	71fb      	strb	r3, [r7, #7]
 8017f88:	4603      	mov	r3, r0
 8017f8a:	71bb      	strb	r3, [r7, #6]
 8017f8c:	460b      	mov	r3, r1
 8017f8e:	717b      	strb	r3, [r7, #5]
 8017f90:	4613      	mov	r3, r2
 8017f92:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017f94:	79fb      	ldrb	r3, [r7, #7]
 8017f96:	2b05      	cmp	r3, #5
 8017f98:	d002      	beq.n	8017fa0 <RegionApplyDrOffset+0x2a>
 8017f9a:	2b08      	cmp	r3, #8
 8017f9c:	d00a      	beq.n	8017fb4 <RegionApplyDrOffset+0x3e>
 8017f9e:	e013      	b.n	8017fc8 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017fa0:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017fa4:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017fa8:	79bb      	ldrb	r3, [r7, #6]
 8017faa:	4618      	mov	r0, r3
 8017fac:	f002 f9a8 	bl	801a300 <RegionEU868ApplyDrOffset>
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	e00a      	b.n	8017fca <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8017fb4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017fb8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017fbc:	79bb      	ldrb	r3, [r7, #6]
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f003 fb92 	bl	801b6e8 <RegionUS915ApplyDrOffset>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	e000      	b.n	8017fca <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017fc8:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017fca:	4618      	mov	r0, r3
 8017fcc:	370c      	adds	r7, #12
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd90      	pop	{r4, r7, pc}
	...

08017fd4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017fd4:	b480      	push	{r7}
 8017fd6:	b083      	sub	sp, #12
 8017fd8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017fda:	4b04      	ldr	r3, [pc, #16]	; (8017fec <RegionGetVersion+0x18>)
 8017fdc:	607b      	str	r3, [r7, #4]

    return version;
 8017fde:	687b      	ldr	r3, [r7, #4]
}
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	370c      	adds	r7, #12
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	bc80      	pop	{r7}
 8017fe8:	4770      	bx	lr
 8017fea:	bf00      	nop
 8017fec:	02010001 	.word	0x02010001

08017ff0 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017ff0:	b480      	push	{r7}
 8017ff2:	b087      	sub	sp, #28
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	60b9      	str	r1, [r7, #8]
 8017ffa:	607a      	str	r2, [r7, #4]
 8017ffc:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d002      	beq.n	801800a <FindAvailable125kHzChannels+0x1a>
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d101      	bne.n	801800e <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801800a:	2303      	movs	r3, #3
 801800c:	e021      	b.n	8018052 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	2200      	movs	r2, #0
 8018012:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8018014:	2300      	movs	r3, #0
 8018016:	75fb      	strb	r3, [r7, #23]
 8018018:	e017      	b.n	801804a <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 801801a:	89fa      	ldrh	r2, [r7, #14]
 801801c:	7dfb      	ldrb	r3, [r7, #23]
 801801e:	fa42 f303 	asr.w	r3, r2, r3
 8018022:	f003 0301 	and.w	r3, r3, #1
 8018026:	2b00      	cmp	r3, #0
 8018028:	d00c      	beq.n	8018044 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	781b      	ldrb	r3, [r3, #0]
 801802e:	461a      	mov	r2, r3
 8018030:	68bb      	ldr	r3, [r7, #8]
 8018032:	4413      	add	r3, r2
 8018034:	7dfa      	ldrb	r2, [r7, #23]
 8018036:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	781b      	ldrb	r3, [r3, #0]
 801803c:	3301      	adds	r3, #1
 801803e:	b2da      	uxtb	r2, r3
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8018044:	7dfb      	ldrb	r3, [r7, #23]
 8018046:	3301      	adds	r3, #1
 8018048:	75fb      	strb	r3, [r7, #23]
 801804a:	7dfb      	ldrb	r3, [r7, #23]
 801804c:	2b07      	cmp	r3, #7
 801804e:	d9e4      	bls.n	801801a <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8018050:	2300      	movs	r3, #0
}
 8018052:	4618      	mov	r0, r3
 8018054:	371c      	adds	r7, #28
 8018056:	46bd      	mov	sp, r7
 8018058:	bc80      	pop	{r7}
 801805a:	4770      	bx	lr

0801805c <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 801805c:	b590      	push	{r4, r7, lr}
 801805e:	b089      	sub	sp, #36	; 0x24
 8018060:	af00      	add	r7, sp, #0
 8018062:	60f8      	str	r0, [r7, #12]
 8018064:	60b9      	str	r1, [r7, #8]
 8018066:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8018068:	2300      	movs	r3, #0
 801806a:	617b      	str	r3, [r7, #20]
 801806c:	2300      	movs	r3, #0
 801806e:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8018070:	2300      	movs	r3, #0
 8018072:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d005      	beq.n	8018086 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801807a:	68bb      	ldr	r3, [r7, #8]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d002      	beq.n	8018086 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	2b00      	cmp	r3, #0
 8018084:	d101      	bne.n	801808a <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8018086:	2303      	movs	r3, #3
 8018088:	e055      	b.n	8018136 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 801808a:	68bb      	ldr	r3, [r7, #8]
 801808c:	781b      	ldrb	r3, [r3, #0]
 801808e:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8018090:	7f7b      	ldrb	r3, [r7, #29]
 8018092:	085b      	lsrs	r3, r3, #1
 8018094:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8018096:	7f7b      	ldrb	r3, [r7, #29]
 8018098:	f003 0301 	and.w	r3, r3, #1
 801809c:	b2db      	uxtb	r3, r3
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d107      	bne.n	80180b2 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80180a2:	7f3b      	ldrb	r3, [r7, #28]
 80180a4:	005b      	lsls	r3, r3, #1
 80180a6:	68fa      	ldr	r2, [r7, #12]
 80180a8:	4413      	add	r3, r2
 80180aa:	881b      	ldrh	r3, [r3, #0]
 80180ac:	b2db      	uxtb	r3, r3
 80180ae:	83fb      	strh	r3, [r7, #30]
 80180b0:	e006      	b.n	80180c0 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80180b2:	7f3b      	ldrb	r3, [r7, #28]
 80180b4:	005b      	lsls	r3, r3, #1
 80180b6:	68fa      	ldr	r2, [r7, #12]
 80180b8:	4413      	add	r3, r2
 80180ba:	881b      	ldrh	r3, [r3, #0]
 80180bc:	0a1b      	lsrs	r3, r3, #8
 80180be:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80180c0:	f107 0213 	add.w	r2, r7, #19
 80180c4:	f107 0114 	add.w	r1, r7, #20
 80180c8:	8bfb      	ldrh	r3, [r7, #30]
 80180ca:	4618      	mov	r0, r3
 80180cc:	f7ff ff90 	bl	8017ff0 <FindAvailable125kHzChannels>
 80180d0:	4603      	mov	r3, r0
 80180d2:	2b03      	cmp	r3, #3
 80180d4:	d101      	bne.n	80180da <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80180d6:	2303      	movs	r3, #3
 80180d8:	e02d      	b.n	8018136 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 80180da:	7cfb      	ldrb	r3, [r7, #19]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d011      	beq.n	8018104 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 80180e0:	7f7b      	ldrb	r3, [r7, #29]
 80180e2:	00db      	lsls	r3, r3, #3
 80180e4:	b2dc      	uxtb	r4, r3
 80180e6:	7cfb      	ldrb	r3, [r7, #19]
 80180e8:	3b01      	subs	r3, #1
 80180ea:	4619      	mov	r1, r3
 80180ec:	2000      	movs	r0, #0
 80180ee:	f003 fb4d 	bl	801b78c <randr>
 80180f2:	4603      	mov	r3, r0
 80180f4:	3320      	adds	r3, #32
 80180f6:	443b      	add	r3, r7
 80180f8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80180fc:	4423      	add	r3, r4
 80180fe:	b2da      	uxtb	r2, r3
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8018104:	7f7b      	ldrb	r3, [r7, #29]
 8018106:	3301      	adds	r3, #1
 8018108:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 801810a:	7f7b      	ldrb	r3, [r7, #29]
 801810c:	2b07      	cmp	r3, #7
 801810e:	d901      	bls.n	8018114 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8018110:	2300      	movs	r3, #0
 8018112:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8018114:	7cfb      	ldrb	r3, [r7, #19]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d104      	bne.n	8018124 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	781b      	ldrb	r3, [r3, #0]
 801811e:	7f7a      	ldrb	r2, [r7, #29]
 8018120:	429a      	cmp	r2, r3
 8018122:	d1b5      	bne.n	8018090 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8018124:	7cfb      	ldrb	r3, [r7, #19]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d004      	beq.n	8018134 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 801812a:	68bb      	ldr	r3, [r7, #8]
 801812c:	7f7a      	ldrb	r2, [r7, #29]
 801812e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018130:	2300      	movs	r3, #0
 8018132:	e000      	b.n	8018136 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018134:	2303      	movs	r3, #3
}
 8018136:	4618      	mov	r0, r3
 8018138:	3724      	adds	r7, #36	; 0x24
 801813a:	46bd      	mov	sp, r7
 801813c:	bd90      	pop	{r4, r7, pc}

0801813e <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801813e:	b480      	push	{r7}
 8018140:	b085      	sub	sp, #20
 8018142:	af00      	add	r7, sp, #0
 8018144:	4603      	mov	r3, r0
 8018146:	60b9      	str	r1, [r7, #8]
 8018148:	607a      	str	r2, [r7, #4]
 801814a:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801814c:	7bfb      	ldrb	r3, [r7, #15]
 801814e:	687a      	ldr	r2, [r7, #4]
 8018150:	fb03 f202 	mul.w	r2, r3, r2
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	4413      	add	r3, r2
}
 8018158:	4618      	mov	r0, r3
 801815a:	3714      	adds	r7, #20
 801815c:	46bd      	mov	sp, r7
 801815e:	bc80      	pop	{r7}
 8018160:	4770      	bx	lr

08018162 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8018162:	b480      	push	{r7}
 8018164:	b087      	sub	sp, #28
 8018166:	af00      	add	r7, sp, #0
 8018168:	60f8      	str	r0, [r7, #12]
 801816a:	4608      	mov	r0, r1
 801816c:	4639      	mov	r1, r7
 801816e:	e881 000c 	stmia.w	r1, {r2, r3}
 8018172:	4603      	mov	r3, r0
 8018174:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	881b      	ldrh	r3, [r3, #0]
 801817a:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801817c:	7afb      	ldrb	r3, [r7, #11]
 801817e:	f083 0301 	eor.w	r3, r3, #1
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b00      	cmp	r3, #0
 8018186:	d01b      	beq.n	80181c0 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8018188:	f242 7310 	movw	r3, #10000	; 0x2710
 801818c:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8018194:	d202      	bcs.n	801819c <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8018196:	2364      	movs	r3, #100	; 0x64
 8018198:	82bb      	strh	r3, [r7, #20]
 801819a:	e00b      	b.n	80181b4 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801819c:	683b      	ldr	r3, [r7, #0]
 801819e:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80181a2:	4293      	cmp	r3, r2
 80181a4:	d803      	bhi.n	80181ae <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80181a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80181aa:	82bb      	strh	r3, [r7, #20]
 80181ac:	e002      	b.n	80181b4 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80181ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80181b2:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80181b4:	8aba      	ldrh	r2, [r7, #20]
 80181b6:	8afb      	ldrh	r3, [r7, #22]
 80181b8:	4293      	cmp	r3, r2
 80181ba:	bf38      	it	cc
 80181bc:	4613      	movcc	r3, r2
 80181be:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80181c0:	8afb      	ldrh	r3, [r7, #22]
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d101      	bne.n	80181ca <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80181c6:	2301      	movs	r3, #1
 80181c8:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80181ca:	8afb      	ldrh	r3, [r7, #22]
}
 80181cc:	4618      	mov	r0, r3
 80181ce:	371c      	adds	r7, #28
 80181d0:	46bd      	mov	sp, r7
 80181d2:	bc80      	pop	{r7}
 80181d4:	4770      	bx	lr
	...

080181d8 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80181d8:	b580      	push	{r7, lr}
 80181da:	b08e      	sub	sp, #56	; 0x38
 80181dc:	af02      	add	r7, sp, #8
 80181de:	60f8      	str	r0, [r7, #12]
 80181e0:	4608      	mov	r0, r1
 80181e2:	4639      	mov	r1, r7
 80181e4:	e881 000c 	stmia.w	r1, {r2, r3}
 80181e8:	4603      	mov	r3, r0
 80181ea:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	881b      	ldrh	r3, [r3, #0]
 80181f0:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80181f2:	4b4b      	ldr	r3, [pc, #300]	; (8018320 <SetMaxTimeCredits+0x148>)
 80181f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80181f6:	463b      	mov	r3, r7
 80181f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181fc:	f006 ff30 	bl	801f060 <SysTimeToMs>
 8018200:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8018202:	f107 0314 	add.w	r3, r7, #20
 8018206:	2200      	movs	r2, #0
 8018208:	601a      	str	r2, [r3, #0]
 801820a:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801820c:	7af9      	ldrb	r1, [r7, #11]
 801820e:	463b      	mov	r3, r7
 8018210:	cb0c      	ldmia	r3, {r2, r3}
 8018212:	68f8      	ldr	r0, [r7, #12]
 8018214:	f7ff ffa5 	bl	8018162 <GetDutyCycle>
 8018218:	4603      	mov	r3, r0
 801821a:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 801821c:	7afb      	ldrb	r3, [r7, #11]
 801821e:	f083 0301 	eor.w	r3, r3, #1
 8018222:	b2db      	uxtb	r3, r3
 8018224:	2b00      	cmp	r3, #0
 8018226:	d062      	beq.n	80182ee <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018228:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801822a:	2b64      	cmp	r3, #100	; 0x64
 801822c:	d105      	bne.n	801823a <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801822e:	4b3c      	ldr	r3, [pc, #240]	; (8018320 <SetMaxTimeCredits+0x148>)
 8018230:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018236:	609a      	str	r2, [r3, #8]
 8018238:	e00b      	b.n	8018252 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801823a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801823c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018240:	d105      	bne.n	801824e <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8018242:	4b38      	ldr	r3, [pc, #224]	; (8018324 <SetMaxTimeCredits+0x14c>)
 8018244:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801824a:	609a      	str	r2, [r3, #8]
 801824c:	e001      	b.n	8018252 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801824e:	4b36      	ldr	r3, [pc, #216]	; (8018328 <SetMaxTimeCredits+0x150>)
 8018250:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8018252:	68fb      	ldr	r3, [r7, #12]
 8018254:	689a      	ldr	r2, [r3, #8]
 8018256:	f107 031c 	add.w	r3, r7, #28
 801825a:	4611      	mov	r1, r2
 801825c:	4618      	mov	r0, r3
 801825e:	f006 ff27 	bl	801f0b0 <SysTimeFromMs>
 8018262:	f107 0014 	add.w	r0, r7, #20
 8018266:	6a3b      	ldr	r3, [r7, #32]
 8018268:	9300      	str	r3, [sp, #0]
 801826a:	69fb      	ldr	r3, [r7, #28]
 801826c:	463a      	mov	r2, r7
 801826e:	ca06      	ldmia	r2, {r1, r2}
 8018270:	f006 fe37 	bl	801eee2 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8018274:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8018278:	f083 0301 	eor.w	r3, r3, #1
 801827c:	b2db      	uxtb	r3, r3
 801827e:	2b00      	cmp	r3, #0
 8018280:	d006      	beq.n	8018290 <SetMaxTimeCredits+0xb8>
 8018282:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8018286:	f083 0301 	eor.w	r3, r3, #1
 801828a:	b2db      	uxtb	r3, r3
 801828c:	2b00      	cmp	r3, #0
 801828e:	d108      	bne.n	80182a2 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8018294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018296:	429a      	cmp	r2, r3
 8018298:	d103      	bne.n	80182a2 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 801829a:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 801829c:	4a23      	ldr	r2, [pc, #140]	; (801832c <SetMaxTimeCredits+0x154>)
 801829e:	4293      	cmp	r3, r2
 80182a0:	d92f      	bls.n	8018302 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80182a6:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80182a8:	683b      	ldr	r3, [r7, #0]
 80182aa:	4a21      	ldr	r2, [pc, #132]	; (8018330 <SetMaxTimeCredits+0x158>)
 80182ac:	4293      	cmp	r3, r2
 80182ae:	d928      	bls.n	8018302 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80182b6:	3b30      	subs	r3, #48	; 0x30
 80182b8:	4a1e      	ldr	r2, [pc, #120]	; (8018334 <SetMaxTimeCredits+0x15c>)
 80182ba:	fba2 2303 	umull	r2, r3, r2, r3
 80182be:	0c1b      	lsrs	r3, r3, #16
 80182c0:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	4a1c      	ldr	r2, [pc, #112]	; (8018338 <SetMaxTimeCredits+0x160>)
 80182c6:	fb02 f303 	mul.w	r3, r2, r3
 80182ca:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80182d2:	3330      	adds	r3, #48	; 0x30
 80182d4:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80182d6:	2300      	movs	r3, #0
 80182d8:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80182da:	f107 0314 	add.w	r3, r7, #20
 80182de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80182e2:	f006 febd 	bl	801f060 <SysTimeToMs>
 80182e6:	4602      	mov	r2, r0
 80182e8:	68fb      	ldr	r3, [r7, #12]
 80182ea:	609a      	str	r2, [r3, #8]
 80182ec:	e009      	b.n	8018302 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80182ee:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80182f2:	f083 0301 	eor.w	r3, r3, #1
 80182f6:	b2db      	uxtb	r3, r3
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d002      	beq.n	8018302 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018300:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	685b      	ldr	r3, [r3, #4]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d102      	bne.n	8018310 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801830e:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018314:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8018316:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8018318:	4618      	mov	r0, r3
 801831a:	3730      	adds	r7, #48	; 0x30
 801831c:	46bd      	mov	sp, r7
 801831e:	bd80      	pop	{r7, pc}
 8018320:	001b7740 	.word	0x001b7740
 8018324:	0112a880 	.word	0x0112a880
 8018328:	02932e00 	.word	0x02932e00
 801832c:	0001517f 	.word	0x0001517f
 8018330:	0001ec2f 	.word	0x0001ec2f
 8018334:	c22e4507 	.word	0xc22e4507
 8018338:	00015180 	.word	0x00015180

0801833c <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b086      	sub	sp, #24
 8018340:	af02      	add	r7, sp, #8
 8018342:	6078      	str	r0, [r7, #4]
 8018344:	4608      	mov	r0, r1
 8018346:	4611      	mov	r1, r2
 8018348:	461a      	mov	r2, r3
 801834a:	4603      	mov	r3, r0
 801834c:	70fb      	strb	r3, [r7, #3]
 801834e:	460b      	mov	r3, r1
 8018350:	70bb      	strb	r3, [r7, #2]
 8018352:	4613      	mov	r3, r2
 8018354:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8018356:	78f9      	ldrb	r1, [r7, #3]
 8018358:	787b      	ldrb	r3, [r7, #1]
 801835a:	9301      	str	r3, [sp, #4]
 801835c:	78bb      	ldrb	r3, [r7, #2]
 801835e:	9300      	str	r3, [sp, #0]
 8018360:	f107 0318 	add.w	r3, r7, #24
 8018364:	cb0c      	ldmia	r3, {r2, r3}
 8018366:	6878      	ldr	r0, [r7, #4]
 8018368:	f7ff ff36 	bl	80181d8 <SetMaxTimeCredits>
 801836c:	4603      	mov	r3, r0
 801836e:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8018370:	78fb      	ldrb	r3, [r7, #3]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d00a      	beq.n	801838c <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	685b      	ldr	r3, [r3, #4]
 801837a:	4618      	mov	r0, r3
 801837c:	f007 fba8 	bl	801fad0 <UTIL_TIMER_GetElapsedTime>
 8018380:	4602      	mov	r2, r0
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	68db      	ldr	r3, [r3, #12]
 8018386:	441a      	add	r2, r3
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	68da      	ldr	r2, [r3, #12]
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	691b      	ldr	r3, [r3, #16]
 8018394:	429a      	cmp	r2, r3
 8018396:	d903      	bls.n	80183a0 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	691a      	ldr	r2, [r3, #16]
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6a3a      	ldr	r2, [r7, #32]
 80183a4:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80183a6:	89fb      	ldrh	r3, [r7, #14]
}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3710      	adds	r7, #16
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}

080183b0 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80183b0:	b480      	push	{r7}
 80183b2:	b085      	sub	sp, #20
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	4603      	mov	r3, r0
 80183b8:	460a      	mov	r2, r1
 80183ba:	80fb      	strh	r3, [r7, #6]
 80183bc:	4613      	mov	r3, r2
 80183be:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80183c0:	2300      	movs	r3, #0
 80183c2:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80183c4:	2300      	movs	r3, #0
 80183c6:	73bb      	strb	r3, [r7, #14]
 80183c8:	e011      	b.n	80183ee <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80183ca:	88fa      	ldrh	r2, [r7, #6]
 80183cc:	7bbb      	ldrb	r3, [r7, #14]
 80183ce:	2101      	movs	r1, #1
 80183d0:	fa01 f303 	lsl.w	r3, r1, r3
 80183d4:	401a      	ands	r2, r3
 80183d6:	7bbb      	ldrb	r3, [r7, #14]
 80183d8:	2101      	movs	r1, #1
 80183da:	fa01 f303 	lsl.w	r3, r1, r3
 80183de:	429a      	cmp	r2, r3
 80183e0:	d102      	bne.n	80183e8 <CountChannels+0x38>
        {
            nbActiveBits++;
 80183e2:	7bfb      	ldrb	r3, [r7, #15]
 80183e4:	3301      	adds	r3, #1
 80183e6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80183e8:	7bbb      	ldrb	r3, [r7, #14]
 80183ea:	3301      	adds	r3, #1
 80183ec:	73bb      	strb	r3, [r7, #14]
 80183ee:	7bba      	ldrb	r2, [r7, #14]
 80183f0:	797b      	ldrb	r3, [r7, #5]
 80183f2:	429a      	cmp	r2, r3
 80183f4:	d3e9      	bcc.n	80183ca <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80183f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3714      	adds	r7, #20
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bc80      	pop	{r7}
 8018400:	4770      	bx	lr

08018402 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8018402:	b580      	push	{r7, lr}
 8018404:	b084      	sub	sp, #16
 8018406:	af00      	add	r7, sp, #0
 8018408:	6039      	str	r1, [r7, #0]
 801840a:	4611      	mov	r1, r2
 801840c:	461a      	mov	r2, r3
 801840e:	4603      	mov	r3, r0
 8018410:	71fb      	strb	r3, [r7, #7]
 8018412:	460b      	mov	r3, r1
 8018414:	71bb      	strb	r3, [r7, #6]
 8018416:	4613      	mov	r3, r2
 8018418:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801841a:	f997 2018 	ldrsb.w	r2, [r7, #24]
 801841e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8018422:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018426:	4618      	mov	r0, r3
 8018428:	f000 f85d 	bl	80184e6 <RegionCommonValueInRange>
 801842c:	4603      	mov	r3, r0
 801842e:	2b00      	cmp	r3, #0
 8018430:	d101      	bne.n	8018436 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8018432:	2300      	movs	r3, #0
 8018434:	e053      	b.n	80184de <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8018436:	2300      	movs	r3, #0
 8018438:	73fb      	strb	r3, [r7, #15]
 801843a:	2300      	movs	r3, #0
 801843c:	73bb      	strb	r3, [r7, #14]
 801843e:	e049      	b.n	80184d4 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018440:	2300      	movs	r3, #0
 8018442:	737b      	strb	r3, [r7, #13]
 8018444:	e03d      	b.n	80184c2 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8018446:	7bbb      	ldrb	r3, [r7, #14]
 8018448:	005b      	lsls	r3, r3, #1
 801844a:	683a      	ldr	r2, [r7, #0]
 801844c:	4413      	add	r3, r2
 801844e:	881b      	ldrh	r3, [r3, #0]
 8018450:	461a      	mov	r2, r3
 8018452:	7b7b      	ldrb	r3, [r7, #13]
 8018454:	fa42 f303 	asr.w	r3, r2, r3
 8018458:	f003 0301 	and.w	r3, r3, #1
 801845c:	2b00      	cmp	r3, #0
 801845e:	d02d      	beq.n	80184bc <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8018460:	7bfa      	ldrb	r2, [r7, #15]
 8018462:	7b7b      	ldrb	r3, [r7, #13]
 8018464:	4413      	add	r3, r2
 8018466:	461a      	mov	r2, r3
 8018468:	4613      	mov	r3, r2
 801846a:	005b      	lsls	r3, r3, #1
 801846c:	4413      	add	r3, r2
 801846e:	009b      	lsls	r3, r3, #2
 8018470:	461a      	mov	r2, r3
 8018472:	69fb      	ldr	r3, [r7, #28]
 8018474:	4413      	add	r3, r2
 8018476:	7a1b      	ldrb	r3, [r3, #8]
 8018478:	f343 0303 	sbfx	r3, r3, #0, #4
 801847c:	b25b      	sxtb	r3, r3
 801847e:	f003 030f 	and.w	r3, r3, #15
 8018482:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8018484:	7bfa      	ldrb	r2, [r7, #15]
 8018486:	7b7b      	ldrb	r3, [r7, #13]
 8018488:	4413      	add	r3, r2
 801848a:	461a      	mov	r2, r3
 801848c:	4613      	mov	r3, r2
 801848e:	005b      	lsls	r3, r3, #1
 8018490:	4413      	add	r3, r2
 8018492:	009b      	lsls	r3, r3, #2
 8018494:	461a      	mov	r2, r3
 8018496:	69fb      	ldr	r3, [r7, #28]
 8018498:	4413      	add	r3, r2
 801849a:	7a1b      	ldrb	r3, [r3, #8]
 801849c:	f343 1303 	sbfx	r3, r3, #4, #4
 80184a0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80184a2:	f003 030f 	and.w	r3, r3, #15
 80184a6:	b25a      	sxtb	r2, r3
 80184a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80184ac:	4618      	mov	r0, r3
 80184ae:	f000 f81a 	bl	80184e6 <RegionCommonValueInRange>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b01      	cmp	r3, #1
 80184b6:	d101      	bne.n	80184bc <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80184b8:	2301      	movs	r3, #1
 80184ba:	e010      	b.n	80184de <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80184bc:	7b7b      	ldrb	r3, [r7, #13]
 80184be:	3301      	adds	r3, #1
 80184c0:	737b      	strb	r3, [r7, #13]
 80184c2:	7b7b      	ldrb	r3, [r7, #13]
 80184c4:	2b0f      	cmp	r3, #15
 80184c6:	d9be      	bls.n	8018446 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80184c8:	7bfb      	ldrb	r3, [r7, #15]
 80184ca:	3310      	adds	r3, #16
 80184cc:	73fb      	strb	r3, [r7, #15]
 80184ce:	7bbb      	ldrb	r3, [r7, #14]
 80184d0:	3301      	adds	r3, #1
 80184d2:	73bb      	strb	r3, [r7, #14]
 80184d4:	7bfa      	ldrb	r2, [r7, #15]
 80184d6:	79fb      	ldrb	r3, [r7, #7]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d3b1      	bcc.n	8018440 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80184dc:	2300      	movs	r3, #0
}
 80184de:	4618      	mov	r0, r3
 80184e0:	3710      	adds	r7, #16
 80184e2:	46bd      	mov	sp, r7
 80184e4:	bd80      	pop	{r7, pc}

080184e6 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80184e6:	b480      	push	{r7}
 80184e8:	b083      	sub	sp, #12
 80184ea:	af00      	add	r7, sp, #0
 80184ec:	4603      	mov	r3, r0
 80184ee:	71fb      	strb	r3, [r7, #7]
 80184f0:	460b      	mov	r3, r1
 80184f2:	71bb      	strb	r3, [r7, #6]
 80184f4:	4613      	mov	r3, r2
 80184f6:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80184f8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80184fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018500:	429a      	cmp	r2, r3
 8018502:	db07      	blt.n	8018514 <RegionCommonValueInRange+0x2e>
 8018504:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018508:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801850c:	429a      	cmp	r2, r3
 801850e:	dc01      	bgt.n	8018514 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8018510:	2301      	movs	r3, #1
 8018512:	e000      	b.n	8018516 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8018514:	2300      	movs	r3, #0
}
 8018516:	4618      	mov	r0, r3
 8018518:	370c      	adds	r7, #12
 801851a:	46bd      	mov	sp, r7
 801851c:	bc80      	pop	{r7}
 801851e:	4770      	bx	lr

08018520 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8018520:	b480      	push	{r7}
 8018522:	b085      	sub	sp, #20
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
 8018528:	460b      	mov	r3, r1
 801852a:	70fb      	strb	r3, [r7, #3]
 801852c:	4613      	mov	r3, r2
 801852e:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8018530:	78fb      	ldrb	r3, [r7, #3]
 8018532:	091b      	lsrs	r3, r3, #4
 8018534:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8018536:	78bb      	ldrb	r3, [r7, #2]
 8018538:	091b      	lsrs	r3, r3, #4
 801853a:	b2db      	uxtb	r3, r3
 801853c:	7bfa      	ldrb	r2, [r7, #15]
 801853e:	429a      	cmp	r2, r3
 8018540:	d803      	bhi.n	801854a <RegionCommonChanDisable+0x2a>
 8018542:	78fa      	ldrb	r2, [r7, #3]
 8018544:	78bb      	ldrb	r3, [r7, #2]
 8018546:	429a      	cmp	r2, r3
 8018548:	d301      	bcc.n	801854e <RegionCommonChanDisable+0x2e>
    {
        return false;
 801854a:	2300      	movs	r3, #0
 801854c:	e017      	b.n	801857e <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801854e:	7bfb      	ldrb	r3, [r7, #15]
 8018550:	005b      	lsls	r3, r3, #1
 8018552:	687a      	ldr	r2, [r7, #4]
 8018554:	4413      	add	r3, r2
 8018556:	881b      	ldrh	r3, [r3, #0]
 8018558:	b21a      	sxth	r2, r3
 801855a:	78fb      	ldrb	r3, [r7, #3]
 801855c:	f003 030f 	and.w	r3, r3, #15
 8018560:	2101      	movs	r1, #1
 8018562:	fa01 f303 	lsl.w	r3, r1, r3
 8018566:	b21b      	sxth	r3, r3
 8018568:	43db      	mvns	r3, r3
 801856a:	b21b      	sxth	r3, r3
 801856c:	4013      	ands	r3, r2
 801856e:	b219      	sxth	r1, r3
 8018570:	7bfb      	ldrb	r3, [r7, #15]
 8018572:	005b      	lsls	r3, r3, #1
 8018574:	687a      	ldr	r2, [r7, #4]
 8018576:	4413      	add	r3, r2
 8018578:	b28a      	uxth	r2, r1
 801857a:	801a      	strh	r2, [r3, #0]

    return true;
 801857c:	2301      	movs	r3, #1
}
 801857e:	4618      	mov	r0, r3
 8018580:	3714      	adds	r7, #20
 8018582:	46bd      	mov	sp, r7
 8018584:	bc80      	pop	{r7}
 8018586:	4770      	bx	lr

08018588 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
 801858e:	6078      	str	r0, [r7, #4]
 8018590:	460b      	mov	r3, r1
 8018592:	70fb      	strb	r3, [r7, #3]
 8018594:	4613      	mov	r3, r2
 8018596:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8018598:	2300      	movs	r3, #0
 801859a:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d101      	bne.n	80185a6 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80185a2:	2300      	movs	r3, #0
 80185a4:	e018      	b.n	80185d8 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80185a6:	78fb      	ldrb	r3, [r7, #3]
 80185a8:	73bb      	strb	r3, [r7, #14]
 80185aa:	e010      	b.n	80185ce <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80185ac:	7bbb      	ldrb	r3, [r7, #14]
 80185ae:	005b      	lsls	r3, r3, #1
 80185b0:	687a      	ldr	r2, [r7, #4]
 80185b2:	4413      	add	r3, r2
 80185b4:	881b      	ldrh	r3, [r3, #0]
 80185b6:	2110      	movs	r1, #16
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7ff fef9 	bl	80183b0 <CountChannels>
 80185be:	4603      	mov	r3, r0
 80185c0:	461a      	mov	r2, r3
 80185c2:	7bfb      	ldrb	r3, [r7, #15]
 80185c4:	4413      	add	r3, r2
 80185c6:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80185c8:	7bbb      	ldrb	r3, [r7, #14]
 80185ca:	3301      	adds	r3, #1
 80185cc:	73bb      	strb	r3, [r7, #14]
 80185ce:	7bba      	ldrb	r2, [r7, #14]
 80185d0:	78bb      	ldrb	r3, [r7, #2]
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d3ea      	bcc.n	80185ac <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80185d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80185d8:	4618      	mov	r0, r3
 80185da:	3710      	adds	r7, #16
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd80      	pop	{r7, pc}

080185e0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80185e0:	b480      	push	{r7}
 80185e2:	b087      	sub	sp, #28
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	60f8      	str	r0, [r7, #12]
 80185e8:	60b9      	str	r1, [r7, #8]
 80185ea:	4613      	mov	r3, r2
 80185ec:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d016      	beq.n	8018622 <RegionCommonChanMaskCopy+0x42>
 80185f4:	68bb      	ldr	r3, [r7, #8]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d013      	beq.n	8018622 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80185fa:	2300      	movs	r3, #0
 80185fc:	75fb      	strb	r3, [r7, #23]
 80185fe:	e00c      	b.n	801861a <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8018600:	7dfb      	ldrb	r3, [r7, #23]
 8018602:	005b      	lsls	r3, r3, #1
 8018604:	68ba      	ldr	r2, [r7, #8]
 8018606:	441a      	add	r2, r3
 8018608:	7dfb      	ldrb	r3, [r7, #23]
 801860a:	005b      	lsls	r3, r3, #1
 801860c:	68f9      	ldr	r1, [r7, #12]
 801860e:	440b      	add	r3, r1
 8018610:	8812      	ldrh	r2, [r2, #0]
 8018612:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8018614:	7dfb      	ldrb	r3, [r7, #23]
 8018616:	3301      	adds	r3, #1
 8018618:	75fb      	strb	r3, [r7, #23]
 801861a:	7dfa      	ldrb	r2, [r7, #23]
 801861c:	79fb      	ldrb	r3, [r7, #7]
 801861e:	429a      	cmp	r2, r3
 8018620:	d3ee      	bcc.n	8018600 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8018622:	bf00      	nop
 8018624:	371c      	adds	r7, #28
 8018626:	46bd      	mov	sp, r7
 8018628:	bc80      	pop	{r7}
 801862a:	4770      	bx	lr

0801862c <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801862c:	b082      	sub	sp, #8
 801862e:	b580      	push	{r7, lr}
 8018630:	b086      	sub	sp, #24
 8018632:	af00      	add	r7, sp, #0
 8018634:	60f8      	str	r0, [r7, #12]
 8018636:	60b9      	str	r1, [r7, #8]
 8018638:	627b      	str	r3, [r7, #36]	; 0x24
 801863a:	4613      	mov	r3, r2
 801863c:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801863e:	79f9      	ldrb	r1, [r7, #7]
 8018640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018644:	cb0c      	ldmia	r3, {r2, r3}
 8018646:	68f8      	ldr	r0, [r7, #12]
 8018648:	f7ff fd8b 	bl	8018162 <GetDutyCycle>
 801864c:	4603      	mov	r3, r0
 801864e:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	68da      	ldr	r2, [r3, #12]
 8018654:	8afb      	ldrh	r3, [r7, #22]
 8018656:	68b9      	ldr	r1, [r7, #8]
 8018658:	fb01 f303 	mul.w	r3, r1, r3
 801865c:	429a      	cmp	r2, r3
 801865e:	d909      	bls.n	8018674 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	68da      	ldr	r2, [r3, #12]
 8018664:	8afb      	ldrh	r3, [r7, #22]
 8018666:	68b9      	ldr	r1, [r7, #8]
 8018668:	fb01 f303 	mul.w	r3, r1, r3
 801866c:	1ad2      	subs	r2, r2, r3
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8018672:	e002      	b.n	801867a <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	2200      	movs	r2, #0
 8018678:	60da      	str	r2, [r3, #12]
}
 801867a:	bf00      	nop
 801867c:	3718      	adds	r7, #24
 801867e:	46bd      	mov	sp, r7
 8018680:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018684:	b002      	add	sp, #8
 8018686:	4770      	bx	lr

08018688 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801868a:	b08f      	sub	sp, #60	; 0x3c
 801868c:	af04      	add	r7, sp, #16
 801868e:	6039      	str	r1, [r7, #0]
 8018690:	4611      	mov	r1, r2
 8018692:	461a      	mov	r2, r3
 8018694:	4603      	mov	r3, r0
 8018696:	71fb      	strb	r3, [r7, #7]
 8018698:	460b      	mov	r3, r1
 801869a:	71bb      	strb	r3, [r7, #6]
 801869c:	4613      	mov	r3, r2
 801869e:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80186a0:	f04f 33ff 	mov.w	r3, #4294967295
 80186a4:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80186a6:	f007 fa01 	bl	801faac <UTIL_TIMER_GetCurrentTime>
 80186aa:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80186ac:	2300      	movs	r3, #0
 80186ae:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80186b0:	2301      	movs	r3, #1
 80186b2:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80186b4:	2300      	movs	r3, #0
 80186b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80186ba:	2300      	movs	r3, #0
 80186bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80186c0:	e0ba      	b.n	8018838 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80186c2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80186c6:	4613      	mov	r3, r2
 80186c8:	005b      	lsls	r3, r3, #1
 80186ca:	4413      	add	r3, r2
 80186cc:	00db      	lsls	r3, r3, #3
 80186ce:	461a      	mov	r2, r3
 80186d0:	683b      	ldr	r3, [r7, #0]
 80186d2:	189c      	adds	r4, r3, r2
 80186d4:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 80186d8:	797a      	ldrb	r2, [r7, #5]
 80186da:	79fd      	ldrb	r5, [r7, #7]
 80186dc:	69fb      	ldr	r3, [r7, #28]
 80186de:	9302      	str	r3, [sp, #8]
 80186e0:	46ec      	mov	ip, sp
 80186e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80186e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80186ea:	e88c 0003 	stmia.w	ip, {r0, r1}
 80186ee:	4633      	mov	r3, r6
 80186f0:	4629      	mov	r1, r5
 80186f2:	4620      	mov	r0, r4
 80186f4:	f7ff fe22 	bl	801833c <UpdateTimeCredits>
 80186f8:	4603      	mov	r3, r0
 80186fa:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80186fc:	8afa      	ldrh	r2, [r7, #22]
 80186fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018700:	fb02 f303 	mul.w	r3, r2, r3
 8018704:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8018706:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801870a:	4613      	mov	r3, r2
 801870c:	005b      	lsls	r3, r3, #1
 801870e:	4413      	add	r3, r2
 8018710:	00db      	lsls	r3, r3, #3
 8018712:	461a      	mov	r2, r3
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	4413      	add	r3, r2
 8018718:	68db      	ldr	r3, [r3, #12]
 801871a:	69ba      	ldr	r2, [r7, #24]
 801871c:	429a      	cmp	r2, r3
 801871e:	d908      	bls.n	8018732 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8018720:	797b      	ldrb	r3, [r7, #5]
 8018722:	f083 0301 	eor.w	r3, r3, #1
 8018726:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8018728:	2b00      	cmp	r3, #0
 801872a:	d013      	beq.n	8018754 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801872c:	79fb      	ldrb	r3, [r7, #7]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d010      	beq.n	8018754 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8018732:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018736:	4613      	mov	r3, r2
 8018738:	005b      	lsls	r3, r3, #1
 801873a:	4413      	add	r3, r2
 801873c:	00db      	lsls	r3, r3, #3
 801873e:	461a      	mov	r2, r3
 8018740:	683b      	ldr	r3, [r7, #0]
 8018742:	4413      	add	r3, r2
 8018744:	2201      	movs	r2, #1
 8018746:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8018748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801874c:	3301      	adds	r3, #1
 801874e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8018752:	e06c      	b.n	801882e <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8018754:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018758:	4613      	mov	r3, r2
 801875a:	005b      	lsls	r3, r3, #1
 801875c:	4413      	add	r3, r2
 801875e:	00db      	lsls	r3, r3, #3
 8018760:	461a      	mov	r2, r3
 8018762:	683b      	ldr	r3, [r7, #0]
 8018764:	4413      	add	r3, r2
 8018766:	2200      	movs	r2, #0
 8018768:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 801876a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801876e:	4613      	mov	r3, r2
 8018770:	005b      	lsls	r3, r3, #1
 8018772:	4413      	add	r3, r2
 8018774:	00db      	lsls	r3, r3, #3
 8018776:	461a      	mov	r2, r3
 8018778:	683b      	ldr	r3, [r7, #0]
 801877a:	4413      	add	r3, r2
 801877c:	691b      	ldr	r3, [r3, #16]
 801877e:	69ba      	ldr	r2, [r7, #24]
 8018780:	429a      	cmp	r2, r3
 8018782:	d815      	bhi.n	80187b0 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8018784:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018788:	4613      	mov	r3, r2
 801878a:	005b      	lsls	r3, r3, #1
 801878c:	4413      	add	r3, r2
 801878e:	00db      	lsls	r3, r3, #3
 8018790:	461a      	mov	r2, r3
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	4413      	add	r3, r2
 8018796:	68db      	ldr	r3, [r3, #12]
 8018798:	69ba      	ldr	r2, [r7, #24]
 801879a:	1ad3      	subs	r3, r2, r3
 801879c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801879e:	4293      	cmp	r3, r2
 80187a0:	bf28      	it	cs
 80187a2:	4613      	movcs	r3, r2
 80187a4:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80187a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80187aa:	3301      	adds	r3, #1
 80187ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80187b0:	79fb      	ldrb	r3, [r7, #7]
 80187b2:	f083 0301 	eor.w	r3, r3, #1
 80187b6:	b2db      	uxtb	r3, r3
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d038      	beq.n	801882e <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80187bc:	2300      	movs	r3, #0
 80187be:	60fb      	str	r3, [r7, #12]
 80187c0:	2300      	movs	r3, #0
 80187c2:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80187c4:	8afb      	ldrh	r3, [r7, #22]
 80187c6:	2b64      	cmp	r3, #100	; 0x64
 80187c8:	d103      	bne.n	80187d2 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80187ca:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80187ce:	60fb      	str	r3, [r7, #12]
 80187d0:	e009      	b.n	80187e6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80187d2:	8afb      	ldrh	r3, [r7, #22]
 80187d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80187d8:	d103      	bne.n	80187e2 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80187da:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 80187de:	60fb      	str	r3, [r7, #12]
 80187e0:	e001      	b.n	80187e6 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80187e2:	4b1e      	ldr	r3, [pc, #120]	; (801885c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80187e4:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80187e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187e8:	4a1c      	ldr	r2, [pc, #112]	; (801885c <RegionCommonUpdateBandTimeOff+0x1d4>)
 80187ea:	4293      	cmp	r3, r2
 80187ec:	d90e      	bls.n	801880c <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80187ee:	68fa      	ldr	r2, [r7, #12]
 80187f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80187f2:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80187f6:	3b30      	subs	r3, #48	; 0x30
 80187f8:	4919      	ldr	r1, [pc, #100]	; (8018860 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80187fa:	fba1 1303 	umull	r1, r3, r1, r3
 80187fe:	0c1b      	lsrs	r3, r3, #16
 8018800:	3301      	adds	r3, #1
 8018802:	4918      	ldr	r1, [pc, #96]	; (8018864 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018804:	fb01 f303 	mul.w	r3, r1, r3
 8018808:	4413      	add	r3, r2
 801880a:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801880c:	f107 000c 	add.w	r0, r7, #12
 8018810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018812:	9300      	str	r3, [sp, #0]
 8018814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018816:	f107 020c 	add.w	r2, r7, #12
 801881a:	ca06      	ldmia	r2, {r1, r2}
 801881c:	f006 fb61 	bl	801eee2 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8018820:	f107 030c 	add.w	r3, r7, #12
 8018824:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018828:	f006 fc1a 	bl	801f060 <SysTimeToMs>
 801882c:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801882e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018832:	3301      	adds	r3, #1
 8018834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018838:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801883c:	79bb      	ldrb	r3, [r7, #6]
 801883e:	429a      	cmp	r2, r3
 8018840:	f4ff af3f 	bcc.w	80186c2 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8018844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018848:	2b00      	cmp	r3, #0
 801884a:	d102      	bne.n	8018852 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 801884c:	f04f 33ff 	mov.w	r3, #4294967295
 8018850:	e000      	b.n	8018854 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8018852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018854:	4618      	mov	r0, r3
 8018856:	372c      	adds	r7, #44	; 0x2c
 8018858:	46bd      	mov	sp, r7
 801885a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801885c:	0001ec30 	.word	0x0001ec30
 8018860:	c22e4507 	.word	0xc22e4507
 8018864:	00015180 	.word	0x00015180

08018868 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018868:	b480      	push	{r7}
 801886a:	b085      	sub	sp, #20
 801886c:	af00      	add	r7, sp, #0
 801886e:	6078      	str	r0, [r7, #4]
 8018870:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8018872:	2300      	movs	r3, #0
 8018874:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	781b      	ldrb	r3, [r3, #0]
 801887a:	2b03      	cmp	r3, #3
 801887c:	d13f      	bne.n	80188fe <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	3301      	adds	r3, #1
 8018882:	781b      	ldrb	r3, [r3, #0]
 8018884:	b25a      	sxtb	r2, r3
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801888a:	683b      	ldr	r3, [r7, #0]
 801888c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018890:	f003 030f 	and.w	r3, r3, #15
 8018894:	b25a      	sxtb	r2, r3
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80188a0:	b2db      	uxtb	r3, r3
 80188a2:	091b      	lsrs	r3, r3, #4
 80188a4:	b2db      	uxtb	r3, r3
 80188a6:	b25a      	sxtb	r2, r3
 80188a8:	683b      	ldr	r3, [r7, #0]
 80188aa:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	3302      	adds	r3, #2
 80188b0:	781b      	ldrb	r3, [r3, #0]
 80188b2:	b29a      	uxth	r2, r3
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	889b      	ldrh	r3, [r3, #4]
 80188bc:	b21a      	sxth	r2, r3
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	3303      	adds	r3, #3
 80188c2:	781b      	ldrb	r3, [r3, #0]
 80188c4:	021b      	lsls	r3, r3, #8
 80188c6:	b21b      	sxth	r3, r3
 80188c8:	4313      	orrs	r3, r2
 80188ca:	b21b      	sxth	r3, r3
 80188cc:	b29a      	uxth	r2, r3
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	791a      	ldrb	r2, [r3, #4]
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	781b      	ldrb	r3, [r3, #0]
 80188de:	091b      	lsrs	r3, r3, #4
 80188e0:	b2db      	uxtb	r3, r3
 80188e2:	f003 0307 	and.w	r3, r3, #7
 80188e6:	b2da      	uxtb	r2, r3
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80188ec:	683b      	ldr	r3, [r7, #0]
 80188ee:	781b      	ldrb	r3, [r3, #0]
 80188f0:	f003 030f 	and.w	r3, r3, #15
 80188f4:	b2da      	uxtb	r2, r3
 80188f6:	683b      	ldr	r3, [r7, #0]
 80188f8:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80188fa:	2305      	movs	r3, #5
 80188fc:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80188fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8018900:	4618      	mov	r0, r3
 8018902:	3714      	adds	r7, #20
 8018904:	46bd      	mov	sp, r7
 8018906:	bc80      	pop	{r7}
 8018908:	4770      	bx	lr

0801890a <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801890a:	b5b0      	push	{r4, r5, r7, lr}
 801890c:	b088      	sub	sp, #32
 801890e:	af02      	add	r7, sp, #8
 8018910:	60f8      	str	r0, [r7, #12]
 8018912:	60b9      	str	r1, [r7, #8]
 8018914:	607a      	str	r2, [r7, #4]
 8018916:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	791b      	ldrb	r3, [r3, #4]
 801891c:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	799b      	ldrb	r3, [r3, #6]
 8018922:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	79db      	ldrb	r3, [r3, #7]
 8018928:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	7a1b      	ldrb	r3, [r3, #8]
 801892e:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8018930:	68fb      	ldr	r3, [r7, #12]
 8018932:	795b      	ldrb	r3, [r3, #5]
 8018934:	f083 0301 	eor.w	r3, r3, #1
 8018938:	b2db      	uxtb	r3, r3
 801893a:	2b00      	cmp	r3, #0
 801893c:	d008      	beq.n	8018950 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	7adb      	ldrb	r3, [r3, #11]
 8018942:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	7a5b      	ldrb	r3, [r3, #9]
 8018948:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	7a9b      	ldrb	r3, [r3, #10]
 801894e:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8018950:	7dfb      	ldrb	r3, [r7, #23]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d04a      	beq.n	80189ec <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8018956:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801895a:	2b0f      	cmp	r3, #15
 801895c:	d103      	bne.n	8018966 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801895e:	68fb      	ldr	r3, [r7, #12]
 8018960:	7a5b      	ldrb	r3, [r3, #9]
 8018962:	75bb      	strb	r3, [r7, #22]
 8018964:	e01d      	b.n	80189a2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	7b18      	ldrb	r0, [r3, #12]
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	6919      	ldr	r1, [r3, #16]
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801897a:	68fa      	ldr	r2, [r7, #12]
 801897c:	6992      	ldr	r2, [r2, #24]
 801897e:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8018982:	9201      	str	r2, [sp, #4]
 8018984:	9300      	str	r3, [sp, #0]
 8018986:	462b      	mov	r3, r5
 8018988:	4622      	mov	r2, r4
 801898a:	f7ff fd3a 	bl	8018402 <RegionCommonChanVerifyDr>
 801898e:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018990:	f083 0301 	eor.w	r3, r3, #1
 8018994:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018996:	2b00      	cmp	r3, #0
 8018998:	d003      	beq.n	80189a2 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801899a:	7dfb      	ldrb	r3, [r7, #23]
 801899c:	f023 0302 	bic.w	r3, r3, #2
 80189a0:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80189a2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80189a6:	2b0f      	cmp	r3, #15
 80189a8:	d103      	bne.n	80189b2 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	7a9b      	ldrb	r3, [r3, #10]
 80189ae:	757b      	strb	r3, [r7, #21]
 80189b0:	e01c      	b.n	80189ec <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80189b2:	68fb      	ldr	r3, [r7, #12]
 80189b4:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80189be:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80189c2:	4618      	mov	r0, r3
 80189c4:	f7ff fd8f 	bl	80184e6 <RegionCommonValueInRange>
 80189c8:	4603      	mov	r3, r0
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d10e      	bne.n	80189ec <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80189d4:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80189d8:	429a      	cmp	r2, r3
 80189da:	da03      	bge.n	80189e4 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	7f5b      	ldrb	r3, [r3, #29]
 80189e0:	757b      	strb	r3, [r7, #21]
 80189e2:	e003      	b.n	80189ec <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80189e4:	7dfb      	ldrb	r3, [r7, #23]
 80189e6:	f023 0304 	bic.w	r3, r3, #4
 80189ea:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80189ec:	7dfb      	ldrb	r3, [r7, #23]
 80189ee:	2b07      	cmp	r3, #7
 80189f0:	d105      	bne.n	80189fe <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80189f2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d101      	bne.n	80189fe <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80189fa:	2301      	movs	r3, #1
 80189fc:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80189fe:	68bb      	ldr	r3, [r7, #8]
 8018a00:	7dba      	ldrb	r2, [r7, #22]
 8018a02:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	7d7a      	ldrb	r2, [r7, #21]
 8018a08:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8018a0a:	7d3a      	ldrb	r2, [r7, #20]
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	701a      	strb	r2, [r3, #0]

    return status;
 8018a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a12:	4618      	mov	r0, r3
 8018a14:	3718      	adds	r7, #24
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018a1c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8018a1c:	b480      	push	{r7}
 8018a1e:	b083      	sub	sp, #12
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	4603      	mov	r3, r0
 8018a24:	6039      	str	r1, [r7, #0]
 8018a26:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8018a28:	79fb      	ldrb	r3, [r7, #7]
 8018a2a:	4a06      	ldr	r2, [pc, #24]	; (8018a44 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8018a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8018a30:	461a      	mov	r2, r3
 8018a32:	683b      	ldr	r3, [r7, #0]
 8018a34:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	370c      	adds	r7, #12
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bc80      	pop	{r7}
 8018a40:	4770      	bx	lr
 8018a42:	bf00      	nop
 8018a44:	000f4240 	.word	0x000f4240

08018a48 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8018a48:	b480      	push	{r7}
 8018a4a:	b083      	sub	sp, #12
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	4603      	mov	r3, r0
 8018a50:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8018a52:	79fb      	ldrb	r3, [r7, #7]
 8018a54:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018a58:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	370c      	adds	r7, #12
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bc80      	pop	{r7}
 8018a64:	4770      	bx	lr
	...

08018a68 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018a68:	b480      	push	{r7}
 8018a6a:	b085      	sub	sp, #20
 8018a6c:	af00      	add	r7, sp, #0
 8018a6e:	60f8      	str	r0, [r7, #12]
 8018a70:	607a      	str	r2, [r7, #4]
 8018a72:	603b      	str	r3, [r7, #0]
 8018a74:	460b      	mov	r3, r1
 8018a76:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018a78:	7afa      	ldrb	r2, [r7, #11]
 8018a7a:	7afb      	ldrb	r3, [r7, #11]
 8018a7c:	3b04      	subs	r3, #4
 8018a7e:	4619      	mov	r1, r3
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	fb03 f101 	mul.w	r1, r3, r1
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018a8c:	fb00 f303 	mul.w	r3, r0, r3
 8018a90:	440b      	add	r3, r1
 8018a92:	005b      	lsls	r3, r3, #1
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d013      	beq.n	8018ac0 <RegionCommonComputeRxWindowParameters+0x58>
 8018a98:	7afb      	ldrb	r3, [r7, #11]
 8018a9a:	3b04      	subs	r3, #4
 8018a9c:	4619      	mov	r1, r3
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	fb03 f101 	mul.w	r1, r3, r1
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018aaa:	fb00 f303 	mul.w	r3, r0, r3
 8018aae:	440b      	add	r3, r1
 8018ab0:	0059      	lsls	r1, r3, #1
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	440b      	add	r3, r1
 8018ab6:	1e59      	subs	r1, r3, #1
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	fbb1 f3f3 	udiv	r3, r1, r3
 8018abe:	e00f      	b.n	8018ae0 <RegionCommonComputeRxWindowParameters+0x78>
 8018ac0:	7afb      	ldrb	r3, [r7, #11]
 8018ac2:	3b04      	subs	r3, #4
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	fb03 f101 	mul.w	r1, r3, r1
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018ad2:	fb00 f303 	mul.w	r3, r0, r3
 8018ad6:	440b      	add	r3, r1
 8018ad8:	0059      	lsls	r1, r3, #1
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	fbb1 f3f3 	udiv	r3, r1, r3
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	bf38      	it	cc
 8018ae4:	461a      	movcc	r2, r3
 8018ae6:	69bb      	ldr	r3, [r7, #24]
 8018ae8:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8018aea:	68fb      	ldr	r3, [r7, #12]
 8018aec:	009b      	lsls	r3, r3, #2
 8018aee:	4619      	mov	r1, r3
 8018af0:	69bb      	ldr	r3, [r7, #24]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	68fa      	ldr	r2, [r7, #12]
 8018af6:	fb02 f303 	mul.w	r3, r2, r3
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d007      	beq.n	8018b0e <RegionCommonComputeRxWindowParameters+0xa6>
 8018afe:	69bb      	ldr	r3, [r7, #24]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	68fa      	ldr	r2, [r7, #12]
 8018b04:	fb02 f303 	mul.w	r3, r2, r3
 8018b08:	3301      	adds	r3, #1
 8018b0a:	085b      	lsrs	r3, r3, #1
 8018b0c:	e005      	b.n	8018b1a <RegionCommonComputeRxWindowParameters+0xb2>
 8018b0e:	69bb      	ldr	r3, [r7, #24]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	68fa      	ldr	r2, [r7, #12]
 8018b14:	fb02 f303 	mul.w	r3, r2, r3
 8018b18:	085b      	lsrs	r3, r3, #1
 8018b1a:	1acb      	subs	r3, r1, r3
 8018b1c:	683a      	ldr	r2, [r7, #0]
 8018b1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018b22:	fb01 f202 	mul.w	r2, r1, r2
 8018b26:	1a9b      	subs	r3, r3, r2
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	dd27      	ble.n	8018b7c <RegionCommonComputeRxWindowParameters+0x114>
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	009b      	lsls	r3, r3, #2
 8018b30:	4619      	mov	r1, r3
 8018b32:	69bb      	ldr	r3, [r7, #24]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	68fa      	ldr	r2, [r7, #12]
 8018b38:	fb02 f303 	mul.w	r3, r2, r3
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d007      	beq.n	8018b50 <RegionCommonComputeRxWindowParameters+0xe8>
 8018b40:	69bb      	ldr	r3, [r7, #24]
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	68fa      	ldr	r2, [r7, #12]
 8018b46:	fb02 f303 	mul.w	r3, r2, r3
 8018b4a:	3301      	adds	r3, #1
 8018b4c:	085b      	lsrs	r3, r3, #1
 8018b4e:	e005      	b.n	8018b5c <RegionCommonComputeRxWindowParameters+0xf4>
 8018b50:	69bb      	ldr	r3, [r7, #24]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	68fa      	ldr	r2, [r7, #12]
 8018b56:	fb02 f303 	mul.w	r3, r2, r3
 8018b5a:	085b      	lsrs	r3, r3, #1
 8018b5c:	1acb      	subs	r3, r1, r3
 8018b5e:	683a      	ldr	r2, [r7, #0]
 8018b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018b64:	fb01 f202 	mul.w	r2, r1, r2
 8018b68:	1a9b      	subs	r3, r3, r2
 8018b6a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8018b6e:	4a19      	ldr	r2, [pc, #100]	; (8018bd4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018b70:	fb82 1203 	smull	r1, r2, r2, r3
 8018b74:	1192      	asrs	r2, r2, #6
 8018b76:	17db      	asrs	r3, r3, #31
 8018b78:	1ad3      	subs	r3, r2, r3
 8018b7a:	e024      	b.n	8018bc6 <RegionCommonComputeRxWindowParameters+0x15e>
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	009b      	lsls	r3, r3, #2
 8018b80:	4619      	mov	r1, r3
 8018b82:	69bb      	ldr	r3, [r7, #24]
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	68fa      	ldr	r2, [r7, #12]
 8018b88:	fb02 f303 	mul.w	r3, r2, r3
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d007      	beq.n	8018ba0 <RegionCommonComputeRxWindowParameters+0x138>
 8018b90:	69bb      	ldr	r3, [r7, #24]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	68fa      	ldr	r2, [r7, #12]
 8018b96:	fb02 f303 	mul.w	r3, r2, r3
 8018b9a:	3301      	adds	r3, #1
 8018b9c:	085b      	lsrs	r3, r3, #1
 8018b9e:	e005      	b.n	8018bac <RegionCommonComputeRxWindowParameters+0x144>
 8018ba0:	69bb      	ldr	r3, [r7, #24]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	68fa      	ldr	r2, [r7, #12]
 8018ba6:	fb02 f303 	mul.w	r3, r2, r3
 8018baa:	085b      	lsrs	r3, r3, #1
 8018bac:	1acb      	subs	r3, r1, r3
 8018bae:	683a      	ldr	r2, [r7, #0]
 8018bb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018bb4:	fb01 f202 	mul.w	r2, r1, r2
 8018bb8:	1a9b      	subs	r3, r3, r2
 8018bba:	4a06      	ldr	r2, [pc, #24]	; (8018bd4 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8018bc0:	1192      	asrs	r2, r2, #6
 8018bc2:	17db      	asrs	r3, r3, #31
 8018bc4:	1ad3      	subs	r3, r2, r3
 8018bc6:	69fa      	ldr	r2, [r7, #28]
 8018bc8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8018bca:	bf00      	nop
 8018bcc:	3714      	adds	r7, #20
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bc80      	pop	{r7}
 8018bd2:	4770      	bx	lr
 8018bd4:	10624dd3 	.word	0x10624dd3

08018bd8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b086      	sub	sp, #24
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	4603      	mov	r3, r0
 8018be0:	60b9      	str	r1, [r7, #8]
 8018be2:	607a      	str	r2, [r7, #4]
 8018be4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018be6:	2300      	movs	r3, #0
 8018be8:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018bee:	005b      	lsls	r3, r3, #1
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	f7e8 f863 	bl	8000cbc <__aeabi_ui2f>
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	4619      	mov	r1, r3
 8018bfa:	68b8      	ldr	r0, [r7, #8]
 8018bfc:	f7e7 ffac 	bl	8000b58 <__aeabi_fsub>
 8018c00:	4603      	mov	r3, r0
 8018c02:	6879      	ldr	r1, [r7, #4]
 8018c04:	4618      	mov	r0, r3
 8018c06:	f7e7 ffa7 	bl	8000b58 <__aeabi_fsub>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	f7e7 fc1f 	bl	8000450 <__aeabi_f2d>
 8018c12:	4602      	mov	r2, r0
 8018c14:	460b      	mov	r3, r1
 8018c16:	4610      	mov	r0, r2
 8018c18:	4619      	mov	r1, r3
 8018c1a:	f007 fab1 	bl	8020180 <floor>
 8018c1e:	4602      	mov	r2, r0
 8018c20:	460b      	mov	r3, r1
 8018c22:	4610      	mov	r0, r2
 8018c24:	4619      	mov	r1, r3
 8018c26:	f7e7 ff1b 	bl	8000a60 <__aeabi_d2iz>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	3718      	adds	r7, #24
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd80      	pop	{r7, pc}

08018c3a <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8018c3a:	b590      	push	{r4, r7, lr}
 8018c3c:	b087      	sub	sp, #28
 8018c3e:	af00      	add	r7, sp, #0
 8018c40:	60f8      	str	r0, [r7, #12]
 8018c42:	60b9      	str	r1, [r7, #8]
 8018c44:	607a      	str	r2, [r7, #4]
 8018c46:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8018c48:	2300      	movs	r3, #0
 8018c4a:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018c50:	2300      	movs	r3, #0
 8018c52:	757b      	strb	r3, [r7, #21]
 8018c54:	2300      	movs	r3, #0
 8018c56:	753b      	strb	r3, [r7, #20]
 8018c58:	e09c      	b.n	8018d94 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	74fb      	strb	r3, [r7, #19]
 8018c5e:	e08f      	b.n	8018d80 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	685a      	ldr	r2, [r3, #4]
 8018c64:	7d3b      	ldrb	r3, [r7, #20]
 8018c66:	005b      	lsls	r3, r3, #1
 8018c68:	4413      	add	r3, r2
 8018c6a:	881b      	ldrh	r3, [r3, #0]
 8018c6c:	461a      	mov	r2, r3
 8018c6e:	7cfb      	ldrb	r3, [r7, #19]
 8018c70:	fa42 f303 	asr.w	r3, r2, r3
 8018c74:	f003 0301 	and.w	r3, r3, #1
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d07e      	beq.n	8018d7a <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	689a      	ldr	r2, [r3, #8]
 8018c80:	7d79      	ldrb	r1, [r7, #21]
 8018c82:	7cfb      	ldrb	r3, [r7, #19]
 8018c84:	440b      	add	r3, r1
 8018c86:	4619      	mov	r1, r3
 8018c88:	460b      	mov	r3, r1
 8018c8a:	005b      	lsls	r3, r3, #1
 8018c8c:	440b      	add	r3, r1
 8018c8e:	009b      	lsls	r3, r3, #2
 8018c90:	4413      	add	r3, r2
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d06b      	beq.n	8018d70 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	781b      	ldrb	r3, [r3, #0]
 8018c9c:	f083 0301 	eor.w	r3, r3, #1
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d011      	beq.n	8018cca <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d00d      	beq.n	8018cca <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	695a      	ldr	r2, [r3, #20]
 8018cb2:	7d3b      	ldrb	r3, [r7, #20]
 8018cb4:	005b      	lsls	r3, r3, #1
 8018cb6:	4413      	add	r3, r2
 8018cb8:	881b      	ldrh	r3, [r3, #0]
 8018cba:	461a      	mov	r2, r3
 8018cbc:	7cfb      	ldrb	r3, [r7, #19]
 8018cbe:	fa42 f303 	asr.w	r3, r2, r3
 8018cc2:	f003 0301 	and.w	r3, r3, #1
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d054      	beq.n	8018d74 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	785b      	ldrb	r3, [r3, #1]
 8018cce:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	689a      	ldr	r2, [r3, #8]
 8018cd4:	7d79      	ldrb	r1, [r7, #21]
 8018cd6:	7cfb      	ldrb	r3, [r7, #19]
 8018cd8:	440b      	add	r3, r1
 8018cda:	4619      	mov	r1, r3
 8018cdc:	460b      	mov	r3, r1
 8018cde:	005b      	lsls	r3, r3, #1
 8018ce0:	440b      	add	r3, r1
 8018ce2:	009b      	lsls	r3, r3, #2
 8018ce4:	4413      	add	r3, r2
 8018ce6:	7a1b      	ldrb	r3, [r3, #8]
 8018ce8:	f343 0303 	sbfx	r3, r3, #0, #4
 8018cec:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018cee:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	689a      	ldr	r2, [r3, #8]
 8018cf4:	7d79      	ldrb	r1, [r7, #21]
 8018cf6:	7cfb      	ldrb	r3, [r7, #19]
 8018cf8:	440b      	add	r3, r1
 8018cfa:	4619      	mov	r1, r3
 8018cfc:	460b      	mov	r3, r1
 8018cfe:	005b      	lsls	r3, r3, #1
 8018d00:	440b      	add	r3, r1
 8018d02:	009b      	lsls	r3, r3, #2
 8018d04:	4413      	add	r3, r2
 8018d06:	7a1b      	ldrb	r3, [r3, #8]
 8018d08:	f343 1303 	sbfx	r3, r3, #4, #4
 8018d0c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018d0e:	461a      	mov	r2, r3
 8018d10:	4621      	mov	r1, r4
 8018d12:	f7ff fbe8 	bl	80184e6 <RegionCommonValueInRange>
 8018d16:	4603      	mov	r3, r0
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d02d      	beq.n	8018d78 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	68da      	ldr	r2, [r3, #12]
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	6899      	ldr	r1, [r3, #8]
 8018d24:	7d78      	ldrb	r0, [r7, #21]
 8018d26:	7cfb      	ldrb	r3, [r7, #19]
 8018d28:	4403      	add	r3, r0
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	4603      	mov	r3, r0
 8018d2e:	005b      	lsls	r3, r3, #1
 8018d30:	4403      	add	r3, r0
 8018d32:	009b      	lsls	r3, r3, #2
 8018d34:	440b      	add	r3, r1
 8018d36:	7a5b      	ldrb	r3, [r3, #9]
 8018d38:	4619      	mov	r1, r3
 8018d3a:	460b      	mov	r3, r1
 8018d3c:	005b      	lsls	r3, r3, #1
 8018d3e:	440b      	add	r3, r1
 8018d40:	00db      	lsls	r3, r3, #3
 8018d42:	4413      	add	r3, r2
 8018d44:	7d1b      	ldrb	r3, [r3, #20]
 8018d46:	f083 0301 	eor.w	r3, r3, #1
 8018d4a:	b2db      	uxtb	r3, r3
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d003      	beq.n	8018d58 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8018d50:	7dbb      	ldrb	r3, [r7, #22]
 8018d52:	3301      	adds	r3, #1
 8018d54:	75bb      	strb	r3, [r7, #22]
                    continue;
 8018d56:	e010      	b.n	8018d7a <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018d58:	7dfb      	ldrb	r3, [r7, #23]
 8018d5a:	1c5a      	adds	r2, r3, #1
 8018d5c:	75fa      	strb	r2, [r7, #23]
 8018d5e:	461a      	mov	r2, r3
 8018d60:	68bb      	ldr	r3, [r7, #8]
 8018d62:	4413      	add	r3, r2
 8018d64:	7d79      	ldrb	r1, [r7, #21]
 8018d66:	7cfa      	ldrb	r2, [r7, #19]
 8018d68:	440a      	add	r2, r1
 8018d6a:	b2d2      	uxtb	r2, r2
 8018d6c:	701a      	strb	r2, [r3, #0]
 8018d6e:	e004      	b.n	8018d7a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018d70:	bf00      	nop
 8018d72:	e002      	b.n	8018d7a <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018d74:	bf00      	nop
 8018d76:	e000      	b.n	8018d7a <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018d78:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018d7a:	7cfb      	ldrb	r3, [r7, #19]
 8018d7c:	3301      	adds	r3, #1
 8018d7e:	74fb      	strb	r3, [r7, #19]
 8018d80:	7cfb      	ldrb	r3, [r7, #19]
 8018d82:	2b0f      	cmp	r3, #15
 8018d84:	f67f af6c 	bls.w	8018c60 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018d88:	7d7b      	ldrb	r3, [r7, #21]
 8018d8a:	3310      	adds	r3, #16
 8018d8c:	757b      	strb	r3, [r7, #21]
 8018d8e:	7d3b      	ldrb	r3, [r7, #20]
 8018d90:	3301      	adds	r3, #1
 8018d92:	753b      	strb	r3, [r7, #20]
 8018d94:	7d7b      	ldrb	r3, [r7, #21]
 8018d96:	b29a      	uxth	r2, r3
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	8a1b      	ldrh	r3, [r3, #16]
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	f4ff af5c 	bcc.w	8018c5a <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	7dfa      	ldrb	r2, [r7, #23]
 8018da6:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018da8:	683b      	ldr	r3, [r7, #0]
 8018daa:	7dba      	ldrb	r2, [r7, #22]
 8018dac:	701a      	strb	r2, [r3, #0]
}
 8018dae:	bf00      	nop
 8018db0:	371c      	adds	r7, #28
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd90      	pop	{r4, r7, pc}

08018db6 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8018db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018db8:	b08b      	sub	sp, #44	; 0x2c
 8018dba:	af04      	add	r7, sp, #16
 8018dbc:	60f8      	str	r0, [r7, #12]
 8018dbe:	60b9      	str	r1, [r7, #8]
 8018dc0:	607a      	str	r2, [r7, #4]
 8018dc2:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	685b      	ldr	r3, [r3, #4]
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f006 fe81 	bl	801fad0 <UTIL_TIMER_GetElapsedTime>
 8018dce:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	681a      	ldr	r2, [r3, #0]
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	1ad2      	subs	r2, r2, r3
 8018dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018dda:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dde:	2201      	movs	r2, #1
 8018de0:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018de2:	683b      	ldr	r3, [r7, #0]
 8018de4:	2200      	movs	r2, #0
 8018de6:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	685b      	ldr	r3, [r3, #4]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d004      	beq.n	8018dfa <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018df4:	697a      	ldr	r2, [r7, #20]
 8018df6:	429a      	cmp	r2, r3
 8018df8:	d32b      	bcc.n	8018e52 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	2200      	movs	r2, #0
 8018dfe:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018e00:	68fb      	ldr	r3, [r7, #12]
 8018e02:	69db      	ldr	r3, [r3, #28]
 8018e04:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018e0a:	68dd      	ldr	r5, [r3, #12]
 8018e0c:	68fb      	ldr	r3, [r7, #12]
 8018e0e:	7a5e      	ldrb	r6, [r3, #9]
 8018e10:	68fb      	ldr	r3, [r7, #12]
 8018e12:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	7d1b      	ldrb	r3, [r3, #20]
 8018e1a:	68fa      	ldr	r2, [r7, #12]
 8018e1c:	6992      	ldr	r2, [r2, #24]
 8018e1e:	9203      	str	r2, [sp, #12]
 8018e20:	68fa      	ldr	r2, [r7, #12]
 8018e22:	f10d 0e04 	add.w	lr, sp, #4
 8018e26:	320c      	adds	r2, #12
 8018e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018e2c:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018e30:	9300      	str	r3, [sp, #0]
 8018e32:	4663      	mov	r3, ip
 8018e34:	4632      	mov	r2, r6
 8018e36:	4629      	mov	r1, r5
 8018e38:	4620      	mov	r0, r4
 8018e3a:	f7ff fc25 	bl	8018688 <RegionCommonUpdateBandTimeOff>
 8018e3e:	4602      	mov	r2, r0
 8018e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e42:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	69d8      	ldr	r0, [r3, #28]
 8018e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e4a:	683a      	ldr	r2, [r7, #0]
 8018e4c:	6879      	ldr	r1, [r7, #4]
 8018e4e:	f7ff fef4 	bl	8018c3a <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018e52:	683b      	ldr	r3, [r7, #0]
 8018e54:	781b      	ldrb	r3, [r3, #0]
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d004      	beq.n	8018e64 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018e60:	2300      	movs	r3, #0
 8018e62:	e006      	b.n	8018e72 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e66:	781b      	ldrb	r3, [r3, #0]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d001      	beq.n	8018e70 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018e6c:	230b      	movs	r3, #11
 8018e6e:	e000      	b.n	8018e72 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018e70:	230c      	movs	r3, #12
    }
}
 8018e72:	4618      	mov	r0, r3
 8018e74:	371c      	adds	r7, #28
 8018e76:	46bd      	mov	sp, r7
 8018e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018e7a <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018e7a:	b5b0      	push	{r4, r5, r7, lr}
 8018e7c:	b086      	sub	sp, #24
 8018e7e:	af02      	add	r7, sp, #8
 8018e80:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	781b      	ldrb	r3, [r3, #0]
 8018e86:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	f993 2000 	ldrsb.w	r2, [r3]
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d103      	bne.n	8018ea0 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018e9e:	e026      	b.n	8018eee <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018ea0:	7bfb      	ldrb	r3, [r7, #15]
 8018ea2:	3b01      	subs	r3, #1
 8018ea4:	b2db      	uxtb	r3, r3
 8018ea6:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018eae:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d019      	beq.n	8018eea <RegionCommonGetNextLowerTxDr+0x70>
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	78d8      	ldrb	r0, [r3, #3]
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	6859      	ldr	r1, [r3, #4]
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018eca:	687a      	ldr	r2, [r7, #4]
 8018ecc:	6892      	ldr	r2, [r2, #8]
 8018ece:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018ed2:	9201      	str	r2, [sp, #4]
 8018ed4:	9300      	str	r3, [sp, #0]
 8018ed6:	462b      	mov	r3, r5
 8018ed8:	4622      	mov	r2, r4
 8018eda:	f7ff fa92 	bl	8018402 <RegionCommonChanVerifyDr>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	f083 0301 	eor.w	r3, r3, #1
 8018ee4:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d1da      	bne.n	8018ea0 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018eee:	4618      	mov	r0, r3
 8018ef0:	3710      	adds	r7, #16
 8018ef2:	46bd      	mov	sp, r7
 8018ef4:	bdb0      	pop	{r4, r5, r7, pc}

08018ef6 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018ef6:	b480      	push	{r7}
 8018ef8:	b083      	sub	sp, #12
 8018efa:	af00      	add	r7, sp, #0
 8018efc:	4603      	mov	r3, r0
 8018efe:	460a      	mov	r2, r1
 8018f00:	71fb      	strb	r3, [r7, #7]
 8018f02:	4613      	mov	r3, r2
 8018f04:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018f06:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f0e:	4293      	cmp	r3, r2
 8018f10:	bfb8      	it	lt
 8018f12:	4613      	movlt	r3, r2
 8018f14:	b25b      	sxtb	r3, r3
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	370c      	adds	r7, #12
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bc80      	pop	{r7}
 8018f1e:	4770      	bx	lr

08018f20 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018f20:	b480      	push	{r7}
 8018f22:	b083      	sub	sp, #12
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	6078      	str	r0, [r7, #4]
 8018f28:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	009b      	lsls	r3, r3, #2
 8018f2e:	683a      	ldr	r2, [r7, #0]
 8018f30:	4413      	add	r3, r2
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	4a07      	ldr	r2, [pc, #28]	; (8018f54 <RegionCommonGetBandwidth+0x34>)
 8018f36:	4293      	cmp	r3, r2
 8018f38:	d004      	beq.n	8018f44 <RegionCommonGetBandwidth+0x24>
 8018f3a:	4a07      	ldr	r2, [pc, #28]	; (8018f58 <RegionCommonGetBandwidth+0x38>)
 8018f3c:	4293      	cmp	r3, r2
 8018f3e:	d003      	beq.n	8018f48 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018f40:	2300      	movs	r3, #0
 8018f42:	e002      	b.n	8018f4a <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018f44:	2301      	movs	r3, #1
 8018f46:	e000      	b.n	8018f4a <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018f48:	2302      	movs	r3, #2
    }
}
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	370c      	adds	r7, #12
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bc80      	pop	{r7}
 8018f52:	4770      	bx	lr
 8018f54:	0003d090 	.word	0x0003d090
 8018f58:	0007a120 	.word	0x0007a120

08018f5c <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b086      	sub	sp, #24
 8018f60:	af04      	add	r7, sp, #16
 8018f62:	4603      	mov	r3, r0
 8018f64:	6039      	str	r1, [r7, #0]
 8018f66:	71fb      	strb	r3, [r7, #7]
 8018f68:	4613      	mov	r3, r2
 8018f6a:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018f6c:	79fb      	ldrb	r3, [r7, #7]
 8018f6e:	2b05      	cmp	r3, #5
 8018f70:	d810      	bhi.n	8018f94 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8018f72:	79fb      	ldrb	r3, [r7, #7]
 8018f74:	4a0f      	ldr	r2, [pc, #60]	; (8018fb4 <RegionCommonRxConfigPrint+0x58>)
 8018f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f7a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018f7e:	9202      	str	r2, [sp, #8]
 8018f80:	683a      	ldr	r2, [r7, #0]
 8018f82:	9201      	str	r2, [sp, #4]
 8018f84:	9300      	str	r3, [sp, #0]
 8018f86:	4b0c      	ldr	r3, [pc, #48]	; (8018fb8 <RegionCommonRxConfigPrint+0x5c>)
 8018f88:	2201      	movs	r2, #1
 8018f8a:	2100      	movs	r1, #0
 8018f8c:	2002      	movs	r0, #2
 8018f8e:	f006 fe7d 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018f92:	e00a      	b.n	8018faa <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018f94:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018f98:	9301      	str	r3, [sp, #4]
 8018f9a:	683b      	ldr	r3, [r7, #0]
 8018f9c:	9300      	str	r3, [sp, #0]
 8018f9e:	4b07      	ldr	r3, [pc, #28]	; (8018fbc <RegionCommonRxConfigPrint+0x60>)
 8018fa0:	2201      	movs	r2, #1
 8018fa2:	2100      	movs	r1, #0
 8018fa4:	2002      	movs	r0, #2
 8018fa6:	f006 fe71 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 8018faa:	bf00      	nop
 8018fac:	3708      	adds	r7, #8
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bd80      	pop	{r7, pc}
 8018fb2:	bf00      	nop
 8018fb4:	20000118 	.word	0x20000118
 8018fb8:	080218e8 	.word	0x080218e8
 8018fbc:	08021908 	.word	0x08021908

08018fc0 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b084      	sub	sp, #16
 8018fc4:	af02      	add	r7, sp, #8
 8018fc6:	6078      	str	r0, [r7, #4]
 8018fc8:	460b      	mov	r3, r1
 8018fca:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018fd0:	9301      	str	r3, [sp, #4]
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	9300      	str	r3, [sp, #0]
 8018fd6:	4b05      	ldr	r3, [pc, #20]	; (8018fec <RegionCommonTxConfigPrint+0x2c>)
 8018fd8:	2201      	movs	r2, #1
 8018fda:	2100      	movs	r1, #0
 8018fdc:	2002      	movs	r0, #2
 8018fde:	f006 fe55 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
}
 8018fe2:	bf00      	nop
 8018fe4:	3708      	adds	r7, #8
 8018fe6:	46bd      	mov	sp, r7
 8018fe8:	bd80      	pop	{r7, pc}
 8018fea:	bf00      	nop
 8018fec:	08021924 	.word	0x08021924

08018ff0 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b082      	sub	sp, #8
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
 8018ff8:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018ffa:	4b2d      	ldr	r3, [pc, #180]	; (80190b0 <VerifyRfFreq+0xc0>)
 8018ffc:	6a1b      	ldr	r3, [r3, #32]
 8018ffe:	6878      	ldr	r0, [r7, #4]
 8019000:	4798      	blx	r3
 8019002:	4603      	mov	r3, r0
 8019004:	f083 0301 	eor.w	r3, r3, #1
 8019008:	b2db      	uxtb	r3, r3
 801900a:	2b00      	cmp	r3, #0
 801900c:	d001      	beq.n	8019012 <VerifyRfFreq+0x22>
    {
        return false;
 801900e:	2300      	movs	r3, #0
 8019010:	e04a      	b.n	80190a8 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	4a27      	ldr	r2, [pc, #156]	; (80190b4 <VerifyRfFreq+0xc4>)
 8019016:	4293      	cmp	r3, r2
 8019018:	d307      	bcc.n	801902a <VerifyRfFreq+0x3a>
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	4a26      	ldr	r2, [pc, #152]	; (80190b8 <VerifyRfFreq+0xc8>)
 801901e:	4293      	cmp	r3, r2
 8019020:	d803      	bhi.n	801902a <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8019022:	683b      	ldr	r3, [r7, #0]
 8019024:	2202      	movs	r2, #2
 8019026:	701a      	strb	r2, [r3, #0]
 8019028:	e03d      	b.n	80190a6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	4a22      	ldr	r2, [pc, #136]	; (80190b8 <VerifyRfFreq+0xc8>)
 801902e:	4293      	cmp	r3, r2
 8019030:	d907      	bls.n	8019042 <VerifyRfFreq+0x52>
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	4a21      	ldr	r2, [pc, #132]	; (80190bc <VerifyRfFreq+0xcc>)
 8019036:	4293      	cmp	r3, r2
 8019038:	d803      	bhi.n	8019042 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	2200      	movs	r2, #0
 801903e:	701a      	strb	r2, [r3, #0]
 8019040:	e031      	b.n	80190a6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	4a1d      	ldr	r2, [pc, #116]	; (80190bc <VerifyRfFreq+0xcc>)
 8019046:	4293      	cmp	r3, r2
 8019048:	d907      	bls.n	801905a <VerifyRfFreq+0x6a>
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	4a1c      	ldr	r2, [pc, #112]	; (80190c0 <VerifyRfFreq+0xd0>)
 801904e:	4293      	cmp	r3, r2
 8019050:	d803      	bhi.n	801905a <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	2201      	movs	r2, #1
 8019056:	701a      	strb	r2, [r3, #0]
 8019058:	e025      	b.n	80190a6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	4a19      	ldr	r2, [pc, #100]	; (80190c4 <VerifyRfFreq+0xd4>)
 801905e:	4293      	cmp	r3, r2
 8019060:	d907      	bls.n	8019072 <VerifyRfFreq+0x82>
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	4a18      	ldr	r2, [pc, #96]	; (80190c8 <VerifyRfFreq+0xd8>)
 8019066:	4293      	cmp	r3, r2
 8019068:	d803      	bhi.n	8019072 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801906a:	683b      	ldr	r3, [r7, #0]
 801906c:	2205      	movs	r2, #5
 801906e:	701a      	strb	r2, [r3, #0]
 8019070:	e019      	b.n	80190a6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	4a15      	ldr	r2, [pc, #84]	; (80190cc <VerifyRfFreq+0xdc>)
 8019076:	4293      	cmp	r3, r2
 8019078:	d907      	bls.n	801908a <VerifyRfFreq+0x9a>
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	4a14      	ldr	r2, [pc, #80]	; (80190d0 <VerifyRfFreq+0xe0>)
 801907e:	4293      	cmp	r3, r2
 8019080:	d803      	bhi.n	801908a <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8019082:	683b      	ldr	r3, [r7, #0]
 8019084:	2203      	movs	r2, #3
 8019086:	701a      	strb	r2, [r3, #0]
 8019088:	e00d      	b.n	80190a6 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	4a11      	ldr	r2, [pc, #68]	; (80190d4 <VerifyRfFreq+0xe4>)
 801908e:	4293      	cmp	r3, r2
 8019090:	d307      	bcc.n	80190a2 <VerifyRfFreq+0xb2>
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	4a10      	ldr	r2, [pc, #64]	; (80190d8 <VerifyRfFreq+0xe8>)
 8019096:	4293      	cmp	r3, r2
 8019098:	d803      	bhi.n	80190a2 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 801909a:	683b      	ldr	r3, [r7, #0]
 801909c:	2204      	movs	r2, #4
 801909e:	701a      	strb	r2, [r3, #0]
 80190a0:	e001      	b.n	80190a6 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80190a2:	2300      	movs	r3, #0
 80190a4:	e000      	b.n	80190a8 <VerifyRfFreq+0xb8>
    }
    return true;
 80190a6:	2301      	movs	r3, #1
}
 80190a8:	4618      	mov	r0, r3
 80190aa:	3708      	adds	r7, #8
 80190ac:	46bd      	mov	sp, r7
 80190ae:	bd80      	pop	{r7, pc}
 80190b0:	08021fb4 	.word	0x08021fb4
 80190b4:	337055c0 	.word	0x337055c0
 80190b8:	338eda3f 	.word	0x338eda3f
 80190bc:	33bca100 	.word	0x33bca100
 80190c0:	33c5c8c0 	.word	0x33c5c8c0
 80190c4:	33c74f5f 	.word	0x33c74f5f
 80190c8:	33cef080 	.word	0x33cef080
 80190cc:	33d1fdbf 	.word	0x33d1fdbf
 80190d0:	33d5ce50 	.word	0x33d5ce50
 80190d4:	33d691a0 	.word	0x33d691a0
 80190d8:	33db2580 	.word	0x33db2580

080190dc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80190dc:	b590      	push	{r4, r7, lr}
 80190de:	b08b      	sub	sp, #44	; 0x2c
 80190e0:	af04      	add	r7, sp, #16
 80190e2:	4603      	mov	r3, r0
 80190e4:	460a      	mov	r2, r1
 80190e6:	71fb      	strb	r3, [r7, #7]
 80190e8:	4613      	mov	r3, r2
 80190ea:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 80190ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190f0:	4a1f      	ldr	r2, [pc, #124]	; (8019170 <GetTimeOnAir+0x94>)
 80190f2:	5cd3      	ldrb	r3, [r2, r3]
 80190f4:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80190f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190fa:	491e      	ldr	r1, [pc, #120]	; (8019174 <GetTimeOnAir+0x98>)
 80190fc:	4618      	mov	r0, r3
 80190fe:	f7ff ff0f 	bl	8018f20 <RegionCommonGetBandwidth>
 8019102:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8019104:	2300      	movs	r3, #0
 8019106:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8019108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801910c:	2b07      	cmp	r3, #7
 801910e:	d118      	bne.n	8019142 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8019110:	4b19      	ldr	r3, [pc, #100]	; (8019178 <GetTimeOnAir+0x9c>)
 8019112:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019114:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801911c:	fb02 f303 	mul.w	r3, r2, r3
 8019120:	4619      	mov	r1, r3
 8019122:	88bb      	ldrh	r3, [r7, #4]
 8019124:	b2db      	uxtb	r3, r3
 8019126:	2201      	movs	r2, #1
 8019128:	9203      	str	r2, [sp, #12]
 801912a:	9302      	str	r3, [sp, #8]
 801912c:	2300      	movs	r3, #0
 801912e:	9301      	str	r3, [sp, #4]
 8019130:	2305      	movs	r3, #5
 8019132:	9300      	str	r3, [sp, #0]
 8019134:	2300      	movs	r3, #0
 8019136:	460a      	mov	r2, r1
 8019138:	68f9      	ldr	r1, [r7, #12]
 801913a:	2000      	movs	r0, #0
 801913c:	47a0      	blx	r4
 801913e:	6178      	str	r0, [r7, #20]
 8019140:	e011      	b.n	8019166 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8019142:	4b0d      	ldr	r3, [pc, #52]	; (8019178 <GetTimeOnAir+0x9c>)
 8019144:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019146:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801914a:	88bb      	ldrh	r3, [r7, #4]
 801914c:	b2db      	uxtb	r3, r3
 801914e:	2101      	movs	r1, #1
 8019150:	9103      	str	r1, [sp, #12]
 8019152:	9302      	str	r3, [sp, #8]
 8019154:	2300      	movs	r3, #0
 8019156:	9301      	str	r3, [sp, #4]
 8019158:	2308      	movs	r3, #8
 801915a:	9300      	str	r3, [sp, #0]
 801915c:	2301      	movs	r3, #1
 801915e:	68f9      	ldr	r1, [r7, #12]
 8019160:	2001      	movs	r0, #1
 8019162:	47a0      	blx	r4
 8019164:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8019166:	697b      	ldr	r3, [r7, #20]
}
 8019168:	4618      	mov	r0, r3
 801916a:	371c      	adds	r7, #28
 801916c:	46bd      	mov	sp, r7
 801916e:	bd90      	pop	{r4, r7, pc}
 8019170:	08021ef8 	.word	0x08021ef8
 8019174:	08021f00 	.word	0x08021f00
 8019178:	08021fb4 	.word	0x08021fb4

0801917c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 801917c:	b580      	push	{r7, lr}
 801917e:	b088      	sub	sp, #32
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8019184:	2300      	movs	r3, #0
 8019186:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	781b      	ldrb	r3, [r3, #0]
 801918c:	3b01      	subs	r3, #1
 801918e:	2b37      	cmp	r3, #55	; 0x37
 8019190:	f200 8122 	bhi.w	80193d8 <RegionEU868GetPhyParam+0x25c>
 8019194:	a201      	add	r2, pc, #4	; (adr r2, 801919c <RegionEU868GetPhyParam+0x20>)
 8019196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801919a:	bf00      	nop
 801919c:	0801927d 	.word	0x0801927d
 80191a0:	08019283 	.word	0x08019283
 80191a4:	080193d9 	.word	0x080193d9
 80191a8:	080193d9 	.word	0x080193d9
 80191ac:	080193d9 	.word	0x080193d9
 80191b0:	08019289 	.word	0x08019289
 80191b4:	080193d9 	.word	0x080193d9
 80191b8:	080192c3 	.word	0x080192c3
 80191bc:	080193d9 	.word	0x080193d9
 80191c0:	080192c9 	.word	0x080192c9
 80191c4:	080192cf 	.word	0x080192cf
 80191c8:	080192d5 	.word	0x080192d5
 80191cc:	080192db 	.word	0x080192db
 80191d0:	080192eb 	.word	0x080192eb
 80191d4:	080192fb 	.word	0x080192fb
 80191d8:	08019301 	.word	0x08019301
 80191dc:	08019309 	.word	0x08019309
 80191e0:	08019311 	.word	0x08019311
 80191e4:	08019319 	.word	0x08019319
 80191e8:	08019321 	.word	0x08019321
 80191ec:	08019329 	.word	0x08019329
 80191f0:	0801933d 	.word	0x0801933d
 80191f4:	08019343 	.word	0x08019343
 80191f8:	08019349 	.word	0x08019349
 80191fc:	0801934f 	.word	0x0801934f
 8019200:	0801935b 	.word	0x0801935b
 8019204:	08019367 	.word	0x08019367
 8019208:	0801936d 	.word	0x0801936d
 801920c:	08019375 	.word	0x08019375
 8019210:	0801937b 	.word	0x0801937b
 8019214:	08019381 	.word	0x08019381
 8019218:	08019389 	.word	0x08019389
 801921c:	0801928f 	.word	0x0801928f
 8019220:	080193d9 	.word	0x080193d9
 8019224:	080193d9 	.word	0x080193d9
 8019228:	080193d9 	.word	0x080193d9
 801922c:	080193d9 	.word	0x080193d9
 8019230:	080193d9 	.word	0x080193d9
 8019234:	080193d9 	.word	0x080193d9
 8019238:	080193d9 	.word	0x080193d9
 801923c:	080193d9 	.word	0x080193d9
 8019240:	080193d9 	.word	0x080193d9
 8019244:	080193d9 	.word	0x080193d9
 8019248:	080193d9 	.word	0x080193d9
 801924c:	080193d9 	.word	0x080193d9
 8019250:	080193d9 	.word	0x080193d9
 8019254:	0801938f 	.word	0x0801938f
 8019258:	08019395 	.word	0x08019395
 801925c:	080193a3 	.word	0x080193a3
 8019260:	080193d9 	.word	0x080193d9
 8019264:	080193d9 	.word	0x080193d9
 8019268:	080193a9 	.word	0x080193a9
 801926c:	080193af 	.word	0x080193af
 8019270:	080193d9 	.word	0x080193d9
 8019274:	080193b5 	.word	0x080193b5
 8019278:	080193c5 	.word	0x080193c5
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801927c:	2300      	movs	r3, #0
 801927e:	61bb      	str	r3, [r7, #24]
            break;
 8019280:	e0ab      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8019282:	2300      	movs	r3, #0
 8019284:	61bb      	str	r3, [r7, #24]
            break;
 8019286:	e0a8      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8019288:	2300      	movs	r3, #0
 801928a:	61bb      	str	r3, [r7, #24]
            break;
 801928c:	e0a5      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8019294:	733b      	strb	r3, [r7, #12]
 8019296:	2307      	movs	r3, #7
 8019298:	737b      	strb	r3, [r7, #13]
 801929a:	2300      	movs	r3, #0
 801929c:	73bb      	strb	r3, [r7, #14]
 801929e:	2310      	movs	r3, #16
 80192a0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80192a2:	4b51      	ldr	r3, [pc, #324]	; (80193e8 <RegionEU868GetPhyParam+0x26c>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80192aa:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80192ac:	4b4e      	ldr	r3, [pc, #312]	; (80193e8 <RegionEU868GetPhyParam+0x26c>)
 80192ae:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80192b0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80192b2:	f107 030c 	add.w	r3, r7, #12
 80192b6:	4618      	mov	r0, r3
 80192b8:	f7ff fddf 	bl	8018e7a <RegionCommonGetNextLowerTxDr>
 80192bc:	4603      	mov	r3, r0
 80192be:	61bb      	str	r3, [r7, #24]
            break;
 80192c0:	e08b      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80192c2:	2300      	movs	r3, #0
 80192c4:	61bb      	str	r3, [r7, #24]
            break;
 80192c6:	e088      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80192c8:	2300      	movs	r3, #0
 80192ca:	61bb      	str	r3, [r7, #24]
            break;
 80192cc:	e085      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80192ce:	2340      	movs	r3, #64	; 0x40
 80192d0:	61bb      	str	r3, [r7, #24]
            break;
 80192d2:	e082      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80192d4:	2320      	movs	r3, #32
 80192d6:	61bb      	str	r3, [r7, #24]
            break;
 80192d8:	e07f      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192e0:	461a      	mov	r2, r3
 80192e2:	4b42      	ldr	r3, [pc, #264]	; (80193ec <RegionEU868GetPhyParam+0x270>)
 80192e4:	5c9b      	ldrb	r3, [r3, r2]
 80192e6:	61bb      	str	r3, [r7, #24]
            break;
 80192e8:	e077      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80192f0:	461a      	mov	r2, r3
 80192f2:	4b3f      	ldr	r3, [pc, #252]	; (80193f0 <RegionEU868GetPhyParam+0x274>)
 80192f4:	5c9b      	ldrb	r3, [r3, r2]
 80192f6:	61bb      	str	r3, [r7, #24]
            break;
 80192f8:	e06f      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80192fa:	2301      	movs	r3, #1
 80192fc:	61bb      	str	r3, [r7, #24]
            break;
 80192fe:	e06c      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8019300:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8019304:	61bb      	str	r3, [r7, #24]
            break;
 8019306:	e068      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8019308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801930c:	61bb      	str	r3, [r7, #24]
            break;
 801930e:	e064      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8019310:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8019314:	61bb      	str	r3, [r7, #24]
            break;
 8019316:	e060      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8019318:	f241 3388 	movw	r3, #5000	; 0x1388
 801931c:	61bb      	str	r3, [r7, #24]
            break;
 801931e:	e05c      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8019320:	f241 7370 	movw	r3, #6000	; 0x1770
 8019324:	61bb      	str	r3, [r7, #24]
            break;
 8019326:	e058      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8019328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801932c:	4831      	ldr	r0, [pc, #196]	; (80193f4 <RegionEU868GetPhyParam+0x278>)
 801932e:	f002 fa2d 	bl	801b78c <randr>
 8019332:	4603      	mov	r3, r0
 8019334:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8019338:	61bb      	str	r3, [r7, #24]
            break;
 801933a:	e04e      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801933c:	2300      	movs	r3, #0
 801933e:	61bb      	str	r3, [r7, #24]
            break;
 8019340:	e04b      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8019342:	4b2d      	ldr	r3, [pc, #180]	; (80193f8 <RegionEU868GetPhyParam+0x27c>)
 8019344:	61bb      	str	r3, [r7, #24]
            break;
 8019346:	e048      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8019348:	2300      	movs	r3, #0
 801934a:	61bb      	str	r3, [r7, #24]
            break;
 801934c:	e045      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801934e:	4b26      	ldr	r3, [pc, #152]	; (80193e8 <RegionEU868GetPhyParam+0x26c>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019356:	61bb      	str	r3, [r7, #24]
            break;
 8019358:	e03f      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801935a:	4b23      	ldr	r3, [pc, #140]	; (80193e8 <RegionEU868GetPhyParam+0x26c>)
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019362:	61bb      	str	r3, [r7, #24]
            break;
 8019364:	e039      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8019366:	2310      	movs	r3, #16
 8019368:	61bb      	str	r3, [r7, #24]
            break;
 801936a:	e036      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801936c:	4b1e      	ldr	r3, [pc, #120]	; (80193e8 <RegionEU868GetPhyParam+0x26c>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	61bb      	str	r3, [r7, #24]
            break;
 8019372:	e032      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8019374:	2300      	movs	r3, #0
 8019376:	61bb      	str	r3, [r7, #24]
            break;
 8019378:	e02f      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801937a:	2300      	movs	r3, #0
 801937c:	61bb      	str	r3, [r7, #24]
            break;
 801937e:	e02c      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8019380:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8019384:	61bb      	str	r3, [r7, #24]
            break;
 8019386:	e028      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8019388:	4b1c      	ldr	r3, [pc, #112]	; (80193fc <RegionEU868GetPhyParam+0x280>)
 801938a:	61bb      	str	r3, [r7, #24]
            break;
 801938c:	e025      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801938e:	4b1a      	ldr	r3, [pc, #104]	; (80193f8 <RegionEU868GetPhyParam+0x27c>)
 8019390:	61bb      	str	r3, [r7, #24]
            break;
 8019392:	e022      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8019394:	2311      	movs	r3, #17
 8019396:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8019398:	2301      	movs	r3, #1
 801939a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 801939c:	2300      	movs	r3, #0
 801939e:	76bb      	strb	r3, [r7, #26]
            break;
 80193a0:	e01b      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80193a2:	2303      	movs	r3, #3
 80193a4:	61bb      	str	r3, [r7, #24]
            break;
 80193a6:	e018      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80193a8:	4b13      	ldr	r3, [pc, #76]	; (80193f8 <RegionEU868GetPhyParam+0x27c>)
 80193aa:	61bb      	str	r3, [r7, #24]
            break;
 80193ac:	e015      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80193ae:	2303      	movs	r3, #3
 80193b0:	61bb      	str	r3, [r7, #24]
            break;
 80193b2:	e012      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193ba:	461a      	mov	r2, r3
 80193bc:	4b10      	ldr	r3, [pc, #64]	; (8019400 <RegionEU868GetPhyParam+0x284>)
 80193be:	5c9b      	ldrb	r3, [r3, r2]
 80193c0:	61bb      	str	r3, [r7, #24]
            break;
 80193c2:	e00a      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193ca:	490e      	ldr	r1, [pc, #56]	; (8019404 <RegionEU868GetPhyParam+0x288>)
 80193cc:	4618      	mov	r0, r3
 80193ce:	f7ff fda7 	bl	8018f20 <RegionCommonGetBandwidth>
 80193d2:	4603      	mov	r3, r0
 80193d4:	61bb      	str	r3, [r7, #24]
            break;
 80193d6:	e000      	b.n	80193da <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 80193d8:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80193da:	69bb      	ldr	r3, [r7, #24]
 80193dc:	61fb      	str	r3, [r7, #28]
 80193de:	69fb      	ldr	r3, [r7, #28]
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	3720      	adds	r7, #32
 80193e4:	46bd      	mov	sp, r7
 80193e6:	bd80      	pop	{r7, pc}
 80193e8:	20001ac8 	.word	0x20001ac8
 80193ec:	08021f20 	.word	0x08021f20
 80193f0:	08021f28 	.word	0x08021f28
 80193f4:	fffffc18 	.word	0xfffffc18
 80193f8:	33d3e608 	.word	0x33d3e608
 80193fc:	4009999a 	.word	0x4009999a
 8019400:	08021ef8 	.word	0x08021ef8
 8019404:	08021f00 	.word	0x08021f00

08019408 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8019408:	b590      	push	{r4, r7, lr}
 801940a:	b085      	sub	sp, #20
 801940c:	af02      	add	r7, sp, #8
 801940e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8019410:	4b11      	ldr	r3, [pc, #68]	; (8019458 <RegionEU868SetBandTxDone+0x50>)
 8019412:	681a      	ldr	r2, [r3, #0]
 8019414:	4b11      	ldr	r3, [pc, #68]	; (801945c <RegionEU868SetBandTxDone+0x54>)
 8019416:	6819      	ldr	r1, [r3, #0]
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	781b      	ldrb	r3, [r3, #0]
 801941c:	4618      	mov	r0, r3
 801941e:	4603      	mov	r3, r0
 8019420:	005b      	lsls	r3, r3, #1
 8019422:	4403      	add	r3, r0
 8019424:	009b      	lsls	r3, r3, #2
 8019426:	440b      	add	r3, r1
 8019428:	3309      	adds	r3, #9
 801942a:	781b      	ldrb	r3, [r3, #0]
 801942c:	4619      	mov	r1, r3
 801942e:	460b      	mov	r3, r1
 8019430:	005b      	lsls	r3, r3, #1
 8019432:	440b      	add	r3, r1
 8019434:	00db      	lsls	r3, r3, #3
 8019436:	18d0      	adds	r0, r2, r3
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	6899      	ldr	r1, [r3, #8]
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	785c      	ldrb	r4, [r3, #1]
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	691a      	ldr	r2, [r3, #16]
 8019444:	9200      	str	r2, [sp, #0]
 8019446:	68db      	ldr	r3, [r3, #12]
 8019448:	4622      	mov	r2, r4
 801944a:	f7ff f8ef 	bl	801862c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 801944e:	bf00      	nop
 8019450:	370c      	adds	r7, #12
 8019452:	46bd      	mov	sp, r7
 8019454:	bd90      	pop	{r4, r7, pc}
 8019456:	bf00      	nop
 8019458:	20001acc 	.word	0x20001acc
 801945c:	20001ac8 	.word	0x20001ac8

08019460 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b0b0      	sub	sp, #192	; 0xc0
 8019464:	af00      	add	r7, sp, #0
 8019466:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8019468:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801946c:	2290      	movs	r2, #144	; 0x90
 801946e:	2100      	movs	r1, #0
 8019470:	4618      	mov	r0, r3
 8019472:	f007 fe1f 	bl	80210b4 <memset>
 8019476:	2364      	movs	r3, #100	; 0x64
 8019478:	863b      	strh	r3, [r7, #48]	; 0x30
 801947a:	2364      	movs	r3, #100	; 0x64
 801947c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019484:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8019488:	230a      	movs	r3, #10
 801948a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801948e:	2364      	movs	r3, #100	; 0x64
 8019490:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8019494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019498:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	7b1b      	ldrb	r3, [r3, #12]
 80194a0:	2b02      	cmp	r3, #2
 80194a2:	d05d      	beq.n	8019560 <RegionEU868InitDefaults+0x100>
 80194a4:	2b02      	cmp	r3, #2
 80194a6:	dc6a      	bgt.n	801957e <RegionEU868InitDefaults+0x11e>
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d002      	beq.n	80194b2 <RegionEU868InitDefaults+0x52>
 80194ac:	2b01      	cmp	r3, #1
 80194ae:	d03e      	beq.n	801952e <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80194b0:	e065      	b.n	801957e <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d062      	beq.n	8019580 <RegionEU868InitDefaults+0x120>
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	685b      	ldr	r3, [r3, #4]
 80194be:	2b00      	cmp	r3, #0
 80194c0:	d05e      	beq.n	8019580 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	685b      	ldr	r3, [r3, #4]
 80194c6:	4a30      	ldr	r2, [pc, #192]	; (8019588 <RegionEU868InitDefaults+0x128>)
 80194c8:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	689b      	ldr	r3, [r3, #8]
 80194ce:	4a2f      	ldr	r2, [pc, #188]	; (801958c <RegionEU868InitDefaults+0x12c>)
 80194d0:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80194d2:	4b2e      	ldr	r3, [pc, #184]	; (801958c <RegionEU868InitDefaults+0x12c>)
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80194da:	2290      	movs	r2, #144	; 0x90
 80194dc:	4618      	mov	r0, r3
 80194de:	f002 f96c 	bl	801b7ba <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80194e2:	4b29      	ldr	r3, [pc, #164]	; (8019588 <RegionEU868InitDefaults+0x128>)
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	4a2a      	ldr	r2, [pc, #168]	; (8019590 <RegionEU868InitDefaults+0x130>)
 80194e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80194ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80194ee:	4b26      	ldr	r3, [pc, #152]	; (8019588 <RegionEU868InitDefaults+0x128>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	4a28      	ldr	r2, [pc, #160]	; (8019594 <RegionEU868InitDefaults+0x134>)
 80194f4:	330c      	adds	r3, #12
 80194f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80194f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80194fc:	4b22      	ldr	r3, [pc, #136]	; (8019588 <RegionEU868InitDefaults+0x128>)
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	4a25      	ldr	r2, [pc, #148]	; (8019598 <RegionEU868InitDefaults+0x138>)
 8019502:	3318      	adds	r3, #24
 8019504:	ca07      	ldmia	r2, {r0, r1, r2}
 8019506:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801950a:	4b1f      	ldr	r3, [pc, #124]	; (8019588 <RegionEU868InitDefaults+0x128>)
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	2207      	movs	r2, #7
 8019510:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019514:	4b1c      	ldr	r3, [pc, #112]	; (8019588 <RegionEU868InitDefaults+0x128>)
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801951c:	4b1a      	ldr	r3, [pc, #104]	; (8019588 <RegionEU868InitDefaults+0x128>)
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019524:	2201      	movs	r2, #1
 8019526:	4619      	mov	r1, r3
 8019528:	f7ff f85a 	bl	80185e0 <RegionCommonChanMaskCopy>
 801952c:	e028      	b.n	8019580 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 801952e:	4b16      	ldr	r3, [pc, #88]	; (8019588 <RegionEU868InitDefaults+0x128>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	2200      	movs	r2, #0
 8019534:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8019536:	4b14      	ldr	r3, [pc, #80]	; (8019588 <RegionEU868InitDefaults+0x128>)
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	2200      	movs	r2, #0
 801953c:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 801953e:	4b12      	ldr	r3, [pc, #72]	; (8019588 <RegionEU868InitDefaults+0x128>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	2200      	movs	r2, #0
 8019544:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8019546:	4b10      	ldr	r3, [pc, #64]	; (8019588 <RegionEU868InitDefaults+0x128>)
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801954e:	4b0e      	ldr	r3, [pc, #56]	; (8019588 <RegionEU868InitDefaults+0x128>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019556:	2201      	movs	r2, #1
 8019558:	4619      	mov	r1, r3
 801955a:	f7ff f841 	bl	80185e0 <RegionCommonChanMaskCopy>
            break;
 801955e:	e00f      	b.n	8019580 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8019560:	4b09      	ldr	r3, [pc, #36]	; (8019588 <RegionEU868InitDefaults+0x128>)
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8019568:	4b07      	ldr	r3, [pc, #28]	; (8019588 <RegionEU868InitDefaults+0x128>)
 801956a:	681b      	ldr	r3, [r3, #0]
 801956c:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8019570:	4b05      	ldr	r3, [pc, #20]	; (8019588 <RegionEU868InitDefaults+0x128>)
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	430a      	orrs	r2, r1
 8019576:	b292      	uxth	r2, r2
 8019578:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 801957c:	e000      	b.n	8019580 <RegionEU868InitDefaults+0x120>
            break;
 801957e:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019580:	37c0      	adds	r7, #192	; 0xc0
 8019582:	46bd      	mov	sp, r7
 8019584:	bd80      	pop	{r7, pc}
 8019586:	bf00      	nop
 8019588:	20001ac8 	.word	0x20001ac8
 801958c:	20001acc 	.word	0x20001acc
 8019590:	08021940 	.word	0x08021940
 8019594:	0802194c 	.word	0x0802194c
 8019598:	08021958 	.word	0x08021958

0801959c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b084      	sub	sp, #16
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	460b      	mov	r3, r1
 80195a6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80195a8:	78fb      	ldrb	r3, [r7, #3]
 80195aa:	2b0f      	cmp	r3, #15
 80195ac:	d86c      	bhi.n	8019688 <RegionEU868Verify+0xec>
 80195ae:	a201      	add	r2, pc, #4	; (adr r2, 80195b4 <RegionEU868Verify+0x18>)
 80195b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195b4:	080195f5 	.word	0x080195f5
 80195b8:	08019689 	.word	0x08019689
 80195bc:	08019689 	.word	0x08019689
 80195c0:	08019689 	.word	0x08019689
 80195c4:	08019689 	.word	0x08019689
 80195c8:	0801960d 	.word	0x0801960d
 80195cc:	0801962b 	.word	0x0801962b
 80195d0:	08019649 	.word	0x08019649
 80195d4:	08019689 	.word	0x08019689
 80195d8:	08019667 	.word	0x08019667
 80195dc:	08019667 	.word	0x08019667
 80195e0:	08019689 	.word	0x08019689
 80195e4:	08019689 	.word	0x08019689
 80195e8:	08019689 	.word	0x08019689
 80195ec:	08019689 	.word	0x08019689
 80195f0:	08019685 	.word	0x08019685
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80195f4:	2300      	movs	r3, #0
 80195f6:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	f107 020f 	add.w	r2, r7, #15
 8019600:	4611      	mov	r1, r2
 8019602:	4618      	mov	r0, r3
 8019604:	f7ff fcf4 	bl	8018ff0 <VerifyRfFreq>
 8019608:	4603      	mov	r3, r0
 801960a:	e03e      	b.n	801968a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	f993 3000 	ldrsb.w	r3, [r3]
 8019612:	2207      	movs	r2, #7
 8019614:	2100      	movs	r1, #0
 8019616:	4618      	mov	r0, r3
 8019618:	f7fe ff65 	bl	80184e6 <RegionCommonValueInRange>
 801961c:	4603      	mov	r3, r0
 801961e:	2b00      	cmp	r3, #0
 8019620:	bf14      	ite	ne
 8019622:	2301      	movne	r3, #1
 8019624:	2300      	moveq	r3, #0
 8019626:	b2db      	uxtb	r3, r3
 8019628:	e02f      	b.n	801968a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801962a:	687b      	ldr	r3, [r7, #4]
 801962c:	f993 3000 	ldrsb.w	r3, [r3]
 8019630:	2205      	movs	r2, #5
 8019632:	2100      	movs	r1, #0
 8019634:	4618      	mov	r0, r3
 8019636:	f7fe ff56 	bl	80184e6 <RegionCommonValueInRange>
 801963a:	4603      	mov	r3, r0
 801963c:	2b00      	cmp	r3, #0
 801963e:	bf14      	ite	ne
 8019640:	2301      	movne	r3, #1
 8019642:	2300      	moveq	r3, #0
 8019644:	b2db      	uxtb	r3, r3
 8019646:	e020      	b.n	801968a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f993 3000 	ldrsb.w	r3, [r3]
 801964e:	2207      	movs	r2, #7
 8019650:	2100      	movs	r1, #0
 8019652:	4618      	mov	r0, r3
 8019654:	f7fe ff47 	bl	80184e6 <RegionCommonValueInRange>
 8019658:	4603      	mov	r3, r0
 801965a:	2b00      	cmp	r3, #0
 801965c:	bf14      	ite	ne
 801965e:	2301      	movne	r3, #1
 8019660:	2300      	moveq	r3, #0
 8019662:	b2db      	uxtb	r3, r3
 8019664:	e011      	b.n	801968a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	f993 3000 	ldrsb.w	r3, [r3]
 801966c:	2207      	movs	r2, #7
 801966e:	2100      	movs	r1, #0
 8019670:	4618      	mov	r0, r3
 8019672:	f7fe ff38 	bl	80184e6 <RegionCommonValueInRange>
 8019676:	4603      	mov	r3, r0
 8019678:	2b00      	cmp	r3, #0
 801967a:	bf14      	ite	ne
 801967c:	2301      	movne	r3, #1
 801967e:	2300      	moveq	r3, #0
 8019680:	b2db      	uxtb	r3, r3
 8019682:	e002      	b.n	801968a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8019684:	2301      	movs	r3, #1
 8019686:	e000      	b.n	801968a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8019688:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801968a:	4618      	mov	r0, r3
 801968c:	3710      	adds	r7, #16
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}
 8019692:	bf00      	nop

08019694 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b08a      	sub	sp, #40	; 0x28
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801969c:	2350      	movs	r3, #80	; 0x50
 801969e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	7a1b      	ldrb	r3, [r3, #8]
 80196a6:	2b10      	cmp	r3, #16
 80196a8:	d162      	bne.n	8019770 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80196aa:	687b      	ldr	r3, [r7, #4]
 80196ac:	685b      	ldr	r3, [r3, #4]
 80196ae:	330f      	adds	r3, #15
 80196b0:	781b      	ldrb	r3, [r3, #0]
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d15e      	bne.n	8019774 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80196b6:	2300      	movs	r3, #0
 80196b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80196bc:	2303      	movs	r3, #3
 80196be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80196c2:	e050      	b.n	8019766 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80196c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196c8:	2b07      	cmp	r3, #7
 80196ca:	d824      	bhi.n	8019716 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	685a      	ldr	r2, [r3, #4]
 80196d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196d4:	4413      	add	r3, r2
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80196da:	69ba      	ldr	r2, [r7, #24]
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	6859      	ldr	r1, [r3, #4]
 80196e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196e4:	3301      	adds	r3, #1
 80196e6:	440b      	add	r3, r1
 80196e8:	781b      	ldrb	r3, [r3, #0]
 80196ea:	021b      	lsls	r3, r3, #8
 80196ec:	4313      	orrs	r3, r2
 80196ee:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80196f0:	69ba      	ldr	r2, [r7, #24]
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	6859      	ldr	r1, [r3, #4]
 80196f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196fa:	3302      	adds	r3, #2
 80196fc:	440b      	add	r3, r1
 80196fe:	781b      	ldrb	r3, [r3, #0]
 8019700:	041b      	lsls	r3, r3, #16
 8019702:	4313      	orrs	r3, r2
 8019704:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8019706:	69bb      	ldr	r3, [r7, #24]
 8019708:	2264      	movs	r2, #100	; 0x64
 801970a:	fb02 f303 	mul.w	r3, r2, r3
 801970e:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8019710:	2300      	movs	r3, #0
 8019712:	61fb      	str	r3, [r7, #28]
 8019714:	e006      	b.n	8019724 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8019716:	2300      	movs	r3, #0
 8019718:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801971a:	2300      	movs	r3, #0
 801971c:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8019720:	2300      	movs	r3, #0
 8019722:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8019724:	69bb      	ldr	r3, [r7, #24]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d00b      	beq.n	8019742 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801972a:	f107 0318 	add.w	r3, r7, #24
 801972e:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8019730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019734:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8019736:	f107 0310 	add.w	r3, r7, #16
 801973a:	4618      	mov	r0, r3
 801973c:	f000 fd14 	bl	801a168 <RegionEU868ChannelAdd>
 8019740:	e007      	b.n	8019752 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8019742:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019746:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8019748:	f107 030c 	add.w	r3, r7, #12
 801974c:	4618      	mov	r0, r3
 801974e:	f000 fdad 	bl	801a2ac <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019756:	3303      	adds	r3, #3
 8019758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801975c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019760:	3301      	adds	r3, #1
 8019762:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801976a:	2b0f      	cmp	r3, #15
 801976c:	d9aa      	bls.n	80196c4 <RegionEU868ApplyCFList+0x30>
 801976e:	e002      	b.n	8019776 <RegionEU868ApplyCFList+0xe2>
        return;
 8019770:	bf00      	nop
 8019772:	e000      	b.n	8019776 <RegionEU868ApplyCFList+0xe2>
        return;
 8019774:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019776:	3728      	adds	r7, #40	; 0x28
 8019778:	46bd      	mov	sp, r7
 801977a:	bd80      	pop	{r7, pc}

0801977c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b082      	sub	sp, #8
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	791b      	ldrb	r3, [r3, #4]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d002      	beq.n	8019792 <RegionEU868ChanMaskSet+0x16>
 801978c:	2b01      	cmp	r3, #1
 801978e:	d00b      	beq.n	80197a8 <RegionEU868ChanMaskSet+0x2c>
 8019790:	e015      	b.n	80197be <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019792:	4b0e      	ldr	r3, [pc, #56]	; (80197cc <RegionEU868ChanMaskSet+0x50>)
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	2201      	movs	r2, #1
 80197a0:	4619      	mov	r1, r3
 80197a2:	f7fe ff1d 	bl	80185e0 <RegionCommonChanMaskCopy>
            break;
 80197a6:	e00c      	b.n	80197c2 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80197a8:	4b08      	ldr	r3, [pc, #32]	; (80197cc <RegionEU868ChanMaskSet+0x50>)
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	2201      	movs	r2, #1
 80197b6:	4619      	mov	r1, r3
 80197b8:	f7fe ff12 	bl	80185e0 <RegionCommonChanMaskCopy>
            break;
 80197bc:	e001      	b.n	80197c2 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80197be:	2300      	movs	r3, #0
 80197c0:	e000      	b.n	80197c4 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80197c2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80197c4:	4618      	mov	r0, r3
 80197c6:	3708      	adds	r7, #8
 80197c8:	46bd      	mov	sp, r7
 80197ca:	bd80      	pop	{r7, pc}
 80197cc:	20001ac8 	.word	0x20001ac8

080197d0 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b088      	sub	sp, #32
 80197d4:	af02      	add	r7, sp, #8
 80197d6:	60ba      	str	r2, [r7, #8]
 80197d8:	607b      	str	r3, [r7, #4]
 80197da:	4603      	mov	r3, r0
 80197dc:	73fb      	strb	r3, [r7, #15]
 80197de:	460b      	mov	r3, r1
 80197e0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80197e2:	2300      	movs	r3, #0
 80197e4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80197e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80197ea:	2b07      	cmp	r3, #7
 80197ec:	bfa8      	it	ge
 80197ee:	2307      	movge	r3, #7
 80197f0:	b25a      	sxtb	r2, r3
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80197fc:	491e      	ldr	r1, [pc, #120]	; (8019878 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80197fe:	4618      	mov	r0, r3
 8019800:	f7ff fb8e 	bl	8018f20 <RegionCommonGetBandwidth>
 8019804:	4603      	mov	r3, r0
 8019806:	b2da      	uxtb	r2, r3
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019812:	2b07      	cmp	r3, #7
 8019814:	d10a      	bne.n	801982c <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801981c:	461a      	mov	r2, r3
 801981e:	4b17      	ldr	r3, [pc, #92]	; (801987c <RegionEU868ComputeRxWindowParameters+0xac>)
 8019820:	5c9b      	ldrb	r3, [r3, r2]
 8019822:	4618      	mov	r0, r3
 8019824:	f7ff f910 	bl	8018a48 <RegionCommonComputeSymbolTimeFsk>
 8019828:	6178      	str	r0, [r7, #20]
 801982a:	e011      	b.n	8019850 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019832:	461a      	mov	r2, r3
 8019834:	4b11      	ldr	r3, [pc, #68]	; (801987c <RegionEU868ComputeRxWindowParameters+0xac>)
 8019836:	5c9a      	ldrb	r2, [r3, r2]
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801983e:	4619      	mov	r1, r3
 8019840:	4b0d      	ldr	r3, [pc, #52]	; (8019878 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8019842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019846:	4619      	mov	r1, r3
 8019848:	4610      	mov	r0, r2
 801984a:	f7ff f8e7 	bl	8018a1c <RegionCommonComputeSymbolTimeLoRa>
 801984e:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019850:	4b0b      	ldr	r3, [pc, #44]	; (8019880 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8019852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019854:	4798      	blx	r3
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	3308      	adds	r3, #8
 801985a:	687a      	ldr	r2, [r7, #4]
 801985c:	320c      	adds	r2, #12
 801985e:	7bb9      	ldrb	r1, [r7, #14]
 8019860:	9201      	str	r2, [sp, #4]
 8019862:	9300      	str	r3, [sp, #0]
 8019864:	4603      	mov	r3, r0
 8019866:	68ba      	ldr	r2, [r7, #8]
 8019868:	6978      	ldr	r0, [r7, #20]
 801986a:	f7ff f8fd 	bl	8018a68 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801986e:	bf00      	nop
 8019870:	3718      	adds	r7, #24
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
 8019876:	bf00      	nop
 8019878:	08021f00 	.word	0x08021f00
 801987c:	08021ef8 	.word	0x08021ef8
 8019880:	08021fb4 	.word	0x08021fb4

08019884 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019884:	b5b0      	push	{r4, r5, r7, lr}
 8019886:	b090      	sub	sp, #64	; 0x40
 8019888:	af0a      	add	r7, sp, #40	; 0x28
 801988a:	6078      	str	r0, [r7, #4]
 801988c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	785b      	ldrb	r3, [r3, #1]
 8019892:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019894:	2300      	movs	r3, #0
 8019896:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8019898:	2300      	movs	r3, #0
 801989a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	685b      	ldr	r3, [r3, #4]
 80198a0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80198a2:	4b5a      	ldr	r3, [pc, #360]	; (8019a0c <RegionEU868RxConfig+0x188>)
 80198a4:	685b      	ldr	r3, [r3, #4]
 80198a6:	4798      	blx	r3
 80198a8:	4603      	mov	r3, r0
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d001      	beq.n	80198b2 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80198ae:	2300      	movs	r3, #0
 80198b0:	e0a8      	b.n	8019a04 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	7cdb      	ldrb	r3, [r3, #19]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d126      	bne.n	8019908 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80198ba:	4b55      	ldr	r3, [pc, #340]	; (8019a10 <RegionEU868RxConfig+0x18c>)
 80198bc:	681a      	ldr	r2, [r3, #0]
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	781b      	ldrb	r3, [r3, #0]
 80198c2:	4619      	mov	r1, r3
 80198c4:	460b      	mov	r3, r1
 80198c6:	005b      	lsls	r3, r3, #1
 80198c8:	440b      	add	r3, r1
 80198ca:	009b      	lsls	r3, r3, #2
 80198cc:	4413      	add	r3, r2
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80198d2:	4b4f      	ldr	r3, [pc, #316]	; (8019a10 <RegionEU868RxConfig+0x18c>)
 80198d4:	681a      	ldr	r2, [r3, #0]
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	781b      	ldrb	r3, [r3, #0]
 80198da:	4619      	mov	r1, r3
 80198dc:	460b      	mov	r3, r1
 80198de:	005b      	lsls	r3, r3, #1
 80198e0:	440b      	add	r3, r1
 80198e2:	009b      	lsls	r3, r3, #2
 80198e4:	4413      	add	r3, r2
 80198e6:	3304      	adds	r3, #4
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d00c      	beq.n	8019908 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80198ee:	4b48      	ldr	r3, [pc, #288]	; (8019a10 <RegionEU868RxConfig+0x18c>)
 80198f0:	681a      	ldr	r2, [r3, #0]
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	781b      	ldrb	r3, [r3, #0]
 80198f6:	4619      	mov	r1, r3
 80198f8:	460b      	mov	r3, r1
 80198fa:	005b      	lsls	r3, r3, #1
 80198fc:	440b      	add	r3, r1
 80198fe:	009b      	lsls	r3, r3, #2
 8019900:	4413      	add	r3, r2
 8019902:	3304      	adds	r3, #4
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8019908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801990c:	4a41      	ldr	r2, [pc, #260]	; (8019a14 <RegionEU868RxConfig+0x190>)
 801990e:	5cd3      	ldrb	r3, [r2, r3]
 8019910:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8019912:	4b3e      	ldr	r3, [pc, #248]	; (8019a0c <RegionEU868RxConfig+0x188>)
 8019914:	68db      	ldr	r3, [r3, #12]
 8019916:	6938      	ldr	r0, [r7, #16]
 8019918:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801991a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801991e:	2b07      	cmp	r3, #7
 8019920:	d128      	bne.n	8019974 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8019922:	2300      	movs	r3, #0
 8019924:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8019926:	4b39      	ldr	r3, [pc, #228]	; (8019a0c <RegionEU868RxConfig+0x188>)
 8019928:	699c      	ldr	r4, [r3, #24]
 801992a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801992e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019932:	fb02 f303 	mul.w	r3, r2, r3
 8019936:	4619      	mov	r1, r3
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	689b      	ldr	r3, [r3, #8]
 801993c:	b29b      	uxth	r3, r3
 801993e:	687a      	ldr	r2, [r7, #4]
 8019940:	7c92      	ldrb	r2, [r2, #18]
 8019942:	7df8      	ldrb	r0, [r7, #23]
 8019944:	9209      	str	r2, [sp, #36]	; 0x24
 8019946:	2200      	movs	r2, #0
 8019948:	9208      	str	r2, [sp, #32]
 801994a:	2200      	movs	r2, #0
 801994c:	9207      	str	r2, [sp, #28]
 801994e:	2200      	movs	r2, #0
 8019950:	9206      	str	r2, [sp, #24]
 8019952:	2201      	movs	r2, #1
 8019954:	9205      	str	r2, [sp, #20]
 8019956:	2200      	movs	r2, #0
 8019958:	9204      	str	r2, [sp, #16]
 801995a:	2200      	movs	r2, #0
 801995c:	9203      	str	r2, [sp, #12]
 801995e:	9302      	str	r3, [sp, #8]
 8019960:	2305      	movs	r3, #5
 8019962:	9301      	str	r3, [sp, #4]
 8019964:	4b2c      	ldr	r3, [pc, #176]	; (8019a18 <RegionEU868RxConfig+0x194>)
 8019966:	9300      	str	r3, [sp, #0]
 8019968:	2300      	movs	r3, #0
 801996a:	460a      	mov	r2, r1
 801996c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019970:	47a0      	blx	r4
 8019972:	e024      	b.n	80199be <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019974:	2301      	movs	r3, #1
 8019976:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019978:	4b24      	ldr	r3, [pc, #144]	; (8019a0c <RegionEU868RxConfig+0x188>)
 801997a:	699c      	ldr	r4, [r3, #24]
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	789b      	ldrb	r3, [r3, #2]
 8019980:	461d      	mov	r5, r3
 8019982:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	689b      	ldr	r3, [r3, #8]
 801998a:	b29b      	uxth	r3, r3
 801998c:	687a      	ldr	r2, [r7, #4]
 801998e:	7c92      	ldrb	r2, [r2, #18]
 8019990:	7df8      	ldrb	r0, [r7, #23]
 8019992:	9209      	str	r2, [sp, #36]	; 0x24
 8019994:	2201      	movs	r2, #1
 8019996:	9208      	str	r2, [sp, #32]
 8019998:	2200      	movs	r2, #0
 801999a:	9207      	str	r2, [sp, #28]
 801999c:	2200      	movs	r2, #0
 801999e:	9206      	str	r2, [sp, #24]
 80199a0:	2200      	movs	r2, #0
 80199a2:	9205      	str	r2, [sp, #20]
 80199a4:	2200      	movs	r2, #0
 80199a6:	9204      	str	r2, [sp, #16]
 80199a8:	2200      	movs	r2, #0
 80199aa:	9203      	str	r2, [sp, #12]
 80199ac:	9302      	str	r3, [sp, #8]
 80199ae:	2308      	movs	r3, #8
 80199b0:	9301      	str	r3, [sp, #4]
 80199b2:	2300      	movs	r3, #0
 80199b4:	9300      	str	r3, [sp, #0]
 80199b6:	2301      	movs	r3, #1
 80199b8:	460a      	mov	r2, r1
 80199ba:	4629      	mov	r1, r5
 80199bc:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	7c5b      	ldrb	r3, [r3, #17]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d005      	beq.n	80199d2 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80199c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80199ca:	4a14      	ldr	r2, [pc, #80]	; (8019a1c <RegionEU868RxConfig+0x198>)
 80199cc:	5cd3      	ldrb	r3, [r2, r3]
 80199ce:	75bb      	strb	r3, [r7, #22]
 80199d0:	e004      	b.n	80199dc <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80199d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80199d6:	4a12      	ldr	r2, [pc, #72]	; (8019a20 <RegionEU868RxConfig+0x19c>)
 80199d8:	5cd3      	ldrb	r3, [r2, r3]
 80199da:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80199dc:	4b0b      	ldr	r3, [pc, #44]	; (8019a0c <RegionEU868RxConfig+0x188>)
 80199de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80199e0:	7dba      	ldrb	r2, [r7, #22]
 80199e2:	320d      	adds	r2, #13
 80199e4:	b2d1      	uxtb	r1, r2
 80199e6:	7dfa      	ldrb	r2, [r7, #23]
 80199e8:	4610      	mov	r0, r2
 80199ea:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	7cdb      	ldrb	r3, [r3, #19]
 80199f0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80199f4:	6939      	ldr	r1, [r7, #16]
 80199f6:	4618      	mov	r0, r3
 80199f8:	f7ff fab0 	bl	8018f5c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	7bfa      	ldrb	r2, [r7, #15]
 8019a00:	701a      	strb	r2, [r3, #0]
    return true;
 8019a02:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019a04:	4618      	mov	r0, r3
 8019a06:	3718      	adds	r7, #24
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8019a0c:	08021fb4 	.word	0x08021fb4
 8019a10:	20001ac8 	.word	0x20001ac8
 8019a14:	08021ef8 	.word	0x08021ef8
 8019a18:	00014585 	.word	0x00014585
 8019a1c:	08021f28 	.word	0x08021f28
 8019a20:	08021f20 	.word	0x08021f20

08019a24 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8019a24:	b590      	push	{r4, r7, lr}
 8019a26:	b093      	sub	sp, #76	; 0x4c
 8019a28:	af0a      	add	r7, sp, #40	; 0x28
 8019a2a:	60f8      	str	r0, [r7, #12]
 8019a2c:	60b9      	str	r1, [r7, #8]
 8019a2e:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019a36:	461a      	mov	r2, r3
 8019a38:	4b5d      	ldr	r3, [pc, #372]	; (8019bb0 <RegionEU868TxConfig+0x18c>)
 8019a3a:	5c9b      	ldrb	r3, [r3, r2]
 8019a3c:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019a44:	4b5b      	ldr	r3, [pc, #364]	; (8019bb4 <RegionEU868TxConfig+0x190>)
 8019a46:	681a      	ldr	r2, [r3, #0]
 8019a48:	4b5b      	ldr	r3, [pc, #364]	; (8019bb8 <RegionEU868TxConfig+0x194>)
 8019a4a:	6819      	ldr	r1, [r3, #0]
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	461c      	mov	r4, r3
 8019a52:	4623      	mov	r3, r4
 8019a54:	005b      	lsls	r3, r3, #1
 8019a56:	4423      	add	r3, r4
 8019a58:	009b      	lsls	r3, r3, #2
 8019a5a:	440b      	add	r3, r1
 8019a5c:	3309      	adds	r3, #9
 8019a5e:	781b      	ldrb	r3, [r3, #0]
 8019a60:	4619      	mov	r1, r3
 8019a62:	460b      	mov	r3, r1
 8019a64:	005b      	lsls	r3, r3, #1
 8019a66:	440b      	add	r3, r1
 8019a68:	00db      	lsls	r3, r3, #3
 8019a6a:	4413      	add	r3, r2
 8019a6c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8019a70:	4619      	mov	r1, r3
 8019a72:	f7ff fa40 	bl	8018ef6 <RegionCommonLimitTxPower>
 8019a76:	4603      	mov	r3, r0
 8019a78:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019a80:	494e      	ldr	r1, [pc, #312]	; (8019bbc <RegionEU868TxConfig+0x198>)
 8019a82:	4618      	mov	r0, r3
 8019a84:	f7ff fa4c 	bl	8018f20 <RegionCommonGetBandwidth>
 8019a88:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	6859      	ldr	r1, [r3, #4]
 8019a92:	68fb      	ldr	r3, [r7, #12]
 8019a94:	689a      	ldr	r2, [r3, #8]
 8019a96:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f7ff f89c 	bl	8018bd8 <RegionCommonComputeTxPower>
 8019aa0:	4603      	mov	r3, r0
 8019aa2:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019aa4:	4b46      	ldr	r3, [pc, #280]	; (8019bc0 <RegionEU868TxConfig+0x19c>)
 8019aa6:	68da      	ldr	r2, [r3, #12]
 8019aa8:	4b43      	ldr	r3, [pc, #268]	; (8019bb8 <RegionEU868TxConfig+0x194>)
 8019aaa:	6819      	ldr	r1, [r3, #0]
 8019aac:	68fb      	ldr	r3, [r7, #12]
 8019aae:	781b      	ldrb	r3, [r3, #0]
 8019ab0:	4618      	mov	r0, r3
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	005b      	lsls	r3, r3, #1
 8019ab6:	4403      	add	r3, r0
 8019ab8:	009b      	lsls	r3, r3, #2
 8019aba:	440b      	add	r3, r1
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	4618      	mov	r0, r3
 8019ac0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019ac8:	2b07      	cmp	r3, #7
 8019aca:	d124      	bne.n	8019b16 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019acc:	2300      	movs	r3, #0
 8019ace:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019ad0:	4b3b      	ldr	r3, [pc, #236]	; (8019bc0 <RegionEU868TxConfig+0x19c>)
 8019ad2:	69dc      	ldr	r4, [r3, #28]
 8019ad4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019adc:	fb02 f303 	mul.w	r3, r2, r3
 8019ae0:	461a      	mov	r2, r3
 8019ae2:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019ae6:	7ff8      	ldrb	r0, [r7, #31]
 8019ae8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8019aec:	9308      	str	r3, [sp, #32]
 8019aee:	2300      	movs	r3, #0
 8019af0:	9307      	str	r3, [sp, #28]
 8019af2:	2300      	movs	r3, #0
 8019af4:	9306      	str	r3, [sp, #24]
 8019af6:	2300      	movs	r3, #0
 8019af8:	9305      	str	r3, [sp, #20]
 8019afa:	2301      	movs	r3, #1
 8019afc:	9304      	str	r3, [sp, #16]
 8019afe:	2300      	movs	r3, #0
 8019b00:	9303      	str	r3, [sp, #12]
 8019b02:	2305      	movs	r3, #5
 8019b04:	9302      	str	r3, [sp, #8]
 8019b06:	2300      	movs	r3, #0
 8019b08:	9301      	str	r3, [sp, #4]
 8019b0a:	9200      	str	r2, [sp, #0]
 8019b0c:	69bb      	ldr	r3, [r7, #24]
 8019b0e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8019b12:	47a0      	blx	r4
 8019b14:	e01d      	b.n	8019b52 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8019b16:	2301      	movs	r3, #1
 8019b18:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8019b1a:	4b29      	ldr	r3, [pc, #164]	; (8019bc0 <RegionEU868TxConfig+0x19c>)
 8019b1c:	69dc      	ldr	r4, [r3, #28]
 8019b1e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019b22:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019b26:	7ff8      	ldrb	r0, [r7, #31]
 8019b28:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8019b2c:	9208      	str	r2, [sp, #32]
 8019b2e:	2200      	movs	r2, #0
 8019b30:	9207      	str	r2, [sp, #28]
 8019b32:	2200      	movs	r2, #0
 8019b34:	9206      	str	r2, [sp, #24]
 8019b36:	2200      	movs	r2, #0
 8019b38:	9205      	str	r2, [sp, #20]
 8019b3a:	2201      	movs	r2, #1
 8019b3c:	9204      	str	r2, [sp, #16]
 8019b3e:	2200      	movs	r2, #0
 8019b40:	9203      	str	r2, [sp, #12]
 8019b42:	2208      	movs	r2, #8
 8019b44:	9202      	str	r2, [sp, #8]
 8019b46:	2201      	movs	r2, #1
 8019b48:	9201      	str	r2, [sp, #4]
 8019b4a:	9300      	str	r3, [sp, #0]
 8019b4c:	69bb      	ldr	r3, [r7, #24]
 8019b4e:	2200      	movs	r2, #0
 8019b50:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8019b52:	4b19      	ldr	r3, [pc, #100]	; (8019bb8 <RegionEU868TxConfig+0x194>)
 8019b54:	681a      	ldr	r2, [r3, #0]
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	781b      	ldrb	r3, [r3, #0]
 8019b5a:	4619      	mov	r1, r3
 8019b5c:	460b      	mov	r3, r1
 8019b5e:	005b      	lsls	r3, r3, #1
 8019b60:	440b      	add	r3, r1
 8019b62:	009b      	lsls	r3, r3, #2
 8019b64:	4413      	add	r3, r2
 8019b66:	681a      	ldr	r2, [r3, #0]
 8019b68:	68fb      	ldr	r3, [r7, #12]
 8019b6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019b6e:	4619      	mov	r1, r3
 8019b70:	4610      	mov	r0, r2
 8019b72:	f7ff fa25 	bl	8018fc0 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	899b      	ldrh	r3, [r3, #12]
 8019b80:	4619      	mov	r1, r3
 8019b82:	4610      	mov	r0, r2
 8019b84:	f7ff faaa 	bl	80190dc <GetTimeOnAir>
 8019b88:	4602      	mov	r2, r0
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019b8e:	4b0c      	ldr	r3, [pc, #48]	; (8019bc0 <RegionEU868TxConfig+0x19c>)
 8019b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b92:	68fa      	ldr	r2, [r7, #12]
 8019b94:	8992      	ldrh	r2, [r2, #12]
 8019b96:	b2d1      	uxtb	r1, r2
 8019b98:	7ffa      	ldrb	r2, [r7, #31]
 8019b9a:	4610      	mov	r0, r2
 8019b9c:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	7f7a      	ldrb	r2, [r7, #29]
 8019ba2:	701a      	strb	r2, [r3, #0]
    return true;
 8019ba4:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019ba6:	4618      	mov	r0, r3
 8019ba8:	3724      	adds	r7, #36	; 0x24
 8019baa:	46bd      	mov	sp, r7
 8019bac:	bd90      	pop	{r4, r7, pc}
 8019bae:	bf00      	nop
 8019bb0:	08021ef8 	.word	0x08021ef8
 8019bb4:	20001acc 	.word	0x20001acc
 8019bb8:	20001ac8 	.word	0x20001ac8
 8019bbc:	08021f00 	.word	0x08021f00
 8019bc0:	08021fb4 	.word	0x08021fb4

08019bc4 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019bc4:	b590      	push	{r4, r7, lr}
 8019bc6:	b093      	sub	sp, #76	; 0x4c
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	60f8      	str	r0, [r7, #12]
 8019bcc:	60b9      	str	r1, [r7, #8]
 8019bce:	607a      	str	r2, [r7, #4]
 8019bd0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019bd2:	2307      	movs	r3, #7
 8019bd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019bd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019bdc:	2200      	movs	r2, #0
 8019bde:	601a      	str	r2, [r3, #0]
 8019be0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019be2:	2300      	movs	r3, #0
 8019be4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019be8:	2300      	movs	r3, #0
 8019bea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8019bee:	2300      	movs	r3, #0
 8019bf0:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019bf2:	e085      	b.n	8019d00 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019bf4:	68fb      	ldr	r3, [r7, #12]
 8019bf6:	685a      	ldr	r2, [r3, #4]
 8019bf8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019bfc:	4413      	add	r3, r2
 8019bfe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8019c02:	4611      	mov	r1, r2
 8019c04:	4618      	mov	r0, r3
 8019c06:	f7fe fe2f 	bl	8018868 <RegionCommonParseLinkAdrReq>
 8019c0a:	4603      	mov	r3, r0
 8019c0c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019c10:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d07b      	beq.n	8019d10 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8019c18:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019c1c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019c20:	4413      	add	r3, r2
 8019c22:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8019c26:	2307      	movs	r3, #7
 8019c28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8019c2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019c30:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8019c32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d109      	bne.n	8019c4e <RegionEU868LinkAdrReq+0x8a>
 8019c3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d106      	bne.n	8019c4e <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8019c40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019c44:	f023 0301 	bic.w	r3, r3, #1
 8019c48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019c4c:	e058      	b.n	8019d00 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d003      	beq.n	8019c5e <RegionEU868LinkAdrReq+0x9a>
 8019c56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c5a:	2b05      	cmp	r3, #5
 8019c5c:	d903      	bls.n	8019c66 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019c5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019c62:	2b06      	cmp	r3, #6
 8019c64:	d906      	bls.n	8019c74 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8019c66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019c6a:	f023 0301 	bic.w	r3, r3, #1
 8019c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019c72:	e045      	b.n	8019d00 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019c74:	2300      	movs	r3, #0
 8019c76:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019c7a:	e03d      	b.n	8019cf8 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019c7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019c80:	2b06      	cmp	r3, #6
 8019c82:	d118      	bne.n	8019cb6 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019c84:	4b5f      	ldr	r3, [pc, #380]	; (8019e04 <RegionEU868LinkAdrReq+0x240>)
 8019c86:	6819      	ldr	r1, [r3, #0]
 8019c88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019c8c:	4613      	mov	r3, r2
 8019c8e:	005b      	lsls	r3, r3, #1
 8019c90:	4413      	add	r3, r2
 8019c92:	009b      	lsls	r3, r3, #2
 8019c94:	440b      	add	r3, r1
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d028      	beq.n	8019cee <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019c9c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019ca0:	2201      	movs	r2, #1
 8019ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8019ca6:	b21a      	sxth	r2, r3
 8019ca8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019caa:	b21b      	sxth	r3, r3
 8019cac:	4313      	orrs	r3, r2
 8019cae:	b21b      	sxth	r3, r3
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019cb4:	e01b      	b.n	8019cee <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019cb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019cb8:	461a      	mov	r2, r3
 8019cba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019cbe:	fa42 f303 	asr.w	r3, r2, r3
 8019cc2:	f003 0301 	and.w	r3, r3, #1
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d011      	beq.n	8019cee <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8019cca:	4b4e      	ldr	r3, [pc, #312]	; (8019e04 <RegionEU868LinkAdrReq+0x240>)
 8019ccc:	6819      	ldr	r1, [r3, #0]
 8019cce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019cd2:	4613      	mov	r3, r2
 8019cd4:	005b      	lsls	r3, r3, #1
 8019cd6:	4413      	add	r3, r2
 8019cd8:	009b      	lsls	r3, r3, #2
 8019cda:	440b      	add	r3, r1
 8019cdc:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d105      	bne.n	8019cee <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019ce2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019ce6:	f023 0301 	bic.w	r3, r3, #1
 8019cea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019cee:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019cf2:	3301      	adds	r3, #1
 8019cf4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019cf8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019cfc:	2b0f      	cmp	r3, #15
 8019cfe:	d9bd      	bls.n	8019c7c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	7a1b      	ldrb	r3, [r3, #8]
 8019d04:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019d08:	429a      	cmp	r2, r3
 8019d0a:	f4ff af73 	bcc.w	8019bf4 <RegionEU868LinkAdrReq+0x30>
 8019d0e:	e000      	b.n	8019d12 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019d10:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8019d12:	2302      	movs	r3, #2
 8019d14:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	7a5b      	ldrb	r3, [r3, #9]
 8019d1c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8019d20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019d24:	4618      	mov	r0, r3
 8019d26:	f7ff fa29 	bl	801917c <RegionEU868GetPhyParam>
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8019d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019d32:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	7a9b      	ldrb	r3, [r3, #10]
 8019d38:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8019d3a:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8019d3e:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8019d40:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8019d44:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8019d46:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019d4a:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8019d52:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019d5a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	7b5b      	ldrb	r3, [r3, #13]
 8019d60:	b25b      	sxtb	r3, r3
 8019d62:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019d64:	2310      	movs	r3, #16
 8019d66:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019d68:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019d6c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d70:	b25b      	sxtb	r3, r3
 8019d72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8019d76:	2307      	movs	r3, #7
 8019d78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019d7c:	4b21      	ldr	r3, [pc, #132]	; (8019e04 <RegionEU868LinkAdrReq+0x240>)
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019d82:	2307      	movs	r3, #7
 8019d84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019d88:	2300      	movs	r3, #0
 8019d8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019d94:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019d98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019d9c:	1c9a      	adds	r2, r3, #2
 8019d9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019da2:	1c59      	adds	r1, r3, #1
 8019da4:	f107 0010 	add.w	r0, r7, #16
 8019da8:	4623      	mov	r3, r4
 8019daa:	f7fe fdae 	bl	801890a <RegionCommonLinkAdrReqVerifyParams>
 8019dae:	4603      	mov	r3, r0
 8019db0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019db8:	2b07      	cmp	r3, #7
 8019dba:	d10d      	bne.n	8019dd8 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019dbc:	4b11      	ldr	r3, [pc, #68]	; (8019e04 <RegionEU868LinkAdrReq+0x240>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019dc4:	220c      	movs	r2, #12
 8019dc6:	2100      	movs	r1, #0
 8019dc8:	4618      	mov	r0, r3
 8019dca:	f001 fd31 	bl	801b830 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019dce:	4b0d      	ldr	r3, [pc, #52]	; (8019e04 <RegionEU868LinkAdrReq+0x240>)
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019dd4:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019dd8:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019de0:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019de8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019dec:	683b      	ldr	r3, [r7, #0]
 8019dee:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019df2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019df6:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019df8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	374c      	adds	r7, #76	; 0x4c
 8019e00:	46bd      	mov	sp, r7
 8019e02:	bd90      	pop	{r4, r7, pc}
 8019e04:	20001ac8 	.word	0x20001ac8

08019e08 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019e08:	b580      	push	{r7, lr}
 8019e0a:	b084      	sub	sp, #16
 8019e0c:	af00      	add	r7, sp, #0
 8019e0e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019e10:	2307      	movs	r3, #7
 8019e12:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019e14:	2300      	movs	r3, #0
 8019e16:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	685b      	ldr	r3, [r3, #4]
 8019e1c:	f107 020e 	add.w	r2, r7, #14
 8019e20:	4611      	mov	r1, r2
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7ff f8e4 	bl	8018ff0 <VerifyRfFreq>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	f083 0301 	eor.w	r3, r3, #1
 8019e2e:	b2db      	uxtb	r3, r3
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d003      	beq.n	8019e3c <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019e34:	7bfb      	ldrb	r3, [r7, #15]
 8019e36:	f023 0301 	bic.w	r3, r3, #1
 8019e3a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	f993 3000 	ldrsb.w	r3, [r3]
 8019e42:	2207      	movs	r2, #7
 8019e44:	2100      	movs	r1, #0
 8019e46:	4618      	mov	r0, r3
 8019e48:	f7fe fb4d 	bl	80184e6 <RegionCommonValueInRange>
 8019e4c:	4603      	mov	r3, r0
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d103      	bne.n	8019e5a <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019e52:	7bfb      	ldrb	r3, [r7, #15]
 8019e54:	f023 0302 	bic.w	r3, r3, #2
 8019e58:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019e60:	2205      	movs	r2, #5
 8019e62:	2100      	movs	r1, #0
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7fe fb3e 	bl	80184e6 <RegionCommonValueInRange>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d103      	bne.n	8019e78 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019e70:	7bfb      	ldrb	r3, [r7, #15]
 8019e72:	f023 0304 	bic.w	r3, r3, #4
 8019e76:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	3710      	adds	r7, #16
 8019e7e:	46bd      	mov	sp, r7
 8019e80:	bd80      	pop	{r7, pc}
	...

08019e84 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b086      	sub	sp, #24
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019e8c:	2303      	movs	r3, #3
 8019e8e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d114      	bne.n	8019ec4 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019ea0:	b2db      	uxtb	r3, r3
 8019ea2:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019ea4:	f107 0308 	add.w	r3, r7, #8
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	f000 f9ff 	bl	801a2ac <RegionEU868ChannelsRemove>
 8019eae:	4603      	mov	r3, r0
 8019eb0:	f083 0301 	eor.w	r3, r3, #1
 8019eb4:	b2db      	uxtb	r3, r3
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d03b      	beq.n	8019f32 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8019eba:	7dfb      	ldrb	r3, [r7, #23]
 8019ebc:	f023 0303 	bic.w	r3, r3, #3
 8019ec0:	75fb      	strb	r3, [r7, #23]
 8019ec2:	e036      	b.n	8019f32 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019ed0:	b2db      	uxtb	r3, r3
 8019ed2:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019ed4:	f107 030c 	add.w	r3, r7, #12
 8019ed8:	4618      	mov	r0, r3
 8019eda:	f000 f945 	bl	801a168 <RegionEU868ChannelAdd>
 8019ede:	4603      	mov	r3, r0
 8019ee0:	2b06      	cmp	r3, #6
 8019ee2:	d820      	bhi.n	8019f26 <RegionEU868NewChannelReq+0xa2>
 8019ee4:	a201      	add	r2, pc, #4	; (adr r2, 8019eec <RegionEU868NewChannelReq+0x68>)
 8019ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019eea:	bf00      	nop
 8019eec:	08019f31 	.word	0x08019f31
 8019ef0:	08019f27 	.word	0x08019f27
 8019ef4:	08019f27 	.word	0x08019f27
 8019ef8:	08019f27 	.word	0x08019f27
 8019efc:	08019f09 	.word	0x08019f09
 8019f00:	08019f13 	.word	0x08019f13
 8019f04:	08019f1d 	.word	0x08019f1d
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019f08:	7dfb      	ldrb	r3, [r7, #23]
 8019f0a:	f023 0301 	bic.w	r3, r3, #1
 8019f0e:	75fb      	strb	r3, [r7, #23]
                break;
 8019f10:	e00f      	b.n	8019f32 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019f12:	7dfb      	ldrb	r3, [r7, #23]
 8019f14:	f023 0302 	bic.w	r3, r3, #2
 8019f18:	75fb      	strb	r3, [r7, #23]
                break;
 8019f1a:	e00a      	b.n	8019f32 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019f1c:	7dfb      	ldrb	r3, [r7, #23]
 8019f1e:	f023 0303 	bic.w	r3, r3, #3
 8019f22:	75fb      	strb	r3, [r7, #23]
                break;
 8019f24:	e005      	b.n	8019f32 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8019f26:	7dfb      	ldrb	r3, [r7, #23]
 8019f28:	f023 0303 	bic.w	r3, r3, #3
 8019f2c:	75fb      	strb	r3, [r7, #23]
                break;
 8019f2e:	e000      	b.n	8019f32 <RegionEU868NewChannelReq+0xae>
                break;
 8019f30:	bf00      	nop
            }
        }
    }

    return status;
 8019f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f36:	4618      	mov	r0, r3
 8019f38:	3718      	adds	r7, #24
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bd80      	pop	{r7, pc}
 8019f3e:	bf00      	nop

08019f40 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019f40:	b480      	push	{r7}
 8019f42:	b083      	sub	sp, #12
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019f48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	370c      	adds	r7, #12
 8019f50:	46bd      	mov	sp, r7
 8019f52:	bc80      	pop	{r7}
 8019f54:	4770      	bx	lr
	...

08019f58 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b084      	sub	sp, #16
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019f60:	2303      	movs	r3, #3
 8019f62:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019f64:	2300      	movs	r3, #0
 8019f66:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	781b      	ldrb	r3, [r3, #0]
 8019f6c:	2b0f      	cmp	r3, #15
 8019f6e:	d901      	bls.n	8019f74 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019f70:	2300      	movs	r3, #0
 8019f72:	e035      	b.n	8019fe0 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	685b      	ldr	r3, [r3, #4]
 8019f78:	f107 020e 	add.w	r2, r7, #14
 8019f7c:	4611      	mov	r1, r2
 8019f7e:	4618      	mov	r0, r3
 8019f80:	f7ff f836 	bl	8018ff0 <VerifyRfFreq>
 8019f84:	4603      	mov	r3, r0
 8019f86:	f083 0301 	eor.w	r3, r3, #1
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	2b00      	cmp	r3, #0
 8019f8e:	d003      	beq.n	8019f98 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019f90:	7bfb      	ldrb	r3, [r7, #15]
 8019f92:	f023 0301 	bic.w	r3, r3, #1
 8019f96:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019f98:	4b13      	ldr	r3, [pc, #76]	; (8019fe8 <RegionEU868DlChannelReq+0x90>)
 8019f9a:	681a      	ldr	r2, [r3, #0]
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	781b      	ldrb	r3, [r3, #0]
 8019fa0:	4619      	mov	r1, r3
 8019fa2:	460b      	mov	r3, r1
 8019fa4:	005b      	lsls	r3, r3, #1
 8019fa6:	440b      	add	r3, r1
 8019fa8:	009b      	lsls	r3, r3, #2
 8019faa:	4413      	add	r3, r2
 8019fac:	681b      	ldr	r3, [r3, #0]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d103      	bne.n	8019fba <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8019fb2:	7bfb      	ldrb	r3, [r7, #15]
 8019fb4:	f023 0302 	bic.w	r3, r3, #2
 8019fb8:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019fba:	7bfb      	ldrb	r3, [r7, #15]
 8019fbc:	2b03      	cmp	r3, #3
 8019fbe:	d10d      	bne.n	8019fdc <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019fc0:	4b09      	ldr	r3, [pc, #36]	; (8019fe8 <RegionEU868DlChannelReq+0x90>)
 8019fc2:	6819      	ldr	r1, [r3, #0]
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	781b      	ldrb	r3, [r3, #0]
 8019fc8:	4618      	mov	r0, r3
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	685a      	ldr	r2, [r3, #4]
 8019fce:	4603      	mov	r3, r0
 8019fd0:	005b      	lsls	r3, r3, #1
 8019fd2:	4403      	add	r3, r0
 8019fd4:	009b      	lsls	r3, r3, #2
 8019fd6:	440b      	add	r3, r1
 8019fd8:	3304      	adds	r3, #4
 8019fda:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	3710      	adds	r7, #16
 8019fe4:	46bd      	mov	sp, r7
 8019fe6:	bd80      	pop	{r7, pc}
 8019fe8:	20001ac8 	.word	0x20001ac8

08019fec <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019fec:	b480      	push	{r7}
 8019fee:	b083      	sub	sp, #12
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	460a      	mov	r2, r1
 8019ff6:	71fb      	strb	r3, [r7, #7]
 8019ff8:	4613      	mov	r3, r2
 8019ffa:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801a000:	4618      	mov	r0, r3
 801a002:	370c      	adds	r7, #12
 801a004:	46bd      	mov	sp, r7
 801a006:	bc80      	pop	{r7}
 801a008:	4770      	bx	lr
	...

0801a00c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801a00c:	b580      	push	{r7, lr}
 801a00e:	b09a      	sub	sp, #104	; 0x68
 801a010:	af02      	add	r7, sp, #8
 801a012:	60f8      	str	r0, [r7, #12]
 801a014:	60b9      	str	r1, [r7, #8]
 801a016:	607a      	str	r2, [r7, #4]
 801a018:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 801a01a:	2300      	movs	r3, #0
 801a01c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 801a020:	2300      	movs	r3, #0
 801a022:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801a026:	2300      	movs	r3, #0
 801a028:	64fb      	str	r3, [r7, #76]	; 0x4c
 801a02a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a02e:	2200      	movs	r2, #0
 801a030:	601a      	str	r2, [r3, #0]
 801a032:	605a      	str	r2, [r3, #4]
 801a034:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801a036:	230c      	movs	r3, #12
 801a038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 801a03c:	2307      	movs	r3, #7
 801a03e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801a040:	4b47      	ldr	r3, [pc, #284]	; (801a160 <RegionEU868NextChannel+0x154>)
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a048:	2201      	movs	r2, #1
 801a04a:	2100      	movs	r1, #0
 801a04c:	4618      	mov	r0, r3
 801a04e:	f7fe fa9b 	bl	8018588 <RegionCommonCountChannels>
 801a052:	4603      	mov	r3, r0
 801a054:	2b00      	cmp	r3, #0
 801a056:	d10a      	bne.n	801a06e <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801a058:	4b41      	ldr	r3, [pc, #260]	; (801a160 <RegionEU868NextChannel+0x154>)
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801a060:	4b3f      	ldr	r3, [pc, #252]	; (801a160 <RegionEU868NextChannel+0x154>)
 801a062:	681b      	ldr	r3, [r3, #0]
 801a064:	f042 0207 	orr.w	r2, r2, #7
 801a068:	b292      	uxth	r2, r2
 801a06a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	7a5b      	ldrb	r3, [r3, #9]
 801a072:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801a07a:	b2db      	uxtb	r3, r3
 801a07c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a07e:	4b38      	ldr	r3, [pc, #224]	; (801a160 <RegionEU868NextChannel+0x154>)
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a086:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801a088:	4b35      	ldr	r3, [pc, #212]	; (801a160 <RegionEU868NextChannel+0x154>)
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801a08e:	4b35      	ldr	r3, [pc, #212]	; (801a164 <RegionEU868NextChannel+0x158>)
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801a094:	2310      	movs	r3, #16
 801a096:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 801a098:	f107 0312 	add.w	r3, r7, #18
 801a09c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801a09e:	68fb      	ldr	r3, [r7, #12]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	685b      	ldr	r3, [r3, #4]
 801a0a8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	7a9b      	ldrb	r3, [r3, #10]
 801a0ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801a0b2:	2306      	movs	r3, #6
 801a0b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801a0b8:	68fa      	ldr	r2, [r7, #12]
 801a0ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a0be:	320c      	adds	r2, #12
 801a0c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a0c4:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	7d1b      	ldrb	r3, [r3, #20]
 801a0cc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	8adb      	ldrh	r3, [r3, #22]
 801a0da:	4619      	mov	r1, r3
 801a0dc:	4610      	mov	r0, r2
 801a0de:	f7fe fffd 	bl	80190dc <GetTimeOnAir>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801a0e6:	f107 0314 	add.w	r3, r7, #20
 801a0ea:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801a0ec:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 801a0f0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801a0f4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	9301      	str	r3, [sp, #4]
 801a0fc:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 801a100:	9300      	str	r3, [sp, #0]
 801a102:	460b      	mov	r3, r1
 801a104:	6839      	ldr	r1, [r7, #0]
 801a106:	f7fe fe56 	bl	8018db6 <RegionCommonIdentifyChannels>
 801a10a:	4603      	mov	r3, r0
 801a10c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801a110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a114:	2b00      	cmp	r3, #0
 801a116:	d10e      	bne.n	801a136 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801a118:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 801a11c:	3b01      	subs	r3, #1
 801a11e:	4619      	mov	r1, r3
 801a120:	2000      	movs	r0, #0
 801a122:	f001 fb33 	bl	801b78c <randr>
 801a126:	4603      	mov	r3, r0
 801a128:	3360      	adds	r3, #96	; 0x60
 801a12a:	443b      	add	r3, r7
 801a12c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	701a      	strb	r2, [r3, #0]
 801a134:	e00e      	b.n	801a154 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801a136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801a13a:	2b0c      	cmp	r3, #12
 801a13c:	d10a      	bne.n	801a154 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 801a13e:	4b08      	ldr	r3, [pc, #32]	; (801a160 <RegionEU868NextChannel+0x154>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801a146:	4b06      	ldr	r3, [pc, #24]	; (801a160 <RegionEU868NextChannel+0x154>)
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	f042 0207 	orr.w	r2, r2, #7
 801a14e:	b292      	uxth	r2, r2
 801a150:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 801a154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801a158:	4618      	mov	r0, r3
 801a15a:	3760      	adds	r7, #96	; 0x60
 801a15c:	46bd      	mov	sp, r7
 801a15e:	bd80      	pop	{r7, pc}
 801a160:	20001ac8 	.word	0x20001ac8
 801a164:	20001acc 	.word	0x20001acc

0801a168 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b084      	sub	sp, #16
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801a170:	2300      	movs	r3, #0
 801a172:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801a174:	2300      	movs	r3, #0
 801a176:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 801a178:	2300      	movs	r3, #0
 801a17a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	791b      	ldrb	r3, [r3, #4]
 801a180:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801a182:	7b7b      	ldrb	r3, [r7, #13]
 801a184:	2b02      	cmp	r3, #2
 801a186:	d801      	bhi.n	801a18c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801a188:	2306      	movs	r3, #6
 801a18a:	e089      	b.n	801a2a0 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801a18c:	7b7b      	ldrb	r3, [r7, #13]
 801a18e:	2b0f      	cmp	r3, #15
 801a190:	d901      	bls.n	801a196 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801a192:	2303      	movs	r3, #3
 801a194:	e084      	b.n	801a2a0 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	7a1b      	ldrb	r3, [r3, #8]
 801a19c:	f343 0303 	sbfx	r3, r3, #0, #4
 801a1a0:	b25b      	sxtb	r3, r3
 801a1a2:	2207      	movs	r2, #7
 801a1a4:	2100      	movs	r1, #0
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	f7fe f99d 	bl	80184e6 <RegionCommonValueInRange>
 801a1ac:	4603      	mov	r3, r0
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d101      	bne.n	801a1b6 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801a1b2:	2301      	movs	r3, #1
 801a1b4:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	7a1b      	ldrb	r3, [r3, #8]
 801a1bc:	f343 1303 	sbfx	r3, r3, #4, #4
 801a1c0:	b25b      	sxtb	r3, r3
 801a1c2:	2207      	movs	r2, #7
 801a1c4:	2100      	movs	r1, #0
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	f7fe f98d 	bl	80184e6 <RegionCommonValueInRange>
 801a1cc:	4603      	mov	r3, r0
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d101      	bne.n	801a1d6 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801a1d2:	2301      	movs	r3, #1
 801a1d4:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	681b      	ldr	r3, [r3, #0]
 801a1da:	7a1b      	ldrb	r3, [r3, #8]
 801a1dc:	f343 0303 	sbfx	r3, r3, #0, #4
 801a1e0:	b25a      	sxtb	r2, r3
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	7a1b      	ldrb	r3, [r3, #8]
 801a1e8:	f343 1303 	sbfx	r3, r3, #4, #4
 801a1ec:	b25b      	sxtb	r3, r3
 801a1ee:	429a      	cmp	r2, r3
 801a1f0:	dd01      	ble.n	801a1f6 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801a1f2:	2301      	movs	r3, #1
 801a1f4:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 801a1f6:	7bbb      	ldrb	r3, [r7, #14]
 801a1f8:	f083 0301 	eor.w	r3, r3, #1
 801a1fc:	b2db      	uxtb	r3, r3
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d010      	beq.n	801a224 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	f107 020c 	add.w	r2, r7, #12
 801a20c:	4611      	mov	r1, r2
 801a20e:	4618      	mov	r0, r3
 801a210:	f7fe feee 	bl	8018ff0 <VerifyRfFreq>
 801a214:	4603      	mov	r3, r0
 801a216:	f083 0301 	eor.w	r3, r3, #1
 801a21a:	b2db      	uxtb	r3, r3
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d001      	beq.n	801a224 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 801a220:	2301      	movs	r3, #1
 801a222:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801a224:	7bfb      	ldrb	r3, [r7, #15]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d004      	beq.n	801a234 <RegionEU868ChannelAdd+0xcc>
 801a22a:	7bbb      	ldrb	r3, [r7, #14]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d001      	beq.n	801a234 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 801a230:	2306      	movs	r3, #6
 801a232:	e035      	b.n	801a2a0 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801a234:	7bfb      	ldrb	r3, [r7, #15]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d001      	beq.n	801a23e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 801a23a:	2305      	movs	r3, #5
 801a23c:	e030      	b.n	801a2a0 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 801a23e:	7bbb      	ldrb	r3, [r7, #14]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d001      	beq.n	801a248 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801a244:	2304      	movs	r3, #4
 801a246:	e02b      	b.n	801a2a0 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 801a248:	4b17      	ldr	r3, [pc, #92]	; (801a2a8 <RegionEU868ChannelAdd+0x140>)
 801a24a:	6819      	ldr	r1, [r3, #0]
 801a24c:	7b7a      	ldrb	r2, [r7, #13]
 801a24e:	4613      	mov	r3, r2
 801a250:	005b      	lsls	r3, r3, #1
 801a252:	4413      	add	r3, r2
 801a254:	009b      	lsls	r3, r3, #2
 801a256:	18c8      	adds	r0, r1, r3
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	220c      	movs	r2, #12
 801a25e:	4619      	mov	r1, r3
 801a260:	f001 faab 	bl	801b7ba <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801a264:	4b10      	ldr	r3, [pc, #64]	; (801a2a8 <RegionEU868ChannelAdd+0x140>)
 801a266:	6819      	ldr	r1, [r3, #0]
 801a268:	7b7a      	ldrb	r2, [r7, #13]
 801a26a:	7b38      	ldrb	r0, [r7, #12]
 801a26c:	4613      	mov	r3, r2
 801a26e:	005b      	lsls	r3, r3, #1
 801a270:	4413      	add	r3, r2
 801a272:	009b      	lsls	r3, r3, #2
 801a274:	440b      	add	r3, r1
 801a276:	3309      	adds	r3, #9
 801a278:	4602      	mov	r2, r0
 801a27a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801a27c:	4b0a      	ldr	r3, [pc, #40]	; (801a2a8 <RegionEU868ChannelAdd+0x140>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 801a284:	b21a      	sxth	r2, r3
 801a286:	7b7b      	ldrb	r3, [r7, #13]
 801a288:	2101      	movs	r1, #1
 801a28a:	fa01 f303 	lsl.w	r3, r1, r3
 801a28e:	b21b      	sxth	r3, r3
 801a290:	4313      	orrs	r3, r2
 801a292:	b21a      	sxth	r2, r3
 801a294:	4b04      	ldr	r3, [pc, #16]	; (801a2a8 <RegionEU868ChannelAdd+0x140>)
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	b292      	uxth	r2, r2
 801a29a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801a29e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	3710      	adds	r7, #16
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	20001ac8 	.word	0x20001ac8

0801a2ac <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801a2ac:	b580      	push	{r7, lr}
 801a2ae:	b086      	sub	sp, #24
 801a2b0:	af00      	add	r7, sp, #0
 801a2b2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	781b      	ldrb	r3, [r3, #0]
 801a2b8:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801a2ba:	7dfb      	ldrb	r3, [r7, #23]
 801a2bc:	2b02      	cmp	r3, #2
 801a2be:	d801      	bhi.n	801a2c4 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	e016      	b.n	801a2f2 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 801a2c4:	4b0d      	ldr	r3, [pc, #52]	; (801a2fc <RegionEU868ChannelsRemove+0x50>)
 801a2c6:	6819      	ldr	r1, [r3, #0]
 801a2c8:	7dfa      	ldrb	r2, [r7, #23]
 801a2ca:	4613      	mov	r3, r2
 801a2cc:	005b      	lsls	r3, r3, #1
 801a2ce:	4413      	add	r3, r2
 801a2d0:	009b      	lsls	r3, r3, #2
 801a2d2:	440b      	add	r3, r1
 801a2d4:	461a      	mov	r2, r3
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	6013      	str	r3, [r2, #0]
 801a2da:	6053      	str	r3, [r2, #4]
 801a2dc:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801a2de:	4b07      	ldr	r3, [pc, #28]	; (801a2fc <RegionEU868ChannelsRemove+0x50>)
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a2e6:	7df9      	ldrb	r1, [r7, #23]
 801a2e8:	2210      	movs	r2, #16
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	f7fe f918 	bl	8018520 <RegionCommonChanDisable>
 801a2f0:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801a2f2:	4618      	mov	r0, r3
 801a2f4:	3718      	adds	r7, #24
 801a2f6:	46bd      	mov	sp, r7
 801a2f8:	bd80      	pop	{r7, pc}
 801a2fa:	bf00      	nop
 801a2fc:	20001ac8 	.word	0x20001ac8

0801a300 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801a300:	b480      	push	{r7}
 801a302:	b085      	sub	sp, #20
 801a304:	af00      	add	r7, sp, #0
 801a306:	4603      	mov	r3, r0
 801a308:	71fb      	strb	r3, [r7, #7]
 801a30a:	460b      	mov	r3, r1
 801a30c:	71bb      	strb	r3, [r7, #6]
 801a30e:	4613      	mov	r3, r2
 801a310:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801a312:	79ba      	ldrb	r2, [r7, #6]
 801a314:	797b      	ldrb	r3, [r7, #5]
 801a316:	1ad3      	subs	r3, r2, r3
 801a318:	b2db      	uxtb	r3, r3
 801a31a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801a31c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a320:	2b00      	cmp	r3, #0
 801a322:	da01      	bge.n	801a328 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801a324:	2300      	movs	r3, #0
 801a326:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801a328:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801a32a:	4618      	mov	r0, r3
 801a32c:	3714      	adds	r7, #20
 801a32e:	46bd      	mov	sp, r7
 801a330:	bc80      	pop	{r7}
 801a332:	4770      	bx	lr

0801a334 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b084      	sub	sp, #16
 801a338:	af00      	add	r7, sp, #0
 801a33a:	603b      	str	r3, [r7, #0]
 801a33c:	4603      	mov	r3, r0
 801a33e:	71fb      	strb	r3, [r7, #7]
 801a340:	460b      	mov	r3, r1
 801a342:	71bb      	strb	r3, [r7, #6]
 801a344:	4613      	mov	r3, r2
 801a346:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801a348:	79fb      	ldrb	r3, [r7, #7]
 801a34a:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801a34c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a354:	4611      	mov	r1, r2
 801a356:	4618      	mov	r0, r3
 801a358:	f7fe fdcd 	bl	8018ef6 <RegionCommonLimitTxPower>
 801a35c:	4603      	mov	r3, r0
 801a35e:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801a360:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a364:	2b04      	cmp	r3, #4
 801a366:	d106      	bne.n	801a376 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801a368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a36c:	2b02      	cmp	r3, #2
 801a36e:	bfb8      	it	lt
 801a370:	2302      	movlt	r3, #2
 801a372:	73fb      	strb	r3, [r7, #15]
 801a374:	e00d      	b.n	801a392 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a376:	2204      	movs	r2, #4
 801a378:	2100      	movs	r1, #0
 801a37a:	6838      	ldr	r0, [r7, #0]
 801a37c:	f7fe f904 	bl	8018588 <RegionCommonCountChannels>
 801a380:	4603      	mov	r3, r0
 801a382:	2b31      	cmp	r3, #49	; 0x31
 801a384:	d805      	bhi.n	801a392 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a38a:	2b05      	cmp	r3, #5
 801a38c:	bfb8      	it	lt
 801a38e:	2305      	movlt	r3, #5
 801a390:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a396:	4618      	mov	r0, r3
 801a398:	3710      	adds	r7, #16
 801a39a:	46bd      	mov	sp, r7
 801a39c:	bd80      	pop	{r7, pc}
	...

0801a3a0 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b082      	sub	sp, #8
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a3a8:	4b18      	ldr	r3, [pc, #96]	; (801a40c <VerifyRfFreq+0x6c>)
 801a3aa:	6a1b      	ldr	r3, [r3, #32]
 801a3ac:	6878      	ldr	r0, [r7, #4]
 801a3ae:	4798      	blx	r3
 801a3b0:	4603      	mov	r3, r0
 801a3b2:	f083 0301 	eor.w	r3, r3, #1
 801a3b6:	b2db      	uxtb	r3, r3
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d001      	beq.n	801a3c0 <VerifyRfFreq+0x20>
    {
        return false;
 801a3bc:	2300      	movs	r3, #0
 801a3be:	e021      	b.n	801a404 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	4a13      	ldr	r2, [pc, #76]	; (801a410 <VerifyRfFreq+0x70>)
 801a3c4:	4293      	cmp	r3, r2
 801a3c6:	d910      	bls.n	801a3ea <VerifyRfFreq+0x4a>
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	4a12      	ldr	r2, [pc, #72]	; (801a414 <VerifyRfFreq+0x74>)
 801a3cc:	4293      	cmp	r3, r2
 801a3ce:	d80c      	bhi.n	801a3ea <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a3d0:	687a      	ldr	r2, [r7, #4]
 801a3d2:	4b11      	ldr	r3, [pc, #68]	; (801a418 <VerifyRfFreq+0x78>)
 801a3d4:	4413      	add	r3, r2
 801a3d6:	4a11      	ldr	r2, [pc, #68]	; (801a41c <VerifyRfFreq+0x7c>)
 801a3d8:	fba2 1203 	umull	r1, r2, r2, r3
 801a3dc:	0c92      	lsrs	r2, r2, #18
 801a3de:	4910      	ldr	r1, [pc, #64]	; (801a420 <VerifyRfFreq+0x80>)
 801a3e0:	fb01 f202 	mul.w	r2, r1, r2
 801a3e4:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a3e6:	2a00      	cmp	r2, #0
 801a3e8:	d001      	beq.n	801a3ee <VerifyRfFreq+0x4e>
    {
        return false;
 801a3ea:	2300      	movs	r3, #0
 801a3ec:	e00a      	b.n	801a404 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	4a0c      	ldr	r2, [pc, #48]	; (801a424 <VerifyRfFreq+0x84>)
 801a3f2:	4293      	cmp	r3, r2
 801a3f4:	d903      	bls.n	801a3fe <VerifyRfFreq+0x5e>
 801a3f6:	687b      	ldr	r3, [r7, #4]
 801a3f8:	4a06      	ldr	r2, [pc, #24]	; (801a414 <VerifyRfFreq+0x74>)
 801a3fa:	4293      	cmp	r3, r2
 801a3fc:	d901      	bls.n	801a402 <VerifyRfFreq+0x62>
    {
        return false;
 801a3fe:	2300      	movs	r3, #0
 801a400:	e000      	b.n	801a404 <VerifyRfFreq+0x64>
    }
    return true;
 801a402:	2301      	movs	r3, #1
}
 801a404:	4618      	mov	r0, r3
 801a406:	3708      	adds	r7, #8
 801a408:	46bd      	mov	sp, r7
 801a40a:	bd80      	pop	{r7, pc}
 801a40c:	08021fb4 	.word	0x08021fb4
 801a410:	3708709f 	.word	0x3708709f
 801a414:	374886e0 	.word	0x374886e0
 801a418:	c8f78f60 	.word	0xc8f78f60
 801a41c:	6fd91d85 	.word	0x6fd91d85
 801a420:	000927c0 	.word	0x000927c0
 801a424:	35c8015f 	.word	0x35c8015f

0801a428 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a428:	b590      	push	{r4, r7, lr}
 801a42a:	b089      	sub	sp, #36	; 0x24
 801a42c:	af04      	add	r7, sp, #16
 801a42e:	4603      	mov	r3, r0
 801a430:	460a      	mov	r2, r1
 801a432:	71fb      	strb	r3, [r7, #7]
 801a434:	4613      	mov	r3, r2
 801a436:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a43c:	4a0f      	ldr	r2, [pc, #60]	; (801a47c <GetTimeOnAir+0x54>)
 801a43e:	5cd3      	ldrb	r3, [r2, r3]
 801a440:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a446:	490e      	ldr	r1, [pc, #56]	; (801a480 <GetTimeOnAir+0x58>)
 801a448:	4618      	mov	r0, r3
 801a44a:	f7fe fd69 	bl	8018f20 <RegionCommonGetBandwidth>
 801a44e:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a450:	4b0c      	ldr	r3, [pc, #48]	; (801a484 <GetTimeOnAir+0x5c>)
 801a452:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a454:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a458:	88bb      	ldrh	r3, [r7, #4]
 801a45a:	b2db      	uxtb	r3, r3
 801a45c:	2101      	movs	r1, #1
 801a45e:	9103      	str	r1, [sp, #12]
 801a460:	9302      	str	r3, [sp, #8]
 801a462:	2300      	movs	r3, #0
 801a464:	9301      	str	r3, [sp, #4]
 801a466:	2308      	movs	r3, #8
 801a468:	9300      	str	r3, [sp, #0]
 801a46a:	2301      	movs	r3, #1
 801a46c:	68b9      	ldr	r1, [r7, #8]
 801a46e:	2001      	movs	r0, #1
 801a470:	47a0      	blx	r4
 801a472:	4603      	mov	r3, r0
}
 801a474:	4618      	mov	r0, r3
 801a476:	3714      	adds	r7, #20
 801a478:	46bd      	mov	sp, r7
 801a47a:	bd90      	pop	{r4, r7, pc}
 801a47c:	08021f30 	.word	0x08021f30
 801a480:	08021f40 	.word	0x08021f40
 801a484:	08021fb4 	.word	0x08021fb4

0801a488 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b088      	sub	sp, #32
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a490:	2300      	movs	r3, #0
 801a492:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	781b      	ldrb	r3, [r3, #0]
 801a498:	3b01      	subs	r3, #1
 801a49a:	2b37      	cmp	r3, #55	; 0x37
 801a49c:	f200 8136 	bhi.w	801a70c <RegionUS915GetPhyParam+0x284>
 801a4a0:	a201      	add	r2, pc, #4	; (adr r2, 801a4a8 <RegionUS915GetPhyParam+0x20>)
 801a4a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4a6:	bf00      	nop
 801a4a8:	0801a589 	.word	0x0801a589
 801a4ac:	0801a58f 	.word	0x0801a58f
 801a4b0:	0801a70d 	.word	0x0801a70d
 801a4b4:	0801a70d 	.word	0x0801a70d
 801a4b8:	0801a70d 	.word	0x0801a70d
 801a4bc:	0801a595 	.word	0x0801a595
 801a4c0:	0801a70d 	.word	0x0801a70d
 801a4c4:	0801a5cf 	.word	0x0801a5cf
 801a4c8:	0801a70d 	.word	0x0801a70d
 801a4cc:	0801a5d5 	.word	0x0801a5d5
 801a4d0:	0801a5db 	.word	0x0801a5db
 801a4d4:	0801a5e1 	.word	0x0801a5e1
 801a4d8:	0801a5e7 	.word	0x0801a5e7
 801a4dc:	0801a5f7 	.word	0x0801a5f7
 801a4e0:	0801a607 	.word	0x0801a607
 801a4e4:	0801a60d 	.word	0x0801a60d
 801a4e8:	0801a615 	.word	0x0801a615
 801a4ec:	0801a61d 	.word	0x0801a61d
 801a4f0:	0801a625 	.word	0x0801a625
 801a4f4:	0801a62d 	.word	0x0801a62d
 801a4f8:	0801a635 	.word	0x0801a635
 801a4fc:	0801a649 	.word	0x0801a649
 801a500:	0801a64f 	.word	0x0801a64f
 801a504:	0801a655 	.word	0x0801a655
 801a508:	0801a65b 	.word	0x0801a65b
 801a50c:	0801a667 	.word	0x0801a667
 801a510:	0801a673 	.word	0x0801a673
 801a514:	0801a679 	.word	0x0801a679
 801a518:	0801a681 	.word	0x0801a681
 801a51c:	0801a687 	.word	0x0801a687
 801a520:	0801a68d 	.word	0x0801a68d
 801a524:	0801a693 	.word	0x0801a693
 801a528:	0801a59b 	.word	0x0801a59b
 801a52c:	0801a70d 	.word	0x0801a70d
 801a530:	0801a70d 	.word	0x0801a70d
 801a534:	0801a70d 	.word	0x0801a70d
 801a538:	0801a70d 	.word	0x0801a70d
 801a53c:	0801a70d 	.word	0x0801a70d
 801a540:	0801a70d 	.word	0x0801a70d
 801a544:	0801a70d 	.word	0x0801a70d
 801a548:	0801a70d 	.word	0x0801a70d
 801a54c:	0801a70d 	.word	0x0801a70d
 801a550:	0801a70d 	.word	0x0801a70d
 801a554:	0801a70d 	.word	0x0801a70d
 801a558:	0801a70d 	.word	0x0801a70d
 801a55c:	0801a70d 	.word	0x0801a70d
 801a560:	0801a69b 	.word	0x0801a69b
 801a564:	0801a6af 	.word	0x0801a6af
 801a568:	0801a6bd 	.word	0x0801a6bd
 801a56c:	0801a6c3 	.word	0x0801a6c3
 801a570:	0801a70d 	.word	0x0801a70d
 801a574:	0801a6c9 	.word	0x0801a6c9
 801a578:	0801a6dd 	.word	0x0801a6dd
 801a57c:	0801a6e3 	.word	0x0801a6e3
 801a580:	0801a6e9 	.word	0x0801a6e9
 801a584:	0801a6f9 	.word	0x0801a6f9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a588:	2308      	movs	r3, #8
 801a58a:	61bb      	str	r3, [r7, #24]
            break;
 801a58c:	e0bf      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a58e:	2300      	movs	r3, #0
 801a590:	61bb      	str	r3, [r7, #24]
            break;
 801a592:	e0bc      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a594:	2300      	movs	r3, #0
 801a596:	61bb      	str	r3, [r7, #24]
            break;
 801a598:	e0b9      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a5a0:	733b      	strb	r3, [r7, #12]
 801a5a2:	2304      	movs	r3, #4
 801a5a4:	737b      	strb	r3, [r7, #13]
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	73bb      	strb	r3, [r7, #14]
 801a5aa:	2348      	movs	r3, #72	; 0x48
 801a5ac:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a5ae:	4b5b      	ldr	r3, [pc, #364]	; (801a71c <RegionUS915GetPhyParam+0x294>)
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a5b6:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a5b8:	4b58      	ldr	r3, [pc, #352]	; (801a71c <RegionUS915GetPhyParam+0x294>)
 801a5ba:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a5bc:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a5be:	f107 030c 	add.w	r3, r7, #12
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	f7fe fc59 	bl	8018e7a <RegionCommonGetNextLowerTxDr>
 801a5c8:	4603      	mov	r3, r0
 801a5ca:	61bb      	str	r3, [r7, #24]
            break;
 801a5cc:	e09f      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a5ce:	2300      	movs	r3, #0
 801a5d0:	61bb      	str	r3, [r7, #24]
            break;
 801a5d2:	e09c      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	61bb      	str	r3, [r7, #24]
            break;
 801a5d8:	e099      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a5da:	2340      	movs	r3, #64	; 0x40
 801a5dc:	61bb      	str	r3, [r7, #24]
            break;
 801a5de:	e096      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a5e0:	2320      	movs	r3, #32
 801a5e2:	61bb      	str	r3, [r7, #24]
            break;
 801a5e4:	e093      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a5ec:	461a      	mov	r2, r3
 801a5ee:	4b4c      	ldr	r3, [pc, #304]	; (801a720 <RegionUS915GetPhyParam+0x298>)
 801a5f0:	5c9b      	ldrb	r3, [r3, r2]
 801a5f2:	61bb      	str	r3, [r7, #24]
            break;
 801a5f4:	e08b      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a5fc:	461a      	mov	r2, r3
 801a5fe:	4b49      	ldr	r3, [pc, #292]	; (801a724 <RegionUS915GetPhyParam+0x29c>)
 801a600:	5c9b      	ldrb	r3, [r3, r2]
 801a602:	61bb      	str	r3, [r7, #24]
            break;
 801a604:	e083      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a606:	2300      	movs	r3, #0
 801a608:	61bb      	str	r3, [r7, #24]
            break;
 801a60a:	e080      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a60c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a610:	61bb      	str	r3, [r7, #24]
            break;
 801a612:	e07c      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a618:	61bb      	str	r3, [r7, #24]
            break;
 801a61a:	e078      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a61c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a620:	61bb      	str	r3, [r7, #24]
            break;
 801a622:	e074      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a624:	f241 3388 	movw	r3, #5000	; 0x1388
 801a628:	61bb      	str	r3, [r7, #24]
            break;
 801a62a:	e070      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a62c:	f241 7370 	movw	r3, #6000	; 0x1770
 801a630:	61bb      	str	r3, [r7, #24]
            break;
 801a632:	e06c      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801a634:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a638:	483b      	ldr	r0, [pc, #236]	; (801a728 <RegionUS915GetPhyParam+0x2a0>)
 801a63a:	f001 f8a7 	bl	801b78c <randr>
 801a63e:	4603      	mov	r3, r0
 801a640:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a644:	61bb      	str	r3, [r7, #24]
            break;
 801a646:	e062      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a648:	2300      	movs	r3, #0
 801a64a:	61bb      	str	r3, [r7, #24]
            break;
 801a64c:	e05f      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a64e:	4b37      	ldr	r3, [pc, #220]	; (801a72c <RegionUS915GetPhyParam+0x2a4>)
 801a650:	61bb      	str	r3, [r7, #24]
            break;
 801a652:	e05c      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a654:	2308      	movs	r3, #8
 801a656:	61bb      	str	r3, [r7, #24]
            break;
 801a658:	e059      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a65a:	4b30      	ldr	r3, [pc, #192]	; (801a71c <RegionUS915GetPhyParam+0x294>)
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a662:	61bb      	str	r3, [r7, #24]
            break;
 801a664:	e053      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a666:	4b2d      	ldr	r3, [pc, #180]	; (801a71c <RegionUS915GetPhyParam+0x294>)
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a66e:	61bb      	str	r3, [r7, #24]
            break;
 801a670:	e04d      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a672:	2348      	movs	r3, #72	; 0x48
 801a674:	61bb      	str	r3, [r7, #24]
            break;
 801a676:	e04a      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a678:	4b28      	ldr	r3, [pc, #160]	; (801a71c <RegionUS915GetPhyParam+0x294>)
 801a67a:	681b      	ldr	r3, [r3, #0]
 801a67c:	61bb      	str	r3, [r7, #24]
            break;
 801a67e:	e046      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a680:	2300      	movs	r3, #0
 801a682:	61bb      	str	r3, [r7, #24]
            break;
 801a684:	e043      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a686:	2300      	movs	r3, #0
 801a688:	61bb      	str	r3, [r7, #24]
            break;
 801a68a:	e040      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a68c:	4b28      	ldr	r3, [pc, #160]	; (801a730 <RegionUS915GetPhyParam+0x2a8>)
 801a68e:	61bb      	str	r3, [r7, #24]
            break;
 801a690:	e03d      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a692:	f04f 0300 	mov.w	r3, #0
 801a696:	61bb      	str	r3, [r7, #24]
            break;
 801a698:	e039      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	791b      	ldrb	r3, [r3, #4]
 801a69e:	4a25      	ldr	r2, [pc, #148]	; (801a734 <RegionUS915GetPhyParam+0x2ac>)
 801a6a0:	4922      	ldr	r1, [pc, #136]	; (801a72c <RegionUS915GetPhyParam+0x2a4>)
 801a6a2:	4618      	mov	r0, r3
 801a6a4:	f7fd fd4b 	bl	801813e <RegionBaseUSCalcDownlinkFrequency>
 801a6a8:	4603      	mov	r3, r0
 801a6aa:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a6ac:	e02f      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a6ae:	2317      	movs	r3, #23
 801a6b0:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a6b2:	2304      	movs	r3, #4
 801a6b4:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a6b6:	2303      	movs	r3, #3
 801a6b8:	76bb      	strb	r3, [r7, #26]
            break;
 801a6ba:	e028      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a6bc:	2308      	movs	r3, #8
 801a6be:	61bb      	str	r3, [r7, #24]
            break;
 801a6c0:	e025      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a6c2:	2308      	movs	r3, #8
 801a6c4:	61bb      	str	r3, [r7, #24]
            break;
 801a6c6:	e022      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	791b      	ldrb	r3, [r3, #4]
 801a6cc:	4a19      	ldr	r2, [pc, #100]	; (801a734 <RegionUS915GetPhyParam+0x2ac>)
 801a6ce:	4917      	ldr	r1, [pc, #92]	; (801a72c <RegionUS915GetPhyParam+0x2a4>)
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	f7fd fd34 	bl	801813e <RegionBaseUSCalcDownlinkFrequency>
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a6da:	e018      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a6dc:	2308      	movs	r3, #8
 801a6de:	61bb      	str	r3, [r7, #24]
            break;
 801a6e0:	e015      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a6e2:	2308      	movs	r3, #8
 801a6e4:	61bb      	str	r3, [r7, #24]
            break;
 801a6e6:	e012      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a6ee:	461a      	mov	r2, r3
 801a6f0:	4b11      	ldr	r3, [pc, #68]	; (801a738 <RegionUS915GetPhyParam+0x2b0>)
 801a6f2:	5c9b      	ldrb	r3, [r3, r2]
 801a6f4:	61bb      	str	r3, [r7, #24]
            break;
 801a6f6:	e00a      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a6fe:	490f      	ldr	r1, [pc, #60]	; (801a73c <RegionUS915GetPhyParam+0x2b4>)
 801a700:	4618      	mov	r0, r3
 801a702:	f7fe fc0d 	bl	8018f20 <RegionCommonGetBandwidth>
 801a706:	4603      	mov	r3, r0
 801a708:	61bb      	str	r3, [r7, #24]
            break;
 801a70a:	e000      	b.n	801a70e <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801a70c:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a70e:	69bb      	ldr	r3, [r7, #24]
 801a710:	61fb      	str	r3, [r7, #28]
 801a712:	69fb      	ldr	r3, [r7, #28]
}
 801a714:	4618      	mov	r0, r3
 801a716:	3720      	adds	r7, #32
 801a718:	46bd      	mov	sp, r7
 801a71a:	bd80      	pop	{r7, pc}
 801a71c:	20001ad4 	.word	0x20001ad4
 801a720:	08021f94 	.word	0x08021f94
 801a724:	08021fa4 	.word	0x08021fa4
 801a728:	fffffc18 	.word	0xfffffc18
 801a72c:	370870a0 	.word	0x370870a0
 801a730:	4200999a 	.word	0x4200999a
 801a734:	000927c0 	.word	0x000927c0
 801a738:	08021f30 	.word	0x08021f30
 801a73c:	08021f40 	.word	0x08021f40

0801a740 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a740:	b590      	push	{r4, r7, lr}
 801a742:	b085      	sub	sp, #20
 801a744:	af02      	add	r7, sp, #8
 801a746:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a748:	4b11      	ldr	r3, [pc, #68]	; (801a790 <RegionUS915SetBandTxDone+0x50>)
 801a74a:	681a      	ldr	r2, [r3, #0]
 801a74c:	4b11      	ldr	r3, [pc, #68]	; (801a794 <RegionUS915SetBandTxDone+0x54>)
 801a74e:	6819      	ldr	r1, [r3, #0]
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	781b      	ldrb	r3, [r3, #0]
 801a754:	4618      	mov	r0, r3
 801a756:	4603      	mov	r3, r0
 801a758:	005b      	lsls	r3, r3, #1
 801a75a:	4403      	add	r3, r0
 801a75c:	009b      	lsls	r3, r3, #2
 801a75e:	440b      	add	r3, r1
 801a760:	3309      	adds	r3, #9
 801a762:	781b      	ldrb	r3, [r3, #0]
 801a764:	4619      	mov	r1, r3
 801a766:	460b      	mov	r3, r1
 801a768:	005b      	lsls	r3, r3, #1
 801a76a:	440b      	add	r3, r1
 801a76c:	00db      	lsls	r3, r3, #3
 801a76e:	18d0      	adds	r0, r2, r3
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	6899      	ldr	r1, [r3, #8]
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	785c      	ldrb	r4, [r3, #1]
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	691a      	ldr	r2, [r3, #16]
 801a77c:	9200      	str	r2, [sp, #0]
 801a77e:	68db      	ldr	r3, [r3, #12]
 801a780:	4622      	mov	r2, r4
 801a782:	f7fd ff53 	bl	801862c <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801a786:	bf00      	nop
 801a788:	370c      	adds	r7, #12
 801a78a:	46bd      	mov	sp, r7
 801a78c:	bd90      	pop	{r4, r7, pc}
 801a78e:	bf00      	nop
 801a790:	20001ad8 	.word	0x20001ad8
 801a794:	20001ad4 	.word	0x20001ad4

0801a798 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b08a      	sub	sp, #40	; 0x28
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a7a0:	2301      	movs	r3, #1
 801a7a2:	81bb      	strh	r3, [r7, #12]
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	73bb      	strb	r3, [r7, #14]
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	613b      	str	r3, [r7, #16]
 801a7ac:	2300      	movs	r3, #0
 801a7ae:	617b      	str	r3, [r7, #20]
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	61bb      	str	r3, [r7, #24]
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	61fb      	str	r3, [r7, #28]
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	7b1b      	ldrb	r3, [r3, #12]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d007      	beq.n	801a7d6 <RegionUS915InitDefaults+0x3e>
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	f2c0 8104 	blt.w	801a9d4 <RegionUS915InitDefaults+0x23c>
 801a7cc:	3b01      	subs	r3, #1
 801a7ce:	2b01      	cmp	r3, #1
 801a7d0:	f200 8100 	bhi.w	801a9d4 <RegionUS915InitDefaults+0x23c>
 801a7d4:	e0ce      	b.n	801a974 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	2b00      	cmp	r3, #0
 801a7dc:	f000 80fc 	beq.w	801a9d8 <RegionUS915InitDefaults+0x240>
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	685b      	ldr	r3, [r3, #4]
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	f000 80f7 	beq.w	801a9d8 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	4a7c      	ldr	r2, [pc, #496]	; (801a9e0 <RegionUS915InitDefaults+0x248>)
 801a7f0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	685b      	ldr	r3, [r3, #4]
 801a7f6:	4a7b      	ldr	r2, [pc, #492]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a7f8:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	689b      	ldr	r3, [r3, #8]
 801a7fe:	4a7a      	ldr	r2, [pc, #488]	; (801a9e8 <RegionUS915InitDefaults+0x250>)
 801a800:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a802:	4b77      	ldr	r3, [pc, #476]	; (801a9e0 <RegionUS915InitDefaults+0x248>)
 801a804:	681b      	ldr	r3, [r3, #0]
 801a806:	2200      	movs	r2, #0
 801a808:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a80a:	4b75      	ldr	r3, [pc, #468]	; (801a9e0 <RegionUS915InitDefaults+0x248>)
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	2200      	movs	r2, #0
 801a810:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a812:	4b75      	ldr	r3, [pc, #468]	; (801a9e8 <RegionUS915InitDefaults+0x250>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f107 010c 	add.w	r1, r7, #12
 801a81a:	2218      	movs	r2, #24
 801a81c:	4618      	mov	r0, r3
 801a81e:	f000 ffcc 	bl	801b7ba <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a822:	2300      	movs	r3, #0
 801a824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a828:	e02e      	b.n	801a888 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a82a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a82e:	4a6f      	ldr	r2, [pc, #444]	; (801a9ec <RegionUS915InitDefaults+0x254>)
 801a830:	fb03 f202 	mul.w	r2, r3, r2
 801a834:	4b6e      	ldr	r3, [pc, #440]	; (801a9f0 <RegionUS915InitDefaults+0x258>)
 801a836:	4413      	add	r3, r2
 801a838:	4a6a      	ldr	r2, [pc, #424]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a83a:	6811      	ldr	r1, [r2, #0]
 801a83c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a840:	4618      	mov	r0, r3
 801a842:	4613      	mov	r3, r2
 801a844:	005b      	lsls	r3, r3, #1
 801a846:	4413      	add	r3, r2
 801a848:	009b      	lsls	r3, r3, #2
 801a84a:	440b      	add	r3, r1
 801a84c:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a84e:	4b65      	ldr	r3, [pc, #404]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a850:	6819      	ldr	r1, [r3, #0]
 801a852:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a856:	4613      	mov	r3, r2
 801a858:	005b      	lsls	r3, r3, #1
 801a85a:	4413      	add	r3, r2
 801a85c:	009b      	lsls	r3, r3, #2
 801a85e:	440b      	add	r3, r1
 801a860:	3308      	adds	r3, #8
 801a862:	2230      	movs	r2, #48	; 0x30
 801a864:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a866:	4b5f      	ldr	r3, [pc, #380]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a868:	6819      	ldr	r1, [r3, #0]
 801a86a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a86e:	4613      	mov	r3, r2
 801a870:	005b      	lsls	r3, r3, #1
 801a872:	4413      	add	r3, r2
 801a874:	009b      	lsls	r3, r3, #2
 801a876:	440b      	add	r3, r1
 801a878:	3309      	adds	r3, #9
 801a87a:	2200      	movs	r2, #0
 801a87c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a882:	3301      	adds	r3, #1
 801a884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a88c:	2b3f      	cmp	r3, #63	; 0x3f
 801a88e:	d9cc      	bls.n	801a82a <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a890:	2340      	movs	r3, #64	; 0x40
 801a892:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a896:	e02f      	b.n	801a8f8 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801a898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a89c:	3b40      	subs	r3, #64	; 0x40
 801a89e:	4a55      	ldr	r2, [pc, #340]	; (801a9f4 <RegionUS915InitDefaults+0x25c>)
 801a8a0:	fb03 f202 	mul.w	r2, r3, r2
 801a8a4:	4b54      	ldr	r3, [pc, #336]	; (801a9f8 <RegionUS915InitDefaults+0x260>)
 801a8a6:	4413      	add	r3, r2
 801a8a8:	4a4e      	ldr	r2, [pc, #312]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a8aa:	6811      	ldr	r1, [r2, #0]
 801a8ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	4613      	mov	r3, r2
 801a8b4:	005b      	lsls	r3, r3, #1
 801a8b6:	4413      	add	r3, r2
 801a8b8:	009b      	lsls	r3, r3, #2
 801a8ba:	440b      	add	r3, r1
 801a8bc:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801a8be:	4b49      	ldr	r3, [pc, #292]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a8c0:	6819      	ldr	r1, [r3, #0]
 801a8c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a8c6:	4613      	mov	r3, r2
 801a8c8:	005b      	lsls	r3, r3, #1
 801a8ca:	4413      	add	r3, r2
 801a8cc:	009b      	lsls	r3, r3, #2
 801a8ce:	440b      	add	r3, r1
 801a8d0:	3308      	adds	r3, #8
 801a8d2:	2244      	movs	r2, #68	; 0x44
 801a8d4:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a8d6:	4b43      	ldr	r3, [pc, #268]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a8d8:	6819      	ldr	r1, [r3, #0]
 801a8da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a8de:	4613      	mov	r3, r2
 801a8e0:	005b      	lsls	r3, r3, #1
 801a8e2:	4413      	add	r3, r2
 801a8e4:	009b      	lsls	r3, r3, #2
 801a8e6:	440b      	add	r3, r1
 801a8e8:	3309      	adds	r3, #9
 801a8ea:	2200      	movs	r2, #0
 801a8ec:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a8ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a8f2:	3301      	adds	r3, #1
 801a8f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a8f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a8fc:	2b47      	cmp	r3, #71	; 0x47
 801a8fe:	d9cb      	bls.n	801a898 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801a900:	4b38      	ldr	r3, [pc, #224]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a908:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801a90c:	4b35      	ldr	r3, [pc, #212]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a914:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801a918:	4b32      	ldr	r3, [pc, #200]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a920:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801a924:	4b2f      	ldr	r3, [pc, #188]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a92c:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801a930:	4b2c      	ldr	r3, [pc, #176]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	22ff      	movs	r2, #255	; 0xff
 801a936:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a93a:	4b2a      	ldr	r3, [pc, #168]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2200      	movs	r2, #0
 801a940:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a944:	4b27      	ldr	r3, [pc, #156]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a94c:	4b25      	ldr	r3, [pc, #148]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a954:	2206      	movs	r2, #6
 801a956:	4619      	mov	r1, r3
 801a958:	f7fd fe42 	bl	80185e0 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801a95c:	4b20      	ldr	r3, [pc, #128]	; (801a9e0 <RegionUS915InitDefaults+0x248>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	4618      	mov	r0, r3
 801a962:	4b20      	ldr	r3, [pc, #128]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a96a:	2206      	movs	r2, #6
 801a96c:	4619      	mov	r1, r3
 801a96e:	f7fd fe37 	bl	80185e0 <RegionCommonChanMaskCopy>
            break;
 801a972:	e032      	b.n	801a9da <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a974:	4b1b      	ldr	r3, [pc, #108]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a97c:	4b19      	ldr	r3, [pc, #100]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a984:	2206      	movs	r2, #6
 801a986:	4619      	mov	r1, r3
 801a988:	f7fd fe2a 	bl	80185e0 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801a98c:	2300      	movs	r3, #0
 801a98e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a992:	e01a      	b.n	801a9ca <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a994:	4b12      	ldr	r3, [pc, #72]	; (801a9e0 <RegionUS915InitDefaults+0x248>)
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a99c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a9a0:	4b10      	ldr	r3, [pc, #64]	; (801a9e4 <RegionUS915InitDefaults+0x24c>)
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a9a8:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a9ac:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a9b0:	4b0b      	ldr	r3, [pc, #44]	; (801a9e0 <RegionUS915InitDefaults+0x248>)
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a9b8:	4001      	ands	r1, r0
 801a9ba:	b289      	uxth	r1, r1
 801a9bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801a9c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a9c4:	3301      	adds	r3, #1
 801a9c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a9ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a9ce:	2b05      	cmp	r3, #5
 801a9d0:	d9e0      	bls.n	801a994 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801a9d2:	e002      	b.n	801a9da <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801a9d4:	bf00      	nop
 801a9d6:	e000      	b.n	801a9da <RegionUS915InitDefaults+0x242>
                return;
 801a9d8:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801a9da:	3728      	adds	r7, #40	; 0x28
 801a9dc:	46bd      	mov	sp, r7
 801a9de:	bd80      	pop	{r7, pc}
 801a9e0:	20001ad0 	.word	0x20001ad0
 801a9e4:	20001ad4 	.word	0x20001ad4
 801a9e8:	20001ad8 	.word	0x20001ad8
 801a9ec:	00030d40 	.word	0x00030d40
 801a9f0:	35c80160 	.word	0x35c80160
 801a9f4:	00186a00 	.word	0x00186a00
 801a9f8:	35d2afc0 	.word	0x35d2afc0

0801a9fc <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b082      	sub	sp, #8
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
 801aa04:	460b      	mov	r3, r1
 801aa06:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801aa08:	78fb      	ldrb	r3, [r7, #3]
 801aa0a:	2b0f      	cmp	r3, #15
 801aa0c:	d867      	bhi.n	801aade <RegionUS915Verify+0xe2>
 801aa0e:	a201      	add	r2, pc, #4	; (adr r2, 801aa14 <RegionUS915Verify+0x18>)
 801aa10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aa14:	0801aa55 	.word	0x0801aa55
 801aa18:	0801aadf 	.word	0x0801aadf
 801aa1c:	0801aadf 	.word	0x0801aadf
 801aa20:	0801aadf 	.word	0x0801aadf
 801aa24:	0801aadf 	.word	0x0801aadf
 801aa28:	0801aa63 	.word	0x0801aa63
 801aa2c:	0801aa81 	.word	0x0801aa81
 801aa30:	0801aa9f 	.word	0x0801aa9f
 801aa34:	0801aadf 	.word	0x0801aadf
 801aa38:	0801aabd 	.word	0x0801aabd
 801aa3c:	0801aabd 	.word	0x0801aabd
 801aa40:	0801aadf 	.word	0x0801aadf
 801aa44:	0801aadf 	.word	0x0801aadf
 801aa48:	0801aadf 	.word	0x0801aadf
 801aa4c:	0801aadf 	.word	0x0801aadf
 801aa50:	0801aadb 	.word	0x0801aadb
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	4618      	mov	r0, r3
 801aa5a:	f7ff fca1 	bl	801a3a0 <VerifyRfFreq>
 801aa5e:	4603      	mov	r3, r0
 801aa60:	e03e      	b.n	801aae0 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	f993 3000 	ldrsb.w	r3, [r3]
 801aa68:	2204      	movs	r2, #4
 801aa6a:	2100      	movs	r1, #0
 801aa6c:	4618      	mov	r0, r3
 801aa6e:	f7fd fd3a 	bl	80184e6 <RegionCommonValueInRange>
 801aa72:	4603      	mov	r3, r0
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	bf14      	ite	ne
 801aa78:	2301      	movne	r3, #1
 801aa7a:	2300      	moveq	r3, #0
 801aa7c:	b2db      	uxtb	r3, r3
 801aa7e:	e02f      	b.n	801aae0 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	f993 3000 	ldrsb.w	r3, [r3]
 801aa86:	2205      	movs	r2, #5
 801aa88:	2100      	movs	r1, #0
 801aa8a:	4618      	mov	r0, r3
 801aa8c:	f7fd fd2b 	bl	80184e6 <RegionCommonValueInRange>
 801aa90:	4603      	mov	r3, r0
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	bf14      	ite	ne
 801aa96:	2301      	movne	r3, #1
 801aa98:	2300      	moveq	r3, #0
 801aa9a:	b2db      	uxtb	r3, r3
 801aa9c:	e020      	b.n	801aae0 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	f993 3000 	ldrsb.w	r3, [r3]
 801aaa4:	220d      	movs	r2, #13
 801aaa6:	2108      	movs	r1, #8
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f7fd fd1c 	bl	80184e6 <RegionCommonValueInRange>
 801aaae:	4603      	mov	r3, r0
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	bf14      	ite	ne
 801aab4:	2301      	movne	r3, #1
 801aab6:	2300      	moveq	r3, #0
 801aab8:	b2db      	uxtb	r3, r3
 801aaba:	e011      	b.n	801aae0 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	f993 3000 	ldrsb.w	r3, [r3]
 801aac2:	220e      	movs	r2, #14
 801aac4:	2100      	movs	r1, #0
 801aac6:	4618      	mov	r0, r3
 801aac8:	f7fd fd0d 	bl	80184e6 <RegionCommonValueInRange>
 801aacc:	4603      	mov	r3, r0
 801aace:	2b00      	cmp	r3, #0
 801aad0:	bf14      	ite	ne
 801aad2:	2301      	movne	r3, #1
 801aad4:	2300      	moveq	r3, #0
 801aad6:	b2db      	uxtb	r3, r3
 801aad8:	e002      	b.n	801aae0 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801aada:	2300      	movs	r3, #0
 801aadc:	e000      	b.n	801aae0 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801aade:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3708      	adds	r7, #8
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}

0801aae8 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801aae8:	b480      	push	{r7}
 801aaea:	b085      	sub	sp, #20
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	7a1b      	ldrb	r3, [r3, #8]
 801aaf4:	2b10      	cmp	r3, #16
 801aaf6:	d160      	bne.n	801abba <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	685b      	ldr	r3, [r3, #4]
 801aafc:	330f      	adds	r3, #15
 801aafe:	781b      	ldrb	r3, [r3, #0]
 801ab00:	2b01      	cmp	r3, #1
 801ab02:	d15c      	bne.n	801abbe <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801ab04:	2300      	movs	r3, #0
 801ab06:	73fb      	strb	r3, [r7, #15]
 801ab08:	2300      	movs	r3, #0
 801ab0a:	73bb      	strb	r3, [r7, #14]
 801ab0c:	e051      	b.n	801abb2 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	685a      	ldr	r2, [r3, #4]
 801ab12:	7bbb      	ldrb	r3, [r7, #14]
 801ab14:	4413      	add	r3, r2
 801ab16:	7819      	ldrb	r1, [r3, #0]
 801ab18:	4b2b      	ldr	r3, [pc, #172]	; (801abc8 <RegionUS915ApplyCFList+0xe0>)
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	7bfa      	ldrb	r2, [r7, #15]
 801ab1e:	b289      	uxth	r1, r1
 801ab20:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801ab28:	4b27      	ldr	r3, [pc, #156]	; (801abc8 <RegionUS915ApplyCFList+0xe0>)
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	7bfa      	ldrb	r2, [r7, #15]
 801ab2e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab32:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	685a      	ldr	r2, [r3, #4]
 801ab3a:	7bbb      	ldrb	r3, [r7, #14]
 801ab3c:	3301      	adds	r3, #1
 801ab3e:	4413      	add	r3, r2
 801ab40:	781b      	ldrb	r3, [r3, #0]
 801ab42:	b29b      	uxth	r3, r3
 801ab44:	021b      	lsls	r3, r3, #8
 801ab46:	b299      	uxth	r1, r3
 801ab48:	4b1f      	ldr	r3, [pc, #124]	; (801abc8 <RegionUS915ApplyCFList+0xe0>)
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	7bfa      	ldrb	r2, [r7, #15]
 801ab4e:	4301      	orrs	r1, r0
 801ab50:	b289      	uxth	r1, r1
 801ab52:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801ab5a:	7bfb      	ldrb	r3, [r7, #15]
 801ab5c:	2b04      	cmp	r3, #4
 801ab5e:	d10f      	bne.n	801ab80 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801ab60:	4b19      	ldr	r3, [pc, #100]	; (801abc8 <RegionUS915ApplyCFList+0xe0>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	7bfa      	ldrb	r2, [r7, #15]
 801ab66:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab6a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ab6e:	4b16      	ldr	r3, [pc, #88]	; (801abc8 <RegionUS915ApplyCFList+0xe0>)
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	7bfa      	ldrb	r2, [r7, #15]
 801ab74:	b2c9      	uxtb	r1, r1
 801ab76:	b289      	uxth	r1, r1
 801ab78:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801ab80:	4b12      	ldr	r3, [pc, #72]	; (801abcc <RegionUS915ApplyCFList+0xe4>)
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	7bfa      	ldrb	r2, [r7, #15]
 801ab86:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ab8a:	4b0f      	ldr	r3, [pc, #60]	; (801abc8 <RegionUS915ApplyCFList+0xe0>)
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	7bfa      	ldrb	r2, [r7, #15]
 801ab90:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ab94:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ab98:	4b0c      	ldr	r3, [pc, #48]	; (801abcc <RegionUS915ApplyCFList+0xe4>)
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	7bfa      	ldrb	r2, [r7, #15]
 801ab9e:	4001      	ands	r1, r0
 801aba0:	b289      	uxth	r1, r1
 801aba2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801aba6:	7bfb      	ldrb	r3, [r7, #15]
 801aba8:	3301      	adds	r3, #1
 801abaa:	73fb      	strb	r3, [r7, #15]
 801abac:	7bbb      	ldrb	r3, [r7, #14]
 801abae:	3302      	adds	r3, #2
 801abb0:	73bb      	strb	r3, [r7, #14]
 801abb2:	7bfb      	ldrb	r3, [r7, #15]
 801abb4:	2b04      	cmp	r3, #4
 801abb6:	d9aa      	bls.n	801ab0e <RegionUS915ApplyCFList+0x26>
 801abb8:	e002      	b.n	801abc0 <RegionUS915ApplyCFList+0xd8>
        return;
 801abba:	bf00      	nop
 801abbc:	e000      	b.n	801abc0 <RegionUS915ApplyCFList+0xd8>
        return;
 801abbe:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801abc0:	3714      	adds	r7, #20
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bc80      	pop	{r7}
 801abc6:	4770      	bx	lr
 801abc8:	20001ad4 	.word	0x20001ad4
 801abcc:	20001ad0 	.word	0x20001ad0

0801abd0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801abd0:	b580      	push	{r7, lr}
 801abd2:	b084      	sub	sp, #16
 801abd4:	af00      	add	r7, sp, #0
 801abd6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	2204      	movs	r2, #4
 801abde:	2100      	movs	r1, #0
 801abe0:	4618      	mov	r0, r3
 801abe2:	f7fd fcd1 	bl	8018588 <RegionCommonCountChannels>
 801abe6:	4603      	mov	r3, r0
 801abe8:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801abea:	7bbb      	ldrb	r3, [r7, #14]
 801abec:	2b01      	cmp	r3, #1
 801abee:	d804      	bhi.n	801abfa <RegionUS915ChanMaskSet+0x2a>
 801abf0:	7bbb      	ldrb	r3, [r7, #14]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d001      	beq.n	801abfa <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801abf6:	2300      	movs	r3, #0
 801abf8:	e04a      	b.n	801ac90 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	791b      	ldrb	r3, [r3, #4]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d002      	beq.n	801ac08 <RegionUS915ChanMaskSet+0x38>
 801ac02:	2b01      	cmp	r3, #1
 801ac04:	d036      	beq.n	801ac74 <RegionUS915ChanMaskSet+0xa4>
 801ac06:	e040      	b.n	801ac8a <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801ac08:	4b23      	ldr	r3, [pc, #140]	; (801ac98 <RegionUS915ChanMaskSet+0xc8>)
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	2206      	movs	r2, #6
 801ac16:	4619      	mov	r1, r3
 801ac18:	f7fd fce2 	bl	80185e0 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801ac1c:	4b1e      	ldr	r3, [pc, #120]	; (801ac98 <RegionUS915ChanMaskSet+0xc8>)
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801ac24:	4b1c      	ldr	r3, [pc, #112]	; (801ac98 <RegionUS915ChanMaskSet+0xc8>)
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	b2d2      	uxtb	r2, r2
 801ac2a:	b292      	uxth	r2, r2
 801ac2c:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801ac30:	4b19      	ldr	r3, [pc, #100]	; (801ac98 <RegionUS915ChanMaskSet+0xc8>)
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	2200      	movs	r2, #0
 801ac36:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	73fb      	strb	r3, [r7, #15]
 801ac3e:	e015      	b.n	801ac6c <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801ac40:	4b16      	ldr	r3, [pc, #88]	; (801ac9c <RegionUS915ChanMaskSet+0xcc>)
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	7bfa      	ldrb	r2, [r7, #15]
 801ac46:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801ac4a:	4b13      	ldr	r3, [pc, #76]	; (801ac98 <RegionUS915ChanMaskSet+0xc8>)
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	7bfa      	ldrb	r2, [r7, #15]
 801ac50:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801ac54:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801ac58:	4b10      	ldr	r3, [pc, #64]	; (801ac9c <RegionUS915ChanMaskSet+0xcc>)
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	7bfa      	ldrb	r2, [r7, #15]
 801ac5e:	4001      	ands	r1, r0
 801ac60:	b289      	uxth	r1, r1
 801ac62:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801ac66:	7bfb      	ldrb	r3, [r7, #15]
 801ac68:	3301      	adds	r3, #1
 801ac6a:	73fb      	strb	r3, [r7, #15]
 801ac6c:	7bfb      	ldrb	r3, [r7, #15]
 801ac6e:	2b05      	cmp	r3, #5
 801ac70:	d9e6      	bls.n	801ac40 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801ac72:	e00c      	b.n	801ac8e <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801ac74:	4b08      	ldr	r3, [pc, #32]	; (801ac98 <RegionUS915ChanMaskSet+0xc8>)
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	2206      	movs	r2, #6
 801ac82:	4619      	mov	r1, r3
 801ac84:	f7fd fcac 	bl	80185e0 <RegionCommonChanMaskCopy>
            break;
 801ac88:	e001      	b.n	801ac8e <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	e000      	b.n	801ac90 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801ac8e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ac90:	4618      	mov	r0, r3
 801ac92:	3710      	adds	r7, #16
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	20001ad4 	.word	0x20001ad4
 801ac9c:	20001ad0 	.word	0x20001ad0

0801aca0 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b088      	sub	sp, #32
 801aca4:	af02      	add	r7, sp, #8
 801aca6:	60ba      	str	r2, [r7, #8]
 801aca8:	607b      	str	r3, [r7, #4]
 801acaa:	4603      	mov	r3, r0
 801acac:	73fb      	strb	r3, [r7, #15]
 801acae:	460b      	mov	r3, r1
 801acb0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801acb2:	2300      	movs	r3, #0
 801acb4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801acb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acba:	2b0d      	cmp	r3, #13
 801acbc:	bfa8      	it	ge
 801acbe:	230d      	movge	r3, #13
 801acc0:	b25a      	sxtb	r2, r3
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801accc:	4916      	ldr	r1, [pc, #88]	; (801ad28 <RegionUS915ComputeRxWindowParameters+0x88>)
 801acce:	4618      	mov	r0, r3
 801acd0:	f7fe f926 	bl	8018f20 <RegionCommonGetBandwidth>
 801acd4:	4603      	mov	r3, r0
 801acd6:	b2da      	uxtb	r2, r3
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ace2:	461a      	mov	r2, r3
 801ace4:	4b11      	ldr	r3, [pc, #68]	; (801ad2c <RegionUS915ComputeRxWindowParameters+0x8c>)
 801ace6:	5c9a      	ldrb	r2, [r3, r2]
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801acee:	4619      	mov	r1, r3
 801acf0:	4b0d      	ldr	r3, [pc, #52]	; (801ad28 <RegionUS915ComputeRxWindowParameters+0x88>)
 801acf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801acf6:	4619      	mov	r1, r3
 801acf8:	4610      	mov	r0, r2
 801acfa:	f7fd fe8f 	bl	8018a1c <RegionCommonComputeSymbolTimeLoRa>
 801acfe:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801ad00:	4b0b      	ldr	r3, [pc, #44]	; (801ad30 <RegionUS915ComputeRxWindowParameters+0x90>)
 801ad02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad04:	4798      	blx	r3
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	3308      	adds	r3, #8
 801ad0a:	687a      	ldr	r2, [r7, #4]
 801ad0c:	320c      	adds	r2, #12
 801ad0e:	7bb9      	ldrb	r1, [r7, #14]
 801ad10:	9201      	str	r2, [sp, #4]
 801ad12:	9300      	str	r3, [sp, #0]
 801ad14:	4603      	mov	r3, r0
 801ad16:	68ba      	ldr	r2, [r7, #8]
 801ad18:	6978      	ldr	r0, [r7, #20]
 801ad1a:	f7fd fea5 	bl	8018a68 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801ad1e:	bf00      	nop
 801ad20:	3718      	adds	r7, #24
 801ad22:	46bd      	mov	sp, r7
 801ad24:	bd80      	pop	{r7, pc}
 801ad26:	bf00      	nop
 801ad28:	08021f40 	.word	0x08021f40
 801ad2c:	08021f30 	.word	0x08021f30
 801ad30:	08021fb4 	.word	0x08021fb4

0801ad34 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801ad34:	b590      	push	{r4, r7, lr}
 801ad36:	b091      	sub	sp, #68	; 0x44
 801ad38:	af0a      	add	r7, sp, #40	; 0x28
 801ad3a:	6078      	str	r0, [r7, #4]
 801ad3c:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	785b      	ldrb	r3, [r3, #1]
 801ad42:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801ad44:	2300      	movs	r3, #0
 801ad46:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801ad48:	2300      	movs	r3, #0
 801ad4a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	685b      	ldr	r3, [r3, #4]
 801ad50:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801ad52:	4b34      	ldr	r3, [pc, #208]	; (801ae24 <RegionUS915RxConfig+0xf0>)
 801ad54:	685b      	ldr	r3, [r3, #4]
 801ad56:	4798      	blx	r3
 801ad58:	4603      	mov	r3, r0
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d001      	beq.n	801ad62 <RegionUS915RxConfig+0x2e>
    {
        return false;
 801ad5e:	2300      	movs	r3, #0
 801ad60:	e05c      	b.n	801ae1c <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	7cdb      	ldrb	r3, [r3, #19]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d109      	bne.n	801ad7e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	781b      	ldrb	r3, [r3, #0]
 801ad6e:	f003 0307 	and.w	r3, r3, #7
 801ad72:	4a2d      	ldr	r2, [pc, #180]	; (801ae28 <RegionUS915RxConfig+0xf4>)
 801ad74:	fb03 f202 	mul.w	r2, r3, r2
 801ad78:	4b2c      	ldr	r3, [pc, #176]	; (801ae2c <RegionUS915RxConfig+0xf8>)
 801ad7a:	4413      	add	r3, r2
 801ad7c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801ad7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad82:	4a2b      	ldr	r2, [pc, #172]	; (801ae30 <RegionUS915RxConfig+0xfc>)
 801ad84:	5cd3      	ldrb	r3, [r2, r3]
 801ad86:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801ad88:	4b26      	ldr	r3, [pc, #152]	; (801ae24 <RegionUS915RxConfig+0xf0>)
 801ad8a:	68db      	ldr	r3, [r3, #12]
 801ad8c:	6938      	ldr	r0, [r7, #16]
 801ad8e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801ad90:	4b24      	ldr	r3, [pc, #144]	; (801ae24 <RegionUS915RxConfig+0xf0>)
 801ad92:	699c      	ldr	r4, [r3, #24]
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	789b      	ldrb	r3, [r3, #2]
 801ad98:	4618      	mov	r0, r3
 801ad9a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	689b      	ldr	r3, [r3, #8]
 801ada2:	b29b      	uxth	r3, r3
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	7c92      	ldrb	r2, [r2, #18]
 801ada8:	9209      	str	r2, [sp, #36]	; 0x24
 801adaa:	2201      	movs	r2, #1
 801adac:	9208      	str	r2, [sp, #32]
 801adae:	2200      	movs	r2, #0
 801adb0:	9207      	str	r2, [sp, #28]
 801adb2:	2200      	movs	r2, #0
 801adb4:	9206      	str	r2, [sp, #24]
 801adb6:	2200      	movs	r2, #0
 801adb8:	9205      	str	r2, [sp, #20]
 801adba:	2200      	movs	r2, #0
 801adbc:	9204      	str	r2, [sp, #16]
 801adbe:	2200      	movs	r2, #0
 801adc0:	9203      	str	r2, [sp, #12]
 801adc2:	9302      	str	r3, [sp, #8]
 801adc4:	2308      	movs	r3, #8
 801adc6:	9301      	str	r3, [sp, #4]
 801adc8:	2300      	movs	r3, #0
 801adca:	9300      	str	r3, [sp, #0]
 801adcc:	2301      	movs	r3, #1
 801adce:	460a      	mov	r2, r1
 801add0:	4601      	mov	r1, r0
 801add2:	2001      	movs	r0, #1
 801add4:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	7c5b      	ldrb	r3, [r3, #17]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d005      	beq.n	801adea <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801adde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ade2:	4a14      	ldr	r2, [pc, #80]	; (801ae34 <RegionUS915RxConfig+0x100>)
 801ade4:	5cd3      	ldrb	r3, [r2, r3]
 801ade6:	75fb      	strb	r3, [r7, #23]
 801ade8:	e004      	b.n	801adf4 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801adea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801adee:	4a12      	ldr	r2, [pc, #72]	; (801ae38 <RegionUS915RxConfig+0x104>)
 801adf0:	5cd3      	ldrb	r3, [r2, r3]
 801adf2:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801adf4:	4b0b      	ldr	r3, [pc, #44]	; (801ae24 <RegionUS915RxConfig+0xf0>)
 801adf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801adf8:	7dfa      	ldrb	r2, [r7, #23]
 801adfa:	320d      	adds	r2, #13
 801adfc:	b2d2      	uxtb	r2, r2
 801adfe:	4611      	mov	r1, r2
 801ae00:	2001      	movs	r0, #1
 801ae02:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	7cdb      	ldrb	r3, [r3, #19]
 801ae08:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801ae0c:	6939      	ldr	r1, [r7, #16]
 801ae0e:	4618      	mov	r0, r3
 801ae10:	f7fe f8a4 	bl	8018f5c <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	7bfa      	ldrb	r2, [r7, #15]
 801ae18:	701a      	strb	r2, [r3, #0]
    return true;
 801ae1a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	371c      	adds	r7, #28
 801ae20:	46bd      	mov	sp, r7
 801ae22:	bd90      	pop	{r4, r7, pc}
 801ae24:	08021fb4 	.word	0x08021fb4
 801ae28:	000927c0 	.word	0x000927c0
 801ae2c:	370870a0 	.word	0x370870a0
 801ae30:	08021f30 	.word	0x08021f30
 801ae34:	08021fa4 	.word	0x08021fa4
 801ae38:	08021f94 	.word	0x08021f94

0801ae3c <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ae3c:	b590      	push	{r4, r7, lr}
 801ae3e:	b093      	sub	sp, #76	; 0x4c
 801ae40:	af0a      	add	r7, sp, #40	; 0x28
 801ae42:	60f8      	str	r0, [r7, #12]
 801ae44:	60b9      	str	r1, [r7, #8]
 801ae46:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ae4e:	461a      	mov	r2, r3
 801ae50:	4b49      	ldr	r3, [pc, #292]	; (801af78 <RegionUS915TxConfig+0x13c>)
 801ae52:	5c9b      	ldrb	r3, [r3, r2]
 801ae54:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801ae5c:	4b47      	ldr	r3, [pc, #284]	; (801af7c <RegionUS915TxConfig+0x140>)
 801ae5e:	681a      	ldr	r2, [r3, #0]
 801ae60:	4b47      	ldr	r3, [pc, #284]	; (801af80 <RegionUS915TxConfig+0x144>)
 801ae62:	6819      	ldr	r1, [r3, #0]
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	781b      	ldrb	r3, [r3, #0]
 801ae68:	461c      	mov	r4, r3
 801ae6a:	4623      	mov	r3, r4
 801ae6c:	005b      	lsls	r3, r3, #1
 801ae6e:	4423      	add	r3, r4
 801ae70:	009b      	lsls	r3, r3, #2
 801ae72:	440b      	add	r3, r1
 801ae74:	3309      	adds	r3, #9
 801ae76:	781b      	ldrb	r3, [r3, #0]
 801ae78:	4619      	mov	r1, r3
 801ae7a:	460b      	mov	r3, r1
 801ae7c:	005b      	lsls	r3, r3, #1
 801ae7e:	440b      	add	r3, r1
 801ae80:	00db      	lsls	r3, r3, #3
 801ae82:	4413      	add	r3, r2
 801ae84:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ae8e:	4b3c      	ldr	r3, [pc, #240]	; (801af80 <RegionUS915TxConfig+0x144>)
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801ae96:	f7ff fa4d 	bl	801a334 <LimitTxPower>
 801ae9a:	4603      	mov	r3, r0
 801ae9c:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801ae9e:	68fb      	ldr	r3, [r7, #12]
 801aea0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801aea4:	4937      	ldr	r1, [pc, #220]	; (801af84 <RegionUS915TxConfig+0x148>)
 801aea6:	4618      	mov	r0, r3
 801aea8:	f7fe f83a 	bl	8018f20 <RegionCommonGetBandwidth>
 801aeac:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801aeae:	2300      	movs	r3, #0
 801aeb0:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801aeb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801aeb6:	f04f 0200 	mov.w	r2, #0
 801aeba:	4933      	ldr	r1, [pc, #204]	; (801af88 <RegionUS915TxConfig+0x14c>)
 801aebc:	4618      	mov	r0, r3
 801aebe:	f7fd fe8b 	bl	8018bd8 <RegionCommonComputeTxPower>
 801aec2:	4603      	mov	r3, r0
 801aec4:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801aec6:	4b31      	ldr	r3, [pc, #196]	; (801af8c <RegionUS915TxConfig+0x150>)
 801aec8:	68da      	ldr	r2, [r3, #12]
 801aeca:	4b2d      	ldr	r3, [pc, #180]	; (801af80 <RegionUS915TxConfig+0x144>)
 801aecc:	6819      	ldr	r1, [r3, #0]
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	781b      	ldrb	r3, [r3, #0]
 801aed2:	4618      	mov	r0, r3
 801aed4:	4603      	mov	r3, r0
 801aed6:	005b      	lsls	r3, r3, #1
 801aed8:	4403      	add	r3, r0
 801aeda:	009b      	lsls	r3, r3, #2
 801aedc:	440b      	add	r3, r1
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	4618      	mov	r0, r3
 801aee2:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801aee4:	4b29      	ldr	r3, [pc, #164]	; (801af8c <RegionUS915TxConfig+0x150>)
 801aee6:	69dc      	ldr	r4, [r3, #28]
 801aee8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801aeec:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801aef0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801aef4:	9208      	str	r2, [sp, #32]
 801aef6:	2200      	movs	r2, #0
 801aef8:	9207      	str	r2, [sp, #28]
 801aefa:	2200      	movs	r2, #0
 801aefc:	9206      	str	r2, [sp, #24]
 801aefe:	2200      	movs	r2, #0
 801af00:	9205      	str	r2, [sp, #20]
 801af02:	2201      	movs	r2, #1
 801af04:	9204      	str	r2, [sp, #16]
 801af06:	2200      	movs	r2, #0
 801af08:	9203      	str	r2, [sp, #12]
 801af0a:	2208      	movs	r2, #8
 801af0c:	9202      	str	r2, [sp, #8]
 801af0e:	2201      	movs	r2, #1
 801af10:	9201      	str	r2, [sp, #4]
 801af12:	9300      	str	r3, [sp, #0]
 801af14:	69bb      	ldr	r3, [r7, #24]
 801af16:	2200      	movs	r2, #0
 801af18:	2001      	movs	r0, #1
 801af1a:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801af1c:	4b18      	ldr	r3, [pc, #96]	; (801af80 <RegionUS915TxConfig+0x144>)
 801af1e:	681a      	ldr	r2, [r3, #0]
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	781b      	ldrb	r3, [r3, #0]
 801af24:	4619      	mov	r1, r3
 801af26:	460b      	mov	r3, r1
 801af28:	005b      	lsls	r3, r3, #1
 801af2a:	440b      	add	r3, r1
 801af2c:	009b      	lsls	r3, r3, #2
 801af2e:	4413      	add	r3, r2
 801af30:	681a      	ldr	r2, [r3, #0]
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801af38:	4619      	mov	r1, r3
 801af3a:	4610      	mov	r0, r2
 801af3c:	f7fe f840 	bl	8018fc0 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801af40:	4b12      	ldr	r3, [pc, #72]	; (801af8c <RegionUS915TxConfig+0x150>)
 801af42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801af44:	68fa      	ldr	r2, [r7, #12]
 801af46:	8992      	ldrh	r2, [r2, #12]
 801af48:	b2d2      	uxtb	r2, r2
 801af4a:	4611      	mov	r1, r2
 801af4c:	2001      	movs	r0, #1
 801af4e:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	899b      	ldrh	r3, [r3, #12]
 801af5a:	4619      	mov	r1, r3
 801af5c:	4610      	mov	r0, r2
 801af5e:	f7ff fa63 	bl	801a428 <GetTimeOnAir>
 801af62:	4602      	mov	r2, r0
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801af68:	68bb      	ldr	r3, [r7, #8]
 801af6a:	7fba      	ldrb	r2, [r7, #30]
 801af6c:	701a      	strb	r2, [r3, #0]
    return true;
 801af6e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801af70:	4618      	mov	r0, r3
 801af72:	3724      	adds	r7, #36	; 0x24
 801af74:	46bd      	mov	sp, r7
 801af76:	bd90      	pop	{r4, r7, pc}
 801af78:	08021f30 	.word	0x08021f30
 801af7c:	20001ad8 	.word	0x20001ad8
 801af80:	20001ad4 	.word	0x20001ad4
 801af84:	08021f40 	.word	0x08021f40
 801af88:	41f00000 	.word	0x41f00000
 801af8c:	08021fb4 	.word	0x08021fb4

0801af90 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801af90:	b590      	push	{r4, r7, lr}
 801af92:	b097      	sub	sp, #92	; 0x5c
 801af94:	af00      	add	r7, sp, #0
 801af96:	60f8      	str	r0, [r7, #12]
 801af98:	60b9      	str	r1, [r7, #8]
 801af9a:	607a      	str	r2, [r7, #4]
 801af9c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801af9e:	2307      	movs	r3, #7
 801afa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801afa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801afa8:	2200      	movs	r2, #0
 801afaa:	601a      	str	r2, [r3, #0]
 801afac:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801afae:	2300      	movs	r3, #0
 801afb0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801afb4:	2300      	movs	r3, #0
 801afb6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801afba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801afbe:	2200      	movs	r2, #0
 801afc0:	601a      	str	r2, [r3, #0]
 801afc2:	605a      	str	r2, [r3, #4]
 801afc4:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801afc6:	4b97      	ldr	r3, [pc, #604]	; (801b224 <RegionUS915LinkAdrReq+0x294>)
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801afce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801afd2:	2206      	movs	r2, #6
 801afd4:	4618      	mov	r0, r3
 801afd6:	f7fd fb03 	bl	80185e0 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801afda:	e11b      	b.n	801b214 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	685a      	ldr	r2, [r3, #4]
 801afe0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801afe4:	4413      	add	r3, r2
 801afe6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801afea:	4611      	mov	r1, r2
 801afec:	4618      	mov	r0, r3
 801afee:	f7fd fc3b 	bl	8018868 <RegionCommonParseLinkAdrReq>
 801aff2:	4603      	mov	r3, r0
 801aff4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801aff8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801affc:	2b00      	cmp	r3, #0
 801affe:	f000 8113 	beq.w	801b228 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801b002:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b006:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801b00a:	4413      	add	r3, r2
 801b00c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801b010:	2307      	movs	r3, #7
 801b012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801b016:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b01a:	2b06      	cmp	r3, #6
 801b01c:	d116      	bne.n	801b04c <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801b01e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b022:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801b026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b02a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801b02e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b032:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801b036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b03a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b03e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b042:	b2db      	uxtb	r3, r3
 801b044:	b29b      	uxth	r3, r3
 801b046:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b04a:	e0e3      	b.n	801b214 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801b04c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b050:	2b07      	cmp	r3, #7
 801b052:	d112      	bne.n	801b07a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801b054:	2300      	movs	r3, #0
 801b056:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801b05a:	2300      	movs	r3, #0
 801b05c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801b060:	2300      	movs	r3, #0
 801b062:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801b066:	2300      	movs	r3, #0
 801b068:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801b06c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b070:	b2db      	uxtb	r3, r3
 801b072:	b29b      	uxth	r3, r3
 801b074:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b078:	e0cc      	b.n	801b214 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801b07a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b07e:	2b05      	cmp	r3, #5
 801b080:	f040 80bf 	bne.w	801b202 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801b084:	2301      	movs	r3, #1
 801b086:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801b08a:	2300      	movs	r3, #0
 801b08c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801b090:	2300      	movs	r3, #0
 801b092:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b096:	e0ae      	b.n	801b1f6 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801b098:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801b09c:	b2da      	uxtb	r2, r3
 801b09e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b0a2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b0a6:	fa01 f303 	lsl.w	r3, r1, r3
 801b0aa:	4013      	ands	r3, r2
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d04d      	beq.n	801b14c <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801b0b0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b0b4:	f003 0301 	and.w	r3, r3, #1
 801b0b8:	b2db      	uxtb	r3, r3
 801b0ba:	2b00      	cmp	r3, #0
 801b0bc:	d120      	bne.n	801b100 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801b0be:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b0c2:	005b      	lsls	r3, r3, #1
 801b0c4:	3358      	adds	r3, #88	; 0x58
 801b0c6:	443b      	add	r3, r7
 801b0c8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b0cc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b0d0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801b0d4:	b292      	uxth	r2, r2
 801b0d6:	005b      	lsls	r3, r3, #1
 801b0d8:	3358      	adds	r3, #88	; 0x58
 801b0da:	443b      	add	r3, r7
 801b0dc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b0e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b0e4:	b21a      	sxth	r2, r3
 801b0e6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b0ea:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b0ee:	fa01 f303 	lsl.w	r3, r1, r3
 801b0f2:	b21b      	sxth	r3, r3
 801b0f4:	4313      	orrs	r3, r2
 801b0f6:	b21b      	sxth	r3, r3
 801b0f8:	b29b      	uxth	r3, r3
 801b0fa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b0fe:	e075      	b.n	801b1ec <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801b100:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b104:	005b      	lsls	r3, r3, #1
 801b106:	3358      	adds	r3, #88	; 0x58
 801b108:	443b      	add	r3, r7
 801b10a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b10e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b112:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801b116:	b292      	uxth	r2, r2
 801b118:	005b      	lsls	r3, r3, #1
 801b11a:	3358      	adds	r3, #88	; 0x58
 801b11c:	443b      	add	r3, r7
 801b11e:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801b122:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b126:	b21a      	sxth	r2, r3
 801b128:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b12c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b130:	fa01 f303 	lsl.w	r3, r1, r3
 801b134:	b21b      	sxth	r3, r3
 801b136:	4313      	orrs	r3, r2
 801b138:	b21b      	sxth	r3, r3
 801b13a:	b29b      	uxth	r3, r3
 801b13c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b140:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b144:	3301      	adds	r3, #1
 801b146:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801b14a:	e04f      	b.n	801b1ec <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801b14c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b150:	f003 0301 	and.w	r3, r3, #1
 801b154:	b2db      	uxtb	r3, r3
 801b156:	2b00      	cmp	r3, #0
 801b158:	d122      	bne.n	801b1a0 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801b15a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b15e:	005b      	lsls	r3, r3, #1
 801b160:	3358      	adds	r3, #88	; 0x58
 801b162:	443b      	add	r3, r7
 801b164:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b168:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b16c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801b170:	b292      	uxth	r2, r2
 801b172:	005b      	lsls	r3, r3, #1
 801b174:	3358      	adds	r3, #88	; 0x58
 801b176:	443b      	add	r3, r7
 801b178:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b17c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b180:	b21a      	sxth	r2, r3
 801b182:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b186:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b18a:	fa01 f303 	lsl.w	r3, r1, r3
 801b18e:	b21b      	sxth	r3, r3
 801b190:	43db      	mvns	r3, r3
 801b192:	b21b      	sxth	r3, r3
 801b194:	4013      	ands	r3, r2
 801b196:	b21b      	sxth	r3, r3
 801b198:	b29b      	uxth	r3, r3
 801b19a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801b19e:	e025      	b.n	801b1ec <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801b1a0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1a4:	005b      	lsls	r3, r3, #1
 801b1a6:	3358      	adds	r3, #88	; 0x58
 801b1a8:	443b      	add	r3, r7
 801b1aa:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801b1ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1b2:	b2d2      	uxtb	r2, r2
 801b1b4:	b292      	uxth	r2, r2
 801b1b6:	005b      	lsls	r3, r3, #1
 801b1b8:	3358      	adds	r3, #88	; 0x58
 801b1ba:	443b      	add	r3, r7
 801b1bc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801b1c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801b1c4:	b21a      	sxth	r2, r3
 801b1c6:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801b1ca:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1ce:	fa01 f303 	lsl.w	r3, r1, r3
 801b1d2:	b21b      	sxth	r3, r3
 801b1d4:	43db      	mvns	r3, r3
 801b1d6:	b21b      	sxth	r3, r3
 801b1d8:	4013      	ands	r3, r2
 801b1da:	b21b      	sxth	r3, r3
 801b1dc:	b29b      	uxth	r3, r3
 801b1de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801b1e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801b1e6:	3301      	adds	r3, #1
 801b1e8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801b1ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1f0:	3301      	adds	r3, #1
 801b1f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801b1f6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b1fa:	2b07      	cmp	r3, #7
 801b1fc:	f67f af4c 	bls.w	801b098 <RegionUS915LinkAdrReq+0x108>
 801b200:	e008      	b.n	801b214 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801b202:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801b206:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801b20a:	005b      	lsls	r3, r3, #1
 801b20c:	3358      	adds	r3, #88	; 0x58
 801b20e:	443b      	add	r3, r7
 801b210:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	7a1b      	ldrb	r3, [r3, #8]
 801b218:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b21c:	429a      	cmp	r2, r3
 801b21e:	f4ff aedd 	bcc.w	801afdc <RegionUS915LinkAdrReq+0x4c>
 801b222:	e002      	b.n	801b22a <RegionUS915LinkAdrReq+0x29a>
 801b224:	20001ad4 	.word	0x20001ad4
            break; // break loop, since no more request has been found
 801b228:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801b22a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b22e:	2b03      	cmp	r3, #3
 801b230:	dc0f      	bgt.n	801b252 <RegionUS915LinkAdrReq+0x2c2>
 801b232:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b236:	2204      	movs	r2, #4
 801b238:	2100      	movs	r1, #0
 801b23a:	4618      	mov	r0, r3
 801b23c:	f7fd f9a4 	bl	8018588 <RegionCommonCountChannels>
 801b240:	4603      	mov	r3, r0
 801b242:	2b01      	cmp	r3, #1
 801b244:	d805      	bhi.n	801b252 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801b246:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b24a:	f023 0301 	bic.w	r3, r3, #1
 801b24e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801b252:	2302      	movs	r3, #2
 801b254:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	7a5b      	ldrb	r3, [r3, #9]
 801b25c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801b260:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b264:	4618      	mov	r0, r3
 801b266:	f7ff f90f 	bl	801a488 <RegionUS915GetPhyParam>
 801b26a:	4603      	mov	r3, r0
 801b26c:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801b26e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b272:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	7a9b      	ldrb	r3, [r3, #10]
 801b278:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801b27a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801b27e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801b280:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801b284:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801b286:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801b28a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801b292:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801b294:	68fb      	ldr	r3, [r7, #12]
 801b296:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801b29a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	7b5b      	ldrb	r3, [r3, #13]
 801b2a0:	b25b      	sxtb	r3, r3
 801b2a2:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801b2a4:	2348      	movs	r3, #72	; 0x48
 801b2a6:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801b2aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801b2ae:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801b2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b2b2:	b25b      	sxtb	r3, r3
 801b2b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801b2b8:	2304      	movs	r3, #4
 801b2ba:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801b2be:	4b3f      	ldr	r3, [pc, #252]	; (801b3bc <RegionUS915LinkAdrReq+0x42c>)
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801b2c4:	230e      	movs	r3, #14
 801b2c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801b2ca:	2300      	movs	r3, #0
 801b2cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801b2d6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801b2da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b2de:	1c9a      	adds	r2, r3, #2
 801b2e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801b2e4:	1c59      	adds	r1, r3, #1
 801b2e6:	f107 0014 	add.w	r0, r7, #20
 801b2ea:	4623      	mov	r3, r4
 801b2ec:	f7fd fb0d 	bl	801890a <RegionCommonLinkAdrReqVerifyParams>
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801b2f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b2fa:	2b07      	cmp	r3, #7
 801b2fc:	d147      	bne.n	801b38e <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801b2fe:	4b2f      	ldr	r3, [pc, #188]	; (801b3bc <RegionUS915LinkAdrReq+0x42c>)
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b306:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801b30a:	2206      	movs	r2, #6
 801b30c:	4618      	mov	r0, r3
 801b30e:	f7fd f967 	bl	80185e0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801b312:	4b2b      	ldr	r3, [pc, #172]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	8819      	ldrh	r1, [r3, #0]
 801b318:	4b28      	ldr	r3, [pc, #160]	; (801b3bc <RegionUS915LinkAdrReq+0x42c>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801b320:	4b27      	ldr	r3, [pc, #156]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	400a      	ands	r2, r1
 801b326:	b292      	uxth	r2, r2
 801b328:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801b32a:	4b25      	ldr	r3, [pc, #148]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	8859      	ldrh	r1, [r3, #2]
 801b330:	4b22      	ldr	r3, [pc, #136]	; (801b3bc <RegionUS915LinkAdrReq+0x42c>)
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801b338:	4b21      	ldr	r3, [pc, #132]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b33a:	681b      	ldr	r3, [r3, #0]
 801b33c:	400a      	ands	r2, r1
 801b33e:	b292      	uxth	r2, r2
 801b340:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801b342:	4b1f      	ldr	r3, [pc, #124]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	8899      	ldrh	r1, [r3, #4]
 801b348:	4b1c      	ldr	r3, [pc, #112]	; (801b3bc <RegionUS915LinkAdrReq+0x42c>)
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801b350:	4b1b      	ldr	r3, [pc, #108]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b352:	681b      	ldr	r3, [r3, #0]
 801b354:	400a      	ands	r2, r1
 801b356:	b292      	uxth	r2, r2
 801b358:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801b35a:	4b19      	ldr	r3, [pc, #100]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	88d9      	ldrh	r1, [r3, #6]
 801b360:	4b16      	ldr	r3, [pc, #88]	; (801b3bc <RegionUS915LinkAdrReq+0x42c>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801b368:	4b15      	ldr	r3, [pc, #84]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	400a      	ands	r2, r1
 801b36e:	b292      	uxth	r2, r2
 801b370:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b372:	4b12      	ldr	r3, [pc, #72]	; (801b3bc <RegionUS915LinkAdrReq+0x42c>)
 801b374:	681a      	ldr	r2, [r3, #0]
 801b376:	4b12      	ldr	r3, [pc, #72]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b37e:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b380:	4b0e      	ldr	r3, [pc, #56]	; (801b3bc <RegionUS915LinkAdrReq+0x42c>)
 801b382:	681a      	ldr	r2, [r3, #0]
 801b384:	4b0e      	ldr	r3, [pc, #56]	; (801b3c0 <RegionUS915LinkAdrReq+0x430>)
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b38c:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b38e:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b392:	68bb      	ldr	r3, [r7, #8]
 801b394:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b396:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b39e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b3a2:	683b      	ldr	r3, [r7, #0]
 801b3a4:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b3a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b3a8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b3ac:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b3ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	375c      	adds	r7, #92	; 0x5c
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	bd90      	pop	{r4, r7, pc}
 801b3ba:	bf00      	nop
 801b3bc:	20001ad4 	.word	0x20001ad4
 801b3c0:	20001ad0 	.word	0x20001ad0

0801b3c4 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b3c4:	b580      	push	{r7, lr}
 801b3c6:	b084      	sub	sp, #16
 801b3c8:	af00      	add	r7, sp, #0
 801b3ca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b3cc:	2307      	movs	r3, #7
 801b3ce:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b3d0:	687b      	ldr	r3, [r7, #4]
 801b3d2:	685b      	ldr	r3, [r3, #4]
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	f7fe ffe3 	bl	801a3a0 <VerifyRfFreq>
 801b3da:	4603      	mov	r3, r0
 801b3dc:	f083 0301 	eor.w	r3, r3, #1
 801b3e0:	b2db      	uxtb	r3, r3
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d003      	beq.n	801b3ee <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b3e6:	7bfb      	ldrb	r3, [r7, #15]
 801b3e8:	f023 0301 	bic.w	r3, r3, #1
 801b3ec:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	f993 3000 	ldrsb.w	r3, [r3]
 801b3f4:	220d      	movs	r2, #13
 801b3f6:	2108      	movs	r1, #8
 801b3f8:	4618      	mov	r0, r3
 801b3fa:	f7fd f874 	bl	80184e6 <RegionCommonValueInRange>
 801b3fe:	4603      	mov	r3, r0
 801b400:	2b00      	cmp	r3, #0
 801b402:	d103      	bne.n	801b40c <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b404:	7bfb      	ldrb	r3, [r7, #15]
 801b406:	f023 0302 	bic.w	r3, r3, #2
 801b40a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	f993 3000 	ldrsb.w	r3, [r3]
 801b412:	2207      	movs	r2, #7
 801b414:	2105      	movs	r1, #5
 801b416:	4618      	mov	r0, r3
 801b418:	f7fd f865 	bl	80184e6 <RegionCommonValueInRange>
 801b41c:	4603      	mov	r3, r0
 801b41e:	2b01      	cmp	r3, #1
 801b420:	d004      	beq.n	801b42c <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b428:	2b0d      	cmp	r3, #13
 801b42a:	dd03      	ble.n	801b434 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b42c:	7bfb      	ldrb	r3, [r7, #15]
 801b42e:	f023 0302 	bic.w	r3, r3, #2
 801b432:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b43a:	2203      	movs	r2, #3
 801b43c:	2100      	movs	r1, #0
 801b43e:	4618      	mov	r0, r3
 801b440:	f7fd f851 	bl	80184e6 <RegionCommonValueInRange>
 801b444:	4603      	mov	r3, r0
 801b446:	2b00      	cmp	r3, #0
 801b448:	d103      	bne.n	801b452 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b44a:	7bfb      	ldrb	r3, [r7, #15]
 801b44c:	f023 0304 	bic.w	r3, r3, #4
 801b450:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b452:	7bfb      	ldrb	r3, [r7, #15]
}
 801b454:	4618      	mov	r0, r3
 801b456:	3710      	adds	r7, #16
 801b458:	46bd      	mov	sp, r7
 801b45a:	bd80      	pop	{r7, pc}

0801b45c <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b45c:	b480      	push	{r7}
 801b45e:	b083      	sub	sp, #12
 801b460:	af00      	add	r7, sp, #0
 801b462:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b464:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b468:	4618      	mov	r0, r3
 801b46a:	370c      	adds	r7, #12
 801b46c:	46bd      	mov	sp, r7
 801b46e:	bc80      	pop	{r7}
 801b470:	4770      	bx	lr

0801b472 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b472:	b480      	push	{r7}
 801b474:	b083      	sub	sp, #12
 801b476:	af00      	add	r7, sp, #0
 801b478:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b47a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b47e:	4618      	mov	r0, r3
 801b480:	370c      	adds	r7, #12
 801b482:	46bd      	mov	sp, r7
 801b484:	bc80      	pop	{r7}
 801b486:	4770      	bx	lr

0801b488 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b488:	b480      	push	{r7}
 801b48a:	b083      	sub	sp, #12
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b490:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b494:	4618      	mov	r0, r3
 801b496:	370c      	adds	r7, #12
 801b498:	46bd      	mov	sp, r7
 801b49a:	bc80      	pop	{r7}
 801b49c:	4770      	bx	lr
	...

0801b4a0 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b4a0:	b480      	push	{r7}
 801b4a2:	b083      	sub	sp, #12
 801b4a4:	af00      	add	r7, sp, #0
 801b4a6:	4603      	mov	r3, r0
 801b4a8:	460a      	mov	r2, r1
 801b4aa:	71fb      	strb	r3, [r7, #7]
 801b4ac:	4613      	mov	r3, r2
 801b4ae:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b4b0:	79bb      	ldrb	r3, [r7, #6]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d106      	bne.n	801b4c4 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b4b6:	4b13      	ldr	r3, [pc, #76]	; (801b504 <RegionUS915AlternateDr+0x64>)
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	7b5a      	ldrb	r2, [r3, #13]
 801b4bc:	3201      	adds	r2, #1
 801b4be:	b2d2      	uxtb	r2, r2
 801b4c0:	735a      	strb	r2, [r3, #13]
 801b4c2:	e005      	b.n	801b4d0 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b4c4:	4b0f      	ldr	r3, [pc, #60]	; (801b504 <RegionUS915AlternateDr+0x64>)
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	7b5a      	ldrb	r2, [r3, #13]
 801b4ca:	3a01      	subs	r2, #1
 801b4cc:	b2d2      	uxtb	r2, r2
 801b4ce:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b4d0:	4b0c      	ldr	r3, [pc, #48]	; (801b504 <RegionUS915AlternateDr+0x64>)
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	7b5a      	ldrb	r2, [r3, #13]
 801b4d6:	4b0c      	ldr	r3, [pc, #48]	; (801b508 <RegionUS915AlternateDr+0x68>)
 801b4d8:	fba3 1302 	umull	r1, r3, r3, r2
 801b4dc:	0859      	lsrs	r1, r3, #1
 801b4de:	460b      	mov	r3, r1
 801b4e0:	00db      	lsls	r3, r3, #3
 801b4e2:	440b      	add	r3, r1
 801b4e4:	1ad3      	subs	r3, r2, r3
 801b4e6:	b2db      	uxtb	r3, r3
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d102      	bne.n	801b4f2 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b4ec:	2304      	movs	r3, #4
 801b4ee:	71fb      	strb	r3, [r7, #7]
 801b4f0:	e001      	b.n	801b4f6 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b4f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	370c      	adds	r7, #12
 801b4fe:	46bd      	mov	sp, r7
 801b500:	bc80      	pop	{r7}
 801b502:	4770      	bx	lr
 801b504:	20001ad0 	.word	0x20001ad0
 801b508:	38e38e39 	.word	0x38e38e39

0801b50c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b50c:	b580      	push	{r7, lr}
 801b50e:	b0a8      	sub	sp, #160	; 0xa0
 801b510:	af02      	add	r7, sp, #8
 801b512:	60f8      	str	r0, [r7, #12]
 801b514:	60b9      	str	r1, [r7, #8]
 801b516:	607a      	str	r2, [r7, #4]
 801b518:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b51a:	2300      	movs	r3, #0
 801b51c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b520:	2300      	movs	r3, #0
 801b522:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b526:	2300      	movs	r3, #0
 801b528:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b52a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b52e:	2244      	movs	r2, #68	; 0x44
 801b530:	2100      	movs	r1, #0
 801b532:	4618      	mov	r0, r3
 801b534:	f005 fdbe 	bl	80210b4 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b538:	230c      	movs	r3, #12
 801b53a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b53e:	4b67      	ldr	r3, [pc, #412]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	2204      	movs	r2, #4
 801b544:	2100      	movs	r1, #0
 801b546:	4618      	mov	r0, r3
 801b548:	f7fd f81e 	bl	8018588 <RegionCommonCountChannels>
 801b54c:	4603      	mov	r3, r0
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d10e      	bne.n	801b570 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b552:	4b62      	ldr	r3, [pc, #392]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	4618      	mov	r0, r3
 801b558:	4b61      	ldr	r3, [pc, #388]	; (801b6e0 <RegionUS915NextChannel+0x1d4>)
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b560:	2204      	movs	r2, #4
 801b562:	4619      	mov	r1, r3
 801b564:	f7fd f83c 	bl	80185e0 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b568:	4b5c      	ldr	r3, [pc, #368]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	2200      	movs	r2, #0
 801b56e:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b576:	2b03      	cmp	r3, #3
 801b578:	dd0c      	ble.n	801b594 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b57a:	4b58      	ldr	r3, [pc, #352]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	891b      	ldrh	r3, [r3, #8]
 801b580:	b2db      	uxtb	r3, r3
 801b582:	2b00      	cmp	r3, #0
 801b584:	d106      	bne.n	801b594 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b586:	4b56      	ldr	r3, [pc, #344]	; (801b6e0 <RegionUS915NextChannel+0x1d4>)
 801b588:	681a      	ldr	r2, [r3, #0]
 801b58a:	4b54      	ldr	r3, [pc, #336]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b592:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b594:	68fb      	ldr	r3, [r7, #12]
 801b596:	7a5b      	ldrb	r3, [r3, #9]
 801b598:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b5a0:	b2db      	uxtb	r3, r3
 801b5a2:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b5a4:	4b4d      	ldr	r3, [pc, #308]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b5a6:	681b      	ldr	r3, [r3, #0]
 801b5a8:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b5aa:	4b4d      	ldr	r3, [pc, #308]	; (801b6e0 <RegionUS915NextChannel+0x1d4>)
 801b5ac:	681b      	ldr	r3, [r3, #0]
 801b5ae:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801b5b0:	4b4c      	ldr	r3, [pc, #304]	; (801b6e4 <RegionUS915NextChannel+0x1d8>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b5b6:	2348      	movs	r3, #72	; 0x48
 801b5b8:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	685b      	ldr	r3, [r3, #4]
 801b5c8:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	7a9b      	ldrb	r3, [r3, #10]
 801b5ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b5d2:	2301      	movs	r3, #1
 801b5d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b5d8:	f107 0314 	add.w	r3, r7, #20
 801b5dc:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b5de:	68fa      	ldr	r2, [r7, #12]
 801b5e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b5e4:	320c      	adds	r2, #12
 801b5e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b5ea:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	7d1b      	ldrb	r3, [r3, #20]
 801b5f2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	8adb      	ldrh	r3, [r3, #22]
 801b600:	4619      	mov	r1, r3
 801b602:	4610      	mov	r0, r2
 801b604:	f7fe ff10 	bl	801a428 <GetTimeOnAir>
 801b608:	4603      	mov	r3, r0
 801b60a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b60c:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b610:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b614:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	9301      	str	r3, [sp, #4]
 801b61c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b620:	9300      	str	r3, [sp, #0]
 801b622:	460b      	mov	r3, r1
 801b624:	6839      	ldr	r1, [r7, #0]
 801b626:	f7fd fbc6 	bl	8018db6 <RegionCommonIdentifyChannels>
 801b62a:	4603      	mov	r3, r0
 801b62c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b630:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b634:	2b00      	cmp	r3, #0
 801b636:	d14a      	bne.n	801b6ce <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	7a5b      	ldrb	r3, [r3, #9]
 801b63c:	2b00      	cmp	r3, #0
 801b63e:	d00e      	beq.n	801b65e <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b640:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b644:	3b01      	subs	r3, #1
 801b646:	4619      	mov	r1, r3
 801b648:	2000      	movs	r0, #0
 801b64a:	f000 f89f 	bl	801b78c <randr>
 801b64e:	4603      	mov	r3, r0
 801b650:	3398      	adds	r3, #152	; 0x98
 801b652:	443b      	add	r3, r7
 801b654:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b658:	68bb      	ldr	r3, [r7, #8]
 801b65a:	701a      	strb	r2, [r3, #0]
 801b65c:	e02e      	b.n	801b6bc <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d10e      	bne.n	801b686 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b668:	4b1c      	ldr	r3, [pc, #112]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b66e:	4b1b      	ldr	r3, [pc, #108]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b670:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b672:	330c      	adds	r3, #12
 801b674:	68ba      	ldr	r2, [r7, #8]
 801b676:	4619      	mov	r1, r3
 801b678:	f7fc fcf0 	bl	801805c <RegionBaseUSComputeNext125kHzJoinChannel>
 801b67c:	4603      	mov	r3, r0
 801b67e:	2b03      	cmp	r3, #3
 801b680:	d11c      	bne.n	801b6bc <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b682:	2303      	movs	r3, #3
 801b684:	e025      	b.n	801b6d2 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b686:	2300      	movs	r3, #0
 801b688:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b68c:	e004      	b.n	801b698 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801b68e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b692:	3301      	adds	r3, #1
 801b694:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b698:	4b10      	ldr	r3, [pc, #64]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	891b      	ldrh	r3, [r3, #8]
 801b69e:	b2da      	uxtb	r2, r3
 801b6a0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b6a4:	fa42 f303 	asr.w	r3, r2, r3
 801b6a8:	f003 0301 	and.w	r3, r3, #1
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d0ee      	beq.n	801b68e <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801b6b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b6b4:	3340      	adds	r3, #64	; 0x40
 801b6b6:	b2da      	uxtb	r2, r3
 801b6b8:	68bb      	ldr	r3, [r7, #8]
 801b6ba:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b6bc:	4b07      	ldr	r3, [pc, #28]	; (801b6dc <RegionUS915NextChannel+0x1d0>)
 801b6be:	681b      	ldr	r3, [r3, #0]
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	68bb      	ldr	r3, [r7, #8]
 801b6c4:	781b      	ldrb	r3, [r3, #0]
 801b6c6:	2248      	movs	r2, #72	; 0x48
 801b6c8:	4619      	mov	r1, r3
 801b6ca:	f7fc ff29 	bl	8018520 <RegionCommonChanDisable>
    }
    return status;
 801b6ce:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b6d2:	4618      	mov	r0, r3
 801b6d4:	3798      	adds	r7, #152	; 0x98
 801b6d6:	46bd      	mov	sp, r7
 801b6d8:	bd80      	pop	{r7, pc}
 801b6da:	bf00      	nop
 801b6dc:	20001ad0 	.word	0x20001ad0
 801b6e0:	20001ad4 	.word	0x20001ad4
 801b6e4:	20001ad8 	.word	0x20001ad8

0801b6e8 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b6e8:	b480      	push	{r7}
 801b6ea:	b085      	sub	sp, #20
 801b6ec:	af00      	add	r7, sp, #0
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	71fb      	strb	r3, [r7, #7]
 801b6f2:	460b      	mov	r3, r1
 801b6f4:	71bb      	strb	r3, [r7, #6]
 801b6f6:	4613      	mov	r3, r2
 801b6f8:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b6fa:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b6fe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b702:	4909      	ldr	r1, [pc, #36]	; (801b728 <RegionUS915ApplyDrOffset+0x40>)
 801b704:	0092      	lsls	r2, r2, #2
 801b706:	440a      	add	r2, r1
 801b708:	4413      	add	r3, r2
 801b70a:	781b      	ldrb	r3, [r3, #0]
 801b70c:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b712:	2b00      	cmp	r3, #0
 801b714:	da01      	bge.n	801b71a <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b716:	2300      	movs	r3, #0
 801b718:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b71a:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b71c:	4618      	mov	r0, r3
 801b71e:	3714      	adds	r7, #20
 801b720:	46bd      	mov	sp, r7
 801b722:	bc80      	pop	{r7}
 801b724:	4770      	bx	lr
 801b726:	bf00      	nop
 801b728:	08021f80 	.word	0x08021f80

0801b72c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b72c:	b480      	push	{r7}
 801b72e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b730:	4b0d      	ldr	r3, [pc, #52]	; (801b768 <rand1+0x3c>)
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	4a0d      	ldr	r2, [pc, #52]	; (801b76c <rand1+0x40>)
 801b736:	fb02 f303 	mul.w	r3, r2, r3
 801b73a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b73e:	3339      	adds	r3, #57	; 0x39
 801b740:	4a09      	ldr	r2, [pc, #36]	; (801b768 <rand1+0x3c>)
 801b742:	6013      	str	r3, [r2, #0]
 801b744:	4b08      	ldr	r3, [pc, #32]	; (801b768 <rand1+0x3c>)
 801b746:	681a      	ldr	r2, [r3, #0]
 801b748:	2303      	movs	r3, #3
 801b74a:	fba3 1302 	umull	r1, r3, r3, r2
 801b74e:	1ad1      	subs	r1, r2, r3
 801b750:	0849      	lsrs	r1, r1, #1
 801b752:	440b      	add	r3, r1
 801b754:	0f99      	lsrs	r1, r3, #30
 801b756:	460b      	mov	r3, r1
 801b758:	07db      	lsls	r3, r3, #31
 801b75a:	1a5b      	subs	r3, r3, r1
 801b75c:	1ad1      	subs	r1, r2, r3
 801b75e:	460b      	mov	r3, r1
}
 801b760:	4618      	mov	r0, r3
 801b762:	46bd      	mov	sp, r7
 801b764:	bc80      	pop	{r7}
 801b766:	4770      	bx	lr
 801b768:	20000130 	.word	0x20000130
 801b76c:	41c64e6d 	.word	0x41c64e6d

0801b770 <srand1>:

void srand1( uint32_t seed )
{
 801b770:	b480      	push	{r7}
 801b772:	b083      	sub	sp, #12
 801b774:	af00      	add	r7, sp, #0
 801b776:	6078      	str	r0, [r7, #4]
    next = seed;
 801b778:	4a03      	ldr	r2, [pc, #12]	; (801b788 <srand1+0x18>)
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	6013      	str	r3, [r2, #0]
}
 801b77e:	bf00      	nop
 801b780:	370c      	adds	r7, #12
 801b782:	46bd      	mov	sp, r7
 801b784:	bc80      	pop	{r7}
 801b786:	4770      	bx	lr
 801b788:	20000130 	.word	0x20000130

0801b78c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b78c:	b580      	push	{r7, lr}
 801b78e:	b082      	sub	sp, #8
 801b790:	af00      	add	r7, sp, #0
 801b792:	6078      	str	r0, [r7, #4]
 801b794:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b796:	f7ff ffc9 	bl	801b72c <rand1>
 801b79a:	4602      	mov	r2, r0
 801b79c:	6839      	ldr	r1, [r7, #0]
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	1acb      	subs	r3, r1, r3
 801b7a2:	3301      	adds	r3, #1
 801b7a4:	fb92 f1f3 	sdiv	r1, r2, r3
 801b7a8:	fb01 f303 	mul.w	r3, r1, r3
 801b7ac:	1ad2      	subs	r2, r2, r3
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	4413      	add	r3, r2
}
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	3708      	adds	r7, #8
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	bd80      	pop	{r7, pc}

0801b7ba <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b7ba:	b480      	push	{r7}
 801b7bc:	b085      	sub	sp, #20
 801b7be:	af00      	add	r7, sp, #0
 801b7c0:	60f8      	str	r0, [r7, #12]
 801b7c2:	60b9      	str	r1, [r7, #8]
 801b7c4:	4613      	mov	r3, r2
 801b7c6:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b7c8:	e007      	b.n	801b7da <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b7ca:	68ba      	ldr	r2, [r7, #8]
 801b7cc:	1c53      	adds	r3, r2, #1
 801b7ce:	60bb      	str	r3, [r7, #8]
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	1c59      	adds	r1, r3, #1
 801b7d4:	60f9      	str	r1, [r7, #12]
 801b7d6:	7812      	ldrb	r2, [r2, #0]
 801b7d8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b7da:	88fb      	ldrh	r3, [r7, #6]
 801b7dc:	1e5a      	subs	r2, r3, #1
 801b7de:	80fa      	strh	r2, [r7, #6]
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d1f2      	bne.n	801b7ca <memcpy1+0x10>
    }
}
 801b7e4:	bf00      	nop
 801b7e6:	bf00      	nop
 801b7e8:	3714      	adds	r7, #20
 801b7ea:	46bd      	mov	sp, r7
 801b7ec:	bc80      	pop	{r7}
 801b7ee:	4770      	bx	lr

0801b7f0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b7f0:	b480      	push	{r7}
 801b7f2:	b085      	sub	sp, #20
 801b7f4:	af00      	add	r7, sp, #0
 801b7f6:	60f8      	str	r0, [r7, #12]
 801b7f8:	60b9      	str	r1, [r7, #8]
 801b7fa:	4613      	mov	r3, r2
 801b7fc:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b7fe:	88fb      	ldrh	r3, [r7, #6]
 801b800:	3b01      	subs	r3, #1
 801b802:	68fa      	ldr	r2, [r7, #12]
 801b804:	4413      	add	r3, r2
 801b806:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b808:	e007      	b.n	801b81a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b80a:	68ba      	ldr	r2, [r7, #8]
 801b80c:	1c53      	adds	r3, r2, #1
 801b80e:	60bb      	str	r3, [r7, #8]
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	1e59      	subs	r1, r3, #1
 801b814:	60f9      	str	r1, [r7, #12]
 801b816:	7812      	ldrb	r2, [r2, #0]
 801b818:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b81a:	88fb      	ldrh	r3, [r7, #6]
 801b81c:	1e5a      	subs	r2, r3, #1
 801b81e:	80fa      	strh	r2, [r7, #6]
 801b820:	2b00      	cmp	r3, #0
 801b822:	d1f2      	bne.n	801b80a <memcpyr+0x1a>
    }
}
 801b824:	bf00      	nop
 801b826:	bf00      	nop
 801b828:	3714      	adds	r7, #20
 801b82a:	46bd      	mov	sp, r7
 801b82c:	bc80      	pop	{r7}
 801b82e:	4770      	bx	lr

0801b830 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b830:	b480      	push	{r7}
 801b832:	b083      	sub	sp, #12
 801b834:	af00      	add	r7, sp, #0
 801b836:	6078      	str	r0, [r7, #4]
 801b838:	460b      	mov	r3, r1
 801b83a:	70fb      	strb	r3, [r7, #3]
 801b83c:	4613      	mov	r3, r2
 801b83e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b840:	e004      	b.n	801b84c <memset1+0x1c>
    {
        *dst++ = value;
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	1c5a      	adds	r2, r3, #1
 801b846:	607a      	str	r2, [r7, #4]
 801b848:	78fa      	ldrb	r2, [r7, #3]
 801b84a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b84c:	883b      	ldrh	r3, [r7, #0]
 801b84e:	1e5a      	subs	r2, r3, #1
 801b850:	803a      	strh	r2, [r7, #0]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d1f5      	bne.n	801b842 <memset1+0x12>
    }
}
 801b856:	bf00      	nop
 801b858:	bf00      	nop
 801b85a:	370c      	adds	r7, #12
 801b85c:	46bd      	mov	sp, r7
 801b85e:	bc80      	pop	{r7}
 801b860:	4770      	bx	lr
	...

0801b864 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b864:	b480      	push	{r7}
 801b866:	b085      	sub	sp, #20
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]
 801b86c:	460b      	mov	r3, r1
 801b86e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b870:	f04f 33ff 	mov.w	r3, #4294967295
 801b874:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d101      	bne.n	801b880 <Crc32+0x1c>
    {
        return 0;
 801b87c:	2300      	movs	r3, #0
 801b87e:	e026      	b.n	801b8ce <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b880:	2300      	movs	r3, #0
 801b882:	817b      	strh	r3, [r7, #10]
 801b884:	e01d      	b.n	801b8c2 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801b886:	897b      	ldrh	r3, [r7, #10]
 801b888:	687a      	ldr	r2, [r7, #4]
 801b88a:	4413      	add	r3, r2
 801b88c:	781b      	ldrb	r3, [r3, #0]
 801b88e:	461a      	mov	r2, r3
 801b890:	68fb      	ldr	r3, [r7, #12]
 801b892:	4053      	eors	r3, r2
 801b894:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b896:	2300      	movs	r3, #0
 801b898:	813b      	strh	r3, [r7, #8]
 801b89a:	e00c      	b.n	801b8b6 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	085a      	lsrs	r2, r3, #1
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	f003 0301 	and.w	r3, r3, #1
 801b8a6:	425b      	negs	r3, r3
 801b8a8:	490b      	ldr	r1, [pc, #44]	; (801b8d8 <Crc32+0x74>)
 801b8aa:	400b      	ands	r3, r1
 801b8ac:	4053      	eors	r3, r2
 801b8ae:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b8b0:	893b      	ldrh	r3, [r7, #8]
 801b8b2:	3301      	adds	r3, #1
 801b8b4:	813b      	strh	r3, [r7, #8]
 801b8b6:	893b      	ldrh	r3, [r7, #8]
 801b8b8:	2b07      	cmp	r3, #7
 801b8ba:	d9ef      	bls.n	801b89c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801b8bc:	897b      	ldrh	r3, [r7, #10]
 801b8be:	3301      	adds	r3, #1
 801b8c0:	817b      	strh	r3, [r7, #10]
 801b8c2:	897a      	ldrh	r2, [r7, #10]
 801b8c4:	887b      	ldrh	r3, [r7, #2]
 801b8c6:	429a      	cmp	r2, r3
 801b8c8:	d3dd      	bcc.n	801b886 <Crc32+0x22>
        }
    }

    return ~crc;
 801b8ca:	68fb      	ldr	r3, [r7, #12]
 801b8cc:	43db      	mvns	r3, r3
}
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	3714      	adds	r7, #20
 801b8d2:	46bd      	mov	sp, r7
 801b8d4:	bc80      	pop	{r7}
 801b8d6:	4770      	bx	lr
 801b8d8:	edb88320 	.word	0xedb88320

0801b8dc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801b8dc:	b580      	push	{r7, lr}
 801b8de:	b084      	sub	sp, #16
 801b8e0:	af02      	add	r7, sp, #8
 801b8e2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801b8e4:	4a24      	ldr	r2, [pc, #144]	; (801b978 <RadioInit+0x9c>)
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801b8ea:	4b24      	ldr	r3, [pc, #144]	; (801b97c <RadioInit+0xa0>)
 801b8ec:	2200      	movs	r2, #0
 801b8ee:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801b8f0:	4b22      	ldr	r3, [pc, #136]	; (801b97c <RadioInit+0xa0>)
 801b8f2:	2200      	movs	r2, #0
 801b8f4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801b8f6:	4b21      	ldr	r3, [pc, #132]	; (801b97c <RadioInit+0xa0>)
 801b8f8:	2200      	movs	r2, #0
 801b8fa:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b8fc:	4b1f      	ldr	r3, [pc, #124]	; (801b97c <RadioInit+0xa0>)
 801b8fe:	2200      	movs	r2, #0
 801b900:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801b902:	481f      	ldr	r0, [pc, #124]	; (801b980 <RadioInit+0xa4>)
 801b904:	f001 ffc0 	bl	801d888 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801b908:	4b1c      	ldr	r3, [pc, #112]	; (801b97c <RadioInit+0xa0>)
 801b90a:	2200      	movs	r2, #0
 801b90c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801b90e:	4b1b      	ldr	r3, [pc, #108]	; (801b97c <RadioInit+0xa0>)
 801b910:	2200      	movs	r2, #0
 801b912:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801b914:	f002 fa54 	bl	801ddc0 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801b918:	2100      	movs	r1, #0
 801b91a:	2000      	movs	r0, #0
 801b91c:	f002 fe20 	bl	801e560 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801b920:	2204      	movs	r2, #4
 801b922:	2100      	movs	r1, #0
 801b924:	2001      	movs	r0, #1
 801b926:	f002 fbdd 	bl	801e0e4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b92a:	2300      	movs	r3, #0
 801b92c:	2200      	movs	r2, #0
 801b92e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b932:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b936:	f002 fb0d 	bl	801df54 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801b93a:	f000 fe99 	bl	801c670 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801b93e:	2300      	movs	r3, #0
 801b940:	9300      	str	r3, [sp, #0]
 801b942:	4b10      	ldr	r3, [pc, #64]	; (801b984 <RadioInit+0xa8>)
 801b944:	2200      	movs	r2, #0
 801b946:	f04f 31ff 	mov.w	r1, #4294967295
 801b94a:	480f      	ldr	r0, [pc, #60]	; (801b988 <RadioInit+0xac>)
 801b94c:	f003 fef0 	bl	801f730 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801b950:	2300      	movs	r3, #0
 801b952:	9300      	str	r3, [sp, #0]
 801b954:	4b0d      	ldr	r3, [pc, #52]	; (801b98c <RadioInit+0xb0>)
 801b956:	2200      	movs	r2, #0
 801b958:	f04f 31ff 	mov.w	r1, #4294967295
 801b95c:	480c      	ldr	r0, [pc, #48]	; (801b990 <RadioInit+0xb4>)
 801b95e:	f003 fee7 	bl	801f730 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801b962:	4809      	ldr	r0, [pc, #36]	; (801b988 <RadioInit+0xac>)
 801b964:	f003 ff88 	bl	801f878 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801b968:	4809      	ldr	r0, [pc, #36]	; (801b990 <RadioInit+0xb4>)
 801b96a:	f003 ff85 	bl	801f878 <UTIL_TIMER_Stop>
}
 801b96e:	bf00      	nop
 801b970:	3708      	adds	r7, #8
 801b972:	46bd      	mov	sp, r7
 801b974:	bd80      	pop	{r7, pc}
 801b976:	bf00      	nop
 801b978:	20001bdc 	.word	0x20001bdc
 801b97c:	20001be0 	.word	0x20001be0
 801b980:	0801ca69 	.word	0x0801ca69
 801b984:	0801c9f1 	.word	0x0801c9f1
 801b988:	20001c3c 	.word	0x20001c3c
 801b98c:	0801ca05 	.word	0x0801ca05
 801b990:	20001c54 	.word	0x20001c54

0801b994 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801b994:	b580      	push	{r7, lr}
 801b996:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801b998:	f001 ffbe 	bl	801d918 <SUBGRF_GetOperatingMode>
 801b99c:	4603      	mov	r3, r0
 801b99e:	2b07      	cmp	r3, #7
 801b9a0:	d00a      	beq.n	801b9b8 <RadioGetStatus+0x24>
 801b9a2:	2b07      	cmp	r3, #7
 801b9a4:	dc0a      	bgt.n	801b9bc <RadioGetStatus+0x28>
 801b9a6:	2b04      	cmp	r3, #4
 801b9a8:	d002      	beq.n	801b9b0 <RadioGetStatus+0x1c>
 801b9aa:	2b05      	cmp	r3, #5
 801b9ac:	d002      	beq.n	801b9b4 <RadioGetStatus+0x20>
 801b9ae:	e005      	b.n	801b9bc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801b9b0:	2302      	movs	r3, #2
 801b9b2:	e004      	b.n	801b9be <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801b9b4:	2301      	movs	r3, #1
 801b9b6:	e002      	b.n	801b9be <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801b9b8:	2303      	movs	r3, #3
 801b9ba:	e000      	b.n	801b9be <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801b9bc:	2300      	movs	r3, #0
    }
}
 801b9be:	4618      	mov	r0, r3
 801b9c0:	bd80      	pop	{r7, pc}
	...

0801b9c4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b082      	sub	sp, #8
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	4603      	mov	r3, r0
 801b9cc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801b9ce:	4a2a      	ldr	r2, [pc, #168]	; (801ba78 <RadioSetModem+0xb4>)
 801b9d0:	79fb      	ldrb	r3, [r7, #7]
 801b9d2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801b9d4:	79fb      	ldrb	r3, [r7, #7]
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f003 f995 	bl	801ed06 <RFW_SetRadioModem>
    switch( modem )
 801b9dc:	79fb      	ldrb	r3, [r7, #7]
 801b9de:	2b05      	cmp	r3, #5
 801b9e0:	d80e      	bhi.n	801ba00 <RadioSetModem+0x3c>
 801b9e2:	a201      	add	r2, pc, #4	; (adr r2, 801b9e8 <RadioSetModem+0x24>)
 801b9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9e8:	0801ba0f 	.word	0x0801ba0f
 801b9ec:	0801ba1d 	.word	0x0801ba1d
 801b9f0:	0801ba01 	.word	0x0801ba01
 801b9f4:	0801ba43 	.word	0x0801ba43
 801b9f8:	0801ba51 	.word	0x0801ba51
 801b9fc:	0801ba5f 	.word	0x0801ba5f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801ba00:	2003      	movs	r0, #3
 801ba02:	f002 fb49 	bl	801e098 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba06:	4b1c      	ldr	r3, [pc, #112]	; (801ba78 <RadioSetModem+0xb4>)
 801ba08:	2200      	movs	r2, #0
 801ba0a:	735a      	strb	r2, [r3, #13]
        break;
 801ba0c:	e02f      	b.n	801ba6e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801ba0e:	2000      	movs	r0, #0
 801ba10:	f002 fb42 	bl	801e098 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba14:	4b18      	ldr	r3, [pc, #96]	; (801ba78 <RadioSetModem+0xb4>)
 801ba16:	2200      	movs	r2, #0
 801ba18:	735a      	strb	r2, [r3, #13]
        break;
 801ba1a:	e028      	b.n	801ba6e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801ba1c:	2001      	movs	r0, #1
 801ba1e:	f002 fb3b 	bl	801e098 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801ba22:	4b15      	ldr	r3, [pc, #84]	; (801ba78 <RadioSetModem+0xb4>)
 801ba24:	7b5a      	ldrb	r2, [r3, #13]
 801ba26:	4b14      	ldr	r3, [pc, #80]	; (801ba78 <RadioSetModem+0xb4>)
 801ba28:	7b1b      	ldrb	r3, [r3, #12]
 801ba2a:	429a      	cmp	r2, r3
 801ba2c:	d01e      	beq.n	801ba6c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801ba2e:	4b12      	ldr	r3, [pc, #72]	; (801ba78 <RadioSetModem+0xb4>)
 801ba30:	7b1a      	ldrb	r2, [r3, #12]
 801ba32:	4b11      	ldr	r3, [pc, #68]	; (801ba78 <RadioSetModem+0xb4>)
 801ba34:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801ba36:	4b10      	ldr	r3, [pc, #64]	; (801ba78 <RadioSetModem+0xb4>)
 801ba38:	7b5b      	ldrb	r3, [r3, #13]
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	f000 ffa2 	bl	801c984 <RadioSetPublicNetwork>
        }
        break;
 801ba40:	e014      	b.n	801ba6c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801ba42:	2002      	movs	r0, #2
 801ba44:	f002 fb28 	bl	801e098 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba48:	4b0b      	ldr	r3, [pc, #44]	; (801ba78 <RadioSetModem+0xb4>)
 801ba4a:	2200      	movs	r2, #0
 801ba4c:	735a      	strb	r2, [r3, #13]
        break;
 801ba4e:	e00e      	b.n	801ba6e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801ba50:	2002      	movs	r0, #2
 801ba52:	f002 fb21 	bl	801e098 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba56:	4b08      	ldr	r3, [pc, #32]	; (801ba78 <RadioSetModem+0xb4>)
 801ba58:	2200      	movs	r2, #0
 801ba5a:	735a      	strb	r2, [r3, #13]
        break;
 801ba5c:	e007      	b.n	801ba6e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801ba5e:	2000      	movs	r0, #0
 801ba60:	f002 fb1a 	bl	801e098 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801ba64:	4b04      	ldr	r3, [pc, #16]	; (801ba78 <RadioSetModem+0xb4>)
 801ba66:	2200      	movs	r2, #0
 801ba68:	735a      	strb	r2, [r3, #13]
        break;
 801ba6a:	e000      	b.n	801ba6e <RadioSetModem+0xaa>
        break;
 801ba6c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801ba6e:	bf00      	nop
 801ba70:	3708      	adds	r7, #8
 801ba72:	46bd      	mov	sp, r7
 801ba74:	bd80      	pop	{r7, pc}
 801ba76:	bf00      	nop
 801ba78:	20001be0 	.word	0x20001be0

0801ba7c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b082      	sub	sp, #8
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801ba84:	6878      	ldr	r0, [r7, #4]
 801ba86:	f002 fac1 	bl	801e00c <SUBGRF_SetRfFrequency>
}
 801ba8a:	bf00      	nop
 801ba8c:	3708      	adds	r7, #8
 801ba8e:	46bd      	mov	sp, r7
 801ba90:	bd80      	pop	{r7, pc}

0801ba92 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801ba92:	b580      	push	{r7, lr}
 801ba94:	b090      	sub	sp, #64	; 0x40
 801ba96:	af0a      	add	r7, sp, #40	; 0x28
 801ba98:	60f8      	str	r0, [r7, #12]
 801ba9a:	60b9      	str	r1, [r7, #8]
 801ba9c:	603b      	str	r3, [r7, #0]
 801ba9e:	4613      	mov	r3, r2
 801baa0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801baa2:	2301      	movs	r3, #1
 801baa4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801baa6:	2300      	movs	r3, #0
 801baa8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801baaa:	2300      	movs	r3, #0
 801baac:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801baae:	f000 fdf2 	bl	801c696 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801bab2:	2000      	movs	r0, #0
 801bab4:	f7ff ff86 	bl	801b9c4 <RadioSetModem>

    RadioSetChannel( freq );
 801bab8:	68f8      	ldr	r0, [r7, #12]
 801baba:	f7ff ffdf 	bl	801ba7c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801babe:	2301      	movs	r3, #1
 801bac0:	9309      	str	r3, [sp, #36]	; 0x24
 801bac2:	2300      	movs	r3, #0
 801bac4:	9308      	str	r3, [sp, #32]
 801bac6:	2300      	movs	r3, #0
 801bac8:	9307      	str	r3, [sp, #28]
 801baca:	2300      	movs	r3, #0
 801bacc:	9306      	str	r3, [sp, #24]
 801bace:	2300      	movs	r3, #0
 801bad0:	9305      	str	r3, [sp, #20]
 801bad2:	2300      	movs	r3, #0
 801bad4:	9304      	str	r3, [sp, #16]
 801bad6:	2300      	movs	r3, #0
 801bad8:	9303      	str	r3, [sp, #12]
 801bada:	2300      	movs	r3, #0
 801badc:	9302      	str	r3, [sp, #8]
 801bade:	2303      	movs	r3, #3
 801bae0:	9301      	str	r3, [sp, #4]
 801bae2:	68bb      	ldr	r3, [r7, #8]
 801bae4:	9300      	str	r3, [sp, #0]
 801bae6:	2300      	movs	r3, #0
 801bae8:	f44f 7216 	mov.w	r2, #600	; 0x258
 801baec:	68b9      	ldr	r1, [r7, #8]
 801baee:	2000      	movs	r0, #0
 801baf0:	f000 f83c 	bl	801bb6c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801baf4:	2000      	movs	r0, #0
 801baf6:	f000 fdd5 	bl	801c6a4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801bafa:	f000 ff71 	bl	801c9e0 <RadioGetWakeupTime>
 801bafe:	4603      	mov	r3, r0
 801bb00:	4618      	mov	r0, r3
 801bb02:	f7e6 fde3 	bl	80026cc <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801bb06:	f003 ffd1 	bl	801faac <UTIL_TIMER_GetCurrentTime>
 801bb0a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bb0c:	e00d      	b.n	801bb2a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801bb0e:	2000      	movs	r0, #0
 801bb10:	f000 feb6 	bl	801c880 <RadioRssi>
 801bb14:	4603      	mov	r3, r0
 801bb16:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801bb18:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801bb1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801bb20:	429a      	cmp	r2, r3
 801bb22:	dd02      	ble.n	801bb2a <RadioIsChannelFree+0x98>
        {
            status = false;
 801bb24:	2300      	movs	r3, #0
 801bb26:	75fb      	strb	r3, [r7, #23]
            break;
 801bb28:	e006      	b.n	801bb38 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801bb2a:	6938      	ldr	r0, [r7, #16]
 801bb2c:	f003 ffd0 	bl	801fad0 <UTIL_TIMER_GetElapsedTime>
 801bb30:	4602      	mov	r2, r0
 801bb32:	683b      	ldr	r3, [r7, #0]
 801bb34:	4293      	cmp	r3, r2
 801bb36:	d8ea      	bhi.n	801bb0e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801bb38:	f000 fdad 	bl	801c696 <RadioStandby>

    return status;
 801bb3c:	7dfb      	ldrb	r3, [r7, #23]
}
 801bb3e:	4618      	mov	r0, r3
 801bb40:	3718      	adds	r7, #24
 801bb42:	46bd      	mov	sp, r7
 801bb44:	bd80      	pop	{r7, pc}

0801bb46 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801bb46:	b580      	push	{r7, lr}
 801bb48:	b082      	sub	sp, #8
 801bb4a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801bb4c:	2300      	movs	r3, #0
 801bb4e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801bb50:	2300      	movs	r3, #0
 801bb52:	2200      	movs	r2, #0
 801bb54:	2100      	movs	r1, #0
 801bb56:	2000      	movs	r0, #0
 801bb58:	f002 f9fc 	bl	801df54 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801bb5c:	f001 ffad 	bl	801daba <SUBGRF_GetRandom>
 801bb60:	6078      	str	r0, [r7, #4]

    return rnd;
 801bb62:	687b      	ldr	r3, [r7, #4]
}
 801bb64:	4618      	mov	r0, r3
 801bb66:	3708      	adds	r7, #8
 801bb68:	46bd      	mov	sp, r7
 801bb6a:	bd80      	pop	{r7, pc}

0801bb6c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b08a      	sub	sp, #40	; 0x28
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	60b9      	str	r1, [r7, #8]
 801bb74:	607a      	str	r2, [r7, #4]
 801bb76:	461a      	mov	r2, r3
 801bb78:	4603      	mov	r3, r0
 801bb7a:	73fb      	strb	r3, [r7, #15]
 801bb7c:	4613      	mov	r3, r2
 801bb7e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801bb80:	4ab9      	ldr	r2, [pc, #740]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bb82:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bb86:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801bb88:	f003 f87b 	bl	801ec82 <RFW_DeInit>
    if( rxContinuous == true )
 801bb8c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d001      	beq.n	801bb98 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801bb94:	2300      	movs	r3, #0
 801bb96:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801bb98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d004      	beq.n	801bbaa <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801bba0:	4ab2      	ldr	r2, [pc, #712]	; (801be6c <RadioSetRxConfig+0x300>)
 801bba2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801bba6:	7013      	strb	r3, [r2, #0]
 801bba8:	e002      	b.n	801bbb0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801bbaa:	4bb0      	ldr	r3, [pc, #704]	; (801be6c <RadioSetRxConfig+0x300>)
 801bbac:	22ff      	movs	r2, #255	; 0xff
 801bbae:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801bbb0:	7bfb      	ldrb	r3, [r7, #15]
 801bbb2:	2b05      	cmp	r3, #5
 801bbb4:	d009      	beq.n	801bbca <RadioSetRxConfig+0x5e>
 801bbb6:	2b05      	cmp	r3, #5
 801bbb8:	f300 81d7 	bgt.w	801bf6a <RadioSetRxConfig+0x3fe>
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	f000 80bf 	beq.w	801bd40 <RadioSetRxConfig+0x1d4>
 801bbc2:	2b01      	cmp	r3, #1
 801bbc4:	f000 8124 	beq.w	801be10 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801bbc8:	e1cf      	b.n	801bf6a <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801bbca:	2001      	movs	r0, #1
 801bbcc:	f002 f8ba 	bl	801dd44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bbd0:	4ba5      	ldr	r3, [pc, #660]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bbd2:	2200      	movs	r2, #0
 801bbd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bbd8:	4aa3      	ldr	r2, [pc, #652]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801bbde:	4ba2      	ldr	r3, [pc, #648]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bbe0:	2209      	movs	r2, #9
 801bbe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801bbe6:	4ba0      	ldr	r3, [pc, #640]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bbe8:	f44f 7248 	mov.w	r2, #800	; 0x320
 801bbec:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bbee:	68b8      	ldr	r0, [r7, #8]
 801bbf0:	f002 ff7a 	bl	801eae8 <SUBGRF_GetFskBandwidthRegValue>
 801bbf4:	4603      	mov	r3, r0
 801bbf6:	461a      	mov	r2, r3
 801bbf8:	4b9b      	ldr	r3, [pc, #620]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bbfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bbfe:	4b9a      	ldr	r3, [pc, #616]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc00:	2200      	movs	r2, #0
 801bc02:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bc04:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bc06:	00db      	lsls	r3, r3, #3
 801bc08:	b29a      	uxth	r2, r3
 801bc0a:	4b97      	ldr	r3, [pc, #604]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc0c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801bc0e:	4b96      	ldr	r3, [pc, #600]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc10:	2200      	movs	r2, #0
 801bc12:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801bc14:	4b94      	ldr	r3, [pc, #592]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc16:	2210      	movs	r2, #16
 801bc18:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bc1a:	4b93      	ldr	r3, [pc, #588]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc1c:	2200      	movs	r2, #0
 801bc1e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801bc20:	4b91      	ldr	r3, [pc, #580]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc22:	2200      	movs	r2, #0
 801bc24:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bc26:	4b91      	ldr	r3, [pc, #580]	; (801be6c <RadioSetRxConfig+0x300>)
 801bc28:	781a      	ldrb	r2, [r3, #0]
 801bc2a:	4b8f      	ldr	r3, [pc, #572]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc2c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bc2e:	4b8e      	ldr	r3, [pc, #568]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc30:	2201      	movs	r2, #1
 801bc32:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801bc34:	4b8c      	ldr	r3, [pc, #560]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bc36:	2200      	movs	r2, #0
 801bc38:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801bc3a:	2005      	movs	r0, #5
 801bc3c:	f7ff fec2 	bl	801b9c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bc40:	488b      	ldr	r0, [pc, #556]	; (801be70 <RadioSetRxConfig+0x304>)
 801bc42:	f002 fb1d 	bl	801e280 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bc46:	488b      	ldr	r0, [pc, #556]	; (801be74 <RadioSetRxConfig+0x308>)
 801bc48:	f002 fbec 	bl	801e424 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bc4c:	4a8a      	ldr	r2, [pc, #552]	; (801be78 <RadioSetRxConfig+0x30c>)
 801bc4e:	f107 031c 	add.w	r3, r7, #28
 801bc52:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bc56:	e883 0003 	stmia.w	r3, {r0, r1}
 801bc5a:	f107 031c 	add.w	r3, r7, #28
 801bc5e:	4618      	mov	r0, r3
 801bc60:	f001 fea9 	bl	801d9b6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bc64:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bc68:	f001 fef4 	bl	801da54 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801bc6c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bc70:	f000 fe25 	bl	801c8be <RadioRead>
 801bc74:	4603      	mov	r3, r0
 801bc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801bc7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc7e:	f023 0310 	bic.w	r3, r3, #16
 801bc82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801bc86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc8a:	4619      	mov	r1, r3
 801bc8c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801bc90:	f000 fe03 	bl	801c89a <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801bc94:	2104      	movs	r1, #4
 801bc96:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801bc9a:	f000 fdfe 	bl	801c89a <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801bc9e:	f640 009b 	movw	r0, #2203	; 0x89b
 801bca2:	f000 fe0c 	bl	801c8be <RadioRead>
 801bca6:	4603      	mov	r3, r0
 801bca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bcac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcb0:	f023 031c 	bic.w	r3, r3, #28
 801bcb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801bcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcbc:	f043 0308 	orr.w	r3, r3, #8
 801bcc0:	b2db      	uxtb	r3, r3
 801bcc2:	4619      	mov	r1, r3
 801bcc4:	f640 009b 	movw	r0, #2203	; 0x89b
 801bcc8:	f000 fde7 	bl	801c89a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801bccc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bcd0:	f000 fdf5 	bl	801c8be <RadioRead>
 801bcd4:	4603      	mov	r3, r0
 801bcd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bcda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcde:	f023 0318 	bic.w	r3, r3, #24
 801bce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801bce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bcea:	f043 0318 	orr.w	r3, r3, #24
 801bcee:	b2db      	uxtb	r3, r3
 801bcf0:	4619      	mov	r1, r3
 801bcf2:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bcf6:	f000 fdd0 	bl	801c89a <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801bcfa:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bcfe:	f000 fdde 	bl	801c8be <RadioRead>
 801bd02:	4603      	mov	r3, r0
 801bd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801bd08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bd10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801bd14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd18:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801bd1c:	b2db      	uxtb	r3, r3
 801bd1e:	4619      	mov	r1, r3
 801bd20:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bd24:	f000 fdb9 	bl	801c89a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bd28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bd2a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bd2e:	fb02 f303 	mul.w	r3, r2, r3
 801bd32:	461a      	mov	r2, r3
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd3a:	4a4b      	ldr	r2, [pc, #300]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd3c:	6093      	str	r3, [r2, #8]
            break;
 801bd3e:	e115      	b.n	801bf6c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bd40:	2000      	movs	r0, #0
 801bd42:	f001 ffff 	bl	801dd44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bd46:	4b48      	ldr	r3, [pc, #288]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd48:	2200      	movs	r2, #0
 801bd4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bd4e:	4a46      	ldr	r2, [pc, #280]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bd54:	4b44      	ldr	r3, [pc, #272]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd56:	220b      	movs	r2, #11
 801bd58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bd5c:	68b8      	ldr	r0, [r7, #8]
 801bd5e:	f002 fec3 	bl	801eae8 <SUBGRF_GetFskBandwidthRegValue>
 801bd62:	4603      	mov	r3, r0
 801bd64:	461a      	mov	r2, r3
 801bd66:	4b40      	ldr	r3, [pc, #256]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bd6c:	4b3e      	ldr	r3, [pc, #248]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd6e:	2200      	movs	r2, #0
 801bd70:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bd72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bd74:	00db      	lsls	r3, r3, #3
 801bd76:	b29a      	uxth	r2, r3
 801bd78:	4b3b      	ldr	r3, [pc, #236]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd7a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bd7c:	4b3a      	ldr	r3, [pc, #232]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd7e:	2204      	movs	r2, #4
 801bd80:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801bd82:	4b39      	ldr	r3, [pc, #228]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd84:	2218      	movs	r2, #24
 801bd86:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bd88:	4b37      	ldr	r3, [pc, #220]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd8a:	2200      	movs	r2, #0
 801bd8c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bd8e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bd92:	f083 0301 	eor.w	r3, r3, #1
 801bd96:	b2db      	uxtb	r3, r3
 801bd98:	461a      	mov	r2, r3
 801bd9a:	4b33      	ldr	r3, [pc, #204]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bd9c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bd9e:	4b33      	ldr	r3, [pc, #204]	; (801be6c <RadioSetRxConfig+0x300>)
 801bda0:	781a      	ldrb	r2, [r3, #0]
 801bda2:	4b31      	ldr	r3, [pc, #196]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bda4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801bda6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d003      	beq.n	801bdb6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bdae:	4b2e      	ldr	r3, [pc, #184]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bdb0:	22f2      	movs	r2, #242	; 0xf2
 801bdb2:	75da      	strb	r2, [r3, #23]
 801bdb4:	e002      	b.n	801bdbc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bdb6:	4b2c      	ldr	r3, [pc, #176]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bdb8:	2201      	movs	r2, #1
 801bdba:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bdbc:	4b2a      	ldr	r3, [pc, #168]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801bdbe:	2201      	movs	r2, #1
 801bdc0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bdc2:	f000 fc68 	bl	801c696 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	f7ff fdfc 	bl	801b9c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdcc:	4828      	ldr	r0, [pc, #160]	; (801be70 <RadioSetRxConfig+0x304>)
 801bdce:	f002 fa57 	bl	801e280 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bdd2:	4828      	ldr	r0, [pc, #160]	; (801be74 <RadioSetRxConfig+0x308>)
 801bdd4:	f002 fb26 	bl	801e424 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bdd8:	4a28      	ldr	r2, [pc, #160]	; (801be7c <RadioSetRxConfig+0x310>)
 801bdda:	f107 0314 	add.w	r3, r7, #20
 801bdde:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bde2:	e883 0003 	stmia.w	r3, {r0, r1}
 801bde6:	f107 0314 	add.w	r3, r7, #20
 801bdea:	4618      	mov	r0, r3
 801bdec:	f001 fde3 	bl	801d9b6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bdf0:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bdf4:	f001 fe2e 	bl	801da54 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bdf8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bdfa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bdfe:	fb02 f303 	mul.w	r3, r2, r3
 801be02:	461a      	mov	r2, r3
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	fbb2 f3f3 	udiv	r3, r2, r3
 801be0a:	4a17      	ldr	r2, [pc, #92]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801be0c:	6093      	str	r3, [r2, #8]
            break;
 801be0e:	e0ad      	b.n	801bf6c <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801be10:	2000      	movs	r0, #0
 801be12:	f001 ff97 	bl	801dd44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801be16:	4b14      	ldr	r3, [pc, #80]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801be18:	2201      	movs	r2, #1
 801be1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	b2da      	uxtb	r2, r3
 801be22:	4b11      	ldr	r3, [pc, #68]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801be24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801be28:	4a15      	ldr	r2, [pc, #84]	; (801be80 <RadioSetRxConfig+0x314>)
 801be2a:	68bb      	ldr	r3, [r7, #8]
 801be2c:	4413      	add	r3, r2
 801be2e:	781a      	ldrb	r2, [r3, #0]
 801be30:	4b0d      	ldr	r3, [pc, #52]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801be32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801be36:	4a0c      	ldr	r2, [pc, #48]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801be38:	7bbb      	ldrb	r3, [r7, #14]
 801be3a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801be3e:	68bb      	ldr	r3, [r7, #8]
 801be40:	2b00      	cmp	r3, #0
 801be42:	d105      	bne.n	801be50 <RadioSetRxConfig+0x2e4>
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	2b0b      	cmp	r3, #11
 801be48:	d008      	beq.n	801be5c <RadioSetRxConfig+0x2f0>
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	2b0c      	cmp	r3, #12
 801be4e:	d005      	beq.n	801be5c <RadioSetRxConfig+0x2f0>
 801be50:	68bb      	ldr	r3, [r7, #8]
 801be52:	2b01      	cmp	r3, #1
 801be54:	d116      	bne.n	801be84 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	2b0c      	cmp	r3, #12
 801be5a:	d113      	bne.n	801be84 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801be5c:	4b02      	ldr	r3, [pc, #8]	; (801be68 <RadioSetRxConfig+0x2fc>)
 801be5e:	2201      	movs	r2, #1
 801be60:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801be64:	e012      	b.n	801be8c <RadioSetRxConfig+0x320>
 801be66:	bf00      	nop
 801be68:	20001be0 	.word	0x20001be0
 801be6c:	20000134 	.word	0x20000134
 801be70:	20001c18 	.word	0x20001c18
 801be74:	20001bee 	.word	0x20001bee
 801be78:	08021964 	.word	0x08021964
 801be7c:	0802196c 	.word	0x0802196c
 801be80:	08022040 	.word	0x08022040
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801be84:	4b3b      	ldr	r3, [pc, #236]	; (801bf74 <RadioSetRxConfig+0x408>)
 801be86:	2200      	movs	r2, #0
 801be88:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801be8c:	4b39      	ldr	r3, [pc, #228]	; (801bf74 <RadioSetRxConfig+0x408>)
 801be8e:	2201      	movs	r2, #1
 801be90:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801be92:	4b38      	ldr	r3, [pc, #224]	; (801bf74 <RadioSetRxConfig+0x408>)
 801be94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801be98:	2b05      	cmp	r3, #5
 801be9a:	d004      	beq.n	801bea6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801be9c:	4b35      	ldr	r3, [pc, #212]	; (801bf74 <RadioSetRxConfig+0x408>)
 801be9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bea2:	2b06      	cmp	r3, #6
 801bea4:	d10a      	bne.n	801bebc <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801bea6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bea8:	2b0b      	cmp	r3, #11
 801beaa:	d803      	bhi.n	801beb4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801beac:	4b31      	ldr	r3, [pc, #196]	; (801bf74 <RadioSetRxConfig+0x408>)
 801beae:	220c      	movs	r2, #12
 801beb0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801beb2:	e006      	b.n	801bec2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801beb4:	4a2f      	ldr	r2, [pc, #188]	; (801bf74 <RadioSetRxConfig+0x408>)
 801beb6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801beb8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801beba:	e002      	b.n	801bec2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bebc:	4a2d      	ldr	r2, [pc, #180]	; (801bf74 <RadioSetRxConfig+0x408>)
 801bebe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bec0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bec2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bec6:	4b2b      	ldr	r3, [pc, #172]	; (801bf74 <RadioSetRxConfig+0x408>)
 801bec8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801beca:	4b2b      	ldr	r3, [pc, #172]	; (801bf78 <RadioSetRxConfig+0x40c>)
 801becc:	781a      	ldrb	r2, [r3, #0]
 801bece:	4b29      	ldr	r3, [pc, #164]	; (801bf74 <RadioSetRxConfig+0x408>)
 801bed0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bed2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801bed6:	4b27      	ldr	r3, [pc, #156]	; (801bf74 <RadioSetRxConfig+0x408>)
 801bed8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bedc:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801bee0:	4b24      	ldr	r3, [pc, #144]	; (801bf74 <RadioSetRxConfig+0x408>)
 801bee2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bee6:	f000 fbd6 	bl	801c696 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801beea:	2001      	movs	r0, #1
 801beec:	f7ff fd6a 	bl	801b9c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bef0:	4822      	ldr	r0, [pc, #136]	; (801bf7c <RadioSetRxConfig+0x410>)
 801bef2:	f002 f9c5 	bl	801e280 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bef6:	4822      	ldr	r0, [pc, #136]	; (801bf80 <RadioSetRxConfig+0x414>)
 801bef8:	f002 fa94 	bl	801e424 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801befc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801befe:	b2db      	uxtb	r3, r3
 801bf00:	4618      	mov	r0, r3
 801bf02:	f001 ff2e 	bl	801dd62 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801bf06:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bf0a:	f002 fbe7 	bl	801e6dc <SUBGRF_ReadRegister>
 801bf0e:	4603      	mov	r3, r0
 801bf10:	f003 0301 	and.w	r3, r3, #1
 801bf14:	b2db      	uxtb	r3, r3
 801bf16:	4619      	mov	r1, r3
 801bf18:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bf1c:	f002 fbca 	bl	801e6b4 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bf20:	4b14      	ldr	r3, [pc, #80]	; (801bf74 <RadioSetRxConfig+0x408>)
 801bf22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bf26:	2b01      	cmp	r3, #1
 801bf28:	d10d      	bne.n	801bf46 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801bf2a:	f240 7036 	movw	r0, #1846	; 0x736
 801bf2e:	f002 fbd5 	bl	801e6dc <SUBGRF_ReadRegister>
 801bf32:	4603      	mov	r3, r0
 801bf34:	f023 0304 	bic.w	r3, r3, #4
 801bf38:	b2db      	uxtb	r3, r3
 801bf3a:	4619      	mov	r1, r3
 801bf3c:	f240 7036 	movw	r0, #1846	; 0x736
 801bf40:	f002 fbb8 	bl	801e6b4 <SUBGRF_WriteRegister>
 801bf44:	e00c      	b.n	801bf60 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801bf46:	f240 7036 	movw	r0, #1846	; 0x736
 801bf4a:	f002 fbc7 	bl	801e6dc <SUBGRF_ReadRegister>
 801bf4e:	4603      	mov	r3, r0
 801bf50:	f043 0304 	orr.w	r3, r3, #4
 801bf54:	b2db      	uxtb	r3, r3
 801bf56:	4619      	mov	r1, r3
 801bf58:	f240 7036 	movw	r0, #1846	; 0x736
 801bf5c:	f002 fbaa 	bl	801e6b4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801bf60:	4b04      	ldr	r3, [pc, #16]	; (801bf74 <RadioSetRxConfig+0x408>)
 801bf62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bf66:	609a      	str	r2, [r3, #8]
            break;
 801bf68:	e000      	b.n	801bf6c <RadioSetRxConfig+0x400>
            break;
 801bf6a:	bf00      	nop
    }
}
 801bf6c:	bf00      	nop
 801bf6e:	3728      	adds	r7, #40	; 0x28
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}
 801bf74:	20001be0 	.word	0x20001be0
 801bf78:	20000134 	.word	0x20000134
 801bf7c:	20001c18 	.word	0x20001c18
 801bf80:	20001bee 	.word	0x20001bee

0801bf84 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b086      	sub	sp, #24
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	60ba      	str	r2, [r7, #8]
 801bf8c:	607b      	str	r3, [r7, #4]
 801bf8e:	4603      	mov	r3, r0
 801bf90:	73fb      	strb	r3, [r7, #15]
 801bf92:	460b      	mov	r3, r1
 801bf94:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801bf96:	f002 fe74 	bl	801ec82 <RFW_DeInit>
    switch( modem )
 801bf9a:	7bfb      	ldrb	r3, [r7, #15]
 801bf9c:	2b04      	cmp	r3, #4
 801bf9e:	f000 80c7 	beq.w	801c130 <RadioSetTxConfig+0x1ac>
 801bfa2:	2b04      	cmp	r3, #4
 801bfa4:	f300 80d6 	bgt.w	801c154 <RadioSetTxConfig+0x1d0>
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d002      	beq.n	801bfb2 <RadioSetTxConfig+0x2e>
 801bfac:	2b01      	cmp	r3, #1
 801bfae:	d059      	beq.n	801c064 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801bfb0:	e0d0      	b.n	801c154 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bfb2:	4b77      	ldr	r3, [pc, #476]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bfb4:	2200      	movs	r2, #0
 801bfb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bfba:	4a75      	ldr	r2, [pc, #468]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bfbc:	6a3b      	ldr	r3, [r7, #32]
 801bfbe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bfc0:	4b73      	ldr	r3, [pc, #460]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bfc2:	220b      	movs	r2, #11
 801bfc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bfc8:	6878      	ldr	r0, [r7, #4]
 801bfca:	f002 fd8d 	bl	801eae8 <SUBGRF_GetFskBandwidthRegValue>
 801bfce:	4603      	mov	r3, r0
 801bfd0:	461a      	mov	r2, r3
 801bfd2:	4b6f      	ldr	r3, [pc, #444]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bfd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801bfd8:	4a6d      	ldr	r2, [pc, #436]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bfda:	68bb      	ldr	r3, [r7, #8]
 801bfdc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bfde:	4b6c      	ldr	r3, [pc, #432]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bfe4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bfe6:	00db      	lsls	r3, r3, #3
 801bfe8:	b29a      	uxth	r2, r3
 801bfea:	4b69      	ldr	r3, [pc, #420]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bfec:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bfee:	4b68      	ldr	r3, [pc, #416]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bff0:	2204      	movs	r2, #4
 801bff2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801bff4:	4b66      	ldr	r3, [pc, #408]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bff6:	2218      	movs	r2, #24
 801bff8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bffa:	4b65      	ldr	r3, [pc, #404]	; (801c190 <RadioSetTxConfig+0x20c>)
 801bffc:	2200      	movs	r2, #0
 801bffe:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801c000:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c004:	f083 0301 	eor.w	r3, r3, #1
 801c008:	b2db      	uxtb	r3, r3
 801c00a:	461a      	mov	r2, r3
 801c00c:	4b60      	ldr	r3, [pc, #384]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c00e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801c010:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801c014:	2b00      	cmp	r3, #0
 801c016:	d003      	beq.n	801c020 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801c018:	4b5d      	ldr	r3, [pc, #372]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c01a:	22f2      	movs	r2, #242	; 0xf2
 801c01c:	75da      	strb	r2, [r3, #23]
 801c01e:	e002      	b.n	801c026 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801c020:	4b5b      	ldr	r3, [pc, #364]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c022:	2201      	movs	r2, #1
 801c024:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801c026:	4b5a      	ldr	r3, [pc, #360]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c028:	2201      	movs	r2, #1
 801c02a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801c02c:	f000 fb33 	bl	801c696 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801c030:	2000      	movs	r0, #0
 801c032:	f7ff fcc7 	bl	801b9c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c036:	4857      	ldr	r0, [pc, #348]	; (801c194 <RadioSetTxConfig+0x210>)
 801c038:	f002 f922 	bl	801e280 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c03c:	4856      	ldr	r0, [pc, #344]	; (801c198 <RadioSetTxConfig+0x214>)
 801c03e:	f002 f9f1 	bl	801e424 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801c042:	4a56      	ldr	r2, [pc, #344]	; (801c19c <RadioSetTxConfig+0x218>)
 801c044:	f107 0310 	add.w	r3, r7, #16
 801c048:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c04c:	e883 0003 	stmia.w	r3, {r0, r1}
 801c050:	f107 0310 	add.w	r3, r7, #16
 801c054:	4618      	mov	r0, r3
 801c056:	f001 fcae 	bl	801d9b6 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801c05a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801c05e:	f001 fcf9 	bl	801da54 <SUBGRF_SetWhiteningSeed>
            break;
 801c062:	e078      	b.n	801c156 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801c064:	4b4a      	ldr	r3, [pc, #296]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c066:	2201      	movs	r2, #1
 801c068:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801c06c:	6a3b      	ldr	r3, [r7, #32]
 801c06e:	b2da      	uxtb	r2, r3
 801c070:	4b47      	ldr	r3, [pc, #284]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801c076:	4a4a      	ldr	r2, [pc, #296]	; (801c1a0 <RadioSetTxConfig+0x21c>)
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	4413      	add	r3, r2
 801c07c:	781a      	ldrb	r2, [r3, #0]
 801c07e:	4b44      	ldr	r3, [pc, #272]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801c084:	4a42      	ldr	r2, [pc, #264]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c086:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c08a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	2b00      	cmp	r3, #0
 801c092:	d105      	bne.n	801c0a0 <RadioSetTxConfig+0x11c>
 801c094:	6a3b      	ldr	r3, [r7, #32]
 801c096:	2b0b      	cmp	r3, #11
 801c098:	d008      	beq.n	801c0ac <RadioSetTxConfig+0x128>
 801c09a:	6a3b      	ldr	r3, [r7, #32]
 801c09c:	2b0c      	cmp	r3, #12
 801c09e:	d005      	beq.n	801c0ac <RadioSetTxConfig+0x128>
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	2b01      	cmp	r3, #1
 801c0a4:	d107      	bne.n	801c0b6 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c0a6:	6a3b      	ldr	r3, [r7, #32]
 801c0a8:	2b0c      	cmp	r3, #12
 801c0aa:	d104      	bne.n	801c0b6 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801c0ac:	4b38      	ldr	r3, [pc, #224]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0ae:	2201      	movs	r2, #1
 801c0b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801c0b4:	e003      	b.n	801c0be <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801c0b6:	4b36      	ldr	r3, [pc, #216]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0b8:	2200      	movs	r2, #0
 801c0ba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801c0be:	4b34      	ldr	r3, [pc, #208]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0c0:	2201      	movs	r2, #1
 801c0c2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c0c4:	4b32      	ldr	r3, [pc, #200]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801c0ca:	2b05      	cmp	r3, #5
 801c0cc:	d004      	beq.n	801c0d8 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801c0ce:	4b30      	ldr	r3, [pc, #192]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801c0d4:	2b06      	cmp	r3, #6
 801c0d6:	d10a      	bne.n	801c0ee <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801c0d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c0da:	2b0b      	cmp	r3, #11
 801c0dc:	d803      	bhi.n	801c0e6 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801c0de:	4b2c      	ldr	r3, [pc, #176]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0e0:	220c      	movs	r2, #12
 801c0e2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801c0e4:	e006      	b.n	801c0f4 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c0e6:	4a2a      	ldr	r2, [pc, #168]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c0ea:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801c0ec:	e002      	b.n	801c0f4 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801c0ee:	4a28      	ldr	r2, [pc, #160]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c0f2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801c0f4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801c0f8:	4b25      	ldr	r3, [pc, #148]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c0fa:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801c0fc:	4b29      	ldr	r3, [pc, #164]	; (801c1a4 <RadioSetTxConfig+0x220>)
 801c0fe:	781a      	ldrb	r2, [r3, #0]
 801c100:	4b23      	ldr	r3, [pc, #140]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c102:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801c104:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c108:	4b21      	ldr	r3, [pc, #132]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c10a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801c10e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801c112:	4b1f      	ldr	r3, [pc, #124]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c114:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801c118:	f000 fabd 	bl	801c696 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801c11c:	2001      	movs	r0, #1
 801c11e:	f7ff fc51 	bl	801b9c4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c122:	481c      	ldr	r0, [pc, #112]	; (801c194 <RadioSetTxConfig+0x210>)
 801c124:	f002 f8ac 	bl	801e280 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c128:	481b      	ldr	r0, [pc, #108]	; (801c198 <RadioSetTxConfig+0x214>)
 801c12a:	f002 f97b 	bl	801e424 <SUBGRF_SetPacketParams>
            break;
 801c12e:	e012      	b.n	801c156 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801c130:	2004      	movs	r0, #4
 801c132:	f7ff fc47 	bl	801b9c4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801c136:	4b16      	ldr	r3, [pc, #88]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c138:	2202      	movs	r2, #2
 801c13a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801c13e:	4a14      	ldr	r2, [pc, #80]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c140:	6a3b      	ldr	r3, [r7, #32]
 801c142:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801c144:	4b12      	ldr	r3, [pc, #72]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c146:	2216      	movs	r2, #22
 801c148:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801c14c:	4811      	ldr	r0, [pc, #68]	; (801c194 <RadioSetTxConfig+0x210>)
 801c14e:	f002 f897 	bl	801e280 <SUBGRF_SetModulationParams>
            break;
 801c152:	e000      	b.n	801c156 <RadioSetTxConfig+0x1d2>
            break;
 801c154:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801c156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c15a:	4618      	mov	r0, r3
 801c15c:	f002 fbc6 	bl	801e8ec <SUBGRF_SetRfTxPower>
 801c160:	4603      	mov	r3, r0
 801c162:	461a      	mov	r2, r3
 801c164:	4b0a      	ldr	r3, [pc, #40]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c166:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c16a:	210e      	movs	r1, #14
 801c16c:	f640 101f 	movw	r0, #2335	; 0x91f
 801c170:	f002 faa0 	bl	801e6b4 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801c174:	4b06      	ldr	r3, [pc, #24]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c176:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c17a:	4618      	mov	r0, r3
 801c17c:	f002 fd95 	bl	801ecaa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801c180:	4a03      	ldr	r2, [pc, #12]	; (801c190 <RadioSetTxConfig+0x20c>)
 801c182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c184:	6053      	str	r3, [r2, #4]
}
 801c186:	bf00      	nop
 801c188:	3718      	adds	r7, #24
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bd80      	pop	{r7, pc}
 801c18e:	bf00      	nop
 801c190:	20001be0 	.word	0x20001be0
 801c194:	20001c18 	.word	0x20001c18
 801c198:	20001bee 	.word	0x20001bee
 801c19c:	0802196c 	.word	0x0802196c
 801c1a0:	08022040 	.word	0x08022040
 801c1a4:	20000134 	.word	0x20000134

0801c1a8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801c1a8:	b480      	push	{r7}
 801c1aa:	b083      	sub	sp, #12
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
    return true;
 801c1b0:	2301      	movs	r3, #1
}
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	370c      	adds	r7, #12
 801c1b6:	46bd      	mov	sp, r7
 801c1b8:	bc80      	pop	{r7}
 801c1ba:	4770      	bx	lr

0801c1bc <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801c1bc:	b480      	push	{r7}
 801c1be:	b085      	sub	sp, #20
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	4603      	mov	r3, r0
 801c1c4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801c1ca:	79fb      	ldrb	r3, [r7, #7]
 801c1cc:	2b0a      	cmp	r3, #10
 801c1ce:	d83e      	bhi.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
 801c1d0:	a201      	add	r2, pc, #4	; (adr r2, 801c1d8 <RadioGetLoRaBandwidthInHz+0x1c>)
 801c1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c1d6:	bf00      	nop
 801c1d8:	0801c205 	.word	0x0801c205
 801c1dc:	0801c215 	.word	0x0801c215
 801c1e0:	0801c225 	.word	0x0801c225
 801c1e4:	0801c235 	.word	0x0801c235
 801c1e8:	0801c23d 	.word	0x0801c23d
 801c1ec:	0801c243 	.word	0x0801c243
 801c1f0:	0801c249 	.word	0x0801c249
 801c1f4:	0801c24f 	.word	0x0801c24f
 801c1f8:	0801c20d 	.word	0x0801c20d
 801c1fc:	0801c21d 	.word	0x0801c21d
 801c200:	0801c22d 	.word	0x0801c22d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801c204:	f641 6384 	movw	r3, #7812	; 0x1e84
 801c208:	60fb      	str	r3, [r7, #12]
        break;
 801c20a:	e020      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801c20c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801c210:	60fb      	str	r3, [r7, #12]
        break;
 801c212:	e01c      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801c214:	f643 5309 	movw	r3, #15625	; 0x3d09
 801c218:	60fb      	str	r3, [r7, #12]
        break;
 801c21a:	e018      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801c21c:	f245 1361 	movw	r3, #20833	; 0x5161
 801c220:	60fb      	str	r3, [r7, #12]
        break;
 801c222:	e014      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801c224:	f647 2312 	movw	r3, #31250	; 0x7a12
 801c228:	60fb      	str	r3, [r7, #12]
        break;
 801c22a:	e010      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801c22c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801c230:	60fb      	str	r3, [r7, #12]
        break;
 801c232:	e00c      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801c234:	f24f 4324 	movw	r3, #62500	; 0xf424
 801c238:	60fb      	str	r3, [r7, #12]
        break;
 801c23a:	e008      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801c23c:	4b07      	ldr	r3, [pc, #28]	; (801c25c <RadioGetLoRaBandwidthInHz+0xa0>)
 801c23e:	60fb      	str	r3, [r7, #12]
        break;
 801c240:	e005      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801c242:	4b07      	ldr	r3, [pc, #28]	; (801c260 <RadioGetLoRaBandwidthInHz+0xa4>)
 801c244:	60fb      	str	r3, [r7, #12]
        break;
 801c246:	e002      	b.n	801c24e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801c248:	4b06      	ldr	r3, [pc, #24]	; (801c264 <RadioGetLoRaBandwidthInHz+0xa8>)
 801c24a:	60fb      	str	r3, [r7, #12]
        break;
 801c24c:	bf00      	nop
    }

    return bandwidthInHz;
 801c24e:	68fb      	ldr	r3, [r7, #12]
}
 801c250:	4618      	mov	r0, r3
 801c252:	3714      	adds	r7, #20
 801c254:	46bd      	mov	sp, r7
 801c256:	bc80      	pop	{r7}
 801c258:	4770      	bx	lr
 801c25a:	bf00      	nop
 801c25c:	0001e848 	.word	0x0001e848
 801c260:	0003d090 	.word	0x0003d090
 801c264:	0007a120 	.word	0x0007a120

0801c268 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c268:	b480      	push	{r7}
 801c26a:	b083      	sub	sp, #12
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
 801c270:	4608      	mov	r0, r1
 801c272:	4611      	mov	r1, r2
 801c274:	461a      	mov	r2, r3
 801c276:	4603      	mov	r3, r0
 801c278:	70fb      	strb	r3, [r7, #3]
 801c27a:	460b      	mov	r3, r1
 801c27c:	803b      	strh	r3, [r7, #0]
 801c27e:	4613      	mov	r3, r2
 801c280:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801c282:	883b      	ldrh	r3, [r7, #0]
 801c284:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c286:	78ba      	ldrb	r2, [r7, #2]
 801c288:	f082 0201 	eor.w	r2, r2, #1
 801c28c:	b2d2      	uxtb	r2, r2
 801c28e:	2a00      	cmp	r2, #0
 801c290:	d001      	beq.n	801c296 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801c292:	2208      	movs	r2, #8
 801c294:	e000      	b.n	801c298 <RadioGetGfskTimeOnAirNumerator+0x30>
 801c296:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801c298:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c29a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801c29e:	7c3b      	ldrb	r3, [r7, #16]
 801c2a0:	7d39      	ldrb	r1, [r7, #20]
 801c2a2:	2900      	cmp	r1, #0
 801c2a4:	d001      	beq.n	801c2aa <RadioGetGfskTimeOnAirNumerator+0x42>
 801c2a6:	2102      	movs	r1, #2
 801c2a8:	e000      	b.n	801c2ac <RadioGetGfskTimeOnAirNumerator+0x44>
 801c2aa:	2100      	movs	r1, #0
 801c2ac:	440b      	add	r3, r1
 801c2ae:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c2b0:	4413      	add	r3, r2
}
 801c2b2:	4618      	mov	r0, r3
 801c2b4:	370c      	adds	r7, #12
 801c2b6:	46bd      	mov	sp, r7
 801c2b8:	bc80      	pop	{r7}
 801c2ba:	4770      	bx	lr

0801c2bc <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c2bc:	b480      	push	{r7}
 801c2be:	b08b      	sub	sp, #44	; 0x2c
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	60f8      	str	r0, [r7, #12]
 801c2c4:	60b9      	str	r1, [r7, #8]
 801c2c6:	4611      	mov	r1, r2
 801c2c8:	461a      	mov	r2, r3
 801c2ca:	460b      	mov	r3, r1
 801c2cc:	71fb      	strb	r3, [r7, #7]
 801c2ce:	4613      	mov	r3, r2
 801c2d0:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801c2d2:	79fb      	ldrb	r3, [r7, #7]
 801c2d4:	3304      	adds	r3, #4
 801c2d6:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801c2d8:	2300      	movs	r3, #0
 801c2da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	2b05      	cmp	r3, #5
 801c2e2:	d002      	beq.n	801c2ea <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801c2e4:	68bb      	ldr	r3, [r7, #8]
 801c2e6:	2b06      	cmp	r3, #6
 801c2e8:	d104      	bne.n	801c2f4 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801c2ea:	88bb      	ldrh	r3, [r7, #4]
 801c2ec:	2b0b      	cmp	r3, #11
 801c2ee:	d801      	bhi.n	801c2f4 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801c2f0:	230c      	movs	r3, #12
 801c2f2:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d105      	bne.n	801c306 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801c2fa:	68bb      	ldr	r3, [r7, #8]
 801c2fc:	2b0b      	cmp	r3, #11
 801c2fe:	d008      	beq.n	801c312 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c300:	68bb      	ldr	r3, [r7, #8]
 801c302:	2b0c      	cmp	r3, #12
 801c304:	d005      	beq.n	801c312 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	2b01      	cmp	r3, #1
 801c30a:	d105      	bne.n	801c318 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c30c:	68bb      	ldr	r3, [r7, #8]
 801c30e:	2b0c      	cmp	r3, #12
 801c310:	d102      	bne.n	801c318 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801c312:	2301      	movs	r3, #1
 801c314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c318:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801c31c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801c31e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801c322:	2a00      	cmp	r2, #0
 801c324:	d001      	beq.n	801c32a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801c326:	2210      	movs	r2, #16
 801c328:	e000      	b.n	801c32c <RadioGetLoRaTimeOnAirNumerator+0x70>
 801c32a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c32c:	4413      	add	r3, r2
 801c32e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801c330:	68bb      	ldr	r3, [r7, #8]
 801c332:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801c334:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801c336:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c33a:	2a00      	cmp	r2, #0
 801c33c:	d001      	beq.n	801c342 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801c33e:	2200      	movs	r2, #0
 801c340:	e000      	b.n	801c344 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801c342:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801c344:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c346:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801c348:	68bb      	ldr	r3, [r7, #8]
 801c34a:	2b06      	cmp	r3, #6
 801c34c:	d803      	bhi.n	801c356 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801c34e:	68bb      	ldr	r3, [r7, #8]
 801c350:	009b      	lsls	r3, r3, #2
 801c352:	623b      	str	r3, [r7, #32]
 801c354:	e00e      	b.n	801c374 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801c356:	69fb      	ldr	r3, [r7, #28]
 801c358:	3308      	adds	r3, #8
 801c35a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801c35c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c360:	2b00      	cmp	r3, #0
 801c362:	d004      	beq.n	801c36e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801c364:	68bb      	ldr	r3, [r7, #8]
 801c366:	3b02      	subs	r3, #2
 801c368:	009b      	lsls	r3, r3, #2
 801c36a:	623b      	str	r3, [r7, #32]
 801c36c:	e002      	b.n	801c374 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801c36e:	68bb      	ldr	r3, [r7, #8]
 801c370:	009b      	lsls	r3, r3, #2
 801c372:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c374:	69fb      	ldr	r3, [r7, #28]
 801c376:	2b00      	cmp	r3, #0
 801c378:	da01      	bge.n	801c37e <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c37a:	2300      	movs	r3, #0
 801c37c:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c37e:	69fa      	ldr	r2, [r7, #28]
 801c380:	6a3b      	ldr	r3, [r7, #32]
 801c382:	4413      	add	r3, r2
 801c384:	1e5a      	subs	r2, r3, #1
 801c386:	6a3b      	ldr	r3, [r7, #32]
 801c388:	fb92 f3f3 	sdiv	r3, r2, r3
 801c38c:	697a      	ldr	r2, [r7, #20]
 801c38e:	fb03 f202 	mul.w	r2, r3, r2
 801c392:	88bb      	ldrh	r3, [r7, #4]
 801c394:	4413      	add	r3, r2
    int32_t intermediate =
 801c396:	330c      	adds	r3, #12
 801c398:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c39a:	68bb      	ldr	r3, [r7, #8]
 801c39c:	2b06      	cmp	r3, #6
 801c39e:	d802      	bhi.n	801c3a6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c3a0:	69bb      	ldr	r3, [r7, #24]
 801c3a2:	3302      	adds	r3, #2
 801c3a4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c3a6:	69bb      	ldr	r3, [r7, #24]
 801c3a8:	009b      	lsls	r3, r3, #2
 801c3aa:	1c5a      	adds	r2, r3, #1
 801c3ac:	68bb      	ldr	r3, [r7, #8]
 801c3ae:	3b02      	subs	r3, #2
 801c3b0:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	372c      	adds	r7, #44	; 0x2c
 801c3b8:	46bd      	mov	sp, r7
 801c3ba:	bc80      	pop	{r7}
 801c3bc:	4770      	bx	lr
	...

0801c3c0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c3c0:	b580      	push	{r7, lr}
 801c3c2:	b08a      	sub	sp, #40	; 0x28
 801c3c4:	af04      	add	r7, sp, #16
 801c3c6:	60b9      	str	r1, [r7, #8]
 801c3c8:	607a      	str	r2, [r7, #4]
 801c3ca:	461a      	mov	r2, r3
 801c3cc:	4603      	mov	r3, r0
 801c3ce:	73fb      	strb	r3, [r7, #15]
 801c3d0:	4613      	mov	r3, r2
 801c3d2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c3d4:	2300      	movs	r3, #0
 801c3d6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c3d8:	2301      	movs	r3, #1
 801c3da:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c3dc:	7bfb      	ldrb	r3, [r7, #15]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d002      	beq.n	801c3e8 <RadioTimeOnAir+0x28>
 801c3e2:	2b01      	cmp	r3, #1
 801c3e4:	d017      	beq.n	801c416 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c3e6:	e035      	b.n	801c454 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c3e8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c3ec:	8c3a      	ldrh	r2, [r7, #32]
 801c3ee:	7bb9      	ldrb	r1, [r7, #14]
 801c3f0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c3f4:	9301      	str	r3, [sp, #4]
 801c3f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c3fa:	9300      	str	r3, [sp, #0]
 801c3fc:	4603      	mov	r3, r0
 801c3fe:	6878      	ldr	r0, [r7, #4]
 801c400:	f7ff ff32 	bl	801c268 <RadioGetGfskTimeOnAirNumerator>
 801c404:	4603      	mov	r3, r0
 801c406:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c40a:	fb02 f303 	mul.w	r3, r2, r3
 801c40e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	613b      	str	r3, [r7, #16]
        break;
 801c414:	e01e      	b.n	801c454 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c416:	8c39      	ldrh	r1, [r7, #32]
 801c418:	7bba      	ldrb	r2, [r7, #14]
 801c41a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c41e:	9302      	str	r3, [sp, #8]
 801c420:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c424:	9301      	str	r3, [sp, #4]
 801c426:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c42a:	9300      	str	r3, [sp, #0]
 801c42c:	460b      	mov	r3, r1
 801c42e:	6879      	ldr	r1, [r7, #4]
 801c430:	68b8      	ldr	r0, [r7, #8]
 801c432:	f7ff ff43 	bl	801c2bc <RadioGetLoRaTimeOnAirNumerator>
 801c436:	4603      	mov	r3, r0
 801c438:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c43c:	fb02 f303 	mul.w	r3, r2, r3
 801c440:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c442:	4a0a      	ldr	r2, [pc, #40]	; (801c46c <RadioTimeOnAir+0xac>)
 801c444:	68bb      	ldr	r3, [r7, #8]
 801c446:	4413      	add	r3, r2
 801c448:	781b      	ldrb	r3, [r3, #0]
 801c44a:	4618      	mov	r0, r3
 801c44c:	f7ff feb6 	bl	801c1bc <RadioGetLoRaBandwidthInHz>
 801c450:	6138      	str	r0, [r7, #16]
        break;
 801c452:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801c454:	697a      	ldr	r2, [r7, #20]
 801c456:	693b      	ldr	r3, [r7, #16]
 801c458:	4413      	add	r3, r2
 801c45a:	1e5a      	subs	r2, r3, #1
 801c45c:	693b      	ldr	r3, [r7, #16]
 801c45e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c462:	4618      	mov	r0, r3
 801c464:	3718      	adds	r7, #24
 801c466:	46bd      	mov	sp, r7
 801c468:	bd80      	pop	{r7, pc}
 801c46a:	bf00      	nop
 801c46c:	08022040 	.word	0x08022040

0801c470 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b084      	sub	sp, #16
 801c474:	af00      	add	r7, sp, #0
 801c476:	6078      	str	r0, [r7, #4]
 801c478:	460b      	mov	r3, r1
 801c47a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c47c:	2300      	movs	r3, #0
 801c47e:	2200      	movs	r2, #0
 801c480:	f240 2101 	movw	r1, #513	; 0x201
 801c484:	f240 2001 	movw	r0, #513	; 0x201
 801c488:	f001 fd64 	bl	801df54 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801c48c:	4b73      	ldr	r3, [pc, #460]	; (801c65c <RadioSend+0x1ec>)
 801c48e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c492:	2101      	movs	r1, #1
 801c494:	4618      	mov	r0, r3
 801c496:	f002 fa01 	bl	801e89c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801c49a:	4b70      	ldr	r3, [pc, #448]	; (801c65c <RadioSend+0x1ec>)
 801c49c:	781b      	ldrb	r3, [r3, #0]
 801c49e:	2b01      	cmp	r3, #1
 801c4a0:	d112      	bne.n	801c4c8 <RadioSend+0x58>
 801c4a2:	4b6e      	ldr	r3, [pc, #440]	; (801c65c <RadioSend+0x1ec>)
 801c4a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c4a8:	2b06      	cmp	r3, #6
 801c4aa:	d10d      	bne.n	801c4c8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c4ac:	f640 0089 	movw	r0, #2185	; 0x889
 801c4b0:	f002 f914 	bl	801e6dc <SUBGRF_ReadRegister>
 801c4b4:	4603      	mov	r3, r0
 801c4b6:	f023 0304 	bic.w	r3, r3, #4
 801c4ba:	b2db      	uxtb	r3, r3
 801c4bc:	4619      	mov	r1, r3
 801c4be:	f640 0089 	movw	r0, #2185	; 0x889
 801c4c2:	f002 f8f7 	bl	801e6b4 <SUBGRF_WriteRegister>
 801c4c6:	e00c      	b.n	801c4e2 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c4c8:	f640 0089 	movw	r0, #2185	; 0x889
 801c4cc:	f002 f906 	bl	801e6dc <SUBGRF_ReadRegister>
 801c4d0:	4603      	mov	r3, r0
 801c4d2:	f043 0304 	orr.w	r3, r3, #4
 801c4d6:	b2db      	uxtb	r3, r3
 801c4d8:	4619      	mov	r1, r3
 801c4da:	f640 0089 	movw	r0, #2185	; 0x889
 801c4de:	f002 f8e9 	bl	801e6b4 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801c4e2:	4b5e      	ldr	r3, [pc, #376]	; (801c65c <RadioSend+0x1ec>)
 801c4e4:	781b      	ldrb	r3, [r3, #0]
 801c4e6:	2b04      	cmp	r3, #4
 801c4e8:	f200 80a8 	bhi.w	801c63c <RadioSend+0x1cc>
 801c4ec:	a201      	add	r2, pc, #4	; (adr r2, 801c4f4 <RadioSend+0x84>)
 801c4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c4f2:	bf00      	nop
 801c4f4:	0801c523 	.word	0x0801c523
 801c4f8:	0801c509 	.word	0x0801c509
 801c4fc:	0801c523 	.word	0x0801c523
 801c500:	0801c585 	.word	0x0801c585
 801c504:	0801c5a5 	.word	0x0801c5a5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c508:	4a54      	ldr	r2, [pc, #336]	; (801c65c <RadioSend+0x1ec>)
 801c50a:	78fb      	ldrb	r3, [r7, #3]
 801c50c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c50e:	4854      	ldr	r0, [pc, #336]	; (801c660 <RadioSend+0x1f0>)
 801c510:	f001 ff88 	bl	801e424 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c514:	78fb      	ldrb	r3, [r7, #3]
 801c516:	2200      	movs	r2, #0
 801c518:	4619      	mov	r1, r3
 801c51a:	6878      	ldr	r0, [r7, #4]
 801c51c:	f001 fa38 	bl	801d990 <SUBGRF_SendPayload>
            break;
 801c520:	e08d      	b.n	801c63e <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c522:	f002 fbb4 	bl	801ec8e <RFW_Is_Init>
 801c526:	4603      	mov	r3, r0
 801c528:	2b01      	cmp	r3, #1
 801c52a:	d11e      	bne.n	801c56a <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c52c:	f107 020d 	add.w	r2, r7, #13
 801c530:	78fb      	ldrb	r3, [r7, #3]
 801c532:	4619      	mov	r1, r3
 801c534:	6878      	ldr	r0, [r7, #4]
 801c536:	f002 fbc2 	bl	801ecbe <RFW_TransmitInit>
 801c53a:	4603      	mov	r3, r0
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d10c      	bne.n	801c55a <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c540:	7b7a      	ldrb	r2, [r7, #13]
 801c542:	4b46      	ldr	r3, [pc, #280]	; (801c65c <RadioSend+0x1ec>)
 801c544:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c546:	4846      	ldr	r0, [pc, #280]	; (801c660 <RadioSend+0x1f0>)
 801c548:	f001 ff6c 	bl	801e424 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801c54c:	7b7b      	ldrb	r3, [r7, #13]
 801c54e:	2200      	movs	r2, #0
 801c550:	4619      	mov	r1, r3
 801c552:	6878      	ldr	r0, [r7, #4]
 801c554:	f001 fa1c 	bl	801d990 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c558:	e071      	b.n	801c63e <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801c55a:	4b42      	ldr	r3, [pc, #264]	; (801c664 <RadioSend+0x1f4>)
 801c55c:	2201      	movs	r2, #1
 801c55e:	2100      	movs	r1, #0
 801c560:	2002      	movs	r0, #2
 801c562:	f003 fb93 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801c566:	2303      	movs	r3, #3
 801c568:	e073      	b.n	801c652 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c56a:	4a3c      	ldr	r2, [pc, #240]	; (801c65c <RadioSend+0x1ec>)
 801c56c:	78fb      	ldrb	r3, [r7, #3]
 801c56e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c570:	483b      	ldr	r0, [pc, #236]	; (801c660 <RadioSend+0x1f0>)
 801c572:	f001 ff57 	bl	801e424 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801c576:	78fb      	ldrb	r3, [r7, #3]
 801c578:	2200      	movs	r2, #0
 801c57a:	4619      	mov	r1, r3
 801c57c:	6878      	ldr	r0, [r7, #4]
 801c57e:	f001 fa07 	bl	801d990 <SUBGRF_SendPayload>
            break;
 801c582:	e05c      	b.n	801c63e <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c584:	4b35      	ldr	r3, [pc, #212]	; (801c65c <RadioSend+0x1ec>)
 801c586:	2202      	movs	r2, #2
 801c588:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c58a:	4a34      	ldr	r2, [pc, #208]	; (801c65c <RadioSend+0x1ec>)
 801c58c:	78fb      	ldrb	r3, [r7, #3]
 801c58e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c590:	4833      	ldr	r0, [pc, #204]	; (801c660 <RadioSend+0x1f0>)
 801c592:	f001 ff47 	bl	801e424 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c596:	78fb      	ldrb	r3, [r7, #3]
 801c598:	2200      	movs	r2, #0
 801c59a:	4619      	mov	r1, r3
 801c59c:	6878      	ldr	r0, [r7, #4]
 801c59e:	f001 f9f7 	bl	801d990 <SUBGRF_SendPayload>
            break;
 801c5a2:	e04c      	b.n	801c63e <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c5a4:	78fb      	ldrb	r3, [r7, #3]
 801c5a6:	461a      	mov	r2, r3
 801c5a8:	6879      	ldr	r1, [r7, #4]
 801c5aa:	482f      	ldr	r0, [pc, #188]	; (801c668 <RadioSend+0x1f8>)
 801c5ac:	f000 fcca 	bl	801cf44 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c5b0:	4b2a      	ldr	r3, [pc, #168]	; (801c65c <RadioSend+0x1ec>)
 801c5b2:	2202      	movs	r2, #2
 801c5b4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c5b6:	78fb      	ldrb	r3, [r7, #3]
 801c5b8:	3301      	adds	r3, #1
 801c5ba:	b2da      	uxtb	r2, r3
 801c5bc:	4b27      	ldr	r3, [pc, #156]	; (801c65c <RadioSend+0x1ec>)
 801c5be:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5c0:	4827      	ldr	r0, [pc, #156]	; (801c660 <RadioSend+0x1f0>)
 801c5c2:	f001 ff2f 	bl	801e424 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801c5c6:	2100      	movs	r1, #0
 801c5c8:	20f1      	movs	r0, #241	; 0xf1
 801c5ca:	f000 f966 	bl	801c89a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801c5ce:	2100      	movs	r1, #0
 801c5d0:	20f0      	movs	r0, #240	; 0xf0
 801c5d2:	f000 f962 	bl	801c89a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c5d6:	4b21      	ldr	r3, [pc, #132]	; (801c65c <RadioSend+0x1ec>)
 801c5d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c5da:	2b64      	cmp	r3, #100	; 0x64
 801c5dc:	d108      	bne.n	801c5f0 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801c5de:	2170      	movs	r1, #112	; 0x70
 801c5e0:	20f3      	movs	r0, #243	; 0xf3
 801c5e2:	f000 f95a 	bl	801c89a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801c5e6:	211d      	movs	r1, #29
 801c5e8:	20f2      	movs	r0, #242	; 0xf2
 801c5ea:	f000 f956 	bl	801c89a <RadioWrite>
 801c5ee:	e007      	b.n	801c600 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801c5f0:	21e1      	movs	r1, #225	; 0xe1
 801c5f2:	20f3      	movs	r0, #243	; 0xf3
 801c5f4:	f000 f951 	bl	801c89a <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801c5f8:	2104      	movs	r1, #4
 801c5fa:	20f2      	movs	r0, #242	; 0xf2
 801c5fc:	f000 f94d 	bl	801c89a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c600:	78fb      	ldrb	r3, [r7, #3]
 801c602:	b29b      	uxth	r3, r3
 801c604:	00db      	lsls	r3, r3, #3
 801c606:	b29b      	uxth	r3, r3
 801c608:	3302      	adds	r3, #2
 801c60a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c60c:	89fb      	ldrh	r3, [r7, #14]
 801c60e:	0a1b      	lsrs	r3, r3, #8
 801c610:	b29b      	uxth	r3, r3
 801c612:	b2db      	uxtb	r3, r3
 801c614:	4619      	mov	r1, r3
 801c616:	20f4      	movs	r0, #244	; 0xf4
 801c618:	f000 f93f 	bl	801c89a <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801c61c:	89fb      	ldrh	r3, [r7, #14]
 801c61e:	b2db      	uxtb	r3, r3
 801c620:	4619      	mov	r1, r3
 801c622:	20f5      	movs	r0, #245	; 0xf5
 801c624:	f000 f939 	bl	801c89a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801c628:	78fb      	ldrb	r3, [r7, #3]
 801c62a:	3301      	adds	r3, #1
 801c62c:	b2db      	uxtb	r3, r3
 801c62e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c632:	4619      	mov	r1, r3
 801c634:	480c      	ldr	r0, [pc, #48]	; (801c668 <RadioSend+0x1f8>)
 801c636:	f001 f9ab 	bl	801d990 <SUBGRF_SendPayload>
            break;
 801c63a:	e000      	b.n	801c63e <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c63c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c63e:	4b07      	ldr	r3, [pc, #28]	; (801c65c <RadioSend+0x1ec>)
 801c640:	685b      	ldr	r3, [r3, #4]
 801c642:	4619      	mov	r1, r3
 801c644:	4809      	ldr	r0, [pc, #36]	; (801c66c <RadioSend+0x1fc>)
 801c646:	f003 f987 	bl	801f958 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801c64a:	4808      	ldr	r0, [pc, #32]	; (801c66c <RadioSend+0x1fc>)
 801c64c:	f003 f8a6 	bl	801f79c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801c650:	2300      	movs	r3, #0
}
 801c652:	4618      	mov	r0, r3
 801c654:	3710      	adds	r7, #16
 801c656:	46bd      	mov	sp, r7
 801c658:	bd80      	pop	{r7, pc}
 801c65a:	bf00      	nop
 801c65c:	20001be0 	.word	0x20001be0
 801c660:	20001bee 	.word	0x20001bee
 801c664:	08021974 	.word	0x08021974
 801c668:	20001adc 	.word	0x20001adc
 801c66c:	20001c3c 	.word	0x20001c3c

0801c670 <RadioSleep>:

static void RadioSleep( void )
{
 801c670:	b580      	push	{r7, lr}
 801c672:	b082      	sub	sp, #8
 801c674:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c676:	2300      	movs	r3, #0
 801c678:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c67a:	793b      	ldrb	r3, [r7, #4]
 801c67c:	f043 0304 	orr.w	r3, r3, #4
 801c680:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c682:	7938      	ldrb	r0, [r7, #4]
 801c684:	f001 fa60 	bl	801db48 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c688:	2002      	movs	r0, #2
 801c68a:	f7e6 f81f 	bl	80026cc <HAL_Delay>
}
 801c68e:	bf00      	nop
 801c690:	3708      	adds	r7, #8
 801c692:	46bd      	mov	sp, r7
 801c694:	bd80      	pop	{r7, pc}

0801c696 <RadioStandby>:

static void RadioStandby( void )
{
 801c696:	b580      	push	{r7, lr}
 801c698:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c69a:	2000      	movs	r0, #0
 801c69c:	f001 fa86 	bl	801dbac <SUBGRF_SetStandby>
}
 801c6a0:	bf00      	nop
 801c6a2:	bd80      	pop	{r7, pc}

0801c6a4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c6a4:	b580      	push	{r7, lr}
 801c6a6:	b082      	sub	sp, #8
 801c6a8:	af00      	add	r7, sp, #0
 801c6aa:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801c6ac:	f002 faef 	bl	801ec8e <RFW_Is_Init>
 801c6b0:	4603      	mov	r3, r0
 801c6b2:	2b01      	cmp	r3, #1
 801c6b4:	d102      	bne.n	801c6bc <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801c6b6:	f002 fb12 	bl	801ecde <RFW_ReceiveInit>
 801c6ba:	e007      	b.n	801c6cc <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c6bc:	2300      	movs	r3, #0
 801c6be:	2200      	movs	r2, #0
 801c6c0:	f240 2162 	movw	r1, #610	; 0x262
 801c6c4:	f240 2062 	movw	r0, #610	; 0x262
 801c6c8:	f001 fc44 	bl	801df54 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d006      	beq.n	801c6e0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c6d2:	6879      	ldr	r1, [r7, #4]
 801c6d4:	4811      	ldr	r0, [pc, #68]	; (801c71c <RadioRx+0x78>)
 801c6d6:	f003 f93f 	bl	801f958 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c6da:	4810      	ldr	r0, [pc, #64]	; (801c71c <RadioRx+0x78>)
 801c6dc:	f003 f85e 	bl	801f79c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c6e0:	4b0f      	ldr	r3, [pc, #60]	; (801c720 <RadioRx+0x7c>)
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c6e6:	4b0e      	ldr	r3, [pc, #56]	; (801c720 <RadioRx+0x7c>)
 801c6e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c6ec:	2100      	movs	r1, #0
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f002 f8d4 	bl	801e89c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c6f4:	4b0a      	ldr	r3, [pc, #40]	; (801c720 <RadioRx+0x7c>)
 801c6f6:	785b      	ldrb	r3, [r3, #1]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d004      	beq.n	801c706 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c6fc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c700:	f001 fa90 	bl	801dc24 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c704:	e005      	b.n	801c712 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c706:	4b06      	ldr	r3, [pc, #24]	; (801c720 <RadioRx+0x7c>)
 801c708:	689b      	ldr	r3, [r3, #8]
 801c70a:	019b      	lsls	r3, r3, #6
 801c70c:	4618      	mov	r0, r3
 801c70e:	f001 fa89 	bl	801dc24 <SUBGRF_SetRx>
}
 801c712:	bf00      	nop
 801c714:	3708      	adds	r7, #8
 801c716:	46bd      	mov	sp, r7
 801c718:	bd80      	pop	{r7, pc}
 801c71a:	bf00      	nop
 801c71c:	20001c54 	.word	0x20001c54
 801c720:	20001be0 	.word	0x20001be0

0801c724 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b082      	sub	sp, #8
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801c72c:	f002 faaf 	bl	801ec8e <RFW_Is_Init>
 801c730:	4603      	mov	r3, r0
 801c732:	2b01      	cmp	r3, #1
 801c734:	d102      	bne.n	801c73c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801c736:	f002 fad2 	bl	801ecde <RFW_ReceiveInit>
 801c73a:	e007      	b.n	801c74c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c73c:	2300      	movs	r3, #0
 801c73e:	2200      	movs	r2, #0
 801c740:	f240 2162 	movw	r1, #610	; 0x262
 801c744:	f240 2062 	movw	r0, #610	; 0x262
 801c748:	f001 fc04 	bl	801df54 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c74c:	687b      	ldr	r3, [r7, #4]
 801c74e:	2b00      	cmp	r3, #0
 801c750:	d006      	beq.n	801c760 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c752:	6879      	ldr	r1, [r7, #4]
 801c754:	4811      	ldr	r0, [pc, #68]	; (801c79c <RadioRxBoosted+0x78>)
 801c756:	f003 f8ff 	bl	801f958 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c75a:	4810      	ldr	r0, [pc, #64]	; (801c79c <RadioRxBoosted+0x78>)
 801c75c:	f003 f81e 	bl	801f79c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c760:	4b0f      	ldr	r3, [pc, #60]	; (801c7a0 <RadioRxBoosted+0x7c>)
 801c762:	2200      	movs	r2, #0
 801c764:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c766:	4b0e      	ldr	r3, [pc, #56]	; (801c7a0 <RadioRxBoosted+0x7c>)
 801c768:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c76c:	2100      	movs	r1, #0
 801c76e:	4618      	mov	r0, r3
 801c770:	f002 f894 	bl	801e89c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c774:	4b0a      	ldr	r3, [pc, #40]	; (801c7a0 <RadioRxBoosted+0x7c>)
 801c776:	785b      	ldrb	r3, [r3, #1]
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d004      	beq.n	801c786 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c77c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c780:	f001 fa70 	bl	801dc64 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c784:	e005      	b.n	801c792 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c786:	4b06      	ldr	r3, [pc, #24]	; (801c7a0 <RadioRxBoosted+0x7c>)
 801c788:	689b      	ldr	r3, [r3, #8]
 801c78a:	019b      	lsls	r3, r3, #6
 801c78c:	4618      	mov	r0, r3
 801c78e:	f001 fa69 	bl	801dc64 <SUBGRF_SetRxBoosted>
}
 801c792:	bf00      	nop
 801c794:	3708      	adds	r7, #8
 801c796:	46bd      	mov	sp, r7
 801c798:	bd80      	pop	{r7, pc}
 801c79a:	bf00      	nop
 801c79c:	20001c54 	.word	0x20001c54
 801c7a0:	20001be0 	.word	0x20001be0

0801c7a4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c7a4:	b580      	push	{r7, lr}
 801c7a6:	b082      	sub	sp, #8
 801c7a8:	af00      	add	r7, sp, #0
 801c7aa:	6078      	str	r0, [r7, #4]
 801c7ac:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	005a      	lsls	r2, r3, #1
 801c7b2:	683b      	ldr	r3, [r7, #0]
 801c7b4:	4413      	add	r3, r2
 801c7b6:	4a0c      	ldr	r2, [pc, #48]	; (801c7e8 <RadioSetRxDutyCycle+0x44>)
 801c7b8:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c7ba:	2300      	movs	r3, #0
 801c7bc:	2200      	movs	r2, #0
 801c7be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c7c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c7c6:	f001 fbc5 	bl	801df54 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c7ca:	4b07      	ldr	r3, [pc, #28]	; (801c7e8 <RadioSetRxDutyCycle+0x44>)
 801c7cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c7d0:	2100      	movs	r1, #0
 801c7d2:	4618      	mov	r0, r3
 801c7d4:	f002 f862 	bl	801e89c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c7d8:	6839      	ldr	r1, [r7, #0]
 801c7da:	6878      	ldr	r0, [r7, #4]
 801c7dc:	f001 fa66 	bl	801dcac <SUBGRF_SetRxDutyCycle>
}
 801c7e0:	bf00      	nop
 801c7e2:	3708      	adds	r7, #8
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	bd80      	pop	{r7, pc}
 801c7e8:	20001be0 	.word	0x20001be0

0801c7ec <RadioStartCad>:

static void RadioStartCad( void )
{
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c7f0:	4b09      	ldr	r3, [pc, #36]	; (801c818 <RadioStartCad+0x2c>)
 801c7f2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c7f6:	2100      	movs	r1, #0
 801c7f8:	4618      	mov	r0, r3
 801c7fa:	f002 f84f 	bl	801e89c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c7fe:	2300      	movs	r3, #0
 801c800:	2200      	movs	r2, #0
 801c802:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c806:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c80a:	f001 fba3 	bl	801df54 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c80e:	f001 fa79 	bl	801dd04 <SUBGRF_SetCad>
}
 801c812:	bf00      	nop
 801c814:	bd80      	pop	{r7, pc}
 801c816:	bf00      	nop
 801c818:	20001be0 	.word	0x20001be0

0801c81c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c81c:	b580      	push	{r7, lr}
 801c81e:	b084      	sub	sp, #16
 801c820:	af00      	add	r7, sp, #0
 801c822:	6078      	str	r0, [r7, #4]
 801c824:	460b      	mov	r3, r1
 801c826:	70fb      	strb	r3, [r7, #3]
 801c828:	4613      	mov	r3, r2
 801c82a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801c82c:	883b      	ldrh	r3, [r7, #0]
 801c82e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c832:	fb02 f303 	mul.w	r3, r2, r3
 801c836:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	f001 fbe7 	bl	801e00c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c83e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c842:	4618      	mov	r0, r3
 801c844:	f002 f852 	bl	801e8ec <SUBGRF_SetRfTxPower>
 801c848:	4603      	mov	r3, r0
 801c84a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c84c:	210e      	movs	r1, #14
 801c84e:	f640 101f 	movw	r0, #2335	; 0x91f
 801c852:	f001 ff2f 	bl	801e6b4 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801c856:	7afb      	ldrb	r3, [r7, #11]
 801c858:	2101      	movs	r1, #1
 801c85a:	4618      	mov	r0, r3
 801c85c:	f002 f81e 	bl	801e89c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c860:	f001 fa5e 	bl	801dd20 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c864:	68f9      	ldr	r1, [r7, #12]
 801c866:	4805      	ldr	r0, [pc, #20]	; (801c87c <RadioSetTxContinuousWave+0x60>)
 801c868:	f003 f876 	bl	801f958 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c86c:	4803      	ldr	r0, [pc, #12]	; (801c87c <RadioSetTxContinuousWave+0x60>)
 801c86e:	f002 ff95 	bl	801f79c <UTIL_TIMER_Start>
}
 801c872:	bf00      	nop
 801c874:	3710      	adds	r7, #16
 801c876:	46bd      	mov	sp, r7
 801c878:	bd80      	pop	{r7, pc}
 801c87a:	bf00      	nop
 801c87c:	20001c3c 	.word	0x20001c3c

0801c880 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c880:	b580      	push	{r7, lr}
 801c882:	b082      	sub	sp, #8
 801c884:	af00      	add	r7, sp, #0
 801c886:	4603      	mov	r3, r0
 801c888:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801c88a:	f001 fe80 	bl	801e58e <SUBGRF_GetRssiInst>
 801c88e:	4603      	mov	r3, r0
 801c890:	b21b      	sxth	r3, r3
}
 801c892:	4618      	mov	r0, r3
 801c894:	3708      	adds	r7, #8
 801c896:	46bd      	mov	sp, r7
 801c898:	bd80      	pop	{r7, pc}

0801c89a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801c89a:	b580      	push	{r7, lr}
 801c89c:	b082      	sub	sp, #8
 801c89e:	af00      	add	r7, sp, #0
 801c8a0:	4603      	mov	r3, r0
 801c8a2:	460a      	mov	r2, r1
 801c8a4:	80fb      	strh	r3, [r7, #6]
 801c8a6:	4613      	mov	r3, r2
 801c8a8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801c8aa:	797a      	ldrb	r2, [r7, #5]
 801c8ac:	88fb      	ldrh	r3, [r7, #6]
 801c8ae:	4611      	mov	r1, r2
 801c8b0:	4618      	mov	r0, r3
 801c8b2:	f001 feff 	bl	801e6b4 <SUBGRF_WriteRegister>
}
 801c8b6:	bf00      	nop
 801c8b8:	3708      	adds	r7, #8
 801c8ba:	46bd      	mov	sp, r7
 801c8bc:	bd80      	pop	{r7, pc}

0801c8be <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801c8be:	b580      	push	{r7, lr}
 801c8c0:	b082      	sub	sp, #8
 801c8c2:	af00      	add	r7, sp, #0
 801c8c4:	4603      	mov	r3, r0
 801c8c6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801c8c8:	88fb      	ldrh	r3, [r7, #6]
 801c8ca:	4618      	mov	r0, r3
 801c8cc:	f001 ff06 	bl	801e6dc <SUBGRF_ReadRegister>
 801c8d0:	4603      	mov	r3, r0
}
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	3708      	adds	r7, #8
 801c8d6:	46bd      	mov	sp, r7
 801c8d8:	bd80      	pop	{r7, pc}

0801c8da <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c8da:	b580      	push	{r7, lr}
 801c8dc:	b082      	sub	sp, #8
 801c8de:	af00      	add	r7, sp, #0
 801c8e0:	4603      	mov	r3, r0
 801c8e2:	6039      	str	r1, [r7, #0]
 801c8e4:	80fb      	strh	r3, [r7, #6]
 801c8e6:	4613      	mov	r3, r2
 801c8e8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801c8ea:	797b      	ldrb	r3, [r7, #5]
 801c8ec:	b29a      	uxth	r2, r3
 801c8ee:	88fb      	ldrh	r3, [r7, #6]
 801c8f0:	6839      	ldr	r1, [r7, #0]
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	f001 ff06 	bl	801e704 <SUBGRF_WriteRegisters>
}
 801c8f8:	bf00      	nop
 801c8fa:	3708      	adds	r7, #8
 801c8fc:	46bd      	mov	sp, r7
 801c8fe:	bd80      	pop	{r7, pc}

0801c900 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c900:	b580      	push	{r7, lr}
 801c902:	b082      	sub	sp, #8
 801c904:	af00      	add	r7, sp, #0
 801c906:	4603      	mov	r3, r0
 801c908:	6039      	str	r1, [r7, #0]
 801c90a:	80fb      	strh	r3, [r7, #6]
 801c90c:	4613      	mov	r3, r2
 801c90e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801c910:	797b      	ldrb	r3, [r7, #5]
 801c912:	b29a      	uxth	r2, r3
 801c914:	88fb      	ldrh	r3, [r7, #6]
 801c916:	6839      	ldr	r1, [r7, #0]
 801c918:	4618      	mov	r0, r3
 801c91a:	f001 ff15 	bl	801e748 <SUBGRF_ReadRegisters>
}
 801c91e:	bf00      	nop
 801c920:	3708      	adds	r7, #8
 801c922:	46bd      	mov	sp, r7
 801c924:	bd80      	pop	{r7, pc}
	...

0801c928 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801c928:	b580      	push	{r7, lr}
 801c92a:	b082      	sub	sp, #8
 801c92c:	af00      	add	r7, sp, #0
 801c92e:	4603      	mov	r3, r0
 801c930:	460a      	mov	r2, r1
 801c932:	71fb      	strb	r3, [r7, #7]
 801c934:	4613      	mov	r3, r2
 801c936:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801c938:	79fb      	ldrb	r3, [r7, #7]
 801c93a:	2b01      	cmp	r3, #1
 801c93c:	d10a      	bne.n	801c954 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801c93e:	4a0e      	ldr	r2, [pc, #56]	; (801c978 <RadioSetMaxPayloadLength+0x50>)
 801c940:	79bb      	ldrb	r3, [r7, #6]
 801c942:	7013      	strb	r3, [r2, #0]
 801c944:	4b0c      	ldr	r3, [pc, #48]	; (801c978 <RadioSetMaxPayloadLength+0x50>)
 801c946:	781a      	ldrb	r2, [r3, #0]
 801c948:	4b0c      	ldr	r3, [pc, #48]	; (801c97c <RadioSetMaxPayloadLength+0x54>)
 801c94a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c94c:	480c      	ldr	r0, [pc, #48]	; (801c980 <RadioSetMaxPayloadLength+0x58>)
 801c94e:	f001 fd69 	bl	801e424 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801c952:	e00d      	b.n	801c970 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801c954:	4b09      	ldr	r3, [pc, #36]	; (801c97c <RadioSetMaxPayloadLength+0x54>)
 801c956:	7d5b      	ldrb	r3, [r3, #21]
 801c958:	2b01      	cmp	r3, #1
 801c95a:	d109      	bne.n	801c970 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801c95c:	4a06      	ldr	r2, [pc, #24]	; (801c978 <RadioSetMaxPayloadLength+0x50>)
 801c95e:	79bb      	ldrb	r3, [r7, #6]
 801c960:	7013      	strb	r3, [r2, #0]
 801c962:	4b05      	ldr	r3, [pc, #20]	; (801c978 <RadioSetMaxPayloadLength+0x50>)
 801c964:	781a      	ldrb	r2, [r3, #0]
 801c966:	4b05      	ldr	r3, [pc, #20]	; (801c97c <RadioSetMaxPayloadLength+0x54>)
 801c968:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c96a:	4805      	ldr	r0, [pc, #20]	; (801c980 <RadioSetMaxPayloadLength+0x58>)
 801c96c:	f001 fd5a 	bl	801e424 <SUBGRF_SetPacketParams>
}
 801c970:	bf00      	nop
 801c972:	3708      	adds	r7, #8
 801c974:	46bd      	mov	sp, r7
 801c976:	bd80      	pop	{r7, pc}
 801c978:	20000134 	.word	0x20000134
 801c97c:	20001be0 	.word	0x20001be0
 801c980:	20001bee 	.word	0x20001bee

0801c984 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801c984:	b580      	push	{r7, lr}
 801c986:	b082      	sub	sp, #8
 801c988:	af00      	add	r7, sp, #0
 801c98a:	4603      	mov	r3, r0
 801c98c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801c98e:	4a13      	ldr	r2, [pc, #76]	; (801c9dc <RadioSetPublicNetwork+0x58>)
 801c990:	79fb      	ldrb	r3, [r7, #7]
 801c992:	7313      	strb	r3, [r2, #12]
 801c994:	4b11      	ldr	r3, [pc, #68]	; (801c9dc <RadioSetPublicNetwork+0x58>)
 801c996:	7b1a      	ldrb	r2, [r3, #12]
 801c998:	4b10      	ldr	r3, [pc, #64]	; (801c9dc <RadioSetPublicNetwork+0x58>)
 801c99a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801c99c:	2001      	movs	r0, #1
 801c99e:	f7ff f811 	bl	801b9c4 <RadioSetModem>
    if( enable == true )
 801c9a2:	79fb      	ldrb	r3, [r7, #7]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d00a      	beq.n	801c9be <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801c9a8:	2134      	movs	r1, #52	; 0x34
 801c9aa:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c9ae:	f001 fe81 	bl	801e6b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801c9b2:	2144      	movs	r1, #68	; 0x44
 801c9b4:	f240 7041 	movw	r0, #1857	; 0x741
 801c9b8:	f001 fe7c 	bl	801e6b4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801c9bc:	e009      	b.n	801c9d2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801c9be:	2114      	movs	r1, #20
 801c9c0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c9c4:	f001 fe76 	bl	801e6b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801c9c8:	2124      	movs	r1, #36	; 0x24
 801c9ca:	f240 7041 	movw	r0, #1857	; 0x741
 801c9ce:	f001 fe71 	bl	801e6b4 <SUBGRF_WriteRegister>
}
 801c9d2:	bf00      	nop
 801c9d4:	3708      	adds	r7, #8
 801c9d6:	46bd      	mov	sp, r7
 801c9d8:	bd80      	pop	{r7, pc}
 801c9da:	bf00      	nop
 801c9dc:	20001be0 	.word	0x20001be0

0801c9e0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801c9e0:	b580      	push	{r7, lr}
 801c9e2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801c9e4:	f001 ffb6 	bl	801e954 <SUBGRF_GetRadioWakeUpTime>
 801c9e8:	4603      	mov	r3, r0
 801c9ea:	3303      	adds	r3, #3
}
 801c9ec:	4618      	mov	r0, r3
 801c9ee:	bd80      	pop	{r7, pc}

0801c9f0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b082      	sub	sp, #8
 801c9f4:	af00      	add	r7, sp, #0
 801c9f6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801c9f8:	f000 f80e 	bl	801ca18 <RadioOnTxTimeoutProcess>
}
 801c9fc:	bf00      	nop
 801c9fe:	3708      	adds	r7, #8
 801ca00:	46bd      	mov	sp, r7
 801ca02:	bd80      	pop	{r7, pc}

0801ca04 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801ca04:	b580      	push	{r7, lr}
 801ca06:	b082      	sub	sp, #8
 801ca08:	af00      	add	r7, sp, #0
 801ca0a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801ca0c:	f000 f818 	bl	801ca40 <RadioOnRxTimeoutProcess>
}
 801ca10:	bf00      	nop
 801ca12:	3708      	adds	r7, #8
 801ca14:	46bd      	mov	sp, r7
 801ca16:	bd80      	pop	{r7, pc}

0801ca18 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ca1c:	4b07      	ldr	r3, [pc, #28]	; (801ca3c <RadioOnTxTimeoutProcess+0x24>)
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d008      	beq.n	801ca36 <RadioOnTxTimeoutProcess+0x1e>
 801ca24:	4b05      	ldr	r3, [pc, #20]	; (801ca3c <RadioOnTxTimeoutProcess+0x24>)
 801ca26:	681b      	ldr	r3, [r3, #0]
 801ca28:	685b      	ldr	r3, [r3, #4]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d003      	beq.n	801ca36 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801ca2e:	4b03      	ldr	r3, [pc, #12]	; (801ca3c <RadioOnTxTimeoutProcess+0x24>)
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	685b      	ldr	r3, [r3, #4]
 801ca34:	4798      	blx	r3
    }
}
 801ca36:	bf00      	nop
 801ca38:	bd80      	pop	{r7, pc}
 801ca3a:	bf00      	nop
 801ca3c:	20001bdc 	.word	0x20001bdc

0801ca40 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801ca40:	b580      	push	{r7, lr}
 801ca42:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ca44:	4b07      	ldr	r3, [pc, #28]	; (801ca64 <RadioOnRxTimeoutProcess+0x24>)
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	d008      	beq.n	801ca5e <RadioOnRxTimeoutProcess+0x1e>
 801ca4c:	4b05      	ldr	r3, [pc, #20]	; (801ca64 <RadioOnRxTimeoutProcess+0x24>)
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	68db      	ldr	r3, [r3, #12]
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d003      	beq.n	801ca5e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801ca56:	4b03      	ldr	r3, [pc, #12]	; (801ca64 <RadioOnRxTimeoutProcess+0x24>)
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	68db      	ldr	r3, [r3, #12]
 801ca5c:	4798      	blx	r3
    }
}
 801ca5e:	bf00      	nop
 801ca60:	bd80      	pop	{r7, pc}
 801ca62:	bf00      	nop
 801ca64:	20001bdc 	.word	0x20001bdc

0801ca68 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801ca68:	b580      	push	{r7, lr}
 801ca6a:	b082      	sub	sp, #8
 801ca6c:	af00      	add	r7, sp, #0
 801ca6e:	4603      	mov	r3, r0
 801ca70:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801ca72:	4a05      	ldr	r2, [pc, #20]	; (801ca88 <RadioOnDioIrq+0x20>)
 801ca74:	88fb      	ldrh	r3, [r7, #6]
 801ca76:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801ca7a:	f000 f807 	bl	801ca8c <RadioIrqProcess>
}
 801ca7e:	bf00      	nop
 801ca80:	3708      	adds	r7, #8
 801ca82:	46bd      	mov	sp, r7
 801ca84:	bd80      	pop	{r7, pc}
 801ca86:	bf00      	nop
 801ca88:	20001be0 	.word	0x20001be0

0801ca8c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801ca8c:	b590      	push	{r4, r7, lr}
 801ca8e:	b083      	sub	sp, #12
 801ca90:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801ca92:	2300      	movs	r3, #0
 801ca94:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801ca96:	2300      	movs	r3, #0
 801ca98:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801ca9a:	4ba8      	ldr	r3, [pc, #672]	; (801cd3c <RadioIrqProcess+0x2b0>)
 801ca9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801caa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801caa4:	f000 810c 	beq.w	801ccc0 <RadioIrqProcess+0x234>
 801caa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801caac:	f300 81e8 	bgt.w	801ce80 <RadioIrqProcess+0x3f4>
 801cab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cab4:	f000 80f0 	beq.w	801cc98 <RadioIrqProcess+0x20c>
 801cab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cabc:	f300 81e0 	bgt.w	801ce80 <RadioIrqProcess+0x3f4>
 801cac0:	2b80      	cmp	r3, #128	; 0x80
 801cac2:	f000 80d5 	beq.w	801cc70 <RadioIrqProcess+0x1e4>
 801cac6:	2b80      	cmp	r3, #128	; 0x80
 801cac8:	f300 81da 	bgt.w	801ce80 <RadioIrqProcess+0x3f4>
 801cacc:	2b20      	cmp	r3, #32
 801cace:	dc49      	bgt.n	801cb64 <RadioIrqProcess+0xd8>
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	f340 81d5 	ble.w	801ce80 <RadioIrqProcess+0x3f4>
 801cad6:	3b01      	subs	r3, #1
 801cad8:	2b1f      	cmp	r3, #31
 801cada:	f200 81d1 	bhi.w	801ce80 <RadioIrqProcess+0x3f4>
 801cade:	a201      	add	r2, pc, #4	; (adr r2, 801cae4 <RadioIrqProcess+0x58>)
 801cae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cae4:	0801cb6d 	.word	0x0801cb6d
 801cae8:	0801cba7 	.word	0x0801cba7
 801caec:	0801ce81 	.word	0x0801ce81
 801caf0:	0801cd5d 	.word	0x0801cd5d
 801caf4:	0801ce81 	.word	0x0801ce81
 801caf8:	0801ce81 	.word	0x0801ce81
 801cafc:	0801ce81 	.word	0x0801ce81
 801cb00:	0801cdd9 	.word	0x0801cdd9
 801cb04:	0801ce81 	.word	0x0801ce81
 801cb08:	0801ce81 	.word	0x0801ce81
 801cb0c:	0801ce81 	.word	0x0801ce81
 801cb10:	0801ce81 	.word	0x0801ce81
 801cb14:	0801ce81 	.word	0x0801ce81
 801cb18:	0801ce81 	.word	0x0801ce81
 801cb1c:	0801ce81 	.word	0x0801ce81
 801cb20:	0801cdf5 	.word	0x0801cdf5
 801cb24:	0801ce81 	.word	0x0801ce81
 801cb28:	0801ce81 	.word	0x0801ce81
 801cb2c:	0801ce81 	.word	0x0801ce81
 801cb30:	0801ce81 	.word	0x0801ce81
 801cb34:	0801ce81 	.word	0x0801ce81
 801cb38:	0801ce81 	.word	0x0801ce81
 801cb3c:	0801ce81 	.word	0x0801ce81
 801cb40:	0801ce81 	.word	0x0801ce81
 801cb44:	0801ce81 	.word	0x0801ce81
 801cb48:	0801ce81 	.word	0x0801ce81
 801cb4c:	0801ce81 	.word	0x0801ce81
 801cb50:	0801ce81 	.word	0x0801ce81
 801cb54:	0801ce81 	.word	0x0801ce81
 801cb58:	0801ce81 	.word	0x0801ce81
 801cb5c:	0801ce81 	.word	0x0801ce81
 801cb60:	0801ce03 	.word	0x0801ce03
 801cb64:	2b40      	cmp	r3, #64	; 0x40
 801cb66:	f000 816d 	beq.w	801ce44 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801cb6a:	e189      	b.n	801ce80 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801cb6c:	4874      	ldr	r0, [pc, #464]	; (801cd40 <RadioIrqProcess+0x2b4>)
 801cb6e:	f002 fe83 	bl	801f878 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801cb72:	2000      	movs	r0, #0
 801cb74:	f001 f81a 	bl	801dbac <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801cb78:	f002 f890 	bl	801ec9c <RFW_Is_LongPacketModeEnabled>
 801cb7c:	4603      	mov	r3, r0
 801cb7e:	2b01      	cmp	r3, #1
 801cb80:	d101      	bne.n	801cb86 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801cb82:	f002 f8b4 	bl	801ecee <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801cb86:	4b6f      	ldr	r3, [pc, #444]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cb88:	681b      	ldr	r3, [r3, #0]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	f000 817a 	beq.w	801ce84 <RadioIrqProcess+0x3f8>
 801cb90:	4b6c      	ldr	r3, [pc, #432]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cb92:	681b      	ldr	r3, [r3, #0]
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	f000 8174 	beq.w	801ce84 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801cb9c:	4b69      	ldr	r3, [pc, #420]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cb9e:	681b      	ldr	r3, [r3, #0]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	4798      	blx	r3
        break;
 801cba4:	e16e      	b.n	801ce84 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801cba6:	4868      	ldr	r0, [pc, #416]	; (801cd48 <RadioIrqProcess+0x2bc>)
 801cba8:	f002 fe66 	bl	801f878 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cbac:	4b63      	ldr	r3, [pc, #396]	; (801cd3c <RadioIrqProcess+0x2b0>)
 801cbae:	785b      	ldrb	r3, [r3, #1]
 801cbb0:	f083 0301 	eor.w	r3, r3, #1
 801cbb4:	b2db      	uxtb	r3, r3
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d014      	beq.n	801cbe4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801cbba:	2000      	movs	r0, #0
 801cbbc:	f000 fff6 	bl	801dbac <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801cbc0:	2100      	movs	r1, #0
 801cbc2:	f640 1002 	movw	r0, #2306	; 0x902
 801cbc6:	f001 fd75 	bl	801e6b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801cbca:	f640 1044 	movw	r0, #2372	; 0x944
 801cbce:	f001 fd85 	bl	801e6dc <SUBGRF_ReadRegister>
 801cbd2:	4603      	mov	r3, r0
 801cbd4:	f043 0302 	orr.w	r3, r3, #2
 801cbd8:	b2db      	uxtb	r3, r3
 801cbda:	4619      	mov	r1, r3
 801cbdc:	f640 1044 	movw	r0, #2372	; 0x944
 801cbe0:	f001 fd68 	bl	801e6b4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801cbe4:	1dfb      	adds	r3, r7, #7
 801cbe6:	22ff      	movs	r2, #255	; 0xff
 801cbe8:	4619      	mov	r1, r3
 801cbea:	4858      	ldr	r0, [pc, #352]	; (801cd4c <RadioIrqProcess+0x2c0>)
 801cbec:	f000 feae 	bl	801d94c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801cbf0:	4857      	ldr	r0, [pc, #348]	; (801cd50 <RadioIrqProcess+0x2c4>)
 801cbf2:	f001 fd0d 	bl	801e610 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801cbf6:	4b53      	ldr	r3, [pc, #332]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d036      	beq.n	801cc6c <RadioIrqProcess+0x1e0>
 801cbfe:	4b51      	ldr	r3, [pc, #324]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	689b      	ldr	r3, [r3, #8]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d031      	beq.n	801cc6c <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 801cc08:	4b4c      	ldr	r3, [pc, #304]	; (801cd3c <RadioIrqProcess+0x2b0>)
 801cc0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cc0e:	2b01      	cmp	r3, #1
 801cc10:	d10e      	bne.n	801cc30 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801cc12:	4b4c      	ldr	r3, [pc, #304]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cc14:	681b      	ldr	r3, [r3, #0]
 801cc16:	689c      	ldr	r4, [r3, #8]
 801cc18:	79fb      	ldrb	r3, [r7, #7]
 801cc1a:	b299      	uxth	r1, r3
 801cc1c:	4b47      	ldr	r3, [pc, #284]	; (801cd3c <RadioIrqProcess+0x2b0>)
 801cc1e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801cc22:	b21a      	sxth	r2, r3
 801cc24:	4b45      	ldr	r3, [pc, #276]	; (801cd3c <RadioIrqProcess+0x2b0>)
 801cc26:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801cc2a:	4848      	ldr	r0, [pc, #288]	; (801cd4c <RadioIrqProcess+0x2c0>)
 801cc2c:	47a0      	blx	r4
                break;
 801cc2e:	e01e      	b.n	801cc6e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801cc30:	4b42      	ldr	r3, [pc, #264]	; (801cd3c <RadioIrqProcess+0x2b0>)
 801cc32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc34:	463a      	mov	r2, r7
 801cc36:	4611      	mov	r1, r2
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f001 ff7d 	bl	801eb38 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801cc3e:	4b41      	ldr	r3, [pc, #260]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cc40:	681b      	ldr	r3, [r3, #0]
 801cc42:	689c      	ldr	r4, [r3, #8]
 801cc44:	79fb      	ldrb	r3, [r7, #7]
 801cc46:	b299      	uxth	r1, r3
 801cc48:	4b3c      	ldr	r3, [pc, #240]	; (801cd3c <RadioIrqProcess+0x2b0>)
 801cc4a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801cc4e:	b218      	sxth	r0, r3
 801cc50:	683b      	ldr	r3, [r7, #0]
 801cc52:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801cc56:	4a3f      	ldr	r2, [pc, #252]	; (801cd54 <RadioIrqProcess+0x2c8>)
 801cc58:	fb82 c203 	smull	ip, r2, r2, r3
 801cc5c:	1192      	asrs	r2, r2, #6
 801cc5e:	17db      	asrs	r3, r3, #31
 801cc60:	1ad3      	subs	r3, r2, r3
 801cc62:	b25b      	sxtb	r3, r3
 801cc64:	4602      	mov	r2, r0
 801cc66:	4839      	ldr	r0, [pc, #228]	; (801cd4c <RadioIrqProcess+0x2c0>)
 801cc68:	47a0      	blx	r4
                break;
 801cc6a:	e000      	b.n	801cc6e <RadioIrqProcess+0x1e2>
        }
 801cc6c:	bf00      	nop
        break;
 801cc6e:	e118      	b.n	801cea2 <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801cc70:	2000      	movs	r0, #0
 801cc72:	f000 ff9b 	bl	801dbac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801cc76:	4b33      	ldr	r3, [pc, #204]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	2b00      	cmp	r3, #0
 801cc7c:	f000 8104 	beq.w	801ce88 <RadioIrqProcess+0x3fc>
 801cc80:	4b30      	ldr	r3, [pc, #192]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cc82:	681b      	ldr	r3, [r3, #0]
 801cc84:	699b      	ldr	r3, [r3, #24]
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	f000 80fe 	beq.w	801ce88 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 801cc8c:	4b2d      	ldr	r3, [pc, #180]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	699b      	ldr	r3, [r3, #24]
 801cc92:	2000      	movs	r0, #0
 801cc94:	4798      	blx	r3
        break;
 801cc96:	e0f7      	b.n	801ce88 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801cc98:	2000      	movs	r0, #0
 801cc9a:	f000 ff87 	bl	801dbac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801cc9e:	4b29      	ldr	r3, [pc, #164]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	f000 80f2 	beq.w	801ce8c <RadioIrqProcess+0x400>
 801cca8:	4b26      	ldr	r3, [pc, #152]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	699b      	ldr	r3, [r3, #24]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	f000 80ec 	beq.w	801ce8c <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801ccb4:	4b23      	ldr	r3, [pc, #140]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801ccb6:	681b      	ldr	r3, [r3, #0]
 801ccb8:	699b      	ldr	r3, [r3, #24]
 801ccba:	2001      	movs	r0, #1
 801ccbc:	4798      	blx	r3
        break;
 801ccbe:	e0e5      	b.n	801ce8c <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801ccc0:	4b25      	ldr	r3, [pc, #148]	; (801cd58 <RadioIrqProcess+0x2cc>)
 801ccc2:	2201      	movs	r2, #1
 801ccc4:	2100      	movs	r1, #0
 801ccc6:	2002      	movs	r0, #2
 801ccc8:	f002 ffe0 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801cccc:	f000 fe24 	bl	801d918 <SUBGRF_GetOperatingMode>
 801ccd0:	4603      	mov	r3, r0
 801ccd2:	2b04      	cmp	r3, #4
 801ccd4:	d115      	bne.n	801cd02 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801ccd6:	481a      	ldr	r0, [pc, #104]	; (801cd40 <RadioIrqProcess+0x2b4>)
 801ccd8:	f002 fdce 	bl	801f878 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ccdc:	2000      	movs	r0, #0
 801ccde:	f000 ff65 	bl	801dbac <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801cce2:	4b18      	ldr	r3, [pc, #96]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cce4:	681b      	ldr	r3, [r3, #0]
 801cce6:	2b00      	cmp	r3, #0
 801cce8:	f000 80d2 	beq.w	801ce90 <RadioIrqProcess+0x404>
 801ccec:	4b15      	ldr	r3, [pc, #84]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	685b      	ldr	r3, [r3, #4]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	f000 80cc 	beq.w	801ce90 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 801ccf8:	4b12      	ldr	r3, [pc, #72]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801ccfa:	681b      	ldr	r3, [r3, #0]
 801ccfc:	685b      	ldr	r3, [r3, #4]
 801ccfe:	4798      	blx	r3
        break;
 801cd00:	e0c6      	b.n	801ce90 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801cd02:	f000 fe09 	bl	801d918 <SUBGRF_GetOperatingMode>
 801cd06:	4603      	mov	r3, r0
 801cd08:	2b05      	cmp	r3, #5
 801cd0a:	f040 80c1 	bne.w	801ce90 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801cd0e:	480e      	ldr	r0, [pc, #56]	; (801cd48 <RadioIrqProcess+0x2bc>)
 801cd10:	f002 fdb2 	bl	801f878 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801cd14:	2000      	movs	r0, #0
 801cd16:	f000 ff49 	bl	801dbac <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cd1a:	4b0a      	ldr	r3, [pc, #40]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cd1c:	681b      	ldr	r3, [r3, #0]
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	f000 80b6 	beq.w	801ce90 <RadioIrqProcess+0x404>
 801cd24:	4b07      	ldr	r3, [pc, #28]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cd26:	681b      	ldr	r3, [r3, #0]
 801cd28:	68db      	ldr	r3, [r3, #12]
 801cd2a:	2b00      	cmp	r3, #0
 801cd2c:	f000 80b0 	beq.w	801ce90 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801cd30:	4b04      	ldr	r3, [pc, #16]	; (801cd44 <RadioIrqProcess+0x2b8>)
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	68db      	ldr	r3, [r3, #12]
 801cd36:	4798      	blx	r3
        break;
 801cd38:	e0aa      	b.n	801ce90 <RadioIrqProcess+0x404>
 801cd3a:	bf00      	nop
 801cd3c:	20001be0 	.word	0x20001be0
 801cd40:	20001c3c 	.word	0x20001c3c
 801cd44:	20001bdc 	.word	0x20001bdc
 801cd48:	20001c54 	.word	0x20001c54
 801cd4c:	20001adc 	.word	0x20001adc
 801cd50:	20001c04 	.word	0x20001c04
 801cd54:	10624dd3 	.word	0x10624dd3
 801cd58:	0802198c 	.word	0x0802198c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801cd5c:	4b53      	ldr	r3, [pc, #332]	; (801ceac <RadioIrqProcess+0x420>)
 801cd5e:	2201      	movs	r2, #1
 801cd60:	2100      	movs	r1, #0
 801cd62:	2002      	movs	r0, #2
 801cd64:	f002 ff92 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801cd68:	4b51      	ldr	r3, [pc, #324]	; (801ceb0 <RadioIrqProcess+0x424>)
 801cd6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd6c:	2b00      	cmp	r3, #0
 801cd6e:	f000 8091 	beq.w	801ce94 <RadioIrqProcess+0x408>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801cd72:	4a50      	ldr	r2, [pc, #320]	; (801ceb4 <RadioIrqProcess+0x428>)
 801cd74:	4b4e      	ldr	r3, [pc, #312]	; (801ceb0 <RadioIrqProcess+0x424>)
 801cd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd78:	0c1b      	lsrs	r3, r3, #16
 801cd7a:	b2db      	uxtb	r3, r3
 801cd7c:	4619      	mov	r1, r3
 801cd7e:	f640 1003 	movw	r0, #2307	; 0x903
 801cd82:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801cd84:	4a4b      	ldr	r2, [pc, #300]	; (801ceb4 <RadioIrqProcess+0x428>)
 801cd86:	4b4a      	ldr	r3, [pc, #296]	; (801ceb0 <RadioIrqProcess+0x424>)
 801cd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd8a:	0a1b      	lsrs	r3, r3, #8
 801cd8c:	b2db      	uxtb	r3, r3
 801cd8e:	4619      	mov	r1, r3
 801cd90:	f640 1004 	movw	r0, #2308	; 0x904
 801cd94:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801cd96:	4a47      	ldr	r2, [pc, #284]	; (801ceb4 <RadioIrqProcess+0x428>)
 801cd98:	4b45      	ldr	r3, [pc, #276]	; (801ceb0 <RadioIrqProcess+0x424>)
 801cd9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd9c:	b2db      	uxtb	r3, r3
 801cd9e:	4619      	mov	r1, r3
 801cda0:	f640 1005 	movw	r0, #2309	; 0x905
 801cda4:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801cda6:	4c43      	ldr	r4, [pc, #268]	; (801ceb4 <RadioIrqProcess+0x428>)
 801cda8:	4b43      	ldr	r3, [pc, #268]	; (801ceb8 <RadioIrqProcess+0x42c>)
 801cdaa:	f640 1002 	movw	r0, #2306	; 0x902
 801cdae:	4798      	blx	r3
 801cdb0:	4603      	mov	r3, r0
 801cdb2:	f043 0301 	orr.w	r3, r3, #1
 801cdb6:	b2db      	uxtb	r3, r3
 801cdb8:	4619      	mov	r1, r3
 801cdba:	f640 1002 	movw	r0, #2306	; 0x902
 801cdbe:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801cdc0:	4b3b      	ldr	r3, [pc, #236]	; (801ceb0 <RadioIrqProcess+0x424>)
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	2200      	movs	r2, #0
 801cdca:	f240 2162 	movw	r1, #610	; 0x262
 801cdce:	f240 2062 	movw	r0, #610	; 0x262
 801cdd2:	f001 f8bf 	bl	801df54 <SUBGRF_SetDioIrqParams>
        break;
 801cdd6:	e05d      	b.n	801ce94 <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801cdd8:	4b38      	ldr	r3, [pc, #224]	; (801cebc <RadioIrqProcess+0x430>)
 801cdda:	2201      	movs	r2, #1
 801cddc:	2100      	movs	r1, #0
 801cdde:	2002      	movs	r0, #2
 801cde0:	f002 ff54 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801cde4:	f001 ff53 	bl	801ec8e <RFW_Is_Init>
 801cde8:	4603      	mov	r3, r0
 801cdea:	2b01      	cmp	r3, #1
 801cdec:	d154      	bne.n	801ce98 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 801cdee:	f001 ff84 	bl	801ecfa <RFW_ReceivePayload>
        break;
 801cdf2:	e051      	b.n	801ce98 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801cdf4:	4b32      	ldr	r3, [pc, #200]	; (801cec0 <RadioIrqProcess+0x434>)
 801cdf6:	2201      	movs	r2, #1
 801cdf8:	2100      	movs	r1, #0
 801cdfa:	2002      	movs	r0, #2
 801cdfc:	f002 ff46 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ce00:	e04f      	b.n	801cea2 <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801ce02:	4830      	ldr	r0, [pc, #192]	; (801cec4 <RadioIrqProcess+0x438>)
 801ce04:	f002 fd38 	bl	801f878 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801ce08:	4b29      	ldr	r3, [pc, #164]	; (801ceb0 <RadioIrqProcess+0x424>)
 801ce0a:	785b      	ldrb	r3, [r3, #1]
 801ce0c:	f083 0301 	eor.w	r3, r3, #1
 801ce10:	b2db      	uxtb	r3, r3
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	d002      	beq.n	801ce1c <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801ce16:	2000      	movs	r0, #0
 801ce18:	f000 fec8 	bl	801dbac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ce1c:	4b2a      	ldr	r3, [pc, #168]	; (801cec8 <RadioIrqProcess+0x43c>)
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	2b00      	cmp	r3, #0
 801ce22:	d03b      	beq.n	801ce9c <RadioIrqProcess+0x410>
 801ce24:	4b28      	ldr	r3, [pc, #160]	; (801cec8 <RadioIrqProcess+0x43c>)
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	68db      	ldr	r3, [r3, #12]
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d036      	beq.n	801ce9c <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801ce2e:	4b26      	ldr	r3, [pc, #152]	; (801cec8 <RadioIrqProcess+0x43c>)
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	68db      	ldr	r3, [r3, #12]
 801ce34:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801ce36:	4b25      	ldr	r3, [pc, #148]	; (801cecc <RadioIrqProcess+0x440>)
 801ce38:	2201      	movs	r2, #1
 801ce3a:	2100      	movs	r1, #0
 801ce3c:	2002      	movs	r0, #2
 801ce3e:	f002 ff25 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ce42:	e02b      	b.n	801ce9c <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801ce44:	4b22      	ldr	r3, [pc, #136]	; (801ced0 <RadioIrqProcess+0x444>)
 801ce46:	2201      	movs	r2, #1
 801ce48:	2100      	movs	r1, #0
 801ce4a:	2002      	movs	r0, #2
 801ce4c:	f002 ff1e 	bl	801fc8c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801ce50:	4b17      	ldr	r3, [pc, #92]	; (801ceb0 <RadioIrqProcess+0x424>)
 801ce52:	785b      	ldrb	r3, [r3, #1]
 801ce54:	f083 0301 	eor.w	r3, r3, #1
 801ce58:	b2db      	uxtb	r3, r3
 801ce5a:	2b00      	cmp	r3, #0
 801ce5c:	d002      	beq.n	801ce64 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801ce5e:	2000      	movs	r0, #0
 801ce60:	f000 fea4 	bl	801dbac <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801ce64:	4b18      	ldr	r3, [pc, #96]	; (801cec8 <RadioIrqProcess+0x43c>)
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	d019      	beq.n	801cea0 <RadioIrqProcess+0x414>
 801ce6c:	4b16      	ldr	r3, [pc, #88]	; (801cec8 <RadioIrqProcess+0x43c>)
 801ce6e:	681b      	ldr	r3, [r3, #0]
 801ce70:	691b      	ldr	r3, [r3, #16]
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d014      	beq.n	801cea0 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801ce76:	4b14      	ldr	r3, [pc, #80]	; (801cec8 <RadioIrqProcess+0x43c>)
 801ce78:	681b      	ldr	r3, [r3, #0]
 801ce7a:	691b      	ldr	r3, [r3, #16]
 801ce7c:	4798      	blx	r3
        break;
 801ce7e:	e00f      	b.n	801cea0 <RadioIrqProcess+0x414>
        break;
 801ce80:	bf00      	nop
 801ce82:	e00e      	b.n	801cea2 <RadioIrqProcess+0x416>
        break;
 801ce84:	bf00      	nop
 801ce86:	e00c      	b.n	801cea2 <RadioIrqProcess+0x416>
        break;
 801ce88:	bf00      	nop
 801ce8a:	e00a      	b.n	801cea2 <RadioIrqProcess+0x416>
        break;
 801ce8c:	bf00      	nop
 801ce8e:	e008      	b.n	801cea2 <RadioIrqProcess+0x416>
        break;
 801ce90:	bf00      	nop
 801ce92:	e006      	b.n	801cea2 <RadioIrqProcess+0x416>
        break;
 801ce94:	bf00      	nop
 801ce96:	e004      	b.n	801cea2 <RadioIrqProcess+0x416>
        break;
 801ce98:	bf00      	nop
 801ce9a:	e002      	b.n	801cea2 <RadioIrqProcess+0x416>
        break;
 801ce9c:	bf00      	nop
 801ce9e:	e000      	b.n	801cea2 <RadioIrqProcess+0x416>
        break;
 801cea0:	bf00      	nop
    }
}
 801cea2:	bf00      	nop
 801cea4:	370c      	adds	r7, #12
 801cea6:	46bd      	mov	sp, r7
 801cea8:	bd90      	pop	{r4, r7, pc}
 801ceaa:	bf00      	nop
 801ceac:	080219a0 	.word	0x080219a0
 801ceb0:	20001be0 	.word	0x20001be0
 801ceb4:	0801c89b 	.word	0x0801c89b
 801ceb8:	0801c8bf 	.word	0x0801c8bf
 801cebc:	080219ac 	.word	0x080219ac
 801cec0:	080219b8 	.word	0x080219b8
 801cec4:	20001c54 	.word	0x20001c54
 801cec8:	20001bdc 	.word	0x20001bdc
 801cecc:	080219c4 	.word	0x080219c4
 801ced0:	080219d0 	.word	0x080219d0

0801ced4 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801ced4:	b580      	push	{r7, lr}
 801ced6:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801ced8:	4b09      	ldr	r3, [pc, #36]	; (801cf00 <RadioTxPrbs+0x2c>)
 801ceda:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cede:	2101      	movs	r1, #1
 801cee0:	4618      	mov	r0, r3
 801cee2:	f001 fcdb 	bl	801e89c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801cee6:	4b07      	ldr	r3, [pc, #28]	; (801cf04 <RadioTxPrbs+0x30>)
 801cee8:	212d      	movs	r1, #45	; 0x2d
 801ceea:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801ceee:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801cef0:	f000 ff1f 	bl	801dd32 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801cef4:	4804      	ldr	r0, [pc, #16]	; (801cf08 <RadioTxPrbs+0x34>)
 801cef6:	f000 fe75 	bl	801dbe4 <SUBGRF_SetTx>
}
 801cefa:	bf00      	nop
 801cefc:	bd80      	pop	{r7, pc}
 801cefe:	bf00      	nop
 801cf00:	20001be0 	.word	0x20001be0
 801cf04:	0801c89b 	.word	0x0801c89b
 801cf08:	000fffff 	.word	0x000fffff

0801cf0c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801cf0c:	b580      	push	{r7, lr}
 801cf0e:	b084      	sub	sp, #16
 801cf10:	af00      	add	r7, sp, #0
 801cf12:	4603      	mov	r3, r0
 801cf14:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801cf16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cf1a:	4618      	mov	r0, r3
 801cf1c:	f001 fce6 	bl	801e8ec <SUBGRF_SetRfTxPower>
 801cf20:	4603      	mov	r3, r0
 801cf22:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801cf24:	210e      	movs	r1, #14
 801cf26:	f640 101f 	movw	r0, #2335	; 0x91f
 801cf2a:	f001 fbc3 	bl	801e6b4 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801cf2e:	7bfb      	ldrb	r3, [r7, #15]
 801cf30:	2101      	movs	r1, #1
 801cf32:	4618      	mov	r0, r3
 801cf34:	f001 fcb2 	bl	801e89c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801cf38:	f000 fef2 	bl	801dd20 <SUBGRF_SetTxContinuousWave>
}
 801cf3c:	bf00      	nop
 801cf3e:	3710      	adds	r7, #16
 801cf40:	46bd      	mov	sp, r7
 801cf42:	bd80      	pop	{r7, pc}

0801cf44 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801cf44:	b480      	push	{r7}
 801cf46:	b089      	sub	sp, #36	; 0x24
 801cf48:	af00      	add	r7, sp, #0
 801cf4a:	60f8      	str	r0, [r7, #12]
 801cf4c:	60b9      	str	r1, [r7, #8]
 801cf4e:	4613      	mov	r3, r2
 801cf50:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801cf52:	2300      	movs	r3, #0
 801cf54:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801cf56:	2300      	movs	r3, #0
 801cf58:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801cf5a:	2300      	movs	r3, #0
 801cf5c:	61bb      	str	r3, [r7, #24]
 801cf5e:	e011      	b.n	801cf84 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801cf60:	69bb      	ldr	r3, [r7, #24]
 801cf62:	68ba      	ldr	r2, [r7, #8]
 801cf64:	4413      	add	r3, r2
 801cf66:	781a      	ldrb	r2, [r3, #0]
 801cf68:	69bb      	ldr	r3, [r7, #24]
 801cf6a:	68b9      	ldr	r1, [r7, #8]
 801cf6c:	440b      	add	r3, r1
 801cf6e:	43d2      	mvns	r2, r2
 801cf70:	b2d2      	uxtb	r2, r2
 801cf72:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801cf74:	69bb      	ldr	r3, [r7, #24]
 801cf76:	68fa      	ldr	r2, [r7, #12]
 801cf78:	4413      	add	r3, r2
 801cf7a:	2200      	movs	r2, #0
 801cf7c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801cf7e:	69bb      	ldr	r3, [r7, #24]
 801cf80:	3301      	adds	r3, #1
 801cf82:	61bb      	str	r3, [r7, #24]
 801cf84:	79fb      	ldrb	r3, [r7, #7]
 801cf86:	69ba      	ldr	r2, [r7, #24]
 801cf88:	429a      	cmp	r2, r3
 801cf8a:	dbe9      	blt.n	801cf60 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801cf8c:	2300      	movs	r3, #0
 801cf8e:	61bb      	str	r3, [r7, #24]
 801cf90:	e049      	b.n	801d026 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801cf92:	69bb      	ldr	r3, [r7, #24]
 801cf94:	425a      	negs	r2, r3
 801cf96:	f003 0307 	and.w	r3, r3, #7
 801cf9a:	f002 0207 	and.w	r2, r2, #7
 801cf9e:	bf58      	it	pl
 801cfa0:	4253      	negpl	r3, r2
 801cfa2:	b2db      	uxtb	r3, r3
 801cfa4:	f1c3 0307 	rsb	r3, r3, #7
 801cfa8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801cfaa:	69bb      	ldr	r3, [r7, #24]
 801cfac:	2b00      	cmp	r3, #0
 801cfae:	da00      	bge.n	801cfb2 <payload_integration+0x6e>
 801cfb0:	3307      	adds	r3, #7
 801cfb2:	10db      	asrs	r3, r3, #3
 801cfb4:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801cfb6:	69bb      	ldr	r3, [r7, #24]
 801cfb8:	3301      	adds	r3, #1
 801cfba:	425a      	negs	r2, r3
 801cfbc:	f003 0307 	and.w	r3, r3, #7
 801cfc0:	f002 0207 	and.w	r2, r2, #7
 801cfc4:	bf58      	it	pl
 801cfc6:	4253      	negpl	r3, r2
 801cfc8:	b2db      	uxtb	r3, r3
 801cfca:	f1c3 0307 	rsb	r3, r3, #7
 801cfce:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801cfd0:	69bb      	ldr	r3, [r7, #24]
 801cfd2:	3301      	adds	r3, #1
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	da00      	bge.n	801cfda <payload_integration+0x96>
 801cfd8:	3307      	adds	r3, #7
 801cfda:	10db      	asrs	r3, r3, #3
 801cfdc:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801cfde:	7dbb      	ldrb	r3, [r7, #22]
 801cfe0:	68ba      	ldr	r2, [r7, #8]
 801cfe2:	4413      	add	r3, r2
 801cfe4:	781b      	ldrb	r3, [r3, #0]
 801cfe6:	461a      	mov	r2, r3
 801cfe8:	7dfb      	ldrb	r3, [r7, #23]
 801cfea:	fa42 f303 	asr.w	r3, r2, r3
 801cfee:	b2db      	uxtb	r3, r3
 801cff0:	f003 0301 	and.w	r3, r3, #1
 801cff4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801cff6:	7ffa      	ldrb	r2, [r7, #31]
 801cff8:	7cfb      	ldrb	r3, [r7, #19]
 801cffa:	4053      	eors	r3, r2
 801cffc:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801cffe:	7d3b      	ldrb	r3, [r7, #20]
 801d000:	68fa      	ldr	r2, [r7, #12]
 801d002:	4413      	add	r3, r2
 801d004:	781b      	ldrb	r3, [r3, #0]
 801d006:	b25a      	sxtb	r2, r3
 801d008:	7ff9      	ldrb	r1, [r7, #31]
 801d00a:	7d7b      	ldrb	r3, [r7, #21]
 801d00c:	fa01 f303 	lsl.w	r3, r1, r3
 801d010:	b25b      	sxtb	r3, r3
 801d012:	4313      	orrs	r3, r2
 801d014:	b259      	sxtb	r1, r3
 801d016:	7d3b      	ldrb	r3, [r7, #20]
 801d018:	68fa      	ldr	r2, [r7, #12]
 801d01a:	4413      	add	r3, r2
 801d01c:	b2ca      	uxtb	r2, r1
 801d01e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801d020:	69bb      	ldr	r3, [r7, #24]
 801d022:	3301      	adds	r3, #1
 801d024:	61bb      	str	r3, [r7, #24]
 801d026:	79fb      	ldrb	r3, [r7, #7]
 801d028:	00db      	lsls	r3, r3, #3
 801d02a:	69ba      	ldr	r2, [r7, #24]
 801d02c:	429a      	cmp	r2, r3
 801d02e:	dbb0      	blt.n	801cf92 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801d030:	7ffb      	ldrb	r3, [r7, #31]
 801d032:	01db      	lsls	r3, r3, #7
 801d034:	b25a      	sxtb	r2, r3
 801d036:	7ffb      	ldrb	r3, [r7, #31]
 801d038:	019b      	lsls	r3, r3, #6
 801d03a:	b25b      	sxtb	r3, r3
 801d03c:	4313      	orrs	r3, r2
 801d03e:	b25b      	sxtb	r3, r3
 801d040:	7ffa      	ldrb	r2, [r7, #31]
 801d042:	2a00      	cmp	r2, #0
 801d044:	d101      	bne.n	801d04a <payload_integration+0x106>
 801d046:	2220      	movs	r2, #32
 801d048:	e000      	b.n	801d04c <payload_integration+0x108>
 801d04a:	2200      	movs	r2, #0
 801d04c:	4313      	orrs	r3, r2
 801d04e:	b259      	sxtb	r1, r3
 801d050:	79fb      	ldrb	r3, [r7, #7]
 801d052:	68fa      	ldr	r2, [r7, #12]
 801d054:	4413      	add	r3, r2
 801d056:	b2ca      	uxtb	r2, r1
 801d058:	701a      	strb	r2, [r3, #0]
}
 801d05a:	bf00      	nop
 801d05c:	3724      	adds	r7, #36	; 0x24
 801d05e:	46bd      	mov	sp, r7
 801d060:	bc80      	pop	{r7}
 801d062:	4770      	bx	lr

0801d064 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801d064:	b580      	push	{r7, lr}
 801d066:	b08c      	sub	sp, #48	; 0x30
 801d068:	af00      	add	r7, sp, #0
 801d06a:	60b9      	str	r1, [r7, #8]
 801d06c:	607a      	str	r2, [r7, #4]
 801d06e:	603b      	str	r3, [r7, #0]
 801d070:	4603      	mov	r3, r0
 801d072:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801d074:	2300      	movs	r3, #0
 801d076:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801d078:	2300      	movs	r3, #0
 801d07a:	623b      	str	r3, [r7, #32]
 801d07c:	2300      	movs	r3, #0
 801d07e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d080:	f001 fdff 	bl	801ec82 <RFW_DeInit>

    if( rxContinuous != 0 )
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	2b00      	cmp	r3, #0
 801d088:	d001      	beq.n	801d08e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801d08a:	2300      	movs	r3, #0
 801d08c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	2b00      	cmp	r3, #0
 801d092:	bf14      	ite	ne
 801d094:	2301      	movne	r3, #1
 801d096:	2300      	moveq	r3, #0
 801d098:	b2da      	uxtb	r2, r3
 801d09a:	4ba3      	ldr	r3, [pc, #652]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d09c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801d09e:	7bfb      	ldrb	r3, [r7, #15]
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d003      	beq.n	801d0ac <RadioSetRxGenericConfig+0x48>
 801d0a4:	2b01      	cmp	r3, #1
 801d0a6:	f000 80dc 	beq.w	801d262 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801d0aa:	e194      	b.n	801d3d6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801d0ac:	68bb      	ldr	r3, [r7, #8]
 801d0ae:	689b      	ldr	r3, [r3, #8]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d003      	beq.n	801d0bc <RadioSetRxGenericConfig+0x58>
 801d0b4:	68bb      	ldr	r3, [r7, #8]
 801d0b6:	68db      	ldr	r3, [r3, #12]
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d102      	bne.n	801d0c2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801d0bc:	f04f 33ff 	mov.w	r3, #4294967295
 801d0c0:	e18a      	b.n	801d3d8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801d0c2:	68bb      	ldr	r3, [r7, #8]
 801d0c4:	7f9b      	ldrb	r3, [r3, #30]
 801d0c6:	2b08      	cmp	r3, #8
 801d0c8:	d902      	bls.n	801d0d0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801d0ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d0ce:	e183      	b.n	801d3d8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d0d0:	68bb      	ldr	r3, [r7, #8]
 801d0d2:	6919      	ldr	r1, [r3, #16]
 801d0d4:	68bb      	ldr	r3, [r7, #8]
 801d0d6:	7f9b      	ldrb	r3, [r3, #30]
 801d0d8:	b29a      	uxth	r2, r3
 801d0da:	f107 0320 	add.w	r3, r7, #32
 801d0de:	4618      	mov	r0, r3
 801d0e0:	f001 fe8c 	bl	801edfc <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d0e4:	68bb      	ldr	r3, [r7, #8]
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	bf14      	ite	ne
 801d0ec:	2301      	movne	r3, #1
 801d0ee:	2300      	moveq	r3, #0
 801d0f0:	b2db      	uxtb	r3, r3
 801d0f2:	4618      	mov	r0, r3
 801d0f4:	f000 fe26 	bl	801dd44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d0f8:	4b8b      	ldr	r3, [pc, #556]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d0fa:	2200      	movs	r2, #0
 801d0fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d100:	68bb      	ldr	r3, [r7, #8]
 801d102:	689b      	ldr	r3, [r3, #8]
 801d104:	4a88      	ldr	r2, [pc, #544]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d106:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d108:	68bb      	ldr	r3, [r7, #8]
 801d10a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801d10e:	4b86      	ldr	r3, [pc, #536]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801d114:	68bb      	ldr	r3, [r7, #8]
 801d116:	685b      	ldr	r3, [r3, #4]
 801d118:	4618      	mov	r0, r3
 801d11a:	f001 fce5 	bl	801eae8 <SUBGRF_GetFskBandwidthRegValue>
 801d11e:	4603      	mov	r3, r0
 801d120:	461a      	mov	r2, r3
 801d122:	4b81      	ldr	r3, [pc, #516]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d128:	4b7f      	ldr	r3, [pc, #508]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d12a:	2200      	movs	r2, #0
 801d12c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801d12e:	68bb      	ldr	r3, [r7, #8]
 801d130:	68db      	ldr	r3, [r3, #12]
 801d132:	b29b      	uxth	r3, r3
 801d134:	00db      	lsls	r3, r3, #3
 801d136:	b29a      	uxth	r2, r3
 801d138:	4b7b      	ldr	r3, [pc, #492]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d13a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801d13c:	68bb      	ldr	r3, [r7, #8]
 801d13e:	7fda      	ldrb	r2, [r3, #31]
 801d140:	4b79      	ldr	r3, [pc, #484]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d142:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d144:	68bb      	ldr	r3, [r7, #8]
 801d146:	7f9b      	ldrb	r3, [r3, #30]
 801d148:	00db      	lsls	r3, r3, #3
 801d14a:	b2da      	uxtb	r2, r3
 801d14c:	4b76      	ldr	r3, [pc, #472]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d14e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801d150:	68bb      	ldr	r3, [r7, #8]
 801d152:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801d156:	4b74      	ldr	r3, [pc, #464]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d158:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801d15a:	68bb      	ldr	r3, [r7, #8]
 801d15c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d160:	2b00      	cmp	r3, #0
 801d162:	d105      	bne.n	801d170 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801d164:	68bb      	ldr	r3, [r7, #8]
 801d166:	695b      	ldr	r3, [r3, #20]
 801d168:	b2da      	uxtb	r2, r3
 801d16a:	4b6f      	ldr	r3, [pc, #444]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d16c:	759a      	strb	r2, [r3, #22]
 801d16e:	e00b      	b.n	801d188 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801d170:	68bb      	ldr	r3, [r7, #8]
 801d172:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d176:	2b02      	cmp	r3, #2
 801d178:	d103      	bne.n	801d182 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d17a:	4b6b      	ldr	r3, [pc, #428]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d17c:	22ff      	movs	r2, #255	; 0xff
 801d17e:	759a      	strb	r2, [r3, #22]
 801d180:	e002      	b.n	801d188 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801d182:	4b69      	ldr	r3, [pc, #420]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d184:	22ff      	movs	r2, #255	; 0xff
 801d186:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d188:	68bb      	ldr	r3, [r7, #8]
 801d18a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d18e:	2b02      	cmp	r3, #2
 801d190:	d004      	beq.n	801d19c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d192:	68bb      	ldr	r3, [r7, #8]
 801d194:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801d198:	2b02      	cmp	r3, #2
 801d19a:	d12d      	bne.n	801d1f8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d19c:	68bb      	ldr	r3, [r7, #8]
 801d19e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d1a2:	2bf1      	cmp	r3, #241	; 0xf1
 801d1a4:	d00c      	beq.n	801d1c0 <RadioSetRxGenericConfig+0x15c>
 801d1a6:	68bb      	ldr	r3, [r7, #8]
 801d1a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d1ac:	2bf2      	cmp	r3, #242	; 0xf2
 801d1ae:	d007      	beq.n	801d1c0 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d1b0:	68bb      	ldr	r3, [r7, #8]
 801d1b2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801d1b6:	2b01      	cmp	r3, #1
 801d1b8:	d002      	beq.n	801d1c0 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801d1ba:	f04f 33ff 	mov.w	r3, #4294967295
 801d1be:	e10b      	b.n	801d3d8 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801d1c4:	68bb      	ldr	r3, [r7, #8]
 801d1c6:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801d1c8:	4b58      	ldr	r3, [pc, #352]	; (801d32c <RadioSetRxGenericConfig+0x2c8>)
 801d1ca:	6819      	ldr	r1, [r3, #0]
 801d1cc:	f107 0314 	add.w	r3, r7, #20
 801d1d0:	4a57      	ldr	r2, [pc, #348]	; (801d330 <RadioSetRxGenericConfig+0x2cc>)
 801d1d2:	4618      	mov	r0, r3
 801d1d4:	f001 fd48 	bl	801ec68 <RFW_Init>
 801d1d8:	4603      	mov	r3, r0
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d002      	beq.n	801d1e4 <RadioSetRxGenericConfig+0x180>
                return -1;
 801d1de:	f04f 33ff 	mov.w	r3, #4294967295
 801d1e2:	e0f9      	b.n	801d3d8 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d1e4:	4b50      	ldr	r3, [pc, #320]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d1e6:	2200      	movs	r2, #0
 801d1e8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d1ea:	4b4f      	ldr	r3, [pc, #316]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d1ec:	2201      	movs	r2, #1
 801d1ee:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d1f0:	4b4d      	ldr	r3, [pc, #308]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d1f2:	2200      	movs	r2, #0
 801d1f4:	755a      	strb	r2, [r3, #21]
        {
 801d1f6:	e00e      	b.n	801d216 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d1f8:	68bb      	ldr	r3, [r7, #8]
 801d1fa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801d1fe:	4b4a      	ldr	r3, [pc, #296]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d200:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d202:	68bb      	ldr	r3, [r7, #8]
 801d204:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801d208:	4b47      	ldr	r3, [pc, #284]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d20a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801d20c:	68bb      	ldr	r3, [r7, #8]
 801d20e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801d212:	4b45      	ldr	r3, [pc, #276]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d214:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801d216:	f7ff fa3e 	bl	801c696 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d21a:	2000      	movs	r0, #0
 801d21c:	f7fe fbd2 	bl	801b9c4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d220:	4844      	ldr	r0, [pc, #272]	; (801d334 <RadioSetRxGenericConfig+0x2d0>)
 801d222:	f001 f82d 	bl	801e280 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d226:	4844      	ldr	r0, [pc, #272]	; (801d338 <RadioSetRxGenericConfig+0x2d4>)
 801d228:	f001 f8fc 	bl	801e424 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d22c:	f107 0320 	add.w	r3, r7, #32
 801d230:	4618      	mov	r0, r3
 801d232:	f000 fbc0 	bl	801d9b6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d236:	68bb      	ldr	r3, [r7, #8]
 801d238:	8b9b      	ldrh	r3, [r3, #28]
 801d23a:	4618      	mov	r0, r3
 801d23c:	f000 fc0a 	bl	801da54 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d240:	68bb      	ldr	r3, [r7, #8]
 801d242:	8b1b      	ldrh	r3, [r3, #24]
 801d244:	4618      	mov	r0, r3
 801d246:	f000 fbe5 	bl	801da14 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801d24a:	683b      	ldr	r3, [r7, #0]
 801d24c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801d250:	fb03 f202 	mul.w	r2, r3, r2
 801d254:	68bb      	ldr	r3, [r7, #8]
 801d256:	689b      	ldr	r3, [r3, #8]
 801d258:	fbb2 f3f3 	udiv	r3, r2, r3
 801d25c:	4a32      	ldr	r2, [pc, #200]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d25e:	6093      	str	r3, [r2, #8]
        break;
 801d260:	e0b9      	b.n	801d3d6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801d262:	68bb      	ldr	r3, [r7, #8]
 801d264:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801d266:	2b00      	cmp	r3, #0
 801d268:	d102      	bne.n	801d270 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801d26a:	f04f 33ff 	mov.w	r3, #4294967295
 801d26e:	e0b3      	b.n	801d3d8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801d270:	68bb      	ldr	r3, [r7, #8]
 801d272:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801d276:	2b01      	cmp	r3, #1
 801d278:	d104      	bne.n	801d284 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801d27a:	68bb      	ldr	r3, [r7, #8]
 801d27c:	695b      	ldr	r3, [r3, #20]
 801d27e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801d282:	e002      	b.n	801d28a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801d284:	23ff      	movs	r3, #255	; 0xff
 801d286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801d28a:	68bb      	ldr	r3, [r7, #8]
 801d28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d28e:	2b00      	cmp	r3, #0
 801d290:	bf14      	ite	ne
 801d292:	2301      	movne	r3, #1
 801d294:	2300      	moveq	r3, #0
 801d296:	b2db      	uxtb	r3, r3
 801d298:	4618      	mov	r0, r3
 801d29a:	f000 fd53 	bl	801dd44 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801d29e:	683b      	ldr	r3, [r7, #0]
 801d2a0:	b2db      	uxtb	r3, r3
 801d2a2:	4618      	mov	r0, r3
 801d2a4:	f000 fd5d 	bl	801dd62 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d2a8:	4b1f      	ldr	r3, [pc, #124]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d2aa:	2201      	movs	r2, #1
 801d2ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d2b0:	68bb      	ldr	r3, [r7, #8]
 801d2b2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801d2b6:	4b1c      	ldr	r3, [pc, #112]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d2b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d2bc:	68bb      	ldr	r3, [r7, #8]
 801d2be:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801d2c2:	4b19      	ldr	r3, [pc, #100]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d2c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d2c8:	68bb      	ldr	r3, [r7, #8]
 801d2ca:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801d2ce:	4b16      	ldr	r3, [pc, #88]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d2d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d2d4:	68bb      	ldr	r3, [r7, #8]
 801d2d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801d2da:	2b02      	cmp	r3, #2
 801d2dc:	d010      	beq.n	801d300 <RadioSetRxGenericConfig+0x29c>
 801d2de:	2b02      	cmp	r3, #2
 801d2e0:	dc2c      	bgt.n	801d33c <RadioSetRxGenericConfig+0x2d8>
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d002      	beq.n	801d2ec <RadioSetRxGenericConfig+0x288>
 801d2e6:	2b01      	cmp	r3, #1
 801d2e8:	d005      	beq.n	801d2f6 <RadioSetRxGenericConfig+0x292>
            break;
 801d2ea:	e027      	b.n	801d33c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d2ec:	4b0e      	ldr	r3, [pc, #56]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d2f4:	e023      	b.n	801d33e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d2f6:	4b0c      	ldr	r3, [pc, #48]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d2f8:	2201      	movs	r2, #1
 801d2fa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d2fe:	e01e      	b.n	801d33e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d300:	68bb      	ldr	r3, [r7, #8]
 801d302:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d306:	2b0b      	cmp	r3, #11
 801d308:	d004      	beq.n	801d314 <RadioSetRxGenericConfig+0x2b0>
 801d30a:	68bb      	ldr	r3, [r7, #8]
 801d30c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801d310:	2b0c      	cmp	r3, #12
 801d312:	d104      	bne.n	801d31e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d314:	4b04      	ldr	r3, [pc, #16]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d316:	2201      	movs	r2, #1
 801d318:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d31c:	e00f      	b.n	801d33e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d31e:	4b02      	ldr	r3, [pc, #8]	; (801d328 <RadioSetRxGenericConfig+0x2c4>)
 801d320:	2200      	movs	r2, #0
 801d322:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d326:	e00a      	b.n	801d33e <RadioSetRxGenericConfig+0x2da>
 801d328:	20001be0 	.word	0x20001be0
 801d32c:	20001bdc 	.word	0x20001bdc
 801d330:	20001c54 	.word	0x20001c54
 801d334:	20001c18 	.word	0x20001c18
 801d338:	20001bee 	.word	0x20001bee
            break;
 801d33c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d33e:	4b28      	ldr	r3, [pc, #160]	; (801d3e0 <RadioSetRxGenericConfig+0x37c>)
 801d340:	2201      	movs	r2, #1
 801d342:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d344:	68bb      	ldr	r3, [r7, #8]
 801d346:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801d348:	4b25      	ldr	r3, [pc, #148]	; (801d3e0 <RadioSetRxGenericConfig+0x37c>)
 801d34a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d34c:	68bb      	ldr	r3, [r7, #8]
 801d34e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801d352:	4b23      	ldr	r3, [pc, #140]	; (801d3e0 <RadioSetRxGenericConfig+0x37c>)
 801d354:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801d356:	4a22      	ldr	r2, [pc, #136]	; (801d3e0 <RadioSetRxGenericConfig+0x37c>)
 801d358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d35c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d35e:	68bb      	ldr	r3, [r7, #8]
 801d360:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801d364:	4b1e      	ldr	r3, [pc, #120]	; (801d3e0 <RadioSetRxGenericConfig+0x37c>)
 801d366:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d36a:	68bb      	ldr	r3, [r7, #8]
 801d36c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801d370:	4b1b      	ldr	r3, [pc, #108]	; (801d3e0 <RadioSetRxGenericConfig+0x37c>)
 801d372:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d376:	f7ff f98e 	bl	801c696 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d37a:	2001      	movs	r0, #1
 801d37c:	f7fe fb22 	bl	801b9c4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d380:	4818      	ldr	r0, [pc, #96]	; (801d3e4 <RadioSetRxGenericConfig+0x380>)
 801d382:	f000 ff7d 	bl	801e280 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d386:	4818      	ldr	r0, [pc, #96]	; (801d3e8 <RadioSetRxGenericConfig+0x384>)
 801d388:	f001 f84c 	bl	801e424 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d38c:	4b14      	ldr	r3, [pc, #80]	; (801d3e0 <RadioSetRxGenericConfig+0x37c>)
 801d38e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d392:	2b01      	cmp	r3, #1
 801d394:	d10d      	bne.n	801d3b2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801d396:	f240 7036 	movw	r0, #1846	; 0x736
 801d39a:	f001 f99f 	bl	801e6dc <SUBGRF_ReadRegister>
 801d39e:	4603      	mov	r3, r0
 801d3a0:	f023 0304 	bic.w	r3, r3, #4
 801d3a4:	b2db      	uxtb	r3, r3
 801d3a6:	4619      	mov	r1, r3
 801d3a8:	f240 7036 	movw	r0, #1846	; 0x736
 801d3ac:	f001 f982 	bl	801e6b4 <SUBGRF_WriteRegister>
 801d3b0:	e00c      	b.n	801d3cc <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801d3b2:	f240 7036 	movw	r0, #1846	; 0x736
 801d3b6:	f001 f991 	bl	801e6dc <SUBGRF_ReadRegister>
 801d3ba:	4603      	mov	r3, r0
 801d3bc:	f043 0304 	orr.w	r3, r3, #4
 801d3c0:	b2db      	uxtb	r3, r3
 801d3c2:	4619      	mov	r1, r3
 801d3c4:	f240 7036 	movw	r0, #1846	; 0x736
 801d3c8:	f001 f974 	bl	801e6b4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d3cc:	4b04      	ldr	r3, [pc, #16]	; (801d3e0 <RadioSetRxGenericConfig+0x37c>)
 801d3ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d3d2:	609a      	str	r2, [r3, #8]
        break;
 801d3d4:	bf00      	nop
    }
    return status;
 801d3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d3d8:	4618      	mov	r0, r3
 801d3da:	3730      	adds	r7, #48	; 0x30
 801d3dc:	46bd      	mov	sp, r7
 801d3de:	bd80      	pop	{r7, pc}
 801d3e0:	20001be0 	.word	0x20001be0
 801d3e4:	20001c18 	.word	0x20001c18
 801d3e8:	20001bee 	.word	0x20001bee

0801d3ec <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801d3ec:	b580      	push	{r7, lr}
 801d3ee:	b08e      	sub	sp, #56	; 0x38
 801d3f0:	af00      	add	r7, sp, #0
 801d3f2:	60b9      	str	r1, [r7, #8]
 801d3f4:	607b      	str	r3, [r7, #4]
 801d3f6:	4603      	mov	r3, r0
 801d3f8:	73fb      	strb	r3, [r7, #15]
 801d3fa:	4613      	mov	r3, r2
 801d3fc:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801d3fe:	2300      	movs	r3, #0
 801d400:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d402:	2300      	movs	r3, #0
 801d404:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d406:	f001 fc3c 	bl	801ec82 <RFW_DeInit>
    switch( modem )
 801d40a:	7bfb      	ldrb	r3, [r7, #15]
 801d40c:	2b03      	cmp	r3, #3
 801d40e:	f200 8204 	bhi.w	801d81a <RadioSetTxGenericConfig+0x42e>
 801d412:	a201      	add	r2, pc, #4	; (adr r2, 801d418 <RadioSetTxGenericConfig+0x2c>)
 801d414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d418:	0801d59d 	.word	0x0801d59d
 801d41c:	0801d6e5 	.word	0x0801d6e5
 801d420:	0801d7dd 	.word	0x0801d7dd
 801d424:	0801d429 	.word	0x0801d429
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801d428:	68bb      	ldr	r3, [r7, #8]
 801d42a:	7c9b      	ldrb	r3, [r3, #18]
 801d42c:	2b08      	cmp	r3, #8
 801d42e:	d902      	bls.n	801d436 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801d430:	f04f 33ff 	mov.w	r3, #4294967295
 801d434:	e206      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801d436:	68bb      	ldr	r3, [r7, #8]
 801d438:	6899      	ldr	r1, [r3, #8]
 801d43a:	68bb      	ldr	r3, [r7, #8]
 801d43c:	7c9b      	ldrb	r3, [r3, #18]
 801d43e:	b29a      	uxth	r2, r3
 801d440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d444:	4618      	mov	r0, r3
 801d446:	f001 fcd9 	bl	801edfc <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801d44a:	68bb      	ldr	r3, [r7, #8]
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d102      	bne.n	801d458 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801d452:	f04f 33ff 	mov.w	r3, #4294967295
 801d456:	e1f5      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801d458:	68bb      	ldr	r3, [r7, #8]
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	f242 7210 	movw	r2, #10000	; 0x2710
 801d460:	4293      	cmp	r3, r2
 801d462:	d813      	bhi.n	801d48c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801d464:	2302      	movs	r3, #2
 801d466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801d46a:	4b99      	ldr	r3, [pc, #612]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d46c:	2203      	movs	r2, #3
 801d46e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801d470:	4b97      	ldr	r3, [pc, #604]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d472:	2203      	movs	r2, #3
 801d474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d478:	68bb      	ldr	r3, [r7, #8]
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	4a94      	ldr	r2, [pc, #592]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d47e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d480:	68bb      	ldr	r3, [r7, #8]
 801d482:	7cda      	ldrb	r2, [r3, #19]
 801d484:	4b92      	ldr	r3, [pc, #584]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d48a:	e017      	b.n	801d4bc <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801d48c:	2300      	movs	r3, #0
 801d48e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d492:	4b8f      	ldr	r3, [pc, #572]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d494:	2200      	movs	r2, #0
 801d496:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d498:	4b8d      	ldr	r3, [pc, #564]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d49a:	2200      	movs	r2, #0
 801d49c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d4a0:	68bb      	ldr	r3, [r7, #8]
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	4a8a      	ldr	r2, [pc, #552]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d4a6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d4a8:	68bb      	ldr	r3, [r7, #8]
 801d4aa:	7cda      	ldrb	r2, [r3, #19]
 801d4ac:	4b88      	ldr	r3, [pc, #544]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	089b      	lsrs	r3, r3, #2
 801d4b8:	4a85      	ldr	r2, [pc, #532]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d4ba:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801d4bc:	68bb      	ldr	r3, [r7, #8]
 801d4be:	685b      	ldr	r3, [r3, #4]
 801d4c0:	b29b      	uxth	r3, r3
 801d4c2:	00db      	lsls	r3, r3, #3
 801d4c4:	b29a      	uxth	r2, r3
 801d4c6:	4b82      	ldr	r3, [pc, #520]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d4c8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d4ca:	4b81      	ldr	r3, [pc, #516]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d4cc:	2204      	movs	r2, #4
 801d4ce:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801d4d0:	68bb      	ldr	r3, [r7, #8]
 801d4d2:	7c9b      	ldrb	r3, [r3, #18]
 801d4d4:	00db      	lsls	r3, r3, #3
 801d4d6:	b2da      	uxtb	r2, r3
 801d4d8:	4b7d      	ldr	r3, [pc, #500]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d4da:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d4dc:	4b7c      	ldr	r3, [pc, #496]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d4de:	2200      	movs	r2, #0
 801d4e0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d4e2:	68bb      	ldr	r3, [r7, #8]
 801d4e4:	7d9b      	ldrb	r3, [r3, #22]
 801d4e6:	2b02      	cmp	r3, #2
 801d4e8:	d003      	beq.n	801d4f2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d4ea:	68bb      	ldr	r3, [r7, #8]
 801d4ec:	7d1b      	ldrb	r3, [r3, #20]
 801d4ee:	2b02      	cmp	r3, #2
 801d4f0:	d12b      	bne.n	801d54a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d4f2:	68bb      	ldr	r3, [r7, #8]
 801d4f4:	7d5b      	ldrb	r3, [r3, #21]
 801d4f6:	2bf1      	cmp	r3, #241	; 0xf1
 801d4f8:	d00a      	beq.n	801d510 <RadioSetTxGenericConfig+0x124>
 801d4fa:	68bb      	ldr	r3, [r7, #8]
 801d4fc:	7d5b      	ldrb	r3, [r3, #21]
 801d4fe:	2bf2      	cmp	r3, #242	; 0xf2
 801d500:	d006      	beq.n	801d510 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d502:	68bb      	ldr	r3, [r7, #8]
 801d504:	7d5b      	ldrb	r3, [r3, #21]
 801d506:	2b01      	cmp	r3, #1
 801d508:	d002      	beq.n	801d510 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801d50a:	f04f 33ff 	mov.w	r3, #4294967295
 801d50e:	e199      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801d510:	68bb      	ldr	r3, [r7, #8]
 801d512:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801d514:	2301      	movs	r3, #1
 801d516:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d51a:	4b6e      	ldr	r3, [pc, #440]	; (801d6d4 <RadioSetTxGenericConfig+0x2e8>)
 801d51c:	6819      	ldr	r1, [r3, #0]
 801d51e:	f107 0320 	add.w	r3, r7, #32
 801d522:	4a6d      	ldr	r2, [pc, #436]	; (801d6d8 <RadioSetTxGenericConfig+0x2ec>)
 801d524:	4618      	mov	r0, r3
 801d526:	f001 fb9f 	bl	801ec68 <RFW_Init>
 801d52a:	4603      	mov	r3, r0
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d002      	beq.n	801d536 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801d530:	f04f 33ff 	mov.w	r3, #4294967295
 801d534:	e186      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d536:	4b66      	ldr	r3, [pc, #408]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d538:	2200      	movs	r2, #0
 801d53a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d53c:	4b64      	ldr	r3, [pc, #400]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d53e:	2201      	movs	r2, #1
 801d540:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d542:	4b63      	ldr	r3, [pc, #396]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d544:	2200      	movs	r2, #0
 801d546:	755a      	strb	r2, [r3, #21]
        {
 801d548:	e00b      	b.n	801d562 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801d54a:	68bb      	ldr	r3, [r7, #8]
 801d54c:	7d5a      	ldrb	r2, [r3, #21]
 801d54e:	4b60      	ldr	r3, [pc, #384]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d550:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801d552:	68bb      	ldr	r3, [r7, #8]
 801d554:	7d9a      	ldrb	r2, [r3, #22]
 801d556:	4b5e      	ldr	r3, [pc, #376]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d558:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801d55a:	68bb      	ldr	r3, [r7, #8]
 801d55c:	7d1a      	ldrb	r2, [r3, #20]
 801d55e:	4b5c      	ldr	r3, [pc, #368]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d560:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d562:	f7ff f898 	bl	801c696 <RadioStandby>
        RadioSetModem( radio_modem );
 801d566:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d56a:	4618      	mov	r0, r3
 801d56c:	f7fe fa2a 	bl	801b9c4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d570:	485a      	ldr	r0, [pc, #360]	; (801d6dc <RadioSetTxGenericConfig+0x2f0>)
 801d572:	f000 fe85 	bl	801e280 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d576:	485a      	ldr	r0, [pc, #360]	; (801d6e0 <RadioSetTxGenericConfig+0x2f4>)
 801d578:	f000 ff54 	bl	801e424 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d57c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d580:	4618      	mov	r0, r3
 801d582:	f000 fa18 	bl	801d9b6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801d586:	68bb      	ldr	r3, [r7, #8]
 801d588:	8a1b      	ldrh	r3, [r3, #16]
 801d58a:	4618      	mov	r0, r3
 801d58c:	f000 fa62 	bl	801da54 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801d590:	68bb      	ldr	r3, [r7, #8]
 801d592:	899b      	ldrh	r3, [r3, #12]
 801d594:	4618      	mov	r0, r3
 801d596:	f000 fa3d 	bl	801da14 <SUBGRF_SetCrcPolynomial>
        break;
 801d59a:	e13f      	b.n	801d81c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801d59c:	68bb      	ldr	r3, [r7, #8]
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d102      	bne.n	801d5aa <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801d5a4:	f04f 33ff 	mov.w	r3, #4294967295
 801d5a8:	e14c      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801d5aa:	68bb      	ldr	r3, [r7, #8]
 801d5ac:	7c9b      	ldrb	r3, [r3, #18]
 801d5ae:	2b08      	cmp	r3, #8
 801d5b0:	d902      	bls.n	801d5b8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801d5b2:	f04f 33ff 	mov.w	r3, #4294967295
 801d5b6:	e145      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d5b8:	68bb      	ldr	r3, [r7, #8]
 801d5ba:	6899      	ldr	r1, [r3, #8]
 801d5bc:	68bb      	ldr	r3, [r7, #8]
 801d5be:	7c9b      	ldrb	r3, [r3, #18]
 801d5c0:	b29a      	uxth	r2, r3
 801d5c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d5c6:	4618      	mov	r0, r3
 801d5c8:	f001 fc18 	bl	801edfc <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d5cc:	4b40      	ldr	r3, [pc, #256]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d5ce:	2200      	movs	r2, #0
 801d5d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d5d4:	68bb      	ldr	r3, [r7, #8]
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	4a3d      	ldr	r2, [pc, #244]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d5da:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d5dc:	68bb      	ldr	r3, [r7, #8]
 801d5de:	7cda      	ldrb	r2, [r3, #19]
 801d5e0:	4b3b      	ldr	r3, [pc, #236]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d5e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d5e6:	68bb      	ldr	r3, [r7, #8]
 801d5e8:	699b      	ldr	r3, [r3, #24]
 801d5ea:	4a39      	ldr	r2, [pc, #228]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d5ec:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d5ee:	4b38      	ldr	r3, [pc, #224]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d5f0:	2200      	movs	r2, #0
 801d5f2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d5f4:	68bb      	ldr	r3, [r7, #8]
 801d5f6:	685b      	ldr	r3, [r3, #4]
 801d5f8:	b29b      	uxth	r3, r3
 801d5fa:	00db      	lsls	r3, r3, #3
 801d5fc:	b29a      	uxth	r2, r3
 801d5fe:	4b34      	ldr	r3, [pc, #208]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d600:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d602:	4b33      	ldr	r3, [pc, #204]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d604:	2204      	movs	r2, #4
 801d606:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d608:	68bb      	ldr	r3, [r7, #8]
 801d60a:	7c9b      	ldrb	r3, [r3, #18]
 801d60c:	00db      	lsls	r3, r3, #3
 801d60e:	b2da      	uxtb	r2, r3
 801d610:	4b2f      	ldr	r3, [pc, #188]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d612:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d614:	4b2e      	ldr	r3, [pc, #184]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d616:	2200      	movs	r2, #0
 801d618:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d61a:	68bb      	ldr	r3, [r7, #8]
 801d61c:	7d9b      	ldrb	r3, [r3, #22]
 801d61e:	2b02      	cmp	r3, #2
 801d620:	d003      	beq.n	801d62a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d622:	68bb      	ldr	r3, [r7, #8]
 801d624:	7d1b      	ldrb	r3, [r3, #20]
 801d626:	2b02      	cmp	r3, #2
 801d628:	d12a      	bne.n	801d680 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d62a:	68bb      	ldr	r3, [r7, #8]
 801d62c:	7d5b      	ldrb	r3, [r3, #21]
 801d62e:	2bf1      	cmp	r3, #241	; 0xf1
 801d630:	d00a      	beq.n	801d648 <RadioSetTxGenericConfig+0x25c>
 801d632:	68bb      	ldr	r3, [r7, #8]
 801d634:	7d5b      	ldrb	r3, [r3, #21]
 801d636:	2bf2      	cmp	r3, #242	; 0xf2
 801d638:	d006      	beq.n	801d648 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d63a:	68bb      	ldr	r3, [r7, #8]
 801d63c:	7d5b      	ldrb	r3, [r3, #21]
 801d63e:	2b01      	cmp	r3, #1
 801d640:	d002      	beq.n	801d648 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801d642:	f04f 33ff 	mov.w	r3, #4294967295
 801d646:	e0fd      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801d648:	2301      	movs	r3, #1
 801d64a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801d64c:	68bb      	ldr	r3, [r7, #8]
 801d64e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d650:	4b20      	ldr	r3, [pc, #128]	; (801d6d4 <RadioSetTxGenericConfig+0x2e8>)
 801d652:	6819      	ldr	r1, [r3, #0]
 801d654:	f107 0314 	add.w	r3, r7, #20
 801d658:	4a1f      	ldr	r2, [pc, #124]	; (801d6d8 <RadioSetTxGenericConfig+0x2ec>)
 801d65a:	4618      	mov	r0, r3
 801d65c:	f001 fb04 	bl	801ec68 <RFW_Init>
 801d660:	4603      	mov	r3, r0
 801d662:	2b00      	cmp	r3, #0
 801d664:	d002      	beq.n	801d66c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801d666:	f04f 33ff 	mov.w	r3, #4294967295
 801d66a:	e0eb      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d66c:	4b18      	ldr	r3, [pc, #96]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d66e:	2200      	movs	r2, #0
 801d670:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d672:	4b17      	ldr	r3, [pc, #92]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d674:	2201      	movs	r2, #1
 801d676:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d678:	4b15      	ldr	r3, [pc, #84]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d67a:	2200      	movs	r2, #0
 801d67c:	755a      	strb	r2, [r3, #21]
        {
 801d67e:	e00b      	b.n	801d698 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d680:	68bb      	ldr	r3, [r7, #8]
 801d682:	7d5a      	ldrb	r2, [r3, #21]
 801d684:	4b12      	ldr	r3, [pc, #72]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d686:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d688:	68bb      	ldr	r3, [r7, #8]
 801d68a:	7d9a      	ldrb	r2, [r3, #22]
 801d68c:	4b10      	ldr	r3, [pc, #64]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d68e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d690:	68bb      	ldr	r3, [r7, #8]
 801d692:	7d1a      	ldrb	r2, [r3, #20]
 801d694:	4b0e      	ldr	r3, [pc, #56]	; (801d6d0 <RadioSetTxGenericConfig+0x2e4>)
 801d696:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d698:	f7fe fffd 	bl	801c696 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d69c:	2000      	movs	r0, #0
 801d69e:	f7fe f991 	bl	801b9c4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d6a2:	480e      	ldr	r0, [pc, #56]	; (801d6dc <RadioSetTxGenericConfig+0x2f0>)
 801d6a4:	f000 fdec 	bl	801e280 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d6a8:	480d      	ldr	r0, [pc, #52]	; (801d6e0 <RadioSetTxGenericConfig+0x2f4>)
 801d6aa:	f000 febb 	bl	801e424 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d6ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d6b2:	4618      	mov	r0, r3
 801d6b4:	f000 f97f 	bl	801d9b6 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d6b8:	68bb      	ldr	r3, [r7, #8]
 801d6ba:	8a1b      	ldrh	r3, [r3, #16]
 801d6bc:	4618      	mov	r0, r3
 801d6be:	f000 f9c9 	bl	801da54 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d6c2:	68bb      	ldr	r3, [r7, #8]
 801d6c4:	899b      	ldrh	r3, [r3, #12]
 801d6c6:	4618      	mov	r0, r3
 801d6c8:	f000 f9a4 	bl	801da14 <SUBGRF_SetCrcPolynomial>
        break;
 801d6cc:	e0a6      	b.n	801d81c <RadioSetTxGenericConfig+0x430>
 801d6ce:	bf00      	nop
 801d6d0:	20001be0 	.word	0x20001be0
 801d6d4:	20001bdc 	.word	0x20001bdc
 801d6d8:	20001c3c 	.word	0x20001c3c
 801d6dc:	20001c18 	.word	0x20001c18
 801d6e0:	20001bee 	.word	0x20001bee
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d6e4:	4b59      	ldr	r3, [pc, #356]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d6e6:	2201      	movs	r2, #1
 801d6e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d6ec:	68bb      	ldr	r3, [r7, #8]
 801d6ee:	781a      	ldrb	r2, [r3, #0]
 801d6f0:	4b56      	ldr	r3, [pc, #344]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d6f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d6f6:	68bb      	ldr	r3, [r7, #8]
 801d6f8:	785a      	ldrb	r2, [r3, #1]
 801d6fa:	4b54      	ldr	r3, [pc, #336]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d6fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d700:	68bb      	ldr	r3, [r7, #8]
 801d702:	789a      	ldrb	r2, [r3, #2]
 801d704:	4b51      	ldr	r3, [pc, #324]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d706:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d70a:	68bb      	ldr	r3, [r7, #8]
 801d70c:	78db      	ldrb	r3, [r3, #3]
 801d70e:	2b02      	cmp	r3, #2
 801d710:	d010      	beq.n	801d734 <RadioSetTxGenericConfig+0x348>
 801d712:	2b02      	cmp	r3, #2
 801d714:	dc20      	bgt.n	801d758 <RadioSetTxGenericConfig+0x36c>
 801d716:	2b00      	cmp	r3, #0
 801d718:	d002      	beq.n	801d720 <RadioSetTxGenericConfig+0x334>
 801d71a:	2b01      	cmp	r3, #1
 801d71c:	d005      	beq.n	801d72a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801d71e:	e01b      	b.n	801d758 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d720:	4b4a      	ldr	r3, [pc, #296]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d722:	2200      	movs	r2, #0
 801d724:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d728:	e017      	b.n	801d75a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d72a:	4b48      	ldr	r3, [pc, #288]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d72c:	2201      	movs	r2, #1
 801d72e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d732:	e012      	b.n	801d75a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d734:	68bb      	ldr	r3, [r7, #8]
 801d736:	781b      	ldrb	r3, [r3, #0]
 801d738:	2b0b      	cmp	r3, #11
 801d73a:	d003      	beq.n	801d744 <RadioSetTxGenericConfig+0x358>
 801d73c:	68bb      	ldr	r3, [r7, #8]
 801d73e:	781b      	ldrb	r3, [r3, #0]
 801d740:	2b0c      	cmp	r3, #12
 801d742:	d104      	bne.n	801d74e <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d744:	4b41      	ldr	r3, [pc, #260]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d746:	2201      	movs	r2, #1
 801d748:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d74c:	e005      	b.n	801d75a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d74e:	4b3f      	ldr	r3, [pc, #252]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d750:	2200      	movs	r2, #0
 801d752:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d756:	e000      	b.n	801d75a <RadioSetTxGenericConfig+0x36e>
            break;
 801d758:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d75a:	4b3c      	ldr	r3, [pc, #240]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d75c:	2201      	movs	r2, #1
 801d75e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d760:	68bb      	ldr	r3, [r7, #8]
 801d762:	889a      	ldrh	r2, [r3, #4]
 801d764:	4b39      	ldr	r3, [pc, #228]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d766:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d768:	68bb      	ldr	r3, [r7, #8]
 801d76a:	799a      	ldrb	r2, [r3, #6]
 801d76c:	4b37      	ldr	r3, [pc, #220]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d76e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d770:	68bb      	ldr	r3, [r7, #8]
 801d772:	79da      	ldrb	r2, [r3, #7]
 801d774:	4b35      	ldr	r3, [pc, #212]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d776:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d77a:	68bb      	ldr	r3, [r7, #8]
 801d77c:	7a1a      	ldrb	r2, [r3, #8]
 801d77e:	4b33      	ldr	r3, [pc, #204]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801d784:	f7fe ff87 	bl	801c696 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d788:	2001      	movs	r0, #1
 801d78a:	f7fe f91b 	bl	801b9c4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d78e:	4830      	ldr	r0, [pc, #192]	; (801d850 <RadioSetTxGenericConfig+0x464>)
 801d790:	f000 fd76 	bl	801e280 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d794:	482f      	ldr	r0, [pc, #188]	; (801d854 <RadioSetTxGenericConfig+0x468>)
 801d796:	f000 fe45 	bl	801e424 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d79a:	4b2c      	ldr	r3, [pc, #176]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d79c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d7a0:	2b06      	cmp	r3, #6
 801d7a2:	d10d      	bne.n	801d7c0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801d7a4:	f640 0089 	movw	r0, #2185	; 0x889
 801d7a8:	f000 ff98 	bl	801e6dc <SUBGRF_ReadRegister>
 801d7ac:	4603      	mov	r3, r0
 801d7ae:	f023 0304 	bic.w	r3, r3, #4
 801d7b2:	b2db      	uxtb	r3, r3
 801d7b4:	4619      	mov	r1, r3
 801d7b6:	f640 0089 	movw	r0, #2185	; 0x889
 801d7ba:	f000 ff7b 	bl	801e6b4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801d7be:	e02d      	b.n	801d81c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801d7c0:	f640 0089 	movw	r0, #2185	; 0x889
 801d7c4:	f000 ff8a 	bl	801e6dc <SUBGRF_ReadRegister>
 801d7c8:	4603      	mov	r3, r0
 801d7ca:	f043 0304 	orr.w	r3, r3, #4
 801d7ce:	b2db      	uxtb	r3, r3
 801d7d0:	4619      	mov	r1, r3
 801d7d2:	f640 0089 	movw	r0, #2185	; 0x889
 801d7d6:	f000 ff6d 	bl	801e6b4 <SUBGRF_WriteRegister>
        break;
 801d7da:	e01f      	b.n	801d81c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d7dc:	68bb      	ldr	r3, [r7, #8]
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d004      	beq.n	801d7ee <RadioSetTxGenericConfig+0x402>
 801d7e4:	68bb      	ldr	r3, [r7, #8]
 801d7e6:	681b      	ldr	r3, [r3, #0]
 801d7e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d7ec:	d902      	bls.n	801d7f4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801d7ee:	f04f 33ff 	mov.w	r3, #4294967295
 801d7f2:	e027      	b.n	801d844 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801d7f4:	2003      	movs	r0, #3
 801d7f6:	f7fe f8e5 	bl	801b9c4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d7fa:	4b14      	ldr	r3, [pc, #80]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d7fc:	2202      	movs	r2, #2
 801d7fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d802:	68bb      	ldr	r3, [r7, #8]
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	4a11      	ldr	r2, [pc, #68]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d808:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d80a:	4b10      	ldr	r3, [pc, #64]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d80c:	2216      	movs	r2, #22
 801d80e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d812:	480f      	ldr	r0, [pc, #60]	; (801d850 <RadioSetTxGenericConfig+0x464>)
 801d814:	f000 fd34 	bl	801e280 <SUBGRF_SetModulationParams>
        break;
 801d818:	e000      	b.n	801d81c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801d81a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d81c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d820:	4618      	mov	r0, r3
 801d822:	f001 f863 	bl	801e8ec <SUBGRF_SetRfTxPower>
 801d826:	4603      	mov	r3, r0
 801d828:	461a      	mov	r2, r3
 801d82a:	4b08      	ldr	r3, [pc, #32]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d82c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d830:	4b06      	ldr	r3, [pc, #24]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d832:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d836:	4618      	mov	r0, r3
 801d838:	f001 fa37 	bl	801ecaa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d83c:	4a03      	ldr	r2, [pc, #12]	; (801d84c <RadioSetTxGenericConfig+0x460>)
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	6053      	str	r3, [r2, #4]
    return 0;
 801d842:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d844:	4618      	mov	r0, r3
 801d846:	3738      	adds	r7, #56	; 0x38
 801d848:	46bd      	mov	sp, r7
 801d84a:	bd80      	pop	{r7, pc}
 801d84c:	20001be0 	.word	0x20001be0
 801d850:	20001c18 	.word	0x20001c18
 801d854:	20001bee 	.word	0x20001bee

0801d858 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801d858:	b480      	push	{r7}
 801d85a:	b085      	sub	sp, #20
 801d85c:	af00      	add	r7, sp, #0
 801d85e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d860:	2301      	movs	r3, #1
 801d862:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801d864:	7bfb      	ldrb	r3, [r7, #15]
}
 801d866:	4618      	mov	r0, r3
 801d868:	3714      	adds	r7, #20
 801d86a:	46bd      	mov	sp, r7
 801d86c:	bc80      	pop	{r7}
 801d86e:	4770      	bx	lr

0801d870 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801d870:	b480      	push	{r7}
 801d872:	b083      	sub	sp, #12
 801d874:	af00      	add	r7, sp, #0
 801d876:	6078      	str	r0, [r7, #4]
 801d878:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d87a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801d87c:	4618      	mov	r0, r3
 801d87e:	370c      	adds	r7, #12
 801d880:	46bd      	mov	sp, r7
 801d882:	bc80      	pop	{r7}
 801d884:	4770      	bx	lr
	...

0801d888 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801d888:	b580      	push	{r7, lr}
 801d88a:	b084      	sub	sp, #16
 801d88c:	af00      	add	r7, sp, #0
 801d88e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	2b00      	cmp	r3, #0
 801d894:	d002      	beq.n	801d89c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801d896:	4a1d      	ldr	r2, [pc, #116]	; (801d90c <SUBGRF_Init+0x84>)
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801d89c:	f7e4 fd4e 	bl	800233c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d8a0:	2002      	movs	r0, #2
 801d8a2:	f001 f8ff 	bl	801eaa4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801d8a6:	4b1a      	ldr	r3, [pc, #104]	; (801d910 <SUBGRF_Init+0x88>)
 801d8a8:	2200      	movs	r2, #0
 801d8aa:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801d8ac:	2000      	movs	r0, #0
 801d8ae:	f000 f97d 	bl	801dbac <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801d8b2:	f7ef ff6f 	bl	800d794 <RBI_IsTCXO>
 801d8b6:	4603      	mov	r3, r0
 801d8b8:	2b01      	cmp	r3, #1
 801d8ba:	d10e      	bne.n	801d8da <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801d8bc:	2140      	movs	r1, #64	; 0x40
 801d8be:	2001      	movs	r0, #1
 801d8c0:	f000 fb82 	bl	801dfc8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801d8c4:	2100      	movs	r1, #0
 801d8c6:	f640 1011 	movw	r0, #2321	; 0x911
 801d8ca:	f000 fef3 	bl	801e6b4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801d8ce:	237f      	movs	r3, #127	; 0x7f
 801d8d0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801d8d2:	7b38      	ldrb	r0, [r7, #12]
 801d8d4:	f000 fa8b 	bl	801ddee <SUBGRF_Calibrate>
 801d8d8:	e009      	b.n	801d8ee <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d8da:	2120      	movs	r1, #32
 801d8dc:	f640 1011 	movw	r0, #2321	; 0x911
 801d8e0:	f000 fee8 	bl	801e6b4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d8e4:	2120      	movs	r1, #32
 801d8e6:	f640 1012 	movw	r0, #2322	; 0x912
 801d8ea:	f000 fee3 	bl	801e6b4 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801d8ee:	210e      	movs	r1, #14
 801d8f0:	f640 101f 	movw	r0, #2335	; 0x91f
 801d8f4:	f000 fede 	bl	801e6b4 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801d8f8:	f7ef ff30 	bl	800d75c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801d8fc:	4b05      	ldr	r3, [pc, #20]	; (801d914 <SUBGRF_Init+0x8c>)
 801d8fe:	2201      	movs	r2, #1
 801d900:	701a      	strb	r2, [r3, #0]
}
 801d902:	bf00      	nop
 801d904:	3710      	adds	r7, #16
 801d906:	46bd      	mov	sp, r7
 801d908:	bd80      	pop	{r7, pc}
 801d90a:	bf00      	nop
 801d90c:	20001c78 	.word	0x20001c78
 801d910:	20001c74 	.word	0x20001c74
 801d914:	20001c6c 	.word	0x20001c6c

0801d918 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801d918:	b480      	push	{r7}
 801d91a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801d91c:	4b02      	ldr	r3, [pc, #8]	; (801d928 <SUBGRF_GetOperatingMode+0x10>)
 801d91e:	781b      	ldrb	r3, [r3, #0]
}
 801d920:	4618      	mov	r0, r3
 801d922:	46bd      	mov	sp, r7
 801d924:	bc80      	pop	{r7}
 801d926:	4770      	bx	lr
 801d928:	20001c6c 	.word	0x20001c6c

0801d92c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801d92c:	b580      	push	{r7, lr}
 801d92e:	b082      	sub	sp, #8
 801d930:	af00      	add	r7, sp, #0
 801d932:	6078      	str	r0, [r7, #4]
 801d934:	460b      	mov	r3, r1
 801d936:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801d938:	78fb      	ldrb	r3, [r7, #3]
 801d93a:	461a      	mov	r2, r3
 801d93c:	6879      	ldr	r1, [r7, #4]
 801d93e:	2000      	movs	r0, #0
 801d940:	f000 ff24 	bl	801e78c <SUBGRF_WriteBuffer>
}
 801d944:	bf00      	nop
 801d946:	3708      	adds	r7, #8
 801d948:	46bd      	mov	sp, r7
 801d94a:	bd80      	pop	{r7, pc}

0801d94c <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801d94c:	b580      	push	{r7, lr}
 801d94e:	b086      	sub	sp, #24
 801d950:	af00      	add	r7, sp, #0
 801d952:	60f8      	str	r0, [r7, #12]
 801d954:	60b9      	str	r1, [r7, #8]
 801d956:	4613      	mov	r3, r2
 801d958:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801d95a:	2300      	movs	r3, #0
 801d95c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801d95e:	f107 0317 	add.w	r3, r7, #23
 801d962:	4619      	mov	r1, r3
 801d964:	68b8      	ldr	r0, [r7, #8]
 801d966:	f000 fe27 	bl	801e5b8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801d96a:	68bb      	ldr	r3, [r7, #8]
 801d96c:	781b      	ldrb	r3, [r3, #0]
 801d96e:	79fa      	ldrb	r2, [r7, #7]
 801d970:	429a      	cmp	r2, r3
 801d972:	d201      	bcs.n	801d978 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801d974:	2301      	movs	r3, #1
 801d976:	e007      	b.n	801d988 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801d978:	7df8      	ldrb	r0, [r7, #23]
 801d97a:	68bb      	ldr	r3, [r7, #8]
 801d97c:	781b      	ldrb	r3, [r3, #0]
 801d97e:	461a      	mov	r2, r3
 801d980:	68f9      	ldr	r1, [r7, #12]
 801d982:	f000 ff25 	bl	801e7d0 <SUBGRF_ReadBuffer>

    return 0;
 801d986:	2300      	movs	r3, #0
}
 801d988:	4618      	mov	r0, r3
 801d98a:	3718      	adds	r7, #24
 801d98c:	46bd      	mov	sp, r7
 801d98e:	bd80      	pop	{r7, pc}

0801d990 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801d990:	b580      	push	{r7, lr}
 801d992:	b084      	sub	sp, #16
 801d994:	af00      	add	r7, sp, #0
 801d996:	60f8      	str	r0, [r7, #12]
 801d998:	460b      	mov	r3, r1
 801d99a:	607a      	str	r2, [r7, #4]
 801d99c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801d99e:	7afb      	ldrb	r3, [r7, #11]
 801d9a0:	4619      	mov	r1, r3
 801d9a2:	68f8      	ldr	r0, [r7, #12]
 801d9a4:	f7ff ffc2 	bl	801d92c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801d9a8:	6878      	ldr	r0, [r7, #4]
 801d9aa:	f000 f91b 	bl	801dbe4 <SUBGRF_SetTx>
}
 801d9ae:	bf00      	nop
 801d9b0:	3710      	adds	r7, #16
 801d9b2:	46bd      	mov	sp, r7
 801d9b4:	bd80      	pop	{r7, pc}

0801d9b6 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801d9b6:	b580      	push	{r7, lr}
 801d9b8:	b082      	sub	sp, #8
 801d9ba:	af00      	add	r7, sp, #0
 801d9bc:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801d9be:	2208      	movs	r2, #8
 801d9c0:	6879      	ldr	r1, [r7, #4]
 801d9c2:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801d9c6:	f000 fe9d 	bl	801e704 <SUBGRF_WriteRegisters>
    return 0;
 801d9ca:	2300      	movs	r3, #0
}
 801d9cc:	4618      	mov	r0, r3
 801d9ce:	3708      	adds	r7, #8
 801d9d0:	46bd      	mov	sp, r7
 801d9d2:	bd80      	pop	{r7, pc}

0801d9d4 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801d9d4:	b580      	push	{r7, lr}
 801d9d6:	b084      	sub	sp, #16
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	4603      	mov	r3, r0
 801d9dc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801d9de:	88fb      	ldrh	r3, [r7, #6]
 801d9e0:	0a1b      	lsrs	r3, r3, #8
 801d9e2:	b29b      	uxth	r3, r3
 801d9e4:	b2db      	uxtb	r3, r3
 801d9e6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801d9e8:	88fb      	ldrh	r3, [r7, #6]
 801d9ea:	b2db      	uxtb	r3, r3
 801d9ec:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d9ee:	f000 fb6f 	bl	801e0d0 <SUBGRF_GetPacketType>
 801d9f2:	4603      	mov	r3, r0
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d108      	bne.n	801da0a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801d9f8:	f107 030c 	add.w	r3, r7, #12
 801d9fc:	2202      	movs	r2, #2
 801d9fe:	4619      	mov	r1, r3
 801da00:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801da04:	f000 fe7e 	bl	801e704 <SUBGRF_WriteRegisters>
            break;
 801da08:	e000      	b.n	801da0c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801da0a:	bf00      	nop
    }
}
 801da0c:	bf00      	nop
 801da0e:	3710      	adds	r7, #16
 801da10:	46bd      	mov	sp, r7
 801da12:	bd80      	pop	{r7, pc}

0801da14 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801da14:	b580      	push	{r7, lr}
 801da16:	b084      	sub	sp, #16
 801da18:	af00      	add	r7, sp, #0
 801da1a:	4603      	mov	r3, r0
 801da1c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801da1e:	88fb      	ldrh	r3, [r7, #6]
 801da20:	0a1b      	lsrs	r3, r3, #8
 801da22:	b29b      	uxth	r3, r3
 801da24:	b2db      	uxtb	r3, r3
 801da26:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801da28:	88fb      	ldrh	r3, [r7, #6]
 801da2a:	b2db      	uxtb	r3, r3
 801da2c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801da2e:	f000 fb4f 	bl	801e0d0 <SUBGRF_GetPacketType>
 801da32:	4603      	mov	r3, r0
 801da34:	2b00      	cmp	r3, #0
 801da36:	d108      	bne.n	801da4a <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801da38:	f107 030c 	add.w	r3, r7, #12
 801da3c:	2202      	movs	r2, #2
 801da3e:	4619      	mov	r1, r3
 801da40:	f240 60be 	movw	r0, #1726	; 0x6be
 801da44:	f000 fe5e 	bl	801e704 <SUBGRF_WriteRegisters>
            break;
 801da48:	e000      	b.n	801da4c <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801da4a:	bf00      	nop
    }
}
 801da4c:	bf00      	nop
 801da4e:	3710      	adds	r7, #16
 801da50:	46bd      	mov	sp, r7
 801da52:	bd80      	pop	{r7, pc}

0801da54 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801da54:	b580      	push	{r7, lr}
 801da56:	b084      	sub	sp, #16
 801da58:	af00      	add	r7, sp, #0
 801da5a:	4603      	mov	r3, r0
 801da5c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801da5e:	2300      	movs	r3, #0
 801da60:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801da62:	f000 fb35 	bl	801e0d0 <SUBGRF_GetPacketType>
 801da66:	4603      	mov	r3, r0
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d121      	bne.n	801dab0 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801da6c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801da70:	f000 fe34 	bl	801e6dc <SUBGRF_ReadRegister>
 801da74:	4603      	mov	r3, r0
 801da76:	f023 0301 	bic.w	r3, r3, #1
 801da7a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801da7c:	88fb      	ldrh	r3, [r7, #6]
 801da7e:	0a1b      	lsrs	r3, r3, #8
 801da80:	b29b      	uxth	r3, r3
 801da82:	b25b      	sxtb	r3, r3
 801da84:	f003 0301 	and.w	r3, r3, #1
 801da88:	b25a      	sxtb	r2, r3
 801da8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801da8e:	4313      	orrs	r3, r2
 801da90:	b25b      	sxtb	r3, r3
 801da92:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801da94:	7bfb      	ldrb	r3, [r7, #15]
 801da96:	4619      	mov	r1, r3
 801da98:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801da9c:	f000 fe0a 	bl	801e6b4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801daa0:	88fb      	ldrh	r3, [r7, #6]
 801daa2:	b2db      	uxtb	r3, r3
 801daa4:	4619      	mov	r1, r3
 801daa6:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801daaa:	f000 fe03 	bl	801e6b4 <SUBGRF_WriteRegister>
            break;
 801daae:	e000      	b.n	801dab2 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801dab0:	bf00      	nop
    }
}
 801dab2:	bf00      	nop
 801dab4:	3710      	adds	r7, #16
 801dab6:	46bd      	mov	sp, r7
 801dab8:	bd80      	pop	{r7, pc}

0801daba <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801daba:	b580      	push	{r7, lr}
 801dabc:	b082      	sub	sp, #8
 801dabe:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801dac0:	2300      	movs	r3, #0
 801dac2:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801dac4:	2300      	movs	r3, #0
 801dac6:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801dac8:	2300      	movs	r3, #0
 801daca:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801dacc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801dad0:	f000 fe04 	bl	801e6dc <SUBGRF_ReadRegister>
 801dad4:	4603      	mov	r3, r0
 801dad6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801dad8:	79fb      	ldrb	r3, [r7, #7]
 801dada:	f023 0301 	bic.w	r3, r3, #1
 801dade:	b2db      	uxtb	r3, r3
 801dae0:	4619      	mov	r1, r3
 801dae2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801dae6:	f000 fde5 	bl	801e6b4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801daea:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801daee:	f000 fdf5 	bl	801e6dc <SUBGRF_ReadRegister>
 801daf2:	4603      	mov	r3, r0
 801daf4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801daf6:	79bb      	ldrb	r3, [r7, #6]
 801daf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dafc:	b2db      	uxtb	r3, r3
 801dafe:	4619      	mov	r1, r3
 801db00:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db04:	f000 fdd6 	bl	801e6b4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801db08:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801db0c:	f000 f88a 	bl	801dc24 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801db10:	463b      	mov	r3, r7
 801db12:	2204      	movs	r2, #4
 801db14:	4619      	mov	r1, r3
 801db16:	f640 0019 	movw	r0, #2073	; 0x819
 801db1a:	f000 fe15 	bl	801e748 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801db1e:	2000      	movs	r0, #0
 801db20:	f000 f844 	bl	801dbac <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801db24:	79fb      	ldrb	r3, [r7, #7]
 801db26:	4619      	mov	r1, r3
 801db28:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801db2c:	f000 fdc2 	bl	801e6b4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801db30:	79bb      	ldrb	r3, [r7, #6]
 801db32:	4619      	mov	r1, r3
 801db34:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801db38:	f000 fdbc 	bl	801e6b4 <SUBGRF_WriteRegister>

    return number;
 801db3c:	683b      	ldr	r3, [r7, #0]
}
 801db3e:	4618      	mov	r0, r3
 801db40:	3708      	adds	r7, #8
 801db42:	46bd      	mov	sp, r7
 801db44:	bd80      	pop	{r7, pc}
	...

0801db48 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b084      	sub	sp, #16
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801db50:	2000      	movs	r0, #0
 801db52:	f7ef fe0a 	bl	800d76a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801db56:	2002      	movs	r0, #2
 801db58:	f000 ffa4 	bl	801eaa4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801db5c:	793b      	ldrb	r3, [r7, #4]
 801db5e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801db62:	b2db      	uxtb	r3, r3
 801db64:	009b      	lsls	r3, r3, #2
 801db66:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801db68:	793b      	ldrb	r3, [r7, #4]
 801db6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801db6e:	b2db      	uxtb	r3, r3
 801db70:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801db72:	b25b      	sxtb	r3, r3
 801db74:	4313      	orrs	r3, r2
 801db76:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801db78:	793b      	ldrb	r3, [r7, #4]
 801db7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801db7e:	b2db      	uxtb	r3, r3
 801db80:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801db82:	4313      	orrs	r3, r2
 801db84:	b25b      	sxtb	r3, r3
 801db86:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801db88:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801db8a:	f107 030f 	add.w	r3, r7, #15
 801db8e:	2201      	movs	r2, #1
 801db90:	4619      	mov	r1, r3
 801db92:	2084      	movs	r0, #132	; 0x84
 801db94:	f000 fe3e 	bl	801e814 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801db98:	4b03      	ldr	r3, [pc, #12]	; (801dba8 <SUBGRF_SetSleep+0x60>)
 801db9a:	2200      	movs	r2, #0
 801db9c:	701a      	strb	r2, [r3, #0]
}
 801db9e:	bf00      	nop
 801dba0:	3710      	adds	r7, #16
 801dba2:	46bd      	mov	sp, r7
 801dba4:	bd80      	pop	{r7, pc}
 801dba6:	bf00      	nop
 801dba8:	20001c6c 	.word	0x20001c6c

0801dbac <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801dbac:	b580      	push	{r7, lr}
 801dbae:	b082      	sub	sp, #8
 801dbb0:	af00      	add	r7, sp, #0
 801dbb2:	4603      	mov	r3, r0
 801dbb4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801dbb6:	1dfb      	adds	r3, r7, #7
 801dbb8:	2201      	movs	r2, #1
 801dbba:	4619      	mov	r1, r3
 801dbbc:	2080      	movs	r0, #128	; 0x80
 801dbbe:	f000 fe29 	bl	801e814 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801dbc2:	79fb      	ldrb	r3, [r7, #7]
 801dbc4:	2b00      	cmp	r3, #0
 801dbc6:	d103      	bne.n	801dbd0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801dbc8:	4b05      	ldr	r3, [pc, #20]	; (801dbe0 <SUBGRF_SetStandby+0x34>)
 801dbca:	2201      	movs	r2, #1
 801dbcc:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801dbce:	e002      	b.n	801dbd6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801dbd0:	4b03      	ldr	r3, [pc, #12]	; (801dbe0 <SUBGRF_SetStandby+0x34>)
 801dbd2:	2202      	movs	r2, #2
 801dbd4:	701a      	strb	r2, [r3, #0]
}
 801dbd6:	bf00      	nop
 801dbd8:	3708      	adds	r7, #8
 801dbda:	46bd      	mov	sp, r7
 801dbdc:	bd80      	pop	{r7, pc}
 801dbde:	bf00      	nop
 801dbe0:	20001c6c 	.word	0x20001c6c

0801dbe4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801dbe4:	b580      	push	{r7, lr}
 801dbe6:	b084      	sub	sp, #16
 801dbe8:	af00      	add	r7, sp, #0
 801dbea:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801dbec:	4b0c      	ldr	r3, [pc, #48]	; (801dc20 <SUBGRF_SetTx+0x3c>)
 801dbee:	2204      	movs	r2, #4
 801dbf0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	0c1b      	lsrs	r3, r3, #16
 801dbf6:	b2db      	uxtb	r3, r3
 801dbf8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dbfa:	687b      	ldr	r3, [r7, #4]
 801dbfc:	0a1b      	lsrs	r3, r3, #8
 801dbfe:	b2db      	uxtb	r3, r3
 801dc00:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	b2db      	uxtb	r3, r3
 801dc06:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801dc08:	f107 030c 	add.w	r3, r7, #12
 801dc0c:	2203      	movs	r2, #3
 801dc0e:	4619      	mov	r1, r3
 801dc10:	2083      	movs	r0, #131	; 0x83
 801dc12:	f000 fdff 	bl	801e814 <SUBGRF_WriteCommand>
}
 801dc16:	bf00      	nop
 801dc18:	3710      	adds	r7, #16
 801dc1a:	46bd      	mov	sp, r7
 801dc1c:	bd80      	pop	{r7, pc}
 801dc1e:	bf00      	nop
 801dc20:	20001c6c 	.word	0x20001c6c

0801dc24 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801dc24:	b580      	push	{r7, lr}
 801dc26:	b084      	sub	sp, #16
 801dc28:	af00      	add	r7, sp, #0
 801dc2a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dc2c:	4b0c      	ldr	r3, [pc, #48]	; (801dc60 <SUBGRF_SetRx+0x3c>)
 801dc2e:	2205      	movs	r2, #5
 801dc30:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	0c1b      	lsrs	r3, r3, #16
 801dc36:	b2db      	uxtb	r3, r3
 801dc38:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc3a:	687b      	ldr	r3, [r7, #4]
 801dc3c:	0a1b      	lsrs	r3, r3, #8
 801dc3e:	b2db      	uxtb	r3, r3
 801dc40:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dc42:	687b      	ldr	r3, [r7, #4]
 801dc44:	b2db      	uxtb	r3, r3
 801dc46:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801dc48:	f107 030c 	add.w	r3, r7, #12
 801dc4c:	2203      	movs	r2, #3
 801dc4e:	4619      	mov	r1, r3
 801dc50:	2082      	movs	r0, #130	; 0x82
 801dc52:	f000 fddf 	bl	801e814 <SUBGRF_WriteCommand>
}
 801dc56:	bf00      	nop
 801dc58:	3710      	adds	r7, #16
 801dc5a:	46bd      	mov	sp, r7
 801dc5c:	bd80      	pop	{r7, pc}
 801dc5e:	bf00      	nop
 801dc60:	20001c6c 	.word	0x20001c6c

0801dc64 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801dc64:	b580      	push	{r7, lr}
 801dc66:	b084      	sub	sp, #16
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801dc6c:	4b0e      	ldr	r3, [pc, #56]	; (801dca8 <SUBGRF_SetRxBoosted+0x44>)
 801dc6e:	2205      	movs	r2, #5
 801dc70:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801dc72:	2197      	movs	r1, #151	; 0x97
 801dc74:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801dc78:	f000 fd1c 	bl	801e6b4 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	0c1b      	lsrs	r3, r3, #16
 801dc80:	b2db      	uxtb	r3, r3
 801dc82:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	0a1b      	lsrs	r3, r3, #8
 801dc88:	b2db      	uxtb	r3, r3
 801dc8a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	b2db      	uxtb	r3, r3
 801dc90:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801dc92:	f107 030c 	add.w	r3, r7, #12
 801dc96:	2203      	movs	r2, #3
 801dc98:	4619      	mov	r1, r3
 801dc9a:	2082      	movs	r0, #130	; 0x82
 801dc9c:	f000 fdba 	bl	801e814 <SUBGRF_WriteCommand>
}
 801dca0:	bf00      	nop
 801dca2:	3710      	adds	r7, #16
 801dca4:	46bd      	mov	sp, r7
 801dca6:	bd80      	pop	{r7, pc}
 801dca8:	20001c6c 	.word	0x20001c6c

0801dcac <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801dcac:	b580      	push	{r7, lr}
 801dcae:	b084      	sub	sp, #16
 801dcb0:	af00      	add	r7, sp, #0
 801dcb2:	6078      	str	r0, [r7, #4]
 801dcb4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	0c1b      	lsrs	r3, r3, #16
 801dcba:	b2db      	uxtb	r3, r3
 801dcbc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	0a1b      	lsrs	r3, r3, #8
 801dcc2:	b2db      	uxtb	r3, r3
 801dcc4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	b2db      	uxtb	r3, r3
 801dcca:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801dccc:	683b      	ldr	r3, [r7, #0]
 801dcce:	0c1b      	lsrs	r3, r3, #16
 801dcd0:	b2db      	uxtb	r3, r3
 801dcd2:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801dcd4:	683b      	ldr	r3, [r7, #0]
 801dcd6:	0a1b      	lsrs	r3, r3, #8
 801dcd8:	b2db      	uxtb	r3, r3
 801dcda:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801dcdc:	683b      	ldr	r3, [r7, #0]
 801dcde:	b2db      	uxtb	r3, r3
 801dce0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801dce2:	f107 0308 	add.w	r3, r7, #8
 801dce6:	2206      	movs	r2, #6
 801dce8:	4619      	mov	r1, r3
 801dcea:	2094      	movs	r0, #148	; 0x94
 801dcec:	f000 fd92 	bl	801e814 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801dcf0:	4b03      	ldr	r3, [pc, #12]	; (801dd00 <SUBGRF_SetRxDutyCycle+0x54>)
 801dcf2:	2206      	movs	r2, #6
 801dcf4:	701a      	strb	r2, [r3, #0]
}
 801dcf6:	bf00      	nop
 801dcf8:	3710      	adds	r7, #16
 801dcfa:	46bd      	mov	sp, r7
 801dcfc:	bd80      	pop	{r7, pc}
 801dcfe:	bf00      	nop
 801dd00:	20001c6c 	.word	0x20001c6c

0801dd04 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801dd04:	b580      	push	{r7, lr}
 801dd06:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801dd08:	2200      	movs	r2, #0
 801dd0a:	2100      	movs	r1, #0
 801dd0c:	20c5      	movs	r0, #197	; 0xc5
 801dd0e:	f000 fd81 	bl	801e814 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801dd12:	4b02      	ldr	r3, [pc, #8]	; (801dd1c <SUBGRF_SetCad+0x18>)
 801dd14:	2207      	movs	r2, #7
 801dd16:	701a      	strb	r2, [r3, #0]
}
 801dd18:	bf00      	nop
 801dd1a:	bd80      	pop	{r7, pc}
 801dd1c:	20001c6c 	.word	0x20001c6c

0801dd20 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801dd20:	b580      	push	{r7, lr}
 801dd22:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801dd24:	2200      	movs	r2, #0
 801dd26:	2100      	movs	r1, #0
 801dd28:	20d1      	movs	r0, #209	; 0xd1
 801dd2a:	f000 fd73 	bl	801e814 <SUBGRF_WriteCommand>
}
 801dd2e:	bf00      	nop
 801dd30:	bd80      	pop	{r7, pc}

0801dd32 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801dd32:	b580      	push	{r7, lr}
 801dd34:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801dd36:	2200      	movs	r2, #0
 801dd38:	2100      	movs	r1, #0
 801dd3a:	20d2      	movs	r0, #210	; 0xd2
 801dd3c:	f000 fd6a 	bl	801e814 <SUBGRF_WriteCommand>
}
 801dd40:	bf00      	nop
 801dd42:	bd80      	pop	{r7, pc}

0801dd44 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b082      	sub	sp, #8
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801dd4e:	1dfb      	adds	r3, r7, #7
 801dd50:	2201      	movs	r2, #1
 801dd52:	4619      	mov	r1, r3
 801dd54:	209f      	movs	r0, #159	; 0x9f
 801dd56:	f000 fd5d 	bl	801e814 <SUBGRF_WriteCommand>
}
 801dd5a:	bf00      	nop
 801dd5c:	3708      	adds	r7, #8
 801dd5e:	46bd      	mov	sp, r7
 801dd60:	bd80      	pop	{r7, pc}

0801dd62 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801dd62:	b580      	push	{r7, lr}
 801dd64:	b084      	sub	sp, #16
 801dd66:	af00      	add	r7, sp, #0
 801dd68:	4603      	mov	r3, r0
 801dd6a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801dd6c:	1dfb      	adds	r3, r7, #7
 801dd6e:	2201      	movs	r2, #1
 801dd70:	4619      	mov	r1, r3
 801dd72:	20a0      	movs	r0, #160	; 0xa0
 801dd74:	f000 fd4e 	bl	801e814 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801dd78:	79fb      	ldrb	r3, [r7, #7]
 801dd7a:	2b3f      	cmp	r3, #63	; 0x3f
 801dd7c:	d91c      	bls.n	801ddb8 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801dd7e:	79fb      	ldrb	r3, [r7, #7]
 801dd80:	085b      	lsrs	r3, r3, #1
 801dd82:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801dd84:	2300      	movs	r3, #0
 801dd86:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801dd88:	2300      	movs	r3, #0
 801dd8a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801dd8c:	e005      	b.n	801dd9a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801dd8e:	7bfb      	ldrb	r3, [r7, #15]
 801dd90:	089b      	lsrs	r3, r3, #2
 801dd92:	73fb      	strb	r3, [r7, #15]
            exp++;
 801dd94:	7bbb      	ldrb	r3, [r7, #14]
 801dd96:	3301      	adds	r3, #1
 801dd98:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801dd9a:	7bfb      	ldrb	r3, [r7, #15]
 801dd9c:	2b1f      	cmp	r3, #31
 801dd9e:	d8f6      	bhi.n	801dd8e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801dda0:	7bfb      	ldrb	r3, [r7, #15]
 801dda2:	00db      	lsls	r3, r3, #3
 801dda4:	b2da      	uxtb	r2, r3
 801dda6:	7bbb      	ldrb	r3, [r7, #14]
 801dda8:	4413      	add	r3, r2
 801ddaa:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801ddac:	7b7b      	ldrb	r3, [r7, #13]
 801ddae:	4619      	mov	r1, r3
 801ddb0:	f240 7006 	movw	r0, #1798	; 0x706
 801ddb4:	f000 fc7e 	bl	801e6b4 <SUBGRF_WriteRegister>
    }
}
 801ddb8:	bf00      	nop
 801ddba:	3710      	adds	r7, #16
 801ddbc:	46bd      	mov	sp, r7
 801ddbe:	bd80      	pop	{r7, pc}

0801ddc0 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801ddc0:	b580      	push	{r7, lr}
 801ddc2:	b082      	sub	sp, #8
 801ddc4:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801ddc6:	f7ef fcec 	bl	800d7a2 <RBI_IsDCDC>
 801ddca:	4603      	mov	r3, r0
 801ddcc:	2b01      	cmp	r3, #1
 801ddce:	d102      	bne.n	801ddd6 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801ddd0:	2301      	movs	r3, #1
 801ddd2:	71fb      	strb	r3, [r7, #7]
 801ddd4:	e001      	b.n	801ddda <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801ddd6:	2300      	movs	r3, #0
 801ddd8:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801ddda:	1dfb      	adds	r3, r7, #7
 801dddc:	2201      	movs	r2, #1
 801ddde:	4619      	mov	r1, r3
 801dde0:	2096      	movs	r0, #150	; 0x96
 801dde2:	f000 fd17 	bl	801e814 <SUBGRF_WriteCommand>
}
 801dde6:	bf00      	nop
 801dde8:	3708      	adds	r7, #8
 801ddea:	46bd      	mov	sp, r7
 801ddec:	bd80      	pop	{r7, pc}

0801ddee <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801ddee:	b580      	push	{r7, lr}
 801ddf0:	b084      	sub	sp, #16
 801ddf2:	af00      	add	r7, sp, #0
 801ddf4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801ddf6:	793b      	ldrb	r3, [r7, #4]
 801ddf8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801ddfc:	b2db      	uxtb	r3, r3
 801ddfe:	019b      	lsls	r3, r3, #6
 801de00:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801de02:	793b      	ldrb	r3, [r7, #4]
 801de04:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801de08:	b2db      	uxtb	r3, r3
 801de0a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801de0c:	b25b      	sxtb	r3, r3
 801de0e:	4313      	orrs	r3, r2
 801de10:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801de12:	793b      	ldrb	r3, [r7, #4]
 801de14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801de18:	b2db      	uxtb	r3, r3
 801de1a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801de1c:	b25b      	sxtb	r3, r3
 801de1e:	4313      	orrs	r3, r2
 801de20:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801de22:	793b      	ldrb	r3, [r7, #4]
 801de24:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801de28:	b2db      	uxtb	r3, r3
 801de2a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801de2c:	b25b      	sxtb	r3, r3
 801de2e:	4313      	orrs	r3, r2
 801de30:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801de32:	793b      	ldrb	r3, [r7, #4]
 801de34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801de38:	b2db      	uxtb	r3, r3
 801de3a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801de3c:	b25b      	sxtb	r3, r3
 801de3e:	4313      	orrs	r3, r2
 801de40:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801de42:	793b      	ldrb	r3, [r7, #4]
 801de44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801de48:	b2db      	uxtb	r3, r3
 801de4a:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801de4c:	b25b      	sxtb	r3, r3
 801de4e:	4313      	orrs	r3, r2
 801de50:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801de52:	793b      	ldrb	r3, [r7, #4]
 801de54:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801de58:	b2db      	uxtb	r3, r3
 801de5a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801de5c:	4313      	orrs	r3, r2
 801de5e:	b25b      	sxtb	r3, r3
 801de60:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801de62:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801de64:	f107 030f 	add.w	r3, r7, #15
 801de68:	2201      	movs	r2, #1
 801de6a:	4619      	mov	r1, r3
 801de6c:	2089      	movs	r0, #137	; 0x89
 801de6e:	f000 fcd1 	bl	801e814 <SUBGRF_WriteCommand>
}
 801de72:	bf00      	nop
 801de74:	3710      	adds	r7, #16
 801de76:	46bd      	mov	sp, r7
 801de78:	bd80      	pop	{r7, pc}
	...

0801de7c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801de7c:	b580      	push	{r7, lr}
 801de7e:	b084      	sub	sp, #16
 801de80:	af00      	add	r7, sp, #0
 801de82:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	4a1d      	ldr	r2, [pc, #116]	; (801defc <SUBGRF_CalibrateImage+0x80>)
 801de88:	4293      	cmp	r3, r2
 801de8a:	d904      	bls.n	801de96 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801de8c:	23e1      	movs	r3, #225	; 0xe1
 801de8e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801de90:	23e9      	movs	r3, #233	; 0xe9
 801de92:	737b      	strb	r3, [r7, #13]
 801de94:	e027      	b.n	801dee6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801de96:	687b      	ldr	r3, [r7, #4]
 801de98:	4a19      	ldr	r2, [pc, #100]	; (801df00 <SUBGRF_CalibrateImage+0x84>)
 801de9a:	4293      	cmp	r3, r2
 801de9c:	d904      	bls.n	801dea8 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801de9e:	23d7      	movs	r3, #215	; 0xd7
 801dea0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801dea2:	23db      	movs	r3, #219	; 0xdb
 801dea4:	737b      	strb	r3, [r7, #13]
 801dea6:	e01e      	b.n	801dee6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	4a16      	ldr	r2, [pc, #88]	; (801df04 <SUBGRF_CalibrateImage+0x88>)
 801deac:	4293      	cmp	r3, r2
 801deae:	d904      	bls.n	801deba <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801deb0:	23c1      	movs	r3, #193	; 0xc1
 801deb2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801deb4:	23c5      	movs	r3, #197	; 0xc5
 801deb6:	737b      	strb	r3, [r7, #13]
 801deb8:	e015      	b.n	801dee6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	4a12      	ldr	r2, [pc, #72]	; (801df08 <SUBGRF_CalibrateImage+0x8c>)
 801debe:	4293      	cmp	r3, r2
 801dec0:	d904      	bls.n	801decc <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801dec2:	2375      	movs	r3, #117	; 0x75
 801dec4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801dec6:	2381      	movs	r3, #129	; 0x81
 801dec8:	737b      	strb	r3, [r7, #13]
 801deca:	e00c      	b.n	801dee6 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	4a0f      	ldr	r2, [pc, #60]	; (801df0c <SUBGRF_CalibrateImage+0x90>)
 801ded0:	4293      	cmp	r3, r2
 801ded2:	d904      	bls.n	801dede <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801ded4:	236b      	movs	r3, #107	; 0x6b
 801ded6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801ded8:	236f      	movs	r3, #111	; 0x6f
 801deda:	737b      	strb	r3, [r7, #13]
 801dedc:	e003      	b.n	801dee6 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801dede:	2329      	movs	r3, #41	; 0x29
 801dee0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801dee2:	232b      	movs	r3, #43	; 0x2b
 801dee4:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801dee6:	f107 030c 	add.w	r3, r7, #12
 801deea:	2202      	movs	r2, #2
 801deec:	4619      	mov	r1, r3
 801deee:	2098      	movs	r0, #152	; 0x98
 801def0:	f000 fc90 	bl	801e814 <SUBGRF_WriteCommand>
}
 801def4:	bf00      	nop
 801def6:	3710      	adds	r7, #16
 801def8:	46bd      	mov	sp, r7
 801defa:	bd80      	pop	{r7, pc}
 801defc:	35a4e900 	.word	0x35a4e900
 801df00:	32a9f880 	.word	0x32a9f880
 801df04:	2de54480 	.word	0x2de54480
 801df08:	1b6b0b00 	.word	0x1b6b0b00
 801df0c:	1954fc40 	.word	0x1954fc40

0801df10 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801df10:	b590      	push	{r4, r7, lr}
 801df12:	b085      	sub	sp, #20
 801df14:	af00      	add	r7, sp, #0
 801df16:	4604      	mov	r4, r0
 801df18:	4608      	mov	r0, r1
 801df1a:	4611      	mov	r1, r2
 801df1c:	461a      	mov	r2, r3
 801df1e:	4623      	mov	r3, r4
 801df20:	71fb      	strb	r3, [r7, #7]
 801df22:	4603      	mov	r3, r0
 801df24:	71bb      	strb	r3, [r7, #6]
 801df26:	460b      	mov	r3, r1
 801df28:	717b      	strb	r3, [r7, #5]
 801df2a:	4613      	mov	r3, r2
 801df2c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801df2e:	79fb      	ldrb	r3, [r7, #7]
 801df30:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801df32:	79bb      	ldrb	r3, [r7, #6]
 801df34:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801df36:	797b      	ldrb	r3, [r7, #5]
 801df38:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801df3a:	793b      	ldrb	r3, [r7, #4]
 801df3c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801df3e:	f107 030c 	add.w	r3, r7, #12
 801df42:	2204      	movs	r2, #4
 801df44:	4619      	mov	r1, r3
 801df46:	2095      	movs	r0, #149	; 0x95
 801df48:	f000 fc64 	bl	801e814 <SUBGRF_WriteCommand>
}
 801df4c:	bf00      	nop
 801df4e:	3714      	adds	r7, #20
 801df50:	46bd      	mov	sp, r7
 801df52:	bd90      	pop	{r4, r7, pc}

0801df54 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801df54:	b590      	push	{r4, r7, lr}
 801df56:	b085      	sub	sp, #20
 801df58:	af00      	add	r7, sp, #0
 801df5a:	4604      	mov	r4, r0
 801df5c:	4608      	mov	r0, r1
 801df5e:	4611      	mov	r1, r2
 801df60:	461a      	mov	r2, r3
 801df62:	4623      	mov	r3, r4
 801df64:	80fb      	strh	r3, [r7, #6]
 801df66:	4603      	mov	r3, r0
 801df68:	80bb      	strh	r3, [r7, #4]
 801df6a:	460b      	mov	r3, r1
 801df6c:	807b      	strh	r3, [r7, #2]
 801df6e:	4613      	mov	r3, r2
 801df70:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801df72:	88fb      	ldrh	r3, [r7, #6]
 801df74:	0a1b      	lsrs	r3, r3, #8
 801df76:	b29b      	uxth	r3, r3
 801df78:	b2db      	uxtb	r3, r3
 801df7a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801df7c:	88fb      	ldrh	r3, [r7, #6]
 801df7e:	b2db      	uxtb	r3, r3
 801df80:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801df82:	88bb      	ldrh	r3, [r7, #4]
 801df84:	0a1b      	lsrs	r3, r3, #8
 801df86:	b29b      	uxth	r3, r3
 801df88:	b2db      	uxtb	r3, r3
 801df8a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801df8c:	88bb      	ldrh	r3, [r7, #4]
 801df8e:	b2db      	uxtb	r3, r3
 801df90:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801df92:	887b      	ldrh	r3, [r7, #2]
 801df94:	0a1b      	lsrs	r3, r3, #8
 801df96:	b29b      	uxth	r3, r3
 801df98:	b2db      	uxtb	r3, r3
 801df9a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801df9c:	887b      	ldrh	r3, [r7, #2]
 801df9e:	b2db      	uxtb	r3, r3
 801dfa0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801dfa2:	883b      	ldrh	r3, [r7, #0]
 801dfa4:	0a1b      	lsrs	r3, r3, #8
 801dfa6:	b29b      	uxth	r3, r3
 801dfa8:	b2db      	uxtb	r3, r3
 801dfaa:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801dfac:	883b      	ldrh	r3, [r7, #0]
 801dfae:	b2db      	uxtb	r3, r3
 801dfb0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801dfb2:	f107 0308 	add.w	r3, r7, #8
 801dfb6:	2208      	movs	r2, #8
 801dfb8:	4619      	mov	r1, r3
 801dfba:	2008      	movs	r0, #8
 801dfbc:	f000 fc2a 	bl	801e814 <SUBGRF_WriteCommand>
}
 801dfc0:	bf00      	nop
 801dfc2:	3714      	adds	r7, #20
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	bd90      	pop	{r4, r7, pc}

0801dfc8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801dfc8:	b580      	push	{r7, lr}
 801dfca:	b084      	sub	sp, #16
 801dfcc:	af00      	add	r7, sp, #0
 801dfce:	4603      	mov	r3, r0
 801dfd0:	6039      	str	r1, [r7, #0]
 801dfd2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801dfd4:	79fb      	ldrb	r3, [r7, #7]
 801dfd6:	f003 0307 	and.w	r3, r3, #7
 801dfda:	b2db      	uxtb	r3, r3
 801dfdc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dfde:	683b      	ldr	r3, [r7, #0]
 801dfe0:	0c1b      	lsrs	r3, r3, #16
 801dfe2:	b2db      	uxtb	r3, r3
 801dfe4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dfe6:	683b      	ldr	r3, [r7, #0]
 801dfe8:	0a1b      	lsrs	r3, r3, #8
 801dfea:	b2db      	uxtb	r3, r3
 801dfec:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801dfee:	683b      	ldr	r3, [r7, #0]
 801dff0:	b2db      	uxtb	r3, r3
 801dff2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801dff4:	f107 030c 	add.w	r3, r7, #12
 801dff8:	2204      	movs	r2, #4
 801dffa:	4619      	mov	r1, r3
 801dffc:	2097      	movs	r0, #151	; 0x97
 801dffe:	f000 fc09 	bl	801e814 <SUBGRF_WriteCommand>
}
 801e002:	bf00      	nop
 801e004:	3710      	adds	r7, #16
 801e006:	46bd      	mov	sp, r7
 801e008:	bd80      	pop	{r7, pc}
	...

0801e00c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801e00c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e010:	b084      	sub	sp, #16
 801e012:	af00      	add	r7, sp, #0
 801e014:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801e016:	2300      	movs	r3, #0
 801e018:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801e01a:	4b1d      	ldr	r3, [pc, #116]	; (801e090 <SUBGRF_SetRfFrequency+0x84>)
 801e01c:	781b      	ldrb	r3, [r3, #0]
 801e01e:	f083 0301 	eor.w	r3, r3, #1
 801e022:	b2db      	uxtb	r3, r3
 801e024:	2b00      	cmp	r3, #0
 801e026:	d005      	beq.n	801e034 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801e028:	6878      	ldr	r0, [r7, #4]
 801e02a:	f7ff ff27 	bl	801de7c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801e02e:	4b18      	ldr	r3, [pc, #96]	; (801e090 <SUBGRF_SetRfFrequency+0x84>)
 801e030:	2201      	movs	r2, #1
 801e032:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	2200      	movs	r2, #0
 801e038:	461c      	mov	r4, r3
 801e03a:	4615      	mov	r5, r2
 801e03c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e040:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e044:	4a13      	ldr	r2, [pc, #76]	; (801e094 <SUBGRF_SetRfFrequency+0x88>)
 801e046:	f04f 0300 	mov.w	r3, #0
 801e04a:	4640      	mov	r0, r8
 801e04c:	4649      	mov	r1, r9
 801e04e:	f7e3 f899 	bl	8001184 <__aeabi_uldivmod>
 801e052:	4602      	mov	r2, r0
 801e054:	460b      	mov	r3, r1
 801e056:	4613      	mov	r3, r2
 801e058:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	0e1b      	lsrs	r3, r3, #24
 801e05e:	b2db      	uxtb	r3, r3
 801e060:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	0c1b      	lsrs	r3, r3, #16
 801e066:	b2db      	uxtb	r3, r3
 801e068:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801e06a:	68fb      	ldr	r3, [r7, #12]
 801e06c:	0a1b      	lsrs	r3, r3, #8
 801e06e:	b2db      	uxtb	r3, r3
 801e070:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	b2db      	uxtb	r3, r3
 801e076:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801e078:	f107 0308 	add.w	r3, r7, #8
 801e07c:	2204      	movs	r2, #4
 801e07e:	4619      	mov	r1, r3
 801e080:	2086      	movs	r0, #134	; 0x86
 801e082:	f000 fbc7 	bl	801e814 <SUBGRF_WriteCommand>
}
 801e086:	bf00      	nop
 801e088:	3710      	adds	r7, #16
 801e08a:	46bd      	mov	sp, r7
 801e08c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e090:	20001c74 	.word	0x20001c74
 801e094:	01e84800 	.word	0x01e84800

0801e098 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801e098:	b580      	push	{r7, lr}
 801e09a:	b082      	sub	sp, #8
 801e09c:	af00      	add	r7, sp, #0
 801e09e:	4603      	mov	r3, r0
 801e0a0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801e0a2:	79fa      	ldrb	r2, [r7, #7]
 801e0a4:	4b09      	ldr	r3, [pc, #36]	; (801e0cc <SUBGRF_SetPacketType+0x34>)
 801e0a6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801e0a8:	79fb      	ldrb	r3, [r7, #7]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d104      	bne.n	801e0b8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801e0ae:	2100      	movs	r1, #0
 801e0b0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801e0b4:	f000 fafe 	bl	801e6b4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801e0b8:	1dfb      	adds	r3, r7, #7
 801e0ba:	2201      	movs	r2, #1
 801e0bc:	4619      	mov	r1, r3
 801e0be:	208a      	movs	r0, #138	; 0x8a
 801e0c0:	f000 fba8 	bl	801e814 <SUBGRF_WriteCommand>
}
 801e0c4:	bf00      	nop
 801e0c6:	3708      	adds	r7, #8
 801e0c8:	46bd      	mov	sp, r7
 801e0ca:	bd80      	pop	{r7, pc}
 801e0cc:	20001c6d 	.word	0x20001c6d

0801e0d0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801e0d0:	b480      	push	{r7}
 801e0d2:	af00      	add	r7, sp, #0
    return PacketType;
 801e0d4:	4b02      	ldr	r3, [pc, #8]	; (801e0e0 <SUBGRF_GetPacketType+0x10>)
 801e0d6:	781b      	ldrb	r3, [r3, #0]
}
 801e0d8:	4618      	mov	r0, r3
 801e0da:	46bd      	mov	sp, r7
 801e0dc:	bc80      	pop	{r7}
 801e0de:	4770      	bx	lr
 801e0e0:	20001c6d 	.word	0x20001c6d

0801e0e4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801e0e4:	b580      	push	{r7, lr}
 801e0e6:	b084      	sub	sp, #16
 801e0e8:	af00      	add	r7, sp, #0
 801e0ea:	4603      	mov	r3, r0
 801e0ec:	71fb      	strb	r3, [r7, #7]
 801e0ee:	460b      	mov	r3, r1
 801e0f0:	71bb      	strb	r3, [r7, #6]
 801e0f2:	4613      	mov	r3, r2
 801e0f4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801e0f6:	79fb      	ldrb	r3, [r7, #7]
 801e0f8:	2b01      	cmp	r3, #1
 801e0fa:	d149      	bne.n	801e190 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801e0fc:	2000      	movs	r0, #0
 801e0fe:	f7ef fb57 	bl	800d7b0 <RBI_GetRFOMaxPowerConfig>
 801e102:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801e104:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e108:	68fa      	ldr	r2, [r7, #12]
 801e10a:	429a      	cmp	r2, r3
 801e10c:	da01      	bge.n	801e112 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801e10e:	68fb      	ldr	r3, [r7, #12]
 801e110:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801e112:	68fb      	ldr	r3, [r7, #12]
 801e114:	2b0e      	cmp	r3, #14
 801e116:	d10e      	bne.n	801e136 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801e118:	2301      	movs	r3, #1
 801e11a:	2201      	movs	r2, #1
 801e11c:	2100      	movs	r1, #0
 801e11e:	2004      	movs	r0, #4
 801e120:	f7ff fef6 	bl	801df10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e124:	79ba      	ldrb	r2, [r7, #6]
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	b2db      	uxtb	r3, r3
 801e12a:	1ad3      	subs	r3, r2, r3
 801e12c:	b2db      	uxtb	r3, r3
 801e12e:	330e      	adds	r3, #14
 801e130:	b2db      	uxtb	r3, r3
 801e132:	71bb      	strb	r3, [r7, #6]
 801e134:	e01f      	b.n	801e176 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801e136:	68fb      	ldr	r3, [r7, #12]
 801e138:	2b0a      	cmp	r3, #10
 801e13a:	d10e      	bne.n	801e15a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801e13c:	2301      	movs	r3, #1
 801e13e:	2201      	movs	r2, #1
 801e140:	2100      	movs	r1, #0
 801e142:	2001      	movs	r0, #1
 801e144:	f7ff fee4 	bl	801df10 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801e148:	79ba      	ldrb	r2, [r7, #6]
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	b2db      	uxtb	r3, r3
 801e14e:	1ad3      	subs	r3, r2, r3
 801e150:	b2db      	uxtb	r3, r3
 801e152:	330d      	adds	r3, #13
 801e154:	b2db      	uxtb	r3, r3
 801e156:	71bb      	strb	r3, [r7, #6]
 801e158:	e00d      	b.n	801e176 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801e15a:	2301      	movs	r3, #1
 801e15c:	2201      	movs	r2, #1
 801e15e:	2100      	movs	r1, #0
 801e160:	2007      	movs	r0, #7
 801e162:	f7ff fed5 	bl	801df10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e166:	79ba      	ldrb	r2, [r7, #6]
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	b2db      	uxtb	r3, r3
 801e16c:	1ad3      	subs	r3, r2, r3
 801e16e:	b2db      	uxtb	r3, r3
 801e170:	330e      	adds	r3, #14
 801e172:	b2db      	uxtb	r3, r3
 801e174:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801e176:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e17a:	f113 0f11 	cmn.w	r3, #17
 801e17e:	da01      	bge.n	801e184 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801e180:	23ef      	movs	r3, #239	; 0xef
 801e182:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801e184:	2118      	movs	r1, #24
 801e186:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e18a:	f000 fa93 	bl	801e6b4 <SUBGRF_WriteRegister>
 801e18e:	e067      	b.n	801e260 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801e190:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e194:	f000 faa2 	bl	801e6dc <SUBGRF_ReadRegister>
 801e198:	4603      	mov	r3, r0
 801e19a:	f043 031e 	orr.w	r3, r3, #30
 801e19e:	b2db      	uxtb	r3, r3
 801e1a0:	4619      	mov	r1, r3
 801e1a2:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801e1a6:	f000 fa85 	bl	801e6b4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801e1aa:	2001      	movs	r0, #1
 801e1ac:	f7ef fb00 	bl	800d7b0 <RBI_GetRFOMaxPowerConfig>
 801e1b0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801e1b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e1b6:	68fa      	ldr	r2, [r7, #12]
 801e1b8:	429a      	cmp	r2, r3
 801e1ba:	da01      	bge.n	801e1c0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801e1bc:	68fb      	ldr	r3, [r7, #12]
 801e1be:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	2b14      	cmp	r3, #20
 801e1c4:	d10e      	bne.n	801e1e4 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801e1c6:	2301      	movs	r3, #1
 801e1c8:	2200      	movs	r2, #0
 801e1ca:	2105      	movs	r1, #5
 801e1cc:	2003      	movs	r0, #3
 801e1ce:	f7ff fe9f 	bl	801df10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e1d2:	79ba      	ldrb	r2, [r7, #6]
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	b2db      	uxtb	r3, r3
 801e1d8:	1ad3      	subs	r3, r2, r3
 801e1da:	b2db      	uxtb	r3, r3
 801e1dc:	3316      	adds	r3, #22
 801e1de:	b2db      	uxtb	r3, r3
 801e1e0:	71bb      	strb	r3, [r7, #6]
 801e1e2:	e031      	b.n	801e248 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801e1e4:	68fb      	ldr	r3, [r7, #12]
 801e1e6:	2b11      	cmp	r3, #17
 801e1e8:	d10e      	bne.n	801e208 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801e1ea:	2301      	movs	r3, #1
 801e1ec:	2200      	movs	r2, #0
 801e1ee:	2103      	movs	r1, #3
 801e1f0:	2002      	movs	r0, #2
 801e1f2:	f7ff fe8d 	bl	801df10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e1f6:	79ba      	ldrb	r2, [r7, #6]
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	b2db      	uxtb	r3, r3
 801e1fc:	1ad3      	subs	r3, r2, r3
 801e1fe:	b2db      	uxtb	r3, r3
 801e200:	3316      	adds	r3, #22
 801e202:	b2db      	uxtb	r3, r3
 801e204:	71bb      	strb	r3, [r7, #6]
 801e206:	e01f      	b.n	801e248 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	2b0e      	cmp	r3, #14
 801e20c:	d10e      	bne.n	801e22c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801e20e:	2301      	movs	r3, #1
 801e210:	2200      	movs	r2, #0
 801e212:	2102      	movs	r1, #2
 801e214:	2002      	movs	r0, #2
 801e216:	f7ff fe7b 	bl	801df10 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801e21a:	79ba      	ldrb	r2, [r7, #6]
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	b2db      	uxtb	r3, r3
 801e220:	1ad3      	subs	r3, r2, r3
 801e222:	b2db      	uxtb	r3, r3
 801e224:	330e      	adds	r3, #14
 801e226:	b2db      	uxtb	r3, r3
 801e228:	71bb      	strb	r3, [r7, #6]
 801e22a:	e00d      	b.n	801e248 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801e22c:	2301      	movs	r3, #1
 801e22e:	2200      	movs	r2, #0
 801e230:	2107      	movs	r1, #7
 801e232:	2004      	movs	r0, #4
 801e234:	f7ff fe6c 	bl	801df10 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801e238:	79ba      	ldrb	r2, [r7, #6]
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	b2db      	uxtb	r3, r3
 801e23e:	1ad3      	subs	r3, r2, r3
 801e240:	b2db      	uxtb	r3, r3
 801e242:	3316      	adds	r3, #22
 801e244:	b2db      	uxtb	r3, r3
 801e246:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801e248:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801e24c:	f113 0f09 	cmn.w	r3, #9
 801e250:	da01      	bge.n	801e256 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801e252:	23f7      	movs	r3, #247	; 0xf7
 801e254:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801e256:	2138      	movs	r1, #56	; 0x38
 801e258:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801e25c:	f000 fa2a 	bl	801e6b4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801e260:	79bb      	ldrb	r3, [r7, #6]
 801e262:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801e264:	797b      	ldrb	r3, [r7, #5]
 801e266:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801e268:	f107 0308 	add.w	r3, r7, #8
 801e26c:	2202      	movs	r2, #2
 801e26e:	4619      	mov	r1, r3
 801e270:	208e      	movs	r0, #142	; 0x8e
 801e272:	f000 facf 	bl	801e814 <SUBGRF_WriteCommand>
}
 801e276:	bf00      	nop
 801e278:	3710      	adds	r7, #16
 801e27a:	46bd      	mov	sp, r7
 801e27c:	bd80      	pop	{r7, pc}
	...

0801e280 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801e280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801e284:	b086      	sub	sp, #24
 801e286:	af00      	add	r7, sp, #0
 801e288:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801e28a:	2300      	movs	r3, #0
 801e28c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e28e:	4a61      	ldr	r2, [pc, #388]	; (801e414 <SUBGRF_SetModulationParams+0x194>)
 801e290:	f107 0308 	add.w	r3, r7, #8
 801e294:	e892 0003 	ldmia.w	r2, {r0, r1}
 801e298:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	781a      	ldrb	r2, [r3, #0]
 801e2a0:	4b5d      	ldr	r3, [pc, #372]	; (801e418 <SUBGRF_SetModulationParams+0x198>)
 801e2a2:	781b      	ldrb	r3, [r3, #0]
 801e2a4:	429a      	cmp	r2, r3
 801e2a6:	d004      	beq.n	801e2b2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	781b      	ldrb	r3, [r3, #0]
 801e2ac:	4618      	mov	r0, r3
 801e2ae:	f7ff fef3 	bl	801e098 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	781b      	ldrb	r3, [r3, #0]
 801e2b6:	2b03      	cmp	r3, #3
 801e2b8:	f200 80a5 	bhi.w	801e406 <SUBGRF_SetModulationParams+0x186>
 801e2bc:	a201      	add	r2, pc, #4	; (adr r2, 801e2c4 <SUBGRF_SetModulationParams+0x44>)
 801e2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e2c2:	bf00      	nop
 801e2c4:	0801e2d5 	.word	0x0801e2d5
 801e2c8:	0801e395 	.word	0x0801e395
 801e2cc:	0801e357 	.word	0x0801e357
 801e2d0:	0801e3c3 	.word	0x0801e3c3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801e2d4:	2308      	movs	r3, #8
 801e2d6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	685b      	ldr	r3, [r3, #4]
 801e2dc:	4a4f      	ldr	r2, [pc, #316]	; (801e41c <SUBGRF_SetModulationParams+0x19c>)
 801e2de:	fbb2 f3f3 	udiv	r3, r2, r3
 801e2e2:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e2e4:	697b      	ldr	r3, [r7, #20]
 801e2e6:	0c1b      	lsrs	r3, r3, #16
 801e2e8:	b2db      	uxtb	r3, r3
 801e2ea:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e2ec:	697b      	ldr	r3, [r7, #20]
 801e2ee:	0a1b      	lsrs	r3, r3, #8
 801e2f0:	b2db      	uxtb	r3, r3
 801e2f2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e2f4:	697b      	ldr	r3, [r7, #20]
 801e2f6:	b2db      	uxtb	r3, r3
 801e2f8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	7b1b      	ldrb	r3, [r3, #12]
 801e2fe:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	7b5b      	ldrb	r3, [r3, #13]
 801e304:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801e306:	687b      	ldr	r3, [r7, #4]
 801e308:	689b      	ldr	r3, [r3, #8]
 801e30a:	2200      	movs	r2, #0
 801e30c:	461c      	mov	r4, r3
 801e30e:	4615      	mov	r5, r2
 801e310:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801e314:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801e318:	4a41      	ldr	r2, [pc, #260]	; (801e420 <SUBGRF_SetModulationParams+0x1a0>)
 801e31a:	f04f 0300 	mov.w	r3, #0
 801e31e:	4640      	mov	r0, r8
 801e320:	4649      	mov	r1, r9
 801e322:	f7e2 ff2f 	bl	8001184 <__aeabi_uldivmod>
 801e326:	4602      	mov	r2, r0
 801e328:	460b      	mov	r3, r1
 801e32a:	4613      	mov	r3, r2
 801e32c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801e32e:	697b      	ldr	r3, [r7, #20]
 801e330:	0c1b      	lsrs	r3, r3, #16
 801e332:	b2db      	uxtb	r3, r3
 801e334:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801e336:	697b      	ldr	r3, [r7, #20]
 801e338:	0a1b      	lsrs	r3, r3, #8
 801e33a:	b2db      	uxtb	r3, r3
 801e33c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801e33e:	697b      	ldr	r3, [r7, #20]
 801e340:	b2db      	uxtb	r3, r3
 801e342:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e344:	7cfb      	ldrb	r3, [r7, #19]
 801e346:	b29a      	uxth	r2, r3
 801e348:	f107 0308 	add.w	r3, r7, #8
 801e34c:	4619      	mov	r1, r3
 801e34e:	208b      	movs	r0, #139	; 0x8b
 801e350:	f000 fa60 	bl	801e814 <SUBGRF_WriteCommand>
        break;
 801e354:	e058      	b.n	801e408 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801e356:	2304      	movs	r3, #4
 801e358:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	691b      	ldr	r3, [r3, #16]
 801e35e:	4a2f      	ldr	r2, [pc, #188]	; (801e41c <SUBGRF_SetModulationParams+0x19c>)
 801e360:	fbb2 f3f3 	udiv	r3, r2, r3
 801e364:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e366:	697b      	ldr	r3, [r7, #20]
 801e368:	0c1b      	lsrs	r3, r3, #16
 801e36a:	b2db      	uxtb	r3, r3
 801e36c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e36e:	697b      	ldr	r3, [r7, #20]
 801e370:	0a1b      	lsrs	r3, r3, #8
 801e372:	b2db      	uxtb	r3, r3
 801e374:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e376:	697b      	ldr	r3, [r7, #20]
 801e378:	b2db      	uxtb	r3, r3
 801e37a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	7d1b      	ldrb	r3, [r3, #20]
 801e380:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e382:	7cfb      	ldrb	r3, [r7, #19]
 801e384:	b29a      	uxth	r2, r3
 801e386:	f107 0308 	add.w	r3, r7, #8
 801e38a:	4619      	mov	r1, r3
 801e38c:	208b      	movs	r0, #139	; 0x8b
 801e38e:	f000 fa41 	bl	801e814 <SUBGRF_WriteCommand>
        break;
 801e392:	e039      	b.n	801e408 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801e394:	2304      	movs	r3, #4
 801e396:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	7e1b      	ldrb	r3, [r3, #24]
 801e39c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	7e5b      	ldrb	r3, [r3, #25]
 801e3a2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	7e9b      	ldrb	r3, [r3, #26]
 801e3a8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	7edb      	ldrb	r3, [r3, #27]
 801e3ae:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e3b0:	7cfb      	ldrb	r3, [r7, #19]
 801e3b2:	b29a      	uxth	r2, r3
 801e3b4:	f107 0308 	add.w	r3, r7, #8
 801e3b8:	4619      	mov	r1, r3
 801e3ba:	208b      	movs	r0, #139	; 0x8b
 801e3bc:	f000 fa2a 	bl	801e814 <SUBGRF_WriteCommand>

        break;
 801e3c0:	e022      	b.n	801e408 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801e3c2:	2305      	movs	r3, #5
 801e3c4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	685b      	ldr	r3, [r3, #4]
 801e3ca:	4a14      	ldr	r2, [pc, #80]	; (801e41c <SUBGRF_SetModulationParams+0x19c>)
 801e3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801e3d0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e3d2:	697b      	ldr	r3, [r7, #20]
 801e3d4:	0c1b      	lsrs	r3, r3, #16
 801e3d6:	b2db      	uxtb	r3, r3
 801e3d8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e3da:	697b      	ldr	r3, [r7, #20]
 801e3dc:	0a1b      	lsrs	r3, r3, #8
 801e3de:	b2db      	uxtb	r3, r3
 801e3e0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e3e2:	697b      	ldr	r3, [r7, #20]
 801e3e4:	b2db      	uxtb	r3, r3
 801e3e6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	7b1b      	ldrb	r3, [r3, #12]
 801e3ec:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	7b5b      	ldrb	r3, [r3, #13]
 801e3f2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e3f4:	7cfb      	ldrb	r3, [r7, #19]
 801e3f6:	b29a      	uxth	r2, r3
 801e3f8:	f107 0308 	add.w	r3, r7, #8
 801e3fc:	4619      	mov	r1, r3
 801e3fe:	208b      	movs	r0, #139	; 0x8b
 801e400:	f000 fa08 	bl	801e814 <SUBGRF_WriteCommand>
        break;
 801e404:	e000      	b.n	801e408 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801e406:	bf00      	nop
    }
}
 801e408:	bf00      	nop
 801e40a:	3718      	adds	r7, #24
 801e40c:	46bd      	mov	sp, r7
 801e40e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e412:	bf00      	nop
 801e414:	080219e0 	.word	0x080219e0
 801e418:	20001c6d 	.word	0x20001c6d
 801e41c:	3d090000 	.word	0x3d090000
 801e420:	01e84800 	.word	0x01e84800

0801e424 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801e424:	b580      	push	{r7, lr}
 801e426:	b086      	sub	sp, #24
 801e428:	af00      	add	r7, sp, #0
 801e42a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801e42c:	2300      	movs	r3, #0
 801e42e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e430:	4a48      	ldr	r2, [pc, #288]	; (801e554 <SUBGRF_SetPacketParams+0x130>)
 801e432:	f107 030c 	add.w	r3, r7, #12
 801e436:	ca07      	ldmia	r2, {r0, r1, r2}
 801e438:	c303      	stmia	r3!, {r0, r1}
 801e43a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	781a      	ldrb	r2, [r3, #0]
 801e440:	4b45      	ldr	r3, [pc, #276]	; (801e558 <SUBGRF_SetPacketParams+0x134>)
 801e442:	781b      	ldrb	r3, [r3, #0]
 801e444:	429a      	cmp	r2, r3
 801e446:	d004      	beq.n	801e452 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	781b      	ldrb	r3, [r3, #0]
 801e44c:	4618      	mov	r0, r3
 801e44e:	f7ff fe23 	bl	801e098 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	781b      	ldrb	r3, [r3, #0]
 801e456:	2b03      	cmp	r3, #3
 801e458:	d878      	bhi.n	801e54c <SUBGRF_SetPacketParams+0x128>
 801e45a:	a201      	add	r2, pc, #4	; (adr r2, 801e460 <SUBGRF_SetPacketParams+0x3c>)
 801e45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e460:	0801e471 	.word	0x0801e471
 801e464:	0801e501 	.word	0x0801e501
 801e468:	0801e4f5 	.word	0x0801e4f5
 801e46c:	0801e471 	.word	0x0801e471
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	7a5b      	ldrb	r3, [r3, #9]
 801e474:	2bf1      	cmp	r3, #241	; 0xf1
 801e476:	d10a      	bne.n	801e48e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801e478:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e47c:	f7ff faaa 	bl	801d9d4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801e480:	f248 0005 	movw	r0, #32773	; 0x8005
 801e484:	f7ff fac6 	bl	801da14 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801e488:	2302      	movs	r3, #2
 801e48a:	75bb      	strb	r3, [r7, #22]
 801e48c:	e011      	b.n	801e4b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	7a5b      	ldrb	r3, [r3, #9]
 801e492:	2bf2      	cmp	r3, #242	; 0xf2
 801e494:	d10a      	bne.n	801e4ac <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801e496:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801e49a:	f7ff fa9b 	bl	801d9d4 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801e49e:	f241 0021 	movw	r0, #4129	; 0x1021
 801e4a2:	f7ff fab7 	bl	801da14 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801e4a6:	2306      	movs	r3, #6
 801e4a8:	75bb      	strb	r3, [r7, #22]
 801e4aa:	e002      	b.n	801e4b2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	7a5b      	ldrb	r3, [r3, #9]
 801e4b0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801e4b2:	2309      	movs	r3, #9
 801e4b4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	885b      	ldrh	r3, [r3, #2]
 801e4ba:	0a1b      	lsrs	r3, r3, #8
 801e4bc:	b29b      	uxth	r3, r3
 801e4be:	b2db      	uxtb	r3, r3
 801e4c0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	885b      	ldrh	r3, [r3, #2]
 801e4c6:	b2db      	uxtb	r3, r3
 801e4c8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	791b      	ldrb	r3, [r3, #4]
 801e4ce:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	795b      	ldrb	r3, [r3, #5]
 801e4d4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	799b      	ldrb	r3, [r3, #6]
 801e4da:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	79db      	ldrb	r3, [r3, #7]
 801e4e0:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	7a1b      	ldrb	r3, [r3, #8]
 801e4e6:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801e4e8:	7dbb      	ldrb	r3, [r7, #22]
 801e4ea:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	7a9b      	ldrb	r3, [r3, #10]
 801e4f0:	753b      	strb	r3, [r7, #20]
        break;
 801e4f2:	e022      	b.n	801e53a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801e4f4:	2301      	movs	r3, #1
 801e4f6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	7b1b      	ldrb	r3, [r3, #12]
 801e4fc:	733b      	strb	r3, [r7, #12]
        break;
 801e4fe:	e01c      	b.n	801e53a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801e500:	2306      	movs	r3, #6
 801e502:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	89db      	ldrh	r3, [r3, #14]
 801e508:	0a1b      	lsrs	r3, r3, #8
 801e50a:	b29b      	uxth	r3, r3
 801e50c:	b2db      	uxtb	r3, r3
 801e50e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	89db      	ldrh	r3, [r3, #14]
 801e514:	b2db      	uxtb	r3, r3
 801e516:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801e518:	687b      	ldr	r3, [r7, #4]
 801e51a:	7c1a      	ldrb	r2, [r3, #16]
 801e51c:	4b0f      	ldr	r3, [pc, #60]	; (801e55c <SUBGRF_SetPacketParams+0x138>)
 801e51e:	4611      	mov	r1, r2
 801e520:	7019      	strb	r1, [r3, #0]
 801e522:	4613      	mov	r3, r2
 801e524:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	7c5b      	ldrb	r3, [r3, #17]
 801e52a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	7c9b      	ldrb	r3, [r3, #18]
 801e530:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	7cdb      	ldrb	r3, [r3, #19]
 801e536:	747b      	strb	r3, [r7, #17]
        break;
 801e538:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801e53a:	7dfb      	ldrb	r3, [r7, #23]
 801e53c:	b29a      	uxth	r2, r3
 801e53e:	f107 030c 	add.w	r3, r7, #12
 801e542:	4619      	mov	r1, r3
 801e544:	208c      	movs	r0, #140	; 0x8c
 801e546:	f000 f965 	bl	801e814 <SUBGRF_WriteCommand>
 801e54a:	e000      	b.n	801e54e <SUBGRF_SetPacketParams+0x12a>
        return;
 801e54c:	bf00      	nop
}
 801e54e:	3718      	adds	r7, #24
 801e550:	46bd      	mov	sp, r7
 801e552:	bd80      	pop	{r7, pc}
 801e554:	080219e8 	.word	0x080219e8
 801e558:	20001c6d 	.word	0x20001c6d
 801e55c:	20001c6e 	.word	0x20001c6e

0801e560 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e560:	b580      	push	{r7, lr}
 801e562:	b084      	sub	sp, #16
 801e564:	af00      	add	r7, sp, #0
 801e566:	4603      	mov	r3, r0
 801e568:	460a      	mov	r2, r1
 801e56a:	71fb      	strb	r3, [r7, #7]
 801e56c:	4613      	mov	r3, r2
 801e56e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e570:	79fb      	ldrb	r3, [r7, #7]
 801e572:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e574:	79bb      	ldrb	r3, [r7, #6]
 801e576:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e578:	f107 030c 	add.w	r3, r7, #12
 801e57c:	2202      	movs	r2, #2
 801e57e:	4619      	mov	r1, r3
 801e580:	208f      	movs	r0, #143	; 0x8f
 801e582:	f000 f947 	bl	801e814 <SUBGRF_WriteCommand>
}
 801e586:	bf00      	nop
 801e588:	3710      	adds	r7, #16
 801e58a:	46bd      	mov	sp, r7
 801e58c:	bd80      	pop	{r7, pc}

0801e58e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e58e:	b580      	push	{r7, lr}
 801e590:	b082      	sub	sp, #8
 801e592:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e594:	2300      	movs	r3, #0
 801e596:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e598:	1d3b      	adds	r3, r7, #4
 801e59a:	2201      	movs	r2, #1
 801e59c:	4619      	mov	r1, r3
 801e59e:	2015      	movs	r0, #21
 801e5a0:	f000 f95a 	bl	801e858 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e5a4:	793b      	ldrb	r3, [r7, #4]
 801e5a6:	425b      	negs	r3, r3
 801e5a8:	105b      	asrs	r3, r3, #1
 801e5aa:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e5ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e5b0:	4618      	mov	r0, r3
 801e5b2:	3708      	adds	r7, #8
 801e5b4:	46bd      	mov	sp, r7
 801e5b6:	bd80      	pop	{r7, pc}

0801e5b8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e5b8:	b580      	push	{r7, lr}
 801e5ba:	b084      	sub	sp, #16
 801e5bc:	af00      	add	r7, sp, #0
 801e5be:	6078      	str	r0, [r7, #4]
 801e5c0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e5c2:	f107 030c 	add.w	r3, r7, #12
 801e5c6:	2202      	movs	r2, #2
 801e5c8:	4619      	mov	r1, r3
 801e5ca:	2013      	movs	r0, #19
 801e5cc:	f000 f944 	bl	801e858 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e5d0:	f7ff fd7e 	bl	801e0d0 <SUBGRF_GetPacketType>
 801e5d4:	4603      	mov	r3, r0
 801e5d6:	2b01      	cmp	r3, #1
 801e5d8:	d10d      	bne.n	801e5f6 <SUBGRF_GetRxBufferStatus+0x3e>
 801e5da:	4b0c      	ldr	r3, [pc, #48]	; (801e60c <SUBGRF_GetRxBufferStatus+0x54>)
 801e5dc:	781b      	ldrb	r3, [r3, #0]
 801e5de:	b2db      	uxtb	r3, r3
 801e5e0:	2b01      	cmp	r3, #1
 801e5e2:	d108      	bne.n	801e5f6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e5e4:	f240 7002 	movw	r0, #1794	; 0x702
 801e5e8:	f000 f878 	bl	801e6dc <SUBGRF_ReadRegister>
 801e5ec:	4603      	mov	r3, r0
 801e5ee:	461a      	mov	r2, r3
 801e5f0:	687b      	ldr	r3, [r7, #4]
 801e5f2:	701a      	strb	r2, [r3, #0]
 801e5f4:	e002      	b.n	801e5fc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e5f6:	7b3a      	ldrb	r2, [r7, #12]
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e5fc:	7b7a      	ldrb	r2, [r7, #13]
 801e5fe:	683b      	ldr	r3, [r7, #0]
 801e600:	701a      	strb	r2, [r3, #0]
}
 801e602:	bf00      	nop
 801e604:	3710      	adds	r7, #16
 801e606:	46bd      	mov	sp, r7
 801e608:	bd80      	pop	{r7, pc}
 801e60a:	bf00      	nop
 801e60c:	20001c6e 	.word	0x20001c6e

0801e610 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e610:	b580      	push	{r7, lr}
 801e612:	b084      	sub	sp, #16
 801e614:	af00      	add	r7, sp, #0
 801e616:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e618:	f107 030c 	add.w	r3, r7, #12
 801e61c:	2203      	movs	r2, #3
 801e61e:	4619      	mov	r1, r3
 801e620:	2014      	movs	r0, #20
 801e622:	f000 f919 	bl	801e858 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e626:	f7ff fd53 	bl	801e0d0 <SUBGRF_GetPacketType>
 801e62a:	4603      	mov	r3, r0
 801e62c:	461a      	mov	r2, r3
 801e62e:	687b      	ldr	r3, [r7, #4]
 801e630:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	781b      	ldrb	r3, [r3, #0]
 801e636:	2b00      	cmp	r3, #0
 801e638:	d002      	beq.n	801e640 <SUBGRF_GetPacketStatus+0x30>
 801e63a:	2b01      	cmp	r3, #1
 801e63c:	d013      	beq.n	801e666 <SUBGRF_GetPacketStatus+0x56>
 801e63e:	e02a      	b.n	801e696 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e640:	7b3a      	ldrb	r2, [r7, #12]
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e646:	7b7b      	ldrb	r3, [r7, #13]
 801e648:	425b      	negs	r3, r3
 801e64a:	105b      	asrs	r3, r3, #1
 801e64c:	b25a      	sxtb	r2, r3
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e652:	7bbb      	ldrb	r3, [r7, #14]
 801e654:	425b      	negs	r3, r3
 801e656:	105b      	asrs	r3, r3, #1
 801e658:	b25a      	sxtb	r2, r3
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	2200      	movs	r2, #0
 801e662:	609a      	str	r2, [r3, #8]
            break;
 801e664:	e020      	b.n	801e6a8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e666:	7b3b      	ldrb	r3, [r7, #12]
 801e668:	425b      	negs	r3, r3
 801e66a:	105b      	asrs	r3, r3, #1
 801e66c:	b25a      	sxtb	r2, r3
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e672:	7b7b      	ldrb	r3, [r7, #13]
 801e674:	b25b      	sxtb	r3, r3
 801e676:	3302      	adds	r3, #2
 801e678:	109b      	asrs	r3, r3, #2
 801e67a:	b25a      	sxtb	r2, r3
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e680:	7bbb      	ldrb	r3, [r7, #14]
 801e682:	425b      	negs	r3, r3
 801e684:	105b      	asrs	r3, r3, #1
 801e686:	b25a      	sxtb	r2, r3
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e68c:	4b08      	ldr	r3, [pc, #32]	; (801e6b0 <SUBGRF_GetPacketStatus+0xa0>)
 801e68e:	681a      	ldr	r2, [r3, #0]
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	611a      	str	r2, [r3, #16]
            break;
 801e694:	e008      	b.n	801e6a8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e696:	2214      	movs	r2, #20
 801e698:	2100      	movs	r1, #0
 801e69a:	6878      	ldr	r0, [r7, #4]
 801e69c:	f000 fbcd 	bl	801ee3a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	220f      	movs	r2, #15
 801e6a4:	701a      	strb	r2, [r3, #0]
            break;
 801e6a6:	bf00      	nop
    }
}
 801e6a8:	bf00      	nop
 801e6aa:	3710      	adds	r7, #16
 801e6ac:	46bd      	mov	sp, r7
 801e6ae:	bd80      	pop	{r7, pc}
 801e6b0:	20001c70 	.word	0x20001c70

0801e6b4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e6b4:	b580      	push	{r7, lr}
 801e6b6:	b082      	sub	sp, #8
 801e6b8:	af00      	add	r7, sp, #0
 801e6ba:	4603      	mov	r3, r0
 801e6bc:	460a      	mov	r2, r1
 801e6be:	80fb      	strh	r3, [r7, #6]
 801e6c0:	4613      	mov	r3, r2
 801e6c2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e6c4:	1d7a      	adds	r2, r7, #5
 801e6c6:	88f9      	ldrh	r1, [r7, #6]
 801e6c8:	2301      	movs	r3, #1
 801e6ca:	4803      	ldr	r0, [pc, #12]	; (801e6d8 <SUBGRF_WriteRegister+0x24>)
 801e6cc:	f7eb fc2a 	bl	8009f24 <HAL_SUBGHZ_WriteRegisters>
}
 801e6d0:	bf00      	nop
 801e6d2:	3708      	adds	r7, #8
 801e6d4:	46bd      	mov	sp, r7
 801e6d6:	bd80      	pop	{r7, pc}
 801e6d8:	200002b4 	.word	0x200002b4

0801e6dc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e6dc:	b580      	push	{r7, lr}
 801e6de:	b084      	sub	sp, #16
 801e6e0:	af00      	add	r7, sp, #0
 801e6e2:	4603      	mov	r3, r0
 801e6e4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e6e6:	f107 020f 	add.w	r2, r7, #15
 801e6ea:	88f9      	ldrh	r1, [r7, #6]
 801e6ec:	2301      	movs	r3, #1
 801e6ee:	4804      	ldr	r0, [pc, #16]	; (801e700 <SUBGRF_ReadRegister+0x24>)
 801e6f0:	f7eb fc77 	bl	8009fe2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e6f6:	4618      	mov	r0, r3
 801e6f8:	3710      	adds	r7, #16
 801e6fa:	46bd      	mov	sp, r7
 801e6fc:	bd80      	pop	{r7, pc}
 801e6fe:	bf00      	nop
 801e700:	200002b4 	.word	0x200002b4

0801e704 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e704:	b580      	push	{r7, lr}
 801e706:	b086      	sub	sp, #24
 801e708:	af00      	add	r7, sp, #0
 801e70a:	4603      	mov	r3, r0
 801e70c:	6039      	str	r1, [r7, #0]
 801e70e:	80fb      	strh	r3, [r7, #6]
 801e710:	4613      	mov	r3, r2
 801e712:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e714:	f3ef 8310 	mrs	r3, PRIMASK
 801e718:	60fb      	str	r3, [r7, #12]
  return(result);
 801e71a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e71c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e71e:	b672      	cpsid	i
}
 801e720:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e722:	88bb      	ldrh	r3, [r7, #4]
 801e724:	88f9      	ldrh	r1, [r7, #6]
 801e726:	683a      	ldr	r2, [r7, #0]
 801e728:	4806      	ldr	r0, [pc, #24]	; (801e744 <SUBGRF_WriteRegisters+0x40>)
 801e72a:	f7eb fbfb 	bl	8009f24 <HAL_SUBGHZ_WriteRegisters>
 801e72e:	697b      	ldr	r3, [r7, #20]
 801e730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e732:	693b      	ldr	r3, [r7, #16]
 801e734:	f383 8810 	msr	PRIMASK, r3
}
 801e738:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e73a:	bf00      	nop
 801e73c:	3718      	adds	r7, #24
 801e73e:	46bd      	mov	sp, r7
 801e740:	bd80      	pop	{r7, pc}
 801e742:	bf00      	nop
 801e744:	200002b4 	.word	0x200002b4

0801e748 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e748:	b580      	push	{r7, lr}
 801e74a:	b086      	sub	sp, #24
 801e74c:	af00      	add	r7, sp, #0
 801e74e:	4603      	mov	r3, r0
 801e750:	6039      	str	r1, [r7, #0]
 801e752:	80fb      	strh	r3, [r7, #6]
 801e754:	4613      	mov	r3, r2
 801e756:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e758:	f3ef 8310 	mrs	r3, PRIMASK
 801e75c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e75e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e760:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e762:	b672      	cpsid	i
}
 801e764:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e766:	88bb      	ldrh	r3, [r7, #4]
 801e768:	88f9      	ldrh	r1, [r7, #6]
 801e76a:	683a      	ldr	r2, [r7, #0]
 801e76c:	4806      	ldr	r0, [pc, #24]	; (801e788 <SUBGRF_ReadRegisters+0x40>)
 801e76e:	f7eb fc38 	bl	8009fe2 <HAL_SUBGHZ_ReadRegisters>
 801e772:	697b      	ldr	r3, [r7, #20]
 801e774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e776:	693b      	ldr	r3, [r7, #16]
 801e778:	f383 8810 	msr	PRIMASK, r3
}
 801e77c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e77e:	bf00      	nop
 801e780:	3718      	adds	r7, #24
 801e782:	46bd      	mov	sp, r7
 801e784:	bd80      	pop	{r7, pc}
 801e786:	bf00      	nop
 801e788:	200002b4 	.word	0x200002b4

0801e78c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e78c:	b580      	push	{r7, lr}
 801e78e:	b086      	sub	sp, #24
 801e790:	af00      	add	r7, sp, #0
 801e792:	4603      	mov	r3, r0
 801e794:	6039      	str	r1, [r7, #0]
 801e796:	71fb      	strb	r3, [r7, #7]
 801e798:	4613      	mov	r3, r2
 801e79a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e79c:	f3ef 8310 	mrs	r3, PRIMASK
 801e7a0:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e7a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7a6:	b672      	cpsid	i
}
 801e7a8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e7aa:	79bb      	ldrb	r3, [r7, #6]
 801e7ac:	b29b      	uxth	r3, r3
 801e7ae:	79f9      	ldrb	r1, [r7, #7]
 801e7b0:	683a      	ldr	r2, [r7, #0]
 801e7b2:	4806      	ldr	r0, [pc, #24]	; (801e7cc <SUBGRF_WriteBuffer+0x40>)
 801e7b4:	f7eb fd29 	bl	800a20a <HAL_SUBGHZ_WriteBuffer>
 801e7b8:	697b      	ldr	r3, [r7, #20]
 801e7ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e7bc:	693b      	ldr	r3, [r7, #16]
 801e7be:	f383 8810 	msr	PRIMASK, r3
}
 801e7c2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e7c4:	bf00      	nop
 801e7c6:	3718      	adds	r7, #24
 801e7c8:	46bd      	mov	sp, r7
 801e7ca:	bd80      	pop	{r7, pc}
 801e7cc:	200002b4 	.word	0x200002b4

0801e7d0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e7d0:	b580      	push	{r7, lr}
 801e7d2:	b086      	sub	sp, #24
 801e7d4:	af00      	add	r7, sp, #0
 801e7d6:	4603      	mov	r3, r0
 801e7d8:	6039      	str	r1, [r7, #0]
 801e7da:	71fb      	strb	r3, [r7, #7]
 801e7dc:	4613      	mov	r3, r2
 801e7de:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7e0:	f3ef 8310 	mrs	r3, PRIMASK
 801e7e4:	60fb      	str	r3, [r7, #12]
  return(result);
 801e7e6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e7e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7ea:	b672      	cpsid	i
}
 801e7ec:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e7ee:	79bb      	ldrb	r3, [r7, #6]
 801e7f0:	b29b      	uxth	r3, r3
 801e7f2:	79f9      	ldrb	r1, [r7, #7]
 801e7f4:	683a      	ldr	r2, [r7, #0]
 801e7f6:	4806      	ldr	r0, [pc, #24]	; (801e810 <SUBGRF_ReadBuffer+0x40>)
 801e7f8:	f7eb fd5a 	bl	800a2b0 <HAL_SUBGHZ_ReadBuffer>
 801e7fc:	697b      	ldr	r3, [r7, #20]
 801e7fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e800:	693b      	ldr	r3, [r7, #16]
 801e802:	f383 8810 	msr	PRIMASK, r3
}
 801e806:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e808:	bf00      	nop
 801e80a:	3718      	adds	r7, #24
 801e80c:	46bd      	mov	sp, r7
 801e80e:	bd80      	pop	{r7, pc}
 801e810:	200002b4 	.word	0x200002b4

0801e814 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e814:	b580      	push	{r7, lr}
 801e816:	b086      	sub	sp, #24
 801e818:	af00      	add	r7, sp, #0
 801e81a:	4603      	mov	r3, r0
 801e81c:	6039      	str	r1, [r7, #0]
 801e81e:	71fb      	strb	r3, [r7, #7]
 801e820:	4613      	mov	r3, r2
 801e822:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e824:	f3ef 8310 	mrs	r3, PRIMASK
 801e828:	60fb      	str	r3, [r7, #12]
  return(result);
 801e82a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e82c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e82e:	b672      	cpsid	i
}
 801e830:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e832:	88bb      	ldrh	r3, [r7, #4]
 801e834:	79f9      	ldrb	r1, [r7, #7]
 801e836:	683a      	ldr	r2, [r7, #0]
 801e838:	4806      	ldr	r0, [pc, #24]	; (801e854 <SUBGRF_WriteCommand+0x40>)
 801e83a:	f7eb fc33 	bl	800a0a4 <HAL_SUBGHZ_ExecSetCmd>
 801e83e:	697b      	ldr	r3, [r7, #20]
 801e840:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e842:	693b      	ldr	r3, [r7, #16]
 801e844:	f383 8810 	msr	PRIMASK, r3
}
 801e848:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e84a:	bf00      	nop
 801e84c:	3718      	adds	r7, #24
 801e84e:	46bd      	mov	sp, r7
 801e850:	bd80      	pop	{r7, pc}
 801e852:	bf00      	nop
 801e854:	200002b4 	.word	0x200002b4

0801e858 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e858:	b580      	push	{r7, lr}
 801e85a:	b086      	sub	sp, #24
 801e85c:	af00      	add	r7, sp, #0
 801e85e:	4603      	mov	r3, r0
 801e860:	6039      	str	r1, [r7, #0]
 801e862:	71fb      	strb	r3, [r7, #7]
 801e864:	4613      	mov	r3, r2
 801e866:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e868:	f3ef 8310 	mrs	r3, PRIMASK
 801e86c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e86e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e872:	b672      	cpsid	i
}
 801e874:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e876:	88bb      	ldrh	r3, [r7, #4]
 801e878:	79f9      	ldrb	r1, [r7, #7]
 801e87a:	683a      	ldr	r2, [r7, #0]
 801e87c:	4806      	ldr	r0, [pc, #24]	; (801e898 <SUBGRF_ReadCommand+0x40>)
 801e87e:	f7eb fc70 	bl	800a162 <HAL_SUBGHZ_ExecGetCmd>
 801e882:	697b      	ldr	r3, [r7, #20]
 801e884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e886:	693b      	ldr	r3, [r7, #16]
 801e888:	f383 8810 	msr	PRIMASK, r3
}
 801e88c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e88e:	bf00      	nop
 801e890:	3718      	adds	r7, #24
 801e892:	46bd      	mov	sp, r7
 801e894:	bd80      	pop	{r7, pc}
 801e896:	bf00      	nop
 801e898:	200002b4 	.word	0x200002b4

0801e89c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801e89c:	b580      	push	{r7, lr}
 801e89e:	b084      	sub	sp, #16
 801e8a0:	af00      	add	r7, sp, #0
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	460a      	mov	r2, r1
 801e8a6:	71fb      	strb	r3, [r7, #7]
 801e8a8:	4613      	mov	r3, r2
 801e8aa:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801e8ac:	2301      	movs	r3, #1
 801e8ae:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801e8b0:	79bb      	ldrb	r3, [r7, #6]
 801e8b2:	2b01      	cmp	r3, #1
 801e8b4:	d10d      	bne.n	801e8d2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801e8b6:	79fb      	ldrb	r3, [r7, #7]
 801e8b8:	2b01      	cmp	r3, #1
 801e8ba:	d104      	bne.n	801e8c6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801e8bc:	2302      	movs	r3, #2
 801e8be:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801e8c0:	2004      	movs	r0, #4
 801e8c2:	f000 f8ef 	bl	801eaa4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801e8c6:	79fb      	ldrb	r3, [r7, #7]
 801e8c8:	2b02      	cmp	r3, #2
 801e8ca:	d107      	bne.n	801e8dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801e8cc:	2303      	movs	r3, #3
 801e8ce:	73fb      	strb	r3, [r7, #15]
 801e8d0:	e004      	b.n	801e8dc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801e8d2:	79bb      	ldrb	r3, [r7, #6]
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	d101      	bne.n	801e8dc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801e8d8:	2301      	movs	r3, #1
 801e8da:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801e8dc:	7bfb      	ldrb	r3, [r7, #15]
 801e8de:	4618      	mov	r0, r3
 801e8e0:	f7ee ff43 	bl	800d76a <RBI_ConfigRFSwitch>
}
 801e8e4:	bf00      	nop
 801e8e6:	3710      	adds	r7, #16
 801e8e8:	46bd      	mov	sp, r7
 801e8ea:	bd80      	pop	{r7, pc}

0801e8ec <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801e8ec:	b580      	push	{r7, lr}
 801e8ee:	b084      	sub	sp, #16
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	4603      	mov	r3, r0
 801e8f4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801e8f6:	2301      	movs	r3, #1
 801e8f8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801e8fa:	f7ee ff44 	bl	800d786 <RBI_GetTxConfig>
 801e8fe:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801e900:	68bb      	ldr	r3, [r7, #8]
 801e902:	2b02      	cmp	r3, #2
 801e904:	d016      	beq.n	801e934 <SUBGRF_SetRfTxPower+0x48>
 801e906:	68bb      	ldr	r3, [r7, #8]
 801e908:	2b02      	cmp	r3, #2
 801e90a:	dc16      	bgt.n	801e93a <SUBGRF_SetRfTxPower+0x4e>
 801e90c:	68bb      	ldr	r3, [r7, #8]
 801e90e:	2b00      	cmp	r3, #0
 801e910:	d003      	beq.n	801e91a <SUBGRF_SetRfTxPower+0x2e>
 801e912:	68bb      	ldr	r3, [r7, #8]
 801e914:	2b01      	cmp	r3, #1
 801e916:	d00a      	beq.n	801e92e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801e918:	e00f      	b.n	801e93a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801e91a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e91e:	2b0f      	cmp	r3, #15
 801e920:	dd02      	ble.n	801e928 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801e922:	2302      	movs	r3, #2
 801e924:	73fb      	strb	r3, [r7, #15]
            break;
 801e926:	e009      	b.n	801e93c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801e928:	2301      	movs	r3, #1
 801e92a:	73fb      	strb	r3, [r7, #15]
            break;
 801e92c:	e006      	b.n	801e93c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801e92e:	2301      	movs	r3, #1
 801e930:	73fb      	strb	r3, [r7, #15]
            break;
 801e932:	e003      	b.n	801e93c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801e934:	2302      	movs	r3, #2
 801e936:	73fb      	strb	r3, [r7, #15]
            break;
 801e938:	e000      	b.n	801e93c <SUBGRF_SetRfTxPower+0x50>
            break;
 801e93a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801e93c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e940:	7bfb      	ldrb	r3, [r7, #15]
 801e942:	2202      	movs	r2, #2
 801e944:	4618      	mov	r0, r3
 801e946:	f7ff fbcd 	bl	801e0e4 <SUBGRF_SetTxParams>

    return paSelect;
 801e94a:	7bfb      	ldrb	r3, [r7, #15]
}
 801e94c:	4618      	mov	r0, r3
 801e94e:	3710      	adds	r7, #16
 801e950:	46bd      	mov	sp, r7
 801e952:	bd80      	pop	{r7, pc}

0801e954 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801e954:	b480      	push	{r7}
 801e956:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801e958:	2301      	movs	r3, #1
}
 801e95a:	4618      	mov	r0, r3
 801e95c:	46bd      	mov	sp, r7
 801e95e:	bc80      	pop	{r7}
 801e960:	4770      	bx	lr
	...

0801e964 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e964:	b580      	push	{r7, lr}
 801e966:	b082      	sub	sp, #8
 801e968:	af00      	add	r7, sp, #0
 801e96a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801e96c:	4b03      	ldr	r3, [pc, #12]	; (801e97c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	2001      	movs	r0, #1
 801e972:	4798      	blx	r3
}
 801e974:	bf00      	nop
 801e976:	3708      	adds	r7, #8
 801e978:	46bd      	mov	sp, r7
 801e97a:	bd80      	pop	{r7, pc}
 801e97c:	20001c78 	.word	0x20001c78

0801e980 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b082      	sub	sp, #8
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801e988:	4b03      	ldr	r3, [pc, #12]	; (801e998 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	2002      	movs	r0, #2
 801e98e:	4798      	blx	r3
}
 801e990:	bf00      	nop
 801e992:	3708      	adds	r7, #8
 801e994:	46bd      	mov	sp, r7
 801e996:	bd80      	pop	{r7, pc}
 801e998:	20001c78 	.word	0x20001c78

0801e99c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801e99c:	b580      	push	{r7, lr}
 801e99e:	b082      	sub	sp, #8
 801e9a0:	af00      	add	r7, sp, #0
 801e9a2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801e9a4:	4b03      	ldr	r3, [pc, #12]	; (801e9b4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	2040      	movs	r0, #64	; 0x40
 801e9aa:	4798      	blx	r3
}
 801e9ac:	bf00      	nop
 801e9ae:	3708      	adds	r7, #8
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	bd80      	pop	{r7, pc}
 801e9b4:	20001c78 	.word	0x20001c78

0801e9b8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801e9b8:	b580      	push	{r7, lr}
 801e9ba:	b082      	sub	sp, #8
 801e9bc:	af00      	add	r7, sp, #0
 801e9be:	6078      	str	r0, [r7, #4]
 801e9c0:	460b      	mov	r3, r1
 801e9c2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801e9c4:	78fb      	ldrb	r3, [r7, #3]
 801e9c6:	2b00      	cmp	r3, #0
 801e9c8:	d002      	beq.n	801e9d0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801e9ca:	2b01      	cmp	r3, #1
 801e9cc:	d005      	beq.n	801e9da <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801e9ce:	e00a      	b.n	801e9e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801e9d0:	4b07      	ldr	r3, [pc, #28]	; (801e9f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	2080      	movs	r0, #128	; 0x80
 801e9d6:	4798      	blx	r3
            break;
 801e9d8:	e005      	b.n	801e9e6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801e9da:	4b05      	ldr	r3, [pc, #20]	; (801e9f0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e9e2:	4798      	blx	r3
            break;
 801e9e4:	bf00      	nop
    }
}
 801e9e6:	bf00      	nop
 801e9e8:	3708      	adds	r7, #8
 801e9ea:	46bd      	mov	sp, r7
 801e9ec:	bd80      	pop	{r7, pc}
 801e9ee:	bf00      	nop
 801e9f0:	20001c78 	.word	0x20001c78

0801e9f4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e9f4:	b580      	push	{r7, lr}
 801e9f6:	b082      	sub	sp, #8
 801e9f8:	af00      	add	r7, sp, #0
 801e9fa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801e9fc:	4b04      	ldr	r3, [pc, #16]	; (801ea10 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ea04:	4798      	blx	r3
}
 801ea06:	bf00      	nop
 801ea08:	3708      	adds	r7, #8
 801ea0a:	46bd      	mov	sp, r7
 801ea0c:	bd80      	pop	{r7, pc}
 801ea0e:	bf00      	nop
 801ea10:	20001c78 	.word	0x20001c78

0801ea14 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea14:	b580      	push	{r7, lr}
 801ea16:	b082      	sub	sp, #8
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801ea1c:	4b03      	ldr	r3, [pc, #12]	; (801ea2c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801ea1e:	681b      	ldr	r3, [r3, #0]
 801ea20:	2020      	movs	r0, #32
 801ea22:	4798      	blx	r3
}
 801ea24:	bf00      	nop
 801ea26:	3708      	adds	r7, #8
 801ea28:	46bd      	mov	sp, r7
 801ea2a:	bd80      	pop	{r7, pc}
 801ea2c:	20001c78 	.word	0x20001c78

0801ea30 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea30:	b580      	push	{r7, lr}
 801ea32:	b082      	sub	sp, #8
 801ea34:	af00      	add	r7, sp, #0
 801ea36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801ea38:	4b03      	ldr	r3, [pc, #12]	; (801ea48 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	2004      	movs	r0, #4
 801ea3e:	4798      	blx	r3
}
 801ea40:	bf00      	nop
 801ea42:	3708      	adds	r7, #8
 801ea44:	46bd      	mov	sp, r7
 801ea46:	bd80      	pop	{r7, pc}
 801ea48:	20001c78 	.word	0x20001c78

0801ea4c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea4c:	b580      	push	{r7, lr}
 801ea4e:	b082      	sub	sp, #8
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801ea54:	4b03      	ldr	r3, [pc, #12]	; (801ea64 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	2008      	movs	r0, #8
 801ea5a:	4798      	blx	r3
}
 801ea5c:	bf00      	nop
 801ea5e:	3708      	adds	r7, #8
 801ea60:	46bd      	mov	sp, r7
 801ea62:	bd80      	pop	{r7, pc}
 801ea64:	20001c78 	.word	0x20001c78

0801ea68 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea68:	b580      	push	{r7, lr}
 801ea6a:	b082      	sub	sp, #8
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801ea70:	4b03      	ldr	r3, [pc, #12]	; (801ea80 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801ea72:	681b      	ldr	r3, [r3, #0]
 801ea74:	2010      	movs	r0, #16
 801ea76:	4798      	blx	r3
}
 801ea78:	bf00      	nop
 801ea7a:	3708      	adds	r7, #8
 801ea7c:	46bd      	mov	sp, r7
 801ea7e:	bd80      	pop	{r7, pc}
 801ea80:	20001c78 	.word	0x20001c78

0801ea84 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ea84:	b580      	push	{r7, lr}
 801ea86:	b082      	sub	sp, #8
 801ea88:	af00      	add	r7, sp, #0
 801ea8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801ea8c:	4b04      	ldr	r3, [pc, #16]	; (801eaa0 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801ea8e:	681b      	ldr	r3, [r3, #0]
 801ea90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801ea94:	4798      	blx	r3
}
 801ea96:	bf00      	nop
 801ea98:	3708      	adds	r7, #8
 801ea9a:	46bd      	mov	sp, r7
 801ea9c:	bd80      	pop	{r7, pc}
 801ea9e:	bf00      	nop
 801eaa0:	20001c78 	.word	0x20001c78

0801eaa4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801eaa4:	b580      	push	{r7, lr}
 801eaa6:	b084      	sub	sp, #16
 801eaa8:	af00      	add	r7, sp, #0
 801eaaa:	4603      	mov	r3, r0
 801eaac:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801eaae:	f7ee fe78 	bl	800d7a2 <RBI_IsDCDC>
 801eab2:	4603      	mov	r3, r0
 801eab4:	2b01      	cmp	r3, #1
 801eab6:	d112      	bne.n	801eade <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801eab8:	f640 1023 	movw	r0, #2339	; 0x923
 801eabc:	f7ff fe0e 	bl	801e6dc <SUBGRF_ReadRegister>
 801eac0:	4603      	mov	r3, r0
 801eac2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801eac4:	7bfb      	ldrb	r3, [r7, #15]
 801eac6:	f023 0306 	bic.w	r3, r3, #6
 801eaca:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801eacc:	7bfa      	ldrb	r2, [r7, #15]
 801eace:	79fb      	ldrb	r3, [r7, #7]
 801ead0:	4313      	orrs	r3, r2
 801ead2:	b2db      	uxtb	r3, r3
 801ead4:	4619      	mov	r1, r3
 801ead6:	f640 1023 	movw	r0, #2339	; 0x923
 801eada:	f7ff fdeb 	bl	801e6b4 <SUBGRF_WriteRegister>
  }
}
 801eade:	bf00      	nop
 801eae0:	3710      	adds	r7, #16
 801eae2:	46bd      	mov	sp, r7
 801eae4:	bd80      	pop	{r7, pc}
	...

0801eae8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801eae8:	b480      	push	{r7}
 801eaea:	b085      	sub	sp, #20
 801eaec:	af00      	add	r7, sp, #0
 801eaee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	2b00      	cmp	r3, #0
 801eaf4:	d101      	bne.n	801eafa <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801eaf6:	231f      	movs	r3, #31
 801eaf8:	e016      	b.n	801eb28 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801eafa:	2300      	movs	r3, #0
 801eafc:	73fb      	strb	r3, [r7, #15]
 801eafe:	e00f      	b.n	801eb20 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801eb00:	7bfb      	ldrb	r3, [r7, #15]
 801eb02:	4a0c      	ldr	r2, [pc, #48]	; (801eb34 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801eb04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801eb08:	687a      	ldr	r2, [r7, #4]
 801eb0a:	429a      	cmp	r2, r3
 801eb0c:	d205      	bcs.n	801eb1a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801eb0e:	7bfb      	ldrb	r3, [r7, #15]
 801eb10:	4a08      	ldr	r2, [pc, #32]	; (801eb34 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801eb12:	00db      	lsls	r3, r3, #3
 801eb14:	4413      	add	r3, r2
 801eb16:	791b      	ldrb	r3, [r3, #4]
 801eb18:	e006      	b.n	801eb28 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801eb1a:	7bfb      	ldrb	r3, [r7, #15]
 801eb1c:	3301      	adds	r3, #1
 801eb1e:	73fb      	strb	r3, [r7, #15]
 801eb20:	7bfb      	ldrb	r3, [r7, #15]
 801eb22:	2b15      	cmp	r3, #21
 801eb24:	d9ec      	bls.n	801eb00 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801eb26:	e7fe      	b.n	801eb26 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801eb28:	4618      	mov	r0, r3
 801eb2a:	3714      	adds	r7, #20
 801eb2c:	46bd      	mov	sp, r7
 801eb2e:	bc80      	pop	{r7}
 801eb30:	4770      	bx	lr
 801eb32:	bf00      	nop
 801eb34:	08022044 	.word	0x08022044

0801eb38 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801eb38:	b580      	push	{r7, lr}
 801eb3a:	b08a      	sub	sp, #40	; 0x28
 801eb3c:	af00      	add	r7, sp, #0
 801eb3e:	6078      	str	r0, [r7, #4]
 801eb40:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801eb42:	4b35      	ldr	r3, [pc, #212]	; (801ec18 <SUBGRF_GetCFO+0xe0>)
 801eb44:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801eb46:	f640 0007 	movw	r0, #2055	; 0x807
 801eb4a:	f7ff fdc7 	bl	801e6dc <SUBGRF_ReadRegister>
 801eb4e:	4603      	mov	r3, r0
 801eb50:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801eb52:	7ffb      	ldrb	r3, [r7, #31]
 801eb54:	08db      	lsrs	r3, r3, #3
 801eb56:	b2db      	uxtb	r3, r3
 801eb58:	f003 0303 	and.w	r3, r3, #3
 801eb5c:	3328      	adds	r3, #40	; 0x28
 801eb5e:	443b      	add	r3, r7
 801eb60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801eb64:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801eb66:	7ffb      	ldrb	r3, [r7, #31]
 801eb68:	f003 0307 	and.w	r3, r3, #7
 801eb6c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801eb6e:	7fba      	ldrb	r2, [r7, #30]
 801eb70:	7f7b      	ldrb	r3, [r7, #29]
 801eb72:	3301      	adds	r3, #1
 801eb74:	fa02 f303 	lsl.w	r3, r2, r3
 801eb78:	461a      	mov	r2, r3
 801eb7a:	4b28      	ldr	r3, [pc, #160]	; (801ec1c <SUBGRF_GetCFO+0xe4>)
 801eb7c:	fbb3 f3f2 	udiv	r3, r3, r2
 801eb80:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801eb82:	69ba      	ldr	r2, [r7, #24]
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	fbb2 f3f3 	udiv	r3, r2, r3
 801eb8a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801eb8c:	2301      	movs	r3, #1
 801eb8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801eb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eb96:	697a      	ldr	r2, [r7, #20]
 801eb98:	fb02 f303 	mul.w	r3, r2, r3
 801eb9c:	2b07      	cmp	r3, #7
 801eb9e:	d802      	bhi.n	801eba6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801eba0:	2302      	movs	r3, #2
 801eba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801eba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ebaa:	697a      	ldr	r2, [r7, #20]
 801ebac:	fb02 f303 	mul.w	r3, r2, r3
 801ebb0:	2b03      	cmp	r3, #3
 801ebb2:	d802      	bhi.n	801ebba <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ebb4:	2304      	movs	r3, #4
 801ebb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ebba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ebbe:	69bb      	ldr	r3, [r7, #24]
 801ebc0:	fb02 f303 	mul.w	r3, r2, r3
 801ebc4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ebc6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801ebca:	f7ff fd87 	bl	801e6dc <SUBGRF_ReadRegister>
 801ebce:	4603      	mov	r3, r0
 801ebd0:	021b      	lsls	r3, r3, #8
 801ebd2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801ebd6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801ebd8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801ebdc:	f7ff fd7e 	bl	801e6dc <SUBGRF_ReadRegister>
 801ebe0:	4603      	mov	r3, r0
 801ebe2:	461a      	mov	r2, r3
 801ebe4:	6a3b      	ldr	r3, [r7, #32]
 801ebe6:	4313      	orrs	r3, r2
 801ebe8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ebea:	6a3b      	ldr	r3, [r7, #32]
 801ebec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d005      	beq.n	801ec00 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ebf4:	6a3b      	ldr	r3, [r7, #32]
 801ebf6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ebfa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ebfe:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ec00:	693b      	ldr	r3, [r7, #16]
 801ec02:	095b      	lsrs	r3, r3, #5
 801ec04:	6a3a      	ldr	r2, [r7, #32]
 801ec06:	fb02 f303 	mul.w	r3, r2, r3
 801ec0a:	11da      	asrs	r2, r3, #7
 801ec0c:	683b      	ldr	r3, [r7, #0]
 801ec0e:	601a      	str	r2, [r3, #0]
}
 801ec10:	bf00      	nop
 801ec12:	3728      	adds	r7, #40	; 0x28
 801ec14:	46bd      	mov	sp, r7
 801ec16:	bd80      	pop	{r7, pc}
 801ec18:	0c0a0804 	.word	0x0c0a0804
 801ec1c:	01e84800 	.word	0x01e84800

0801ec20 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ec20:	b480      	push	{r7}
 801ec22:	b087      	sub	sp, #28
 801ec24:	af00      	add	r7, sp, #0
 801ec26:	4603      	mov	r3, r0
 801ec28:	60b9      	str	r1, [r7, #8]
 801ec2a:	607a      	str	r2, [r7, #4]
 801ec2c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ec2e:	2300      	movs	r3, #0
 801ec30:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ec32:	f04f 33ff 	mov.w	r3, #4294967295
 801ec36:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ec38:	697b      	ldr	r3, [r7, #20]
}
 801ec3a:	4618      	mov	r0, r3
 801ec3c:	371c      	adds	r7, #28
 801ec3e:	46bd      	mov	sp, r7
 801ec40:	bc80      	pop	{r7}
 801ec42:	4770      	bx	lr

0801ec44 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801ec44:	b480      	push	{r7}
 801ec46:	b087      	sub	sp, #28
 801ec48:	af00      	add	r7, sp, #0
 801ec4a:	4603      	mov	r3, r0
 801ec4c:	60b9      	str	r1, [r7, #8]
 801ec4e:	607a      	str	r2, [r7, #4]
 801ec50:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801ec52:	2300      	movs	r3, #0
 801ec54:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801ec56:	f04f 33ff 	mov.w	r3, #4294967295
 801ec5a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ec5c:	697b      	ldr	r3, [r7, #20]
}
 801ec5e:	4618      	mov	r0, r3
 801ec60:	371c      	adds	r7, #28
 801ec62:	46bd      	mov	sp, r7
 801ec64:	bc80      	pop	{r7}
 801ec66:	4770      	bx	lr

0801ec68 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801ec68:	b480      	push	{r7}
 801ec6a:	b085      	sub	sp, #20
 801ec6c:	af00      	add	r7, sp, #0
 801ec6e:	60f8      	str	r0, [r7, #12]
 801ec70:	60b9      	str	r1, [r7, #8]
 801ec72:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801ec74:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ec78:	4618      	mov	r0, r3
 801ec7a:	3714      	adds	r7, #20
 801ec7c:	46bd      	mov	sp, r7
 801ec7e:	bc80      	pop	{r7}
 801ec80:	4770      	bx	lr

0801ec82 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801ec82:	b480      	push	{r7}
 801ec84:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801ec86:	bf00      	nop
 801ec88:	46bd      	mov	sp, r7
 801ec8a:	bc80      	pop	{r7}
 801ec8c:	4770      	bx	lr

0801ec8e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801ec8e:	b480      	push	{r7}
 801ec90:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801ec92:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ec94:	4618      	mov	r0, r3
 801ec96:	46bd      	mov	sp, r7
 801ec98:	bc80      	pop	{r7}
 801ec9a:	4770      	bx	lr

0801ec9c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801ec9c:	b480      	push	{r7}
 801ec9e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801eca0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801eca2:	4618      	mov	r0, r3
 801eca4:	46bd      	mov	sp, r7
 801eca6:	bc80      	pop	{r7}
 801eca8:	4770      	bx	lr

0801ecaa <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ecaa:	b480      	push	{r7}
 801ecac:	b083      	sub	sp, #12
 801ecae:	af00      	add	r7, sp, #0
 801ecb0:	4603      	mov	r3, r0
 801ecb2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ecb4:	bf00      	nop
 801ecb6:	370c      	adds	r7, #12
 801ecb8:	46bd      	mov	sp, r7
 801ecba:	bc80      	pop	{r7}
 801ecbc:	4770      	bx	lr

0801ecbe <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ecbe:	b480      	push	{r7}
 801ecc0:	b087      	sub	sp, #28
 801ecc2:	af00      	add	r7, sp, #0
 801ecc4:	60f8      	str	r0, [r7, #12]
 801ecc6:	460b      	mov	r3, r1
 801ecc8:	607a      	str	r2, [r7, #4]
 801ecca:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801eccc:	f04f 33ff 	mov.w	r3, #4294967295
 801ecd0:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ecd2:	697b      	ldr	r3, [r7, #20]
}
 801ecd4:	4618      	mov	r0, r3
 801ecd6:	371c      	adds	r7, #28
 801ecd8:	46bd      	mov	sp, r7
 801ecda:	bc80      	pop	{r7}
 801ecdc:	4770      	bx	lr

0801ecde <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ecde:	b480      	push	{r7}
 801ece0:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ece2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ece6:	4618      	mov	r0, r3
 801ece8:	46bd      	mov	sp, r7
 801ecea:	bc80      	pop	{r7}
 801ecec:	4770      	bx	lr

0801ecee <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ecee:	b480      	push	{r7}
 801ecf0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ecf2:	bf00      	nop
 801ecf4:	46bd      	mov	sp, r7
 801ecf6:	bc80      	pop	{r7}
 801ecf8:	4770      	bx	lr

0801ecfa <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ecfa:	b480      	push	{r7}
 801ecfc:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801ecfe:	bf00      	nop
 801ed00:	46bd      	mov	sp, r7
 801ed02:	bc80      	pop	{r7}
 801ed04:	4770      	bx	lr

0801ed06 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ed06:	b480      	push	{r7}
 801ed08:	b083      	sub	sp, #12
 801ed0a:	af00      	add	r7, sp, #0
 801ed0c:	4603      	mov	r3, r0
 801ed0e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ed10:	bf00      	nop
 801ed12:	370c      	adds	r7, #12
 801ed14:	46bd      	mov	sp, r7
 801ed16:	bc80      	pop	{r7}
 801ed18:	4770      	bx	lr
	...

0801ed1c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ed1c:	b480      	push	{r7}
 801ed1e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed20:	4b04      	ldr	r3, [pc, #16]	; (801ed34 <UTIL_LPM_Init+0x18>)
 801ed22:	2200      	movs	r2, #0
 801ed24:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed26:	4b04      	ldr	r3, [pc, #16]	; (801ed38 <UTIL_LPM_Init+0x1c>)
 801ed28:	2200      	movs	r2, #0
 801ed2a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ed2c:	bf00      	nop
 801ed2e:	46bd      	mov	sp, r7
 801ed30:	bc80      	pop	{r7}
 801ed32:	4770      	bx	lr
 801ed34:	20001c7c 	.word	0x20001c7c
 801ed38:	20001c80 	.word	0x20001c80

0801ed3c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ed3c:	b480      	push	{r7}
 801ed3e:	b087      	sub	sp, #28
 801ed40:	af00      	add	r7, sp, #0
 801ed42:	6078      	str	r0, [r7, #4]
 801ed44:	460b      	mov	r3, r1
 801ed46:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed48:	f3ef 8310 	mrs	r3, PRIMASK
 801ed4c:	613b      	str	r3, [r7, #16]
  return(result);
 801ed4e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ed50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ed52:	b672      	cpsid	i
}
 801ed54:	bf00      	nop
  
  switch( state )
 801ed56:	78fb      	ldrb	r3, [r7, #3]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d008      	beq.n	801ed6e <UTIL_LPM_SetStopMode+0x32>
 801ed5c:	2b01      	cmp	r3, #1
 801ed5e:	d10e      	bne.n	801ed7e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ed60:	4b0d      	ldr	r3, [pc, #52]	; (801ed98 <UTIL_LPM_SetStopMode+0x5c>)
 801ed62:	681a      	ldr	r2, [r3, #0]
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	4313      	orrs	r3, r2
 801ed68:	4a0b      	ldr	r2, [pc, #44]	; (801ed98 <UTIL_LPM_SetStopMode+0x5c>)
 801ed6a:	6013      	str	r3, [r2, #0]
      break;
 801ed6c:	e008      	b.n	801ed80 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	43da      	mvns	r2, r3
 801ed72:	4b09      	ldr	r3, [pc, #36]	; (801ed98 <UTIL_LPM_SetStopMode+0x5c>)
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	4013      	ands	r3, r2
 801ed78:	4a07      	ldr	r2, [pc, #28]	; (801ed98 <UTIL_LPM_SetStopMode+0x5c>)
 801ed7a:	6013      	str	r3, [r2, #0]
      break;
 801ed7c:	e000      	b.n	801ed80 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ed7e:	bf00      	nop
 801ed80:	697b      	ldr	r3, [r7, #20]
 801ed82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed84:	68fb      	ldr	r3, [r7, #12]
 801ed86:	f383 8810 	msr	PRIMASK, r3
}
 801ed8a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ed8c:	bf00      	nop
 801ed8e:	371c      	adds	r7, #28
 801ed90:	46bd      	mov	sp, r7
 801ed92:	bc80      	pop	{r7}
 801ed94:	4770      	bx	lr
 801ed96:	bf00      	nop
 801ed98:	20001c7c 	.word	0x20001c7c

0801ed9c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ed9c:	b480      	push	{r7}
 801ed9e:	b087      	sub	sp, #28
 801eda0:	af00      	add	r7, sp, #0
 801eda2:	6078      	str	r0, [r7, #4]
 801eda4:	460b      	mov	r3, r1
 801eda6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801eda8:	f3ef 8310 	mrs	r3, PRIMASK
 801edac:	613b      	str	r3, [r7, #16]
  return(result);
 801edae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801edb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801edb2:	b672      	cpsid	i
}
 801edb4:	bf00      	nop
  
  switch(state)
 801edb6:	78fb      	ldrb	r3, [r7, #3]
 801edb8:	2b00      	cmp	r3, #0
 801edba:	d008      	beq.n	801edce <UTIL_LPM_SetOffMode+0x32>
 801edbc:	2b01      	cmp	r3, #1
 801edbe:	d10e      	bne.n	801edde <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801edc0:	4b0d      	ldr	r3, [pc, #52]	; (801edf8 <UTIL_LPM_SetOffMode+0x5c>)
 801edc2:	681a      	ldr	r2, [r3, #0]
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	4313      	orrs	r3, r2
 801edc8:	4a0b      	ldr	r2, [pc, #44]	; (801edf8 <UTIL_LPM_SetOffMode+0x5c>)
 801edca:	6013      	str	r3, [r2, #0]
      break;
 801edcc:	e008      	b.n	801ede0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	43da      	mvns	r2, r3
 801edd2:	4b09      	ldr	r3, [pc, #36]	; (801edf8 <UTIL_LPM_SetOffMode+0x5c>)
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	4013      	ands	r3, r2
 801edd8:	4a07      	ldr	r2, [pc, #28]	; (801edf8 <UTIL_LPM_SetOffMode+0x5c>)
 801edda:	6013      	str	r3, [r2, #0]
      break;
 801eddc:	e000      	b.n	801ede0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801edde:	bf00      	nop
 801ede0:	697b      	ldr	r3, [r7, #20]
 801ede2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ede4:	68fb      	ldr	r3, [r7, #12]
 801ede6:	f383 8810 	msr	PRIMASK, r3
}
 801edea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801edec:	bf00      	nop
 801edee:	371c      	adds	r7, #28
 801edf0:	46bd      	mov	sp, r7
 801edf2:	bc80      	pop	{r7}
 801edf4:	4770      	bx	lr
 801edf6:	bf00      	nop
 801edf8:	20001c80 	.word	0x20001c80

0801edfc <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801edfc:	b480      	push	{r7}
 801edfe:	b087      	sub	sp, #28
 801ee00:	af00      	add	r7, sp, #0
 801ee02:	60f8      	str	r0, [r7, #12]
 801ee04:	60b9      	str	r1, [r7, #8]
 801ee06:	4613      	mov	r3, r2
 801ee08:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801ee0a:	68fb      	ldr	r3, [r7, #12]
 801ee0c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801ee0e:	68bb      	ldr	r3, [r7, #8]
 801ee10:	613b      	str	r3, [r7, #16]

  while( size-- )
 801ee12:	e007      	b.n	801ee24 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801ee14:	693a      	ldr	r2, [r7, #16]
 801ee16:	1c53      	adds	r3, r2, #1
 801ee18:	613b      	str	r3, [r7, #16]
 801ee1a:	697b      	ldr	r3, [r7, #20]
 801ee1c:	1c59      	adds	r1, r3, #1
 801ee1e:	6179      	str	r1, [r7, #20]
 801ee20:	7812      	ldrb	r2, [r2, #0]
 801ee22:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ee24:	88fb      	ldrh	r3, [r7, #6]
 801ee26:	1e5a      	subs	r2, r3, #1
 801ee28:	80fa      	strh	r2, [r7, #6]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d1f2      	bne.n	801ee14 <UTIL_MEM_cpy_8+0x18>
    }
}
 801ee2e:	bf00      	nop
 801ee30:	bf00      	nop
 801ee32:	371c      	adds	r7, #28
 801ee34:	46bd      	mov	sp, r7
 801ee36:	bc80      	pop	{r7}
 801ee38:	4770      	bx	lr

0801ee3a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801ee3a:	b480      	push	{r7}
 801ee3c:	b085      	sub	sp, #20
 801ee3e:	af00      	add	r7, sp, #0
 801ee40:	6078      	str	r0, [r7, #4]
 801ee42:	460b      	mov	r3, r1
 801ee44:	70fb      	strb	r3, [r7, #3]
 801ee46:	4613      	mov	r3, r2
 801ee48:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801ee4e:	e004      	b.n	801ee5a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	1c5a      	adds	r2, r3, #1
 801ee54:	60fa      	str	r2, [r7, #12]
 801ee56:	78fa      	ldrb	r2, [r7, #3]
 801ee58:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ee5a:	883b      	ldrh	r3, [r7, #0]
 801ee5c:	1e5a      	subs	r2, r3, #1
 801ee5e:	803a      	strh	r2, [r7, #0]
 801ee60:	2b00      	cmp	r3, #0
 801ee62:	d1f5      	bne.n	801ee50 <UTIL_MEM_set_8+0x16>
  }
}
 801ee64:	bf00      	nop
 801ee66:	bf00      	nop
 801ee68:	3714      	adds	r7, #20
 801ee6a:	46bd      	mov	sp, r7
 801ee6c:	bc80      	pop	{r7}
 801ee6e:	4770      	bx	lr

0801ee70 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801ee70:	b082      	sub	sp, #8
 801ee72:	b480      	push	{r7}
 801ee74:	b087      	sub	sp, #28
 801ee76:	af00      	add	r7, sp, #0
 801ee78:	60f8      	str	r0, [r7, #12]
 801ee7a:	1d38      	adds	r0, r7, #4
 801ee7c:	e880 0006 	stmia.w	r0, {r1, r2}
 801ee80:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801ee82:	2300      	movs	r3, #0
 801ee84:	613b      	str	r3, [r7, #16]
 801ee86:	2300      	movs	r3, #0
 801ee88:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801ee8a:	687a      	ldr	r2, [r7, #4]
 801ee8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee8e:	4413      	add	r3, r2
 801ee90:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801ee92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ee96:	b29a      	uxth	r2, r3
 801ee98:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ee9c:	b29b      	uxth	r3, r3
 801ee9e:	4413      	add	r3, r2
 801eea0:	b29b      	uxth	r3, r3
 801eea2:	b21b      	sxth	r3, r3
 801eea4:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801eea6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eeaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801eeae:	db0a      	blt.n	801eec6 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801eeb0:	693b      	ldr	r3, [r7, #16]
 801eeb2:	3301      	adds	r3, #1
 801eeb4:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801eeb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eeba:	b29b      	uxth	r3, r3
 801eebc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801eec0:	b29b      	uxth	r3, r3
 801eec2:	b21b      	sxth	r3, r3
 801eec4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801eec6:	68fb      	ldr	r3, [r7, #12]
 801eec8:	461a      	mov	r2, r3
 801eeca:	f107 0310 	add.w	r3, r7, #16
 801eece:	e893 0003 	ldmia.w	r3, {r0, r1}
 801eed2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801eed6:	68f8      	ldr	r0, [r7, #12]
 801eed8:	371c      	adds	r7, #28
 801eeda:	46bd      	mov	sp, r7
 801eedc:	bc80      	pop	{r7}
 801eede:	b002      	add	sp, #8
 801eee0:	4770      	bx	lr

0801eee2 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801eee2:	b082      	sub	sp, #8
 801eee4:	b480      	push	{r7}
 801eee6:	b087      	sub	sp, #28
 801eee8:	af00      	add	r7, sp, #0
 801eeea:	60f8      	str	r0, [r7, #12]
 801eeec:	1d38      	adds	r0, r7, #4
 801eeee:	e880 0006 	stmia.w	r0, {r1, r2}
 801eef2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801eef4:	2300      	movs	r3, #0
 801eef6:	613b      	str	r3, [r7, #16]
 801eef8:	2300      	movs	r3, #0
 801eefa:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801eefc:	687a      	ldr	r2, [r7, #4]
 801eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef00:	1ad3      	subs	r3, r2, r3
 801ef02:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ef04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ef08:	b29a      	uxth	r2, r3
 801ef0a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ef0e:	b29b      	uxth	r3, r3
 801ef10:	1ad3      	subs	r3, r2, r3
 801ef12:	b29b      	uxth	r3, r3
 801ef14:	b21b      	sxth	r3, r3
 801ef16:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801ef18:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	da0a      	bge.n	801ef36 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801ef20:	693b      	ldr	r3, [r7, #16]
 801ef22:	3b01      	subs	r3, #1
 801ef24:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801ef26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ef2a:	b29b      	uxth	r3, r3
 801ef2c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801ef30:	b29b      	uxth	r3, r3
 801ef32:	b21b      	sxth	r3, r3
 801ef34:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ef36:	68fb      	ldr	r3, [r7, #12]
 801ef38:	461a      	mov	r2, r3
 801ef3a:	f107 0310 	add.w	r3, r7, #16
 801ef3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ef42:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ef46:	68f8      	ldr	r0, [r7, #12]
 801ef48:	371c      	adds	r7, #28
 801ef4a:	46bd      	mov	sp, r7
 801ef4c:	bc80      	pop	{r7}
 801ef4e:	b002      	add	sp, #8
 801ef50:	4770      	bx	lr
	...

0801ef54 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ef54:	b580      	push	{r7, lr}
 801ef56:	b088      	sub	sp, #32
 801ef58:	af02      	add	r7, sp, #8
 801ef5a:	463b      	mov	r3, r7
 801ef5c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ef60:	2300      	movs	r3, #0
 801ef62:	60bb      	str	r3, [r7, #8]
 801ef64:	2300      	movs	r3, #0
 801ef66:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ef68:	4b10      	ldr	r3, [pc, #64]	; (801efac <SysTimeSet+0x58>)
 801ef6a:	691b      	ldr	r3, [r3, #16]
 801ef6c:	f107 0208 	add.w	r2, r7, #8
 801ef70:	3204      	adds	r2, #4
 801ef72:	4610      	mov	r0, r2
 801ef74:	4798      	blx	r3
 801ef76:	4603      	mov	r3, r0
 801ef78:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ef7a:	f107 0010 	add.w	r0, r7, #16
 801ef7e:	68fb      	ldr	r3, [r7, #12]
 801ef80:	9300      	str	r3, [sp, #0]
 801ef82:	68bb      	ldr	r3, [r7, #8]
 801ef84:	463a      	mov	r2, r7
 801ef86:	ca06      	ldmia	r2, {r1, r2}
 801ef88:	f7ff ffab 	bl	801eee2 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ef8c:	4b07      	ldr	r3, [pc, #28]	; (801efac <SysTimeSet+0x58>)
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	693a      	ldr	r2, [r7, #16]
 801ef92:	4610      	mov	r0, r2
 801ef94:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ef96:	4b05      	ldr	r3, [pc, #20]	; (801efac <SysTimeSet+0x58>)
 801ef98:	689b      	ldr	r3, [r3, #8]
 801ef9a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801ef9e:	4610      	mov	r0, r2
 801efa0:	4798      	blx	r3
}
 801efa2:	bf00      	nop
 801efa4:	3718      	adds	r7, #24
 801efa6:	46bd      	mov	sp, r7
 801efa8:	bd80      	pop	{r7, pc}
 801efaa:	bf00      	nop
 801efac:	08021b18 	.word	0x08021b18

0801efb0 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801efb0:	b580      	push	{r7, lr}
 801efb2:	b08a      	sub	sp, #40	; 0x28
 801efb4:	af02      	add	r7, sp, #8
 801efb6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801efb8:	2300      	movs	r3, #0
 801efba:	61bb      	str	r3, [r7, #24]
 801efbc:	2300      	movs	r3, #0
 801efbe:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801efc0:	2300      	movs	r3, #0
 801efc2:	613b      	str	r3, [r7, #16]
 801efc4:	2300      	movs	r3, #0
 801efc6:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801efc8:	4b14      	ldr	r3, [pc, #80]	; (801f01c <SysTimeGet+0x6c>)
 801efca:	691b      	ldr	r3, [r3, #16]
 801efcc:	f107 0218 	add.w	r2, r7, #24
 801efd0:	3204      	adds	r2, #4
 801efd2:	4610      	mov	r0, r2
 801efd4:	4798      	blx	r3
 801efd6:	4603      	mov	r3, r0
 801efd8:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801efda:	4b10      	ldr	r3, [pc, #64]	; (801f01c <SysTimeGet+0x6c>)
 801efdc:	68db      	ldr	r3, [r3, #12]
 801efde:	4798      	blx	r3
 801efe0:	4603      	mov	r3, r0
 801efe2:	b21b      	sxth	r3, r3
 801efe4:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801efe6:	4b0d      	ldr	r3, [pc, #52]	; (801f01c <SysTimeGet+0x6c>)
 801efe8:	685b      	ldr	r3, [r3, #4]
 801efea:	4798      	blx	r3
 801efec:	4603      	mov	r3, r0
 801efee:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801eff0:	f107 0010 	add.w	r0, r7, #16
 801eff4:	69fb      	ldr	r3, [r7, #28]
 801eff6:	9300      	str	r3, [sp, #0]
 801eff8:	69bb      	ldr	r3, [r7, #24]
 801effa:	f107 0208 	add.w	r2, r7, #8
 801effe:	ca06      	ldmia	r2, {r1, r2}
 801f000:	f7ff ff36 	bl	801ee70 <SysTimeAdd>

  return sysTime;
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	461a      	mov	r2, r3
 801f008:	f107 0310 	add.w	r3, r7, #16
 801f00c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f010:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f014:	6878      	ldr	r0, [r7, #4]
 801f016:	3720      	adds	r7, #32
 801f018:	46bd      	mov	sp, r7
 801f01a:	bd80      	pop	{r7, pc}
 801f01c:	08021b18 	.word	0x08021b18

0801f020 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b084      	sub	sp, #16
 801f024:	af00      	add	r7, sp, #0
 801f026:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f028:	2300      	movs	r3, #0
 801f02a:	60bb      	str	r3, [r7, #8]
 801f02c:	2300      	movs	r3, #0
 801f02e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f030:	4b0a      	ldr	r3, [pc, #40]	; (801f05c <SysTimeGetMcuTime+0x3c>)
 801f032:	691b      	ldr	r3, [r3, #16]
 801f034:	f107 0208 	add.w	r2, r7, #8
 801f038:	3204      	adds	r2, #4
 801f03a:	4610      	mov	r0, r2
 801f03c:	4798      	blx	r3
 801f03e:	4603      	mov	r3, r0
 801f040:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	461a      	mov	r2, r3
 801f046:	f107 0308 	add.w	r3, r7, #8
 801f04a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f04e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f052:	6878      	ldr	r0, [r7, #4]
 801f054:	3710      	adds	r7, #16
 801f056:	46bd      	mov	sp, r7
 801f058:	bd80      	pop	{r7, pc}
 801f05a:	bf00      	nop
 801f05c:	08021b18 	.word	0x08021b18

0801f060 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801f060:	b580      	push	{r7, lr}
 801f062:	b088      	sub	sp, #32
 801f064:	af02      	add	r7, sp, #8
 801f066:	463b      	mov	r3, r7
 801f068:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f06c:	4b0f      	ldr	r3, [pc, #60]	; (801f0ac <SysTimeToMs+0x4c>)
 801f06e:	68db      	ldr	r3, [r3, #12]
 801f070:	4798      	blx	r3
 801f072:	4603      	mov	r3, r0
 801f074:	b21b      	sxth	r3, r3
 801f076:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f078:	4b0c      	ldr	r3, [pc, #48]	; (801f0ac <SysTimeToMs+0x4c>)
 801f07a:	685b      	ldr	r3, [r3, #4]
 801f07c:	4798      	blx	r3
 801f07e:	4603      	mov	r3, r0
 801f080:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801f082:	f107 0008 	add.w	r0, r7, #8
 801f086:	697b      	ldr	r3, [r7, #20]
 801f088:	9300      	str	r3, [sp, #0]
 801f08a:	693b      	ldr	r3, [r7, #16]
 801f08c:	463a      	mov	r2, r7
 801f08e:	ca06      	ldmia	r2, {r1, r2}
 801f090:	f7ff ff27 	bl	801eee2 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801f094:	68bb      	ldr	r3, [r7, #8]
 801f096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f09a:	fb02 f303 	mul.w	r3, r2, r3
 801f09e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801f0a2:	4413      	add	r3, r2
}
 801f0a4:	4618      	mov	r0, r3
 801f0a6:	3718      	adds	r7, #24
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	bd80      	pop	{r7, pc}
 801f0ac:	08021b18 	.word	0x08021b18

0801f0b0 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801f0b0:	b580      	push	{r7, lr}
 801f0b2:	b08a      	sub	sp, #40	; 0x28
 801f0b4:	af02      	add	r7, sp, #8
 801f0b6:	6078      	str	r0, [r7, #4]
 801f0b8:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801f0ba:	683b      	ldr	r3, [r7, #0]
 801f0bc:	4a19      	ldr	r2, [pc, #100]	; (801f124 <SysTimeFromMs+0x74>)
 801f0be:	fba2 2303 	umull	r2, r3, r2, r3
 801f0c2:	099b      	lsrs	r3, r3, #6
 801f0c4:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801f0c6:	69fb      	ldr	r3, [r7, #28]
 801f0c8:	617b      	str	r3, [r7, #20]
 801f0ca:	683b      	ldr	r3, [r7, #0]
 801f0cc:	b29a      	uxth	r2, r3
 801f0ce:	69fb      	ldr	r3, [r7, #28]
 801f0d0:	b29b      	uxth	r3, r3
 801f0d2:	4619      	mov	r1, r3
 801f0d4:	0149      	lsls	r1, r1, #5
 801f0d6:	1ac9      	subs	r1, r1, r3
 801f0d8:	0089      	lsls	r1, r1, #2
 801f0da:	440b      	add	r3, r1
 801f0dc:	00db      	lsls	r3, r3, #3
 801f0de:	b29b      	uxth	r3, r3
 801f0e0:	1ad3      	subs	r3, r2, r3
 801f0e2:	b29b      	uxth	r3, r3
 801f0e4:	b21b      	sxth	r3, r3
 801f0e6:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801f0e8:	f107 030c 	add.w	r3, r7, #12
 801f0ec:	2200      	movs	r2, #0
 801f0ee:	601a      	str	r2, [r3, #0]
 801f0f0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f0f2:	4b0d      	ldr	r3, [pc, #52]	; (801f128 <SysTimeFromMs+0x78>)
 801f0f4:	68db      	ldr	r3, [r3, #12]
 801f0f6:	4798      	blx	r3
 801f0f8:	4603      	mov	r3, r0
 801f0fa:	b21b      	sxth	r3, r3
 801f0fc:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f0fe:	4b0a      	ldr	r3, [pc, #40]	; (801f128 <SysTimeFromMs+0x78>)
 801f100:	685b      	ldr	r3, [r3, #4]
 801f102:	4798      	blx	r3
 801f104:	4603      	mov	r3, r0
 801f106:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801f108:	6878      	ldr	r0, [r7, #4]
 801f10a:	693b      	ldr	r3, [r7, #16]
 801f10c:	9300      	str	r3, [sp, #0]
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	f107 0214 	add.w	r2, r7, #20
 801f114:	ca06      	ldmia	r2, {r1, r2}
 801f116:	f7ff feab 	bl	801ee70 <SysTimeAdd>
}
 801f11a:	6878      	ldr	r0, [r7, #4]
 801f11c:	3720      	adds	r7, #32
 801f11e:	46bd      	mov	sp, r7
 801f120:	bd80      	pop	{r7, pc}
 801f122:	bf00      	nop
 801f124:	10624dd3 	.word	0x10624dd3
 801f128:	08021b18 	.word	0x08021b18

0801f12c <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801f12c:	b480      	push	{r7}
 801f12e:	b085      	sub	sp, #20
 801f130:	af00      	add	r7, sp, #0
 801f132:	6078      	str	r0, [r7, #4]
  int i = 0;
 801f134:	2300      	movs	r3, #0
 801f136:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801f138:	e00e      	b.n	801f158 <ee_skip_atoi+0x2c>
 801f13a:	68fa      	ldr	r2, [r7, #12]
 801f13c:	4613      	mov	r3, r2
 801f13e:	009b      	lsls	r3, r3, #2
 801f140:	4413      	add	r3, r2
 801f142:	005b      	lsls	r3, r3, #1
 801f144:	4618      	mov	r0, r3
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	1c59      	adds	r1, r3, #1
 801f14c:	687a      	ldr	r2, [r7, #4]
 801f14e:	6011      	str	r1, [r2, #0]
 801f150:	781b      	ldrb	r3, [r3, #0]
 801f152:	4403      	add	r3, r0
 801f154:	3b30      	subs	r3, #48	; 0x30
 801f156:	60fb      	str	r3, [r7, #12]
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	781b      	ldrb	r3, [r3, #0]
 801f15e:	2b2f      	cmp	r3, #47	; 0x2f
 801f160:	d904      	bls.n	801f16c <ee_skip_atoi+0x40>
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	681b      	ldr	r3, [r3, #0]
 801f166:	781b      	ldrb	r3, [r3, #0]
 801f168:	2b39      	cmp	r3, #57	; 0x39
 801f16a:	d9e6      	bls.n	801f13a <ee_skip_atoi+0xe>
  return i;
 801f16c:	68fb      	ldr	r3, [r7, #12]
}
 801f16e:	4618      	mov	r0, r3
 801f170:	3714      	adds	r7, #20
 801f172:	46bd      	mov	sp, r7
 801f174:	bc80      	pop	{r7}
 801f176:	4770      	bx	lr

0801f178 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801f178:	b480      	push	{r7}
 801f17a:	b099      	sub	sp, #100	; 0x64
 801f17c:	af00      	add	r7, sp, #0
 801f17e:	60f8      	str	r0, [r7, #12]
 801f180:	60b9      	str	r1, [r7, #8]
 801f182:	607a      	str	r2, [r7, #4]
 801f184:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801f186:	4b71      	ldr	r3, [pc, #452]	; (801f34c <ee_number+0x1d4>)
 801f188:	681b      	ldr	r3, [r3, #0]
 801f18a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801f18c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f192:	2b00      	cmp	r3, #0
 801f194:	d002      	beq.n	801f19c <ee_number+0x24>
 801f196:	4b6e      	ldr	r3, [pc, #440]	; (801f350 <ee_number+0x1d8>)
 801f198:	681b      	ldr	r3, [r3, #0]
 801f19a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801f19c:	683b      	ldr	r3, [r7, #0]
 801f19e:	2b01      	cmp	r3, #1
 801f1a0:	dd02      	ble.n	801f1a8 <ee_number+0x30>
 801f1a2:	683b      	ldr	r3, [r7, #0]
 801f1a4:	2b24      	cmp	r3, #36	; 0x24
 801f1a6:	dd01      	ble.n	801f1ac <ee_number+0x34>
 801f1a8:	2300      	movs	r3, #0
 801f1aa:	e0ca      	b.n	801f342 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801f1ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f1ae:	f003 0301 	and.w	r3, r3, #1
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d001      	beq.n	801f1ba <ee_number+0x42>
 801f1b6:	2330      	movs	r3, #48	; 0x30
 801f1b8:	e000      	b.n	801f1bc <ee_number+0x44>
 801f1ba:	2320      	movs	r3, #32
 801f1bc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801f1c0:	2300      	movs	r3, #0
 801f1c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801f1c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f1c8:	f003 0302 	and.w	r3, r3, #2
 801f1cc:	2b00      	cmp	r3, #0
 801f1ce:	d00b      	beq.n	801f1e8 <ee_number+0x70>
  {
    if (num < 0)
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	2b00      	cmp	r3, #0
 801f1d4:	da08      	bge.n	801f1e8 <ee_number+0x70>
    {
      sign = '-';
 801f1d6:	232d      	movs	r3, #45	; 0x2d
 801f1d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	425b      	negs	r3, r3
 801f1e0:	607b      	str	r3, [r7, #4]
      size--;
 801f1e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f1e4:	3b01      	subs	r3, #1
 801f1e6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801f1e8:	2300      	movs	r3, #0
 801f1ea:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d11e      	bne.n	801f230 <ee_number+0xb8>
    tmp[i++] = '0';
 801f1f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f1f4:	1c5a      	adds	r2, r3, #1
 801f1f6:	657a      	str	r2, [r7, #84]	; 0x54
 801f1f8:	3360      	adds	r3, #96	; 0x60
 801f1fa:	443b      	add	r3, r7
 801f1fc:	2230      	movs	r2, #48	; 0x30
 801f1fe:	f803 2c50 	strb.w	r2, [r3, #-80]
 801f202:	e018      	b.n	801f236 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	683a      	ldr	r2, [r7, #0]
 801f208:	fbb3 f1f2 	udiv	r1, r3, r2
 801f20c:	fb01 f202 	mul.w	r2, r1, r2
 801f210:	1a9b      	subs	r3, r3, r2
 801f212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f214:	441a      	add	r2, r3
 801f216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f218:	1c59      	adds	r1, r3, #1
 801f21a:	6579      	str	r1, [r7, #84]	; 0x54
 801f21c:	7812      	ldrb	r2, [r2, #0]
 801f21e:	3360      	adds	r3, #96	; 0x60
 801f220:	443b      	add	r3, r7
 801f222:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801f226:	687a      	ldr	r2, [r7, #4]
 801f228:	683b      	ldr	r3, [r7, #0]
 801f22a:	fbb2 f3f3 	udiv	r3, r2, r3
 801f22e:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	2b00      	cmp	r3, #0
 801f234:	d1e6      	bne.n	801f204 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801f236:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f23a:	429a      	cmp	r2, r3
 801f23c:	dd01      	ble.n	801f242 <ee_number+0xca>
 801f23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f240:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801f242:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f246:	1ad3      	subs	r3, r2, r3
 801f248:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801f24a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f24c:	f003 0301 	and.w	r3, r3, #1
 801f250:	2b00      	cmp	r3, #0
 801f252:	d112      	bne.n	801f27a <ee_number+0x102>
 801f254:	e00c      	b.n	801f270 <ee_number+0xf8>
 801f256:	68fb      	ldr	r3, [r7, #12]
 801f258:	1c5a      	adds	r2, r3, #1
 801f25a:	60fa      	str	r2, [r7, #12]
 801f25c:	2220      	movs	r2, #32
 801f25e:	701a      	strb	r2, [r3, #0]
 801f260:	68bb      	ldr	r3, [r7, #8]
 801f262:	3b01      	subs	r3, #1
 801f264:	60bb      	str	r3, [r7, #8]
 801f266:	68bb      	ldr	r3, [r7, #8]
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d101      	bne.n	801f270 <ee_number+0xf8>
 801f26c:	68fb      	ldr	r3, [r7, #12]
 801f26e:	e068      	b.n	801f342 <ee_number+0x1ca>
 801f270:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f272:	1e5a      	subs	r2, r3, #1
 801f274:	66ba      	str	r2, [r7, #104]	; 0x68
 801f276:	2b00      	cmp	r3, #0
 801f278:	dced      	bgt.n	801f256 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801f27a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801f27e:	2b00      	cmp	r3, #0
 801f280:	d01b      	beq.n	801f2ba <ee_number+0x142>
 801f282:	68fb      	ldr	r3, [r7, #12]
 801f284:	1c5a      	adds	r2, r3, #1
 801f286:	60fa      	str	r2, [r7, #12]
 801f288:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801f28c:	701a      	strb	r2, [r3, #0]
 801f28e:	68bb      	ldr	r3, [r7, #8]
 801f290:	3b01      	subs	r3, #1
 801f292:	60bb      	str	r3, [r7, #8]
 801f294:	68bb      	ldr	r3, [r7, #8]
 801f296:	2b00      	cmp	r3, #0
 801f298:	d10f      	bne.n	801f2ba <ee_number+0x142>
 801f29a:	68fb      	ldr	r3, [r7, #12]
 801f29c:	e051      	b.n	801f342 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	1c5a      	adds	r2, r3, #1
 801f2a2:	60fa      	str	r2, [r7, #12]
 801f2a4:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801f2a8:	701a      	strb	r2, [r3, #0]
 801f2aa:	68bb      	ldr	r3, [r7, #8]
 801f2ac:	3b01      	subs	r3, #1
 801f2ae:	60bb      	str	r3, [r7, #8]
 801f2b0:	68bb      	ldr	r3, [r7, #8]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	d101      	bne.n	801f2ba <ee_number+0x142>
 801f2b6:	68fb      	ldr	r3, [r7, #12]
 801f2b8:	e043      	b.n	801f342 <ee_number+0x1ca>
 801f2ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f2bc:	1e5a      	subs	r2, r3, #1
 801f2be:	66ba      	str	r2, [r7, #104]	; 0x68
 801f2c0:	2b00      	cmp	r3, #0
 801f2c2:	dcec      	bgt.n	801f29e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801f2c4:	e00c      	b.n	801f2e0 <ee_number+0x168>
 801f2c6:	68fb      	ldr	r3, [r7, #12]
 801f2c8:	1c5a      	adds	r2, r3, #1
 801f2ca:	60fa      	str	r2, [r7, #12]
 801f2cc:	2230      	movs	r2, #48	; 0x30
 801f2ce:	701a      	strb	r2, [r3, #0]
 801f2d0:	68bb      	ldr	r3, [r7, #8]
 801f2d2:	3b01      	subs	r3, #1
 801f2d4:	60bb      	str	r3, [r7, #8]
 801f2d6:	68bb      	ldr	r3, [r7, #8]
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d101      	bne.n	801f2e0 <ee_number+0x168>
 801f2dc:	68fb      	ldr	r3, [r7, #12]
 801f2de:	e030      	b.n	801f342 <ee_number+0x1ca>
 801f2e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f2e2:	1e5a      	subs	r2, r3, #1
 801f2e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f2e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f2e8:	429a      	cmp	r2, r3
 801f2ea:	dbec      	blt.n	801f2c6 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801f2ec:	e010      	b.n	801f310 <ee_number+0x198>
 801f2ee:	68fb      	ldr	r3, [r7, #12]
 801f2f0:	1c5a      	adds	r2, r3, #1
 801f2f2:	60fa      	str	r2, [r7, #12]
 801f2f4:	f107 0110 	add.w	r1, r7, #16
 801f2f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f2fa:	440a      	add	r2, r1
 801f2fc:	7812      	ldrb	r2, [r2, #0]
 801f2fe:	701a      	strb	r2, [r3, #0]
 801f300:	68bb      	ldr	r3, [r7, #8]
 801f302:	3b01      	subs	r3, #1
 801f304:	60bb      	str	r3, [r7, #8]
 801f306:	68bb      	ldr	r3, [r7, #8]
 801f308:	2b00      	cmp	r3, #0
 801f30a:	d101      	bne.n	801f310 <ee_number+0x198>
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	e018      	b.n	801f342 <ee_number+0x1ca>
 801f310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f312:	1e5a      	subs	r2, r3, #1
 801f314:	657a      	str	r2, [r7, #84]	; 0x54
 801f316:	2b00      	cmp	r3, #0
 801f318:	dce9      	bgt.n	801f2ee <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801f31a:	e00c      	b.n	801f336 <ee_number+0x1be>
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	1c5a      	adds	r2, r3, #1
 801f320:	60fa      	str	r2, [r7, #12]
 801f322:	2220      	movs	r2, #32
 801f324:	701a      	strb	r2, [r3, #0]
 801f326:	68bb      	ldr	r3, [r7, #8]
 801f328:	3b01      	subs	r3, #1
 801f32a:	60bb      	str	r3, [r7, #8]
 801f32c:	68bb      	ldr	r3, [r7, #8]
 801f32e:	2b00      	cmp	r3, #0
 801f330:	d101      	bne.n	801f336 <ee_number+0x1be>
 801f332:	68fb      	ldr	r3, [r7, #12]
 801f334:	e005      	b.n	801f342 <ee_number+0x1ca>
 801f336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801f338:	1e5a      	subs	r2, r3, #1
 801f33a:	66ba      	str	r2, [r7, #104]	; 0x68
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	dced      	bgt.n	801f31c <ee_number+0x1a4>

  return str;
 801f340:	68fb      	ldr	r3, [r7, #12]
}
 801f342:	4618      	mov	r0, r3
 801f344:	3764      	adds	r7, #100	; 0x64
 801f346:	46bd      	mov	sp, r7
 801f348:	bc80      	pop	{r7}
 801f34a:	4770      	bx	lr
 801f34c:	20000138 	.word	0x20000138
 801f350:	2000013c 	.word	0x2000013c

0801f354 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801f354:	b580      	push	{r7, lr}
 801f356:	b092      	sub	sp, #72	; 0x48
 801f358:	af04      	add	r7, sp, #16
 801f35a:	60f8      	str	r0, [r7, #12]
 801f35c:	60b9      	str	r1, [r7, #8]
 801f35e:	607a      	str	r2, [r7, #4]
 801f360:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801f362:	68bb      	ldr	r3, [r7, #8]
 801f364:	2b00      	cmp	r3, #0
 801f366:	dc01      	bgt.n	801f36c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801f368:	2300      	movs	r3, #0
 801f36a:	e142      	b.n	801f5f2 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f370:	e12a      	b.n	801f5c8 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801f372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	1ad2      	subs	r2, r2, r3
 801f378:	68bb      	ldr	r3, [r7, #8]
 801f37a:	3b01      	subs	r3, #1
 801f37c:	429a      	cmp	r2, r3
 801f37e:	f280 8131 	bge.w	801f5e4 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	781b      	ldrb	r3, [r3, #0]
 801f386:	2b25      	cmp	r3, #37	; 0x25
 801f388:	d006      	beq.n	801f398 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801f38a:	687a      	ldr	r2, [r7, #4]
 801f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f38e:	1c59      	adds	r1, r3, #1
 801f390:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f392:	7812      	ldrb	r2, [r2, #0]
 801f394:	701a      	strb	r2, [r3, #0]
      continue;
 801f396:	e114      	b.n	801f5c2 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801f398:	2300      	movs	r3, #0
 801f39a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	3301      	adds	r3, #1
 801f3a0:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801f3a2:	687b      	ldr	r3, [r7, #4]
 801f3a4:	781b      	ldrb	r3, [r3, #0]
 801f3a6:	2b30      	cmp	r3, #48	; 0x30
 801f3a8:	d103      	bne.n	801f3b2 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801f3aa:	6a3b      	ldr	r3, [r7, #32]
 801f3ac:	f043 0301 	orr.w	r3, r3, #1
 801f3b0:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801f3b2:	f04f 33ff 	mov.w	r3, #4294967295
 801f3b6:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801f3b8:	687b      	ldr	r3, [r7, #4]
 801f3ba:	781b      	ldrb	r3, [r3, #0]
 801f3bc:	2b2f      	cmp	r3, #47	; 0x2f
 801f3be:	d908      	bls.n	801f3d2 <tiny_vsnprintf_like+0x7e>
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	781b      	ldrb	r3, [r3, #0]
 801f3c4:	2b39      	cmp	r3, #57	; 0x39
 801f3c6:	d804      	bhi.n	801f3d2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801f3c8:	1d3b      	adds	r3, r7, #4
 801f3ca:	4618      	mov	r0, r3
 801f3cc:	f7ff feae 	bl	801f12c <ee_skip_atoi>
 801f3d0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801f3d2:	f04f 33ff 	mov.w	r3, #4294967295
 801f3d6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801f3d8:	f04f 33ff 	mov.w	r3, #4294967295
 801f3dc:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801f3de:	230a      	movs	r3, #10
 801f3e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	781b      	ldrb	r3, [r3, #0]
 801f3e6:	3b58      	subs	r3, #88	; 0x58
 801f3e8:	2b20      	cmp	r3, #32
 801f3ea:	f200 8094 	bhi.w	801f516 <tiny_vsnprintf_like+0x1c2>
 801f3ee:	a201      	add	r2, pc, #4	; (adr r2, 801f3f4 <tiny_vsnprintf_like+0xa0>)
 801f3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3f4:	0801f4ff 	.word	0x0801f4ff
 801f3f8:	0801f517 	.word	0x0801f517
 801f3fc:	0801f517 	.word	0x0801f517
 801f400:	0801f517 	.word	0x0801f517
 801f404:	0801f517 	.word	0x0801f517
 801f408:	0801f517 	.word	0x0801f517
 801f40c:	0801f517 	.word	0x0801f517
 801f410:	0801f517 	.word	0x0801f517
 801f414:	0801f517 	.word	0x0801f517
 801f418:	0801f517 	.word	0x0801f517
 801f41c:	0801f517 	.word	0x0801f517
 801f420:	0801f483 	.word	0x0801f483
 801f424:	0801f50d 	.word	0x0801f50d
 801f428:	0801f517 	.word	0x0801f517
 801f42c:	0801f517 	.word	0x0801f517
 801f430:	0801f517 	.word	0x0801f517
 801f434:	0801f517 	.word	0x0801f517
 801f438:	0801f50d 	.word	0x0801f50d
 801f43c:	0801f517 	.word	0x0801f517
 801f440:	0801f517 	.word	0x0801f517
 801f444:	0801f517 	.word	0x0801f517
 801f448:	0801f517 	.word	0x0801f517
 801f44c:	0801f517 	.word	0x0801f517
 801f450:	0801f517 	.word	0x0801f517
 801f454:	0801f517 	.word	0x0801f517
 801f458:	0801f517 	.word	0x0801f517
 801f45c:	0801f517 	.word	0x0801f517
 801f460:	0801f4a3 	.word	0x0801f4a3
 801f464:	0801f517 	.word	0x0801f517
 801f468:	0801f563 	.word	0x0801f563
 801f46c:	0801f517 	.word	0x0801f517
 801f470:	0801f517 	.word	0x0801f517
 801f474:	0801f507 	.word	0x0801f507
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801f478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f47a:	1c5a      	adds	r2, r3, #1
 801f47c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f47e:	2220      	movs	r2, #32
 801f480:	701a      	strb	r2, [r3, #0]
 801f482:	69fb      	ldr	r3, [r7, #28]
 801f484:	3b01      	subs	r3, #1
 801f486:	61fb      	str	r3, [r7, #28]
 801f488:	69fb      	ldr	r3, [r7, #28]
 801f48a:	2b00      	cmp	r3, #0
 801f48c:	dcf4      	bgt.n	801f478 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801f48e:	683b      	ldr	r3, [r7, #0]
 801f490:	1d1a      	adds	r2, r3, #4
 801f492:	603a      	str	r2, [r7, #0]
 801f494:	6819      	ldr	r1, [r3, #0]
 801f496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f498:	1c5a      	adds	r2, r3, #1
 801f49a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f49c:	b2ca      	uxtb	r2, r1
 801f49e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801f4a0:	e08f      	b.n	801f5c2 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801f4a2:	683b      	ldr	r3, [r7, #0]
 801f4a4:	1d1a      	adds	r2, r3, #4
 801f4a6:	603a      	str	r2, [r7, #0]
 801f4a8:	681b      	ldr	r3, [r3, #0]
 801f4aa:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4ae:	2b00      	cmp	r3, #0
 801f4b0:	d101      	bne.n	801f4b6 <tiny_vsnprintf_like+0x162>
 801f4b2:	4b52      	ldr	r3, [pc, #328]	; (801f5fc <tiny_vsnprintf_like+0x2a8>)
 801f4b4:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801f4b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f4b8:	f7e0 fe5e 	bl	8000178 <strlen>
 801f4bc:	4603      	mov	r3, r0
 801f4be:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801f4c0:	e004      	b.n	801f4cc <tiny_vsnprintf_like+0x178>
 801f4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4c4:	1c5a      	adds	r2, r3, #1
 801f4c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f4c8:	2220      	movs	r2, #32
 801f4ca:	701a      	strb	r2, [r3, #0]
 801f4cc:	69fb      	ldr	r3, [r7, #28]
 801f4ce:	1e5a      	subs	r2, r3, #1
 801f4d0:	61fa      	str	r2, [r7, #28]
 801f4d2:	693a      	ldr	r2, [r7, #16]
 801f4d4:	429a      	cmp	r2, r3
 801f4d6:	dbf4      	blt.n	801f4c2 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801f4d8:	2300      	movs	r3, #0
 801f4da:	62bb      	str	r3, [r7, #40]	; 0x28
 801f4dc:	e00a      	b.n	801f4f4 <tiny_vsnprintf_like+0x1a0>
 801f4de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f4e0:	1c53      	adds	r3, r2, #1
 801f4e2:	627b      	str	r3, [r7, #36]	; 0x24
 801f4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f4e6:	1c59      	adds	r1, r3, #1
 801f4e8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f4ea:	7812      	ldrb	r2, [r2, #0]
 801f4ec:	701a      	strb	r2, [r3, #0]
 801f4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f4f0:	3301      	adds	r3, #1
 801f4f2:	62bb      	str	r3, [r7, #40]	; 0x28
 801f4f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f4f6:	693b      	ldr	r3, [r7, #16]
 801f4f8:	429a      	cmp	r2, r3
 801f4fa:	dbf0      	blt.n	801f4de <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801f4fc:	e061      	b.n	801f5c2 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801f4fe:	6a3b      	ldr	r3, [r7, #32]
 801f500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f504:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801f506:	2310      	movs	r3, #16
 801f508:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801f50a:	e02d      	b.n	801f568 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801f50c:	6a3b      	ldr	r3, [r7, #32]
 801f50e:	f043 0302 	orr.w	r3, r3, #2
 801f512:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801f514:	e025      	b.n	801f562 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	781b      	ldrb	r3, [r3, #0]
 801f51a:	2b25      	cmp	r3, #37	; 0x25
 801f51c:	d004      	beq.n	801f528 <tiny_vsnprintf_like+0x1d4>
 801f51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f520:	1c5a      	adds	r2, r3, #1
 801f522:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f524:	2225      	movs	r2, #37	; 0x25
 801f526:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801f528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f52a:	68fb      	ldr	r3, [r7, #12]
 801f52c:	1ad2      	subs	r2, r2, r3
 801f52e:	68bb      	ldr	r3, [r7, #8]
 801f530:	3b01      	subs	r3, #1
 801f532:	429a      	cmp	r2, r3
 801f534:	da17      	bge.n	801f566 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	781b      	ldrb	r3, [r3, #0]
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d006      	beq.n	801f54c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801f53e:	687a      	ldr	r2, [r7, #4]
 801f540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f542:	1c59      	adds	r1, r3, #1
 801f544:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f546:	7812      	ldrb	r2, [r2, #0]
 801f548:	701a      	strb	r2, [r3, #0]
 801f54a:	e002      	b.n	801f552 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	3b01      	subs	r3, #1
 801f550:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801f552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f554:	68fb      	ldr	r3, [r7, #12]
 801f556:	1ad2      	subs	r2, r2, r3
 801f558:	68bb      	ldr	r3, [r7, #8]
 801f55a:	3b01      	subs	r3, #1
 801f55c:	429a      	cmp	r2, r3
 801f55e:	db2f      	blt.n	801f5c0 <tiny_vsnprintf_like+0x26c>
 801f560:	e002      	b.n	801f568 <tiny_vsnprintf_like+0x214>
        break;
 801f562:	bf00      	nop
 801f564:	e000      	b.n	801f568 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801f566:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801f568:	697b      	ldr	r3, [r7, #20]
 801f56a:	2b6c      	cmp	r3, #108	; 0x6c
 801f56c:	d105      	bne.n	801f57a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801f56e:	683b      	ldr	r3, [r7, #0]
 801f570:	1d1a      	adds	r2, r3, #4
 801f572:	603a      	str	r2, [r7, #0]
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	637b      	str	r3, [r7, #52]	; 0x34
 801f578:	e00f      	b.n	801f59a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801f57a:	6a3b      	ldr	r3, [r7, #32]
 801f57c:	f003 0302 	and.w	r3, r3, #2
 801f580:	2b00      	cmp	r3, #0
 801f582:	d005      	beq.n	801f590 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801f584:	683b      	ldr	r3, [r7, #0]
 801f586:	1d1a      	adds	r2, r3, #4
 801f588:	603a      	str	r2, [r7, #0]
 801f58a:	681b      	ldr	r3, [r3, #0]
 801f58c:	637b      	str	r3, [r7, #52]	; 0x34
 801f58e:	e004      	b.n	801f59a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801f590:	683b      	ldr	r3, [r7, #0]
 801f592:	1d1a      	adds	r2, r3, #4
 801f594:	603a      	str	r2, [r7, #0]
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801f59a:	68bb      	ldr	r3, [r7, #8]
 801f59c:	1e5a      	subs	r2, r3, #1
 801f59e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f5a0:	68fb      	ldr	r3, [r7, #12]
 801f5a2:	1acb      	subs	r3, r1, r3
 801f5a4:	1ad1      	subs	r1, r2, r3
 801f5a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f5a8:	6a3b      	ldr	r3, [r7, #32]
 801f5aa:	9302      	str	r3, [sp, #8]
 801f5ac:	69bb      	ldr	r3, [r7, #24]
 801f5ae:	9301      	str	r3, [sp, #4]
 801f5b0:	69fb      	ldr	r3, [r7, #28]
 801f5b2:	9300      	str	r3, [sp, #0]
 801f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f5b8:	f7ff fdde 	bl	801f178 <ee_number>
 801f5bc:	62f8      	str	r0, [r7, #44]	; 0x2c
 801f5be:	e000      	b.n	801f5c2 <tiny_vsnprintf_like+0x26e>
        continue;
 801f5c0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f5c2:	687b      	ldr	r3, [r7, #4]
 801f5c4:	3301      	adds	r3, #1
 801f5c6:	607b      	str	r3, [r7, #4]
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	781b      	ldrb	r3, [r3, #0]
 801f5cc:	2b00      	cmp	r3, #0
 801f5ce:	f47f aed0 	bne.w	801f372 <tiny_vsnprintf_like+0x1e>
 801f5d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5d4:	68fb      	ldr	r3, [r7, #12]
 801f5d6:	1ad2      	subs	r2, r2, r3
 801f5d8:	68bb      	ldr	r3, [r7, #8]
 801f5da:	3b01      	subs	r3, #1
 801f5dc:	429a      	cmp	r2, r3
 801f5de:	f6bf aec8 	bge.w	801f372 <tiny_vsnprintf_like+0x1e>
 801f5e2:	e000      	b.n	801f5e6 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801f5e4:	bf00      	nop
  }

  *str = '\0';
 801f5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5e8:	2200      	movs	r2, #0
 801f5ea:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801f5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f5ee:	68fb      	ldr	r3, [r7, #12]
 801f5f0:	1ad3      	subs	r3, r2, r3
}
 801f5f2:	4618      	mov	r0, r3
 801f5f4:	3738      	adds	r7, #56	; 0x38
 801f5f6:	46bd      	mov	sp, r7
 801f5f8:	bd80      	pop	{r7, pc}
 801f5fa:	bf00      	nop
 801f5fc:	08021a44 	.word	0x08021a44

0801f600 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f600:	b580      	push	{r7, lr}
 801f602:	b088      	sub	sp, #32
 801f604:	af00      	add	r7, sp, #0
 801f606:	60f8      	str	r0, [r7, #12]
 801f608:	60b9      	str	r1, [r7, #8]
 801f60a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f60c:	f3ef 8310 	mrs	r3, PRIMASK
 801f610:	617b      	str	r3, [r7, #20]
  return(result);
 801f612:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f616:	b672      	cpsid	i
}
 801f618:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f61a:	68f8      	ldr	r0, [r7, #12]
 801f61c:	f000 f83e 	bl	801f69c <SEQ_BitPosition>
 801f620:	4603      	mov	r3, r0
 801f622:	4619      	mov	r1, r3
 801f624:	4a06      	ldr	r2, [pc, #24]	; (801f640 <UTIL_SEQ_RegTask+0x40>)
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f62c:	69fb      	ldr	r3, [r7, #28]
 801f62e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f630:	69bb      	ldr	r3, [r7, #24]
 801f632:	f383 8810 	msr	PRIMASK, r3
}
 801f636:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801f638:	bf00      	nop
}
 801f63a:	3720      	adds	r7, #32
 801f63c:	46bd      	mov	sp, r7
 801f63e:	bd80      	pop	{r7, pc}
 801f640:	20001c88 	.word	0x20001c88

0801f644 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801f644:	b480      	push	{r7}
 801f646:	b087      	sub	sp, #28
 801f648:	af00      	add	r7, sp, #0
 801f64a:	6078      	str	r0, [r7, #4]
 801f64c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f64e:	f3ef 8310 	mrs	r3, PRIMASK
 801f652:	60fb      	str	r3, [r7, #12]
  return(result);
 801f654:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f656:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f658:	b672      	cpsid	i
}
 801f65a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801f65c:	4b0d      	ldr	r3, [pc, #52]	; (801f694 <UTIL_SEQ_SetTask+0x50>)
 801f65e:	681a      	ldr	r2, [r3, #0]
 801f660:	687b      	ldr	r3, [r7, #4]
 801f662:	4313      	orrs	r3, r2
 801f664:	4a0b      	ldr	r2, [pc, #44]	; (801f694 <UTIL_SEQ_SetTask+0x50>)
 801f666:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801f668:	4a0b      	ldr	r2, [pc, #44]	; (801f698 <UTIL_SEQ_SetTask+0x54>)
 801f66a:	683b      	ldr	r3, [r7, #0]
 801f66c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	431a      	orrs	r2, r3
 801f674:	4908      	ldr	r1, [pc, #32]	; (801f698 <UTIL_SEQ_SetTask+0x54>)
 801f676:	683b      	ldr	r3, [r7, #0]
 801f678:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801f67c:	697b      	ldr	r3, [r7, #20]
 801f67e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f680:	693b      	ldr	r3, [r7, #16]
 801f682:	f383 8810 	msr	PRIMASK, r3
}
 801f686:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f688:	bf00      	nop
}
 801f68a:	371c      	adds	r7, #28
 801f68c:	46bd      	mov	sp, r7
 801f68e:	bc80      	pop	{r7}
 801f690:	4770      	bx	lr
 801f692:	bf00      	nop
 801f694:	20001c84 	.word	0x20001c84
 801f698:	20001c98 	.word	0x20001c98

0801f69c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801f69c:	b480      	push	{r7}
 801f69e:	b085      	sub	sp, #20
 801f6a0:	af00      	add	r7, sp, #0
 801f6a2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801f6a4:	2300      	movs	r3, #0
 801f6a6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801f6ac:	68bb      	ldr	r3, [r7, #8]
 801f6ae:	0c1b      	lsrs	r3, r3, #16
 801f6b0:	041b      	lsls	r3, r3, #16
 801f6b2:	2b00      	cmp	r3, #0
 801f6b4:	d104      	bne.n	801f6c0 <SEQ_BitPosition+0x24>
 801f6b6:	2310      	movs	r3, #16
 801f6b8:	73fb      	strb	r3, [r7, #15]
 801f6ba:	68bb      	ldr	r3, [r7, #8]
 801f6bc:	041b      	lsls	r3, r3, #16
 801f6be:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801f6c0:	68bb      	ldr	r3, [r7, #8]
 801f6c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d105      	bne.n	801f6d6 <SEQ_BitPosition+0x3a>
 801f6ca:	7bfb      	ldrb	r3, [r7, #15]
 801f6cc:	3308      	adds	r3, #8
 801f6ce:	73fb      	strb	r3, [r7, #15]
 801f6d0:	68bb      	ldr	r3, [r7, #8]
 801f6d2:	021b      	lsls	r3, r3, #8
 801f6d4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801f6d6:	68bb      	ldr	r3, [r7, #8]
 801f6d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801f6dc:	2b00      	cmp	r3, #0
 801f6de:	d105      	bne.n	801f6ec <SEQ_BitPosition+0x50>
 801f6e0:	7bfb      	ldrb	r3, [r7, #15]
 801f6e2:	3304      	adds	r3, #4
 801f6e4:	73fb      	strb	r3, [r7, #15]
 801f6e6:	68bb      	ldr	r3, [r7, #8]
 801f6e8:	011b      	lsls	r3, r3, #4
 801f6ea:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801f6ec:	68bb      	ldr	r3, [r7, #8]
 801f6ee:	0f1b      	lsrs	r3, r3, #28
 801f6f0:	4a06      	ldr	r2, [pc, #24]	; (801f70c <SEQ_BitPosition+0x70>)
 801f6f2:	5cd2      	ldrb	r2, [r2, r3]
 801f6f4:	7bfb      	ldrb	r3, [r7, #15]
 801f6f6:	4413      	add	r3, r2
 801f6f8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801f6fa:	7bfb      	ldrb	r3, [r7, #15]
 801f6fc:	f1c3 031f 	rsb	r3, r3, #31
 801f700:	b2db      	uxtb	r3, r3
}
 801f702:	4618      	mov	r0, r3
 801f704:	3714      	adds	r7, #20
 801f706:	46bd      	mov	sp, r7
 801f708:	bc80      	pop	{r7}
 801f70a:	4770      	bx	lr
 801f70c:	080220f4 	.word	0x080220f4

0801f710 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801f710:	b580      	push	{r7, lr}
 801f712:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801f714:	4b04      	ldr	r3, [pc, #16]	; (801f728 <UTIL_TIMER_Init+0x18>)
 801f716:	2200      	movs	r2, #0
 801f718:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801f71a:	4b04      	ldr	r3, [pc, #16]	; (801f72c <UTIL_TIMER_Init+0x1c>)
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	4798      	blx	r3
 801f720:	4603      	mov	r3, r0
}
 801f722:	4618      	mov	r0, r3
 801f724:	bd80      	pop	{r7, pc}
 801f726:	bf00      	nop
 801f728:	20001ca0 	.word	0x20001ca0
 801f72c:	08021aec 	.word	0x08021aec

0801f730 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801f730:	b580      	push	{r7, lr}
 801f732:	b084      	sub	sp, #16
 801f734:	af00      	add	r7, sp, #0
 801f736:	60f8      	str	r0, [r7, #12]
 801f738:	60b9      	str	r1, [r7, #8]
 801f73a:	603b      	str	r3, [r7, #0]
 801f73c:	4613      	mov	r3, r2
 801f73e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801f740:	68fb      	ldr	r3, [r7, #12]
 801f742:	2b00      	cmp	r3, #0
 801f744:	d023      	beq.n	801f78e <UTIL_TIMER_Create+0x5e>
 801f746:	683b      	ldr	r3, [r7, #0]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d020      	beq.n	801f78e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	2200      	movs	r2, #0
 801f750:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801f752:	4b11      	ldr	r3, [pc, #68]	; (801f798 <UTIL_TIMER_Create+0x68>)
 801f754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f756:	68b8      	ldr	r0, [r7, #8]
 801f758:	4798      	blx	r3
 801f75a:	4602      	mov	r2, r0
 801f75c:	68fb      	ldr	r3, [r7, #12]
 801f75e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801f760:	68fb      	ldr	r3, [r7, #12]
 801f762:	2200      	movs	r2, #0
 801f764:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801f766:	68fb      	ldr	r3, [r7, #12]
 801f768:	2200      	movs	r2, #0
 801f76a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f76c:	68fb      	ldr	r3, [r7, #12]
 801f76e:	2200      	movs	r2, #0
 801f770:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801f772:	68fb      	ldr	r3, [r7, #12]
 801f774:	683a      	ldr	r2, [r7, #0]
 801f776:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801f778:	68fb      	ldr	r3, [r7, #12]
 801f77a:	69ba      	ldr	r2, [r7, #24]
 801f77c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801f77e:	68fb      	ldr	r3, [r7, #12]
 801f780:	79fa      	ldrb	r2, [r7, #7]
 801f782:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801f784:	68fb      	ldr	r3, [r7, #12]
 801f786:	2200      	movs	r2, #0
 801f788:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801f78a:	2300      	movs	r3, #0
 801f78c:	e000      	b.n	801f790 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801f78e:	2301      	movs	r3, #1
  }
}
 801f790:	4618      	mov	r0, r3
 801f792:	3710      	adds	r7, #16
 801f794:	46bd      	mov	sp, r7
 801f796:	bd80      	pop	{r7, pc}
 801f798:	08021aec 	.word	0x08021aec

0801f79c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801f79c:	b580      	push	{r7, lr}
 801f79e:	b08a      	sub	sp, #40	; 0x28
 801f7a0:	af00      	add	r7, sp, #0
 801f7a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f7a4:	2300      	movs	r3, #0
 801f7a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	2b00      	cmp	r3, #0
 801f7ae:	d056      	beq.n	801f85e <UTIL_TIMER_Start+0xc2>
 801f7b0:	6878      	ldr	r0, [r7, #4]
 801f7b2:	f000 f9a9 	bl	801fb08 <TimerExists>
 801f7b6:	4603      	mov	r3, r0
 801f7b8:	f083 0301 	eor.w	r3, r3, #1
 801f7bc:	b2db      	uxtb	r3, r3
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	d04d      	beq.n	801f85e <UTIL_TIMER_Start+0xc2>
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	7a5b      	ldrb	r3, [r3, #9]
 801f7c6:	2b00      	cmp	r3, #0
 801f7c8:	d149      	bne.n	801f85e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f7ca:	f3ef 8310 	mrs	r3, PRIMASK
 801f7ce:	613b      	str	r3, [r7, #16]
  return(result);
 801f7d0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f7d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f7d4:	b672      	cpsid	i
}
 801f7d6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	685b      	ldr	r3, [r3, #4]
 801f7dc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801f7de:	4b24      	ldr	r3, [pc, #144]	; (801f870 <UTIL_TIMER_Start+0xd4>)
 801f7e0:	6a1b      	ldr	r3, [r3, #32]
 801f7e2:	4798      	blx	r3
 801f7e4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801f7e6:	6a3a      	ldr	r2, [r7, #32]
 801f7e8:	69bb      	ldr	r3, [r7, #24]
 801f7ea:	429a      	cmp	r2, r3
 801f7ec:	d201      	bcs.n	801f7f2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801f7ee:	69bb      	ldr	r3, [r7, #24]
 801f7f0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	6a3a      	ldr	r2, [r7, #32]
 801f7f6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	2200      	movs	r2, #0
 801f7fc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	2201      	movs	r2, #1
 801f802:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	2200      	movs	r2, #0
 801f808:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801f80a:	4b1a      	ldr	r3, [pc, #104]	; (801f874 <UTIL_TIMER_Start+0xd8>)
 801f80c:	681b      	ldr	r3, [r3, #0]
 801f80e:	2b00      	cmp	r3, #0
 801f810:	d106      	bne.n	801f820 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801f812:	4b17      	ldr	r3, [pc, #92]	; (801f870 <UTIL_TIMER_Start+0xd4>)
 801f814:	691b      	ldr	r3, [r3, #16]
 801f816:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801f818:	6878      	ldr	r0, [r7, #4]
 801f81a:	f000 f9eb 	bl	801fbf4 <TimerInsertNewHeadTimer>
 801f81e:	e017      	b.n	801f850 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801f820:	4b13      	ldr	r3, [pc, #76]	; (801f870 <UTIL_TIMER_Start+0xd4>)
 801f822:	699b      	ldr	r3, [r3, #24]
 801f824:	4798      	blx	r3
 801f826:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801f828:	687b      	ldr	r3, [r7, #4]
 801f82a:	681a      	ldr	r2, [r3, #0]
 801f82c:	697b      	ldr	r3, [r7, #20]
 801f82e:	441a      	add	r2, r3
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801f834:	687b      	ldr	r3, [r7, #4]
 801f836:	681a      	ldr	r2, [r3, #0]
 801f838:	4b0e      	ldr	r3, [pc, #56]	; (801f874 <UTIL_TIMER_Start+0xd8>)
 801f83a:	681b      	ldr	r3, [r3, #0]
 801f83c:	681b      	ldr	r3, [r3, #0]
 801f83e:	429a      	cmp	r2, r3
 801f840:	d203      	bcs.n	801f84a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801f842:	6878      	ldr	r0, [r7, #4]
 801f844:	f000 f9d6 	bl	801fbf4 <TimerInsertNewHeadTimer>
 801f848:	e002      	b.n	801f850 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801f84a:	6878      	ldr	r0, [r7, #4]
 801f84c:	f000 f9a2 	bl	801fb94 <TimerInsertTimer>
 801f850:	69fb      	ldr	r3, [r7, #28]
 801f852:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f854:	68fb      	ldr	r3, [r7, #12]
 801f856:	f383 8810 	msr	PRIMASK, r3
}
 801f85a:	bf00      	nop
  {
 801f85c:	e002      	b.n	801f864 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801f85e:	2301      	movs	r3, #1
 801f860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801f864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801f868:	4618      	mov	r0, r3
 801f86a:	3728      	adds	r7, #40	; 0x28
 801f86c:	46bd      	mov	sp, r7
 801f86e:	bd80      	pop	{r7, pc}
 801f870:	08021aec 	.word	0x08021aec
 801f874:	20001ca0 	.word	0x20001ca0

0801f878 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801f878:	b580      	push	{r7, lr}
 801f87a:	b088      	sub	sp, #32
 801f87c:	af00      	add	r7, sp, #0
 801f87e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f880:	2300      	movs	r3, #0
 801f882:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	2b00      	cmp	r3, #0
 801f888:	d05b      	beq.n	801f942 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f88a:	f3ef 8310 	mrs	r3, PRIMASK
 801f88e:	60fb      	str	r3, [r7, #12]
  return(result);
 801f890:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801f894:	b672      	cpsid	i
}
 801f896:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801f898:	4b2d      	ldr	r3, [pc, #180]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f89a:	681b      	ldr	r3, [r3, #0]
 801f89c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801f89e:	4b2c      	ldr	r3, [pc, #176]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	2201      	movs	r2, #1
 801f8a8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801f8aa:	4b29      	ldr	r3, [pc, #164]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8ac:	681b      	ldr	r3, [r3, #0]
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	d041      	beq.n	801f936 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	2200      	movs	r2, #0
 801f8b6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801f8b8:	4b25      	ldr	r3, [pc, #148]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8ba:	681b      	ldr	r3, [r3, #0]
 801f8bc:	687a      	ldr	r2, [r7, #4]
 801f8be:	429a      	cmp	r2, r3
 801f8c0:	d134      	bne.n	801f92c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801f8c2:	4b23      	ldr	r3, [pc, #140]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8c4:	681b      	ldr	r3, [r3, #0]
 801f8c6:	2200      	movs	r2, #0
 801f8c8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801f8ca:	4b21      	ldr	r3, [pc, #132]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	695b      	ldr	r3, [r3, #20]
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d00a      	beq.n	801f8ea <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801f8d4:	4b1e      	ldr	r3, [pc, #120]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	695b      	ldr	r3, [r3, #20]
 801f8da:	4a1d      	ldr	r2, [pc, #116]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8dc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801f8de:	4b1c      	ldr	r3, [pc, #112]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	4618      	mov	r0, r3
 801f8e4:	f000 f92c 	bl	801fb40 <TimerSetTimeout>
 801f8e8:	e023      	b.n	801f932 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801f8ea:	4b1a      	ldr	r3, [pc, #104]	; (801f954 <UTIL_TIMER_Stop+0xdc>)
 801f8ec:	68db      	ldr	r3, [r3, #12]
 801f8ee:	4798      	blx	r3
            TimerListHead = NULL;
 801f8f0:	4b17      	ldr	r3, [pc, #92]	; (801f950 <UTIL_TIMER_Stop+0xd8>)
 801f8f2:	2200      	movs	r2, #0
 801f8f4:	601a      	str	r2, [r3, #0]
 801f8f6:	e01c      	b.n	801f932 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801f8f8:	697a      	ldr	r2, [r7, #20]
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	429a      	cmp	r2, r3
 801f8fe:	d110      	bne.n	801f922 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801f900:	697b      	ldr	r3, [r7, #20]
 801f902:	695b      	ldr	r3, [r3, #20]
 801f904:	2b00      	cmp	r3, #0
 801f906:	d006      	beq.n	801f916 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801f908:	697b      	ldr	r3, [r7, #20]
 801f90a:	695b      	ldr	r3, [r3, #20]
 801f90c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801f90e:	69bb      	ldr	r3, [r7, #24]
 801f910:	697a      	ldr	r2, [r7, #20]
 801f912:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801f914:	e00d      	b.n	801f932 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801f916:	2300      	movs	r3, #0
 801f918:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801f91a:	69bb      	ldr	r3, [r7, #24]
 801f91c:	697a      	ldr	r2, [r7, #20]
 801f91e:	615a      	str	r2, [r3, #20]
            break;
 801f920:	e007      	b.n	801f932 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801f922:	697b      	ldr	r3, [r7, #20]
 801f924:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801f926:	697b      	ldr	r3, [r7, #20]
 801f928:	695b      	ldr	r3, [r3, #20]
 801f92a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801f92c:	697b      	ldr	r3, [r7, #20]
 801f92e:	2b00      	cmp	r3, #0
 801f930:	d1e2      	bne.n	801f8f8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801f932:	2300      	movs	r3, #0
 801f934:	77fb      	strb	r3, [r7, #31]
 801f936:	693b      	ldr	r3, [r7, #16]
 801f938:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f93a:	68bb      	ldr	r3, [r7, #8]
 801f93c:	f383 8810 	msr	PRIMASK, r3
}
 801f940:	e001      	b.n	801f946 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801f942:	2301      	movs	r3, #1
 801f944:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801f946:	7ffb      	ldrb	r3, [r7, #31]
}
 801f948:	4618      	mov	r0, r3
 801f94a:	3720      	adds	r7, #32
 801f94c:	46bd      	mov	sp, r7
 801f94e:	bd80      	pop	{r7, pc}
 801f950:	20001ca0 	.word	0x20001ca0
 801f954:	08021aec 	.word	0x08021aec

0801f958 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801f958:	b580      	push	{r7, lr}
 801f95a:	b084      	sub	sp, #16
 801f95c:	af00      	add	r7, sp, #0
 801f95e:	6078      	str	r0, [r7, #4]
 801f960:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f962:	2300      	movs	r3, #0
 801f964:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	2b00      	cmp	r3, #0
 801f96a:	d102      	bne.n	801f972 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801f96c:	2301      	movs	r3, #1
 801f96e:	73fb      	strb	r3, [r7, #15]
 801f970:	e014      	b.n	801f99c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801f972:	4b0d      	ldr	r3, [pc, #52]	; (801f9a8 <UTIL_TIMER_SetPeriod+0x50>)
 801f974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f976:	6838      	ldr	r0, [r7, #0]
 801f978:	4798      	blx	r3
 801f97a:	4602      	mov	r2, r0
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801f980:	6878      	ldr	r0, [r7, #4]
 801f982:	f000 f8c1 	bl	801fb08 <TimerExists>
 801f986:	4603      	mov	r3, r0
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d007      	beq.n	801f99c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801f98c:	6878      	ldr	r0, [r7, #4]
 801f98e:	f7ff ff73 	bl	801f878 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801f992:	6878      	ldr	r0, [r7, #4]
 801f994:	f7ff ff02 	bl	801f79c <UTIL_TIMER_Start>
 801f998:	4603      	mov	r3, r0
 801f99a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801f99c:	7bfb      	ldrb	r3, [r7, #15]
}
 801f99e:	4618      	mov	r0, r3
 801f9a0:	3710      	adds	r7, #16
 801f9a2:	46bd      	mov	sp, r7
 801f9a4:	bd80      	pop	{r7, pc}
 801f9a6:	bf00      	nop
 801f9a8:	08021aec 	.word	0x08021aec

0801f9ac <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801f9ac:	b590      	push	{r4, r7, lr}
 801f9ae:	b089      	sub	sp, #36	; 0x24
 801f9b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f9b2:	f3ef 8310 	mrs	r3, PRIMASK
 801f9b6:	60bb      	str	r3, [r7, #8]
  return(result);
 801f9b8:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f9ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801f9bc:	b672      	cpsid	i
}
 801f9be:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801f9c0:	4b38      	ldr	r3, [pc, #224]	; (801faa4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f9c2:	695b      	ldr	r3, [r3, #20]
 801f9c4:	4798      	blx	r3
 801f9c6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801f9c8:	4b36      	ldr	r3, [pc, #216]	; (801faa4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f9ca:	691b      	ldr	r3, [r3, #16]
 801f9cc:	4798      	blx	r3
 801f9ce:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801f9d0:	693a      	ldr	r2, [r7, #16]
 801f9d2:	697b      	ldr	r3, [r7, #20]
 801f9d4:	1ad3      	subs	r3, r2, r3
 801f9d6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801f9d8:	4b33      	ldr	r3, [pc, #204]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	2b00      	cmp	r3, #0
 801f9de:	d037      	beq.n	801fa50 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801f9e0:	4b31      	ldr	r3, [pc, #196]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f9e2:	681b      	ldr	r3, [r3, #0]
 801f9e4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801f9e6:	69fb      	ldr	r3, [r7, #28]
 801f9e8:	681b      	ldr	r3, [r3, #0]
 801f9ea:	68fa      	ldr	r2, [r7, #12]
 801f9ec:	429a      	cmp	r2, r3
 801f9ee:	d206      	bcs.n	801f9fe <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801f9f0:	69fb      	ldr	r3, [r7, #28]
 801f9f2:	681a      	ldr	r2, [r3, #0]
 801f9f4:	68fb      	ldr	r3, [r7, #12]
 801f9f6:	1ad2      	subs	r2, r2, r3
 801f9f8:	69fb      	ldr	r3, [r7, #28]
 801f9fa:	601a      	str	r2, [r3, #0]
 801f9fc:	e002      	b.n	801fa04 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801f9fe:	69fb      	ldr	r3, [r7, #28]
 801fa00:	2200      	movs	r2, #0
 801fa02:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801fa04:	69fb      	ldr	r3, [r7, #28]
 801fa06:	695b      	ldr	r3, [r3, #20]
 801fa08:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801fa0a:	69fb      	ldr	r3, [r7, #28]
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	d1ea      	bne.n	801f9e6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fa10:	e01e      	b.n	801fa50 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801fa12:	4b25      	ldr	r3, [pc, #148]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa14:	681b      	ldr	r3, [r3, #0]
 801fa16:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801fa18:	4b23      	ldr	r3, [pc, #140]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa1a:	681b      	ldr	r3, [r3, #0]
 801fa1c:	695b      	ldr	r3, [r3, #20]
 801fa1e:	4a22      	ldr	r2, [pc, #136]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa20:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801fa22:	69fb      	ldr	r3, [r7, #28]
 801fa24:	2200      	movs	r2, #0
 801fa26:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801fa28:	69fb      	ldr	r3, [r7, #28]
 801fa2a:	2200      	movs	r2, #0
 801fa2c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801fa2e:	69fb      	ldr	r3, [r7, #28]
 801fa30:	68db      	ldr	r3, [r3, #12]
 801fa32:	69fa      	ldr	r2, [r7, #28]
 801fa34:	6912      	ldr	r2, [r2, #16]
 801fa36:	4610      	mov	r0, r2
 801fa38:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801fa3a:	69fb      	ldr	r3, [r7, #28]
 801fa3c:	7adb      	ldrb	r3, [r3, #11]
 801fa3e:	2b01      	cmp	r3, #1
 801fa40:	d106      	bne.n	801fa50 <UTIL_TIMER_IRQ_Handler+0xa4>
 801fa42:	69fb      	ldr	r3, [r7, #28]
 801fa44:	7a9b      	ldrb	r3, [r3, #10]
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d102      	bne.n	801fa50 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801fa4a:	69f8      	ldr	r0, [r7, #28]
 801fa4c:	f7ff fea6 	bl	801f79c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fa50:	4b15      	ldr	r3, [pc, #84]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa52:	681b      	ldr	r3, [r3, #0]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d00d      	beq.n	801fa74 <UTIL_TIMER_IRQ_Handler+0xc8>
 801fa58:	4b13      	ldr	r3, [pc, #76]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa5a:	681b      	ldr	r3, [r3, #0]
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	2b00      	cmp	r3, #0
 801fa60:	d0d7      	beq.n	801fa12 <UTIL_TIMER_IRQ_Handler+0x66>
 801fa62:	4b11      	ldr	r3, [pc, #68]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	681c      	ldr	r4, [r3, #0]
 801fa68:	4b0e      	ldr	r3, [pc, #56]	; (801faa4 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fa6a:	699b      	ldr	r3, [r3, #24]
 801fa6c:	4798      	blx	r3
 801fa6e:	4603      	mov	r3, r0
 801fa70:	429c      	cmp	r4, r3
 801fa72:	d3ce      	bcc.n	801fa12 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801fa74:	4b0c      	ldr	r3, [pc, #48]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa76:	681b      	ldr	r3, [r3, #0]
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	d009      	beq.n	801fa90 <UTIL_TIMER_IRQ_Handler+0xe4>
 801fa7c:	4b0a      	ldr	r3, [pc, #40]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	7a1b      	ldrb	r3, [r3, #8]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d104      	bne.n	801fa90 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801fa86:	4b08      	ldr	r3, [pc, #32]	; (801faa8 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	4618      	mov	r0, r3
 801fa8c:	f000 f858 	bl	801fb40 <TimerSetTimeout>
 801fa90:	69bb      	ldr	r3, [r7, #24]
 801fa92:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	f383 8810 	msr	PRIMASK, r3
}
 801fa9a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801fa9c:	bf00      	nop
 801fa9e:	3724      	adds	r7, #36	; 0x24
 801faa0:	46bd      	mov	sp, r7
 801faa2:	bd90      	pop	{r4, r7, pc}
 801faa4:	08021aec 	.word	0x08021aec
 801faa8:	20001ca0 	.word	0x20001ca0

0801faac <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801faac:	b580      	push	{r7, lr}
 801faae:	b082      	sub	sp, #8
 801fab0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801fab2:	4b06      	ldr	r3, [pc, #24]	; (801facc <UTIL_TIMER_GetCurrentTime+0x20>)
 801fab4:	69db      	ldr	r3, [r3, #28]
 801fab6:	4798      	blx	r3
 801fab8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801faba:	4b04      	ldr	r3, [pc, #16]	; (801facc <UTIL_TIMER_GetCurrentTime+0x20>)
 801fabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fabe:	6878      	ldr	r0, [r7, #4]
 801fac0:	4798      	blx	r3
 801fac2:	4603      	mov	r3, r0
}
 801fac4:	4618      	mov	r0, r3
 801fac6:	3708      	adds	r7, #8
 801fac8:	46bd      	mov	sp, r7
 801faca:	bd80      	pop	{r7, pc}
 801facc:	08021aec 	.word	0x08021aec

0801fad0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801fad0:	b580      	push	{r7, lr}
 801fad2:	b084      	sub	sp, #16
 801fad4:	af00      	add	r7, sp, #0
 801fad6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801fad8:	4b0a      	ldr	r3, [pc, #40]	; (801fb04 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fada:	69db      	ldr	r3, [r3, #28]
 801fadc:	4798      	blx	r3
 801fade:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801fae0:	4b08      	ldr	r3, [pc, #32]	; (801fb04 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fae4:	6878      	ldr	r0, [r7, #4]
 801fae6:	4798      	blx	r3
 801fae8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801faea:	4b06      	ldr	r3, [pc, #24]	; (801fb04 <UTIL_TIMER_GetElapsedTime+0x34>)
 801faec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801faee:	68f9      	ldr	r1, [r7, #12]
 801faf0:	68ba      	ldr	r2, [r7, #8]
 801faf2:	1a8a      	subs	r2, r1, r2
 801faf4:	4610      	mov	r0, r2
 801faf6:	4798      	blx	r3
 801faf8:	4603      	mov	r3, r0
}
 801fafa:	4618      	mov	r0, r3
 801fafc:	3710      	adds	r7, #16
 801fafe:	46bd      	mov	sp, r7
 801fb00:	bd80      	pop	{r7, pc}
 801fb02:	bf00      	nop
 801fb04:	08021aec 	.word	0x08021aec

0801fb08 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801fb08:	b480      	push	{r7}
 801fb0a:	b085      	sub	sp, #20
 801fb0c:	af00      	add	r7, sp, #0
 801fb0e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fb10:	4b0a      	ldr	r3, [pc, #40]	; (801fb3c <TimerExists+0x34>)
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801fb16:	e008      	b.n	801fb2a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801fb18:	68fa      	ldr	r2, [r7, #12]
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	429a      	cmp	r2, r3
 801fb1e:	d101      	bne.n	801fb24 <TimerExists+0x1c>
    {
      return true;
 801fb20:	2301      	movs	r3, #1
 801fb22:	e006      	b.n	801fb32 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801fb24:	68fb      	ldr	r3, [r7, #12]
 801fb26:	695b      	ldr	r3, [r3, #20]
 801fb28:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801fb2a:	68fb      	ldr	r3, [r7, #12]
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d1f3      	bne.n	801fb18 <TimerExists+0x10>
  }
  return false;
 801fb30:	2300      	movs	r3, #0
}
 801fb32:	4618      	mov	r0, r3
 801fb34:	3714      	adds	r7, #20
 801fb36:	46bd      	mov	sp, r7
 801fb38:	bc80      	pop	{r7}
 801fb3a:	4770      	bx	lr
 801fb3c:	20001ca0 	.word	0x20001ca0

0801fb40 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801fb40:	b590      	push	{r4, r7, lr}
 801fb42:	b085      	sub	sp, #20
 801fb44:	af00      	add	r7, sp, #0
 801fb46:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801fb48:	4b11      	ldr	r3, [pc, #68]	; (801fb90 <TimerSetTimeout+0x50>)
 801fb4a:	6a1b      	ldr	r3, [r3, #32]
 801fb4c:	4798      	blx	r3
 801fb4e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801fb50:	687b      	ldr	r3, [r7, #4]
 801fb52:	2201      	movs	r2, #1
 801fb54:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	681c      	ldr	r4, [r3, #0]
 801fb5a:	4b0d      	ldr	r3, [pc, #52]	; (801fb90 <TimerSetTimeout+0x50>)
 801fb5c:	699b      	ldr	r3, [r3, #24]
 801fb5e:	4798      	blx	r3
 801fb60:	4602      	mov	r2, r0
 801fb62:	68fb      	ldr	r3, [r7, #12]
 801fb64:	4413      	add	r3, r2
 801fb66:	429c      	cmp	r4, r3
 801fb68:	d207      	bcs.n	801fb7a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801fb6a:	4b09      	ldr	r3, [pc, #36]	; (801fb90 <TimerSetTimeout+0x50>)
 801fb6c:	699b      	ldr	r3, [r3, #24]
 801fb6e:	4798      	blx	r3
 801fb70:	4602      	mov	r2, r0
 801fb72:	68fb      	ldr	r3, [r7, #12]
 801fb74:	441a      	add	r2, r3
 801fb76:	687b      	ldr	r3, [r7, #4]
 801fb78:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801fb7a:	4b05      	ldr	r3, [pc, #20]	; (801fb90 <TimerSetTimeout+0x50>)
 801fb7c:	689b      	ldr	r3, [r3, #8]
 801fb7e:	687a      	ldr	r2, [r7, #4]
 801fb80:	6812      	ldr	r2, [r2, #0]
 801fb82:	4610      	mov	r0, r2
 801fb84:	4798      	blx	r3
}
 801fb86:	bf00      	nop
 801fb88:	3714      	adds	r7, #20
 801fb8a:	46bd      	mov	sp, r7
 801fb8c:	bd90      	pop	{r4, r7, pc}
 801fb8e:	bf00      	nop
 801fb90:	08021aec 	.word	0x08021aec

0801fb94 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801fb94:	b480      	push	{r7}
 801fb96:	b085      	sub	sp, #20
 801fb98:	af00      	add	r7, sp, #0
 801fb9a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fb9c:	4b14      	ldr	r3, [pc, #80]	; (801fbf0 <TimerInsertTimer+0x5c>)
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801fba2:	4b13      	ldr	r3, [pc, #76]	; (801fbf0 <TimerInsertTimer+0x5c>)
 801fba4:	681b      	ldr	r3, [r3, #0]
 801fba6:	695b      	ldr	r3, [r3, #20]
 801fba8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801fbaa:	e012      	b.n	801fbd2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	681a      	ldr	r2, [r3, #0]
 801fbb0:	68bb      	ldr	r3, [r7, #8]
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	429a      	cmp	r2, r3
 801fbb6:	d905      	bls.n	801fbc4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801fbb8:	68bb      	ldr	r3, [r7, #8]
 801fbba:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801fbbc:	68bb      	ldr	r3, [r7, #8]
 801fbbe:	695b      	ldr	r3, [r3, #20]
 801fbc0:	60bb      	str	r3, [r7, #8]
 801fbc2:	e006      	b.n	801fbd2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801fbc4:	68fb      	ldr	r3, [r7, #12]
 801fbc6:	687a      	ldr	r2, [r7, #4]
 801fbc8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801fbca:	687b      	ldr	r3, [r7, #4]
 801fbcc:	68ba      	ldr	r2, [r7, #8]
 801fbce:	615a      	str	r2, [r3, #20]
        return;
 801fbd0:	e009      	b.n	801fbe6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801fbd2:	68fb      	ldr	r3, [r7, #12]
 801fbd4:	695b      	ldr	r3, [r3, #20]
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	d1e8      	bne.n	801fbac <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801fbda:	68fb      	ldr	r3, [r7, #12]
 801fbdc:	687a      	ldr	r2, [r7, #4]
 801fbde:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	2200      	movs	r2, #0
 801fbe4:	615a      	str	r2, [r3, #20]
}
 801fbe6:	3714      	adds	r7, #20
 801fbe8:	46bd      	mov	sp, r7
 801fbea:	bc80      	pop	{r7}
 801fbec:	4770      	bx	lr
 801fbee:	bf00      	nop
 801fbf0:	20001ca0 	.word	0x20001ca0

0801fbf4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801fbf4:	b580      	push	{r7, lr}
 801fbf6:	b084      	sub	sp, #16
 801fbf8:	af00      	add	r7, sp, #0
 801fbfa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fbfc:	4b0b      	ldr	r3, [pc, #44]	; (801fc2c <TimerInsertNewHeadTimer+0x38>)
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801fc02:	68fb      	ldr	r3, [r7, #12]
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	d002      	beq.n	801fc0e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801fc08:	68fb      	ldr	r3, [r7, #12]
 801fc0a:	2200      	movs	r2, #0
 801fc0c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	68fa      	ldr	r2, [r7, #12]
 801fc12:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801fc14:	4a05      	ldr	r2, [pc, #20]	; (801fc2c <TimerInsertNewHeadTimer+0x38>)
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801fc1a:	4b04      	ldr	r3, [pc, #16]	; (801fc2c <TimerInsertNewHeadTimer+0x38>)
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	4618      	mov	r0, r3
 801fc20:	f7ff ff8e 	bl	801fb40 <TimerSetTimeout>
}
 801fc24:	bf00      	nop
 801fc26:	3710      	adds	r7, #16
 801fc28:	46bd      	mov	sp, r7
 801fc2a:	bd80      	pop	{r7, pc}
 801fc2c:	20001ca0 	.word	0x20001ca0

0801fc30 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801fc30:	b580      	push	{r7, lr}
 801fc32:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801fc34:	2218      	movs	r2, #24
 801fc36:	2100      	movs	r1, #0
 801fc38:	4807      	ldr	r0, [pc, #28]	; (801fc58 <UTIL_ADV_TRACE_Init+0x28>)
 801fc3a:	f7ff f8fe 	bl	801ee3a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801fc3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801fc42:	2100      	movs	r1, #0
 801fc44:	4805      	ldr	r0, [pc, #20]	; (801fc5c <UTIL_ADV_TRACE_Init+0x2c>)
 801fc46:	f7ff f8f8 	bl	801ee3a <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801fc4a:	4b05      	ldr	r3, [pc, #20]	; (801fc60 <UTIL_ADV_TRACE_Init+0x30>)
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	4805      	ldr	r0, [pc, #20]	; (801fc64 <UTIL_ADV_TRACE_Init+0x34>)
 801fc50:	4798      	blx	r3
 801fc52:	4603      	mov	r3, r0
}
 801fc54:	4618      	mov	r0, r3
 801fc56:	bd80      	pop	{r7, pc}
 801fc58:	20001ca4 	.word	0x20001ca4
 801fc5c:	20001cbc 	.word	0x20001cbc
 801fc60:	08021b2c 	.word	0x08021b2c
 801fc64:	0801fed1 	.word	0x0801fed1

0801fc68 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801fc68:	b480      	push	{r7}
 801fc6a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801fc6c:	4b06      	ldr	r3, [pc, #24]	; (801fc88 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801fc6e:	8a5a      	ldrh	r2, [r3, #18]
 801fc70:	4b05      	ldr	r3, [pc, #20]	; (801fc88 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801fc72:	8a1b      	ldrh	r3, [r3, #16]
 801fc74:	429a      	cmp	r2, r3
 801fc76:	d101      	bne.n	801fc7c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801fc78:	2301      	movs	r3, #1
 801fc7a:	e000      	b.n	801fc7e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801fc7c:	2300      	movs	r3, #0
}
 801fc7e:	4618      	mov	r0, r3
 801fc80:	46bd      	mov	sp, r7
 801fc82:	bc80      	pop	{r7}
 801fc84:	4770      	bx	lr
 801fc86:	bf00      	nop
 801fc88:	20001ca4 	.word	0x20001ca4

0801fc8c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801fc8c:	b408      	push	{r3}
 801fc8e:	b580      	push	{r7, lr}
 801fc90:	b08d      	sub	sp, #52	; 0x34
 801fc92:	af00      	add	r7, sp, #0
 801fc94:	60f8      	str	r0, [r7, #12]
 801fc96:	60b9      	str	r1, [r7, #8]
 801fc98:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801fc9a:	2300      	movs	r3, #0
 801fc9c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801fc9e:	2300      	movs	r3, #0
 801fca0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801fca2:	4b37      	ldr	r3, [pc, #220]	; (801fd80 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801fca4:	7a1b      	ldrb	r3, [r3, #8]
 801fca6:	461a      	mov	r2, r3
 801fca8:	68fb      	ldr	r3, [r7, #12]
 801fcaa:	4293      	cmp	r3, r2
 801fcac:	d902      	bls.n	801fcb4 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801fcae:	f06f 0304 	mvn.w	r3, #4
 801fcb2:	e05e      	b.n	801fd72 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801fcb4:	4b32      	ldr	r3, [pc, #200]	; (801fd80 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801fcb6:	68da      	ldr	r2, [r3, #12]
 801fcb8:	68bb      	ldr	r3, [r7, #8]
 801fcba:	4013      	ands	r3, r2
 801fcbc:	68ba      	ldr	r2, [r7, #8]
 801fcbe:	429a      	cmp	r2, r3
 801fcc0:	d002      	beq.n	801fcc8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801fcc2:	f06f 0305 	mvn.w	r3, #5
 801fcc6:	e054      	b.n	801fd72 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801fcc8:	4b2d      	ldr	r3, [pc, #180]	; (801fd80 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801fcca:	685b      	ldr	r3, [r3, #4]
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d00a      	beq.n	801fce6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d007      	beq.n	801fce6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801fcd6:	4b2a      	ldr	r3, [pc, #168]	; (801fd80 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801fcd8:	685b      	ldr	r3, [r3, #4]
 801fcda:	f107 0116 	add.w	r1, r7, #22
 801fcde:	f107 0218 	add.w	r2, r7, #24
 801fce2:	4610      	mov	r0, r2
 801fce4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801fce6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801fcea:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fcf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801fcf4:	4823      	ldr	r0, [pc, #140]	; (801fd84 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801fcf6:	f7ff fb2d 	bl	801f354 <tiny_vsnprintf_like>
 801fcfa:	4603      	mov	r3, r0
 801fcfc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801fcfe:	f000 f9f1 	bl	80200e4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801fd02:	8afa      	ldrh	r2, [r7, #22]
 801fd04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801fd06:	4413      	add	r3, r2
 801fd08:	b29b      	uxth	r3, r3
 801fd0a:	f107 0214 	add.w	r2, r7, #20
 801fd0e:	4611      	mov	r1, r2
 801fd10:	4618      	mov	r0, r3
 801fd12:	f000 f969 	bl	801ffe8 <TRACE_AllocateBufer>
 801fd16:	4603      	mov	r3, r0
 801fd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fd1c:	d025      	beq.n	801fd6a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801fd1e:	2300      	movs	r3, #0
 801fd20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801fd22:	e00e      	b.n	801fd42 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801fd24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801fd26:	8aba      	ldrh	r2, [r7, #20]
 801fd28:	3330      	adds	r3, #48	; 0x30
 801fd2a:	443b      	add	r3, r7
 801fd2c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801fd30:	4b15      	ldr	r3, [pc, #84]	; (801fd88 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801fd32:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801fd34:	8abb      	ldrh	r3, [r7, #20]
 801fd36:	3301      	adds	r3, #1
 801fd38:	b29b      	uxth	r3, r3
 801fd3a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801fd3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801fd3e:	3301      	adds	r3, #1
 801fd40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801fd42:	8afb      	ldrh	r3, [r7, #22]
 801fd44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801fd46:	429a      	cmp	r2, r3
 801fd48:	d3ec      	bcc.n	801fd24 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801fd4a:	8abb      	ldrh	r3, [r7, #20]
 801fd4c:	461a      	mov	r2, r3
 801fd4e:	4b0e      	ldr	r3, [pc, #56]	; (801fd88 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801fd50:	18d0      	adds	r0, r2, r3
 801fd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fd54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801fd56:	f44f 7100 	mov.w	r1, #512	; 0x200
 801fd5a:	f7ff fafb 	bl	801f354 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801fd5e:	f000 f9df 	bl	8020120 <TRACE_UnLock>

    return TRACE_Send();
 801fd62:	f000 f831 	bl	801fdc8 <TRACE_Send>
 801fd66:	4603      	mov	r3, r0
 801fd68:	e003      	b.n	801fd72 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801fd6a:	f000 f9d9 	bl	8020120 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801fd6e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801fd72:	4618      	mov	r0, r3
 801fd74:	3734      	adds	r7, #52	; 0x34
 801fd76:	46bd      	mov	sp, r7
 801fd78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fd7c:	b001      	add	sp, #4
 801fd7e:	4770      	bx	lr
 801fd80:	20001ca4 	.word	0x20001ca4
 801fd84:	200020bc 	.word	0x200020bc
 801fd88:	20001cbc 	.word	0x20001cbc

0801fd8c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801fd8c:	b480      	push	{r7}
 801fd8e:	b083      	sub	sp, #12
 801fd90:	af00      	add	r7, sp, #0
 801fd92:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801fd94:	4a03      	ldr	r2, [pc, #12]	; (801fda4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	6053      	str	r3, [r2, #4]
}
 801fd9a:	bf00      	nop
 801fd9c:	370c      	adds	r7, #12
 801fd9e:	46bd      	mov	sp, r7
 801fda0:	bc80      	pop	{r7}
 801fda2:	4770      	bx	lr
 801fda4:	20001ca4 	.word	0x20001ca4

0801fda8 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801fda8:	b480      	push	{r7}
 801fdaa:	b083      	sub	sp, #12
 801fdac:	af00      	add	r7, sp, #0
 801fdae:	4603      	mov	r3, r0
 801fdb0:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801fdb2:	4a04      	ldr	r2, [pc, #16]	; (801fdc4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801fdb4:	79fb      	ldrb	r3, [r7, #7]
 801fdb6:	7213      	strb	r3, [r2, #8]
}
 801fdb8:	bf00      	nop
 801fdba:	370c      	adds	r7, #12
 801fdbc:	46bd      	mov	sp, r7
 801fdbe:	bc80      	pop	{r7}
 801fdc0:	4770      	bx	lr
 801fdc2:	bf00      	nop
 801fdc4:	20001ca4 	.word	0x20001ca4

0801fdc8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801fdc8:	b580      	push	{r7, lr}
 801fdca:	b088      	sub	sp, #32
 801fdcc:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801fdce:	2300      	movs	r3, #0
 801fdd0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801fdd2:	2300      	movs	r3, #0
 801fdd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fdd6:	f3ef 8310 	mrs	r3, PRIMASK
 801fdda:	613b      	str	r3, [r7, #16]
  return(result);
 801fddc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fdde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801fde0:	b672      	cpsid	i
}
 801fde2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801fde4:	f000 f9ba 	bl	802015c <TRACE_IsLocked>
 801fde8:	4603      	mov	r3, r0
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d15d      	bne.n	801feaa <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801fdee:	f000 f979 	bl	80200e4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801fdf2:	4b34      	ldr	r3, [pc, #208]	; (801fec4 <TRACE_Send+0xfc>)
 801fdf4:	8a1a      	ldrh	r2, [r3, #16]
 801fdf6:	4b33      	ldr	r3, [pc, #204]	; (801fec4 <TRACE_Send+0xfc>)
 801fdf8:	8a5b      	ldrh	r3, [r3, #18]
 801fdfa:	429a      	cmp	r2, r3
 801fdfc:	d04d      	beq.n	801fe9a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801fdfe:	4b31      	ldr	r3, [pc, #196]	; (801fec4 <TRACE_Send+0xfc>)
 801fe00:	789b      	ldrb	r3, [r3, #2]
 801fe02:	2b01      	cmp	r3, #1
 801fe04:	d117      	bne.n	801fe36 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801fe06:	4b2f      	ldr	r3, [pc, #188]	; (801fec4 <TRACE_Send+0xfc>)
 801fe08:	881a      	ldrh	r2, [r3, #0]
 801fe0a:	4b2e      	ldr	r3, [pc, #184]	; (801fec4 <TRACE_Send+0xfc>)
 801fe0c:	8a1b      	ldrh	r3, [r3, #16]
 801fe0e:	1ad3      	subs	r3, r2, r3
 801fe10:	b29a      	uxth	r2, r3
 801fe12:	4b2c      	ldr	r3, [pc, #176]	; (801fec4 <TRACE_Send+0xfc>)
 801fe14:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801fe16:	4b2b      	ldr	r3, [pc, #172]	; (801fec4 <TRACE_Send+0xfc>)
 801fe18:	2202      	movs	r2, #2
 801fe1a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801fe1c:	4b29      	ldr	r3, [pc, #164]	; (801fec4 <TRACE_Send+0xfc>)
 801fe1e:	2200      	movs	r2, #0
 801fe20:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801fe22:	4b28      	ldr	r3, [pc, #160]	; (801fec4 <TRACE_Send+0xfc>)
 801fe24:	8a9b      	ldrh	r3, [r3, #20]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d105      	bne.n	801fe36 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fe2a:	4b26      	ldr	r3, [pc, #152]	; (801fec4 <TRACE_Send+0xfc>)
 801fe2c:	2200      	movs	r2, #0
 801fe2e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fe30:	4b24      	ldr	r3, [pc, #144]	; (801fec4 <TRACE_Send+0xfc>)
 801fe32:	2200      	movs	r2, #0
 801fe34:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801fe36:	4b23      	ldr	r3, [pc, #140]	; (801fec4 <TRACE_Send+0xfc>)
 801fe38:	789b      	ldrb	r3, [r3, #2]
 801fe3a:	2b00      	cmp	r3, #0
 801fe3c:	d115      	bne.n	801fe6a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801fe3e:	4b21      	ldr	r3, [pc, #132]	; (801fec4 <TRACE_Send+0xfc>)
 801fe40:	8a5a      	ldrh	r2, [r3, #18]
 801fe42:	4b20      	ldr	r3, [pc, #128]	; (801fec4 <TRACE_Send+0xfc>)
 801fe44:	8a1b      	ldrh	r3, [r3, #16]
 801fe46:	429a      	cmp	r2, r3
 801fe48:	d908      	bls.n	801fe5c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801fe4a:	4b1e      	ldr	r3, [pc, #120]	; (801fec4 <TRACE_Send+0xfc>)
 801fe4c:	8a5a      	ldrh	r2, [r3, #18]
 801fe4e:	4b1d      	ldr	r3, [pc, #116]	; (801fec4 <TRACE_Send+0xfc>)
 801fe50:	8a1b      	ldrh	r3, [r3, #16]
 801fe52:	1ad3      	subs	r3, r2, r3
 801fe54:	b29a      	uxth	r2, r3
 801fe56:	4b1b      	ldr	r3, [pc, #108]	; (801fec4 <TRACE_Send+0xfc>)
 801fe58:	829a      	strh	r2, [r3, #20]
 801fe5a:	e006      	b.n	801fe6a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801fe5c:	4b19      	ldr	r3, [pc, #100]	; (801fec4 <TRACE_Send+0xfc>)
 801fe5e:	8a1b      	ldrh	r3, [r3, #16]
 801fe60:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fe64:	b29a      	uxth	r2, r3
 801fe66:	4b17      	ldr	r3, [pc, #92]	; (801fec4 <TRACE_Send+0xfc>)
 801fe68:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801fe6a:	4b16      	ldr	r3, [pc, #88]	; (801fec4 <TRACE_Send+0xfc>)
 801fe6c:	8a1b      	ldrh	r3, [r3, #16]
 801fe6e:	461a      	mov	r2, r3
 801fe70:	4b15      	ldr	r3, [pc, #84]	; (801fec8 <TRACE_Send+0x100>)
 801fe72:	4413      	add	r3, r2
 801fe74:	61bb      	str	r3, [r7, #24]
 801fe76:	697b      	ldr	r3, [r7, #20]
 801fe78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fe7a:	68fb      	ldr	r3, [r7, #12]
 801fe7c:	f383 8810 	msr	PRIMASK, r3
}
 801fe80:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801fe82:	f7e2 fbdf 	bl	8002644 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801fe86:	4b11      	ldr	r3, [pc, #68]	; (801fecc <TRACE_Send+0x104>)
 801fe88:	68db      	ldr	r3, [r3, #12]
 801fe8a:	4a0e      	ldr	r2, [pc, #56]	; (801fec4 <TRACE_Send+0xfc>)
 801fe8c:	8a92      	ldrh	r2, [r2, #20]
 801fe8e:	4611      	mov	r1, r2
 801fe90:	69b8      	ldr	r0, [r7, #24]
 801fe92:	4798      	blx	r3
 801fe94:	4603      	mov	r3, r0
 801fe96:	77fb      	strb	r3, [r7, #31]
 801fe98:	e00d      	b.n	801feb6 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801fe9a:	f000 f941 	bl	8020120 <TRACE_UnLock>
 801fe9e:	697b      	ldr	r3, [r7, #20]
 801fea0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fea2:	68bb      	ldr	r3, [r7, #8]
 801fea4:	f383 8810 	msr	PRIMASK, r3
}
 801fea8:	e005      	b.n	801feb6 <TRACE_Send+0xee>
 801feaa:	697b      	ldr	r3, [r7, #20]
 801feac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	f383 8810 	msr	PRIMASK, r3
}
 801feb4:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801feb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801feba:	4618      	mov	r0, r3
 801febc:	3720      	adds	r7, #32
 801febe:	46bd      	mov	sp, r7
 801fec0:	bd80      	pop	{r7, pc}
 801fec2:	bf00      	nop
 801fec4:	20001ca4 	.word	0x20001ca4
 801fec8:	20001cbc 	.word	0x20001cbc
 801fecc:	08021b2c 	.word	0x08021b2c

0801fed0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801fed0:	b580      	push	{r7, lr}
 801fed2:	b088      	sub	sp, #32
 801fed4:	af00      	add	r7, sp, #0
 801fed6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801fed8:	2300      	movs	r3, #0
 801feda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fedc:	f3ef 8310 	mrs	r3, PRIMASK
 801fee0:	617b      	str	r3, [r7, #20]
  return(result);
 801fee2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fee4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801fee6:	b672      	cpsid	i
}
 801fee8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801feea:	4b3c      	ldr	r3, [pc, #240]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801feec:	789b      	ldrb	r3, [r3, #2]
 801feee:	2b02      	cmp	r3, #2
 801fef0:	d106      	bne.n	801ff00 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fef2:	4b3a      	ldr	r3, [pc, #232]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801fef4:	2200      	movs	r2, #0
 801fef6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fef8:	4b38      	ldr	r3, [pc, #224]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801fefa:	2200      	movs	r2, #0
 801fefc:	821a      	strh	r2, [r3, #16]
 801fefe:	e00a      	b.n	801ff16 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801ff00:	4b36      	ldr	r3, [pc, #216]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff02:	8a1a      	ldrh	r2, [r3, #16]
 801ff04:	4b35      	ldr	r3, [pc, #212]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff06:	8a9b      	ldrh	r3, [r3, #20]
 801ff08:	4413      	add	r3, r2
 801ff0a:	b29b      	uxth	r3, r3
 801ff0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ff10:	b29a      	uxth	r2, r3
 801ff12:	4b32      	ldr	r3, [pc, #200]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff14:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801ff16:	4b31      	ldr	r3, [pc, #196]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff18:	8a1a      	ldrh	r2, [r3, #16]
 801ff1a:	4b30      	ldr	r3, [pc, #192]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff1c:	8a5b      	ldrh	r3, [r3, #18]
 801ff1e:	429a      	cmp	r2, r3
 801ff20:	d04d      	beq.n	801ffbe <TRACE_TxCpltCallback+0xee>
 801ff22:	4b2e      	ldr	r3, [pc, #184]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff24:	8adb      	ldrh	r3, [r3, #22]
 801ff26:	2b01      	cmp	r3, #1
 801ff28:	d149      	bne.n	801ffbe <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ff2a:	4b2c      	ldr	r3, [pc, #176]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff2c:	789b      	ldrb	r3, [r3, #2]
 801ff2e:	2b01      	cmp	r3, #1
 801ff30:	d117      	bne.n	801ff62 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801ff32:	4b2a      	ldr	r3, [pc, #168]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff34:	881a      	ldrh	r2, [r3, #0]
 801ff36:	4b29      	ldr	r3, [pc, #164]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff38:	8a1b      	ldrh	r3, [r3, #16]
 801ff3a:	1ad3      	subs	r3, r2, r3
 801ff3c:	b29a      	uxth	r2, r3
 801ff3e:	4b27      	ldr	r3, [pc, #156]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff40:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ff42:	4b26      	ldr	r3, [pc, #152]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff44:	2202      	movs	r2, #2
 801ff46:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ff48:	4b24      	ldr	r3, [pc, #144]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff4a:	2200      	movs	r2, #0
 801ff4c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ff4e:	4b23      	ldr	r3, [pc, #140]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff50:	8a9b      	ldrh	r3, [r3, #20]
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	d105      	bne.n	801ff62 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ff56:	4b21      	ldr	r3, [pc, #132]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff58:	2200      	movs	r2, #0
 801ff5a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ff5c:	4b1f      	ldr	r3, [pc, #124]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff5e:	2200      	movs	r2, #0
 801ff60:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ff62:	4b1e      	ldr	r3, [pc, #120]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff64:	789b      	ldrb	r3, [r3, #2]
 801ff66:	2b00      	cmp	r3, #0
 801ff68:	d115      	bne.n	801ff96 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ff6a:	4b1c      	ldr	r3, [pc, #112]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff6c:	8a5a      	ldrh	r2, [r3, #18]
 801ff6e:	4b1b      	ldr	r3, [pc, #108]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff70:	8a1b      	ldrh	r3, [r3, #16]
 801ff72:	429a      	cmp	r2, r3
 801ff74:	d908      	bls.n	801ff88 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ff76:	4b19      	ldr	r3, [pc, #100]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff78:	8a5a      	ldrh	r2, [r3, #18]
 801ff7a:	4b18      	ldr	r3, [pc, #96]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff7c:	8a1b      	ldrh	r3, [r3, #16]
 801ff7e:	1ad3      	subs	r3, r2, r3
 801ff80:	b29a      	uxth	r2, r3
 801ff82:	4b16      	ldr	r3, [pc, #88]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff84:	829a      	strh	r2, [r3, #20]
 801ff86:	e006      	b.n	801ff96 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ff88:	4b14      	ldr	r3, [pc, #80]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff8a:	8a1b      	ldrh	r3, [r3, #16]
 801ff8c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ff90:	b29a      	uxth	r2, r3
 801ff92:	4b12      	ldr	r3, [pc, #72]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff94:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ff96:	4b11      	ldr	r3, [pc, #68]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ff98:	8a1b      	ldrh	r3, [r3, #16]
 801ff9a:	461a      	mov	r2, r3
 801ff9c:	4b10      	ldr	r3, [pc, #64]	; (801ffe0 <TRACE_TxCpltCallback+0x110>)
 801ff9e:	4413      	add	r3, r2
 801ffa0:	61fb      	str	r3, [r7, #28]
 801ffa2:	69bb      	ldr	r3, [r7, #24]
 801ffa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ffa6:	693b      	ldr	r3, [r7, #16]
 801ffa8:	f383 8810 	msr	PRIMASK, r3
}
 801ffac:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ffae:	4b0d      	ldr	r3, [pc, #52]	; (801ffe4 <TRACE_TxCpltCallback+0x114>)
 801ffb0:	68db      	ldr	r3, [r3, #12]
 801ffb2:	4a0a      	ldr	r2, [pc, #40]	; (801ffdc <TRACE_TxCpltCallback+0x10c>)
 801ffb4:	8a92      	ldrh	r2, [r2, #20]
 801ffb6:	4611      	mov	r1, r2
 801ffb8:	69f8      	ldr	r0, [r7, #28]
 801ffba:	4798      	blx	r3
 801ffbc:	e00a      	b.n	801ffd4 <TRACE_TxCpltCallback+0x104>
 801ffbe:	69bb      	ldr	r3, [r7, #24]
 801ffc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ffc2:	68fb      	ldr	r3, [r7, #12]
 801ffc4:	f383 8810 	msr	PRIMASK, r3
}
 801ffc8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ffca:	f7e2 fb43 	bl	8002654 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ffce:	f000 f8a7 	bl	8020120 <TRACE_UnLock>
  }
}
 801ffd2:	bf00      	nop
 801ffd4:	bf00      	nop
 801ffd6:	3720      	adds	r7, #32
 801ffd8:	46bd      	mov	sp, r7
 801ffda:	bd80      	pop	{r7, pc}
 801ffdc:	20001ca4 	.word	0x20001ca4
 801ffe0:	20001cbc 	.word	0x20001cbc
 801ffe4:	08021b2c 	.word	0x08021b2c

0801ffe8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801ffe8:	b480      	push	{r7}
 801ffea:	b087      	sub	sp, #28
 801ffec:	af00      	add	r7, sp, #0
 801ffee:	4603      	mov	r3, r0
 801fff0:	6039      	str	r1, [r7, #0]
 801fff2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801fff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fff8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fffa:	f3ef 8310 	mrs	r3, PRIMASK
 801fffe:	60fb      	str	r3, [r7, #12]
  return(result);
 8020000:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8020002:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8020004:	b672      	cpsid	i
}
 8020006:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8020008:	4b35      	ldr	r3, [pc, #212]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 802000a:	8a5a      	ldrh	r2, [r3, #18]
 802000c:	4b34      	ldr	r3, [pc, #208]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 802000e:	8a1b      	ldrh	r3, [r3, #16]
 8020010:	429a      	cmp	r2, r3
 8020012:	d11b      	bne.n	802004c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020014:	4b32      	ldr	r3, [pc, #200]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020016:	8a5b      	ldrh	r3, [r3, #18]
 8020018:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 802001c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 802001e:	88fa      	ldrh	r2, [r7, #6]
 8020020:	8afb      	ldrh	r3, [r7, #22]
 8020022:	429a      	cmp	r2, r3
 8020024:	d33a      	bcc.n	802009c <TRACE_AllocateBufer+0xb4>
 8020026:	4b2e      	ldr	r3, [pc, #184]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020028:	8a1b      	ldrh	r3, [r3, #16]
 802002a:	88fa      	ldrh	r2, [r7, #6]
 802002c:	429a      	cmp	r2, r3
 802002e:	d235      	bcs.n	802009c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020030:	4b2b      	ldr	r3, [pc, #172]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020032:	2201      	movs	r2, #1
 8020034:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8020036:	4b2a      	ldr	r3, [pc, #168]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020038:	8a5a      	ldrh	r2, [r3, #18]
 802003a:	4b29      	ldr	r3, [pc, #164]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 802003c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 802003e:	4b28      	ldr	r3, [pc, #160]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020040:	8a1b      	ldrh	r3, [r3, #16]
 8020042:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020044:	4b26      	ldr	r3, [pc, #152]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020046:	2200      	movs	r2, #0
 8020048:	825a      	strh	r2, [r3, #18]
 802004a:	e027      	b.n	802009c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 802004c:	4b24      	ldr	r3, [pc, #144]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 802004e:	8a5a      	ldrh	r2, [r3, #18]
 8020050:	4b23      	ldr	r3, [pc, #140]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020052:	8a1b      	ldrh	r3, [r3, #16]
 8020054:	429a      	cmp	r2, r3
 8020056:	d91b      	bls.n	8020090 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8020058:	4b21      	ldr	r3, [pc, #132]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 802005a:	8a5b      	ldrh	r3, [r3, #18]
 802005c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8020060:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8020062:	88fa      	ldrh	r2, [r7, #6]
 8020064:	8afb      	ldrh	r3, [r7, #22]
 8020066:	429a      	cmp	r2, r3
 8020068:	d318      	bcc.n	802009c <TRACE_AllocateBufer+0xb4>
 802006a:	4b1d      	ldr	r3, [pc, #116]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 802006c:	8a1b      	ldrh	r3, [r3, #16]
 802006e:	88fa      	ldrh	r2, [r7, #6]
 8020070:	429a      	cmp	r2, r3
 8020072:	d213      	bcs.n	802009c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8020074:	4b1a      	ldr	r3, [pc, #104]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020076:	2201      	movs	r2, #1
 8020078:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 802007a:	4b19      	ldr	r3, [pc, #100]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 802007c:	8a5a      	ldrh	r2, [r3, #18]
 802007e:	4b18      	ldr	r3, [pc, #96]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020080:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8020082:	4b17      	ldr	r3, [pc, #92]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020084:	8a1b      	ldrh	r3, [r3, #16]
 8020086:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8020088:	4b15      	ldr	r3, [pc, #84]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 802008a:	2200      	movs	r2, #0
 802008c:	825a      	strh	r2, [r3, #18]
 802008e:	e005      	b.n	802009c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8020090:	4b13      	ldr	r3, [pc, #76]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020092:	8a1a      	ldrh	r2, [r3, #16]
 8020094:	4b12      	ldr	r3, [pc, #72]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 8020096:	8a5b      	ldrh	r3, [r3, #18]
 8020098:	1ad3      	subs	r3, r2, r3
 802009a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 802009c:	8afa      	ldrh	r2, [r7, #22]
 802009e:	88fb      	ldrh	r3, [r7, #6]
 80200a0:	429a      	cmp	r2, r3
 80200a2:	d90f      	bls.n	80200c4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80200a4:	4b0e      	ldr	r3, [pc, #56]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 80200a6:	8a5a      	ldrh	r2, [r3, #18]
 80200a8:	683b      	ldr	r3, [r7, #0]
 80200aa:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80200ac:	4b0c      	ldr	r3, [pc, #48]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 80200ae:	8a5a      	ldrh	r2, [r3, #18]
 80200b0:	88fb      	ldrh	r3, [r7, #6]
 80200b2:	4413      	add	r3, r2
 80200b4:	b29b      	uxth	r3, r3
 80200b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80200ba:	b29a      	uxth	r2, r3
 80200bc:	4b08      	ldr	r3, [pc, #32]	; (80200e0 <TRACE_AllocateBufer+0xf8>)
 80200be:	825a      	strh	r2, [r3, #18]
    ret = 0;
 80200c0:	2300      	movs	r3, #0
 80200c2:	82bb      	strh	r3, [r7, #20]
 80200c4:	693b      	ldr	r3, [r7, #16]
 80200c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80200c8:	68bb      	ldr	r3, [r7, #8]
 80200ca:	f383 8810 	msr	PRIMASK, r3
}
 80200ce:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 80200d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80200d4:	4618      	mov	r0, r3
 80200d6:	371c      	adds	r7, #28
 80200d8:	46bd      	mov	sp, r7
 80200da:	bc80      	pop	{r7}
 80200dc:	4770      	bx	lr
 80200de:	bf00      	nop
 80200e0:	20001ca4 	.word	0x20001ca4

080200e4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 80200e4:	b480      	push	{r7}
 80200e6:	b085      	sub	sp, #20
 80200e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80200ea:	f3ef 8310 	mrs	r3, PRIMASK
 80200ee:	607b      	str	r3, [r7, #4]
  return(result);
 80200f0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80200f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80200f4:	b672      	cpsid	i
}
 80200f6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 80200f8:	4b08      	ldr	r3, [pc, #32]	; (802011c <TRACE_Lock+0x38>)
 80200fa:	8adb      	ldrh	r3, [r3, #22]
 80200fc:	3301      	adds	r3, #1
 80200fe:	b29a      	uxth	r2, r3
 8020100:	4b06      	ldr	r3, [pc, #24]	; (802011c <TRACE_Lock+0x38>)
 8020102:	82da      	strh	r2, [r3, #22]
 8020104:	68fb      	ldr	r3, [r7, #12]
 8020106:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020108:	68bb      	ldr	r3, [r7, #8]
 802010a:	f383 8810 	msr	PRIMASK, r3
}
 802010e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8020110:	bf00      	nop
 8020112:	3714      	adds	r7, #20
 8020114:	46bd      	mov	sp, r7
 8020116:	bc80      	pop	{r7}
 8020118:	4770      	bx	lr
 802011a:	bf00      	nop
 802011c:	20001ca4 	.word	0x20001ca4

08020120 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8020120:	b480      	push	{r7}
 8020122:	b085      	sub	sp, #20
 8020124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8020126:	f3ef 8310 	mrs	r3, PRIMASK
 802012a:	607b      	str	r3, [r7, #4]
  return(result);
 802012c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 802012e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8020130:	b672      	cpsid	i
}
 8020132:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8020134:	4b08      	ldr	r3, [pc, #32]	; (8020158 <TRACE_UnLock+0x38>)
 8020136:	8adb      	ldrh	r3, [r3, #22]
 8020138:	3b01      	subs	r3, #1
 802013a:	b29a      	uxth	r2, r3
 802013c:	4b06      	ldr	r3, [pc, #24]	; (8020158 <TRACE_UnLock+0x38>)
 802013e:	82da      	strh	r2, [r3, #22]
 8020140:	68fb      	ldr	r3, [r7, #12]
 8020142:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8020144:	68bb      	ldr	r3, [r7, #8]
 8020146:	f383 8810 	msr	PRIMASK, r3
}
 802014a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 802014c:	bf00      	nop
 802014e:	3714      	adds	r7, #20
 8020150:	46bd      	mov	sp, r7
 8020152:	bc80      	pop	{r7}
 8020154:	4770      	bx	lr
 8020156:	bf00      	nop
 8020158:	20001ca4 	.word	0x20001ca4

0802015c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 802015c:	b480      	push	{r7}
 802015e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8020160:	4b05      	ldr	r3, [pc, #20]	; (8020178 <TRACE_IsLocked+0x1c>)
 8020162:	8adb      	ldrh	r3, [r3, #22]
 8020164:	2b00      	cmp	r3, #0
 8020166:	bf14      	ite	ne
 8020168:	2301      	movne	r3, #1
 802016a:	2300      	moveq	r3, #0
 802016c:	b2db      	uxtb	r3, r3
}
 802016e:	4618      	mov	r0, r3
 8020170:	46bd      	mov	sp, r7
 8020172:	bc80      	pop	{r7}
 8020174:	4770      	bx	lr
 8020176:	bf00      	nop
 8020178:	20001ca4 	.word	0x20001ca4
 802017c:	00000000 	.word	0x00000000

08020180 <floor>:
 8020180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020184:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8020188:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 802018c:	2e13      	cmp	r6, #19
 802018e:	4602      	mov	r2, r0
 8020190:	460b      	mov	r3, r1
 8020192:	4607      	mov	r7, r0
 8020194:	460c      	mov	r4, r1
 8020196:	4605      	mov	r5, r0
 8020198:	dc33      	bgt.n	8020202 <floor+0x82>
 802019a:	2e00      	cmp	r6, #0
 802019c:	da14      	bge.n	80201c8 <floor+0x48>
 802019e:	a334      	add	r3, pc, #208	; (adr r3, 8020270 <floor+0xf0>)
 80201a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201a4:	f7df fff6 	bl	8000194 <__adddf3>
 80201a8:	2200      	movs	r2, #0
 80201aa:	2300      	movs	r3, #0
 80201ac:	f7e0 fc38 	bl	8000a20 <__aeabi_dcmpgt>
 80201b0:	b138      	cbz	r0, 80201c2 <floor+0x42>
 80201b2:	2c00      	cmp	r4, #0
 80201b4:	da58      	bge.n	8020268 <floor+0xe8>
 80201b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80201ba:	431d      	orrs	r5, r3
 80201bc:	d001      	beq.n	80201c2 <floor+0x42>
 80201be:	4c2e      	ldr	r4, [pc, #184]	; (8020278 <floor+0xf8>)
 80201c0:	2500      	movs	r5, #0
 80201c2:	4623      	mov	r3, r4
 80201c4:	462f      	mov	r7, r5
 80201c6:	e025      	b.n	8020214 <floor+0x94>
 80201c8:	4a2c      	ldr	r2, [pc, #176]	; (802027c <floor+0xfc>)
 80201ca:	fa42 f806 	asr.w	r8, r2, r6
 80201ce:	ea01 0208 	and.w	r2, r1, r8
 80201d2:	4302      	orrs	r2, r0
 80201d4:	d01e      	beq.n	8020214 <floor+0x94>
 80201d6:	a326      	add	r3, pc, #152	; (adr r3, 8020270 <floor+0xf0>)
 80201d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80201dc:	f7df ffda 	bl	8000194 <__adddf3>
 80201e0:	2200      	movs	r2, #0
 80201e2:	2300      	movs	r3, #0
 80201e4:	f7e0 fc1c 	bl	8000a20 <__aeabi_dcmpgt>
 80201e8:	2800      	cmp	r0, #0
 80201ea:	d0ea      	beq.n	80201c2 <floor+0x42>
 80201ec:	2c00      	cmp	r4, #0
 80201ee:	bfbe      	ittt	lt
 80201f0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80201f4:	fa43 f606 	asrlt.w	r6, r3, r6
 80201f8:	19a4      	addlt	r4, r4, r6
 80201fa:	ea24 0408 	bic.w	r4, r4, r8
 80201fe:	2500      	movs	r5, #0
 8020200:	e7df      	b.n	80201c2 <floor+0x42>
 8020202:	2e33      	cmp	r6, #51	; 0x33
 8020204:	dd0a      	ble.n	802021c <floor+0x9c>
 8020206:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802020a:	d103      	bne.n	8020214 <floor+0x94>
 802020c:	f7df ffc2 	bl	8000194 <__adddf3>
 8020210:	4607      	mov	r7, r0
 8020212:	460b      	mov	r3, r1
 8020214:	4638      	mov	r0, r7
 8020216:	4619      	mov	r1, r3
 8020218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802021c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8020220:	f04f 32ff 	mov.w	r2, #4294967295
 8020224:	fa22 f808 	lsr.w	r8, r2, r8
 8020228:	ea18 0f00 	tst.w	r8, r0
 802022c:	d0f2      	beq.n	8020214 <floor+0x94>
 802022e:	a310      	add	r3, pc, #64	; (adr r3, 8020270 <floor+0xf0>)
 8020230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020234:	f7df ffae 	bl	8000194 <__adddf3>
 8020238:	2200      	movs	r2, #0
 802023a:	2300      	movs	r3, #0
 802023c:	f7e0 fbf0 	bl	8000a20 <__aeabi_dcmpgt>
 8020240:	2800      	cmp	r0, #0
 8020242:	d0be      	beq.n	80201c2 <floor+0x42>
 8020244:	2c00      	cmp	r4, #0
 8020246:	da02      	bge.n	802024e <floor+0xce>
 8020248:	2e14      	cmp	r6, #20
 802024a:	d103      	bne.n	8020254 <floor+0xd4>
 802024c:	3401      	adds	r4, #1
 802024e:	ea25 0508 	bic.w	r5, r5, r8
 8020252:	e7b6      	b.n	80201c2 <floor+0x42>
 8020254:	2301      	movs	r3, #1
 8020256:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802025a:	fa03 f606 	lsl.w	r6, r3, r6
 802025e:	4435      	add	r5, r6
 8020260:	42bd      	cmp	r5, r7
 8020262:	bf38      	it	cc
 8020264:	18e4      	addcc	r4, r4, r3
 8020266:	e7f2      	b.n	802024e <floor+0xce>
 8020268:	2500      	movs	r5, #0
 802026a:	462c      	mov	r4, r5
 802026c:	e7a9      	b.n	80201c2 <floor+0x42>
 802026e:	bf00      	nop
 8020270:	8800759c 	.word	0x8800759c
 8020274:	7e37e43c 	.word	0x7e37e43c
 8020278:	bff00000 	.word	0xbff00000
 802027c:	000fffff 	.word	0x000fffff

08020280 <pow>:
 8020280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020284:	4614      	mov	r4, r2
 8020286:	461d      	mov	r5, r3
 8020288:	4680      	mov	r8, r0
 802028a:	4689      	mov	r9, r1
 802028c:	f000 f860 	bl	8020350 <__ieee754_pow>
 8020290:	4622      	mov	r2, r4
 8020292:	4606      	mov	r6, r0
 8020294:	460f      	mov	r7, r1
 8020296:	462b      	mov	r3, r5
 8020298:	4620      	mov	r0, r4
 802029a:	4629      	mov	r1, r5
 802029c:	f7e0 fbca 	bl	8000a34 <__aeabi_dcmpun>
 80202a0:	bbc8      	cbnz	r0, 8020316 <pow+0x96>
 80202a2:	2200      	movs	r2, #0
 80202a4:	2300      	movs	r3, #0
 80202a6:	4640      	mov	r0, r8
 80202a8:	4649      	mov	r1, r9
 80202aa:	f7e0 fb91 	bl	80009d0 <__aeabi_dcmpeq>
 80202ae:	b1b8      	cbz	r0, 80202e0 <pow+0x60>
 80202b0:	2200      	movs	r2, #0
 80202b2:	2300      	movs	r3, #0
 80202b4:	4620      	mov	r0, r4
 80202b6:	4629      	mov	r1, r5
 80202b8:	f7e0 fb8a 	bl	80009d0 <__aeabi_dcmpeq>
 80202bc:	2800      	cmp	r0, #0
 80202be:	d141      	bne.n	8020344 <pow+0xc4>
 80202c0:	4620      	mov	r0, r4
 80202c2:	4629      	mov	r1, r5
 80202c4:	f000 fe37 	bl	8020f36 <finite>
 80202c8:	b328      	cbz	r0, 8020316 <pow+0x96>
 80202ca:	2200      	movs	r2, #0
 80202cc:	2300      	movs	r3, #0
 80202ce:	4620      	mov	r0, r4
 80202d0:	4629      	mov	r1, r5
 80202d2:	f7e0 fb87 	bl	80009e4 <__aeabi_dcmplt>
 80202d6:	b1f0      	cbz	r0, 8020316 <pow+0x96>
 80202d8:	f000 feb4 	bl	8021044 <__errno>
 80202dc:	2322      	movs	r3, #34	; 0x22
 80202de:	e019      	b.n	8020314 <pow+0x94>
 80202e0:	4630      	mov	r0, r6
 80202e2:	4639      	mov	r1, r7
 80202e4:	f000 fe27 	bl	8020f36 <finite>
 80202e8:	b9c8      	cbnz	r0, 802031e <pow+0x9e>
 80202ea:	4640      	mov	r0, r8
 80202ec:	4649      	mov	r1, r9
 80202ee:	f000 fe22 	bl	8020f36 <finite>
 80202f2:	b1a0      	cbz	r0, 802031e <pow+0x9e>
 80202f4:	4620      	mov	r0, r4
 80202f6:	4629      	mov	r1, r5
 80202f8:	f000 fe1d 	bl	8020f36 <finite>
 80202fc:	b178      	cbz	r0, 802031e <pow+0x9e>
 80202fe:	4632      	mov	r2, r6
 8020300:	463b      	mov	r3, r7
 8020302:	4630      	mov	r0, r6
 8020304:	4639      	mov	r1, r7
 8020306:	f7e0 fb95 	bl	8000a34 <__aeabi_dcmpun>
 802030a:	2800      	cmp	r0, #0
 802030c:	d0e4      	beq.n	80202d8 <pow+0x58>
 802030e:	f000 fe99 	bl	8021044 <__errno>
 8020312:	2321      	movs	r3, #33	; 0x21
 8020314:	6003      	str	r3, [r0, #0]
 8020316:	4630      	mov	r0, r6
 8020318:	4639      	mov	r1, r7
 802031a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802031e:	2200      	movs	r2, #0
 8020320:	2300      	movs	r3, #0
 8020322:	4630      	mov	r0, r6
 8020324:	4639      	mov	r1, r7
 8020326:	f7e0 fb53 	bl	80009d0 <__aeabi_dcmpeq>
 802032a:	2800      	cmp	r0, #0
 802032c:	d0f3      	beq.n	8020316 <pow+0x96>
 802032e:	4640      	mov	r0, r8
 8020330:	4649      	mov	r1, r9
 8020332:	f000 fe00 	bl	8020f36 <finite>
 8020336:	2800      	cmp	r0, #0
 8020338:	d0ed      	beq.n	8020316 <pow+0x96>
 802033a:	4620      	mov	r0, r4
 802033c:	4629      	mov	r1, r5
 802033e:	f000 fdfa 	bl	8020f36 <finite>
 8020342:	e7c8      	b.n	80202d6 <pow+0x56>
 8020344:	4f01      	ldr	r7, [pc, #4]	; (802034c <pow+0xcc>)
 8020346:	2600      	movs	r6, #0
 8020348:	e7e5      	b.n	8020316 <pow+0x96>
 802034a:	bf00      	nop
 802034c:	3ff00000 	.word	0x3ff00000

08020350 <__ieee754_pow>:
 8020350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020354:	b093      	sub	sp, #76	; 0x4c
 8020356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802035a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 802035e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8020362:	4689      	mov	r9, r1
 8020364:	ea56 0102 	orrs.w	r1, r6, r2
 8020368:	4680      	mov	r8, r0
 802036a:	d111      	bne.n	8020390 <__ieee754_pow+0x40>
 802036c:	1803      	adds	r3, r0, r0
 802036e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8020372:	4152      	adcs	r2, r2
 8020374:	4299      	cmp	r1, r3
 8020376:	4b82      	ldr	r3, [pc, #520]	; (8020580 <__ieee754_pow+0x230>)
 8020378:	4193      	sbcs	r3, r2
 802037a:	f080 84b9 	bcs.w	8020cf0 <__ieee754_pow+0x9a0>
 802037e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020382:	4640      	mov	r0, r8
 8020384:	4649      	mov	r1, r9
 8020386:	f7df ff05 	bl	8000194 <__adddf3>
 802038a:	4683      	mov	fp, r0
 802038c:	468c      	mov	ip, r1
 802038e:	e06f      	b.n	8020470 <__ieee754_pow+0x120>
 8020390:	4b7c      	ldr	r3, [pc, #496]	; (8020584 <__ieee754_pow+0x234>)
 8020392:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8020396:	429c      	cmp	r4, r3
 8020398:	464d      	mov	r5, r9
 802039a:	4682      	mov	sl, r0
 802039c:	dc06      	bgt.n	80203ac <__ieee754_pow+0x5c>
 802039e:	d101      	bne.n	80203a4 <__ieee754_pow+0x54>
 80203a0:	2800      	cmp	r0, #0
 80203a2:	d1ec      	bne.n	802037e <__ieee754_pow+0x2e>
 80203a4:	429e      	cmp	r6, r3
 80203a6:	dc01      	bgt.n	80203ac <__ieee754_pow+0x5c>
 80203a8:	d10f      	bne.n	80203ca <__ieee754_pow+0x7a>
 80203aa:	b172      	cbz	r2, 80203ca <__ieee754_pow+0x7a>
 80203ac:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80203b0:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80203b4:	ea55 050a 	orrs.w	r5, r5, sl
 80203b8:	d1e1      	bne.n	802037e <__ieee754_pow+0x2e>
 80203ba:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80203be:	18db      	adds	r3, r3, r3
 80203c0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80203c4:	4152      	adcs	r2, r2
 80203c6:	429d      	cmp	r5, r3
 80203c8:	e7d5      	b.n	8020376 <__ieee754_pow+0x26>
 80203ca:	2d00      	cmp	r5, #0
 80203cc:	da39      	bge.n	8020442 <__ieee754_pow+0xf2>
 80203ce:	4b6e      	ldr	r3, [pc, #440]	; (8020588 <__ieee754_pow+0x238>)
 80203d0:	429e      	cmp	r6, r3
 80203d2:	dc52      	bgt.n	802047a <__ieee754_pow+0x12a>
 80203d4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80203d8:	429e      	cmp	r6, r3
 80203da:	f340 849c 	ble.w	8020d16 <__ieee754_pow+0x9c6>
 80203de:	1533      	asrs	r3, r6, #20
 80203e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80203e4:	2b14      	cmp	r3, #20
 80203e6:	dd0f      	ble.n	8020408 <__ieee754_pow+0xb8>
 80203e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80203ec:	fa22 f103 	lsr.w	r1, r2, r3
 80203f0:	fa01 f303 	lsl.w	r3, r1, r3
 80203f4:	4293      	cmp	r3, r2
 80203f6:	f040 848e 	bne.w	8020d16 <__ieee754_pow+0x9c6>
 80203fa:	f001 0101 	and.w	r1, r1, #1
 80203fe:	f1c1 0302 	rsb	r3, r1, #2
 8020402:	9300      	str	r3, [sp, #0]
 8020404:	b182      	cbz	r2, 8020428 <__ieee754_pow+0xd8>
 8020406:	e05d      	b.n	80204c4 <__ieee754_pow+0x174>
 8020408:	2a00      	cmp	r2, #0
 802040a:	d159      	bne.n	80204c0 <__ieee754_pow+0x170>
 802040c:	f1c3 0314 	rsb	r3, r3, #20
 8020410:	fa46 f103 	asr.w	r1, r6, r3
 8020414:	fa01 f303 	lsl.w	r3, r1, r3
 8020418:	42b3      	cmp	r3, r6
 802041a:	f040 8479 	bne.w	8020d10 <__ieee754_pow+0x9c0>
 802041e:	f001 0101 	and.w	r1, r1, #1
 8020422:	f1c1 0302 	rsb	r3, r1, #2
 8020426:	9300      	str	r3, [sp, #0]
 8020428:	4b58      	ldr	r3, [pc, #352]	; (802058c <__ieee754_pow+0x23c>)
 802042a:	429e      	cmp	r6, r3
 802042c:	d132      	bne.n	8020494 <__ieee754_pow+0x144>
 802042e:	2f00      	cmp	r7, #0
 8020430:	f280 846a 	bge.w	8020d08 <__ieee754_pow+0x9b8>
 8020434:	4955      	ldr	r1, [pc, #340]	; (802058c <__ieee754_pow+0x23c>)
 8020436:	4642      	mov	r2, r8
 8020438:	464b      	mov	r3, r9
 802043a:	2000      	movs	r0, #0
 802043c:	f7e0 f98a 	bl	8000754 <__aeabi_ddiv>
 8020440:	e7a3      	b.n	802038a <__ieee754_pow+0x3a>
 8020442:	2300      	movs	r3, #0
 8020444:	9300      	str	r3, [sp, #0]
 8020446:	2a00      	cmp	r2, #0
 8020448:	d13c      	bne.n	80204c4 <__ieee754_pow+0x174>
 802044a:	4b4e      	ldr	r3, [pc, #312]	; (8020584 <__ieee754_pow+0x234>)
 802044c:	429e      	cmp	r6, r3
 802044e:	d1eb      	bne.n	8020428 <__ieee754_pow+0xd8>
 8020450:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8020454:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8020458:	ea53 030a 	orrs.w	r3, r3, sl
 802045c:	f000 8448 	beq.w	8020cf0 <__ieee754_pow+0x9a0>
 8020460:	4b4b      	ldr	r3, [pc, #300]	; (8020590 <__ieee754_pow+0x240>)
 8020462:	429c      	cmp	r4, r3
 8020464:	dd0b      	ble.n	802047e <__ieee754_pow+0x12e>
 8020466:	2f00      	cmp	r7, #0
 8020468:	f2c0 8448 	blt.w	8020cfc <__ieee754_pow+0x9ac>
 802046c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8020470:	4658      	mov	r0, fp
 8020472:	4661      	mov	r1, ip
 8020474:	b013      	add	sp, #76	; 0x4c
 8020476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802047a:	2302      	movs	r3, #2
 802047c:	e7e2      	b.n	8020444 <__ieee754_pow+0xf4>
 802047e:	2f00      	cmp	r7, #0
 8020480:	f04f 0b00 	mov.w	fp, #0
 8020484:	f04f 0c00 	mov.w	ip, #0
 8020488:	daf2      	bge.n	8020470 <__ieee754_pow+0x120>
 802048a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 802048e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8020492:	e7ed      	b.n	8020470 <__ieee754_pow+0x120>
 8020494:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8020498:	d106      	bne.n	80204a8 <__ieee754_pow+0x158>
 802049a:	4642      	mov	r2, r8
 802049c:	464b      	mov	r3, r9
 802049e:	4640      	mov	r0, r8
 80204a0:	4649      	mov	r1, r9
 80204a2:	f7e0 f82d 	bl	8000500 <__aeabi_dmul>
 80204a6:	e770      	b.n	802038a <__ieee754_pow+0x3a>
 80204a8:	4b3a      	ldr	r3, [pc, #232]	; (8020594 <__ieee754_pow+0x244>)
 80204aa:	429f      	cmp	r7, r3
 80204ac:	d10a      	bne.n	80204c4 <__ieee754_pow+0x174>
 80204ae:	2d00      	cmp	r5, #0
 80204b0:	db08      	blt.n	80204c4 <__ieee754_pow+0x174>
 80204b2:	4640      	mov	r0, r8
 80204b4:	4649      	mov	r1, r9
 80204b6:	b013      	add	sp, #76	; 0x4c
 80204b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204bc:	f000 bc5e 	b.w	8020d7c <__ieee754_sqrt>
 80204c0:	2300      	movs	r3, #0
 80204c2:	9300      	str	r3, [sp, #0]
 80204c4:	4640      	mov	r0, r8
 80204c6:	4649      	mov	r1, r9
 80204c8:	f000 fd32 	bl	8020f30 <fabs>
 80204cc:	4683      	mov	fp, r0
 80204ce:	468c      	mov	ip, r1
 80204d0:	f1ba 0f00 	cmp.w	sl, #0
 80204d4:	d128      	bne.n	8020528 <__ieee754_pow+0x1d8>
 80204d6:	b124      	cbz	r4, 80204e2 <__ieee754_pow+0x192>
 80204d8:	4b2c      	ldr	r3, [pc, #176]	; (802058c <__ieee754_pow+0x23c>)
 80204da:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80204de:	429a      	cmp	r2, r3
 80204e0:	d122      	bne.n	8020528 <__ieee754_pow+0x1d8>
 80204e2:	2f00      	cmp	r7, #0
 80204e4:	da07      	bge.n	80204f6 <__ieee754_pow+0x1a6>
 80204e6:	465a      	mov	r2, fp
 80204e8:	4663      	mov	r3, ip
 80204ea:	4928      	ldr	r1, [pc, #160]	; (802058c <__ieee754_pow+0x23c>)
 80204ec:	2000      	movs	r0, #0
 80204ee:	f7e0 f931 	bl	8000754 <__aeabi_ddiv>
 80204f2:	4683      	mov	fp, r0
 80204f4:	468c      	mov	ip, r1
 80204f6:	2d00      	cmp	r5, #0
 80204f8:	daba      	bge.n	8020470 <__ieee754_pow+0x120>
 80204fa:	9b00      	ldr	r3, [sp, #0]
 80204fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8020500:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8020504:	4323      	orrs	r3, r4
 8020506:	d108      	bne.n	802051a <__ieee754_pow+0x1ca>
 8020508:	465a      	mov	r2, fp
 802050a:	4663      	mov	r3, ip
 802050c:	4658      	mov	r0, fp
 802050e:	4661      	mov	r1, ip
 8020510:	f7df fe3e 	bl	8000190 <__aeabi_dsub>
 8020514:	4602      	mov	r2, r0
 8020516:	460b      	mov	r3, r1
 8020518:	e790      	b.n	802043c <__ieee754_pow+0xec>
 802051a:	9b00      	ldr	r3, [sp, #0]
 802051c:	2b01      	cmp	r3, #1
 802051e:	d1a7      	bne.n	8020470 <__ieee754_pow+0x120>
 8020520:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8020524:	469c      	mov	ip, r3
 8020526:	e7a3      	b.n	8020470 <__ieee754_pow+0x120>
 8020528:	0feb      	lsrs	r3, r5, #31
 802052a:	3b01      	subs	r3, #1
 802052c:	930c      	str	r3, [sp, #48]	; 0x30
 802052e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020530:	9b00      	ldr	r3, [sp, #0]
 8020532:	4313      	orrs	r3, r2
 8020534:	d104      	bne.n	8020540 <__ieee754_pow+0x1f0>
 8020536:	4642      	mov	r2, r8
 8020538:	464b      	mov	r3, r9
 802053a:	4640      	mov	r0, r8
 802053c:	4649      	mov	r1, r9
 802053e:	e7e7      	b.n	8020510 <__ieee754_pow+0x1c0>
 8020540:	4b15      	ldr	r3, [pc, #84]	; (8020598 <__ieee754_pow+0x248>)
 8020542:	429e      	cmp	r6, r3
 8020544:	f340 80f6 	ble.w	8020734 <__ieee754_pow+0x3e4>
 8020548:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802054c:	429e      	cmp	r6, r3
 802054e:	4b10      	ldr	r3, [pc, #64]	; (8020590 <__ieee754_pow+0x240>)
 8020550:	dd09      	ble.n	8020566 <__ieee754_pow+0x216>
 8020552:	429c      	cmp	r4, r3
 8020554:	dc0c      	bgt.n	8020570 <__ieee754_pow+0x220>
 8020556:	2f00      	cmp	r7, #0
 8020558:	da0c      	bge.n	8020574 <__ieee754_pow+0x224>
 802055a:	2000      	movs	r0, #0
 802055c:	b013      	add	sp, #76	; 0x4c
 802055e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020562:	f000 bce0 	b.w	8020f26 <__math_oflow>
 8020566:	429c      	cmp	r4, r3
 8020568:	dbf5      	blt.n	8020556 <__ieee754_pow+0x206>
 802056a:	4b08      	ldr	r3, [pc, #32]	; (802058c <__ieee754_pow+0x23c>)
 802056c:	429c      	cmp	r4, r3
 802056e:	dd15      	ble.n	802059c <__ieee754_pow+0x24c>
 8020570:	2f00      	cmp	r7, #0
 8020572:	dcf2      	bgt.n	802055a <__ieee754_pow+0x20a>
 8020574:	2000      	movs	r0, #0
 8020576:	b013      	add	sp, #76	; 0x4c
 8020578:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802057c:	f000 bcce 	b.w	8020f1c <__math_uflow>
 8020580:	fff00000 	.word	0xfff00000
 8020584:	7ff00000 	.word	0x7ff00000
 8020588:	433fffff 	.word	0x433fffff
 802058c:	3ff00000 	.word	0x3ff00000
 8020590:	3fefffff 	.word	0x3fefffff
 8020594:	3fe00000 	.word	0x3fe00000
 8020598:	41e00000 	.word	0x41e00000
 802059c:	4661      	mov	r1, ip
 802059e:	4b60      	ldr	r3, [pc, #384]	; (8020720 <__ieee754_pow+0x3d0>)
 80205a0:	2200      	movs	r2, #0
 80205a2:	4658      	mov	r0, fp
 80205a4:	f7df fdf4 	bl	8000190 <__aeabi_dsub>
 80205a8:	a355      	add	r3, pc, #340	; (adr r3, 8020700 <__ieee754_pow+0x3b0>)
 80205aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205ae:	4604      	mov	r4, r0
 80205b0:	460d      	mov	r5, r1
 80205b2:	f7df ffa5 	bl	8000500 <__aeabi_dmul>
 80205b6:	a354      	add	r3, pc, #336	; (adr r3, 8020708 <__ieee754_pow+0x3b8>)
 80205b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205bc:	4606      	mov	r6, r0
 80205be:	460f      	mov	r7, r1
 80205c0:	4620      	mov	r0, r4
 80205c2:	4629      	mov	r1, r5
 80205c4:	f7df ff9c 	bl	8000500 <__aeabi_dmul>
 80205c8:	4b56      	ldr	r3, [pc, #344]	; (8020724 <__ieee754_pow+0x3d4>)
 80205ca:	4682      	mov	sl, r0
 80205cc:	468b      	mov	fp, r1
 80205ce:	2200      	movs	r2, #0
 80205d0:	4620      	mov	r0, r4
 80205d2:	4629      	mov	r1, r5
 80205d4:	f7df ff94 	bl	8000500 <__aeabi_dmul>
 80205d8:	4602      	mov	r2, r0
 80205da:	460b      	mov	r3, r1
 80205dc:	a14c      	add	r1, pc, #304	; (adr r1, 8020710 <__ieee754_pow+0x3c0>)
 80205de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80205e2:	f7df fdd5 	bl	8000190 <__aeabi_dsub>
 80205e6:	4622      	mov	r2, r4
 80205e8:	462b      	mov	r3, r5
 80205ea:	f7df ff89 	bl	8000500 <__aeabi_dmul>
 80205ee:	4602      	mov	r2, r0
 80205f0:	460b      	mov	r3, r1
 80205f2:	2000      	movs	r0, #0
 80205f4:	494c      	ldr	r1, [pc, #304]	; (8020728 <__ieee754_pow+0x3d8>)
 80205f6:	f7df fdcb 	bl	8000190 <__aeabi_dsub>
 80205fa:	4622      	mov	r2, r4
 80205fc:	462b      	mov	r3, r5
 80205fe:	4680      	mov	r8, r0
 8020600:	4689      	mov	r9, r1
 8020602:	4620      	mov	r0, r4
 8020604:	4629      	mov	r1, r5
 8020606:	f7df ff7b 	bl	8000500 <__aeabi_dmul>
 802060a:	4602      	mov	r2, r0
 802060c:	460b      	mov	r3, r1
 802060e:	4640      	mov	r0, r8
 8020610:	4649      	mov	r1, r9
 8020612:	f7df ff75 	bl	8000500 <__aeabi_dmul>
 8020616:	a340      	add	r3, pc, #256	; (adr r3, 8020718 <__ieee754_pow+0x3c8>)
 8020618:	e9d3 2300 	ldrd	r2, r3, [r3]
 802061c:	f7df ff70 	bl	8000500 <__aeabi_dmul>
 8020620:	4602      	mov	r2, r0
 8020622:	460b      	mov	r3, r1
 8020624:	4650      	mov	r0, sl
 8020626:	4659      	mov	r1, fp
 8020628:	f7df fdb2 	bl	8000190 <__aeabi_dsub>
 802062c:	4602      	mov	r2, r0
 802062e:	460b      	mov	r3, r1
 8020630:	4604      	mov	r4, r0
 8020632:	460d      	mov	r5, r1
 8020634:	4630      	mov	r0, r6
 8020636:	4639      	mov	r1, r7
 8020638:	f7df fdac 	bl	8000194 <__adddf3>
 802063c:	f04f 0a00 	mov.w	sl, #0
 8020640:	4632      	mov	r2, r6
 8020642:	463b      	mov	r3, r7
 8020644:	4650      	mov	r0, sl
 8020646:	468b      	mov	fp, r1
 8020648:	f7df fda2 	bl	8000190 <__aeabi_dsub>
 802064c:	4602      	mov	r2, r0
 802064e:	460b      	mov	r3, r1
 8020650:	4620      	mov	r0, r4
 8020652:	4629      	mov	r1, r5
 8020654:	f7df fd9c 	bl	8000190 <__aeabi_dsub>
 8020658:	9b00      	ldr	r3, [sp, #0]
 802065a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802065c:	3b01      	subs	r3, #1
 802065e:	4313      	orrs	r3, r2
 8020660:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020664:	bf0c      	ite	eq
 8020666:	4b31      	ldreq	r3, [pc, #196]	; (802072c <__ieee754_pow+0x3dc>)
 8020668:	4b2d      	ldrne	r3, [pc, #180]	; (8020720 <__ieee754_pow+0x3d0>)
 802066a:	2600      	movs	r6, #0
 802066c:	2200      	movs	r2, #0
 802066e:	e9cd 2300 	strd	r2, r3, [sp]
 8020672:	4604      	mov	r4, r0
 8020674:	460d      	mov	r5, r1
 8020676:	4632      	mov	r2, r6
 8020678:	463b      	mov	r3, r7
 802067a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802067e:	f7df fd87 	bl	8000190 <__aeabi_dsub>
 8020682:	4652      	mov	r2, sl
 8020684:	465b      	mov	r3, fp
 8020686:	f7df ff3b 	bl	8000500 <__aeabi_dmul>
 802068a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802068e:	4680      	mov	r8, r0
 8020690:	4689      	mov	r9, r1
 8020692:	4620      	mov	r0, r4
 8020694:	4629      	mov	r1, r5
 8020696:	f7df ff33 	bl	8000500 <__aeabi_dmul>
 802069a:	4602      	mov	r2, r0
 802069c:	460b      	mov	r3, r1
 802069e:	4640      	mov	r0, r8
 80206a0:	4649      	mov	r1, r9
 80206a2:	f7df fd77 	bl	8000194 <__adddf3>
 80206a6:	4632      	mov	r2, r6
 80206a8:	463b      	mov	r3, r7
 80206aa:	4680      	mov	r8, r0
 80206ac:	4689      	mov	r9, r1
 80206ae:	4650      	mov	r0, sl
 80206b0:	4659      	mov	r1, fp
 80206b2:	f7df ff25 	bl	8000500 <__aeabi_dmul>
 80206b6:	460b      	mov	r3, r1
 80206b8:	4604      	mov	r4, r0
 80206ba:	460d      	mov	r5, r1
 80206bc:	4602      	mov	r2, r0
 80206be:	4649      	mov	r1, r9
 80206c0:	4640      	mov	r0, r8
 80206c2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80206c6:	f7df fd65 	bl	8000194 <__adddf3>
 80206ca:	4b19      	ldr	r3, [pc, #100]	; (8020730 <__ieee754_pow+0x3e0>)
 80206cc:	4299      	cmp	r1, r3
 80206ce:	4682      	mov	sl, r0
 80206d0:	460f      	mov	r7, r1
 80206d2:	460e      	mov	r6, r1
 80206d4:	f340 82e7 	ble.w	8020ca6 <__ieee754_pow+0x956>
 80206d8:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80206dc:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80206e0:	4303      	orrs	r3, r0
 80206e2:	f000 81e1 	beq.w	8020aa8 <__ieee754_pow+0x758>
 80206e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80206ea:	2200      	movs	r2, #0
 80206ec:	2300      	movs	r3, #0
 80206ee:	f7e0 f979 	bl	80009e4 <__aeabi_dcmplt>
 80206f2:	3800      	subs	r0, #0
 80206f4:	bf18      	it	ne
 80206f6:	2001      	movne	r0, #1
 80206f8:	e730      	b.n	802055c <__ieee754_pow+0x20c>
 80206fa:	bf00      	nop
 80206fc:	f3af 8000 	nop.w
 8020700:	60000000 	.word	0x60000000
 8020704:	3ff71547 	.word	0x3ff71547
 8020708:	f85ddf44 	.word	0xf85ddf44
 802070c:	3e54ae0b 	.word	0x3e54ae0b
 8020710:	55555555 	.word	0x55555555
 8020714:	3fd55555 	.word	0x3fd55555
 8020718:	652b82fe 	.word	0x652b82fe
 802071c:	3ff71547 	.word	0x3ff71547
 8020720:	3ff00000 	.word	0x3ff00000
 8020724:	3fd00000 	.word	0x3fd00000
 8020728:	3fe00000 	.word	0x3fe00000
 802072c:	bff00000 	.word	0xbff00000
 8020730:	408fffff 	.word	0x408fffff
 8020734:	4bd2      	ldr	r3, [pc, #840]	; (8020a80 <__ieee754_pow+0x730>)
 8020736:	402b      	ands	r3, r5
 8020738:	2200      	movs	r2, #0
 802073a:	b943      	cbnz	r3, 802074e <__ieee754_pow+0x3fe>
 802073c:	4658      	mov	r0, fp
 802073e:	4bd1      	ldr	r3, [pc, #836]	; (8020a84 <__ieee754_pow+0x734>)
 8020740:	4661      	mov	r1, ip
 8020742:	f7df fedd 	bl	8000500 <__aeabi_dmul>
 8020746:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802074a:	4683      	mov	fp, r0
 802074c:	460c      	mov	r4, r1
 802074e:	1523      	asrs	r3, r4, #20
 8020750:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8020754:	4413      	add	r3, r2
 8020756:	930b      	str	r3, [sp, #44]	; 0x2c
 8020758:	4bcb      	ldr	r3, [pc, #812]	; (8020a88 <__ieee754_pow+0x738>)
 802075a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802075e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8020762:	429c      	cmp	r4, r3
 8020764:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8020768:	dd08      	ble.n	802077c <__ieee754_pow+0x42c>
 802076a:	4bc8      	ldr	r3, [pc, #800]	; (8020a8c <__ieee754_pow+0x73c>)
 802076c:	429c      	cmp	r4, r3
 802076e:	f340 8199 	ble.w	8020aa4 <__ieee754_pow+0x754>
 8020772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020774:	3301      	adds	r3, #1
 8020776:	930b      	str	r3, [sp, #44]	; 0x2c
 8020778:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802077c:	2600      	movs	r6, #0
 802077e:	00f3      	lsls	r3, r6, #3
 8020780:	930d      	str	r3, [sp, #52]	; 0x34
 8020782:	4bc3      	ldr	r3, [pc, #780]	; (8020a90 <__ieee754_pow+0x740>)
 8020784:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8020788:	e9d3 3400 	ldrd	r3, r4, [r3]
 802078c:	4658      	mov	r0, fp
 802078e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8020792:	461a      	mov	r2, r3
 8020794:	4629      	mov	r1, r5
 8020796:	4623      	mov	r3, r4
 8020798:	f7df fcfa 	bl	8000190 <__aeabi_dsub>
 802079c:	46da      	mov	sl, fp
 802079e:	4652      	mov	r2, sl
 80207a0:	462b      	mov	r3, r5
 80207a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80207a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80207aa:	f7df fcf3 	bl	8000194 <__adddf3>
 80207ae:	4602      	mov	r2, r0
 80207b0:	460b      	mov	r3, r1
 80207b2:	2000      	movs	r0, #0
 80207b4:	49b7      	ldr	r1, [pc, #732]	; (8020a94 <__ieee754_pow+0x744>)
 80207b6:	f7df ffcd 	bl	8000754 <__aeabi_ddiv>
 80207ba:	4602      	mov	r2, r0
 80207bc:	460b      	mov	r3, r1
 80207be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80207c2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80207c6:	f7df fe9b 	bl	8000500 <__aeabi_dmul>
 80207ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80207ce:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80207d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80207d6:	2300      	movs	r3, #0
 80207d8:	9304      	str	r3, [sp, #16]
 80207da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80207de:	46ab      	mov	fp, r5
 80207e0:	106d      	asrs	r5, r5, #1
 80207e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80207e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80207ea:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80207ee:	2200      	movs	r2, #0
 80207f0:	4640      	mov	r0, r8
 80207f2:	4649      	mov	r1, r9
 80207f4:	4614      	mov	r4, r2
 80207f6:	461d      	mov	r5, r3
 80207f8:	f7df fe82 	bl	8000500 <__aeabi_dmul>
 80207fc:	4602      	mov	r2, r0
 80207fe:	460b      	mov	r3, r1
 8020800:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020804:	f7df fcc4 	bl	8000190 <__aeabi_dsub>
 8020808:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802080c:	4606      	mov	r6, r0
 802080e:	460f      	mov	r7, r1
 8020810:	4620      	mov	r0, r4
 8020812:	4629      	mov	r1, r5
 8020814:	f7df fcbc 	bl	8000190 <__aeabi_dsub>
 8020818:	4602      	mov	r2, r0
 802081a:	460b      	mov	r3, r1
 802081c:	4650      	mov	r0, sl
 802081e:	4659      	mov	r1, fp
 8020820:	f7df fcb6 	bl	8000190 <__aeabi_dsub>
 8020824:	4642      	mov	r2, r8
 8020826:	464b      	mov	r3, r9
 8020828:	f7df fe6a 	bl	8000500 <__aeabi_dmul>
 802082c:	4602      	mov	r2, r0
 802082e:	460b      	mov	r3, r1
 8020830:	4630      	mov	r0, r6
 8020832:	4639      	mov	r1, r7
 8020834:	f7df fcac 	bl	8000190 <__aeabi_dsub>
 8020838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802083c:	f7df fe60 	bl	8000500 <__aeabi_dmul>
 8020840:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020844:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8020848:	4610      	mov	r0, r2
 802084a:	4619      	mov	r1, r3
 802084c:	f7df fe58 	bl	8000500 <__aeabi_dmul>
 8020850:	a379      	add	r3, pc, #484	; (adr r3, 8020a38 <__ieee754_pow+0x6e8>)
 8020852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020856:	4604      	mov	r4, r0
 8020858:	460d      	mov	r5, r1
 802085a:	f7df fe51 	bl	8000500 <__aeabi_dmul>
 802085e:	a378      	add	r3, pc, #480	; (adr r3, 8020a40 <__ieee754_pow+0x6f0>)
 8020860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020864:	f7df fc96 	bl	8000194 <__adddf3>
 8020868:	4622      	mov	r2, r4
 802086a:	462b      	mov	r3, r5
 802086c:	f7df fe48 	bl	8000500 <__aeabi_dmul>
 8020870:	a375      	add	r3, pc, #468	; (adr r3, 8020a48 <__ieee754_pow+0x6f8>)
 8020872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020876:	f7df fc8d 	bl	8000194 <__adddf3>
 802087a:	4622      	mov	r2, r4
 802087c:	462b      	mov	r3, r5
 802087e:	f7df fe3f 	bl	8000500 <__aeabi_dmul>
 8020882:	a373      	add	r3, pc, #460	; (adr r3, 8020a50 <__ieee754_pow+0x700>)
 8020884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020888:	f7df fc84 	bl	8000194 <__adddf3>
 802088c:	4622      	mov	r2, r4
 802088e:	462b      	mov	r3, r5
 8020890:	f7df fe36 	bl	8000500 <__aeabi_dmul>
 8020894:	a370      	add	r3, pc, #448	; (adr r3, 8020a58 <__ieee754_pow+0x708>)
 8020896:	e9d3 2300 	ldrd	r2, r3, [r3]
 802089a:	f7df fc7b 	bl	8000194 <__adddf3>
 802089e:	4622      	mov	r2, r4
 80208a0:	462b      	mov	r3, r5
 80208a2:	f7df fe2d 	bl	8000500 <__aeabi_dmul>
 80208a6:	a36e      	add	r3, pc, #440	; (adr r3, 8020a60 <__ieee754_pow+0x710>)
 80208a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208ac:	f7df fc72 	bl	8000194 <__adddf3>
 80208b0:	4622      	mov	r2, r4
 80208b2:	4606      	mov	r6, r0
 80208b4:	460f      	mov	r7, r1
 80208b6:	462b      	mov	r3, r5
 80208b8:	4620      	mov	r0, r4
 80208ba:	4629      	mov	r1, r5
 80208bc:	f7df fe20 	bl	8000500 <__aeabi_dmul>
 80208c0:	4602      	mov	r2, r0
 80208c2:	460b      	mov	r3, r1
 80208c4:	4630      	mov	r0, r6
 80208c6:	4639      	mov	r1, r7
 80208c8:	f7df fe1a 	bl	8000500 <__aeabi_dmul>
 80208cc:	4642      	mov	r2, r8
 80208ce:	4604      	mov	r4, r0
 80208d0:	460d      	mov	r5, r1
 80208d2:	464b      	mov	r3, r9
 80208d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80208d8:	f7df fc5c 	bl	8000194 <__adddf3>
 80208dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80208e0:	f7df fe0e 	bl	8000500 <__aeabi_dmul>
 80208e4:	4622      	mov	r2, r4
 80208e6:	462b      	mov	r3, r5
 80208e8:	f7df fc54 	bl	8000194 <__adddf3>
 80208ec:	4642      	mov	r2, r8
 80208ee:	4606      	mov	r6, r0
 80208f0:	460f      	mov	r7, r1
 80208f2:	464b      	mov	r3, r9
 80208f4:	4640      	mov	r0, r8
 80208f6:	4649      	mov	r1, r9
 80208f8:	f7df fe02 	bl	8000500 <__aeabi_dmul>
 80208fc:	4b66      	ldr	r3, [pc, #408]	; (8020a98 <__ieee754_pow+0x748>)
 80208fe:	2200      	movs	r2, #0
 8020900:	4682      	mov	sl, r0
 8020902:	468b      	mov	fp, r1
 8020904:	f7df fc46 	bl	8000194 <__adddf3>
 8020908:	4632      	mov	r2, r6
 802090a:	463b      	mov	r3, r7
 802090c:	f7df fc42 	bl	8000194 <__adddf3>
 8020910:	2400      	movs	r4, #0
 8020912:	460d      	mov	r5, r1
 8020914:	4622      	mov	r2, r4
 8020916:	460b      	mov	r3, r1
 8020918:	4640      	mov	r0, r8
 802091a:	4649      	mov	r1, r9
 802091c:	f7df fdf0 	bl	8000500 <__aeabi_dmul>
 8020920:	4b5d      	ldr	r3, [pc, #372]	; (8020a98 <__ieee754_pow+0x748>)
 8020922:	4680      	mov	r8, r0
 8020924:	4689      	mov	r9, r1
 8020926:	2200      	movs	r2, #0
 8020928:	4620      	mov	r0, r4
 802092a:	4629      	mov	r1, r5
 802092c:	f7df fc30 	bl	8000190 <__aeabi_dsub>
 8020930:	4652      	mov	r2, sl
 8020932:	465b      	mov	r3, fp
 8020934:	f7df fc2c 	bl	8000190 <__aeabi_dsub>
 8020938:	4602      	mov	r2, r0
 802093a:	460b      	mov	r3, r1
 802093c:	4630      	mov	r0, r6
 802093e:	4639      	mov	r1, r7
 8020940:	f7df fc26 	bl	8000190 <__aeabi_dsub>
 8020944:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020948:	f7df fdda 	bl	8000500 <__aeabi_dmul>
 802094c:	4622      	mov	r2, r4
 802094e:	4606      	mov	r6, r0
 8020950:	460f      	mov	r7, r1
 8020952:	462b      	mov	r3, r5
 8020954:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020958:	f7df fdd2 	bl	8000500 <__aeabi_dmul>
 802095c:	4602      	mov	r2, r0
 802095e:	460b      	mov	r3, r1
 8020960:	4630      	mov	r0, r6
 8020962:	4639      	mov	r1, r7
 8020964:	f7df fc16 	bl	8000194 <__adddf3>
 8020968:	4606      	mov	r6, r0
 802096a:	460f      	mov	r7, r1
 802096c:	4602      	mov	r2, r0
 802096e:	460b      	mov	r3, r1
 8020970:	4640      	mov	r0, r8
 8020972:	4649      	mov	r1, r9
 8020974:	f7df fc0e 	bl	8000194 <__adddf3>
 8020978:	2400      	movs	r4, #0
 802097a:	a33b      	add	r3, pc, #236	; (adr r3, 8020a68 <__ieee754_pow+0x718>)
 802097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020980:	4620      	mov	r0, r4
 8020982:	460d      	mov	r5, r1
 8020984:	f7df fdbc 	bl	8000500 <__aeabi_dmul>
 8020988:	4642      	mov	r2, r8
 802098a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 802098e:	464b      	mov	r3, r9
 8020990:	4620      	mov	r0, r4
 8020992:	4629      	mov	r1, r5
 8020994:	f7df fbfc 	bl	8000190 <__aeabi_dsub>
 8020998:	4602      	mov	r2, r0
 802099a:	460b      	mov	r3, r1
 802099c:	4630      	mov	r0, r6
 802099e:	4639      	mov	r1, r7
 80209a0:	f7df fbf6 	bl	8000190 <__aeabi_dsub>
 80209a4:	a332      	add	r3, pc, #200	; (adr r3, 8020a70 <__ieee754_pow+0x720>)
 80209a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209aa:	f7df fda9 	bl	8000500 <__aeabi_dmul>
 80209ae:	a332      	add	r3, pc, #200	; (adr r3, 8020a78 <__ieee754_pow+0x728>)
 80209b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209b4:	4606      	mov	r6, r0
 80209b6:	460f      	mov	r7, r1
 80209b8:	4620      	mov	r0, r4
 80209ba:	4629      	mov	r1, r5
 80209bc:	f7df fda0 	bl	8000500 <__aeabi_dmul>
 80209c0:	4602      	mov	r2, r0
 80209c2:	460b      	mov	r3, r1
 80209c4:	4630      	mov	r0, r6
 80209c6:	4639      	mov	r1, r7
 80209c8:	f7df fbe4 	bl	8000194 <__adddf3>
 80209cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80209ce:	4b33      	ldr	r3, [pc, #204]	; (8020a9c <__ieee754_pow+0x74c>)
 80209d0:	4413      	add	r3, r2
 80209d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209d6:	f7df fbdd 	bl	8000194 <__adddf3>
 80209da:	4680      	mov	r8, r0
 80209dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80209de:	4689      	mov	r9, r1
 80209e0:	f7df fd24 	bl	800042c <__aeabi_i2d>
 80209e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80209e6:	4b2e      	ldr	r3, [pc, #184]	; (8020aa0 <__ieee754_pow+0x750>)
 80209e8:	4413      	add	r3, r2
 80209ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 80209ee:	4604      	mov	r4, r0
 80209f0:	460d      	mov	r5, r1
 80209f2:	4642      	mov	r2, r8
 80209f4:	464b      	mov	r3, r9
 80209f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80209fa:	f7df fbcb 	bl	8000194 <__adddf3>
 80209fe:	4632      	mov	r2, r6
 8020a00:	463b      	mov	r3, r7
 8020a02:	f7df fbc7 	bl	8000194 <__adddf3>
 8020a06:	4622      	mov	r2, r4
 8020a08:	462b      	mov	r3, r5
 8020a0a:	f7df fbc3 	bl	8000194 <__adddf3>
 8020a0e:	f04f 0a00 	mov.w	sl, #0
 8020a12:	4622      	mov	r2, r4
 8020a14:	462b      	mov	r3, r5
 8020a16:	4650      	mov	r0, sl
 8020a18:	468b      	mov	fp, r1
 8020a1a:	f7df fbb9 	bl	8000190 <__aeabi_dsub>
 8020a1e:	4632      	mov	r2, r6
 8020a20:	463b      	mov	r3, r7
 8020a22:	f7df fbb5 	bl	8000190 <__aeabi_dsub>
 8020a26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020a2a:	f7df fbb1 	bl	8000190 <__aeabi_dsub>
 8020a2e:	4602      	mov	r2, r0
 8020a30:	460b      	mov	r3, r1
 8020a32:	4640      	mov	r0, r8
 8020a34:	4649      	mov	r1, r9
 8020a36:	e60d      	b.n	8020654 <__ieee754_pow+0x304>
 8020a38:	4a454eef 	.word	0x4a454eef
 8020a3c:	3fca7e28 	.word	0x3fca7e28
 8020a40:	93c9db65 	.word	0x93c9db65
 8020a44:	3fcd864a 	.word	0x3fcd864a
 8020a48:	a91d4101 	.word	0xa91d4101
 8020a4c:	3fd17460 	.word	0x3fd17460
 8020a50:	518f264d 	.word	0x518f264d
 8020a54:	3fd55555 	.word	0x3fd55555
 8020a58:	db6fabff 	.word	0xdb6fabff
 8020a5c:	3fdb6db6 	.word	0x3fdb6db6
 8020a60:	33333303 	.word	0x33333303
 8020a64:	3fe33333 	.word	0x3fe33333
 8020a68:	e0000000 	.word	0xe0000000
 8020a6c:	3feec709 	.word	0x3feec709
 8020a70:	dc3a03fd 	.word	0xdc3a03fd
 8020a74:	3feec709 	.word	0x3feec709
 8020a78:	145b01f5 	.word	0x145b01f5
 8020a7c:	be3e2fe0 	.word	0xbe3e2fe0
 8020a80:	7ff00000 	.word	0x7ff00000
 8020a84:	43400000 	.word	0x43400000
 8020a88:	0003988e 	.word	0x0003988e
 8020a8c:	000bb679 	.word	0x000bb679
 8020a90:	08022108 	.word	0x08022108
 8020a94:	3ff00000 	.word	0x3ff00000
 8020a98:	40080000 	.word	0x40080000
 8020a9c:	08022128 	.word	0x08022128
 8020aa0:	08022118 	.word	0x08022118
 8020aa4:	2601      	movs	r6, #1
 8020aa6:	e66a      	b.n	802077e <__ieee754_pow+0x42e>
 8020aa8:	a39d      	add	r3, pc, #628	; (adr r3, 8020d20 <__ieee754_pow+0x9d0>)
 8020aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020aae:	4640      	mov	r0, r8
 8020ab0:	4649      	mov	r1, r9
 8020ab2:	f7df fb6f 	bl	8000194 <__adddf3>
 8020ab6:	4622      	mov	r2, r4
 8020ab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8020abc:	462b      	mov	r3, r5
 8020abe:	4650      	mov	r0, sl
 8020ac0:	4639      	mov	r1, r7
 8020ac2:	f7df fb65 	bl	8000190 <__aeabi_dsub>
 8020ac6:	4602      	mov	r2, r0
 8020ac8:	460b      	mov	r3, r1
 8020aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020ace:	f7df ffa7 	bl	8000a20 <__aeabi_dcmpgt>
 8020ad2:	2800      	cmp	r0, #0
 8020ad4:	f47f ae07 	bne.w	80206e6 <__ieee754_pow+0x396>
 8020ad8:	4aa3      	ldr	r2, [pc, #652]	; (8020d68 <__ieee754_pow+0xa18>)
 8020ada:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8020ade:	4293      	cmp	r3, r2
 8020ae0:	f340 8101 	ble.w	8020ce6 <__ieee754_pow+0x996>
 8020ae4:	151b      	asrs	r3, r3, #20
 8020ae6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8020aea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8020aee:	fa4a f303 	asr.w	r3, sl, r3
 8020af2:	4433      	add	r3, r6
 8020af4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8020af8:	4f9c      	ldr	r7, [pc, #624]	; (8020d6c <__ieee754_pow+0xa1c>)
 8020afa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8020afe:	4117      	asrs	r7, r2
 8020b00:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8020b04:	2000      	movs	r0, #0
 8020b06:	ea23 0107 	bic.w	r1, r3, r7
 8020b0a:	f1c2 0214 	rsb	r2, r2, #20
 8020b0e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8020b12:	fa4a fa02 	asr.w	sl, sl, r2
 8020b16:	2e00      	cmp	r6, #0
 8020b18:	4602      	mov	r2, r0
 8020b1a:	460b      	mov	r3, r1
 8020b1c:	4620      	mov	r0, r4
 8020b1e:	4629      	mov	r1, r5
 8020b20:	bfb8      	it	lt
 8020b22:	f1ca 0a00 	rsblt	sl, sl, #0
 8020b26:	f7df fb33 	bl	8000190 <__aeabi_dsub>
 8020b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020b2e:	4642      	mov	r2, r8
 8020b30:	464b      	mov	r3, r9
 8020b32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020b36:	f7df fb2d 	bl	8000194 <__adddf3>
 8020b3a:	2400      	movs	r4, #0
 8020b3c:	a37a      	add	r3, pc, #488	; (adr r3, 8020d28 <__ieee754_pow+0x9d8>)
 8020b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b42:	4620      	mov	r0, r4
 8020b44:	460d      	mov	r5, r1
 8020b46:	f7df fcdb 	bl	8000500 <__aeabi_dmul>
 8020b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020b4e:	4606      	mov	r6, r0
 8020b50:	460f      	mov	r7, r1
 8020b52:	4620      	mov	r0, r4
 8020b54:	4629      	mov	r1, r5
 8020b56:	f7df fb1b 	bl	8000190 <__aeabi_dsub>
 8020b5a:	4602      	mov	r2, r0
 8020b5c:	460b      	mov	r3, r1
 8020b5e:	4640      	mov	r0, r8
 8020b60:	4649      	mov	r1, r9
 8020b62:	f7df fb15 	bl	8000190 <__aeabi_dsub>
 8020b66:	a372      	add	r3, pc, #456	; (adr r3, 8020d30 <__ieee754_pow+0x9e0>)
 8020b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b6c:	f7df fcc8 	bl	8000500 <__aeabi_dmul>
 8020b70:	a371      	add	r3, pc, #452	; (adr r3, 8020d38 <__ieee754_pow+0x9e8>)
 8020b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b76:	4680      	mov	r8, r0
 8020b78:	4689      	mov	r9, r1
 8020b7a:	4620      	mov	r0, r4
 8020b7c:	4629      	mov	r1, r5
 8020b7e:	f7df fcbf 	bl	8000500 <__aeabi_dmul>
 8020b82:	4602      	mov	r2, r0
 8020b84:	460b      	mov	r3, r1
 8020b86:	4640      	mov	r0, r8
 8020b88:	4649      	mov	r1, r9
 8020b8a:	f7df fb03 	bl	8000194 <__adddf3>
 8020b8e:	4604      	mov	r4, r0
 8020b90:	460d      	mov	r5, r1
 8020b92:	4602      	mov	r2, r0
 8020b94:	460b      	mov	r3, r1
 8020b96:	4630      	mov	r0, r6
 8020b98:	4639      	mov	r1, r7
 8020b9a:	f7df fafb 	bl	8000194 <__adddf3>
 8020b9e:	4632      	mov	r2, r6
 8020ba0:	463b      	mov	r3, r7
 8020ba2:	4680      	mov	r8, r0
 8020ba4:	4689      	mov	r9, r1
 8020ba6:	f7df faf3 	bl	8000190 <__aeabi_dsub>
 8020baa:	4602      	mov	r2, r0
 8020bac:	460b      	mov	r3, r1
 8020bae:	4620      	mov	r0, r4
 8020bb0:	4629      	mov	r1, r5
 8020bb2:	f7df faed 	bl	8000190 <__aeabi_dsub>
 8020bb6:	4642      	mov	r2, r8
 8020bb8:	4606      	mov	r6, r0
 8020bba:	460f      	mov	r7, r1
 8020bbc:	464b      	mov	r3, r9
 8020bbe:	4640      	mov	r0, r8
 8020bc0:	4649      	mov	r1, r9
 8020bc2:	f7df fc9d 	bl	8000500 <__aeabi_dmul>
 8020bc6:	a35e      	add	r3, pc, #376	; (adr r3, 8020d40 <__ieee754_pow+0x9f0>)
 8020bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bcc:	4604      	mov	r4, r0
 8020bce:	460d      	mov	r5, r1
 8020bd0:	f7df fc96 	bl	8000500 <__aeabi_dmul>
 8020bd4:	a35c      	add	r3, pc, #368	; (adr r3, 8020d48 <__ieee754_pow+0x9f8>)
 8020bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bda:	f7df fad9 	bl	8000190 <__aeabi_dsub>
 8020bde:	4622      	mov	r2, r4
 8020be0:	462b      	mov	r3, r5
 8020be2:	f7df fc8d 	bl	8000500 <__aeabi_dmul>
 8020be6:	a35a      	add	r3, pc, #360	; (adr r3, 8020d50 <__ieee754_pow+0xa00>)
 8020be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bec:	f7df fad2 	bl	8000194 <__adddf3>
 8020bf0:	4622      	mov	r2, r4
 8020bf2:	462b      	mov	r3, r5
 8020bf4:	f7df fc84 	bl	8000500 <__aeabi_dmul>
 8020bf8:	a357      	add	r3, pc, #348	; (adr r3, 8020d58 <__ieee754_pow+0xa08>)
 8020bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bfe:	f7df fac7 	bl	8000190 <__aeabi_dsub>
 8020c02:	4622      	mov	r2, r4
 8020c04:	462b      	mov	r3, r5
 8020c06:	f7df fc7b 	bl	8000500 <__aeabi_dmul>
 8020c0a:	a355      	add	r3, pc, #340	; (adr r3, 8020d60 <__ieee754_pow+0xa10>)
 8020c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020c10:	f7df fac0 	bl	8000194 <__adddf3>
 8020c14:	4622      	mov	r2, r4
 8020c16:	462b      	mov	r3, r5
 8020c18:	f7df fc72 	bl	8000500 <__aeabi_dmul>
 8020c1c:	4602      	mov	r2, r0
 8020c1e:	460b      	mov	r3, r1
 8020c20:	4640      	mov	r0, r8
 8020c22:	4649      	mov	r1, r9
 8020c24:	f7df fab4 	bl	8000190 <__aeabi_dsub>
 8020c28:	4604      	mov	r4, r0
 8020c2a:	460d      	mov	r5, r1
 8020c2c:	4602      	mov	r2, r0
 8020c2e:	460b      	mov	r3, r1
 8020c30:	4640      	mov	r0, r8
 8020c32:	4649      	mov	r1, r9
 8020c34:	f7df fc64 	bl	8000500 <__aeabi_dmul>
 8020c38:	2200      	movs	r2, #0
 8020c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020c3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8020c42:	4620      	mov	r0, r4
 8020c44:	4629      	mov	r1, r5
 8020c46:	f7df faa3 	bl	8000190 <__aeabi_dsub>
 8020c4a:	4602      	mov	r2, r0
 8020c4c:	460b      	mov	r3, r1
 8020c4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020c52:	f7df fd7f 	bl	8000754 <__aeabi_ddiv>
 8020c56:	4632      	mov	r2, r6
 8020c58:	4604      	mov	r4, r0
 8020c5a:	460d      	mov	r5, r1
 8020c5c:	463b      	mov	r3, r7
 8020c5e:	4640      	mov	r0, r8
 8020c60:	4649      	mov	r1, r9
 8020c62:	f7df fc4d 	bl	8000500 <__aeabi_dmul>
 8020c66:	4632      	mov	r2, r6
 8020c68:	463b      	mov	r3, r7
 8020c6a:	f7df fa93 	bl	8000194 <__adddf3>
 8020c6e:	4602      	mov	r2, r0
 8020c70:	460b      	mov	r3, r1
 8020c72:	4620      	mov	r0, r4
 8020c74:	4629      	mov	r1, r5
 8020c76:	f7df fa8b 	bl	8000190 <__aeabi_dsub>
 8020c7a:	4642      	mov	r2, r8
 8020c7c:	464b      	mov	r3, r9
 8020c7e:	f7df fa87 	bl	8000190 <__aeabi_dsub>
 8020c82:	4602      	mov	r2, r0
 8020c84:	460b      	mov	r3, r1
 8020c86:	2000      	movs	r0, #0
 8020c88:	4939      	ldr	r1, [pc, #228]	; (8020d70 <__ieee754_pow+0xa20>)
 8020c8a:	f7df fa81 	bl	8000190 <__aeabi_dsub>
 8020c8e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8020c92:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8020c96:	da29      	bge.n	8020cec <__ieee754_pow+0x99c>
 8020c98:	4652      	mov	r2, sl
 8020c9a:	f000 f955 	bl	8020f48 <scalbn>
 8020c9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020ca2:	f7ff bbfe 	b.w	80204a2 <__ieee754_pow+0x152>
 8020ca6:	4b33      	ldr	r3, [pc, #204]	; (8020d74 <__ieee754_pow+0xa24>)
 8020ca8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8020cac:	429f      	cmp	r7, r3
 8020cae:	f77f af13 	ble.w	8020ad8 <__ieee754_pow+0x788>
 8020cb2:	4b31      	ldr	r3, [pc, #196]	; (8020d78 <__ieee754_pow+0xa28>)
 8020cb4:	440b      	add	r3, r1
 8020cb6:	4303      	orrs	r3, r0
 8020cb8:	d009      	beq.n	8020cce <__ieee754_pow+0x97e>
 8020cba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8020cbe:	2200      	movs	r2, #0
 8020cc0:	2300      	movs	r3, #0
 8020cc2:	f7df fe8f 	bl	80009e4 <__aeabi_dcmplt>
 8020cc6:	3800      	subs	r0, #0
 8020cc8:	bf18      	it	ne
 8020cca:	2001      	movne	r0, #1
 8020ccc:	e453      	b.n	8020576 <__ieee754_pow+0x226>
 8020cce:	4622      	mov	r2, r4
 8020cd0:	462b      	mov	r3, r5
 8020cd2:	f7df fa5d 	bl	8000190 <__aeabi_dsub>
 8020cd6:	4642      	mov	r2, r8
 8020cd8:	464b      	mov	r3, r9
 8020cda:	f7df fe97 	bl	8000a0c <__aeabi_dcmpge>
 8020cde:	2800      	cmp	r0, #0
 8020ce0:	f43f aefa 	beq.w	8020ad8 <__ieee754_pow+0x788>
 8020ce4:	e7e9      	b.n	8020cba <__ieee754_pow+0x96a>
 8020ce6:	f04f 0a00 	mov.w	sl, #0
 8020cea:	e720      	b.n	8020b2e <__ieee754_pow+0x7de>
 8020cec:	4621      	mov	r1, r4
 8020cee:	e7d6      	b.n	8020c9e <__ieee754_pow+0x94e>
 8020cf0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8020d70 <__ieee754_pow+0xa20>
 8020cf4:	f04f 0b00 	mov.w	fp, #0
 8020cf8:	f7ff bbba 	b.w	8020470 <__ieee754_pow+0x120>
 8020cfc:	f04f 0b00 	mov.w	fp, #0
 8020d00:	f04f 0c00 	mov.w	ip, #0
 8020d04:	f7ff bbb4 	b.w	8020470 <__ieee754_pow+0x120>
 8020d08:	4640      	mov	r0, r8
 8020d0a:	4649      	mov	r1, r9
 8020d0c:	f7ff bb3d 	b.w	802038a <__ieee754_pow+0x3a>
 8020d10:	9200      	str	r2, [sp, #0]
 8020d12:	f7ff bb89 	b.w	8020428 <__ieee754_pow+0xd8>
 8020d16:	2300      	movs	r3, #0
 8020d18:	f7ff bb73 	b.w	8020402 <__ieee754_pow+0xb2>
 8020d1c:	f3af 8000 	nop.w
 8020d20:	652b82fe 	.word	0x652b82fe
 8020d24:	3c971547 	.word	0x3c971547
 8020d28:	00000000 	.word	0x00000000
 8020d2c:	3fe62e43 	.word	0x3fe62e43
 8020d30:	fefa39ef 	.word	0xfefa39ef
 8020d34:	3fe62e42 	.word	0x3fe62e42
 8020d38:	0ca86c39 	.word	0x0ca86c39
 8020d3c:	be205c61 	.word	0xbe205c61
 8020d40:	72bea4d0 	.word	0x72bea4d0
 8020d44:	3e663769 	.word	0x3e663769
 8020d48:	c5d26bf1 	.word	0xc5d26bf1
 8020d4c:	3ebbbd41 	.word	0x3ebbbd41
 8020d50:	af25de2c 	.word	0xaf25de2c
 8020d54:	3f11566a 	.word	0x3f11566a
 8020d58:	16bebd93 	.word	0x16bebd93
 8020d5c:	3f66c16c 	.word	0x3f66c16c
 8020d60:	5555553e 	.word	0x5555553e
 8020d64:	3fc55555 	.word	0x3fc55555
 8020d68:	3fe00000 	.word	0x3fe00000
 8020d6c:	000fffff 	.word	0x000fffff
 8020d70:	3ff00000 	.word	0x3ff00000
 8020d74:	4090cbff 	.word	0x4090cbff
 8020d78:	3f6f3400 	.word	0x3f6f3400

08020d7c <__ieee754_sqrt>:
 8020d7c:	f8df c154 	ldr.w	ip, [pc, #340]	; 8020ed4 <__ieee754_sqrt+0x158>
 8020d80:	ea3c 0c01 	bics.w	ip, ip, r1
 8020d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d88:	460a      	mov	r2, r1
 8020d8a:	4606      	mov	r6, r0
 8020d8c:	460d      	mov	r5, r1
 8020d8e:	460c      	mov	r4, r1
 8020d90:	4607      	mov	r7, r0
 8020d92:	4603      	mov	r3, r0
 8020d94:	d10f      	bne.n	8020db6 <__ieee754_sqrt+0x3a>
 8020d96:	4602      	mov	r2, r0
 8020d98:	460b      	mov	r3, r1
 8020d9a:	f7df fbb1 	bl	8000500 <__aeabi_dmul>
 8020d9e:	4602      	mov	r2, r0
 8020da0:	460b      	mov	r3, r1
 8020da2:	4630      	mov	r0, r6
 8020da4:	4629      	mov	r1, r5
 8020da6:	f7df f9f5 	bl	8000194 <__adddf3>
 8020daa:	4606      	mov	r6, r0
 8020dac:	460d      	mov	r5, r1
 8020dae:	4630      	mov	r0, r6
 8020db0:	4629      	mov	r1, r5
 8020db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020db6:	2900      	cmp	r1, #0
 8020db8:	dc0e      	bgt.n	8020dd8 <__ieee754_sqrt+0x5c>
 8020dba:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8020dbe:	ea5c 0707 	orrs.w	r7, ip, r7
 8020dc2:	d0f4      	beq.n	8020dae <__ieee754_sqrt+0x32>
 8020dc4:	b141      	cbz	r1, 8020dd8 <__ieee754_sqrt+0x5c>
 8020dc6:	4602      	mov	r2, r0
 8020dc8:	460b      	mov	r3, r1
 8020dca:	f7df f9e1 	bl	8000190 <__aeabi_dsub>
 8020dce:	4602      	mov	r2, r0
 8020dd0:	460b      	mov	r3, r1
 8020dd2:	f7df fcbf 	bl	8000754 <__aeabi_ddiv>
 8020dd6:	e7e8      	b.n	8020daa <__ieee754_sqrt+0x2e>
 8020dd8:	1521      	asrs	r1, r4, #20
 8020dda:	d074      	beq.n	8020ec6 <__ieee754_sqrt+0x14a>
 8020ddc:	07cc      	lsls	r4, r1, #31
 8020dde:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8020de2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8020de6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8020dea:	bf5e      	ittt	pl
 8020dec:	0fd9      	lsrpl	r1, r3, #31
 8020dee:	005b      	lslpl	r3, r3, #1
 8020df0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8020df4:	2400      	movs	r4, #0
 8020df6:	0fd9      	lsrs	r1, r3, #31
 8020df8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020dfc:	107f      	asrs	r7, r7, #1
 8020dfe:	005b      	lsls	r3, r3, #1
 8020e00:	2516      	movs	r5, #22
 8020e02:	4620      	mov	r0, r4
 8020e04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8020e08:	1846      	adds	r6, r0, r1
 8020e0a:	4296      	cmp	r6, r2
 8020e0c:	bfde      	ittt	le
 8020e0e:	1b92      	suble	r2, r2, r6
 8020e10:	1870      	addle	r0, r6, r1
 8020e12:	1864      	addle	r4, r4, r1
 8020e14:	0052      	lsls	r2, r2, #1
 8020e16:	3d01      	subs	r5, #1
 8020e18:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8020e1c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8020e20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020e24:	d1f0      	bne.n	8020e08 <__ieee754_sqrt+0x8c>
 8020e26:	4629      	mov	r1, r5
 8020e28:	f04f 0e20 	mov.w	lr, #32
 8020e2c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8020e30:	4282      	cmp	r2, r0
 8020e32:	eb06 0c05 	add.w	ip, r6, r5
 8020e36:	dc02      	bgt.n	8020e3e <__ieee754_sqrt+0xc2>
 8020e38:	d113      	bne.n	8020e62 <__ieee754_sqrt+0xe6>
 8020e3a:	459c      	cmp	ip, r3
 8020e3c:	d811      	bhi.n	8020e62 <__ieee754_sqrt+0xe6>
 8020e3e:	f1bc 0f00 	cmp.w	ip, #0
 8020e42:	eb0c 0506 	add.w	r5, ip, r6
 8020e46:	da43      	bge.n	8020ed0 <__ieee754_sqrt+0x154>
 8020e48:	2d00      	cmp	r5, #0
 8020e4a:	db41      	blt.n	8020ed0 <__ieee754_sqrt+0x154>
 8020e4c:	f100 0801 	add.w	r8, r0, #1
 8020e50:	1a12      	subs	r2, r2, r0
 8020e52:	459c      	cmp	ip, r3
 8020e54:	bf88      	it	hi
 8020e56:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020e5a:	eba3 030c 	sub.w	r3, r3, ip
 8020e5e:	4431      	add	r1, r6
 8020e60:	4640      	mov	r0, r8
 8020e62:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8020e66:	f1be 0e01 	subs.w	lr, lr, #1
 8020e6a:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8020e6e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020e72:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8020e76:	d1db      	bne.n	8020e30 <__ieee754_sqrt+0xb4>
 8020e78:	4313      	orrs	r3, r2
 8020e7a:	d006      	beq.n	8020e8a <__ieee754_sqrt+0x10e>
 8020e7c:	1c48      	adds	r0, r1, #1
 8020e7e:	bf13      	iteet	ne
 8020e80:	3101      	addne	r1, #1
 8020e82:	3401      	addeq	r4, #1
 8020e84:	4671      	moveq	r1, lr
 8020e86:	f021 0101 	bicne.w	r1, r1, #1
 8020e8a:	1063      	asrs	r3, r4, #1
 8020e8c:	0849      	lsrs	r1, r1, #1
 8020e8e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8020e92:	07e2      	lsls	r2, r4, #31
 8020e94:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8020e98:	bf48      	it	mi
 8020e9a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8020e9e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8020ea2:	460e      	mov	r6, r1
 8020ea4:	e783      	b.n	8020dae <__ieee754_sqrt+0x32>
 8020ea6:	0ada      	lsrs	r2, r3, #11
 8020ea8:	3815      	subs	r0, #21
 8020eaa:	055b      	lsls	r3, r3, #21
 8020eac:	2a00      	cmp	r2, #0
 8020eae:	d0fa      	beq.n	8020ea6 <__ieee754_sqrt+0x12a>
 8020eb0:	02d5      	lsls	r5, r2, #11
 8020eb2:	d50a      	bpl.n	8020eca <__ieee754_sqrt+0x14e>
 8020eb4:	f1c1 0420 	rsb	r4, r1, #32
 8020eb8:	fa23 f404 	lsr.w	r4, r3, r4
 8020ebc:	1e4d      	subs	r5, r1, #1
 8020ebe:	408b      	lsls	r3, r1
 8020ec0:	4322      	orrs	r2, r4
 8020ec2:	1b41      	subs	r1, r0, r5
 8020ec4:	e78a      	b.n	8020ddc <__ieee754_sqrt+0x60>
 8020ec6:	4608      	mov	r0, r1
 8020ec8:	e7f0      	b.n	8020eac <__ieee754_sqrt+0x130>
 8020eca:	0052      	lsls	r2, r2, #1
 8020ecc:	3101      	adds	r1, #1
 8020ece:	e7ef      	b.n	8020eb0 <__ieee754_sqrt+0x134>
 8020ed0:	4680      	mov	r8, r0
 8020ed2:	e7bd      	b.n	8020e50 <__ieee754_sqrt+0xd4>
 8020ed4:	7ff00000 	.word	0x7ff00000

08020ed8 <with_errno>:
 8020ed8:	b570      	push	{r4, r5, r6, lr}
 8020eda:	4604      	mov	r4, r0
 8020edc:	460d      	mov	r5, r1
 8020ede:	4616      	mov	r6, r2
 8020ee0:	f000 f8b0 	bl	8021044 <__errno>
 8020ee4:	4629      	mov	r1, r5
 8020ee6:	6006      	str	r6, [r0, #0]
 8020ee8:	4620      	mov	r0, r4
 8020eea:	bd70      	pop	{r4, r5, r6, pc}

08020eec <xflow>:
 8020eec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020eee:	4615      	mov	r5, r2
 8020ef0:	461c      	mov	r4, r3
 8020ef2:	b180      	cbz	r0, 8020f16 <xflow+0x2a>
 8020ef4:	4610      	mov	r0, r2
 8020ef6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8020efa:	e9cd 0100 	strd	r0, r1, [sp]
 8020efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8020f02:	4628      	mov	r0, r5
 8020f04:	4621      	mov	r1, r4
 8020f06:	f7df fafb 	bl	8000500 <__aeabi_dmul>
 8020f0a:	2222      	movs	r2, #34	; 0x22
 8020f0c:	b003      	add	sp, #12
 8020f0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020f12:	f7ff bfe1 	b.w	8020ed8 <with_errno>
 8020f16:	4610      	mov	r0, r2
 8020f18:	4619      	mov	r1, r3
 8020f1a:	e7ee      	b.n	8020efa <xflow+0xe>

08020f1c <__math_uflow>:
 8020f1c:	2200      	movs	r2, #0
 8020f1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8020f22:	f7ff bfe3 	b.w	8020eec <xflow>

08020f26 <__math_oflow>:
 8020f26:	2200      	movs	r2, #0
 8020f28:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8020f2c:	f7ff bfde 	b.w	8020eec <xflow>

08020f30 <fabs>:
 8020f30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020f34:	4770      	bx	lr

08020f36 <finite>:
 8020f36:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8020f3a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8020f3e:	0fc0      	lsrs	r0, r0, #31
 8020f40:	4770      	bx	lr
 8020f42:	0000      	movs	r0, r0
 8020f44:	0000      	movs	r0, r0
	...

08020f48 <scalbn>:
 8020f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020f4a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8020f4e:	4604      	mov	r4, r0
 8020f50:	460d      	mov	r5, r1
 8020f52:	4617      	mov	r7, r2
 8020f54:	460b      	mov	r3, r1
 8020f56:	b996      	cbnz	r6, 8020f7e <scalbn+0x36>
 8020f58:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8020f5c:	4303      	orrs	r3, r0
 8020f5e:	d039      	beq.n	8020fd4 <scalbn+0x8c>
 8020f60:	4b33      	ldr	r3, [pc, #204]	; (8021030 <scalbn+0xe8>)
 8020f62:	2200      	movs	r2, #0
 8020f64:	f7df facc 	bl	8000500 <__aeabi_dmul>
 8020f68:	4b32      	ldr	r3, [pc, #200]	; (8021034 <scalbn+0xec>)
 8020f6a:	429f      	cmp	r7, r3
 8020f6c:	4604      	mov	r4, r0
 8020f6e:	460d      	mov	r5, r1
 8020f70:	da0f      	bge.n	8020f92 <scalbn+0x4a>
 8020f72:	a32b      	add	r3, pc, #172	; (adr r3, 8021020 <scalbn+0xd8>)
 8020f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f78:	f7df fac2 	bl	8000500 <__aeabi_dmul>
 8020f7c:	e006      	b.n	8020f8c <scalbn+0x44>
 8020f7e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8020f82:	4296      	cmp	r6, r2
 8020f84:	d10a      	bne.n	8020f9c <scalbn+0x54>
 8020f86:	4602      	mov	r2, r0
 8020f88:	f7df f904 	bl	8000194 <__adddf3>
 8020f8c:	4604      	mov	r4, r0
 8020f8e:	460d      	mov	r5, r1
 8020f90:	e020      	b.n	8020fd4 <scalbn+0x8c>
 8020f92:	460b      	mov	r3, r1
 8020f94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8020f98:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8020f9c:	19b9      	adds	r1, r7, r6
 8020f9e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8020fa2:	4291      	cmp	r1, r2
 8020fa4:	dd0e      	ble.n	8020fc4 <scalbn+0x7c>
 8020fa6:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8020faa:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8020fae:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8020fb2:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8020fb6:	a31c      	add	r3, pc, #112	; (adr r3, 8021028 <scalbn+0xe0>)
 8020fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fbc:	481e      	ldr	r0, [pc, #120]	; (8021038 <scalbn+0xf0>)
 8020fbe:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8020fc2:	e7d9      	b.n	8020f78 <scalbn+0x30>
 8020fc4:	2900      	cmp	r1, #0
 8020fc6:	dd08      	ble.n	8020fda <scalbn+0x92>
 8020fc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8020fcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8020fd0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8020fd4:	4620      	mov	r0, r4
 8020fd6:	4629      	mov	r1, r5
 8020fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020fda:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8020fde:	da12      	bge.n	8021006 <scalbn+0xbe>
 8020fe0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8020fe4:	429f      	cmp	r7, r3
 8020fe6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8020fea:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8020fee:	dcdc      	bgt.n	8020faa <scalbn+0x62>
 8020ff0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8020ff4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8020ff8:	a309      	add	r3, pc, #36	; (adr r3, 8021020 <scalbn+0xd8>)
 8020ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ffe:	480f      	ldr	r0, [pc, #60]	; (802103c <scalbn+0xf4>)
 8021000:	f041 011f 	orr.w	r1, r1, #31
 8021004:	e7b8      	b.n	8020f78 <scalbn+0x30>
 8021006:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802100a:	3136      	adds	r1, #54	; 0x36
 802100c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8021010:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8021014:	4620      	mov	r0, r4
 8021016:	4b0a      	ldr	r3, [pc, #40]	; (8021040 <scalbn+0xf8>)
 8021018:	4629      	mov	r1, r5
 802101a:	2200      	movs	r2, #0
 802101c:	e7ac      	b.n	8020f78 <scalbn+0x30>
 802101e:	bf00      	nop
 8021020:	c2f8f359 	.word	0xc2f8f359
 8021024:	01a56e1f 	.word	0x01a56e1f
 8021028:	8800759c 	.word	0x8800759c
 802102c:	7e37e43c 	.word	0x7e37e43c
 8021030:	43500000 	.word	0x43500000
 8021034:	ffff3cb0 	.word	0xffff3cb0
 8021038:	8800759c 	.word	0x8800759c
 802103c:	c2f8f359 	.word	0xc2f8f359
 8021040:	3c900000 	.word	0x3c900000

08021044 <__errno>:
 8021044:	4b01      	ldr	r3, [pc, #4]	; (802104c <__errno+0x8>)
 8021046:	6818      	ldr	r0, [r3, #0]
 8021048:	4770      	bx	lr
 802104a:	bf00      	nop
 802104c:	20000140 	.word	0x20000140

08021050 <__libc_init_array>:
 8021050:	b570      	push	{r4, r5, r6, lr}
 8021052:	4d0d      	ldr	r5, [pc, #52]	; (8021088 <__libc_init_array+0x38>)
 8021054:	4c0d      	ldr	r4, [pc, #52]	; (802108c <__libc_init_array+0x3c>)
 8021056:	1b64      	subs	r4, r4, r5
 8021058:	10a4      	asrs	r4, r4, #2
 802105a:	2600      	movs	r6, #0
 802105c:	42a6      	cmp	r6, r4
 802105e:	d109      	bne.n	8021074 <__libc_init_array+0x24>
 8021060:	4d0b      	ldr	r5, [pc, #44]	; (8021090 <__libc_init_array+0x40>)
 8021062:	4c0c      	ldr	r4, [pc, #48]	; (8021094 <__libc_init_array+0x44>)
 8021064:	f000 f82e 	bl	80210c4 <_init>
 8021068:	1b64      	subs	r4, r4, r5
 802106a:	10a4      	asrs	r4, r4, #2
 802106c:	2600      	movs	r6, #0
 802106e:	42a6      	cmp	r6, r4
 8021070:	d105      	bne.n	802107e <__libc_init_array+0x2e>
 8021072:	bd70      	pop	{r4, r5, r6, pc}
 8021074:	f855 3b04 	ldr.w	r3, [r5], #4
 8021078:	4798      	blx	r3
 802107a:	3601      	adds	r6, #1
 802107c:	e7ee      	b.n	802105c <__libc_init_array+0xc>
 802107e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021082:	4798      	blx	r3
 8021084:	3601      	adds	r6, #1
 8021086:	e7f2      	b.n	802106e <__libc_init_array+0x1e>
 8021088:	08022218 	.word	0x08022218
 802108c:	08022218 	.word	0x08022218
 8021090:	08022218 	.word	0x08022218
 8021094:	0802221c 	.word	0x0802221c

08021098 <memcpy>:
 8021098:	440a      	add	r2, r1
 802109a:	4291      	cmp	r1, r2
 802109c:	f100 33ff 	add.w	r3, r0, #4294967295
 80210a0:	d100      	bne.n	80210a4 <memcpy+0xc>
 80210a2:	4770      	bx	lr
 80210a4:	b510      	push	{r4, lr}
 80210a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80210aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80210ae:	4291      	cmp	r1, r2
 80210b0:	d1f9      	bne.n	80210a6 <memcpy+0xe>
 80210b2:	bd10      	pop	{r4, pc}

080210b4 <memset>:
 80210b4:	4402      	add	r2, r0
 80210b6:	4603      	mov	r3, r0
 80210b8:	4293      	cmp	r3, r2
 80210ba:	d100      	bne.n	80210be <memset+0xa>
 80210bc:	4770      	bx	lr
 80210be:	f803 1b01 	strb.w	r1, [r3], #1
 80210c2:	e7f9      	b.n	80210b8 <memset+0x4>

080210c4 <_init>:
 80210c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210c6:	bf00      	nop
 80210c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80210ca:	bc08      	pop	{r3}
 80210cc:	469e      	mov	lr, r3
 80210ce:	4770      	bx	lr

080210d0 <_fini>:
 80210d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80210d2:	bf00      	nop
 80210d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80210d6:	bc08      	pop	{r3}
 80210d8:	469e      	mov	lr, r3
 80210da:	4770      	bx	lr
