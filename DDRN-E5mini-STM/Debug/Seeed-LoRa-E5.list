
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fe7c  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe8  0801ffb4  0801ffb4  0002ffb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  08020f9c  08020f9c  00030f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08021074  08021074  00040140  2**0
                  CONTENTS
  5 .ARM          00000008  08021074  08021074  00031074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0802107c  0802107c  00040140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0802107c  0802107c  0003107c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08021080  08021080  00031080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000140  20000000  08021084  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002118  20000140  080211c4  00040140  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002258  080211c4  00042258  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00040140  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004016a  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004ce1c  00000000  00000000  000401ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b559  00000000  00000000  0008cfc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003908  00000000  00000000  00098528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b78  00000000  00000000  0009be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d6ea  00000000  00000000  0009e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044841  00000000  00000000  000cc092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5207  00000000  00000000  001108d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000ed00  00000000  00000000  001e5adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001f47dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000140 	.word	0x20000140
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ff9c 	.word	0x0801ff9c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000144 	.word	0x20000144
 8000174:	0801ff9c 	.word	0x0801ff9c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_fmul>:
 8000d40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d48:	bf1e      	ittt	ne
 8000d4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4e:	ea92 0f0c 	teqne	r2, ip
 8000d52:	ea93 0f0c 	teqne	r3, ip
 8000d56:	d06f      	beq.n	8000e38 <__aeabi_fmul+0xf8>
 8000d58:	441a      	add	r2, r3
 8000d5a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5e:	0240      	lsls	r0, r0, #9
 8000d60:	bf18      	it	ne
 8000d62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d66:	d01e      	beq.n	8000da6 <__aeabi_fmul+0x66>
 8000d68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d74:	fba0 3101 	umull	r3, r1, r0, r1
 8000d78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d80:	bf3e      	ittt	cc
 8000d82:	0049      	lslcc	r1, r1, #1
 8000d84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d88:	005b      	lslcc	r3, r3, #1
 8000d8a:	ea40 0001 	orr.w	r0, r0, r1
 8000d8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d92:	2afd      	cmp	r2, #253	; 0xfd
 8000d94:	d81d      	bhi.n	8000dd2 <__aeabi_fmul+0x92>
 8000d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9e:	bf08      	it	eq
 8000da0:	f020 0001 	biceq.w	r0, r0, #1
 8000da4:	4770      	bx	lr
 8000da6:	f090 0f00 	teq	r0, #0
 8000daa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dae:	bf08      	it	eq
 8000db0:	0249      	lsleq	r1, r1, #9
 8000db2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dba:	3a7f      	subs	r2, #127	; 0x7f
 8000dbc:	bfc2      	ittt	gt
 8000dbe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc6:	4770      	bxgt	lr
 8000dc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	3a01      	subs	r2, #1
 8000dd2:	dc5d      	bgt.n	8000e90 <__aeabi_fmul+0x150>
 8000dd4:	f112 0f19 	cmn.w	r2, #25
 8000dd8:	bfdc      	itt	le
 8000dda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dde:	4770      	bxle	lr
 8000de0:	f1c2 0200 	rsb	r2, r2, #0
 8000de4:	0041      	lsls	r1, r0, #1
 8000de6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dea:	f1c2 0220 	rsb	r2, r2, #32
 8000dee:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df6:	f140 0000 	adc.w	r0, r0, #0
 8000dfa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfe:	bf08      	it	eq
 8000e00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e04:	4770      	bx	lr
 8000e06:	f092 0f00 	teq	r2, #0
 8000e0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0040      	lsleq	r0, r0, #1
 8000e12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e16:	3a01      	subeq	r2, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fmul+0xce>
 8000e1a:	ea40 000c 	orr.w	r0, r0, ip
 8000e1e:	f093 0f00 	teq	r3, #0
 8000e22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0049      	lsleq	r1, r1, #1
 8000e2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2e:	3b01      	subeq	r3, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xe6>
 8000e32:	ea41 010c 	orr.w	r1, r1, ip
 8000e36:	e78f      	b.n	8000d58 <__aeabi_fmul+0x18>
 8000e38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	bf18      	it	ne
 8000e42:	ea93 0f0c 	teqne	r3, ip
 8000e46:	d00a      	beq.n	8000e5e <__aeabi_fmul+0x11e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1d8      	bne.n	8000e06 <__aeabi_fmul+0xc6>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	4770      	bx	lr
 8000e5e:	f090 0f00 	teq	r0, #0
 8000e62:	bf17      	itett	ne
 8000e64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e68:	4608      	moveq	r0, r1
 8000e6a:	f091 0f00 	teqne	r1, #0
 8000e6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e72:	d014      	beq.n	8000e9e <__aeabi_fmul+0x15e>
 8000e74:	ea92 0f0c 	teq	r2, ip
 8000e78:	d101      	bne.n	8000e7e <__aeabi_fmul+0x13e>
 8000e7a:	0242      	lsls	r2, r0, #9
 8000e7c:	d10f      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e7e:	ea93 0f0c 	teq	r3, ip
 8000e82:	d103      	bne.n	8000e8c <__aeabi_fmul+0x14c>
 8000e84:	024b      	lsls	r3, r1, #9
 8000e86:	bf18      	it	ne
 8000e88:	4608      	movne	r0, r1
 8000e8a:	d108      	bne.n	8000e9e <__aeabi_fmul+0x15e>
 8000e8c:	ea80 0001 	eor.w	r0, r0, r1
 8000e90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9c:	4770      	bx	lr
 8000e9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea6:	4770      	bx	lr

08000ea8 <__aeabi_fdiv>:
 8000ea8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb0:	bf1e      	ittt	ne
 8000eb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb6:	ea92 0f0c 	teqne	r2, ip
 8000eba:	ea93 0f0c 	teqne	r3, ip
 8000ebe:	d069      	beq.n	8000f94 <__aeabi_fdiv+0xec>
 8000ec0:	eba2 0203 	sub.w	r2, r2, r3
 8000ec4:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ece:	d037      	beq.n	8000f40 <__aeabi_fdiv+0x98>
 8000ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000edc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	bf38      	it	cc
 8000ee4:	005b      	lslcc	r3, r3, #1
 8000ee6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	bf24      	itt	cs
 8000ef2:	1a5b      	subcs	r3, r3, r1
 8000ef4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f02:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f06:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0a:	bf24      	itt	cs
 8000f0c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f10:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f14:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	bf18      	it	ne
 8000f26:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2a:	d1e0      	bne.n	8000eee <__aeabi_fdiv+0x46>
 8000f2c:	2afd      	cmp	r2, #253	; 0xfd
 8000f2e:	f63f af50 	bhi.w	8000dd2 <__aeabi_fmul+0x92>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f38:	bf08      	it	eq
 8000f3a:	f020 0001 	biceq.w	r0, r0, #1
 8000f3e:	4770      	bx	lr
 8000f40:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f44:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f48:	327f      	adds	r2, #127	; 0x7f
 8000f4a:	bfc2      	ittt	gt
 8000f4c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f50:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f54:	4770      	bxgt	lr
 8000f56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	3a01      	subs	r2, #1
 8000f60:	e737      	b.n	8000dd2 <__aeabi_fmul+0x92>
 8000f62:	f092 0f00 	teq	r2, #0
 8000f66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6a:	bf02      	ittt	eq
 8000f6c:	0040      	lsleq	r0, r0, #1
 8000f6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f72:	3a01      	subeq	r2, #1
 8000f74:	d0f9      	beq.n	8000f6a <__aeabi_fdiv+0xc2>
 8000f76:	ea40 000c 	orr.w	r0, r0, ip
 8000f7a:	f093 0f00 	teq	r3, #0
 8000f7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0049      	lsleq	r1, r1, #1
 8000f86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8a:	3b01      	subeq	r3, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xda>
 8000f8e:	ea41 010c 	orr.w	r1, r1, ip
 8000f92:	e795      	b.n	8000ec0 <__aeabi_fdiv+0x18>
 8000f94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f98:	ea92 0f0c 	teq	r2, ip
 8000f9c:	d108      	bne.n	8000fb0 <__aeabi_fdiv+0x108>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	f47f af7d 	bne.w	8000e9e <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	f47f af70 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e776      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fb0:	ea93 0f0c 	teq	r3, ip
 8000fb4:	d104      	bne.n	8000fc0 <__aeabi_fdiv+0x118>
 8000fb6:	024b      	lsls	r3, r1, #9
 8000fb8:	f43f af4c 	beq.w	8000e54 <__aeabi_fmul+0x114>
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	e76e      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc4:	bf18      	it	ne
 8000fc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	d1ca      	bne.n	8000f62 <__aeabi_fdiv+0xba>
 8000fcc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd0:	f47f af5c 	bne.w	8000e8c <__aeabi_fmul+0x14c>
 8000fd4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd8:	f47f af3c 	bne.w	8000e54 <__aeabi_fmul+0x114>
 8000fdc:	e75f      	b.n	8000e9e <__aeabi_fmul+0x15e>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_f2iz>:
 8000fe0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe8:	d30f      	bcc.n	800100a <__aeabi_f2iz+0x2a>
 8000fea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff2:	d90d      	bls.n	8001010 <__aeabi_f2iz+0x30>
 8000ff4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001000:	fa23 f002 	lsr.w	r0, r3, r2
 8001004:	bf18      	it	ne
 8001006:	4240      	negne	r0, r0
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr
 8001010:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001014:	d101      	bne.n	800101a <__aeabi_f2iz+0x3a>
 8001016:	0242      	lsls	r2, r0, #9
 8001018:	d105      	bne.n	8001026 <__aeabi_f2iz+0x46>
 800101a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800101e:	bf08      	it	eq
 8001020:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001024:	4770      	bx	lr
 8001026:	f04f 0000 	mov.w	r0, #0
 800102a:	4770      	bx	lr

0800102c <__aeabi_f2uiz>:
 800102c:	0042      	lsls	r2, r0, #1
 800102e:	d20e      	bcs.n	800104e <__aeabi_f2uiz+0x22>
 8001030:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001034:	d30b      	bcc.n	800104e <__aeabi_f2uiz+0x22>
 8001036:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800103e:	d409      	bmi.n	8001054 <__aeabi_f2uiz+0x28>
 8001040:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001048:	fa23 f002 	lsr.w	r0, r3, r2
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2uiz+0x32>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d102      	bne.n	8001064 <__aeabi_f2uiz+0x38>
 800105e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001062:	4770      	bx	lr
 8001064:	f04f 0000 	mov.w	r0, #0
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <__aeabi_uldivmod>:
 800106c:	b953      	cbnz	r3, 8001084 <__aeabi_uldivmod+0x18>
 800106e:	b94a      	cbnz	r2, 8001084 <__aeabi_uldivmod+0x18>
 8001070:	2900      	cmp	r1, #0
 8001072:	bf08      	it	eq
 8001074:	2800      	cmpeq	r0, #0
 8001076:	bf1c      	itt	ne
 8001078:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800107c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001080:	f000 b970 	b.w	8001364 <__aeabi_idiv0>
 8001084:	f1ad 0c08 	sub.w	ip, sp, #8
 8001088:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800108c:	f000 f806 	bl	800109c <__udivmoddi4>
 8001090:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001098:	b004      	add	sp, #16
 800109a:	4770      	bx	lr

0800109c <__udivmoddi4>:
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	9e08      	ldr	r6, [sp, #32]
 80010a2:	460d      	mov	r5, r1
 80010a4:	4604      	mov	r4, r0
 80010a6:	460f      	mov	r7, r1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d14a      	bne.n	8001142 <__udivmoddi4+0xa6>
 80010ac:	428a      	cmp	r2, r1
 80010ae:	4694      	mov	ip, r2
 80010b0:	d965      	bls.n	800117e <__udivmoddi4+0xe2>
 80010b2:	fab2 f382 	clz	r3, r2
 80010b6:	b143      	cbz	r3, 80010ca <__udivmoddi4+0x2e>
 80010b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010bc:	f1c3 0220 	rsb	r2, r3, #32
 80010c0:	409f      	lsls	r7, r3
 80010c2:	fa20 f202 	lsr.w	r2, r0, r2
 80010c6:	4317      	orrs	r7, r2
 80010c8:	409c      	lsls	r4, r3
 80010ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80010ce:	fa1f f58c 	uxth.w	r5, ip
 80010d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80010d6:	0c22      	lsrs	r2, r4, #16
 80010d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80010dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80010e0:	fb01 f005 	mul.w	r0, r1, r5
 80010e4:	4290      	cmp	r0, r2
 80010e6:	d90a      	bls.n	80010fe <__udivmoddi4+0x62>
 80010e8:	eb1c 0202 	adds.w	r2, ip, r2
 80010ec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80010f0:	f080 811b 	bcs.w	800132a <__udivmoddi4+0x28e>
 80010f4:	4290      	cmp	r0, r2
 80010f6:	f240 8118 	bls.w	800132a <__udivmoddi4+0x28e>
 80010fa:	3902      	subs	r1, #2
 80010fc:	4462      	add	r2, ip
 80010fe:	1a12      	subs	r2, r2, r0
 8001100:	b2a4      	uxth	r4, r4
 8001102:	fbb2 f0fe 	udiv	r0, r2, lr
 8001106:	fb0e 2210 	mls	r2, lr, r0, r2
 800110a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800110e:	fb00 f505 	mul.w	r5, r0, r5
 8001112:	42a5      	cmp	r5, r4
 8001114:	d90a      	bls.n	800112c <__udivmoddi4+0x90>
 8001116:	eb1c 0404 	adds.w	r4, ip, r4
 800111a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800111e:	f080 8106 	bcs.w	800132e <__udivmoddi4+0x292>
 8001122:	42a5      	cmp	r5, r4
 8001124:	f240 8103 	bls.w	800132e <__udivmoddi4+0x292>
 8001128:	4464      	add	r4, ip
 800112a:	3802      	subs	r0, #2
 800112c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001130:	1b64      	subs	r4, r4, r5
 8001132:	2100      	movs	r1, #0
 8001134:	b11e      	cbz	r6, 800113e <__udivmoddi4+0xa2>
 8001136:	40dc      	lsrs	r4, r3
 8001138:	2300      	movs	r3, #0
 800113a:	e9c6 4300 	strd	r4, r3, [r6]
 800113e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001142:	428b      	cmp	r3, r1
 8001144:	d908      	bls.n	8001158 <__udivmoddi4+0xbc>
 8001146:	2e00      	cmp	r6, #0
 8001148:	f000 80ec 	beq.w	8001324 <__udivmoddi4+0x288>
 800114c:	2100      	movs	r1, #0
 800114e:	e9c6 0500 	strd	r0, r5, [r6]
 8001152:	4608      	mov	r0, r1
 8001154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001158:	fab3 f183 	clz	r1, r3
 800115c:	2900      	cmp	r1, #0
 800115e:	d149      	bne.n	80011f4 <__udivmoddi4+0x158>
 8001160:	42ab      	cmp	r3, r5
 8001162:	d302      	bcc.n	800116a <__udivmoddi4+0xce>
 8001164:	4282      	cmp	r2, r0
 8001166:	f200 80f7 	bhi.w	8001358 <__udivmoddi4+0x2bc>
 800116a:	1a84      	subs	r4, r0, r2
 800116c:	eb65 0203 	sbc.w	r2, r5, r3
 8001170:	2001      	movs	r0, #1
 8001172:	4617      	mov	r7, r2
 8001174:	2e00      	cmp	r6, #0
 8001176:	d0e2      	beq.n	800113e <__udivmoddi4+0xa2>
 8001178:	e9c6 4700 	strd	r4, r7, [r6]
 800117c:	e7df      	b.n	800113e <__udivmoddi4+0xa2>
 800117e:	b902      	cbnz	r2, 8001182 <__udivmoddi4+0xe6>
 8001180:	deff      	udf	#255	; 0xff
 8001182:	fab2 f382 	clz	r3, r2
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 808f 	bne.w	80012aa <__udivmoddi4+0x20e>
 800118c:	1a8a      	subs	r2, r1, r2
 800118e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001192:	fa1f fe8c 	uxth.w	lr, ip
 8001196:	2101      	movs	r1, #1
 8001198:	fbb2 f5f7 	udiv	r5, r2, r7
 800119c:	fb07 2015 	mls	r0, r7, r5, r2
 80011a0:	0c22      	lsrs	r2, r4, #16
 80011a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80011a6:	fb0e f005 	mul.w	r0, lr, r5
 80011aa:	4290      	cmp	r0, r2
 80011ac:	d908      	bls.n	80011c0 <__udivmoddi4+0x124>
 80011ae:	eb1c 0202 	adds.w	r2, ip, r2
 80011b2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80011b6:	d202      	bcs.n	80011be <__udivmoddi4+0x122>
 80011b8:	4290      	cmp	r0, r2
 80011ba:	f200 80ca 	bhi.w	8001352 <__udivmoddi4+0x2b6>
 80011be:	4645      	mov	r5, r8
 80011c0:	1a12      	subs	r2, r2, r0
 80011c2:	b2a4      	uxth	r4, r4
 80011c4:	fbb2 f0f7 	udiv	r0, r2, r7
 80011c8:	fb07 2210 	mls	r2, r7, r0, r2
 80011cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011d0:	fb0e fe00 	mul.w	lr, lr, r0
 80011d4:	45a6      	cmp	lr, r4
 80011d6:	d908      	bls.n	80011ea <__udivmoddi4+0x14e>
 80011d8:	eb1c 0404 	adds.w	r4, ip, r4
 80011dc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011e0:	d202      	bcs.n	80011e8 <__udivmoddi4+0x14c>
 80011e2:	45a6      	cmp	lr, r4
 80011e4:	f200 80ba 	bhi.w	800135c <__udivmoddi4+0x2c0>
 80011e8:	4610      	mov	r0, r2
 80011ea:	eba4 040e 	sub.w	r4, r4, lr
 80011ee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80011f2:	e79f      	b.n	8001134 <__udivmoddi4+0x98>
 80011f4:	f1c1 0720 	rsb	r7, r1, #32
 80011f8:	408b      	lsls	r3, r1
 80011fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80011fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8001202:	fa05 f401 	lsl.w	r4, r5, r1
 8001206:	fa20 f307 	lsr.w	r3, r0, r7
 800120a:	40fd      	lsrs	r5, r7
 800120c:	4323      	orrs	r3, r4
 800120e:	fa00 f901 	lsl.w	r9, r0, r1
 8001212:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001216:	fa1f fe8c 	uxth.w	lr, ip
 800121a:	fbb5 f8f0 	udiv	r8, r5, r0
 800121e:	0c1c      	lsrs	r4, r3, #16
 8001220:	fb00 5518 	mls	r5, r0, r8, r5
 8001224:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001228:	fb08 f50e 	mul.w	r5, r8, lr
 800122c:	42a5      	cmp	r5, r4
 800122e:	fa02 f201 	lsl.w	r2, r2, r1
 8001232:	d90b      	bls.n	800124c <__udivmoddi4+0x1b0>
 8001234:	eb1c 0404 	adds.w	r4, ip, r4
 8001238:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800123c:	f080 8087 	bcs.w	800134e <__udivmoddi4+0x2b2>
 8001240:	42a5      	cmp	r5, r4
 8001242:	f240 8084 	bls.w	800134e <__udivmoddi4+0x2b2>
 8001246:	f1a8 0802 	sub.w	r8, r8, #2
 800124a:	4464      	add	r4, ip
 800124c:	1b64      	subs	r4, r4, r5
 800124e:	b29d      	uxth	r5, r3
 8001250:	fbb4 f3f0 	udiv	r3, r4, r0
 8001254:	fb00 4413 	mls	r4, r0, r3, r4
 8001258:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800125c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001260:	45a6      	cmp	lr, r4
 8001262:	d908      	bls.n	8001276 <__udivmoddi4+0x1da>
 8001264:	eb1c 0404 	adds.w	r4, ip, r4
 8001268:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 800126c:	d26b      	bcs.n	8001346 <__udivmoddi4+0x2aa>
 800126e:	45a6      	cmp	lr, r4
 8001270:	d969      	bls.n	8001346 <__udivmoddi4+0x2aa>
 8001272:	3b02      	subs	r3, #2
 8001274:	4464      	add	r4, ip
 8001276:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800127a:	fba0 8302 	umull	r8, r3, r0, r2
 800127e:	eba4 040e 	sub.w	r4, r4, lr
 8001282:	429c      	cmp	r4, r3
 8001284:	46c6      	mov	lr, r8
 8001286:	461d      	mov	r5, r3
 8001288:	d355      	bcc.n	8001336 <__udivmoddi4+0x29a>
 800128a:	d052      	beq.n	8001332 <__udivmoddi4+0x296>
 800128c:	b156      	cbz	r6, 80012a4 <__udivmoddi4+0x208>
 800128e:	ebb9 030e 	subs.w	r3, r9, lr
 8001292:	eb64 0405 	sbc.w	r4, r4, r5
 8001296:	fa04 f707 	lsl.w	r7, r4, r7
 800129a:	40cb      	lsrs	r3, r1
 800129c:	40cc      	lsrs	r4, r1
 800129e:	431f      	orrs	r7, r3
 80012a0:	e9c6 7400 	strd	r7, r4, [r6]
 80012a4:	2100      	movs	r1, #0
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	f1c3 0120 	rsb	r1, r3, #32
 80012ae:	fa02 fc03 	lsl.w	ip, r2, r3
 80012b2:	fa20 f201 	lsr.w	r2, r0, r1
 80012b6:	fa25 f101 	lsr.w	r1, r5, r1
 80012ba:	409d      	lsls	r5, r3
 80012bc:	432a      	orrs	r2, r5
 80012be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012c2:	fa1f fe8c 	uxth.w	lr, ip
 80012c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80012ca:	fb07 1510 	mls	r5, r7, r0, r1
 80012ce:	0c11      	lsrs	r1, r2, #16
 80012d0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80012d4:	fb00 f50e 	mul.w	r5, r0, lr
 80012d8:	428d      	cmp	r5, r1
 80012da:	fa04 f403 	lsl.w	r4, r4, r3
 80012de:	d908      	bls.n	80012f2 <__udivmoddi4+0x256>
 80012e0:	eb1c 0101 	adds.w	r1, ip, r1
 80012e4:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80012e8:	d22f      	bcs.n	800134a <__udivmoddi4+0x2ae>
 80012ea:	428d      	cmp	r5, r1
 80012ec:	d92d      	bls.n	800134a <__udivmoddi4+0x2ae>
 80012ee:	3802      	subs	r0, #2
 80012f0:	4461      	add	r1, ip
 80012f2:	1b49      	subs	r1, r1, r5
 80012f4:	b292      	uxth	r2, r2
 80012f6:	fbb1 f5f7 	udiv	r5, r1, r7
 80012fa:	fb07 1115 	mls	r1, r7, r5, r1
 80012fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001302:	fb05 f10e 	mul.w	r1, r5, lr
 8001306:	4291      	cmp	r1, r2
 8001308:	d908      	bls.n	800131c <__udivmoddi4+0x280>
 800130a:	eb1c 0202 	adds.w	r2, ip, r2
 800130e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001312:	d216      	bcs.n	8001342 <__udivmoddi4+0x2a6>
 8001314:	4291      	cmp	r1, r2
 8001316:	d914      	bls.n	8001342 <__udivmoddi4+0x2a6>
 8001318:	3d02      	subs	r5, #2
 800131a:	4462      	add	r2, ip
 800131c:	1a52      	subs	r2, r2, r1
 800131e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001322:	e739      	b.n	8001198 <__udivmoddi4+0xfc>
 8001324:	4631      	mov	r1, r6
 8001326:	4630      	mov	r0, r6
 8001328:	e709      	b.n	800113e <__udivmoddi4+0xa2>
 800132a:	4639      	mov	r1, r7
 800132c:	e6e7      	b.n	80010fe <__udivmoddi4+0x62>
 800132e:	4610      	mov	r0, r2
 8001330:	e6fc      	b.n	800112c <__udivmoddi4+0x90>
 8001332:	45c1      	cmp	r9, r8
 8001334:	d2aa      	bcs.n	800128c <__udivmoddi4+0x1f0>
 8001336:	ebb8 0e02 	subs.w	lr, r8, r2
 800133a:	eb63 050c 	sbc.w	r5, r3, ip
 800133e:	3801      	subs	r0, #1
 8001340:	e7a4      	b.n	800128c <__udivmoddi4+0x1f0>
 8001342:	4645      	mov	r5, r8
 8001344:	e7ea      	b.n	800131c <__udivmoddi4+0x280>
 8001346:	4603      	mov	r3, r0
 8001348:	e795      	b.n	8001276 <__udivmoddi4+0x1da>
 800134a:	4640      	mov	r0, r8
 800134c:	e7d1      	b.n	80012f2 <__udivmoddi4+0x256>
 800134e:	46d0      	mov	r8, sl
 8001350:	e77c      	b.n	800124c <__udivmoddi4+0x1b0>
 8001352:	3d02      	subs	r5, #2
 8001354:	4462      	add	r2, ip
 8001356:	e733      	b.n	80011c0 <__udivmoddi4+0x124>
 8001358:	4608      	mov	r0, r1
 800135a:	e70b      	b.n	8001174 <__udivmoddi4+0xd8>
 800135c:	4464      	add	r4, ip
 800135e:	3802      	subs	r0, #2
 8001360:	e743      	b.n	80011ea <__udivmoddi4+0x14e>
 8001362:	bf00      	nop

08001364 <__aeabi_idiv0>:
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop

08001368 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001376:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4013      	ands	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138c:	68fb      	ldr	r3, [r7, #12]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ae:	4013      	ands	r3, r2
 80013b0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <MX_ADC_Init+0x94>)
 80013c2:	4a24      	ldr	r2, [pc, #144]	; (8001454 <MX_ADC_Init+0x98>)
 80013c4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <MX_ADC_Init+0x94>)
 80013c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013cc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <MX_ADC_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <MX_ADC_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_ADC_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <MX_ADC_Init+0x94>)
 80013e2:	2204      	movs	r2, #4
 80013e4:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_ADC_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <MX_ADC_Init+0x94>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_ADC_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <MX_ADC_Init+0x94>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013fe:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_ADC_Init+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <MX_ADC_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800140c:	4b10      	ldr	r3, [pc, #64]	; (8001450 <MX_ADC_Init+0x94>)
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <MX_ADC_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_ADC_Init+0x94>)
 800141c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <MX_ADC_Init+0x94>)
 8001424:	2207      	movs	r2, #7
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_ADC_Init+0x94>)
 800142a:	2207      	movs	r2, #7
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <MX_ADC_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_ADC_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_ADC_Init+0x94>)
 800143e:	f003 fe1f 	bl	8005080 <HAL_ADC_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001448:	f000 fd40 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000015c 	.word	0x2000015c
 8001454:	40012400 	.word	0x40012400

08001458 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_ADC_MspInit+0x24>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d103      	bne.n	8001472 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800146a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800146e:	f7ff ff7b 	bl	8001368 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012400 	.word	0x40012400

08001480 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <HAL_ADC_MspDeInit+0x24>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d103      	bne.n	800149a <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001492:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001496:	f7ff ff7f 	bl	8001398 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40012400 	.word	0x40012400

080014a8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <SYS_InitMeasurement+0x14>)
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <SYS_InitMeasurement+0x18>)
 80014b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000015c 	.word	0x2000015c
 80014c0:	40012400 	.word	0x40012400

080014c4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80014d2:	4813      	ldr	r0, [pc, #76]	; (8001520 <SYS_GetBatteryLevel+0x5c>)
 80014d4:	f000 f82a 	bl	800152c <ADC_ReadChannels>
 80014d8:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	e016      	b.n	8001514 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <SYS_GetBatteryLevel+0x60>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00b      	beq.n	800150a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <SYS_GetBatteryLevel+0x60>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f640 43e4 	movw	r3, #3300	; 0xce4
 80014fc:	fb03 f202 	mul.w	r2, r3, r2
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	e004      	b.n	8001514 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800150a:	4a07      	ldr	r2, [pc, #28]	; (8001528 <SYS_GetBatteryLevel+0x64>)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001514:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	b4002000 	.word	0xb4002000
 8001524:	1fff75aa 	.word	0x1fff75aa
 8001528:	004c08d8 	.word	0x004c08d8

0800152c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001544:	f7ff ff3a 	bl	80013bc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <ADC_ReadChannels+0x88>)
 800154a:	f004 fbb8 	bl	8005cbe <HAL_ADCEx_Calibration_Start>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001554:	f000 fcba 	bl	8001ecc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	4619      	mov	r1, r3
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <ADC_ReadChannels+0x88>)
 800156c:	f004 f8c4 	bl	80056f8 <HAL_ADC_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001576:	f000 fca9 	bl	8001ecc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 800157a:	480e      	ldr	r0, [pc, #56]	; (80015b4 <ADC_ReadChannels+0x88>)
 800157c:	f003 ffa0 	bl	80054c0 <HAL_ADC_Start>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001586:	f000 fca1 	bl	8001ecc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800158a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800158e:	4809      	ldr	r0, [pc, #36]	; (80015b4 <ADC_ReadChannels+0x88>)
 8001590:	f004 f80e 	bl	80055b0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <ADC_ReadChannels+0x88>)
 8001596:	f003 ffd9 	bl	800554c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <ADC_ReadChannels+0x88>)
 800159c:	f004 f89f 	bl	80056de <HAL_ADC_GetValue>
 80015a0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <ADC_ReadChannels+0x88>)
 80015a4:	f003 ff00 	bl	80053a8 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80015a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000015c 	.word	0x2000015c

080015b8 <LL_AHB1_GRP1_EnableClock>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015dc:	68fb      	ldr	r3, [r7, #12]
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80015ec:	2004      	movs	r0, #4
 80015ee:	f7ff ffe3 	bl	80015b8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff ffe0 	bl	80015b8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	200b      	movs	r0, #11
 80015fe:	f004 fd04 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001602:	200b      	movs	r0, #11
 8001604:	f004 fd1b 	bl	800603e <HAL_NVIC_EnableIRQ>

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001618:	23ff      	movs	r3, #255	; 0xff
 800161a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001622:	d311      	bcc.n	8001648 <FLASH_IF_Write+0x3c>
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <FLASH_IF_Write+0x48>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	029a      	lsls	r2, r3, #10
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <FLASH_IF_Write+0x4c>)
 800162c:	4013      	ands	r3, r2
 800162e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001632:	3b01      	subs	r3, #1
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4293      	cmp	r3, r2
 8001638:	d306      	bcc.n	8001648 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 f85a 	bl	80016f8 <FLASH_IF_INT_Write>
 8001644:	4603      	mov	r3, r0
 8001646:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8001648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	1fff75e0 	.word	0x1fff75e0
 8001658:	03fffc00 	.word	0x03fffc00

0800165c <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001668:	23ff      	movs	r3, #255	; 0xff
 800166a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001672:	d311      	bcc.n	8001698 <FLASH_IF_Read+0x3c>
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <FLASH_IF_Read+0x48>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	029a      	lsls	r2, r3, #10
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <FLASH_IF_Read+0x4c>)
 800167c:	4013      	ands	r3, r2
 800167e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001682:	3b01      	subs	r3, #1
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	4293      	cmp	r3, r2
 8001688:	d306      	bcc.n	8001698 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f93a 	bl	8001908 <FLASH_IF_INT_Read>
 8001694:	4603      	mov	r3, r0
 8001696:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001698:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	1fff75e0 	.word	0x1fff75e0
 80016a8:	03fffc00 	.word	0x03fffc00

080016ac <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80016b6:	23ff      	movs	r3, #255	; 0xff
 80016b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016c0:	d310      	bcc.n	80016e4 <FLASH_IF_Erase+0x38>
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <FLASH_IF_Erase+0x44>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	029a      	lsls	r2, r3, #10
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <FLASH_IF_Erase+0x48>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80016d0:	3b01      	subs	r3, #1
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d305      	bcc.n	80016e4 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 80016d8:	6839      	ldr	r1, [r7, #0]
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f932 	bl	8001944 <FLASH_IF_INT_Erase>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 80016e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	1fff75e0 	.word	0x1fff75e0
 80016f4:	03fffc00 	.word	0x03fffc00

080016f8 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b090      	sub	sp, #64	; 0x40
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00c      	beq.n	8001736 <FLASH_IF_INT_Write+0x3e>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <FLASH_IF_INT_Write+0x3e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	2b00      	cmp	r3, #0
 800172a:	d104      	bne.n	8001736 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	2b00      	cmp	r3, #0
 8001734:	d002      	beq.n	800173c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001736:	f06f 0305 	mvn.w	r3, #5
 800173a:	e0da      	b.n	80018f2 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800173c:	f000 f992 	bl	8001a64 <FLASH_IF_INT_Clear_Error>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 8001746:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 80cf 	bne.w	80018ee <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001750:	f005 f8c0 	bl	80068d4 <HAL_FLASH_Unlock>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 80c6 	bne.w	80018e8 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 800175c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001762:	4b66      	ldr	r3, [pc, #408]	; (80018fc <FLASH_IF_INT_Write+0x204>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0299      	lsls	r1, r3, #10
 8001768:	4b65      	ldr	r3, [pc, #404]	; (8001900 <FLASH_IF_INT_Write+0x208>)
 800176a:	400b      	ands	r3, r1
 800176c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	0adb      	lsrs	r3, r3, #11
 8001778:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800177a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001784:	3b01      	subs	r3, #1
 8001786:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <FLASH_IF_INT_Write+0x204>)
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	0291      	lsls	r1, r2, #10
 800178c:	4a5c      	ldr	r2, [pc, #368]	; (8001900 <FLASH_IF_INT_Write+0x208>)
 800178e:	400a      	ands	r2, r1
 8001790:	fbb3 f1f2 	udiv	r1, r3, r2
 8001794:	fb01 f202 	mul.w	r2, r1, r2
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	0ada      	lsrs	r2, r3, #11
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d905      	bls.n	80017b6 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 80017aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b0:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ba:	e089      	b.n	80018d0 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 80017bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017be:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80017c2:	02db      	lsls	r3, r3, #11
 80017c4:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 80017c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f925 	bl	8001a18 <FLASH_IF_INT_IsEmpty>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d031      	beq.n	8001838 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 80017d4:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <FLASH_IF_INT_Write+0x20c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d103      	bne.n	80017e4 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 80017dc:	23fa      	movs	r3, #250	; 0xfa
 80017de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80017e2:	e07e      	b.n	80018e2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 80017e4:	4b47      	ldr	r3, [pc, #284]	; (8001904 <FLASH_IF_INT_Write+0x20c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6939      	ldr	r1, [r7, #16]
 80017ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f88a 	bl	8001908 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <FLASH_IF_INT_Write+0x20c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017fe:	4413      	add	r3, r2
 8001800:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001804:	b292      	uxth	r2, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f01d f950 	bl	801eaac <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001812:	4618      	mov	r0, r3
 8001814:	f000 f896 	bl	8001944 <FLASH_IF_INT_Erase>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800181e:	23fe      	movs	r3, #254	; 0xfe
 8001820:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001824:	e05d      	b.n	80018e2 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <FLASH_IF_INT_Write+0x20c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e005      	b.n	8001844 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 800183c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183e:	623b      	str	r3, [r7, #32]
          current_length = length;
 8001840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001842:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
 8001848:	e026      	b.n	8001898 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 800184a:	6a3a      	ldr	r2, [r7, #32]
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184e:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001856:	2001      	movs	r0, #1
 8001858:	f004 fff8 	bl	800684c <HAL_FLASH_Program>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d113      	bne.n	800188a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001868:	6a3a      	ldr	r2, [r7, #32]
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800186c:	4413      	add	r3, r2
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	4299      	cmp	r1, r3
 8001874:	bf08      	it	eq
 8001876:	4290      	cmpeq	r0, r2
 8001878:	d003      	beq.n	8001882 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800187a:	23fc      	movs	r3, #252	; 0xfc
 800187c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001880:	e00e      	b.n	80018a0 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001884:	3308      	adds	r3, #8
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e003      	b.n	8001892 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800188a:	23fc      	movs	r3, #252	; 0xfc
 800188c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001890:	e006      	b.n	80018a0 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001894:	3308      	adds	r3, #8
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
 8001898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	429a      	cmp	r2, r3
 800189e:	d3d4      	bcc.n	800184a <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 80018a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d11b      	bne.n	80018e0 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 80018a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ac:	4413      	add	r3, r2
 80018ae:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 80018b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	4413      	add	r3, r2
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018c2:	bf28      	it	cs
 80018c4:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80018ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018cc:	3301      	adds	r3, #1
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4413      	add	r3, r2
 80018d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018d8:	429a      	cmp	r2, r3
 80018da:	f4ff af6f 	bcc.w	80017bc <FLASH_IF_INT_Write+0xc4>
 80018de:	e000      	b.n	80018e2 <FLASH_IF_INT_Write+0x1ea>
          break;
 80018e0:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80018e2:	f005 f819 	bl	8006918 <HAL_FLASH_Lock>
 80018e6:	e002      	b.n	80018ee <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 80018e8:	23fb      	movs	r3, #251	; 0xfb
 80018ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 80018ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3740      	adds	r7, #64	; 0x40
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	1fff75e0 	.word	0x1fff75e0
 8001900:	03fffc00 	.word	0x03fffc00
 8001904:	200001c0 	.word	0x200001c0

08001908 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <FLASH_IF_INT_Read+0x1c>
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d102      	bne.n	800192a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001924:	f06f 0305 	mvn.w	r3, #5
 8001928:	e008      	b.n	800193c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	b29b      	uxth	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f01d f8ba 	bl	801eaac <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001938:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 8001964:	f06f 0305 	mvn.w	r3, #5
 8001968:	e04e      	b.n	8001a08 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800196a:	f000 f87b 	bl	8001a64 <FLASH_IF_INT_Clear_Error>
 800196e:	4603      	mov	r3, r0
 8001970:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001972:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d144      	bne.n	8001a04 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800197a:	f004 ffab 	bl	80068d4 <HAL_FLASH_Unlock>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d13d      	bne.n	8001a00 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001984:	2302      	movs	r3, #2
 8001986:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <FLASH_IF_INT_Erase+0xcc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	0299      	lsls	r1, r3, #10
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <FLASH_IF_INT_Erase+0xd0>)
 8001996:	400b      	ands	r3, r1
 8001998:	fbb2 f1f3 	udiv	r1, r2, r3
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	0adb      	lsrs	r3, r3, #11
 80019a4:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80019b0:	3b01      	subs	r3, #1
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <FLASH_IF_INT_Erase+0xcc>)
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	0291      	lsls	r1, r2, #10
 80019b8:	4a16      	ldr	r2, [pc, #88]	; (8001a14 <FLASH_IF_INT_Erase+0xd0>)
 80019ba:	400a      	ands	r2, r1
 80019bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80019c0:	fb01 f202 	mul.w	r2, r1, r2
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	0ada      	lsrs	r2, r3, #11
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	3301      	adds	r3, #1
 80019ce:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80019d0:	f107 0214 	add.w	r2, r7, #20
 80019d4:	f107 0308 	add.w	r3, r7, #8
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f005 f87c 	bl	8006ad8 <HAL_FLASHEx_Erase>
 80019e0:	4603      	mov	r3, r0
 80019e2:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 80019e4:	7fbb      	ldrb	r3, [r7, #30]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d007      	beq.n	80019fa <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80019ea:	7fbb      	ldrb	r3, [r7, #30]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d101      	bne.n	80019f4 <FLASH_IF_INT_Erase+0xb0>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e001      	b.n	80019f8 <FLASH_IF_INT_Erase+0xb4>
 80019f4:	f06f 0301 	mvn.w	r3, #1
 80019f8:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 80019fa:	f004 ff8d 	bl	8006918 <HAL_FLASH_Lock>
 80019fe:	e001      	b.n	8001a04 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001a00:	23fb      	movs	r3, #251	; 0xfb
 8001a02:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001a04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	1fff75e0 	.word	0x1fff75e0
 8001a14:	03fffc00 	.word	0x03fffc00

08001a18 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	e011      	b.n	8001a50 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a36:	bf08      	it	eq
 8001a38:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 8001a3c:	d002      	beq.n	8001a44 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	60fb      	str	r3, [r7, #12]
      break;
 8001a42:	e009      	b.n	8001a58 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3308      	adds	r3, #8
 8001a48:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d3e9      	bcc.n	8001a2c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 8001a58:	68fb      	ldr	r3, [r7, #12]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001a6a:	23fb      	movs	r3, #251	; 0xfb
 8001a6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001a6e:	f004 ff31 	bl	80068d4 <HAL_FLASH_Unlock>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d110      	bne.n	8001a9a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a7e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a82:	6193      	str	r3, [r2, #24]
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a86:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001a8a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001a8c:	f004 ff44 	bl	8006918 <HAL_FLASH_Lock>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	58004000 	.word	0x58004000

08001aac <LL_AHB2_GRP1_EnableClock>:
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4013      	ands	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	2001      	movs	r0, #1
 8001af2:	f7ff ffdb 	bl	8001aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2002      	movs	r0, #2
 8001af8:	f7ff ffd8 	bl	8001aac <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afc:	2004      	movs	r0, #4
 8001afe:	f7ff ffd5 	bl	8001aac <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001b08:	4821      	ldr	r0, [pc, #132]	; (8001b90 <MX_GPIO_Init+0xb4>)
 8001b0a:	f005 fae7 	bl	80070dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2120      	movs	r1, #32
 8001b12:	481f      	ldr	r0, [pc, #124]	; (8001b90 <MX_GPIO_Init+0xb4>)
 8001b14:	f005 fae2 	bl	80070dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	2131      	movs	r1, #49	; 0x31
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b20:	f005 fadc 	bl	80070dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001b24:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4815      	ldr	r0, [pc, #84]	; (8001b90 <MX_GPIO_Init+0xb4>)
 8001b3c:	f005 f8a0 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001b40:	2331      	movs	r3, #49	; 0x31
 8001b42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f005 f892 	bl	8006c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b62:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4807      	ldr	r0, [pc, #28]	; (8001b90 <MX_GPIO_Init+0xb4>)
 8001b72:	f005 f885 	bl	8006c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2029      	movs	r0, #41	; 0x29
 8001b7c:	f004 fa45 	bl	800600a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b80:	2029      	movs	r0, #41	; 0x29
 8001b82:	f004 fa5c 	bl	800603e <HAL_NVIC_EnableIRQ>

}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	48000400 	.word	0x48000400

08001b94 <LL_AHB2_GRP1_EnableClock>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <LL_APB1_GRP1_EnableClock>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001bfa:	4a1c      	ldr	r2, [pc, #112]	; (8001c6c <MX_I2C2_Init+0x78>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c00:	4a1b      	ldr	r2, [pc, #108]	; (8001c70 <MX_I2C2_Init+0x7c>)
 8001c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c30:	f005 fa84 	bl	800713c <HAL_I2C_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c3a:	f000 f947 	bl	8001ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c42:	f005 ffd1 	bl	8007be8 <HAL_I2CEx_ConfigAnalogFilter>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c4c:	f000 f93e 	bl	8001ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c50:	2100      	movs	r1, #0
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <MX_I2C2_Init+0x74>)
 8001c54:	f006 f812 	bl	8007c7c <HAL_I2CEx_ConfigDigitalFilter>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c5e:	f000 f935 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200001c4 	.word	0x200001c4
 8001c6c:	40005800 	.word	0x40005800
 8001c70:	20303e5d 	.word	0x20303e5d

08001c74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b096      	sub	sp, #88	; 0x58
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2238      	movs	r2, #56	; 0x38
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f01e f947 	bl	801ff28 <memset>
  if(i2cHandle->Instance==I2C2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_I2C_MspInit+0xb0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d13b      	bne.n	8001d1c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ca8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f007 f9fc 	bl	80090b0 <HAL_RCCEx_PeriphCLKConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001cbe:	f000 f905 	bl	8001ecc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f7ff ff66 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f7ff ff63 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cee:	f004 ffc7 	bl	8006c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf8:	2312      	movs	r3, #18
 8001cfa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d04:	2304      	movs	r3, #4
 8001d06:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4806      	ldr	r0, [pc, #24]	; (8001d28 <HAL_I2C_MspInit+0xb4>)
 8001d10:	f004 ffb6 	bl	8006c80 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d14:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001d18:	f7ff ff54 	bl	8001bc4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3758      	adds	r7, #88	; 0x58
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40005800 	.word	0x40005800
 8001d28:	48000400 	.word	0x48000400

08001d2c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3c:	f023 0218 	bic.w	r2, r3, #24
 8001d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b0c3      	sub	sp, #268	; 0x10c
 8001d5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d5e:	f002 ffbd 	bl	8004cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d62:	f000 f84f 	bl	8001e04 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d66:	f7ff feb9 	bl	8001adc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001d6a:	f00a fd39 	bl	800c7e0 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001d6e:	f7ff ff41 	bl	8001bf4 <MX_I2C2_Init>
    } else {
    	APP_LOG(TS_ON, VLEVEL_M, "Incorrect device ID: %x \r\n", bmp390_device_id);
    }
*/

  EnvionmentSensors envSensors(&hi2c2);
 8001d72:	463b      	mov	r3, r7
 8001d74:	491e      	ldr	r1, [pc, #120]	; (8001df0 <main+0x98>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f002 fe96 	bl	8004aa8 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>
  float temperature = -99;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <main+0x9c>)
 8001d7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	temperature = envSensors.getTemperature();
 8001d82:	463b      	mov	r3, r7
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fecb 	bl	8004b20 <_ZN17EnvionmentSensors14getTemperatureEv>
 8001d8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
  	temperature *= 100;
 8001d8e:	491a      	ldr	r1, [pc, #104]	; (8001df8 <main+0xa0>)
 8001d90:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001d94:	f7fe ffd4 	bl	8000d40 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  	APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%d \r\n", (uint8_t)temperature/100, (uint8_t)temperature%100);
 8001d9e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001da2:	f7ff f943 	bl	800102c <__aeabi_f2uiz>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <main+0xa4>)
 8001dac:	fba2 2303 	umull	r2, r3, r2, r3
 8001db0:	095b      	lsrs	r3, r3, #5
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461c      	mov	r4, r3
 8001db6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8001dba:	f7ff f937 	bl	800102c <__aeabi_f2uiz>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <main+0xa4>)
 8001dc4:	fba2 1203 	umull	r1, r2, r2, r3
 8001dc8:	0952      	lsrs	r2, r2, #5
 8001dca:	2164      	movs	r1, #100	; 0x64
 8001dcc:	fb01 f202 	mul.w	r2, r1, r2
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	9400      	str	r4, [sp, #0]
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <main+0xa8>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2002      	movs	r0, #2
 8001de0:	f01d fda8 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
  	HAL_Delay(1000);
 8001de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de8:	f000 fb74 	bl	80024d4 <HAL_Delay>
  	temperature = envSensors.getTemperature();
 8001dec:	e7c9      	b.n	8001d82 <main+0x2a>
 8001dee:	bf00      	nop
 8001df0:	200001c4 	.word	0x200001c4
 8001df4:	c2c60000 	.word	0xc2c60000
 8001df8:	42c80000 	.word	0x42c80000
 8001dfc:	51eb851f 	.word	0x51eb851f
 8001e00:	0801ffb4 	.word	0x0801ffb4

08001e04 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b09a      	sub	sp, #104	; 0x68
 8001e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0a:	f107 0320 	add.w	r3, r7, #32
 8001e0e:	2248      	movs	r2, #72	; 0x48
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f01e f888 	bl	801ff28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e18:	f107 0308 	add.w	r3, r7, #8
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
 8001e28:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e2a:	f005 ff73 	bl	8007d14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff ff7c 	bl	8001d2c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <_Z18SystemClock_Configv+0xc4>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e3c:	4a22      	ldr	r2, [pc, #136]	; (8001ec8 <_Z18SystemClock_Configv+0xc4>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <_Z18SystemClock_Configv+0xc4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e4c:	607b      	str	r3, [r7, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001e50:	2324      	movs	r3, #36	; 0x24
 8001e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001e54:	2381      	movs	r3, #129	; 0x81
 8001e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001e60:	23b0      	movs	r3, #176	; 0xb0
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e68:	f107 0320 	add.w	r3, r7, #32
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f006 f9fb 	bl	8008268 <HAL_RCC_OscConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8001e82:	f000 f823 	bl	8001ecc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001e86:	234f      	movs	r3, #79	; 0x4f
 8001e88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f006 fd61 	bl	800896c <HAL_RCC_ClockConfig>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf14      	ite	ne
 8001eb0:	2301      	movne	r3, #1
 8001eb2:	2300      	moveq	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001eba:	f000 f807 	bl	8001ecc <Error_Handler>
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	3768      	adds	r7, #104	; 0x68
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	58000400 	.word	0x58000400

08001ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
}
 8001ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <Error_Handler+0x8>

08001ed6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001eee:	bf00      	nop
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <LL_APB1_GRP1_EnableClock>:
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b085      	sub	sp, #20
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4013      	ands	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
	...

08001f28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08c      	sub	sp, #48	; 0x30
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	222c      	movs	r2, #44	; 0x2c
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f01d fff7 	bl	801ff28 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <MX_RTC_Init+0xa0>)
 8001f3e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001f40:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f42:	221f      	movs	r2, #31
 8001f44:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f6e:	4815      	ldr	r0, [pc, #84]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f70:	f007 f9b8 	bl	80092e4 <HAL_RTC_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001f7a:	f7ff ffa7 	bl	8001ecc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001f7e:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001f80:	f007 fcae 	bl	80098e0 <HAL_RTCEx_SetSSRU_IT>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001f8a:	f7ff ff9f 	bl	8001ecc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f9e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <MX_RTC_Init+0x9c>)
 8001fae:	f007 fa1b 	bl	80093e8 <HAL_RTC_SetAlarm_IT>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001fb8:	f7ff ff88 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3730      	adds	r7, #48	; 0x30
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000218 	.word	0x20000218
 8001fc8:	40002800 	.word	0x40002800

08001fcc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b090      	sub	sp, #64	; 0x40
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	2238      	movs	r2, #56	; 0x38
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f01d ffa3 	bl	801ff28 <memset>
  if(rtcHandle->Instance==RTC)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a16      	ldr	r2, [pc, #88]	; (8002040 <HAL_RTC_MspInit+0x74>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d125      	bne.n	8002038 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f007 f857 	bl	80090b0 <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002008:	f7ff ff60 	bl	8001ecc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800200c:	f7ff ff63 	bl	8001ed6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002010:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002014:	f7ff ff6f 	bl	8001ef6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	2002      	movs	r0, #2
 800201e:	f003 fff4 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002022:	2002      	movs	r0, #2
 8002024:	f004 f80b 	bl	800603e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	202a      	movs	r0, #42	; 0x2a
 800202e:	f003 ffec 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002032:	202a      	movs	r0, #42	; 0x2a
 8002034:	f004 f803 	bl	800603e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002038:	bf00      	nop
 800203a:	3740      	adds	r7, #64	; 0x40
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40002800 	.word	0x40002800

08002044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <NMI_Handler+0x4>

08002056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <MemManage_Handler+0x4>

08002062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <BusFault_Handler+0x4>

08002068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <UsageFault_Handler+0x4>

0800206e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr

08002086 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
	...

080020a0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80020a6:	f007 fc57 	bl	8009958 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000218 	.word	0x20000218

080020b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <DMA1_Channel1_IRQHandler+0x10>)
 80020ba:	f004 fa57 	bl	800656c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002f8 	.word	0x200002f8

080020c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <USART1_IRQHandler+0x10>)
 80020ce:	f008 fa8d 	bl	800a5ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000264 	.word	0x20000264

080020dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80020e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020e4:	f005 f812 	bl	800710c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <RTC_Alarm_IRQHandler+0x10>)
 80020f2:	f007 fae1 	bl	80096b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000218 	.word	0x20000218

08002100 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002106:	f007 ff95 	bl	800a034 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000250 	.word	0x20000250

08002114 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002138:	68fb      	ldr	r3, [r7, #12]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_SUBGHZ_Init+0x20>)
 800214a:	2208      	movs	r2, #8
 800214c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_SUBGHZ_Init+0x20>)
 8002150:	f007 fcee 	bl	8009b30 <HAL_SUBGHZ_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800215a:	f7ff feb7 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000250 	.word	0x20000250

08002168 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff ffcf 	bl	8002114 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2100      	movs	r1, #0
 800217a:	2032      	movs	r0, #50	; 0x32
 800217c:	f003 ff45 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002180:	2032      	movs	r0, #50	; 0x32
 8002182:	f003 ff5c 	bl	800603e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <LL_RCC_SetClkAfterWakeFromStop>:
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80021a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <LL_FLASH_GetUDN+0x10>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	1fff7580 	.word	0x1fff7580

080021c8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <LL_FLASH_GetDeviceID+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	1fff7584 	.word	0x1fff7584

080021e0 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <LL_FLASH_GetSTCompanyID+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0a1b      	lsrs	r3, r3, #8
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	1fff7584 	.word	0x1fff7584

080021f8 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 80021fc:	2000      	movs	r0, #0
 80021fe:	f7ff ffc6 	bl	800218e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002202:	f01d f8d9 	bl	801f3b8 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <SystemApp_Init+0x48>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800220c:	f000 f986 	bl	800251c <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002210:	f01d fb62 	bl	801f8d8 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <SystemApp_Init+0x4c>)
 8002216:	f01d fc0d 	bl	801fa34 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <SystemApp_Init+0x50>)
 800221c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002220:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002222:	2002      	movs	r0, #2
 8002224:	f01d fc14 	bl	801fa50 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8002228:	f7ff f93e 	bl	80014a8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800222c:	f000 f9fc 	bl	8002628 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002230:	f01c fbcc 	bl	801e9cc <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002234:	2101      	movs	r1, #1
 8002236:	2001      	movs	r0, #1
 8002238:	f01c fc08 	bl	801ea4c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	2000025c 	.word	0x2000025c
 8002244:	0800240d 	.word	0x0800240d
 8002248:	58004000 	.word	0x58004000

0800224c <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002256:	f7ff f935 	bl	80014c4 <SYS_GetBatteryLevel>
 800225a:	4603      	mov	r3, r0
 800225c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800225e:	88bb      	ldrh	r3, [r7, #4]
 8002260:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002264:	4293      	cmp	r3, r2
 8002266:	d902      	bls.n	800226e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8002268:	23fe      	movs	r3, #254	; 0xfe
 800226a:	71fb      	strb	r3, [r7, #7]
 800226c:	e014      	b.n	8002298 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800226e:	88bb      	ldrh	r3, [r7, #4]
 8002270:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8002274:	d202      	bcs.n	800227c <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	e00d      	b.n	8002298 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800227c:	88bb      	ldrh	r3, [r7, #4]
 800227e:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8002282:	461a      	mov	r2, r3
 8002284:	4613      	mov	r3, r2
 8002286:	01db      	lsls	r3, r3, #7
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	461a      	mov	r2, r3
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <GetBatteryLevel+0x58>)
 8002290:	fba3 2302 	umull	r2, r3, r3, r2
 8002294:	09db      	lsrs	r3, r3, #7
 8002296:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002298:	79fb      	ldrb	r3, [r7, #7]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	1b4e81b5 	.word	0x1b4e81b5

080022a8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f98d 	bl	80025d4 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe fe8f 	bl	8000fe0 <__aeabi_f2iz>
 80022c2:	4603      	mov	r3, r0
 80022c4:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80022c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80022d2:	b590      	push	{r4, r7, lr}
 80022d4:	b087      	sub	sp, #28
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80022de:	f7ff ff69 	bl	80021b4 <LL_FLASH_GetUDN>
 80022e2:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ea:	d138      	bne.n	800235e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80022ec:	f002 fd16 	bl	8004d1c <HAL_GetUIDw0>
 80022f0:	4604      	mov	r4, r0
 80022f2:	f002 fd27 	bl	8004d44 <HAL_GetUIDw2>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4423      	add	r3, r4
 80022fa:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80022fc:	f002 fd18 	bl	8004d30 <HAL_GetUIDw1>
 8002300:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	0e1a      	lsrs	r2, r3, #24
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3307      	adds	r3, #7
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	0c1a      	lsrs	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3306      	adds	r3, #6
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	0a1a      	lsrs	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3305      	adds	r3, #5
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	0e1a      	lsrs	r2, r3, #24
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3303      	adds	r3, #3
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	0c1a      	lsrs	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3302      	adds	r3, #2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	0a1a      	lsrs	r2, r3, #8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3301      	adds	r3, #1
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800235c:	e031      	b.n	80023c2 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3307      	adds	r3, #7
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	0a1a      	lsrs	r2, r3, #8
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3306      	adds	r3, #6
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	0c1a      	lsrs	r2, r3, #16
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3305      	adds	r3, #5
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	0e1a      	lsrs	r2, r3, #24
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 800238c:	f7ff ff1c 	bl	80021c8 <LL_FLASH_GetDeviceID>
 8002390:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3303      	adds	r3, #3
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 800239c:	f7ff ff20 	bl	80021e0 <LL_FLASH_GetSTCompanyID>
 80023a0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3302      	adds	r3, #2
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	0a1a      	lsrs	r2, r3, #8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	0c1b      	lsrs	r3, r3, #16
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	701a      	strb	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	371c      	adds	r7, #28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd90      	pop	{r4, r7, pc}

080023ca <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80023ca:	b590      	push	{r4, r7, lr}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80023d2:	f7ff feef 	bl	80021b4 <LL_FLASH_GetUDN>
 80023d6:	4602      	mov	r2, r0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023e4:	d10d      	bne.n	8002402 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80023e6:	f002 fc99 	bl	8004d1c <HAL_GetUIDw0>
 80023ea:	4604      	mov	r4, r0
 80023ec:	f002 fca0 	bl	8004d30 <HAL_GetUIDw1>
 80023f0:	4603      	mov	r3, r0
 80023f2:	405c      	eors	r4, r3
 80023f4:	f002 fca6 	bl	8004d44 <HAL_GetUIDw2>
 80023f8:	4603      	mov	r3, r0
 80023fa:	ea84 0203 	eor.w	r2, r4, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bd90      	pop	{r4, r7, pc}
	...

0800240c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af02      	add	r7, sp, #8
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8002416:	f107 0308 	add.w	r3, r7, #8
 800241a:	4618      	mov	r0, r3
 800241c:	f01c fc20 	bl	801ec60 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002426:	9200      	str	r2, [sp, #0]
 8002428:	4a07      	ldr	r2, [pc, #28]	; (8002448 <TimestampNow+0x3c>)
 800242a:	2110      	movs	r1, #16
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f81d 	bl	800246c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fd fea0 	bl	8000178 <strlen>
 8002438:	4603      	mov	r3, r0
 800243a:	b29a      	uxth	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	0801ffc4 	.word	0x0801ffc4

0800244c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002450:	2101      	movs	r1, #1
 8002452:	2002      	movs	r0, #2
 8002454:	f01c faca 	bl	801e9ec <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}

0800245c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002460:	2100      	movs	r1, #0
 8002462:	2002      	movs	r0, #2
 8002464:	f01c fac2 	bl	801e9ec <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002468:	bf00      	nop
 800246a:	bd80      	pop	{r7, pc}

0800246c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 800246c:	b40c      	push	{r2, r3}
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800247e:	6839      	ldr	r1, [r7, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f01c fdbd 	bl	801f004 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002494:	b002      	add	sp, #8
 8002496:	4770      	bx	lr

08002498 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_GetTick+0x24>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d002      	beq.n	80024c4 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 80024be:	f000 f97f 	bl	80027c0 <TIMER_IF_GetTimerValue>
 80024c2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	2000025c 	.word	0x2000025c

080024d4 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f9f5 	bl	80028ce <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <LL_AHB2_GRP1_EnableClock>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8002522:	f002 fc19 	bl	8004d58 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002526:	f002 fc1d 	bl	8004d64 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800252a:	f002 fc21 	bl	8004d70 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ffcf 	bl	80024ec <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800254e:	2002      	movs	r0, #2
 8002550:	f7ff ffcc 	bl	80024ec <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8002554:	2002      	movs	r0, #2
 8002556:	f7ff ffc9 	bl	80024ec <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 800255a:	2002      	movs	r0, #2
 800255c:	f7ff ffc6 	bl	80024ec <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002560:	2301      	movs	r3, #1
 8002562:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800256c:	f004 fb88 	bl	8006c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002574:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	4619      	mov	r1, r3
 800257a:	4815      	ldr	r0, [pc, #84]	; (80025d0 <DBG_Init+0xb4>)
 800257c:	f004 fb80 	bl	8006c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002580:	2308      	movs	r3, #8
 8002582:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	4619      	mov	r1, r3
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <DBG_Init+0xb4>)
 800258a:	f004 fb79 	bl	8006c80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800258e:	2310      	movs	r3, #16
 8002590:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	4619      	mov	r1, r3
 8002596:	480e      	ldr	r0, [pc, #56]	; (80025d0 <DBG_Init+0xb4>)
 8002598:	f004 fb72 	bl	8006c80 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	2101      	movs	r1, #1
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a4:	f004 fd9a 	bl	80070dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ae:	4808      	ldr	r0, [pc, #32]	; (80025d0 <DBG_Init+0xb4>)
 80025b0:	f004 fd94 	bl	80070dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 80025b4:	2200      	movs	r2, #0
 80025b6:	2108      	movs	r1, #8
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <DBG_Init+0xb4>)
 80025ba:	f004 fd8f 	bl	80070dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	2110      	movs	r1, #16
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <DBG_Init+0xb4>)
 80025c4:	f004 fd8a 	bl	80070dc <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80025c8:	bf00      	nop
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	48000400 	.word	0x48000400

080025d4 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <EnvSensors_Read+0x40>)
 80025de:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <EnvSensors_Read+0x44>)
 80025e2:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80025e4:	4b0d      	ldr	r3, [pc, #52]	; (800261c <EnvSensors_Read+0x48>)
 80025e6:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a08      	ldr	r2, [pc, #32]	; (8002620 <EnvSensors_Read+0x4c>)
 80025fe:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a08      	ldr	r2, [pc, #32]	; (8002624 <EnvSensors_Read+0x50>)
 8002604:	611a      	str	r2, [r3, #16]

  return 0;
 8002606:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002608:	4618      	mov	r0, r3
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	42480000 	.word	0x42480000
 8002618:	41900000 	.word	0x41900000
 800261c:	447a0000 	.word	0x447a0000
 8002620:	003e090d 	.word	0x003e090d
 8002624:	000503ab 	.word	0x000503ab

08002628 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002632:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
}
 8002656:	4618      	mov	r0, r3
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <TIMER_IF_Init+0x5c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01b      	beq.n	80026b0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <TIMER_IF_Init+0x60>)
 800267a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002680:	f7ff fc52 	bl	8001f28 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002684:	f000 f856 	bl	8002734 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800268c:	480c      	ldr	r0, [pc, #48]	; (80026c0 <TIMER_IF_Init+0x60>)
 800268e:	f006 ffb7 	bl	8009600 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <TIMER_IF_Init+0x60>)
 8002694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002698:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800269a:	4809      	ldr	r0, [pc, #36]	; (80026c0 <TIMER_IF_Init+0x60>)
 800269c:	f007 f8ee 	bl	800987c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f000 f9d3 	bl	8002a4c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80026a6:	f000 f85f 	bl	8002768 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <TIMER_IF_Init+0x5c>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	2000025d 	.word	0x2000025d
 80026c0:	20000218 	.word	0x20000218

080026c4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08e      	sub	sp, #56	; 0x38
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80026d2:	f107 0308 	add.w	r3, r7, #8
 80026d6:	222c      	movs	r2, #44	; 0x2c
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f01d fc24 	bl	801ff28 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80026e0:	f000 f828 	bl	8002734 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <TIMER_IF_StartTimer+0x68>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80026fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002700:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002708:	f107 0308 	add.w	r3, r7, #8
 800270c:	2201      	movs	r2, #1
 800270e:	4619      	mov	r1, r3
 8002710:	4807      	ldr	r0, [pc, #28]	; (8002730 <TIMER_IF_StartTimer+0x6c>)
 8002712:	f006 fe69 	bl	80093e8 <HAL_RTC_SetAlarm_IT>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800271c:	f7ff fbd6 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002724:	4618      	mov	r0, r3
 8002726:	3738      	adds	r7, #56	; 0x38
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000260 	.word	0x20000260
 8002730:	20000218 	.word	0x20000218

08002734 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <TIMER_IF_StopTimer+0x2c>)
 8002740:	2201      	movs	r2, #1
 8002742:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002748:	4806      	ldr	r0, [pc, #24]	; (8002764 <TIMER_IF_StopTimer+0x30>)
 800274a:	f006 ff59 	bl	8009600 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <TIMER_IF_StopTimer+0x30>)
 8002750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002756:	79fb      	ldrb	r3, [r7, #7]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40002800 	.word	0x40002800
 8002764:	20000218 	.word	0x20000218

08002768 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800276c:	f000 f98e 	bl	8002a8c <GetTimerTicks>
 8002770:	4603      	mov	r3, r0
 8002772:	4a03      	ldr	r2, [pc, #12]	; (8002780 <TIMER_IF_SetTimerContext+0x18>)
 8002774:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002776:	4b02      	ldr	r3, [pc, #8]	; (8002780 <TIMER_IF_SetTimerContext+0x18>)
 8002778:	681b      	ldr	r3, [r3, #0]
}
 800277a:	4618      	mov	r0, r3
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000260 	.word	0x20000260

08002784 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002788:	4b02      	ldr	r3, [pc, #8]	; (8002794 <TIMER_IF_GetTimerContext+0x10>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	20000260 	.word	0x20000260

08002798 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80027a2:	f000 f973 	bl	8002a8c <GetTimerTicks>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <TIMER_IF_GetTimerElapsedTime+0x24>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80027b0:	687b      	ldr	r3, [r7, #4]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000260 	.word	0x20000260

080027c0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <TIMER_IF_GetTimerValue+0x24>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80027d2:	f000 f95b 	bl	8002a8c <GetTimerTicks>
 80027d6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80027d8:	687b      	ldr	r3, [r7, #4]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	2000025d 	.word	0x2000025d

080027e8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80027f2:	2303      	movs	r3, #3
 80027f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80027f6:	687b      	ldr	r3, [r7, #4]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002802:	b5b0      	push	{r4, r5, r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800280a:	2100      	movs	r1, #0
 800280c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	2000      	movs	r0, #0
 8002812:	460a      	mov	r2, r1
 8002814:	4603      	mov	r3, r0
 8002816:	0d95      	lsrs	r5, r2, #22
 8002818:	0294      	lsls	r4, r2, #10
 800281a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fe fc21 	bl	800106c <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4613      	mov	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bdb0      	pop	{r4, r5, r7, pc}

0800283c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800283c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002840:	b085      	sub	sp, #20
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002846:	2100      	movs	r1, #0
 8002848:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	2000      	movs	r0, #0
 800284e:	460c      	mov	r4, r1
 8002850:	4605      	mov	r5, r0
 8002852:	4620      	mov	r0, r4
 8002854:	4629      	mov	r1, r5
 8002856:	f04f 0a00 	mov.w	sl, #0
 800285a:	f04f 0b00 	mov.w	fp, #0
 800285e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002862:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002866:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800286a:	4650      	mov	r0, sl
 800286c:	4659      	mov	r1, fp
 800286e:	1b02      	subs	r2, r0, r4
 8002870:	eb61 0305 	sbc.w	r3, r1, r5
 8002874:	f04f 0000 	mov.w	r0, #0
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	0099      	lsls	r1, r3, #2
 800287e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002882:	0090      	lsls	r0, r2, #2
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	eb12 0804 	adds.w	r8, r2, r4
 800288c:	eb43 0905 	adc.w	r9, r3, r5
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800289c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028a4:	4690      	mov	r8, r2
 80028a6:	4699      	mov	r9, r3
 80028a8:	4640      	mov	r0, r8
 80028aa:	4649      	mov	r1, r9
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	0a82      	lsrs	r2, r0, #10
 80028b6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80028ba:	0a8b      	lsrs	r3, r1, #10
 80028bc:	4613      	mov	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80028c0:	68fb      	ldr	r3, [r7, #12]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80028cc:	4770      	bx	lr

080028ce <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ff93 	bl	8002802 <TIMER_IF_Convert_ms2Tick>
 80028dc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80028de:	f000 f8d5 	bl	8002a8c <GetTimerTicks>
 80028e2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80028e4:	e000      	b.n	80028e8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80028e6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80028e8:	f000 f8d0 	bl	8002a8c <GetTimerTicks>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d8f6      	bhi.n	80028e6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800290a:	f01c fea3 	bl	801f654 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800291e:	f000 f8a5 	bl	8002a6c <TIMER_IF_BkUp_Read_MSBticks>
 8002922:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3301      	adds	r3, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f88f 	bl	8002a4c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002936:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002944:	f000 f8a2 	bl	8002a8c <GetTimerTicks>
 8002948:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800294a:	f000 f88f 	bl	8002a6c <TIMER_IF_BkUp_Read_MSBticks>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	2200      	movs	r2, #0
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	60fa      	str	r2, [r7, #12]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	000b      	movs	r3, r1
 8002964:	2200      	movs	r2, #0
 8002966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002968:	2000      	movs	r0, #0
 800296a:	460c      	mov	r4, r1
 800296c:	4605      	mov	r5, r0
 800296e:	eb12 0804 	adds.w	r8, r2, r4
 8002972:	eb43 0905 	adc.w	r9, r3, r5
 8002976:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800297a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	f04f 0300 	mov.w	r3, #0
 8002986:	0a82      	lsrs	r2, r0, #10
 8002988:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 800298c:	0a8b      	lsrs	r3, r1, #10
 800298e:	4613      	mov	r3, r2
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2200      	movs	r2, #0
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80029a0:	f04f 0b00 	mov.w	fp, #0
 80029a4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff46 	bl	800283c <TIMER_IF_Convert_Tick2ms>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3730      	adds	r7, #48	; 0x30
 80029be:	46bd      	mov	sp, r7
 80029c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029c4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	2100      	movs	r1, #0
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80029d2:	f006 ffe5 	bl	80099a0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000218 	.word	0x20000218

080029e4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	2101      	movs	r1, #1
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80029f2:	f006 ffd5 	bl	80099a0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000218 	.word	0x20000218

08002a04 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4804      	ldr	r0, [pc, #16]	; (8002a24 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002a12:	f006 ffdd 	bl	80099d0 <HAL_RTCEx_BKUPRead>
 8002a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002a18:	687b      	ldr	r3, [r7, #4]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000218 	.word	0x20000218

08002a28 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002a32:	2101      	movs	r1, #1
 8002a34:	4804      	ldr	r0, [pc, #16]	; (8002a48 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002a36:	f006 ffcb 	bl	80099d0 <HAL_RTCEx_BKUPRead>
 8002a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002a3c:	687b      	ldr	r3, [r7, #4]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000218 	.word	0x20000218

08002a4c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	2102      	movs	r1, #2
 8002a58:	4803      	ldr	r0, [pc, #12]	; (8002a68 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002a5a:	f006 ffa1 	bl	80099a0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000218 	.word	0x20000218

08002a6c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002a72:	2102      	movs	r1, #2
 8002a74:	4804      	ldr	r0, [pc, #16]	; (8002a88 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002a76:	f006 ffab 	bl	80099d0 <HAL_RTCEx_BKUPRead>
 8002a7a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002a7c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000218 	.word	0x20000218

08002a8c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002a92:	480b      	ldr	r0, [pc, #44]	; (8002ac0 <GetTimerTicks+0x34>)
 8002a94:	f7ff fdd9 	bl	800264a <LL_RTC_TIME_GetSubSecond>
 8002a98:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002a9a:	e003      	b.n	8002aa4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002a9c:	4808      	ldr	r0, [pc, #32]	; (8002ac0 <GetTimerTicks+0x34>)
 8002a9e:	f7ff fdd4 	bl	800264a <LL_RTC_TIME_GetSubSecond>
 8002aa2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002aa4:	4806      	ldr	r0, [pc, #24]	; (8002ac0 <GetTimerTicks+0x34>)
 8002aa6:	f7ff fdd0 	bl	800264a <LL_RTC_TIME_GetSubSecond>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d1f4      	bne.n	8002a9c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40002800 	.word	0x40002800

08002ac4 <LL_AHB2_GRP1_EnableClock>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <LL_APB2_GRP1_EnableClock>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b18:	68fb      	ldr	r3, [r7, #12]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <LL_APB2_GRP1_DisableClock>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b4c:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b4e:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <MX_USART1_UART_Init+0x94>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b52:	4b21      	ldr	r3, [pc, #132]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b90:	4811      	ldr	r0, [pc, #68]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002b92:	f007 fc0e 	bl	800a3b2 <HAL_UART_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b9c:	f7ff f996 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002ba4:	f009 fd31 	bl	800c60a <HAL_UARTEx_SetTxFifoThreshold>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002bae:	f7ff f98d 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002bb6:	f009 fd66 	bl	800c686 <HAL_UARTEx_SetRxFifoThreshold>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002bc0:	f7ff f984 	bl	8001ecc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002bc4:	4804      	ldr	r0, [pc, #16]	; (8002bd8 <MX_USART1_UART_Init+0x90>)
 8002bc6:	f009 fce5 	bl	800c594 <HAL_UARTEx_EnableFifoMode>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002bd0:	f7ff f97c 	bl	8001ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000264 	.word	0x20000264
 8002bdc:	40013800 	.word	0x40013800

08002be0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b096      	sub	sp, #88	; 0x58
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bf8:	f107 030c 	add.w	r3, r7, #12
 8002bfc:	2238      	movs	r2, #56	; 0x38
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f01d f991 	bl	801ff28 <memset>
  if(uartHandle->Instance==USART1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a2f      	ldr	r2, [pc, #188]	; (8002cc8 <HAL_UART_MspInit+0xe8>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d156      	bne.n	8002cbe <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c10:	2301      	movs	r3, #1
 8002c12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c14:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002c18:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c1a:	f107 030c 	add.w	r3, r7, #12
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f006 fa46 	bl	80090b0 <HAL_RCCEx_PeriphCLKConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c2a:	f7ff f94f 	bl	8001ecc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c32:	f7ff ff5f 	bl	8002af4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c36:	2002      	movs	r0, #2
 8002c38:	f7ff ff44 	bl	8002ac4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002c3c:	23c0      	movs	r3, #192	; 0xc0
 8002c3e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c40:	2302      	movs	r3, #2
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c54:	4619      	mov	r1, r3
 8002c56:	481d      	ldr	r0, [pc, #116]	; (8002ccc <HAL_UART_MspInit+0xec>)
 8002c58:	f004 f812 	bl	8006c80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002c5c:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_UART_MspInit+0xf4>)
 8002c60:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c62:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c64:	2212      	movs	r2, #18
 8002c66:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c6a:	2210      	movs	r2, #16
 8002c6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c80:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c86:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c8c:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c92:	480f      	ldr	r0, [pc, #60]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002c94:	f003 f9f0 	bl	8006078 <HAL_DMA_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002c9e:	f7ff f915 	bl	8001ecc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002ca6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ca8:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_UART_MspInit+0xf0>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2102      	movs	r1, #2
 8002cb2:	2024      	movs	r0, #36	; 0x24
 8002cb4:	f003 f9a9 	bl	800600a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cb8:	2024      	movs	r0, #36	; 0x24
 8002cba:	f003 f9c0 	bl	800603e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3758      	adds	r7, #88	; 0x58
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	48000400 	.word	0x48000400
 8002cd0:	200002f8 	.word	0x200002f8
 8002cd4:	40020008 	.word	0x40020008

08002cd8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <HAL_UART_MspDeInit+0x3c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10f      	bne.n	8002d0a <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002cea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cee:	f7ff ff19 	bl	8002b24 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002cf2:	21c0      	movs	r1, #192	; 0xc0
 8002cf4:	4808      	ldr	r0, [pc, #32]	; (8002d18 <HAL_UART_MspDeInit+0x40>)
 8002cf6:	f004 f923 	bl	8006f40 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fa62 	bl	80061c8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002d04:	2024      	movs	r0, #36	; 0x24
 8002d06:	f003 f9a8 	bl	800605a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40013800 	.word	0x40013800
 8002d18:	48000400 	.word	0x48000400

08002d1c <LL_APB2_GRP1_ForceReset>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <LL_APB2_GRP1_ReleaseReset>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d54:	4013      	ands	r3, r2
 8002d56:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
	...

08002d64 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d72:	4905      	ldr	r1, [pc, #20]	; (8002d88 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	58000800 	.word	0x58000800

08002d8c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002d94:	4a07      	ldr	r2, [pc, #28]	; (8002db4 <vcom_Init+0x28>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002d9a:	f7fe fc25 	bl	80015e8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d9e:	f7ff fed3 	bl	8002b48 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002da2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002da6:	f7ff ffdd 	bl	8002d64 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002daa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	2000035c 	.word	0x2000035c

08002db8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002dbc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dc0:	f7ff ffac 	bl	8002d1c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002dc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dc8:	f7ff ffb9 	bl	8002d3e <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002dcc:	4804      	ldr	r0, [pc, #16]	; (8002de0 <vcom_DeInit+0x28>)
 8002dce:	f7ff ff83 	bl	8002cd8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002dd2:	200f      	movs	r0, #15
 8002dd4:	f003 f941 	bl	800605a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002dd8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000264 	.word	0x20000264

08002de4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4804      	ldr	r0, [pc, #16]	; (8002e08 <vcom_Trace_DMA+0x24>)
 8002df8:	f007 fb78 	bl	800a4ec <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002dfc:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000264 	.word	0x20000264

08002e0c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002e14:	4a19      	ldr	r2, [pc, #100]	; (8002e7c <vcom_ReceiveInit+0x70>)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e1e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002e20:	f107 0308 	add.w	r3, r7, #8
 8002e24:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002e28:	4815      	ldr	r0, [pc, #84]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e2a:	f009 fb26 	bl	800c47a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002e2e:	bf00      	nop
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e3e:	d0f7      	beq.n	8002e30 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002e40:	bf00      	nop
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e50:	d1f7      	bne.n	8002e42 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002e60:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002e62:	4807      	ldr	r0, [pc, #28]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e64:	f009 fb64 	bl	800c530 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4906      	ldr	r1, [pc, #24]	; (8002e84 <vcom_ReceiveInit+0x78>)
 8002e6c:	4804      	ldr	r0, [pc, #16]	; (8002e80 <vcom_ReceiveInit+0x74>)
 8002e6e:	f007 faf1 	bl	800a454 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002e72:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20000360 	.word	0x20000360
 8002e80:	20000264 	.word	0x20000264
 8002e84:	20000358 	.word	0x20000358

08002e88 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a05      	ldr	r2, [pc, #20]	; (8002eac <HAL_UART_TxCpltCallback+0x24>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d103      	bne.n	8002ea2 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <HAL_UART_TxCpltCallback+0x28>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	2000035c 	.word	0x2000035c

08002eb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <HAL_UART_RxCpltCallback+0x44>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d113      	bne.n	8002eee <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002ec6:	4b0d      	ldr	r3, [pc, #52]	; (8002efc <HAL_UART_RxCpltCallback+0x48>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_UART_RxCpltCallback+0x30>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <HAL_UART_RxCpltCallback+0x48>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2200      	movs	r2, #0
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4807      	ldr	r0, [pc, #28]	; (8002f00 <HAL_UART_RxCpltCallback+0x4c>)
 8002ee2:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4906      	ldr	r1, [pc, #24]	; (8002f00 <HAL_UART_RxCpltCallback+0x4c>)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f007 fab3 	bl	800a454 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	20000360 	.word	0x20000360
 8002f00:	20000358 	.word	0x20000358

08002f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f04:	480d      	ldr	r0, [pc, #52]	; (8002f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f08:	f7ff fb99 	bl	800263e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f0e:	490d      	ldr	r1, [pc, #52]	; (8002f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f10:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <LoopForever+0xe>)
  movs r3, #0
 8002f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f14:	e002      	b.n	8002f1c <LoopCopyDataInit>

08002f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1a:	3304      	adds	r3, #4

08002f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f20:	d3f9      	bcc.n	8002f16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f24:	4c0a      	ldr	r4, [pc, #40]	; (8002f50 <LoopForever+0x16>)
  movs r3, #0
 8002f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f28:	e001      	b.n	8002f2e <LoopFillZerobss>

08002f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f2c:	3204      	adds	r2, #4

08002f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f30:	d3fb      	bcc.n	8002f2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002f32:	f01d f801 	bl	801ff38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f36:	f7fe ff0f 	bl	8001d58 <main>

08002f3a <LoopForever>:

LoopForever:
    b LoopForever
 8002f3a:	e7fe      	b.n	8002f3a <LoopForever>
  ldr   r0, =_estack
 8002f3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f44:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8002f48:	08021084 	.word	0x08021084
  ldr r2, =_sbss
 8002f4c:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8002f50:	20002258 	.word	0x20002258

08002f54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f54:	e7fe      	b.n	8002f54 <ADC_IRQHandler>

08002f56 <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f001 fae2 	bl	800452c <null_ptr_check>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8002f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d131      	bne.n	8002fd8 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	7a1b      	ldrb	r3, [r3, #8]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d003      	beq.n	8002f84 <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	729a      	strb	r2, [r3, #10]
 8002f82:	e002      	b.n	8002f8a <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8002f8a:	f107 010e 	add.w	r1, r7, #14
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 f826 	bl	8002fe4 <bmp3_get_regs>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8002f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d119      	bne.n	8002fd8 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	2b50      	cmp	r3, #80	; 0x50
 8002fa8:	d002      	beq.n	8002fb0 <bmp3_init+0x5a>
 8002faa:	7bbb      	ldrb	r3, [r7, #14]
 8002fac:	2b60      	cmp	r3, #96	; 0x60
 8002fae:	d111      	bne.n	8002fd4 <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8002fb0:	7bba      	ldrb	r2, [r7, #14]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f98f 	bl	80032da <bmp3_soft_reset>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8002fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb37 	bl	800363c <get_calib_data>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8002fd2:	e001      	b.n	8002fd8 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8002fd4:	23fe      	movs	r3, #254	; 0xfe
 8002fd6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8002fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fe8:	b08b      	sub	sp, #44	; 0x2c
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002ff6:	6838      	ldr	r0, [r7, #0]
 8002ff8:	f001 fa98 	bl	800452c <null_ptr_check>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8003002:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003006:	2b00      	cmp	r3, #0
 8003008:	d172      	bne.n	80030f0 <bmp3_get_regs+0x10c>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d06f      	beq.n	80030f0 <bmp3_get_regs+0x10c>
    {
 8003010:	466b      	mov	r3, sp
 8003012:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	7a9b      	ldrb	r3, [r3, #10]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	7a9b      	ldrb	r3, [r3, #10]
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	18d1      	adds	r1, r2, r3
 800302a:	460b      	mov	r3, r1
 800302c:	3b01      	subs	r3, #1
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	2300      	movs	r3, #0
 8003032:	4688      	mov	r8, r1
 8003034:	4699      	mov	r9, r3
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304a:	2300      	movs	r3, #0
 800304c:	460c      	mov	r4, r1
 800304e:	461d      	mov	r5, r3
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	00eb      	lsls	r3, r5, #3
 800305a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800305e:	00e2      	lsls	r2, r4, #3
 8003060:	1dcb      	adds	r3, r1, #7
 8003062:	08db      	lsrs	r3, r3, #3
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	ebad 0d03 	sub.w	sp, sp, r3
 800306a:	466b      	mov	r3, sp
 800306c:	3300      	adds	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	7a1b      	ldrb	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d025      	beq.n	80030c4 <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800307e:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68dc      	ldr	r4, [r3, #12]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	7bf8      	ldrb	r0, [r7, #15]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	6979      	ldr	r1, [r7, #20]
 800308e:	47a0      	blx	r4
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8003098:	2300      	movs	r3, #0
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	e00d      	b.n	80030ba <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	7a9b      	ldrb	r3, [r3, #10]
 80030a2:	461a      	mov	r2, r3
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	441a      	add	r2, r3
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	440b      	add	r3, r1
 80030ae:	6979      	ldr	r1, [r7, #20]
 80030b0:	5c8a      	ldrb	r2, [r1, r2]
 80030b2:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	3301      	adds	r3, #1
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d3ed      	bcc.n	800309e <bmp3_get_regs+0xba>
 80030c2:	e00b      	b.n	80030dc <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68dc      	ldr	r4, [r3, #12]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	7bf8      	ldrb	r0, [r7, #15]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	47a0      	blx	r4
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 80030e6:	23f9      	movs	r3, #249	; 0xf9
 80030e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030ec:	46b5      	mov	sp, r6
    {
 80030ee:	e002      	b.n	80030f6 <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80030f0:	23ff      	movs	r3, #255	; 0xff
 80030f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80030f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	372c      	adds	r7, #44	; 0x2c
 80030fe:	46bd      	mov	sp, r7
 8003100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003104 <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8003104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003108:	b08b      	sub	sp, #44	; 0x2c
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	466b      	mov	r3, sp
 8003116:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	0059      	lsls	r1, r3, #1
 800311c:	460b      	mov	r3, r1
 800311e:	3b01      	subs	r3, #1
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	2300      	movs	r3, #0
 8003124:	4688      	mov	r8, r1
 8003126:	4699      	mov	r9, r3
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003134:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003138:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313c:	2300      	movs	r3, #0
 800313e:	460c      	mov	r4, r1
 8003140:	461d      	mov	r5, r3
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	00eb      	lsls	r3, r5, #3
 800314c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003150:	00e2      	lsls	r2, r4, #3
 8003152:	1dcb      	adds	r3, r1, #7
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	ebad 0d03 	sub.w	sp, sp, r3
 800315c:	466b      	mov	r3, sp
 800315e:	3300      	adds	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003162:	6838      	ldr	r0, [r7, #0]
 8003164:	f001 f9e2 	bl	800452c <null_ptr_check>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800316e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003172:	2b00      	cmp	r3, #0
 8003174:	d14e      	bne.n	8003214 <bmp3_set_regs+0x110>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d04b      	beq.n	8003214 <bmp3_set_regs+0x110>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d048      	beq.n	8003214 <bmp3_set_regs+0x110>
    {
        if (len != 0)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d041      	beq.n	800320c <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	7a1b      	ldrb	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d114      	bne.n	80031c2 <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003198:	2300      	movs	r3, #0
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e00d      	b.n	80031ba <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800319e:	7ffb      	ldrb	r3, [r7, #31]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	68f9      	ldr	r1, [r7, #12]
 80031aa:	440b      	add	r3, r1
 80031ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80031b4:	7ffb      	ldrb	r3, [r7, #31]
 80031b6:	3301      	adds	r3, #1
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	7ffb      	ldrb	r3, [r7, #31]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d8ed      	bhi.n	800319e <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d909      	bls.n	80031dc <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa59 	bl	8003686 <interleave_reg_addr>
                temp_len = len * 2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	e001      	b.n	80031e0 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691c      	ldr	r4, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	7818      	ldrb	r0, [r3, #0]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	6a3a      	ldr	r2, [r7, #32]
 80031ee:	6979      	ldr	r1, [r7, #20]
 80031f0:	47a0      	blx	r4
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00b      	beq.n	800321c <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 8003204:	23f9      	movs	r3, #249	; 0xf9
 8003206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 800320a:	e007      	b.n	800321c <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 800320c:	23fa      	movs	r3, #250	; 0xfa
 800320e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 8003212:	e003      	b.n	800321c <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003214:	23ff      	movs	r3, #255	; 0xff
 8003216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800321a:	e000      	b.n	800321e <bmp3_set_regs+0x11a>
        if (len != 0)
 800321c:	bf00      	nop
    }

    return rslt;
 800321e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003222:	46b5      	mov	sp, r6
}
 8003224:	4618      	mov	r0, r3
 8003226:	372c      	adds	r7, #44	; 0x2c
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800322e <bmp3_set_sensor_settings>:
 * @brief This API sets the power control(pressure enable and
 * temperature enable), over sampling, ODR and filter
 * settings in the sensor.
 */
int8_t bmp3_set_sensor_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003238:	6838      	ldr	r0, [r7, #0]
 800323a:	f001 f977 	bl	800452c <null_ptr_check>
 800323e:	4603      	mov	r3, r0
 8003240:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8003242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d141      	bne.n	80032ce <bmp3_set_sensor_settings+0xa0>
    {
        if (are_settings_changed(BMP3_POWER_CNTL, desired_settings))
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	2006      	movs	r0, #6
 800324e:	f001 f956 	bl	80044fe <are_settings_changed>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <bmp3_set_sensor_settings+0x36>
        {
            /* Set the power control settings */
            rslt = set_pwr_ctrl_settings(desired_settings, dev);
 8003258:	6839      	ldr	r1, [r7, #0]
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fa77 	bl	800374e <set_pwr_ctrl_settings>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ODR_FILTER, desired_settings) && (!rslt))
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	20f0      	movs	r0, #240	; 0xf0
 8003268:	f001 f949 	bl	80044fe <are_settings_changed>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <bmp3_set_sensor_settings+0x58>
 8003272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d105      	bne.n	8003286 <bmp3_set_sensor_settings+0x58>
        {
            /* Set the over sampling, ODR and filter settings*/
            rslt = set_odr_filter_settings(desired_settings, dev);
 800327a:	6839      	ldr	r1, [r7, #0]
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fab5 	bl	80037ec <set_odr_filter_settings>
 8003282:	4603      	mov	r3, r0
 8003284:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_INT_CTRL, desired_settings) && (!rslt))
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 800328c:	f001 f937 	bl	80044fe <are_settings_changed>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <bmp3_set_sensor_settings+0x7c>
 8003296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <bmp3_set_sensor_settings+0x7c>
        {
            /* Set the interrupt control settings */
            rslt = set_int_ctrl_settings(desired_settings, dev);
 800329e:	6839      	ldr	r1, [r7, #0]
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fb11 	bl	80038c8 <set_int_ctrl_settings>
 80032a6:	4603      	mov	r3, r0
 80032a8:	73fb      	strb	r3, [r7, #15]
        }

        if (are_settings_changed(BMP3_ADV_SETT, desired_settings) && (!rslt))
 80032aa:	6879      	ldr	r1, [r7, #4]
 80032ac:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80032b0:	f001 f925 	bl	80044fe <are_settings_changed>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <bmp3_set_sensor_settings+0xa0>
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <bmp3_set_sensor_settings+0xa0>
        {
            /* Set the advance settings */
            rslt = set_advance_settings(desired_settings, dev);
 80032c2:	6839      	ldr	r1, [r7, #0]
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fb78 	bl	80039ba <set_advance_settings>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 80032e2:	237e      	movs	r3, #126	; 0x7e
 80032e4:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 80032e6:	23b6      	movs	r3, #182	; 0xb6
 80032e8:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f001 f91e 	bl	800452c <null_ptr_check>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80032f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d140      	bne.n	800337e <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 80032fc:	f107 010c 	add.w	r1, r7, #12
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	2003      	movs	r0, #3
 8003306:	f7ff fe6d 	bl	8002fe4 <bmp3_get_regs>
 800330a:	4603      	mov	r3, r0
 800330c:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 800330e:	7b3b      	ldrb	r3, [r7, #12]
 8003310:	f003 0310 	and.w	r3, r3, #16
 8003314:	2b00      	cmp	r3, #0
 8003316:	d02e      	beq.n	8003376 <bmp3_soft_reset+0x9c>
 8003318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d12a      	bne.n	8003376 <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003320:	f107 010d 	add.w	r1, r7, #13
 8003324:	f107 000e 	add.w	r0, r7, #14
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f7ff feea 	bl	8003104 <bmp3_set_regs>
 8003330:	4603      	mov	r3, r0
 8003332:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d11f      	bne.n	800337c <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6852      	ldr	r2, [r2, #4]
 8003344:	4611      	mov	r1, r2
 8003346:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800334a:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 800334c:	f107 010b 	add.w	r1, r7, #11
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	2002      	movs	r0, #2
 8003356:	f7ff fe45 	bl	8002fe4 <bmp3_get_regs>
 800335a:	4603      	mov	r3, r0
 800335c:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800335e:	7afb      	ldrb	r3, [r7, #11]
 8003360:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <bmp3_soft_reset+0x96>
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 8003370:	23fc      	movs	r3, #252	; 0xfc
 8003372:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 8003374:	e002      	b.n	800337c <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 8003376:	23fc      	movs	r3, #252	; 0xfc
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e000      	b.n	800337e <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 800337c:	bf00      	nop
        }
    }

    return rslt;
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <bmp3_set_op_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmp3_set_op_mode(struct bmp3_dev *dev)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f001 f8ca 	bl	800452c <null_ptr_check>
 8003398:	4603      	mov	r3, r0
 800339a:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800339c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d130      	bne.n	8003406 <bmp3_set_op_mode+0x7c>
    {
        uint8_t curr_mode = dev->settings.op_mode;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80033aa:	73bb      	strb	r3, [r7, #14]

        rslt = bmp3_get_op_mode(&last_set_mode, dev);
 80033ac:	f107 030d 	add.w	r3, r7, #13
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f82d 	bl	8003412 <bmp3_get_op_mode>
 80033b8:	4603      	mov	r3, r0
 80033ba:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode */
        if (last_set_mode != BMP3_MODE_SLEEP)
 80033bc:	7b7b      	ldrb	r3, [r7, #13]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00c      	beq.n	80033dc <bmp3_set_op_mode+0x52>
        {
            /* Device should be put to sleep before transiting to
             * forced mode or normal mode */
            rslt = put_device_to_sleep(dev);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8fa 	bl	80035bc <put_device_to_sleep>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]

            /* Give some time for device to go into sleep mode */
            dev->delay_us(5000, dev->intf_ptr);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6852      	ldr	r2, [r2, #4]
 80033d4:	4611      	mov	r1, r2
 80033d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80033da:	4798      	blx	r3
        }

        /* Set the power mode */
        if (rslt == BMP3_OK)
 80033dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d110      	bne.n	8003406 <bmp3_set_op_mode+0x7c>
        {
            if (curr_mode == BMP3_MODE_NORMAL)
 80033e4:	7bbb      	ldrb	r3, [r7, #14]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d105      	bne.n	80033f6 <bmp3_set_op_mode+0x6c>
            {
                /* Set normal mode and validate
                 * necessary settings */
                rslt = set_normal_mode(dev);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f880 	bl	80034f0 <set_normal_mode>
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e007      	b.n	8003406 <bmp3_set_op_mode+0x7c>
            }
            else if (curr_mode == BMP3_MODE_FORCED)
 80033f6:	7bbb      	ldrb	r3, [r7, #14]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d104      	bne.n	8003406 <bmp3_set_op_mode+0x7c>
            {
                /* Set forced mode */
                rslt = write_power_mode(dev);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f8a7 	bl	8003550 <write_power_mode>
 8003402:	4603      	mov	r3, r0
 8003404:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <bmp3_get_op_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bmp3_get_op_mode(uint8_t *op_mode, struct bmp3_dev *dev)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800341c:	6838      	ldr	r0, [r7, #0]
 800341e:	f001 f885 	bl	800452c <null_ptr_check>
 8003422:	4603      	mov	r3, r0
 8003424:	73fb      	strb	r3, [r7, #15]

    if ((rslt == BMP3_OK) && (op_mode != NULL))
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d114      	bne.n	8003458 <bmp3_get_op_mode+0x46>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d011      	beq.n	8003458 <bmp3_get_op_mode+0x46>
    {
        /* Read the power mode register */
        rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, op_mode, 1, dev);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	201b      	movs	r0, #27
 800343c:	f7ff fdd2 	bl	8002fe4 <bmp3_get_regs>
 8003440:	4603      	mov	r3, r0
 8003442:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *op_mode = BMP3_GET_BITS(*op_mode, BMP3_OP_MODE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	111b      	asrs	r3, r3, #4
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e001      	b.n	800345c <bmp3_get_op_mode+0x4a>
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003458:	23ff      	movs	r3, #255	; 0xff
 800345a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800345c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <bmp3_get_sensor_data>:
 * @brief This API reads the pressure, temperature or both data from the
 * sensor, compensates the data and store it in the bmp3_data structure
 * instance passed by the user.
 */
int8_t bmp3_get_sensor_data(uint8_t sensor_comp, struct bmp3_data *comp_data, struct bmp3_dev *dev)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure and temperature data read from
     * the sensor */
    uint8_t reg_data[BMP3_LEN_P_T_DATA] = { 0 };
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	2300      	movs	r3, #0
 800347c:	83bb      	strh	r3, [r7, #28]
    struct bmp3_uncomp_data uncomp_data = { 0 };
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	605a      	str	r2, [r3, #4]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f001 f84f 	bl	800452c <null_ptr_check>
 800348e:	4603      	mov	r3, r0
 8003490:	77fb      	strb	r3, [r7, #31]

    if ((rslt == BMP3_OK) && (comp_data != NULL))
 8003492:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d122      	bne.n	80034e0 <bmp3_get_sensor_data+0x78>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01f      	beq.n	80034e0 <bmp3_get_sensor_data+0x78>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bmp3_get_regs(BMP3_REG_DATA, reg_data, BMP3_LEN_P_T_DATA, dev);
 80034a0:	f107 0118 	add.w	r1, r7, #24
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2206      	movs	r2, #6
 80034a8:	2004      	movs	r0, #4
 80034aa:	f7ff fd9b 	bl	8002fe4 <bmp3_get_regs>
 80034ae:	4603      	mov	r3, r0
 80034b0:	77fb      	strb	r3, [r7, #31]

        if (rslt == BMP3_OK)
 80034b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d114      	bne.n	80034e4 <bmp3_get_sensor_data+0x7c>
        {
            /* Parse the read data from the sensor */
            parse_sensor_data(reg_data, &uncomp_data);
 80034ba:	f107 0210 	add.w	r2, r7, #16
 80034be:	f107 0318 	add.w	r3, r7, #24
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fc66 	bl	8003d96 <parse_sensor_data>

            /* Compensate the pressure/temperature/both data read
             * from the sensor */
            rslt = compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3318      	adds	r3, #24
 80034ce:	f107 0110 	add.w	r1, r7, #16
 80034d2:	7bf8      	ldrb	r0, [r7, #15]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	f000 fc91 	bl	8003dfc <compensate_data>
 80034da:	4603      	mov	r3, r0
 80034dc:	77fb      	strb	r3, [r7, #31]
        if (rslt == BMP3_OK)
 80034de:	e001      	b.n	80034e4 <bmp3_get_sensor_data+0x7c>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 80034e0:	23ff      	movs	r3, #255	; 0xff
 80034e2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80034e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <set_normal_mode>:

/*!
 * @brief This internal API sets the normal mode in the sensor.
 */
static int8_t set_normal_mode(struct bmp3_dev *dev)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t conf_err_status;

    rslt = validate_normal_mode_settings(dev);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f887 	bl	800360c <validate_normal_mode_settings>
 80034fe:	4603      	mov	r3, r0
 8003500:	73fb      	strb	r3, [r7, #15]

    /* If OSR and ODR settings are proper then write the power mode */
    if (rslt == BMP3_OK)
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11c      	bne.n	8003544 <set_normal_mode+0x54>
    {
        rslt = write_power_mode(dev);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f820 	bl	8003550 <write_power_mode>
 8003510:	4603      	mov	r3, r0
 8003512:	73fb      	strb	r3, [r7, #15]

        /* check for configuration error */
        if (rslt == BMP3_OK)
 8003514:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d113      	bne.n	8003544 <set_normal_mode+0x54>
        {
            /* Read the configuration error status */
            rslt = bmp3_get_regs(BMP3_REG_ERR, &conf_err_status, 1, dev);
 800351c:	f107 010e 	add.w	r1, r7, #14
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	2002      	movs	r0, #2
 8003526:	f7ff fd5d 	bl	8002fe4 <bmp3_get_regs>
 800352a:	4603      	mov	r3, r0
 800352c:	73fb      	strb	r3, [r7, #15]

            /* Check if conf. error flag is set */
            if (rslt == BMP3_OK)
 800352e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <set_normal_mode+0x54>
            {
                if (conf_err_status & BMP3_ERR_CONF)
 8003536:	7bbb      	ldrb	r3, [r7, #14]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <set_normal_mode+0x54>
                {
                    /* OSR and ODR configuration is not proper */
                    rslt = BMP3_E_CONFIGURATION_ERR;
 8003540:	23fb      	movs	r3, #251	; 0xfb
 8003542:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8003544:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(struct bmp3_dev *dev)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003558:	231b      	movs	r3, #27
 800355a:	737b      	strb	r3, [r7, #13]
    uint8_t op_mode = dev->settings.op_mode;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8003562:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    /* Read the power mode register */
    rslt = bmp3_get_regs(reg_addr, &op_mode_reg_val, 1, dev);
 8003564:	7b78      	ldrb	r0, [r7, #13]
 8003566:	f107 010c 	add.w	r1, r7, #12
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f7ff fd39 	bl	8002fe4 <bmp3_get_regs>
 8003572:	4603      	mov	r3, r0
 8003574:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BMP3_OK)
 8003576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d118      	bne.n	80035b0 <write_power_mode+0x60>
    {
        op_mode_reg_val = BMP3_SET_BITS(op_mode_reg_val, BMP3_OP_MODE, op_mode);
 800357e:	7b3b      	ldrb	r3, [r7, #12]
 8003580:	b25b      	sxtb	r3, r3
 8003582:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003586:	b25a      	sxtb	r2, r3
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	b25b      	sxtb	r3, r3
 800358e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003592:	b25b      	sxtb	r3, r3
 8003594:	4313      	orrs	r3, r2
 8003596:	b25b      	sxtb	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	733b      	strb	r3, [r7, #12]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 800359c:	f107 010c 	add.w	r1, r7, #12
 80035a0:	f107 000d 	add.w	r0, r7, #13
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f7ff fdac 	bl	8003104 <bmp3_set_regs>
 80035ac:	4603      	mov	r3, r0
 80035ae:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80035b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(struct bmp3_dev *dev)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 80035c4:	231b      	movs	r3, #27
 80035c6:	73bb      	strb	r3, [r7, #14]

    /* Temporary variable to store the value read from op-mode register */
    uint8_t op_mode_reg_val;

    rslt = bmp3_get_regs(BMP3_REG_PWR_CTRL, &op_mode_reg_val, 1, dev);
 80035c8:	f107 010d 	add.w	r1, r7, #13
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	201b      	movs	r0, #27
 80035d2:	f7ff fd07 	bl	8002fe4 <bmp3_get_regs>
 80035d6:	4603      	mov	r3, r0
 80035d8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80035da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <put_device_to_sleep+0x44>
    {
        /* Set the power mode */
        op_mode_reg_val = op_mode_reg_val & (~(BMP3_OP_MODE_MSK));
 80035e2:	7b7b      	ldrb	r3, [r7, #13]
 80035e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bmp3_set_regs(&reg_addr, &op_mode_reg_val, 1, dev);
 80035ec:	f107 010d 	add.w	r1, r7, #13
 80035f0:	f107 000e 	add.w	r0, r7, #14
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f7ff fd84 	bl	8003104 <bmp3_set_regs>
 80035fc:	4603      	mov	r3, r0
 80035fe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <validate_normal_mode_settings>:

/*!
 * @brief This internal API validate the normal mode settings of the sensor.
 */
static int8_t validate_normal_mode_settings(struct bmp3_dev *dev)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = get_odr_filter_settings(dev);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fa22 	bl	8003a5e <get_odr_filter_settings>
 800361a:	4603      	mov	r3, r0
 800361c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <validate_normal_mode_settings+0x24>
    {
        rslt = validate_osr_and_odr_settings(dev);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa36 	bl	8003a98 <validate_osr_and_odr_settings>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 8003644:	2331      	movs	r3, #49	; 0x31
 8003646:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8003648:	2300      	movs	r3, #0
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	60da      	str	r2, [r3, #12]
 800365a:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 800365c:	f107 0108 	add.w	r1, r7, #8
 8003660:	7ff8      	ldrb	r0, [r7, #31]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2215      	movs	r2, #21
 8003666:	f7ff fcbd 	bl	8002fe4 <bmp3_get_regs>
 800366a:	4603      	mov	r3, r0
 800366c:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fbf9 	bl	8003e6c <parse_calib_data>

    return rslt;
 800367a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 8003686:	b480      	push	{r7}
 8003688:	b087      	sub	sp, #28
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 8003694:	2301      	movs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e015      	b.n	80036c6 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	441a      	add	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	440b      	add	r3, r1
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	441a      	add	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	440b      	add	r3, r1
 80036bc:	7812      	ldrb	r2, [r2, #0]
 80036be:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3301      	adds	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d3e5      	bcc.n	800369a <interleave_reg_addr+0x14>
    }
}
 80036ce:	bf00      	nop
 80036d0:	bf00      	nop
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr

080036da <parse_odr_filter_settings>:
/*!
 * @brief This internal API parse the over sampling, ODR and filter
 * settings and store in the device structure.
 */
static void  parse_odr_filter_settings(const uint8_t *reg_data, struct bmp3_odr_filter_settings *settings)
{
 80036da:	b480      	push	{r7}
 80036dc:	b085      	sub	sp, #20
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
 80036e2:	6039      	str	r1, [r7, #0]
    uint8_t index = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]

    /* ODR and filter settings index starts from one (0x1C register) */
    settings->press_os = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_PRESS_OS);
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	701a      	strb	r2, [r3, #0]
    settings->temp_os = BMP3_GET_BITS(reg_data[index], BMP3_TEMP_OS);
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	10db      	asrs	r3, r3, #3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	705a      	strb	r2, [r3, #1]

    /* Move index to 0x1D register */
    index++;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
    settings->odr = BMP3_GET_BITS_POS_0(reg_data[index], BMP3_ODR);
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	b2da      	uxtb	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	70da      	strb	r2, [r3, #3]

    /* Move index to 0x1F register */
    index = index + 2;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3302      	adds	r3, #2
 800372c:	73fb      	strb	r3, [r7, #15]
    settings->iir_filter = BMP3_GET_BITS(reg_data[index], BMP3_IIR_FILTER);
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4413      	add	r3, r2
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	105b      	asrs	r3, r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	b2da      	uxtb	r2, r3
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	709a      	strb	r2, [r3, #2]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr

0800374e <set_pwr_ctrl_settings>:
/*!
 * @brief This API sets the pressure enable and temperature enable
 * settings of the sensor.
 */
static int8_t set_pwr_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_PWR_CTRL;
 8003758:	231b      	movs	r3, #27
 800375a:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_data;

    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 800375c:	7bb8      	ldrb	r0, [r7, #14]
 800375e:	f107 010d 	add.w	r1, r7, #13
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2201      	movs	r2, #1
 8003766:	f7ff fc3d 	bl	8002fe4 <bmp3_get_regs>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d134      	bne.n	80037e0 <set_pwr_ctrl_settings+0x92>
    {
        if (desired_settings & BMP3_SEL_PRESS_EN)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00f      	beq.n	80037a0 <set_pwr_ctrl_settings+0x52>
        {
            /* Set the pressure enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_PRESS_EN, dev->settings.press_en);
 8003780:	7b7b      	ldrb	r3, [r7, #13]
 8003782:	b25b      	sxtb	r3, r3
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	b25a      	sxtb	r2, r3
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003790:	b25b      	sxtb	r3, r3
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	b25b      	sxtb	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b25b      	sxtb	r3, r3
 800379c:	b2db      	uxtb	r3, r3
 800379e:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_TEMP_EN)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <set_pwr_ctrl_settings+0x7e>
        {
            /* Set the temperature enable settings in the
             * register variable */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_TEMP_EN, dev->settings.temp_en);
 80037aa:	7b7b      	ldrb	r3, [r7, #13]
 80037ac:	b25b      	sxtb	r3, r3
 80037ae:	f023 0302 	bic.w	r3, r3, #2
 80037b2:	b25a      	sxtb	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	4313      	orrs	r3, r2
 80037c6:	b25b      	sxtb	r3, r3
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	737b      	strb	r3, [r7, #13]
        }

        /* Write the power control settings in the register */
        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 80037cc:	f107 010d 	add.w	r1, r7, #13
 80037d0:	f107 000e 	add.w	r0, r7, #14
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f7ff fc94 	bl	8003104 <bmp3_set_regs>
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <set_odr_filter_settings>:
/*!
 * @brief This internal API sets the over sampling, ODR and filter settings
 * of the sensor based on the settings selected by the user.
 */
static int8_t set_odr_filter_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* No of registers to be configured is 3*/
    uint8_t reg_addr[3] = { 0 };
 80037f6:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <set_odr_filter_settings+0xd8>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	82bb      	strh	r3, [r7, #20]
 80037fc:	2300      	movs	r3, #0
 80037fe:	75bb      	strb	r3, [r7, #22]

    /* No of register data to be read is 4 */
    uint8_t reg_data[4];
    uint8_t len = 0;
 8003800:	2300      	movs	r3, #0
 8003802:	73fb      	strb	r3, [r7, #15]

    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003804:	f107 0110 	add.w	r1, r7, #16
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2204      	movs	r2, #4
 800380c:	201c      	movs	r0, #28
 800380e:	f7ff fbe9 	bl	8002fe4 <bmp3_get_regs>
 8003812:	4603      	mov	r3, r0
 8003814:	75fb      	strb	r3, [r7, #23]

    if (rslt == BMP3_OK)
 8003816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d14b      	bne.n	80038b6 <set_odr_filter_settings+0xca>
    {
        if (are_settings_changed((BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS), desired_settings))
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	2030      	movs	r0, #48	; 0x30
 8003822:	f000 fe6c 	bl	80044fe <are_settings_changed>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <set_odr_filter_settings+0x58>
        {
            /* Fill the over sampling register address and
            * register data to be written in the sensor */
            fill_osr_data(desired_settings, reg_addr, reg_data, &len, dev);
 800382c:	f107 000f 	add.w	r0, r7, #15
 8003830:	f107 0210 	add.w	r2, r7, #16
 8003834:	f107 0114 	add.w	r1, r7, #20
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	4603      	mov	r3, r0
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f9e4 	bl	8003c0c <fill_osr_data>
        }

        if (are_settings_changed(BMP3_SEL_ODR, desired_settings))
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	2080      	movs	r0, #128	; 0x80
 8003848:	f000 fe59 	bl	80044fe <are_settings_changed>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <set_odr_filter_settings+0x78>
        {
            /* Fill the output data rate register address and
             * register data to be written in the sensor */
            fill_odr_data(reg_addr, reg_data, &len, dev);
 8003852:	f107 020f 	add.w	r2, r7, #15
 8003856:	f107 0110 	add.w	r1, r7, #16
 800385a:	f107 0014 	add.w	r0, r7, #20
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f000 fa2b 	bl	8003cba <fill_odr_data>
        }

        if (are_settings_changed(BMP3_SEL_IIR_FILTER, desired_settings))
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	2040      	movs	r0, #64	; 0x40
 8003868:	f000 fe49 	bl	80044fe <are_settings_changed>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <set_odr_filter_settings+0x98>
        {
            /* Fill the iir filter register address and
             * register data to be written in the sensor */
            fill_filter_data(reg_addr, reg_data, &len, dev);
 8003872:	f107 020f 	add.w	r2, r7, #15
 8003876:	f107 0110 	add.w	r1, r7, #16
 800387a:	f107 0014 	add.w	r0, r7, #20
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f000 fa54 	bl	8003d2c <fill_filter_data>
        }

        if (dev->settings.op_mode == BMP3_MODE_NORMAL)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800388a:	2b03      	cmp	r3, #3
 800388c:	d104      	bne.n	8003898 <set_odr_filter_settings+0xac>
        {
            /* For normal mode, OSR and ODR settings should
             * be proper */
            rslt = validate_osr_and_odr_settings(dev);
 800388e:	6838      	ldr	r0, [r7, #0]
 8003890:	f000 f902 	bl	8003a98 <validate_osr_and_odr_settings>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]
        }

        if (rslt == BMP3_OK)
 8003898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10a      	bne.n	80038b6 <set_odr_filter_settings+0xca>
        {
            /* Burst write the over sampling, ODR and filter
             * settings in the register */
            rslt = bmp3_set_regs(reg_addr, reg_data, len, dev);
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f107 0110 	add.w	r1, r7, #16
 80038a8:	f107 0014 	add.w	r0, r7, #20
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	f7ff fc29 	bl	8003104 <bmp3_set_regs>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80038b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	0801ffd0 	.word	0x0801ffd0

080038c8 <set_int_ctrl_settings>:
 * @brief This internal API sets the interrupt control (output mode, level,
 * latch and data ready) settings of the sensor based on the settings
 * selected by the user.
 */
static int8_t set_int_ctrl_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_data;
    uint8_t reg_addr;
    struct bmp3_int_ctrl_settings int_settings;

    reg_addr = BMP3_REG_INT_CTRL;
 80038d2:	2319      	movs	r3, #25
 80038d4:	737b      	strb	r3, [r7, #13]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80038d6:	7b78      	ldrb	r0, [r7, #13]
 80038d8:	f107 010e 	add.w	r1, r7, #14
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	f7ff fb80 	bl	8002fe4 <bmp3_get_regs>
 80038e4:	4603      	mov	r3, r0
 80038e6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80038e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d15e      	bne.n	80039ae <set_int_ctrl_settings+0xe6>
    {
        int_settings = dev->settings.int_settings;
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	f107 0308 	add.w	r3, r7, #8
 80038f6:	32b7      	adds	r2, #183	; 0xb7
 80038f8:	6810      	ldr	r0, [r2, #0]
 80038fa:	6018      	str	r0, [r3, #0]

        if (desired_settings & BMP3_SEL_OUTPUT_MODE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00d      	beq.n	8003922 <set_int_ctrl_settings+0x5a>
        {
            /* Set the interrupt output mode bits */
            reg_data = BMP3_SET_BITS_POS_0(reg_data, BMP3_INT_OUTPUT_MODE, int_settings.output_mode);
 8003906:	7bbb      	ldrb	r3, [r7, #14]
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f023 0301 	bic.w	r3, r3, #1
 800390e:	b25a      	sxtb	r2, r3
 8003910:	7a3b      	ldrb	r3, [r7, #8]
 8003912:	b25b      	sxtb	r3, r3
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	b25b      	sxtb	r3, r3
 800391a:	4313      	orrs	r3, r2
 800391c:	b25b      	sxtb	r3, r3
 800391e:	b2db      	uxtb	r3, r3
 8003920:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LEVEL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00e      	beq.n	800394a <set_int_ctrl_settings+0x82>
        {
            /* Set the interrupt level bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LEVEL, int_settings.level);
 800392c:	7bbb      	ldrb	r3, [r7, #14]
 800392e:	b25b      	sxtb	r3, r3
 8003930:	f023 0302 	bic.w	r3, r3, #2
 8003934:	b25a      	sxtb	r2, r3
 8003936:	7a7b      	ldrb	r3, [r7, #9]
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	b25b      	sxtb	r3, r3
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	b25b      	sxtb	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	b25b      	sxtb	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_LATCH)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <set_int_ctrl_settings+0xaa>
        {
            /* Set the interrupt latch bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_LATCH, int_settings.latch);
 8003954:	7bbb      	ldrb	r3, [r7, #14]
 8003956:	b25b      	sxtb	r3, r3
 8003958:	f023 0304 	bic.w	r3, r3, #4
 800395c:	b25a      	sxtb	r2, r3
 800395e:	7abb      	ldrb	r3, [r7, #10]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	b25b      	sxtb	r3, r3
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	b25b      	sxtb	r3, r3
 800396a:	4313      	orrs	r3, r2
 800396c:	b25b      	sxtb	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	73bb      	strb	r3, [r7, #14]
        }

        if (desired_settings & BMP3_SEL_DRDY_EN)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00e      	beq.n	800399a <set_int_ctrl_settings+0xd2>
        {
            /* Set the interrupt data ready bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_INT_DRDY_EN, int_settings.drdy_en);
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	b25b      	sxtb	r3, r3
 8003980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003984:	b25a      	sxtb	r2, r3
 8003986:	7afb      	ldrb	r3, [r7, #11]
 8003988:	019b      	lsls	r3, r3, #6
 800398a:	b25b      	sxtb	r3, r3
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	b25b      	sxtb	r3, r3
 8003992:	4313      	orrs	r3, r2
 8003994:	b25b      	sxtb	r3, r3
 8003996:	b2db      	uxtb	r3, r3
 8003998:	73bb      	strb	r3, [r7, #14]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 800399a:	f107 010e 	add.w	r1, r7, #14
 800399e:	f107 000d 	add.w	r0, r7, #13
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f7ff fbad 	bl	8003104 <bmp3_set_regs>
 80039aa:	4603      	mov	r3, r0
 80039ac:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80039ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <set_advance_settings>:
/*!
 * @brief This internal API sets the advance (i2c_wdt_en, i2c_wdt_sel)
 * settings of the sensor based on the settings selected by the user.
 */
static int8_t set_advance_settings(uint32_t desired_settings, struct bmp3_dev *dev)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr;
    uint8_t reg_data;
    struct bmp3_adv_settings adv_settings = dev->settings.adv_settings;
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	f107 0308 	add.w	r3, r7, #8
 80039ca:	32bb      	adds	r2, #187	; 0xbb
 80039cc:	8812      	ldrh	r2, [r2, #0]
 80039ce:	801a      	strh	r2, [r3, #0]

    reg_addr = BMP3_REG_IF_CONF;
 80039d0:	231a      	movs	r3, #26
 80039d2:	73bb      	strb	r3, [r7, #14]
    rslt = bmp3_get_regs(reg_addr, &reg_data, 1, dev);
 80039d4:	7bb8      	ldrb	r0, [r7, #14]
 80039d6:	f107 010d 	add.w	r1, r7, #13
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2201      	movs	r2, #1
 80039de:	f7ff fb01 	bl	8002fe4 <bmp3_get_regs>
 80039e2:	4603      	mov	r3, r0
 80039e4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMP3_OK)
 80039e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d131      	bne.n	8003a52 <set_advance_settings+0x98>
    {
        if (desired_settings & BMP3_SEL_I2C_WDT_EN)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <set_advance_settings+0x5c>
        {
            /* Set the i2c watch dog enable bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_EN, adv_settings.i2c_wdt_en);
 80039f8:	7b7b      	ldrb	r3, [r7, #13]
 80039fa:	b25b      	sxtb	r3, r3
 80039fc:	f023 0302 	bic.w	r3, r3, #2
 8003a00:	b25a      	sxtb	r2, r3
 8003a02:	7a3b      	ldrb	r3, [r7, #8]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	b25b      	sxtb	r3, r3
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	b25b      	sxtb	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	737b      	strb	r3, [r7, #13]
        }

        if (desired_settings & BMP3_SEL_I2C_WDT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <set_advance_settings+0x84>
        {
            /* Set the i2c watch dog select bits */
            reg_data = BMP3_SET_BITS(reg_data, BMP3_I2C_WDT_SEL, adv_settings.i2c_wdt_sel);
 8003a20:	7b7b      	ldrb	r3, [r7, #13]
 8003a22:	b25b      	sxtb	r3, r3
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	b25a      	sxtb	r2, r3
 8003a2a:	7a7b      	ldrb	r3, [r7, #9]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	b25b      	sxtb	r3, r3
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	b25b      	sxtb	r3, r3
 8003a36:	4313      	orrs	r3, r2
 8003a38:	b25b      	sxtb	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	737b      	strb	r3, [r7, #13]
        }

        rslt = bmp3_set_regs(&reg_addr, &reg_data, 1, dev);
 8003a3e:	f107 010d 	add.w	r1, r7, #13
 8003a42:	f107 000e 	add.w	r0, r7, #14
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f7ff fb5b 	bl	8003104 <bmp3_set_regs>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <get_odr_filter_settings>:
/*!
 * @brief This internal API gets the over sampling, ODR and filter settings
 * of the sensor.
 */
static int8_t get_odr_filter_settings(struct bmp3_dev *dev)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b084      	sub	sp, #16
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];

    /* Read data beginning from 0x1C register */
    rslt = bmp3_get_regs(BMP3_REG_OSR, reg_data, 4, dev);
 8003a66:	f107 0108 	add.w	r1, r7, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	201c      	movs	r0, #28
 8003a70:	f7ff fab8 	bl	8002fe4 <bmp3_get_regs>
 8003a74:	4603      	mov	r3, r0
 8003a76:	73fb      	strb	r3, [r7, #15]

    /* Parse the read data and store it in dev structure */
    parse_odr_filter_settings(reg_data, &dev->settings.odr_filter);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f103 02b3 	add.w	r2, r3, #179	; 0xb3
 8003a7e:	f107 0308 	add.w	r3, r7, #8
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff fe28 	bl	80036da <parse_odr_filter_settings>

    return rslt;
 8003a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <validate_osr_and_odr_settings>:
/*!
 * @brief This internal API validate the over sampling, ODR settings of the
 * sensor.
 */
static int8_t validate_osr_and_odr_settings(const struct bmp3_dev *dev)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b098      	sub	sp, #96	; 0x60
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* According to BMP388 datasheet at Section 3.9.2. "Measurement rate in
     * forced mode and normal mode" there is also the constant of 234us also to
     * be considered in the sum. */
    uint32_t meas_t = 234;
 8003aa0:	23ea      	movs	r3, #234	; 0xea
 8003aa2:	65bb      	str	r3, [r7, #88]	; 0x58
    uint32_t meas_t_p = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* Sampling period corresponding to ODR in microseconds  */
    uint32_t odr[18] = {
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <validate_osr_and_odr_settings+0x84>)
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	4611      	mov	r1, r2
 8003ab0:	2248      	movs	r2, #72	; 0x48
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f01c fa64 	bl	801ff80 <memcpy>
        5000, 10000, 20000, 40000, 80000, 160000, 320000, 640000, 1280000, 2560000, 5120000, 10240000, 20480000,
        40960000, 81920000, 163840000, 327680000, 655360000
    };

    if (dev->settings.press_en)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <validate_osr_and_odr_settings+0x38>
    {
        /* Calculate the pressure measurement duration */
        meas_t_p += calculate_press_meas_time(dev);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f842 	bl	8003b4c <calculate_press_meas_time>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003acc:	4413      	add	r3, r2
 8003ace:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    if (dev->settings.temp_en)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d006      	beq.n	8003ae8 <validate_osr_and_odr_settings+0x50>
    {
        /* Calculate the temperature measurement duration */
        meas_t_p += calculate_temp_meas_time(dev);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f866 	bl	8003bac <calculate_temp_meas_time>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae4:	4413      	add	r3, r2
 8003ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
    }

    /* Constant 234us added to the summation of temperature and pressure measurement duration */
    meas_t += meas_t_p;
 8003ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	4413      	add	r3, r2
 8003aee:	65bb      	str	r3, [r7, #88]	; 0x58

    rslt = verify_meas_time_and_odr_duration(meas_t, odr[dev->settings.odr_filter.odr]);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	3360      	adds	r3, #96	; 0x60
 8003afa:	443b      	add	r3, r7
 8003afc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003b00:	4619      	mov	r1, r3
 8003b02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003b04:	f000 f80c 	bl	8003b20 <verify_meas_time_and_odr_duration>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    return rslt;
 8003b0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3760      	adds	r7, #96	; 0x60
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	0801ffd4 	.word	0x0801ffd4

08003b20 <verify_meas_time_and_odr_duration>:
/*!
 * @brief This internal API checks whether the measurement time and ODR duration
 * of the sensor are proper.
 */
static int8_t verify_meas_time_and_odr_duration(uint32_t meas_t, uint32_t odr_duration)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    if (meas_t < odr_duration)
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d202      	bcs.n	8003b38 <verify_meas_time_and_odr_duration+0x18>
    {
        /* If measurement duration is less than ODR duration
         * then OSR and ODR settings are fine */
        rslt = BMP3_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	e001      	b.n	8003b3c <verify_meas_time_and_odr_duration+0x1c>
    }
    else
    {
        /* OSR and ODR settings are not proper */
        rslt = BMP3_E_INVALID_ODR_OSR_SETTINGS;
 8003b38:	23fd      	movs	r3, #253	; 0xfd
 8003b3a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
	...

08003b4c <calculate_press_meas_time>:
/*!
 * @brief This internal API calculates the pressure measurement duration of the
 * sensor.
 */
static uint32_t calculate_press_meas_time(const struct bmp3_dev *dev)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
    uint32_t press_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	f107 030c 	add.w	r3, r7, #12
 8003b5a:	32b3      	adds	r2, #179	; 0xb3
 8003b5c:	6810      	ldr	r0, [r2, #0]
 8003b5e:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.press_os);
 8003b6c:	7b3b      	ldrb	r3, [r7, #12]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b74:	f000 fca2 	bl	80044bc <pow_bmp3>
 8003b78:	6178      	str	r0, [r7, #20]
    press_meas_t = (BMP3_SETTLE_TIME_PRESS + partial_out * BMP3_ADC_CONV_TIME);
 8003b7a:	490a      	ldr	r1, [pc, #40]	; (8003ba4 <calculate_press_meas_time+0x58>)
 8003b7c:	6978      	ldr	r0, [r7, #20]
 8003b7e:	f7fd f8df 	bl	8000d40 <__aeabi_fmul>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <calculate_press_meas_time+0x5c>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc ffd2 	bl	8000b30 <__addsf3>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd fa4c 	bl	800102c <__aeabi_f2uiz>
 8003b94:	4603      	mov	r3, r0
 8003b96:	613b      	str	r3, [r7, #16]

    /* Output in microseconds */
    return press_meas_t;
 8003b98:	693b      	ldr	r3, [r7, #16]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	44fa0000 	.word	0x44fa0000
 8003ba8:	43c40000 	.word	0x43c40000

08003bac <calculate_temp_meas_time>:
/*!
 * @brief This internal API calculates the temperature measurement duration of
 * the sensor.
 */
static uint32_t calculate_temp_meas_time(const struct bmp3_dev *dev)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
    uint32_t temp_meas_t;
    struct bmp3_odr_filter_settings odr_filter = dev->settings.odr_filter;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	f107 030c 	add.w	r3, r7, #12
 8003bba:	32b3      	adds	r2, #179	; 0xb3
 8003bbc:	6810      	ldr	r0, [r2, #0]
 8003bbe:	6018      	str	r0, [r3, #0]

#ifdef BMP3_DOUBLE_PRECISION_COMPENSATION
    double base = 2.0;
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003bc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    float partial_out;
#else
    uint8_t base = 2;
    uint32_t partial_out;
#endif /* BMP3_DOUBLE_PRECISION_COMPENSATION */
    partial_out = pow_bmp3(base, odr_filter.temp_os);
 8003bcc:	7b7b      	ldrb	r3, [r7, #13]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bd4:	f000 fc72 	bl	80044bc <pow_bmp3>
 8003bd8:	6178      	str	r0, [r7, #20]
    temp_meas_t = (BMP3_SETTLE_TIME_TEMP + partial_out * BMP3_ADC_CONV_TIME);
 8003bda:	490a      	ldr	r1, [pc, #40]	; (8003c04 <calculate_temp_meas_time+0x58>)
 8003bdc:	6978      	ldr	r0, [r7, #20]
 8003bde:	f7fd f8af 	bl	8000d40 <__aeabi_fmul>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4908      	ldr	r1, [pc, #32]	; (8003c08 <calculate_temp_meas_time+0x5c>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc ffa2 	bl	8000b30 <__addsf3>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd fa1c 	bl	800102c <__aeabi_f2uiz>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	613b      	str	r3, [r7, #16]

    /* Output in uint32_t */
    return temp_meas_t;
 8003bf8:	693b      	ldr	r3, [r7, #16]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	44fa0000 	.word	0x44fa0000
 8003c08:	439c8000 	.word	0x439c8000

08003c0c <fill_osr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the over sampling settings for burst write operation.
 */
static void fill_osr_data(uint32_t settings, uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003c1a:	6a3a      	ldr	r2, [r7, #32]
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	32b3      	adds	r2, #179	; 0xb3
 8003c22:	6810      	ldr	r0, [r2, #0]
 8003c24:	6018      	str	r0, [r3, #0]

    if (settings & (BMP3_SEL_PRESS_OS | BMP3_SEL_TEMP_OS))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d03f      	beq.n	8003cb0 <fill_osr_data+0xa4>
    {
        /* Pressure over sampling settings check */
        if (settings & BMP3_SEL_PRESS_OS)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d013      	beq.n	8003c62 <fill_osr_data+0x56>
        {
            /* Set the pressure over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[0], BMP3_PRESS_OS, osr_settings.press_os);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	b25b      	sxtb	r3, r3
 8003c40:	f023 0307 	bic.w	r3, r3, #7
 8003c44:	b25a      	sxtb	r2, r3
 8003c46:	7d3b      	ldrb	r3, [r7, #20]
 8003c48:	b25b      	sxtb	r3, r3
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b25a      	sxtb	r2, r3
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	440b      	add	r3, r1
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	701a      	strb	r2, [r3, #0]
        }

        /* Temperature over sampling settings check */
        if (settings & BMP3_SEL_TEMP_OS)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d014      	beq.n	8003c96 <fill_osr_data+0x8a>
        {
            /* Set the temperature over sampling settings in the
             * register variable */
            reg_data[*len] = BMP3_SET_BITS(reg_data[0], BMP3_TEMP_OS, osr_settings.temp_os);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003c76:	b25a      	sxtb	r2, r3
 8003c78:	7d7b      	ldrb	r3, [r7, #21]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b25a      	sxtb	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	440b      	add	r3, r1
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
        }

        /* 0x1C is the register address of over sampling register */
        addr[*len] = BMP3_REG_OSR;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	221c      	movs	r2, #28
 8003ca2:	701a      	strb	r2, [r3, #0]
        (*len)++;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	701a      	strb	r2, [r3, #0]
    }
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <fill_odr_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the ODR settings for burst write operation.
 */
static void fill_odr_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, struct bmp3_dev *dev)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings *osr_settings = &dev->settings.odr_filter;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	33b3      	adds	r3, #179	; 0xb3
 8003ccc:	617b      	str	r3, [r7, #20]

    /* Limit the ODR to 0.001525879 Hz*/
    if (osr_settings->odr > BMP3_ODR_0_001_HZ)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	78db      	ldrb	r3, [r3, #3]
 8003cd2:	2b11      	cmp	r3, #17
 8003cd4:	d902      	bls.n	8003cdc <fill_odr_data+0x22>
    {
        osr_settings->odr = BMP3_ODR_0_001_HZ;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2211      	movs	r2, #17
 8003cda:	70da      	strb	r2, [r3, #3]
    }

    /* Set the ODR settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS_POS_0(reg_data[1], BMP3_ODR, osr_settings->odr);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b25b      	sxtb	r3, r3
 8003ce4:	f023 031f 	bic.w	r3, r3, #31
 8003ce8:	b25a      	sxtb	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	78db      	ldrb	r3, [r3, #3]
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b25a      	sxtb	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	440b      	add	r3, r1
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]

    /* 0x1D is the register address of output data rate register */
    addr[*len] = BMP3_REG_ODR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4413      	add	r3, r2
 8003d12:	221d      	movs	r2, #29
 8003d14:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	701a      	strb	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	371c      	adds	r7, #28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <fill_filter_data>:
/*!
 * @brief This internal API fills the register address and register data of
 * the filter settings for burst write operation.
 */
static void fill_filter_data(uint8_t *addr, uint8_t *reg_data, uint8_t *len, const struct bmp3_dev *dev)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b087      	sub	sp, #28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
    struct bmp3_odr_filter_settings osr_settings = dev->settings.odr_filter;
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	f107 0314 	add.w	r3, r7, #20
 8003d40:	32b3      	adds	r2, #179	; 0xb3
 8003d42:	6810      	ldr	r0, [r2, #0]
 8003d44:	6018      	str	r0, [r3, #0]

    /* Set the iir settings in the register variable */
    reg_data[*len] = BMP3_SET_BITS(reg_data[3], BMP3_IIR_FILTER, osr_settings.iir_filter);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3303      	adds	r3, #3
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	f023 030e 	bic.w	r3, r3, #14
 8003d52:	b25a      	sxtb	r2, r3
 8003d54:	7dbb      	ldrb	r3, [r7, #22]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	b25b      	sxtb	r3, r3
 8003d5a:	f003 030e 	and.w	r3, r3, #14
 8003d5e:	b25b      	sxtb	r3, r3
 8003d60:	4313      	orrs	r3, r2
 8003d62:	b25a      	sxtb	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	440b      	add	r3, r1
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

    /* 0x1F is the register address of iir filter register */
    addr[*len] = BMP3_REG_CONFIG;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	221f      	movs	r2, #31
 8003d7e:	701a      	strb	r2, [r3, #0]
    (*len)++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	701a      	strb	r2, [r3, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <parse_sensor_data>:
/*!
 *  @brief This internal API is used to parse the pressure or temperature or
 *  both the data and store it in the bmp3_uncomp_data structure instance.
 */
static void parse_sensor_data(const uint8_t *reg_data, struct bmp3_uncomp_data *uncomp_data)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b087      	sub	sp, #28
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_xlsb = (uint32_t)reg_data[0];
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 8;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3301      	adds	r3, #1
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[2] << 16;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3302      	adds	r3, #2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_xlsb = (uint32_t)reg_data[3];
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	3303      	adds	r3, #3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 8;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[5] << 16;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3305      	adds	r3, #5
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	041b      	lsls	r3, r3, #16
 8003de2:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	605a      	str	r2, [r3, #4]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <compensate_data>:
 */
static int8_t compensate_data(uint8_t sensor_comp,
                              const struct bmp3_uncomp_data *uncomp_data,
                              struct bmp3_data *comp_data,
                              struct bmp3_calib_data *calib_data)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMP3_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d022      	beq.n	8003e5c <compensate_data+0x60>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d01f      	beq.n	8003e5c <compensate_data+0x60>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01c      	beq.n	8003e5c <compensate_data+0x60>
    {
        /* If pressure or temperature component is selected */
        if (sensor_comp & (BMP3_PRESS | BMP3_TEMP))
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <compensate_data+0x42>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8003e2c:	6839      	ldr	r1, [r7, #0]
 8003e2e:	68b8      	ldr	r0, [r7, #8]
 8003e30:	f000 f9e4 	bl	80041fc <compensate_temperature>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	e9c1 2300 	strd	r2, r3, [r1]
        }

        if (sensor_comp & BMP3_PRESS)
 8003e3e:	7bfb      	ldrb	r3, [r7, #15]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <compensate_data+0x64>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8003e48:	6839      	ldr	r1, [r7, #0]
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f000 fa19 	bl	8004282 <compensate_pressure>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	e9c1 2302 	strd	r2, r3, [r1, #8]
        if (sensor_comp & BMP3_PRESS)
 8003e5a:	e001      	b.n	8003e60 <compensate_data+0x64>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003e5c:	23ff      	movs	r3, #255	; 0xff
 8003e5e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003e60:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	3390      	adds	r3, #144	; 0x90
 8003e7a:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	3318      	adds	r3, #24
 8003e80:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	4ba4      	ldr	r3, [pc, #656]	; (8004118 <parse_calib_data+0x2ac>)
 8003e88:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	021b      	lsls	r3, r3, #8
 8003e94:	b21a      	sxth	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b21b      	sxth	r3, r3
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc faae 	bl	800040c <__aeabi_ui2d>
 8003eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb4:	f7fc fc4e 	bl	8000754 <__aeabi_ddiv>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	6939      	ldr	r1, [r7, #16]
 8003ebe:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3303      	adds	r3, #3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	b21a      	sxth	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3302      	adds	r3, #2
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b21b      	sxth	r3, r3
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	b21b      	sxth	r3, r3
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	4b8e      	ldr	r3, [pc, #568]	; (800411c <parse_calib_data+0x2b0>)
 8003ee4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	885b      	ldrh	r3, [r3, #2]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc fa8d 	bl	800040c <__aeabi_ui2d>
 8003ef2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ef6:	f7fc fc2d 	bl	8000754 <__aeabi_ddiv>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	6939      	ldr	r1, [r7, #16]
 8003f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	b25a      	sxtb	r2, r3
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	4b82      	ldr	r3, [pc, #520]	; (8004120 <parse_calib_data+0x2b4>)
 8003f16:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fa83 	bl	800042c <__aeabi_i2d>
 8003f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f2a:	f7fc fc13 	bl	8000754 <__aeabi_ddiv>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	6939      	ldr	r1, [r7, #16]
 8003f34:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3306      	adds	r3, #6
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	021b      	lsls	r3, r3, #8
 8003f40:	b21a      	sxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3305      	adds	r3, #5
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	b21b      	sxth	r3, r3
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	b21a      	sxth	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	4b73      	ldr	r3, [pc, #460]	; (8004124 <parse_calib_data+0x2b8>)
 8003f58:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003f62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fc fa60 	bl	800042c <__aeabi_i2d>
 8003f6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f70:	f7fc fbf0 	bl	8000754 <__aeabi_ddiv>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	6939      	ldr	r1, [r7, #16]
 8003f7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3308      	adds	r3, #8
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	b21a      	sxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3307      	adds	r3, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b21b      	sxth	r3, r3
 8003f90:	4313      	orrs	r3, r2
 8003f92:	b21a      	sxth	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	4b62      	ldr	r3, [pc, #392]	; (8004128 <parse_calib_data+0x2bc>)
 8003f9e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fa8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc fa3d 	bl	800042c <__aeabi_i2d>
 8003fb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb6:	f7fc fbcd 	bl	8000754 <__aeabi_ddiv>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	6939      	ldr	r1, [r7, #16]
 8003fc0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3309      	adds	r3, #9
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	b25a      	sxtb	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	4b55      	ldr	r3, [pc, #340]	; (800412c <parse_calib_data+0x2c0>)
 8003fd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fc fa23 	bl	800042c <__aeabi_i2d>
 8003fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fea:	f7fc fbb3 	bl	8000754 <__aeabi_ddiv>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	6939      	ldr	r1, [r7, #16]
 8003ff4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	330a      	adds	r3, #10
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b25a      	sxtb	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	4b49      	ldr	r3, [pc, #292]	; (8004130 <parse_calib_data+0x2c4>)
 800400a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fa09 	bl	800042c <__aeabi_i2d>
 800401a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800401e:	f7fc fb99 	bl	8000754 <__aeabi_ddiv>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	6939      	ldr	r1, [r7, #16]
 8004028:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	330c      	adds	r3, #12
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	b21a      	sxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	330b      	adds	r3, #11
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b21b      	sxth	r3, r3
 800403e:	4313      	orrs	r3, r2
 8004040:	b21b      	sxth	r3, r3
 8004042:	b29a      	uxth	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004050:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	899b      	ldrh	r3, [r3, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	f7fc f9d7 	bl	800040c <__aeabi_ui2d>
 800405e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004062:	f7fc fb77 	bl	8000754 <__aeabi_ddiv>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	330e      	adds	r3, #14
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	b21a      	sxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	330d      	adds	r3, #13
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	b21b      	sxth	r3, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	b21b      	sxth	r3, r3
 8004086:	b29a      	uxth	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	4b28      	ldr	r3, [pc, #160]	; (8004134 <parse_calib_data+0x2c8>)
 8004092:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	89db      	ldrh	r3, [r3, #14]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f9b6 	bl	800040c <__aeabi_ui2d>
 80040a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a4:	f7fc fb56 	bl	8000754 <__aeabi_ddiv>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	6939      	ldr	r1, [r7, #16]
 80040ae:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	330f      	adds	r3, #15
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b25a      	sxtb	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <parse_calib_data+0x2cc>)
 80040c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc f9ac 	bl	800042c <__aeabi_i2d>
 80040d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d8:	f7fc fb3c 	bl	8000754 <__aeabi_ddiv>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	6939      	ldr	r1, [r7, #16]
 80040e2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3310      	adds	r3, #16
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	b25a      	sxtb	r2, r3
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <parse_calib_data+0x2d0>)
 80040f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8004102:	4618      	mov	r0, r3
 8004104:	f7fc f992 	bl	800042c <__aeabi_i2d>
 8004108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800410c:	f7fc fb22 	bl	8000754 <__aeabi_ddiv>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	6939      	ldr	r1, [r7, #16]
 8004116:	e013      	b.n	8004140 <parse_calib_data+0x2d4>
 8004118:	3f700000 	.word	0x3f700000
 800411c:	41d00000 	.word	0x41d00000
 8004120:	42f00000 	.word	0x42f00000
 8004124:	41300000 	.word	0x41300000
 8004128:	41c00000 	.word	0x41c00000
 800412c:	41f00000 	.word	0x41f00000
 8004130:	42400000 	.word	0x42400000
 8004134:	40500000 	.word	0x40500000
 8004138:	40700000 	.word	0x40700000
 800413c:	40e00000 	.word	0x40e00000
 8004140:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3312      	adds	r3, #18
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	b21a      	sxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3311      	adds	r3, #17
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	b21b      	sxth	r3, r3
 8004156:	4313      	orrs	r3, r2
 8004158:	b21a      	sxth	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <parse_calib_data+0x38c>)
 8004164:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800416e:	4618      	mov	r0, r3
 8004170:	f7fc f95c 	bl	800042c <__aeabi_i2d>
 8004174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004178:	f7fc faec 	bl	8000754 <__aeabi_ddiv>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	6939      	ldr	r1, [r7, #16]
 8004182:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3313      	adds	r3, #19
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b25a      	sxtb	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <parse_calib_data+0x38c>)
 8004198:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fc f942 	bl	800042c <__aeabi_i2d>
 80041a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041ac:	f7fc fad2 	bl	8000754 <__aeabi_ddiv>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	6939      	ldr	r1, [r7, #16]
 80041b6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3314      	adds	r3, #20
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25a      	sxtb	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80041ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fc f927 	bl	800042c <__aeabi_i2d>
 80041de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e2:	f7fc fab7 	bl	8000754 <__aeabi_ddiv>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	6939      	ldr	r1, [r7, #16]
 80041ec:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80041f0:	bf00      	nop
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	42f00000 	.word	0x42f00000

080041fc <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 * for e.g. returns temperature 24.26 deg Celsius
 */
static double compensate_temperature(const struct bmp3_uncomp_data *uncomp_data, struct bmp3_calib_data *calib_data)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
    uint32_t uncomp_temp = uncomp_data->temperature;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	61fb      	str	r3, [r7, #28]
    double partial_data1;
    double partial_data2;

    partial_data1 = (double)(uncomp_temp - calib_data->quantized_calib_data.par_t1);
 800420c:	69f8      	ldr	r0, [r7, #28]
 800420e:	f7fc f8fd 	bl	800040c <__aeabi_ui2d>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f7fb ffba 	bl	8000190 <__aeabi_dsub>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	e9c7 2304 	strd	r2, r3, [r7, #16]
    partial_data2 = (double)(partial_data1 * calib_data->quantized_calib_data.par_t2);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800422a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800422e:	f7fc f967 	bl	8000500 <__aeabi_dmul>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	e9c7 2302 	strd	r2, r3, [r7, #8]

    /* Update the compensated temperature in calib structure since this is
     * needed for pressure calculation */
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 800423a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800423e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004242:	f7fc f95d 	bl	8000500 <__aeabi_dmul>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4610      	mov	r0, r2
 800424c:	4619      	mov	r1, r3
                                             calib_data->quantized_calib_data.par_t3;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    calib_data->quantized_calib_data.t_lin = partial_data2 + (partial_data1 * partial_data1) *
 8004254:	f7fc f954 	bl	8000500 <__aeabi_dmul>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004264:	f7fb ff96 	bl	8000194 <__adddf3>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

    /* Returns compensated temperature */
    return calib_data->quantized_calib_data.t_lin;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
}
 8004278:	4610      	mov	r0, r2
 800427a:	4619      	mov	r1, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 * For e.g. returns pressure in Pascal p = 95305.295 which is 953.05295 hecto pascal
 */
static double compensate_pressure(const struct bmp3_uncomp_data *uncomp_data, const struct bmp3_calib_data *calib_data)
{
 8004282:	b5b0      	push	{r4, r5, r7, lr}
 8004284:	b092      	sub	sp, #72	; 0x48
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
    const struct bmp3_quantized_calib_data *quantized_calib_data = &calib_data->quantized_calib_data;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
    double partial_data3;
    double partial_data4;
    double partial_out1;
    double partial_out2;

    partial_data1 = quantized_calib_data->par_p6 * quantized_calib_data->t_lin;
 8004290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004292:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004298:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800429c:	f7fc f930 	bl	8000500 <__aeabi_dmul>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p7 * pow_bmp3(quantized_calib_data->t_lin, 2);
 80042a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042aa:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 80042ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80042b4:	2202      	movs	r2, #2
 80042b6:	f000 f901 	bl	80044bc <pow_bmp3>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f8c7 	bl	8000450 <__aeabi_f2d>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4620      	mov	r0, r4
 80042c8:	4629      	mov	r1, r5
 80042ca:	f7fc f919 	bl	8000500 <__aeabi_dmul>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p8 * pow_bmp3(quantized_calib_data->t_lin, 3);
 80042d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d8:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80042dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042de:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80042e2:	2203      	movs	r2, #3
 80042e4:	f000 f8ea 	bl	80044bc <pow_bmp3>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fc f8b0 	bl	8000450 <__aeabi_f2d>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4620      	mov	r0, r4
 80042f6:	4629      	mov	r1, r5
 80042f8:	f7fc f902 	bl	8000500 <__aeabi_dmul>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out1 = quantized_calib_data->par_p5 + partial_data1 + partial_data2 + partial_data3;
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800430a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800430e:	f7fb ff41 	bl	8000194 <__adddf3>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800431e:	f7fb ff39 	bl	8000194 <__adddf3>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800432a:	f7fb ff33 	bl	8000194 <__adddf3>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	e9c7 2308 	strd	r2, r3, [r7, #32]
    partial_data1 = quantized_calib_data->par_p2 * quantized_calib_data->t_lin;
 8004336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004338:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800433c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004342:	f7fc f8dd 	bl	8000500 <__aeabi_dmul>
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p3 * pow_bmp3(quantized_calib_data->t_lin, 2);
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8004354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004356:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800435a:	2202      	movs	r2, #2
 800435c:	f000 f8ae 	bl	80044bc <pow_bmp3>
 8004360:	4603      	mov	r3, r0
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc f874 	bl	8000450 <__aeabi_f2d>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4620      	mov	r0, r4
 800436e:	4629      	mov	r1, r5
 8004370:	f7fc f8c6 	bl	8000500 <__aeabi_dmul>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = quantized_calib_data->par_p4 * pow_bmp3(quantized_calib_data->t_lin, 3);
 800437c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8004382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004384:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8004388:	2203      	movs	r2, #3
 800438a:	f000 f897 	bl	80044bc <pow_bmp3>
 800438e:	4603      	mov	r3, r0
 8004390:	4618      	mov	r0, r3
 8004392:	f7fc f85d 	bl	8000450 <__aeabi_f2d>
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	4620      	mov	r0, r4
 800439c:	4629      	mov	r1, r5
 800439e:	f7fc f8af 	bl	8000500 <__aeabi_dmul>
 80043a2:	4602      	mov	r2, r0
 80043a4:	460b      	mov	r3, r1
 80043a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_out2 = uncomp_data->pressure *
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fc f82c 	bl	800040c <__aeabi_ui2d>
 80043b4:	4604      	mov	r4, r0
 80043b6:	460d      	mov	r5, r1
                   (quantized_calib_data->par_p1 + partial_data1 + partial_data2 + partial_data3);
 80043b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80043be:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043c2:	f7fb fee7 	bl	8000194 <__adddf3>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4610      	mov	r0, r2
 80043cc:	4619      	mov	r1, r3
 80043ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043d2:	f7fb fedf 	bl	8000194 <__adddf3>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e2:	f7fb fed7 	bl	8000194 <__adddf3>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
    partial_out2 = uncomp_data->pressure *
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fc f887 	bl	8000500 <__aeabi_dmul>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    partial_data1 = pow_bmp3((double)uncomp_data->pressure, 2);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc f804 	bl	800040c <__aeabi_ui2d>
 8004404:	2202      	movs	r2, #2
 8004406:	f000 f859 	bl	80044bc <pow_bmp3>
 800440a:	4603      	mov	r3, r0
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc f81f 	bl	8000450 <__aeabi_f2d>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    partial_data2 = quantized_calib_data->par_p9 + quantized_calib_data->par_p10 * quantized_calib_data->t_lin;
 800441a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8004420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004422:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004428:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800442c:	f7fc f868 	bl	8000500 <__aeabi_dmul>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4620      	mov	r0, r4
 8004436:	4629      	mov	r1, r5
 8004438:	f7fb feac 	bl	8000194 <__adddf3>
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    partial_data3 = partial_data1 * partial_data2;
 8004444:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004448:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800444c:	f7fc f858 	bl	8000500 <__aeabi_dmul>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    partial_data4 = partial_data3 + pow_bmp3((double)uncomp_data->pressure, 3) * quantized_calib_data->par_p11;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7fb ffd5 	bl	800040c <__aeabi_ui2d>
 8004462:	2203      	movs	r2, #3
 8004464:	f000 f82a 	bl	80044bc <pow_bmp3>
 8004468:	4603      	mov	r3, r0
 800446a:	4618      	mov	r0, r3
 800446c:	f7fb fff0 	bl	8000450 <__aeabi_f2d>
 8004470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004472:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004476:	f7fc f843 	bl	8000500 <__aeabi_dmul>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004482:	f7fb fe87 	bl	8000194 <__adddf3>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    comp_press = partial_out1 + partial_out2 + partial_data4;
 800448e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004492:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004496:	f7fb fe7d 	bl	8000194 <__adddf3>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044a2:	f7fb fe77 	bl	8000194 <__adddf3>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return comp_press;
 80044ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	3748      	adds	r7, #72	; 0x48
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bdb0      	pop	{r4, r5, r7, pc}

080044bc <pow_bmp3>:
/*!
 * @brief This internal API is used to calculate the power functionality for
 *  floating point values.
 */
static float pow_bmp3(double base, uint8_t power)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80044c6:	4613      	mov	r3, r2
 80044c8:	71fb      	strb	r3, [r7, #7]
    float pow_output = 1;
 80044ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044ce:	617b      	str	r3, [r7, #20]

    while (power != 0)
 80044d0:	e00d      	b.n	80044ee <pow_bmp3+0x32>
    {
        pow_output = (float) base * pow_output;
 80044d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80044d6:	f7fc fad5 	bl	8000a84 <__aeabi_d2f>
 80044da:	4603      	mov	r3, r0
 80044dc:	4619      	mov	r1, r3
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f7fc fc2e 	bl	8000d40 <__aeabi_fmul>
 80044e4:	4603      	mov	r3, r0
 80044e6:	617b      	str	r3, [r7, #20]
        power--;
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	71fb      	strb	r3, [r7, #7]
    while (power != 0)
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ee      	bne.n	80044d2 <pow_bmp3+0x16>
    }

    return pow_output;
 80044f4:	697b      	ldr	r3, [r7, #20]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint32_t sub_settings, uint32_t desired_settings)
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
    uint8_t settings_changed = FALSE;
 8004508:	2300      	movs	r3, #0
 800450a:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <are_settings_changed+0x1e>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
 800451a:	e001      	b.n	8004520 <are_settings_changed+0x22>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8004520:	7bfb      	ldrb	r3, [r7, #15]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00f      	beq.n	800455a <null_ptr_check+0x2e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00b      	beq.n	800455a <null_ptr_check+0x2e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d007      	beq.n	800455a <null_ptr_check+0x2e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 800455a:	23ff      	movs	r3, #255	; 0xff
 800455c:	73fb      	strb	r3, [r7, #15]
 800455e:	e001      	b.n	8004564 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8004564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	0000      	movs	r0, r0
 8004574:	0000      	movs	r0, r0
	...

08004578 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390(I2C_HandleTypeDef *pntr_hi2c) {
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  _meas_end = 0;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	a312      	add	r3, pc, #72	; (adr r3, 80045f8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	a30f      	add	r3, pc, #60	; (adr r3, 80045f8 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	22ee      	movs	r2, #238	; 0xee
 80045c6:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x88>)
 80045d2:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a0b      	ldr	r2, [pc, #44]	; (8004604 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x8c>)
 80045d8:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)pntr_hi2c;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a07      	ldr	r2, [pc, #28]	; (8004608 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x90>)
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	00000000 	.word	0x00000000
 80045fc:	c08f3800 	.word	0xc08f3800
 8004600:	0800494f 	.word	0x0800494f
 8004604:	080048fd 	.word	0x080048fd
 8004608:	080047bd 	.word	0x080047bd

0800460c <_ZN6BMP3904initEv>:

bool BMP390::init(){
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMP3_OK;
 8004614:	2300      	movs	r3, #0
 8004616:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3310      	adds	r3, #16
 800461c:	4618      	mov	r0, r3
 800461e:	f7fe fe5c 	bl	80032da <bmp3_soft_reset>
 8004622:	4603      	mov	r3, r0
 8004624:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 8004626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <_ZN6BMP3904initEv+0x26>
 800462e:	2300      	movs	r3, #0
 8004630:	e028      	b.n	8004684 <_ZN6BMP3904initEv+0x78>

	rslt = bmp3_init(&the_sensor);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3310      	adds	r3, #16
 8004636:	4618      	mov	r0, r3
 8004638:	f7fe fc8d 	bl	8002f56 <bmp3_init>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3310      	adds	r3, #16
 8004644:	4618      	mov	r0, r3
 8004646:	f000 f9ab 	bl	80049a0 <_ZL23validate_trimming_paramP8bmp3_dev>
 800464a:	4603      	mov	r3, r0
 800464c:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 800464e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <_ZN6BMP3904initEv+0x4e>
 8004656:	2300      	movs	r3, #0
 8004658:	e014      	b.n	8004684 <_ZN6BMP3904initEv+0x78>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 800465a:	2100      	movs	r1, #0
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f8d1 	bl	8004804 <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 8004662:	2100      	movs	r1, #0
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f8ee 	bl	8004846 <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 800466a:	2100      	movs	r1, #0
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f90b 	bl	8004888 <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 8004672:	2103      	movs	r1, #3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f928 	bl	80048ca <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <_ZN6BMP39015readTemperatureEv>:

float BMP390::readTemperature(void) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  performReading();
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f80c 	bl	80046b2 <_ZN6BMP39014performReadingEv>
  return temperature;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	f7fc f9ee 	bl	8000a84 <__aeabi_d2f>
 80046a8:	4603      	mov	r3, r0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <_ZN6BMP39014performReadingEv>:

  float atmospheric = readPressure() / 100.0F;
  return 44330.0 * (1.0 - std::pow(atmospheric / seaLevel, 0.1903));
}

bool BMP390::performReading(void) {
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b088      	sub	sp, #32
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  /* Used to select the settings user needs to change */
  uint16_t settings_sel = 0;
 80046ba:	2300      	movs	r3, #0
 80046bc:	83fb      	strh	r3, [r7, #30]
  /* Variable used to select the sensor component */
  uint8_t sensor_comp = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	777b      	strb	r3, [r7, #29]

  /* Select the pressure and temperature sensor to be enabled */
  the_sensor.settings.temp_en = BMP3_ENABLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
  settings_sel |= BMP3_SEL_TEMP_EN;
 80046ca:	8bfb      	ldrh	r3, [r7, #30]
 80046cc:	f043 0304 	orr.w	r3, r3, #4
 80046d0:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_TEMP;
 80046d2:	7f7b      	ldrb	r3, [r7, #29]
 80046d4:	f043 0302 	orr.w	r3, r3, #2
 80046d8:	777b      	strb	r3, [r7, #29]
  if (_tempOSEnabled) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 30e1 	ldrb.w	r3, [r3, #225]	; 0xe1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <_ZN6BMP39014performReadingEv+0x3a>
    settings_sel |= BMP3_SEL_TEMP_OS;
 80046e4:	8bfb      	ldrh	r3, [r7, #30]
 80046e6:	f043 0320 	orr.w	r3, r3, #32
 80046ea:	83fb      	strh	r3, [r7, #30]
  }

  the_sensor.settings.press_en = BMP3_ENABLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
  settings_sel |= BMP3_SEL_PRESS_EN;
 80046f4:	8bfb      	ldrh	r3, [r7, #30]
 80046f6:	f043 0302 	orr.w	r3, r3, #2
 80046fa:	83fb      	strh	r3, [r7, #30]
  sensor_comp |= BMP3_PRESS;
 80046fc:	7f7b      	ldrb	r3, [r7, #29]
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	777b      	strb	r3, [r7, #29]
  if (_presOSEnabled) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <_ZN6BMP39014performReadingEv+0x64>
    settings_sel |= BMP3_SEL_PRESS_OS;
 800470e:	8bfb      	ldrh	r3, [r7, #30]
 8004710:	f043 0310 	orr.w	r3, r3, #16
 8004714:	83fb      	strh	r3, [r7, #30]
  }

  if (_filterEnabled) {
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <_ZN6BMP39014performReadingEv+0x76>
    settings_sel |= BMP3_SEL_IIR_FILTER;
 8004720:	8bfb      	ldrh	r3, [r7, #30]
 8004722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004726:	83fb      	strh	r3, [r7, #30]
  }

  if (_ODREnabled) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 30e3 	ldrb.w	r3, [r3, #227]	; 0xe3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <_ZN6BMP39014performReadingEv+0x88>
    settings_sel |= BMP3_SEL_ODR;
 8004732:	8bfb      	ldrh	r3, [r7, #30]
 8004734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004738:	83fb      	strh	r3, [r7, #30]

  // set interrupt to data ready
  // settings_sel |= BMP3_DRDY_EN_SEL | BMP3_LEVEL_SEL | BMP3_LATCH_SEL;

  /* Set the desired sensor configuration */
  rslt = bmp3_set_sensor_settings(settings_sel, &the_sensor);
 800473a:	8bfa      	ldrh	r2, [r7, #30]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3310      	adds	r3, #16
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7fe fd73 	bl	800322e <bmp3_set_sensor_settings>
 8004748:	4603      	mov	r3, r0
 800474a:	773b      	strb	r3, [r7, #28]

  if (rslt != BMP3_OK)
 800474c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d001      	beq.n	8004758 <_ZN6BMP39014performReadingEv+0xa6>
    return false;
 8004754:	2300      	movs	r3, #0
 8004756:	e02c      	b.n	80047b2 <_ZN6BMP39014performReadingEv+0x100>

  /* Set the power mode */
  the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
  rslt = bmp3_set_op_mode(&the_sensor);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3310      	adds	r3, #16
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe fe10 	bl	800338a <bmp3_set_op_mode>
 800476a:	4603      	mov	r3, r0
 800476c:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 800476e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <_ZN6BMP39014performReadingEv+0xc8>
    return false;
 8004776:	2300      	movs	r3, #0
 8004778:	e01b      	b.n	80047b2 <_ZN6BMP39014performReadingEv+0x100>

  /* Variable used to store the compensated data */
  struct bmp3_data data;

  /* Temperature and Pressure data are read and stored in the bmp3_data instance */
  rslt = bmp3_get_sensor_data(sensor_comp, &data, &the_sensor);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f103 0210 	add.w	r2, r3, #16
 8004780:	f107 0108 	add.w	r1, r7, #8
 8004784:	7f7b      	ldrb	r3, [r7, #29]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fe6e 	bl	8003468 <bmp3_get_sensor_data>
 800478c:	4603      	mov	r3, r0
 800478e:	773b      	strb	r3, [r7, #28]
  if (rslt != BMP3_OK)
 8004790:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <_ZN6BMP39014performReadingEv+0xea>
    return false;
 8004798:	2300      	movs	r3, #0
 800479a:	e00a      	b.n	80047b2 <_ZN6BMP39014performReadingEv+0x100>


  /* Save the temperature and pressure data */
  temperature = data.temperature;
 800479c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = data.pressure;
 80047a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	e9c1 2302 	strd	r2, r3, [r1, #8]

  return true;
 80047b0:	2301      	movs	r3, #1
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <_ZL10delay_usecmPv>:

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t us_count = us * (HAL_RCC_GetHCLKFreq() / 1000000U);
 80047c6:	f004 fa95 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <_ZL10delay_usecmPv+0x44>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	0c9b      	lsrs	r3, r3, #18
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	60fb      	str	r3, [r7, #12]

	while (us_count) {
 80047dc:	e002      	b.n	80047e4 <_ZL10delay_usecmPv+0x28>
		us_count--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	60fb      	str	r3, [r7, #12]
	while (us_count) {
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1f4      	bne.n	80047de <_ZL10delay_usecmPv+0x22>
	}
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	431bde83 	.word	0x431bde83

08004804 <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	2b05      	cmp	r3, #5
 8004814:	d901      	bls.n	800481a <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8004816:	2300      	movs	r3, #0
 8004818:	e010      	b.n	800483c <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8004830:	e003      	b.n	800483a <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 800483a:	2301      	movs	r3, #1
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	2b05      	cmp	r3, #5
 8004856:	d901      	bls.n	800485c <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8004858:	2300      	movs	r3, #0
 800485a:	e010      	b.n	800487e <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004872:	e003      	b.n	800487c <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 800487c:	2301      	movs	r3, #1
}
 800487e:	4618      	mov	r0, r3
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	bc80      	pop	{r7}
 8004886:	4770      	bx	lr

08004888 <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	2b07      	cmp	r3, #7
 8004898:	d901      	bls.n	800489e <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 800489a:	2300      	movs	r3, #0
 800489c:	e010      	b.n	80048c0 <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d104      	bne.n	80048b6 <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 80048b4:	e003      	b.n	80048be <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 80048be:	2301      	movs	r3, #1
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr

080048ca <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 80048d6:	78fb      	ldrb	r3, [r7, #3]
 80048d8:	2b11      	cmp	r3, #17
 80048da:	d901      	bls.n	80048e0 <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 80048dc:	2300      	movs	r3, #0
 80048de:	e008      	b.n	80048f2 <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 80048f0:	2301      	movs	r3, #1
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af04      	add	r7, sp, #16
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	4603      	mov	r3, r0
 800490a:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800491c:	9102      	str	r1, [sp, #8]
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2301      	movs	r3, #1
 8004926:	21ee      	movs	r1, #238	; 0xee
 8004928:	6978      	ldr	r0, [r7, #20]
 800492a:	f002 fc97 	bl	800725c <HAL_I2C_Mem_Write>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004942:	e000      	b.n	8004946 <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 800494e:	b580      	push	{r7, lr}
 8004950:	b08a      	sub	sp, #40	; 0x28
 8004952:	af04      	add	r7, sp, #16
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	b29b      	uxth	r3, r3
 800496a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800496e:	9102      	str	r1, [sp, #8]
 8004970:	9301      	str	r3, [sp, #4]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	2301      	movs	r3, #1
 8004978:	21ee      	movs	r1, #238	; 0xee
 800497a:	6978      	ldr	r0, [r7, #20]
 800497c:	f002 fd82 	bl	8007484 <HAL_I2C_Mem_Read>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	bf14      	ite	ne
 8004986:	2301      	movne	r3, #1
 8004988:	2300      	moveq	r3, #0
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004994:	e000      	b.n	8004998 <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 80049a8:	23ff      	movs	r3, #255	; 0xff
 80049aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 80049ae:	f107 010c 	add.w	r1, r7, #12
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2215      	movs	r2, #21
 80049b6:	2031      	movs	r0, #49	; 0x31
 80049b8:	f7fe fb14 	bl	8002fe4 <bmp3_get_regs>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 80049c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d133      	bne.n	8004a32 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049d0:	e013      	b.n	80049fa <_ZL23validate_trimming_paramP8bmp3_dev+0x5a>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 80049d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80049d6:	3328      	adds	r3, #40	; 0x28
 80049d8:	443b      	add	r3, r7
 80049da:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 80049de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f000 f82a 	bl	8004a3e <_ZL7cal_crchh>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 80049f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80049f4:	3301      	adds	r3, #1
 80049f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80049fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80049fe:	2b14      	cmp	r3, #20
 8004a00:	d9e7      	bls.n	80049d2 <_ZL23validate_trimming_paramP8bmp3_dev+0x32>
    }

    crc = (crc ^ 0xFF);
 8004a02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a06:	43db      	mvns	r3, r3
 8004a08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8004a0c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	2030      	movs	r0, #48	; 0x30
 8004a16:	f7fe fae5 	bl	8002fe4 <bmp3_get_regs>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 8004a20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d002      	beq.n	8004a32 <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 8004a2c:	23ff      	movs	r3, #255	; 0xff
 8004a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 8004a32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3728      	adds	r7, #40	; 0x28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	4603      	mov	r3, r0
 8004a46:	460a      	mov	r2, r1
 8004a48:	71fb      	strb	r3, [r7, #7]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 8004a4e:	231d      	movs	r3, #29
 8004a50:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 8004a52:	2300      	movs	r3, #0
 8004a54:	73bb      	strb	r3, [r7, #14]
 8004a56:	e01c      	b.n	8004a92 <_ZL7cal_crchh+0x54>
    if ((seed & 0x80) ^ (data & 0x80)) {
 8004a58:	79fa      	ldrb	r2, [r7, #7]
 8004a5a:	79bb      	ldrb	r3, [r7, #6]
 8004a5c:	4053      	eors	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	b25b      	sxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da02      	bge.n	8004a6c <_ZL7cal_crchh+0x2e>
      var2 = 1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	e001      	b.n	8004a70 <_ZL7cal_crchh+0x32>
    } else {
      var2 = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8004a70:	79fb      	ldrb	r3, [r7, #7]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8004a76:	79bb      	ldrb	r3, [r7, #6]
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8004a7c:	7b7a      	ldrb	r2, [r7, #13]
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	fb12 f303 	smulbb	r3, r2, r3
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	79fb      	ldrb	r3, [r7, #7]
 8004a88:	4053      	eors	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	73bb      	strb	r3, [r7, #14]
 8004a92:	7bbb      	ldrb	r3, [r7, #14]
 8004a94:	2b07      	cmp	r3, #7
 8004a96:	d9df      	bls.n	8004a58 <_ZL7cal_crchh+0x1a>
  }

  return (int8_t)seed;
 8004a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr
	...

08004aa8 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>:
#include <env_sensors.hpp>

EnvionmentSensors::EnvionmentSensors(I2C_HandleTypeDef *pntr_hi2c) : bmp(pntr_hi2c) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6839      	ldr	r1, [r7, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fd5e 	bl	8004578 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>
  if(bmp.init()){
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fda4 	bl	800460c <_ZN6BMP3904initEv>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d006      	beq.n	8004ad8 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x30>
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 8004aca:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x70>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	2100      	movs	r1, #0
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	f01a ff2f 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
 8004ad6:	e005      	b.n	8004ae4 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x3c>
  } else {
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8004ad8:	4b10      	ldr	r3, [pc, #64]	; (8004b1c <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x74>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	2100      	movs	r1, #0
 8004ade:	2002      	movs	r0, #2
 8004ae0:	f01a ff28 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
  }
  bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2103      	movs	r1, #3
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fe8b 	bl	8004804 <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2102      	movs	r1, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fea7 	bl	8004846 <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2102      	movs	r1, #2
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fec3 	bl	8004888 <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2102      	movs	r1, #2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff fedf 	bl	80048ca <_ZN6BMP39017setOutputDataRateEh>

}
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	0802001c 	.word	0x0802001c
 8004b1c:	08020034 	.word	0x08020034

08004b20 <_ZN17EnvionmentSensors14getTemperatureEv>:

float EnvionmentSensors::getPressure(){
	return bmp.readPressure();
}

float EnvionmentSensors::getTemperature(){
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	return bmp.readTemperature();
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fdae 	bl	800468c <_ZN6BMP39015readTemperatureEv>
 8004b30:	4603      	mov	r3, r0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8004b40:	1d3b      	adds	r3, r7, #4
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8004b4e:	2310      	movs	r3, #16
 8004b50:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004b52:	2301      	movs	r3, #1
 8004b54:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b66:	f002 f88b 	bl	8006c80 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8004b6a:	2320      	movs	r3, #32
 8004b6c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8004b6e:	1d3b      	adds	r3, r7, #4
 8004b70:	4619      	mov	r1, r3
 8004b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b76:	f002 f883 	bl	8006c80 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2120      	movs	r1, #32
 8004b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b82:	f002 faab 	bl	80070dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004b86:	2200      	movs	r2, #0
 8004b88:	2110      	movs	r1, #16
 8004b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b8e:	f002 faa5 	bl	80070dc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	2b03      	cmp	r3, #3
 8004baa:	d83f      	bhi.n	8004c2c <BSP_RADIO_ConfigRFSwitch+0x90>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bc5 	.word	0x08004bc5
 8004bb8:	08004bdf 	.word	0x08004bdf
 8004bbc:	08004bf9 	.word	0x08004bf9
 8004bc0:	08004c13 	.word	0x08004c13
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2110      	movs	r1, #16
 8004bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bcc:	f002 fa86 	bl	80070dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	2120      	movs	r1, #32
 8004bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bd8:	f002 fa80 	bl	80070dc <HAL_GPIO_WritePin>
      break;      
 8004bdc:	e027      	b.n	8004c2e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004bde:	2201      	movs	r2, #1
 8004be0:	2110      	movs	r1, #16
 8004be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004be6:	f002 fa79 	bl	80070dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004bea:	2200      	movs	r2, #0
 8004bec:	2120      	movs	r1, #32
 8004bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004bf2:	f002 fa73 	bl	80070dc <HAL_GPIO_WritePin>
      break;
 8004bf6:	e01a      	b.n	8004c2e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2110      	movs	r1, #16
 8004bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c00:	f002 fa6c 	bl	80070dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004c04:	2201      	movs	r2, #1
 8004c06:	2120      	movs	r1, #32
 8004c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c0c:	f002 fa66 	bl	80070dc <HAL_GPIO_WritePin>
      break;
 8004c10:	e00d      	b.n	8004c2e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004c12:	2200      	movs	r2, #0
 8004c14:	2110      	movs	r1, #16
 8004c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c1a:	f002 fa5f 	bl	80070dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004c1e:	2201      	movs	r2, #1
 8004c20:	2120      	movs	r1, #32
 8004c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c26:	f002 fa59 	bl	80070dc <HAL_GPIO_WritePin>
      break;
 8004c2a:	e000      	b.n	8004c2e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8004c2c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8004c3c:	2302      	movs	r3, #2
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8004c4a:	2301      	movs	r3, #1
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8004c58:	2301      	movs	r3, #1
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	4770      	bx	lr

08004c62 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	4603      	mov	r3, r0
 8004c6a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8004c72:	230f      	movs	r3, #15
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e001      	b.n	8004c7c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8004c78:	2316      	movs	r3, #22
 8004c7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004c8c:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	4a03      	ldr	r2, [pc, #12]	; (8004ca0 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004c92:	f023 0301 	bic.w	r3, r3, #1
 8004c96:	6053      	str	r3, [r2, #4]
}
 8004c98:	bf00      	nop
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	e0042000 	.word	0xe0042000

08004ca4 <LL_DBGMCU_DisableDBGStopMode>:
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004ca8:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4a03      	ldr	r2, [pc, #12]	; (8004cbc <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8004cae:	f023 0302 	bic.w	r3, r3, #2
 8004cb2:	6053      	str	r3, [r2, #4]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	e0042000 	.word	0xe0042000

08004cc0 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a03      	ldr	r2, [pc, #12]	; (8004cd8 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8004cca:	f023 0304 	bic.w	r3, r3, #4
 8004cce:	6053      	str	r3, [r2, #4]
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	e0042000 	.word	0xe0042000

08004cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ce6:	2003      	movs	r0, #3
 8004ce8:	f001 f984 	bl	8005ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cec:	f004 f802 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <HAL_Init+0x3c>)
 8004cf4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cf6:	200f      	movs	r0, #15
 8004cf8:	f7fd fbce 	bl	8002498 <HAL_InitTick>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	71fb      	strb	r3, [r7, #7]
 8004d06:	e001      	b.n	8004d0c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d08:	f7fd f99c 	bl	8002044 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000000 	.word	0x20000000

08004d1c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8004d20:	4b02      	ldr	r3, [pc, #8]	; (8004d2c <HAL_GetUIDw0+0x10>)
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	1fff7590 	.word	0x1fff7590

08004d30 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004d34:	4b02      	ldr	r3, [pc, #8]	; (8004d40 <HAL_GetUIDw1+0x10>)
 8004d36:	681b      	ldr	r3, [r3, #0]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	1fff7594 	.word	0x1fff7594

08004d44 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004d48:	4b02      	ldr	r3, [pc, #8]	; (8004d54 <HAL_GetUIDw2+0x10>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	1fff7598 	.word	0x1fff7598

08004d58 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8004d5c:	f7ff ff94 	bl	8004c88 <LL_DBGMCU_DisableDBGSleepMode>
}
 8004d60:	bf00      	nop
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8004d68:	f7ff ff9c 	bl	8004ca4 <LL_DBGMCU_DisableDBGStopMode>
}
 8004d6c:	bf00      	nop
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8004d74:	f7ff ffa4 	bl	8004cc0 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8004d78:	bf00      	nop
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr

08004dba <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	695a      	ldr	r2, [r3, #20]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2107      	movs	r1, #7
 8004dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	401a      	ands	r2, r3
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bc80      	pop	{r7}
 8004df4:	4770      	bx	lr

08004df6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2107      	movs	r1, #7
 8004e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e10:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bc80      	pop	{r7}
 8004e48:	4770      	bx	lr

08004e4a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	210f      	movs	r1, #15
 8004e62:	fa01 f303 	lsl.w	r3, r1, r3
 8004e66:	43db      	mvns	r3, r3
 8004e68:	401a      	ands	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	0e9b      	lsrs	r3, r3, #26
 8004e6e:	f003 010f 	and.w	r1, r3, #15
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004e82:	bf00      	nop
 8004e84:	3714      	adds	r7, #20
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bc80      	pop	{r7}
 8004e8a:	4770      	bx	lr

08004e8c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc80      	pop	{r7}
 8004ed4:	4770      	bx	lr

08004ed6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b085      	sub	sp, #20
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	43db      	mvns	r3, r3
 8004eec:	401a      	ands	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	0219      	lsls	r1, r3, #8
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	400b      	ands	r3, r1
 8004ef6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8004efa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004efe:	431a      	orrs	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004f1e:	f023 0317 	bic.w	r3, r3, #23
 8004f22:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr

08004f34 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004f44:	f023 0317 	bic.w	r3, r3, #23
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6093      	str	r3, [r2, #8]
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr

08004f56 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f6a:	d101      	bne.n	8004f70 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bc80      	pop	{r7}
 8004f7a:	4770      	bx	lr

08004f7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f8c:	f023 0317 	bic.w	r3, r3, #23
 8004f90:	f043 0201 	orr.w	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fb2:	f023 0317 	bic.w	r3, r3, #23
 8004fb6:	f043 0202 	orr.w	r2, r3, #2
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr

08004fc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d101      	bne.n	8004fe0 <LL_ADC_IsEnabled+0x18>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <LL_ADC_IsEnabled+0x1a>
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d101      	bne.n	8005004 <LL_ADC_IsDisableOngoing+0x18>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <LL_ADC_IsDisableOngoing+0x1a>
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005020:	f023 0317 	bic.w	r3, r3, #23
 8005024:	f043 0204 	orr.w	r2, r3, #4
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	bc80      	pop	{r7}
 8005034:	4770      	bx	lr

08005036 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005036:	b480      	push	{r7}
 8005038:	b083      	sub	sp, #12
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005046:	f023 0317 	bic.w	r3, r3, #23
 800504a:	f043 0210 	orr.w	r2, r3, #16
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b04      	cmp	r3, #4
 800506e:	d101      	bne.n	8005074 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr

08005080 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800508c:	2300      	movs	r3, #0
 800508e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e17e      	b.n	80053a0 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fc f9d1 	bl	8001458 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff ff44 	bl	8004f56 <LL_ADC_IsInternalRegulatorEnabled>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d115      	bne.n	8005100 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff ff18 	bl	8004f0e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050de:	4b9e      	ldr	r3, [pc, #632]	; (8005358 <HAL_ADC_Init+0x2d8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	099b      	lsrs	r3, r3, #6
 80050e4:	4a9d      	ldr	r2, [pc, #628]	; (800535c <HAL_ADC_Init+0x2dc>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	099b      	lsrs	r3, r3, #6
 80050ec:	3301      	adds	r3, #1
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80050f2:	e002      	b.n	80050fa <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f9      	bne.n	80050f4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f7ff ff26 	bl	8004f56 <LL_ADC_IsInternalRegulatorEnabled>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10d      	bne.n	800512c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	f043 0210 	orr.w	r2, r3, #16
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005120:	f043 0201 	orr.w	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff ff93 	bl	800505c <LL_ADC_REG_IsConversionOngoing>
 8005136:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513c:	f003 0310 	and.w	r3, r3, #16
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 8124 	bne.w	800538e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f040 8120 	bne.w	800538e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005152:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005156:	f043 0202 	orr.w	r2, r3, #2
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ff30 	bl	8004fc8 <LL_ADC_IsEnabled>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 80a7 	bne.w	80052be <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7e1b      	ldrb	r3, [r3, #24]
 8005178:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800517a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	7e5b      	ldrb	r3, [r3, #25]
 8005180:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005182:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	7e9b      	ldrb	r3, [r3, #26]
 8005188:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800518a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005190:	2a00      	cmp	r2, #0
 8005192:	d002      	beq.n	800519a <HAL_ADC_Init+0x11a>
 8005194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005198:	e000      	b.n	800519c <HAL_ADC_Init+0x11c>
 800519a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800519c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80051a2:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da04      	bge.n	80051b6 <HAL_ADC_Init+0x136>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051b4:	e001      	b.n	80051ba <HAL_ADC_Init+0x13a>
 80051b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80051ba:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80051c2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80051c4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d114      	bne.n	8005200 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	7e9b      	ldrb	r3, [r3, #26]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e00b      	b.n	8005200 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	f043 0220 	orr.w	r2, r3, #32
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f8:	f043 0201 	orr.w	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005214:	4313      	orrs	r3, r2
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	4313      	orrs	r3, r2
 800521a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8005226:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	69b9      	ldr	r1, [r7, #24]
 8005230:	430b      	orrs	r3, r1
 8005232:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005240:	4313      	orrs	r3, r2
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524e:	2b01      	cmp	r3, #1
 8005250:	d111      	bne.n	8005276 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800525e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005264:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800526a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	f043 0301 	orr.w	r3, r3, #1
 8005274:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	4b38      	ldr	r3, [pc, #224]	; (8005360 <HAL_ADC_Init+0x2e0>)
 800527e:	4013      	ands	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	6979      	ldr	r1, [r7, #20]
 8005286:	430b      	orrs	r3, r1
 8005288:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005292:	d014      	beq.n	80052be <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529c:	d00f      	beq.n	80052be <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80052a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a6:	d00a      	beq.n	80052be <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80052a8:	4b2e      	ldr	r3, [pc, #184]	; (8005364 <HAL_ADC_Init+0x2e4>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80052b8:	492a      	ldr	r1, [pc, #168]	; (8005364 <HAL_ADC_Init+0x2e4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c6:	461a      	mov	r2, r3
 80052c8:	2100      	movs	r1, #0
 80052ca:	f7ff fd76 	bl	8004dba <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	461a      	mov	r2, r3
 80052d8:	4923      	ldr	r1, [pc, #140]	; (8005368 <HAL_ADC_Init+0x2e8>)
 80052da:	f7ff fd6e 	bl	8004dba <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d108      	bne.n	80052f8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f062 020f 	orn	r2, r2, #15
 80052f4:	629a      	str	r2, [r3, #40]	; 0x28
 80052f6:	e017      	b.n	8005328 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005300:	d112      	bne.n	8005328 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	3b01      	subs	r3, #1
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	f003 031c 	and.w	r3, r3, #28
 8005314:	f06f 020f 	mvn.w	r2, #15
 8005318:	fa02 f103 	lsl.w	r1, r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fd61 	bl	8004df6 <LL_ADC_GetSamplingTimeCommonChannels>
 8005334:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800533a:	429a      	cmp	r2, r3
 800533c:	d116      	bne.n	800536c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	f023 0303 	bic.w	r3, r3, #3
 800534c:	f043 0201 	orr.w	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005354:	e023      	b.n	800539e <HAL_ADC_Init+0x31e>
 8005356:	bf00      	nop
 8005358:	20000000 	.word	0x20000000
 800535c:	053e2d63 	.word	0x053e2d63
 8005360:	1ffffc02 	.word	0x1ffffc02
 8005364:	40012708 	.word	0x40012708
 8005368:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	f023 0312 	bic.w	r3, r3, #18
 8005374:	f043 0210 	orr.w	r2, r3, #16
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005380:	f043 0201 	orr.w	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800538c:	e007      	b.n	800539e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	f043 0210 	orr.w	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800539e:	7ffb      	ldrb	r3, [r7, #31]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e07a      	b.n	80054b0 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	f043 0202 	orr.w	r2, r3, #2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 face 	bl	8005968 <ADC_ConversionStop>
 80053cc:	4603      	mov	r3, r0
 80053ce:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fb92 	bl	8005b00 <ADC_Disable>
 80053dc:	4603      	mov	r3, r0
 80053de:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fd9f 	bl	8004f34 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6812      	ldr	r2, [r2, #0]
 8005400:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8005404:	f023 0303 	bic.w	r3, r3, #3
 8005408:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f240 329f 	movw	r2, #927	; 0x39f
 8005412:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68d9      	ldr	r1, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b26      	ldr	r3, [pc, #152]	; (80054b8 <HAL_ADC_DeInit+0x110>)
 8005420:	400b      	ands	r3, r1
 8005422:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005432:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695a      	ldr	r2, [r3, #20]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0207 	bic.w	r2, r2, #7
 8005442:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005452:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005462:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8005472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2200      	movs	r2, #0
 8005480:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8005482:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <HAL_ADC_DeInit+0x114>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a0d      	ldr	r2, [pc, #52]	; (80054bc <HAL_ADC_DeInit+0x114>)
 8005488:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800548c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fb fff6 	bl	8001480 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	833e0200 	.word	0x833e0200
 80054bc:	40012708 	.word	0x40012708

080054c0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fdc5 	bl	800505c <LL_ADC_REG_IsConversionOngoing>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d132      	bne.n	800553e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_ADC_Start+0x26>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e02e      	b.n	8005544 <HAL_ADC_Start+0x84>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa80 	bl	80059f4 <ADC_Enable>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d11a      	bne.n	8005534 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005506:	f023 0301 	bic.w	r3, r3, #1
 800550a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	221c      	movs	r2, #28
 800551e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fd6f 	bl	8005010 <LL_ADC_REG_StartConversion>
 8005532:	e006      	b.n	8005542 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800553c:	e001      	b.n	8005542 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800553e:	2302      	movs	r3, #2
 8005540:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_ADC_Stop+0x16>
 800555e:	2302      	movs	r3, #2
 8005560:	e022      	b.n	80055a8 <HAL_ADC_Stop+0x5c>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f9fc 	bl	8005968 <ADC_ConversionStop>
 8005570:	4603      	mov	r3, r0
 8005572:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d111      	bne.n	800559e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fac0 	bl	8005b00 <ADC_Disable>
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	f043 0201 	orr.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d102      	bne.n	80055c8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80055c2:	2308      	movs	r3, #8
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e010      	b.n	80055ea <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d007      	beq.n	80055e6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	f043 0220 	orr.w	r2, r3, #32
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e077      	b.n	80056d6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80055e6:	2304      	movs	r3, #4
 80055e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80055ea:	f7fc ff5f 	bl	80024ac <HAL_GetTick>
 80055ee:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80055f0:	e021      	b.n	8005636 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f8:	d01d      	beq.n	8005636 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80055fa:	f7fc ff57 	bl	80024ac <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d302      	bcc.n	8005610 <HAL_ADC_PollForConversion+0x60>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d112      	bne.n	8005636 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4013      	ands	r3, r2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10b      	bne.n	8005636 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005622:	f043 0204 	orr.w	r2, r3, #4
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e04f      	b.n	80056d6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4013      	ands	r3, r2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0d6      	beq.n	80055f2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fbe6 	bl	8004e26 <LL_ADC_REG_IsTriggerSourceSWStart>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d031      	beq.n	80056c4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7e9b      	ldrb	r3, [r3, #26]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d12d      	bne.n	80056c4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b08      	cmp	r3, #8
 8005674:	d126      	bne.n	80056c4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fcee 	bl	800505c <LL_ADC_REG_IsConversionOngoing>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d112      	bne.n	80056ac <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 020c 	bic.w	r2, r2, #12
 8005694:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	659a      	str	r2, [r3, #88]	; 0x58
 80056aa:	e00b      	b.n	80056c4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	f043 0201 	orr.w	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7e1b      	ldrb	r3, [r3, #24]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	220c      	movs	r2, #12
 80056d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005706:	2300      	movs	r3, #0
 8005708:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x28>
 800571c:	2302      	movs	r3, #2
 800571e:	e110      	b.n	8005942 <HAL_ADC_ConfigChannel+0x24a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fc95 	bl	800505c <LL_ADC_REG_IsConversionOngoing>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	f040 80f7 	bne.w	8005928 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	f000 80b1 	beq.w	80058a6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800574c:	d004      	beq.n	8005758 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005752:	4a7e      	ldr	r2, [pc, #504]	; (800594c <HAL_ADC_ConfigChannel+0x254>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f7ff fb92 	bl	8004e8c <LL_ADC_REG_SetSequencerChAdd>
 8005768:	e041      	b.n	80057ee <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	210f      	movs	r1, #15
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	401a      	ands	r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <HAL_ADC_ConfigChannel+0xa0>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	0e9b      	lsrs	r3, r3, #26
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	e011      	b.n	80057bc <HAL_ADC_ConfigChannel+0xc4>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	fa93 f3a3 	rbit	r3, r3
 80057a4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80057b0:	2320      	movs	r3, #32
 80057b2:	e003      	b.n	80057bc <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	fab3 f383 	clz	r3, r3
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6849      	ldr	r1, [r1, #4]
 80057c0:	f001 011f 	and.w	r1, r1, #31
 80057c4:	408b      	lsls	r3, r1
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	089b      	lsrs	r3, r3, #2
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d808      	bhi.n	80057ee <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6859      	ldr	r1, [r3, #4]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	f7ff fb2e 	bl	8004e4a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6819      	ldr	r1, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	461a      	mov	r2, r3
 80057fc:	f7ff fb6b 	bl	8004ed6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	f280 8097 	bge.w	8005938 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800580a:	4851      	ldr	r0, [pc, #324]	; (8005950 <HAL_ADC_ConfigChannel+0x258>)
 800580c:	f7ff fac8 	bl	8004da0 <LL_ADC_GetCommonPathInternalCh>
 8005810:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a4f      	ldr	r2, [pc, #316]	; (8005954 <HAL_ADC_ConfigChannel+0x25c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d120      	bne.n	800585e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005822:	2b00      	cmp	r3, #0
 8005824:	d11b      	bne.n	800585e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800582c:	4619      	mov	r1, r3
 800582e:	4848      	ldr	r0, [pc, #288]	; (8005950 <HAL_ADC_ConfigChannel+0x258>)
 8005830:	f7ff faa4 	bl	8004d7c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005834:	4b48      	ldr	r3, [pc, #288]	; (8005958 <HAL_ADC_ConfigChannel+0x260>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	4a48      	ldr	r2, [pc, #288]	; (800595c <HAL_ADC_ConfigChannel+0x264>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	099b      	lsrs	r3, r3, #6
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800584e:	e002      	b.n	8005856 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	3b01      	subs	r3, #1
 8005854:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f9      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800585c:	e06c      	b.n	8005938 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a3f      	ldr	r2, [pc, #252]	; (8005960 <HAL_ADC_ConfigChannel+0x268>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d10c      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005878:	4619      	mov	r1, r3
 800587a:	4835      	ldr	r0, [pc, #212]	; (8005950 <HAL_ADC_ConfigChannel+0x258>)
 800587c:	f7ff fa7e 	bl	8004d7c <LL_ADC_SetCommonPathInternalCh>
 8005880:	e05a      	b.n	8005938 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a37      	ldr	r2, [pc, #220]	; (8005964 <HAL_ADC_ConfigChannel+0x26c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d155      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005892:	2b00      	cmp	r3, #0
 8005894:	d150      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800589c:	4619      	mov	r1, r3
 800589e:	482c      	ldr	r0, [pc, #176]	; (8005950 <HAL_ADC_ConfigChannel+0x258>)
 80058a0:	f7ff fa6c 	bl	8004d7c <LL_ADC_SetCommonPathInternalCh>
 80058a4:	e048      	b.n	8005938 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ae:	d004      	beq.n	80058ba <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80058b4:	4a25      	ldr	r2, [pc, #148]	; (800594c <HAL_ADC_ConfigChannel+0x254>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d107      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4619      	mov	r1, r3
 80058c4:	4610      	mov	r0, r2
 80058c6:	f7ff faf3 	bl	8004eb0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da32      	bge.n	8005938 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058d2:	481f      	ldr	r0, [pc, #124]	; (8005950 <HAL_ADC_ConfigChannel+0x258>)
 80058d4:	f7ff fa64 	bl	8004da0 <LL_ADC_GetCommonPathInternalCh>
 80058d8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a1d      	ldr	r2, [pc, #116]	; (8005954 <HAL_ADC_ConfigChannel+0x25c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d107      	bne.n	80058f4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80058ea:	4619      	mov	r1, r3
 80058ec:	4818      	ldr	r0, [pc, #96]	; (8005950 <HAL_ADC_ConfigChannel+0x258>)
 80058ee:	f7ff fa45 	bl	8004d7c <LL_ADC_SetCommonPathInternalCh>
 80058f2:	e021      	b.n	8005938 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a19      	ldr	r2, [pc, #100]	; (8005960 <HAL_ADC_ConfigChannel+0x268>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d107      	bne.n	800590e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005904:	4619      	mov	r1, r3
 8005906:	4812      	ldr	r0, [pc, #72]	; (8005950 <HAL_ADC_ConfigChannel+0x258>)
 8005908:	f7ff fa38 	bl	8004d7c <LL_ADC_SetCommonPathInternalCh>
 800590c:	e014      	b.n	8005938 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a14      	ldr	r2, [pc, #80]	; (8005964 <HAL_ADC_ConfigChannel+0x26c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10f      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800591e:	4619      	mov	r1, r3
 8005920:	480b      	ldr	r0, [pc, #44]	; (8005950 <HAL_ADC_ConfigChannel+0x258>)
 8005922:	f7ff fa2b 	bl	8004d7c <LL_ADC_SetCommonPathInternalCh>
 8005926:	e007      	b.n	8005938 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005940:	7ffb      	ldrb	r3, [r7, #31]
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	80000004 	.word	0x80000004
 8005950:	40012708 	.word	0x40012708
 8005954:	b0001000 	.word	0xb0001000
 8005958:	20000000 	.word	0x20000000
 800595c:	053e2d63 	.word	0x053e2d63
 8005960:	b8004000 	.word	0xb8004000
 8005964:	b4002000 	.word	0xb4002000

08005968 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f7ff fb71 	bl	800505c <LL_ADC_REG_IsConversionOngoing>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d033      	beq.n	80059e8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fb31 	bl	8004fec <LL_ADC_IsDisableOngoing>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fb4e 	bl	8005036 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800599a:	f7fc fd87 	bl	80024ac <HAL_GetTick>
 800599e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80059a0:	e01b      	b.n	80059da <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80059a2:	f7fc fd83 	bl	80024ac <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d914      	bls.n	80059da <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00d      	beq.n	80059da <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	f043 0210 	orr.w	r2, r3, #16
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ce:	f043 0201 	orr.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e007      	b.n	80059ea <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1dc      	bne.n	80059a2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fadf 	bl	8004fc8 <LL_ADC_IsEnabled>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d169      	bne.n	8005ae4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <ADC_Enable+0xfc>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a22:	f043 0210 	orr.w	r2, r3, #16
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a2e:	f043 0201 	orr.w	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e055      	b.n	8005ae6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fa9c 	bl	8004f7c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8005a44:	482b      	ldr	r0, [pc, #172]	; (8005af4 <ADC_Enable+0x100>)
 8005a46:	f7ff f9ab 	bl	8004da0 <LL_ADC_GetCommonPathInternalCh>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00f      	beq.n	8005a74 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a54:	4b28      	ldr	r3, [pc, #160]	; (8005af8 <ADC_Enable+0x104>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	099b      	lsrs	r3, r3, #6
 8005a5a:	4a28      	ldr	r2, [pc, #160]	; (8005afc <ADC_Enable+0x108>)
 8005a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a60:	099b      	lsrs	r3, r3, #6
 8005a62:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8005a64:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a66:	e002      	b.n	8005a6e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f9      	bne.n	8005a68 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	7e5b      	ldrb	r3, [r3, #25]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d033      	beq.n	8005ae4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005a7c:	f7fc fd16 	bl	80024ac <HAL_GetTick>
 8005a80:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a82:	e028      	b.n	8005ad6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff fa9d 	bl	8004fc8 <LL_ADC_IsEnabled>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fa6f 	bl	8004f7c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a9e:	f7fc fd05 	bl	80024ac <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d914      	bls.n	8005ad6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d00d      	beq.n	8005ad6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005abe:	f043 0210 	orr.w	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aca:	f043 0201 	orr.w	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e007      	b.n	8005ae6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d1cf      	bne.n	8005a84 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	80000017 	.word	0x80000017
 8005af4:	40012708 	.word	0x40012708
 8005af8:	20000000 	.word	0x20000000
 8005afc:	053e2d63 	.word	0x053e2d63

08005b00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff fa6d 	bl	8004fec <LL_ADC_IsDisableOngoing>
 8005b12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fa55 	bl	8004fc8 <LL_ADC_IsEnabled>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d047      	beq.n	8005bb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d144      	bne.n	8005bb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 0305 	and.w	r3, r3, #5
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d10c      	bne.n	8005b52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff fa30 	bl	8004fa2 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2203      	movs	r2, #3
 8005b48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b4a:	f7fc fcaf 	bl	80024ac <HAL_GetTick>
 8005b4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b50:	e029      	b.n	8005ba6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	f043 0210 	orr.w	r2, r3, #16
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e023      	b.n	8005bb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b6e:	f7fc fc9d 	bl	80024ac <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d914      	bls.n	8005ba6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00d      	beq.n	8005ba6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8e:	f043 0210 	orr.w	r2, r3, #16
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9a:	f043 0201 	orr.w	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e007      	b.n	8005bb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1dc      	bne.n	8005b6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <LL_ADC_SetCalibrationFactor>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bce:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr

08005be6 <LL_ADC_GetCalibrationFactor>:
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <LL_ADC_Enable>:
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c12:	f023 0317 	bic.w	r3, r3, #23
 8005c16:	f043 0201 	orr.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	609a      	str	r2, [r3, #8]
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bc80      	pop	{r7}
 8005c26:	4770      	bx	lr

08005c28 <LL_ADC_Disable>:
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c38:	f023 0317 	bic.w	r3, r3, #23
 8005c3c:	f043 0202 	orr.w	r2, r3, #2
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	609a      	str	r2, [r3, #8]
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr

08005c4e <LL_ADC_IsEnabled>:
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <LL_ADC_IsEnabled+0x18>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <LL_ADC_IsEnabled+0x1a>
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr

08005c72 <LL_ADC_StartCalibration>:
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	f023 0317 	bic.w	r3, r3, #23
 8005c86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	609a      	str	r2, [r3, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bc80      	pop	{r7}
 8005c96:	4770      	bx	lr

08005c98 <LL_ADC_IsCalibrationOnGoing>:
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cac:	d101      	bne.n	8005cb2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b088      	sub	sp, #32
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_ADCEx_Calibration_Start+0x1e>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	e0b9      	b.n	8005e50 <HAL_ADCEx_Calibration_Start+0x192>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff0b 	bl	8005b00 <ADC_Disable>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff ffab 	bl	8005c4e <LL_ADC_IsEnabled>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	f040 809d 	bne.w	8005e3a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005d08:	f043 0202 	orr.w	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	f248 0303 	movw	r3, #32771	; 0x8003
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d2c:	f023 0303 	bic.w	r3, r3, #3
 8005d30:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e02e      	b.n	8005d96 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff ff98 	bl	8005c72 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d42:	e014      	b.n	8005d6e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8005d50:	d30d      	bcc.n	8005d6e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d56:	f023 0312 	bic.w	r3, r3, #18
 8005d5a:	f043 0210 	orr.w	r2, r3, #16
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e070      	b.n	8005e50 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff ff90 	bl	8005c98 <LL_ADC_IsCalibrationOnGoing>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e2      	bne.n	8005d44 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff ff2f 	bl	8005be6 <LL_ADC_GetCalibrationFactor>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	3301      	adds	r3, #1
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	2b07      	cmp	r3, #7
 8005d9a:	d9cd      	bls.n	8005d38 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff ff29 	bl	8005c02 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	69b9      	ldr	r1, [r7, #24]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff ff01 	bl	8005bbe <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff ff31 	bl	8005c28 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005dc6:	f7fc fb71 	bl	80024ac <HAL_GetTick>
 8005dca:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005dcc:	e01c      	b.n	8005e08 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005dce:	f7fc fb6d 	bl	80024ac <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d915      	bls.n	8005e08 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff ff34 	bl	8005c4e <LL_ADC_IsEnabled>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00d      	beq.n	8005e08 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df0:	f043 0210 	orr.w	r2, r3, #16
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfc:	f043 0201 	orr.w	r2, r3, #1
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e023      	b.n	8005e50 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff ff1e 	bl	8005c4e <LL_ADC_IsEnabled>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1da      	bne.n	8005dce <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68d9      	ldr	r1, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e2c:	f023 0303 	bic.w	r3, r3, #3
 8005e30:	f043 0201 	orr.w	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	659a      	str	r2, [r3, #88]	; 0x58
 8005e38:	e005      	b.n	8005e46 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3e:	f043 0210 	orr.w	r2, r3, #16
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3720      	adds	r7, #32
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <__NVIC_SetPriorityGrouping+0x44>)
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e74:	4013      	ands	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e8a:	4a04      	ldr	r2, [pc, #16]	; (8005e9c <__NVIC_SetPriorityGrouping+0x44>)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	60d3      	str	r3, [r2, #12]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bc80      	pop	{r7}
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000ed00 	.word	0xe000ed00

08005ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	f003 0307 	and.w	r3, r3, #7
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	e000ed00 	.word	0xe000ed00

08005ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	db0b      	blt.n	8005ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	f003 021f 	and.w	r2, r3, #31
 8005ed4:	4906      	ldr	r1, [pc, #24]	; (8005ef0 <__NVIC_EnableIRQ+0x34>)
 8005ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	2001      	movs	r0, #1
 8005ede:	fa00 f202 	lsl.w	r2, r0, r2
 8005ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr
 8005ef0:	e000e100 	.word	0xe000e100

08005ef4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	db12      	blt.n	8005f2c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	f003 021f 	and.w	r2, r3, #31
 8005f0c:	490a      	ldr	r1, [pc, #40]	; (8005f38 <__NVIC_DisableIRQ+0x44>)
 8005f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	2001      	movs	r0, #1
 8005f16:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1a:	3320      	adds	r3, #32
 8005f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005f20:	f3bf 8f4f 	dsb	sy
}
 8005f24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005f26:	f3bf 8f6f 	isb	sy
}
 8005f2a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	e000e100 	.word	0xe000e100

08005f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	6039      	str	r1, [r7, #0]
 8005f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	db0a      	blt.n	8005f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	490c      	ldr	r1, [pc, #48]	; (8005f88 <__NVIC_SetPriority+0x4c>)
 8005f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5a:	0112      	lsls	r2, r2, #4
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	440b      	add	r3, r1
 8005f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f64:	e00a      	b.n	8005f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	4908      	ldr	r1, [pc, #32]	; (8005f8c <__NVIC_SetPriority+0x50>)
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	3b04      	subs	r3, #4
 8005f74:	0112      	lsls	r2, r2, #4
 8005f76:	b2d2      	uxtb	r2, r2
 8005f78:	440b      	add	r3, r1
 8005f7a:	761a      	strb	r2, [r3, #24]
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	e000e100 	.word	0xe000e100
 8005f8c:	e000ed00 	.word	0xe000ed00

08005f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b089      	sub	sp, #36	; 0x24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f1c3 0307 	rsb	r3, r3, #7
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	bf28      	it	cs
 8005fae:	2304      	movcs	r3, #4
 8005fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	3304      	adds	r3, #4
 8005fb6:	2b06      	cmp	r3, #6
 8005fb8:	d902      	bls.n	8005fc0 <NVIC_EncodePriority+0x30>
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3b03      	subs	r3, #3
 8005fbe:	e000      	b.n	8005fc2 <NVIC_EncodePriority+0x32>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	43da      	mvns	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	401a      	ands	r2, r3
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe2:	43d9      	mvns	r1, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fe8:	4313      	orrs	r3, r2
         );
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3724      	adds	r7, #36	; 0x24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ff2b 	bl	8005e58 <__NVIC_SetPriorityGrouping>
}
 8006002:	bf00      	nop
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b086      	sub	sp, #24
 800600e:	af00      	add	r7, sp, #0
 8006010:	4603      	mov	r3, r0
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	607a      	str	r2, [r7, #4]
 8006016:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006018:	f7ff ff42 	bl	8005ea0 <__NVIC_GetPriorityGrouping>
 800601c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	6978      	ldr	r0, [r7, #20]
 8006024:	f7ff ffb4 	bl	8005f90 <NVIC_EncodePriority>
 8006028:	4602      	mov	r2, r0
 800602a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff ff83 	bl	8005f3c <__NVIC_SetPriority>
}
 8006036:	bf00      	nop
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	4603      	mov	r3, r0
 8006046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff ff35 	bl	8005ebc <__NVIC_EnableIRQ>
}
 8006052:	bf00      	nop
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	4603      	mov	r3, r0
 8006062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff43 	bl	8005ef4 <__NVIC_DisableIRQ>
}
 800606e:	bf00      	nop
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e08e      	b.n	80061a8 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	4b47      	ldr	r3, [pc, #284]	; (80061b0 <HAL_DMA_Init+0x138>)
 8006092:	429a      	cmp	r2, r3
 8006094:	d80f      	bhi.n	80060b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	4b45      	ldr	r3, [pc, #276]	; (80061b4 <HAL_DMA_Init+0x13c>)
 800609e:	4413      	add	r3, r2
 80060a0:	4a45      	ldr	r2, [pc, #276]	; (80061b8 <HAL_DMA_Init+0x140>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	009a      	lsls	r2, r3, #2
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a42      	ldr	r2, [pc, #264]	; (80061bc <HAL_DMA_Init+0x144>)
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40
 80060b4:	e00e      	b.n	80060d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <HAL_DMA_Init+0x148>)
 80060be:	4413      	add	r3, r2
 80060c0:	4a3d      	ldr	r2, [pc, #244]	; (80061b8 <HAL_DMA_Init+0x140>)
 80060c2:	fba2 2303 	umull	r2, r3, r2, r3
 80060c6:	091b      	lsrs	r3, r3, #4
 80060c8:	009a      	lsls	r2, r3, #2
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a3c      	ldr	r2, [pc, #240]	; (80061c4 <HAL_DMA_Init+0x14c>)
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6812      	ldr	r2, [r2, #0]
 80060e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6819      	ldr	r1, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	431a      	orrs	r2, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a1b      	ldr	r3, [r3, #32]
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fb24 	bl	8006774 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006134:	d102      	bne.n	800613c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006144:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006148:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006152:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d010      	beq.n	800617e <HAL_DMA_Init+0x106>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b04      	cmp	r3, #4
 8006162:	d80c      	bhi.n	800617e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 fb4d 	bl	8006804 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800617a:	605a      	str	r2, [r3, #4]
 800617c:	e008      	b.n	8006190 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40020407 	.word	0x40020407
 80061b4:	bffdfff8 	.word	0xbffdfff8
 80061b8:	cccccccd 	.word	0xcccccccd
 80061bc:	40020000 	.word	0x40020000
 80061c0:	bffdfbf8 	.word	0xbffdfbf8
 80061c4:	40020400 	.word	0x40020400

080061c8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e07b      	b.n	80062d2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0201 	bic.w	r2, r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	461a      	mov	r2, r3
 80061f0:	4b3a      	ldr	r3, [pc, #232]	; (80062dc <HAL_DMA_DeInit+0x114>)
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d80f      	bhi.n	8006216 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	4b38      	ldr	r3, [pc, #224]	; (80062e0 <HAL_DMA_DeInit+0x118>)
 80061fe:	4413      	add	r3, r2
 8006200:	4a38      	ldr	r2, [pc, #224]	; (80062e4 <HAL_DMA_DeInit+0x11c>)
 8006202:	fba2 2303 	umull	r2, r3, r2, r3
 8006206:	091b      	lsrs	r3, r3, #4
 8006208:	009a      	lsls	r2, r3, #2
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a35      	ldr	r2, [pc, #212]	; (80062e8 <HAL_DMA_DeInit+0x120>)
 8006212:	641a      	str	r2, [r3, #64]	; 0x40
 8006214:	e00e      	b.n	8006234 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	4b33      	ldr	r3, [pc, #204]	; (80062ec <HAL_DMA_DeInit+0x124>)
 800621e:	4413      	add	r3, r2
 8006220:	4a30      	ldr	r2, [pc, #192]	; (80062e4 <HAL_DMA_DeInit+0x11c>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	091b      	lsrs	r3, r3, #4
 8006228:	009a      	lsls	r2, r3, #2
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a2f      	ldr	r2, [pc, #188]	; (80062f0 <HAL_DMA_DeInit+0x128>)
 8006232:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006240:	f003 021c 	and.w	r2, r3, #28
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	2101      	movs	r1, #1
 800624a:	fa01 f202 	lsl.w	r2, r1, r2
 800624e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fa8f 	bl	8006774 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006266:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00f      	beq.n	8006290 <HAL_DMA_DeInit+0xc8>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b04      	cmp	r3, #4
 8006276:	d80b      	bhi.n	8006290 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 fac3 	bl	8006804 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800628e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	40020407 	.word	0x40020407
 80062e0:	bffdfff8 	.word	0xbffdfff8
 80062e4:	cccccccd 	.word	0xcccccccd
 80062e8:	40020000 	.word	0x40020000
 80062ec:	bffdfbf8 	.word	0xbffdfbf8
 80062f0:	40020400 	.word	0x40020400

080062f4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_DMA_Start_IT+0x20>
 8006310:	2302      	movs	r3, #2
 8006312:	e069      	b.n	80063e8 <HAL_DMA_Start_IT+0xf4>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d155      	bne.n	80063d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0201 	bic.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f9d3 	bl	80066f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f042 020e 	orr.w	r2, r2, #14
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	e00f      	b.n	800638c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f022 0204 	bic.w	r2, r2, #4
 800637a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 020a 	orr.w	r2, r2, #10
 800638a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d007      	beq.n	80063aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0201 	orr.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e008      	b.n	80063e6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2280      	movs	r2, #128	; 0x80
 80063d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e04f      	b.n	80064a2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d008      	beq.n	8006420 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2204      	movs	r2, #4
 8006412:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e040      	b.n	80064a2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 020e 	bic.w	r2, r2, #14
 800642e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800643e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0201 	bic.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006454:	f003 021c 	and.w	r2, r3, #28
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f202 	lsl.w	r2, r1, r2
 8006462:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800646c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006484:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800648e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d005      	beq.n	80064d0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2204      	movs	r2, #4
 80064c8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	73fb      	strb	r3, [r7, #15]
 80064ce:	e047      	b.n	8006560 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 020e 	bic.w	r2, r2, #14
 80064de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006504:	f003 021c 	and.w	r2, r3, #28
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	2101      	movs	r1, #1
 800650e:	fa01 f202 	lsl.w	r2, r1, r2
 8006512:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800651c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00c      	beq.n	8006540 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006534:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800653e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
    }
  }
  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	f003 031c 	and.w	r3, r3, #28
 800658c:	2204      	movs	r2, #4
 800658e:	409a      	lsls	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d027      	beq.n	80065e8 <HAL_DMA_IRQHandler+0x7c>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d022      	beq.n	80065e8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0320 	and.w	r3, r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d107      	bne.n	80065c0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0204 	bic.w	r2, r2, #4
 80065be:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c4:	f003 021c 	and.w	r2, r3, #28
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	2104      	movs	r1, #4
 80065ce:	fa01 f202 	lsl.w	r2, r1, r2
 80065d2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 8081 	beq.w	80066e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80065e6:	e07b      	b.n	80066e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ec:	f003 031c 	and.w	r3, r3, #28
 80065f0:	2202      	movs	r2, #2
 80065f2:	409a      	lsls	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4013      	ands	r3, r2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d03d      	beq.n	8006678 <HAL_DMA_IRQHandler+0x10c>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d038      	beq.n	8006678 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10b      	bne.n	800662c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 020a 	bic.w	r2, r2, #10
 8006622:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	4b2e      	ldr	r3, [pc, #184]	; (80066ec <HAL_DMA_IRQHandler+0x180>)
 8006634:	429a      	cmp	r2, r3
 8006636:	d909      	bls.n	800664c <HAL_DMA_IRQHandler+0xe0>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800663c:	f003 031c 	and.w	r3, r3, #28
 8006640:	4a2b      	ldr	r2, [pc, #172]	; (80066f0 <HAL_DMA_IRQHandler+0x184>)
 8006642:	2102      	movs	r1, #2
 8006644:	fa01 f303 	lsl.w	r3, r1, r3
 8006648:	6053      	str	r3, [r2, #4]
 800664a:	e008      	b.n	800665e <HAL_DMA_IRQHandler+0xf2>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006650:	f003 031c 	and.w	r3, r3, #28
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <HAL_DMA_IRQHandler+0x188>)
 8006656:	2102      	movs	r1, #2
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666a:	2b00      	cmp	r3, #0
 800666c:	d038      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006676:	e033      	b.n	80066e0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667c:	f003 031c 	and.w	r3, r3, #28
 8006680:	2208      	movs	r2, #8
 8006682:	409a      	lsls	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4013      	ands	r3, r2
 8006688:	2b00      	cmp	r3, #0
 800668a:	d02a      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x176>
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d025      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 020e 	bic.w	r2, r2, #14
 80066a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066aa:	f003 021c 	and.w	r2, r3, #28
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2101      	movs	r1, #1
 80066b4:	fa01 f202 	lsl.w	r2, r1, r2
 80066b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d004      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
}
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40020080 	.word	0x40020080
 80066f0:	40020400 	.word	0x40020400
 80066f4:	40020000 	.word	0x40020000

080066f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800670e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006720:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006726:	f003 021c 	and.w	r2, r3, #28
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	2101      	movs	r1, #1
 8006730:	fa01 f202 	lsl.w	r2, r1, r2
 8006734:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b10      	cmp	r3, #16
 8006744:	d108      	bne.n	8006758 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006756:	e007      	b.n	8006768 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	60da      	str	r2, [r3, #12]
}
 8006768:	bf00      	nop
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	bc80      	pop	{r7}
 8006770:	4770      	bx	lr
	...

08006774 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006784:	429a      	cmp	r2, r3
 8006786:	d813      	bhi.n	80067b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	089b      	lsrs	r3, r3, #2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006794:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	3b08      	subs	r3, #8
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80067a6:	fba2 2303 	umull	r2, r3, r2, r3
 80067aa:	091b      	lsrs	r3, r3, #4
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	e011      	b.n	80067d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	009a      	lsls	r2, r3, #2
 80067b8:	4b10      	ldr	r3, [pc, #64]	; (80067fc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80067ba:	4413      	add	r3, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	3b08      	subs	r3, #8
 80067c8:	4a0b      	ldr	r2, [pc, #44]	; (80067f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80067ca:	fba2 2303 	umull	r2, r3, r2, r3
 80067ce:	091b      	lsrs	r3, r3, #4
 80067d0:	3307      	adds	r3, #7
 80067d2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a0a      	ldr	r2, [pc, #40]	; (8006800 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80067d8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	2201      	movs	r2, #1
 80067e2:	409a      	lsls	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80067e8:	bf00      	nop
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40020407 	.word	0x40020407
 80067f8:	cccccccd 	.word	0xcccccccd
 80067fc:	4002081c 	.word	0x4002081c
 8006800:	40020880 	.word	0x40020880

08006804 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006814:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4b0a      	ldr	r3, [pc, #40]	; (8006844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	461a      	mov	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a08      	ldr	r2, [pc, #32]	; (8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006828:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3b01      	subs	r3, #1
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	2201      	movs	r2, #1
 8006834:	409a      	lsls	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800683a:	bf00      	nop
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	1000823f 	.word	0x1000823f
 8006848:	40020940 	.word	0x40020940

0800684c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800685a:	4b1c      	ldr	r3, [pc, #112]	; (80068cc <HAL_FLASH_Program+0x80>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_FLASH_Program+0x1a>
 8006862:	2302      	movs	r3, #2
 8006864:	e02d      	b.n	80068c2 <HAL_FLASH_Program+0x76>
 8006866:	4b19      	ldr	r3, [pc, #100]	; (80068cc <HAL_FLASH_Program+0x80>)
 8006868:	2201      	movs	r2, #1
 800686a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800686c:	4b17      	ldr	r3, [pc, #92]	; (80068cc <HAL_FLASH_Program+0x80>)
 800686e:	2200      	movs	r2, #0
 8006870:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006872:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006876:	f000 f869 	bl	800694c <FLASH_WaitForLastOperation>
 800687a:	4603      	mov	r3, r0
 800687c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d11a      	bne.n	80068ba <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800688a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800688e:	68b8      	ldr	r0, [r7, #8]
 8006890:	f000 f8be 	bl	8006a10 <FLASH_Program_DoubleWord>
 8006894:	e004      	b.n	80068a0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	4619      	mov	r1, r3
 800689a:	68b8      	ldr	r0, [r7, #8]
 800689c:	f000 f8de 	bl	8006a5c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80068a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068a4:	f000 f852 	bl	800694c <FLASH_WaitForLastOperation>
 80068a8:	4603      	mov	r3, r0
 80068aa:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80068ac:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <HAL_FLASH_Program+0x84>)
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	4906      	ldr	r1, [pc, #24]	; (80068d0 <HAL_FLASH_Program+0x84>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068ba:	4b04      	ldr	r3, [pc, #16]	; (80068cc <HAL_FLASH_Program+0x80>)
 80068bc:	2200      	movs	r2, #0
 80068be:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20000364 	.word	0x20000364
 80068d0:	58004000 	.word	0x58004000

080068d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80068de:	4b0b      	ldr	r3, [pc, #44]	; (800690c <HAL_FLASH_Unlock+0x38>)
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	da0b      	bge.n	80068fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <HAL_FLASH_Unlock+0x38>)
 80068e8:	4a09      	ldr	r2, [pc, #36]	; (8006910 <HAL_FLASH_Unlock+0x3c>)
 80068ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80068ec:	4b07      	ldr	r3, [pc, #28]	; (800690c <HAL_FLASH_Unlock+0x38>)
 80068ee:	4a09      	ldr	r2, [pc, #36]	; (8006914 <HAL_FLASH_Unlock+0x40>)
 80068f0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80068f2:	4b06      	ldr	r3, [pc, #24]	; (800690c <HAL_FLASH_Unlock+0x38>)
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	da01      	bge.n	80068fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80068fe:	79fb      	ldrb	r3, [r7, #7]
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	58004000 	.word	0x58004000
 8006910:	45670123 	.word	0x45670123
 8006914:	cdef89ab 	.word	0xcdef89ab

08006918 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006922:	4b09      	ldr	r3, [pc, #36]	; (8006948 <HAL_FLASH_Lock+0x30>)
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	4a08      	ldr	r2, [pc, #32]	; (8006948 <HAL_FLASH_Lock+0x30>)
 8006928:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800692c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800692e:	4b06      	ldr	r3, [pc, #24]	; (8006948 <HAL_FLASH_Lock+0x30>)
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	db01      	blt.n	800693a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800693a:	79fb      	ldrb	r3, [r7, #7]
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	58004000 	.word	0x58004000

0800694c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8006954:	f7fb fdaa 	bl	80024ac <HAL_GetTick>
 8006958:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800695a:	e009      	b.n	8006970 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800695c:	f7fb fda6 	bl	80024ac <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d801      	bhi.n	8006970 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e047      	b.n	8006a00 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <FLASH_WaitForLastOperation+0xbc>)
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697c:	d0ee      	beq.n	800695c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800697e:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <FLASH_WaitForLastOperation+0xbc>)
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800698e:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <FLASH_WaitForLastOperation+0xbc>)
 8006990:	2201      	movs	r2, #1
 8006992:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800699a:	4013      	ands	r3, r2
 800699c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <FLASH_WaitForLastOperation+0x6c>
 80069a8:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <FLASH_WaitForLastOperation+0xbc>)
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069b2:	4915      	ldr	r1, [pc, #84]	; (8006a08 <FLASH_WaitForLastOperation+0xbc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	618b      	str	r3, [r1, #24]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d004      	beq.n	80069cc <FLASH_WaitForLastOperation+0x80>
 80069c2:	4a11      	ldr	r2, [pc, #68]	; (8006a08 <FLASH_WaitForLastOperation+0xbc>)
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069ca:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80069d2:	4a0e      	ldr	r2, [pc, #56]	; (8006a0c <FLASH_WaitForLastOperation+0xc0>)
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e011      	b.n	8006a00 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80069dc:	f7fb fd66 	bl	80024ac <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d801      	bhi.n	80069f0 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e007      	b.n	8006a00 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80069f0:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <FLASH_WaitForLastOperation+0xbc>)
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069fc:	d0ee      	beq.n	80069dc <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	58004000 	.word	0x58004000
 8006a0c:	20000364 	.word	0x20000364

08006a10 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006a1c:	4b0e      	ldr	r3, [pc, #56]	; (8006a58 <FLASH_Program_DoubleWord+0x48>)
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	4a0d      	ldr	r2, [pc, #52]	; (8006a58 <FLASH_Program_DoubleWord+0x48>)
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006a2e:	f3bf 8f6f 	isb	sy
}
 8006a32:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	000a      	movs	r2, r1
 8006a42:	2300      	movs	r3, #0
 8006a44:	68f9      	ldr	r1, [r7, #12]
 8006a46:	3104      	adds	r1, #4
 8006a48:	4613      	mov	r3, r2
 8006a4a:	600b      	str	r3, [r1, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	58004000 	.word	0x58004000

08006a5c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b089      	sub	sp, #36	; 0x24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006a66:	2340      	movs	r3, #64	; 0x40
 8006a68:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006a72:	4b18      	ldr	r3, [pc, #96]	; (8006ad4 <FLASH_Program_Fast+0x78>)
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	4a17      	ldr	r2, [pc, #92]	; (8006ad4 <FLASH_Program_Fast+0x78>)
 8006a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a7c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a82:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a84:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8006a86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a88:	b672      	cpsid	i
}
 8006a8a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	3304      	adds	r3, #4
 8006a98:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	617b      	str	r3, [r7, #20]
    row_index--;
 8006aa0:	7ffb      	ldrb	r3, [r7, #31]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8006aa6:	7ffb      	ldrb	r3, [r7, #31]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ef      	bne.n	8006a8c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8006aac:	bf00      	nop
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <FLASH_Program_Fast+0x78>)
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aba:	d0f8      	beq.n	8006aae <FLASH_Program_Fast+0x52>
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f383 8810 	msr	PRIMASK, r3
}
 8006ac6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006ac8:	bf00      	nop
 8006aca:	3724      	adds	r7, #36	; 0x24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	58004000 	.word	0x58004000

08006ad8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006ae2:	4b28      	ldr	r3, [pc, #160]	; (8006b84 <HAL_FLASHEx_Erase+0xac>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_FLASHEx_Erase+0x16>
 8006aea:	2302      	movs	r3, #2
 8006aec:	e046      	b.n	8006b7c <HAL_FLASHEx_Erase+0xa4>
 8006aee:	4b25      	ldr	r3, [pc, #148]	; (8006b84 <HAL_FLASHEx_Erase+0xac>)
 8006af0:	2201      	movs	r2, #1
 8006af2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006af4:	4b23      	ldr	r3, [pc, #140]	; (8006b84 <HAL_FLASHEx_Erase+0xac>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006afe:	f7ff ff25 	bl	800694c <FLASH_WaitForLastOperation>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d133      	bne.n	8006b74 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d108      	bne.n	8006b26 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8006b14:	f000 f838 	bl	8006b88 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b1c:	f7ff ff16 	bl	800694c <FLASH_WaitForLastOperation>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
 8006b24:	e024      	b.n	8006b70 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b2c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	60bb      	str	r3, [r7, #8]
 8006b34:	e012      	b.n	8006b5c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8006b36:	68b8      	ldr	r0, [r7, #8]
 8006b38:	f000 f836 	bl	8006ba8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b40:	f7ff ff04 	bl	800694c <FLASH_WaitForLastOperation>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d003      	beq.n	8006b56 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	601a      	str	r2, [r3, #0]
          break;
 8006b54:	e00a      	b.n	8006b6c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	60bb      	str	r3, [r7, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	4413      	add	r3, r2
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d3e4      	bcc.n	8006b36 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8006b6c:	f000 f878 	bl	8006c60 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006b70:	f000 f832 	bl	8006bd8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006b74:	4b03      	ldr	r3, [pc, #12]	; (8006b84 <HAL_FLASHEx_Erase+0xac>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]

  return status;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20000364 	.word	0x20000364

08006b88 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8006b8c:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <FLASH_MassErase+0x1c>)
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	4a04      	ldr	r2, [pc, #16]	; (8006ba4 <FLASH_MassErase+0x1c>)
 8006b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b96:	f043 0304 	orr.w	r3, r3, #4
 8006b9a:	6153      	str	r3, [r2, #20]
#endif
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bc80      	pop	{r7}
 8006ba2:	4770      	bx	lr
 8006ba4:	58004000 	.word	0x58004000

08006ba8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8006bb0:	4b08      	ldr	r3, [pc, #32]	; (8006bd4 <FLASH_PageErase+0x2c>)
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	00db      	lsls	r3, r3, #3
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	4a05      	ldr	r2, [pc, #20]	; (8006bd4 <FLASH_PageErase+0x2c>)
 8006bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc4:	f043 0302 	orr.w	r3, r3, #2
 8006bc8:	6153      	str	r3, [r2, #20]
#endif
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr
 8006bd4:	58004000 	.word	0x58004000

08006bd8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8006bdc:	4b1f      	ldr	r3, [pc, #124]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d117      	bne.n	8006c18 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a1b      	ldr	r2, [pc, #108]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006bee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bf2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006bf4:	4b19      	ldr	r3, [pc, #100]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a18      	ldr	r2, [pc, #96]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006bfa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	4b16      	ldr	r3, [pc, #88]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c0a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c0c:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a12      	ldr	r2, [pc, #72]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c16:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8006c18:	4b10      	ldr	r3, [pc, #64]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d117      	bne.n	8006c54 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006c24:	4b0d      	ldr	r3, [pc, #52]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a0c      	ldr	r2, [pc, #48]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c2e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006c30:	4b0a      	ldr	r3, [pc, #40]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a09      	ldr	r2, [pc, #36]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	4b07      	ldr	r3, [pc, #28]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a06      	ldr	r2, [pc, #24]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c46:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006c48:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a03      	ldr	r2, [pc, #12]	; (8006c5c <FLASH_FlushCaches+0x84>)
 8006c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c52:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8006c54:	bf00      	nop
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bc80      	pop	{r7}
 8006c5a:	4770      	bx	lr
 8006c5c:	58004000 	.word	0x58004000

08006c60 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8006c60:	b480      	push	{r7}
 8006c62:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006c64:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <FLASH_AcknowledgePageErase+0x1c>)
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	4a04      	ldr	r2, [pc, #16]	; (8006c7c <FLASH_AcknowledgePageErase+0x1c>)
 8006c6a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006c6e:	f023 0302 	bic.w	r3, r3, #2
 8006c72:	6153      	str	r3, [r2, #20]
#endif
}
 8006c74:	bf00      	nop
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bc80      	pop	{r7}
 8006c7a:	4770      	bx	lr
 8006c7c:	58004000 	.word	0x58004000

08006c80 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c8e:	e140      	b.n	8006f12 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	2101      	movs	r1, #1
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8132 	beq.w	8006f0c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f003 0303 	and.w	r3, r3, #3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d005      	beq.n	8006cc0 <HAL_GPIO_Init+0x40>
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d130      	bne.n	8006d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	2203      	movs	r2, #3
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	005b      	lsls	r3, r3, #1
 8006ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4013      	ands	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	091b      	lsrs	r3, r3, #4
 8006d0c:	f003 0201 	and.w	r2, r3, #1
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d017      	beq.n	8006d5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	2203      	movs	r2, #3
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	43db      	mvns	r3, r3
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4013      	ands	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	689a      	ldr	r2, [r3, #8]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d123      	bne.n	8006db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	08da      	lsrs	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3208      	adds	r2, #8
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	220f      	movs	r2, #15
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f003 0307 	and.w	r3, r3, #7
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	08da      	lsrs	r2, r3, #3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3208      	adds	r2, #8
 8006dac:	6939      	ldr	r1, [r7, #16]
 8006dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	2203      	movs	r2, #3
 8006dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f003 0203 	and.w	r2, r3, #3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 808c 	beq.w	8006f0c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006df4:	4a4e      	ldr	r2, [pc, #312]	; (8006f30 <HAL_GPIO_Init+0x2b0>)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	3302      	adds	r3, #2
 8006dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	2207      	movs	r2, #7
 8006e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e10:	43db      	mvns	r3, r3
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	4013      	ands	r3, r2
 8006e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e1e:	d00d      	beq.n	8006e3c <HAL_GPIO_Init+0x1bc>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a44      	ldr	r2, [pc, #272]	; (8006f34 <HAL_GPIO_Init+0x2b4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <HAL_GPIO_Init+0x1b8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a43      	ldr	r2, [pc, #268]	; (8006f38 <HAL_GPIO_Init+0x2b8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d101      	bne.n	8006e34 <HAL_GPIO_Init+0x1b4>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e004      	b.n	8006e3e <HAL_GPIO_Init+0x1be>
 8006e34:	2307      	movs	r3, #7
 8006e36:	e002      	b.n	8006e3e <HAL_GPIO_Init+0x1be>
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e000      	b.n	8006e3e <HAL_GPIO_Init+0x1be>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	f002 0203 	and.w	r2, r2, #3
 8006e44:	0092      	lsls	r2, r2, #2
 8006e46:	4093      	lsls	r3, r2
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006e4e:	4938      	ldr	r1, [pc, #224]	; (8006f30 <HAL_GPIO_Init+0x2b0>)
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	089b      	lsrs	r3, r3, #2
 8006e54:	3302      	adds	r3, #2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e5c:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <HAL_GPIO_Init+0x2bc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	43db      	mvns	r3, r3
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e80:	4a2e      	ldr	r2, [pc, #184]	; (8006f3c <HAL_GPIO_Init+0x2bc>)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006e86:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <HAL_GPIO_Init+0x2bc>)
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4013      	ands	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006eaa:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <HAL_GPIO_Init+0x2bc>)
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006eb0:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <HAL_GPIO_Init+0x2bc>)
 8006eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eb6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	693a      	ldr	r2, [r7, #16]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8006ed6:	4a19      	ldr	r2, [pc, #100]	; (8006f3c <HAL_GPIO_Init+0x2bc>)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8006ede:	4b17      	ldr	r3, [pc, #92]	; (8006f3c <HAL_GPIO_Init+0x2bc>)
 8006ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4013      	ands	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006f04:	4a0d      	ldr	r2, [pc, #52]	; (8006f3c <HAL_GPIO_Init+0x2bc>)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f47f aeb7 	bne.w	8006c90 <HAL_GPIO_Init+0x10>
  }
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	371c      	adds	r7, #28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	40010000 	.word	0x40010000
 8006f34:	48000400 	.word	0x48000400
 8006f38:	48000800 	.word	0x48000800
 8006f3c:	58000800 	.word	0x58000800

08006f40 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006f4e:	e0af      	b.n	80070b0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006f50:	2201      	movs	r2, #1
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	683a      	ldr	r2, [r7, #0]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80a2 	beq.w	80070aa <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006f66:	4a59      	ldr	r2, [pc, #356]	; (80070cc <HAL_GPIO_DeInit+0x18c>)
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	089b      	lsrs	r3, r3, #2
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f72:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	2207      	movs	r2, #7
 8006f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4013      	ands	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006f8e:	d00d      	beq.n	8006fac <HAL_GPIO_DeInit+0x6c>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a4f      	ldr	r2, [pc, #316]	; (80070d0 <HAL_GPIO_DeInit+0x190>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <HAL_GPIO_DeInit+0x68>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a4e      	ldr	r2, [pc, #312]	; (80070d4 <HAL_GPIO_DeInit+0x194>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d101      	bne.n	8006fa4 <HAL_GPIO_DeInit+0x64>
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	e004      	b.n	8006fae <HAL_GPIO_DeInit+0x6e>
 8006fa4:	2307      	movs	r3, #7
 8006fa6:	e002      	b.n	8006fae <HAL_GPIO_DeInit+0x6e>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <HAL_GPIO_DeInit+0x6e>
 8006fac:	2300      	movs	r3, #0
 8006fae:	697a      	ldr	r2, [r7, #20]
 8006fb0:	f002 0203 	and.w	r2, r2, #3
 8006fb4:	0092      	lsls	r2, r2, #2
 8006fb6:	4093      	lsls	r3, r2
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d136      	bne.n	800702c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006fbe:	4b46      	ldr	r3, [pc, #280]	; (80070d8 <HAL_GPIO_DeInit+0x198>)
 8006fc0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	4943      	ldr	r1, [pc, #268]	; (80070d8 <HAL_GPIO_DeInit+0x198>)
 8006fca:	4013      	ands	r3, r2
 8006fcc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006fd0:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <HAL_GPIO_DeInit+0x198>)
 8006fd2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	493f      	ldr	r1, [pc, #252]	; (80070d8 <HAL_GPIO_DeInit+0x198>)
 8006fdc:	4013      	ands	r3, r2
 8006fde:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8006fe2:	4b3d      	ldr	r3, [pc, #244]	; (80070d8 <HAL_GPIO_DeInit+0x198>)
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	493b      	ldr	r1, [pc, #236]	; (80070d8 <HAL_GPIO_DeInit+0x198>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8006ff0:	4b39      	ldr	r3, [pc, #228]	; (80070d8 <HAL_GPIO_DeInit+0x198>)
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	4937      	ldr	r1, [pc, #220]	; (80070d8 <HAL_GPIO_DeInit+0x198>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f003 0303 	and.w	r3, r3, #3
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	2207      	movs	r2, #7
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800700e:	4a2f      	ldr	r2, [pc, #188]	; (80070cc <HAL_GPIO_DeInit+0x18c>)
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	089b      	lsrs	r3, r3, #2
 8007014:	3302      	adds	r3, #2
 8007016:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	43da      	mvns	r2, r3
 800701e:	482b      	ldr	r0, [pc, #172]	; (80070cc <HAL_GPIO_DeInit+0x18c>)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	089b      	lsrs	r3, r3, #2
 8007024:	400a      	ands	r2, r1
 8007026:	3302      	adds	r3, #2
 8007028:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	2103      	movs	r1, #3
 8007036:	fa01 f303 	lsl.w	r3, r1, r3
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	08da      	lsrs	r2, r3, #3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3208      	adds	r2, #8
 8007048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	220f      	movs	r2, #15
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43db      	mvns	r3, r3
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	08d2      	lsrs	r2, r2, #3
 8007060:	4019      	ands	r1, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	3208      	adds	r2, #8
 8007066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	2103      	movs	r1, #3
 8007074:	fa01 f303 	lsl.w	r3, r1, r3
 8007078:	43db      	mvns	r3, r3
 800707a:	401a      	ands	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	2101      	movs	r1, #1
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	fa01 f303 	lsl.w	r3, r1, r3
 800708c:	43db      	mvns	r3, r3
 800708e:	401a      	ands	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	2103      	movs	r1, #3
 800709e:	fa01 f303 	lsl.w	r3, r1, r3
 80070a2:	43db      	mvns	r3, r3
 80070a4:	401a      	ands	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	3301      	adds	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f47f af49 	bne.w	8006f50 <HAL_GPIO_DeInit+0x10>
  }
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	371c      	adds	r7, #28
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40010000 	.word	0x40010000
 80070d0:	48000400 	.word	0x48000400
 80070d4:	48000800 	.word	0x48000800
 80070d8:	58000800 	.word	0x58000800

080070dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	807b      	strh	r3, [r7, #2]
 80070e8:	4613      	mov	r3, r2
 80070ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80070ec:	787b      	ldrb	r3, [r7, #1]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d003      	beq.n	80070fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80070f2:	887a      	ldrh	r2, [r7, #2]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80070f8:	e002      	b.n	8007100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80070fa:	887a      	ldrh	r2, [r7, #2]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
	...

0800710c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007116:	4b08      	ldr	r3, [pc, #32]	; (8007138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	4013      	ands	r3, r2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d006      	beq.n	8007130 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007122:	4a05      	ldr	r2, [pc, #20]	; (8007138 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007124:	88fb      	ldrh	r3, [r7, #6]
 8007126:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	4618      	mov	r0, r3
 800712c:	f005 fc68 	bl	800ca00 <HAL_GPIO_EXTI_Callback>
  }
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	58000800 	.word	0x58000800

0800713c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e081      	b.n	8007252 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f7fa fd86 	bl	8001c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2224      	movs	r2, #36	; 0x24
 800716c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f022 0201 	bic.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800718c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800719c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d107      	bne.n	80071b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071b2:	609a      	str	r2, [r3, #8]
 80071b4:	e006      	b.n	80071c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80071c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d104      	bne.n	80071d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	6812      	ldr	r2, [r2, #0]
 80071e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68da      	ldr	r2, [r3, #12]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691a      	ldr	r2, [r3, #16]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	430a      	orrs	r2, r1
 8007212:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	69d9      	ldr	r1, [r3, #28]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a1a      	ldr	r2, [r3, #32]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2220      	movs	r2, #32
 800723e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af02      	add	r7, sp, #8
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	461a      	mov	r2, r3
 800726a:	4603      	mov	r3, r0
 800726c:	817b      	strh	r3, [r7, #10]
 800726e:	460b      	mov	r3, r1
 8007270:	813b      	strh	r3, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b20      	cmp	r3, #32
 8007280:	f040 80f9 	bne.w	8007476 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007284:	6a3b      	ldr	r3, [r7, #32]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_I2C_Mem_Write+0x34>
 800728a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007296:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e0ed      	b.n	8007478 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_I2C_Mem_Write+0x4e>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e0e6      	b.n	8007478 <HAL_I2C_Mem_Write+0x21c>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072b2:	f7fb f8fb 	bl	80024ac <HAL_GetTick>
 80072b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2319      	movs	r3, #25
 80072be:	2201      	movs	r2, #1
 80072c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 fac2 	bl	800784e <I2C_WaitOnFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0d1      	b.n	8007478 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2221      	movs	r2, #33	; 0x21
 80072d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2240      	movs	r2, #64	; 0x40
 80072e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a3a      	ldr	r2, [r7, #32]
 80072ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072fc:	88f8      	ldrh	r0, [r7, #6]
 80072fe:	893a      	ldrh	r2, [r7, #8]
 8007300:	8979      	ldrh	r1, [r7, #10]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	4603      	mov	r3, r0
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f000 f9d3 	bl	80076b8 <I2C_RequestMemoryWrite>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e0a9      	b.n	8007478 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	2bff      	cmp	r3, #255	; 0xff
 800732c:	d90e      	bls.n	800734c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007338:	b2da      	uxtb	r2, r3
 800733a:	8979      	ldrh	r1, [r7, #10]
 800733c:	2300      	movs	r3, #0
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fc1f 	bl	8007b88 <I2C_TransferConfig>
 800734a:	e00f      	b.n	800736c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735a:	b2da      	uxtb	r2, r3
 800735c:	8979      	ldrh	r1, [r7, #10]
 800735e:	2300      	movs	r3, #0
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fc0e 	bl	8007b88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 faac 	bl	80078ce <I2C_WaitOnTXISFlagUntilTimeout>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e07b      	b.n	8007478 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	781a      	ldrb	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d034      	beq.n	8007424 <HAL_I2C_Mem_Write+0x1c8>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d130      	bne.n	8007424 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	2200      	movs	r2, #0
 80073ca:	2180      	movs	r1, #128	; 0x80
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 fa3e 	bl	800784e <I2C_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e04d      	b.n	8007478 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2bff      	cmp	r3, #255	; 0xff
 80073e4:	d90e      	bls.n	8007404 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	22ff      	movs	r2, #255	; 0xff
 80073ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	8979      	ldrh	r1, [r7, #10]
 80073f4:	2300      	movs	r3, #0
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 fbc3 	bl	8007b88 <I2C_TransferConfig>
 8007402:	e00f      	b.n	8007424 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007408:	b29a      	uxth	r2, r3
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007412:	b2da      	uxtb	r2, r3
 8007414:	8979      	ldrh	r1, [r7, #10]
 8007416:	2300      	movs	r3, #0
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 fbb2 	bl	8007b88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d19e      	bne.n	800736c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 fa8b 	bl	800794e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e01a      	b.n	8007478 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2220      	movs	r2, #32
 8007448:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6859      	ldr	r1, [r3, #4]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	4b0a      	ldr	r3, [pc, #40]	; (8007480 <HAL_I2C_Mem_Write+0x224>)
 8007456:	400b      	ands	r3, r1
 8007458:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007472:	2300      	movs	r3, #0
 8007474:	e000      	b.n	8007478 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007476:	2302      	movs	r3, #2
  }
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	fe00e800 	.word	0xfe00e800

08007484 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af02      	add	r7, sp, #8
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	4608      	mov	r0, r1
 800748e:	4611      	mov	r1, r2
 8007490:	461a      	mov	r2, r3
 8007492:	4603      	mov	r3, r0
 8007494:	817b      	strh	r3, [r7, #10]
 8007496:	460b      	mov	r3, r1
 8007498:	813b      	strh	r3, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	f040 80fd 	bne.w	80076a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <HAL_I2C_Mem_Read+0x34>
 80074b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d105      	bne.n	80074c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0f1      	b.n	80076a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_I2C_Mem_Read+0x4e>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e0ea      	b.n	80076a8 <HAL_I2C_Mem_Read+0x224>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80074da:	f7fa ffe7 	bl	80024ac <HAL_GetTick>
 80074de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	2319      	movs	r3, #25
 80074e6:	2201      	movs	r2, #1
 80074e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 f9ae 	bl	800784e <I2C_WaitOnFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0d5      	b.n	80076a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2222      	movs	r2, #34	; 0x22
 8007500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2240      	movs	r2, #64	; 0x40
 8007508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a3a      	ldr	r2, [r7, #32]
 8007516:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800751c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007524:	88f8      	ldrh	r0, [r7, #6]
 8007526:	893a      	ldrh	r2, [r7, #8]
 8007528:	8979      	ldrh	r1, [r7, #10]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	4603      	mov	r3, r0
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f913 	bl	8007760 <I2C_RequestMemoryRead>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e0ad      	b.n	80076a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007550:	b29b      	uxth	r3, r3
 8007552:	2bff      	cmp	r3, #255	; 0xff
 8007554:	d90e      	bls.n	8007574 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	22ff      	movs	r2, #255	; 0xff
 800755a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007560:	b2da      	uxtb	r2, r3
 8007562:	8979      	ldrh	r1, [r7, #10]
 8007564:	4b52      	ldr	r3, [pc, #328]	; (80076b0 <HAL_I2C_Mem_Read+0x22c>)
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fb0b 	bl	8007b88 <I2C_TransferConfig>
 8007572:	e00f      	b.n	8007594 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29a      	uxth	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007582:	b2da      	uxtb	r2, r3
 8007584:	8979      	ldrh	r1, [r7, #10]
 8007586:	4b4a      	ldr	r3, [pc, #296]	; (80076b0 <HAL_I2C_Mem_Read+0x22c>)
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 fafa 	bl	8007b88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759a:	2200      	movs	r2, #0
 800759c:	2104      	movs	r1, #4
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f955 	bl	800784e <I2C_WaitOnFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e07c      	b.n	80076a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ca:	3b01      	subs	r3, #1
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d034      	beq.n	8007654 <HAL_I2C_Mem_Read+0x1d0>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d130      	bne.n	8007654 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075f8:	2200      	movs	r2, #0
 80075fa:	2180      	movs	r1, #128	; 0x80
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f926 	bl	800784e <I2C_WaitOnFlagUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e04d      	b.n	80076a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007610:	b29b      	uxth	r3, r3
 8007612:	2bff      	cmp	r3, #255	; 0xff
 8007614:	d90e      	bls.n	8007634 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	22ff      	movs	r2, #255	; 0xff
 800761a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007620:	b2da      	uxtb	r2, r3
 8007622:	8979      	ldrh	r1, [r7, #10]
 8007624:	2300      	movs	r3, #0
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 faab 	bl	8007b88 <I2C_TransferConfig>
 8007632:	e00f      	b.n	8007654 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007638:	b29a      	uxth	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007642:	b2da      	uxtb	r2, r3
 8007644:	8979      	ldrh	r1, [r7, #10]
 8007646:	2300      	movs	r3, #0
 8007648:	9300      	str	r3, [sp, #0]
 800764a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fa9a 	bl	8007b88 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007658:	b29b      	uxth	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d19a      	bne.n	8007594 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f973 	bl	800794e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d001      	beq.n	8007672 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e01a      	b.n	80076a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2220      	movs	r2, #32
 8007678:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6859      	ldr	r1, [r3, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <HAL_I2C_Mem_Read+0x230>)
 8007686:	400b      	ands	r3, r1
 8007688:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2220      	movs	r2, #32
 800768e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e000      	b.n	80076a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80076a6:	2302      	movs	r3, #2
  }
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	80002400 	.word	0x80002400
 80076b4:	fe00e800 	.word	0xfe00e800

080076b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af02      	add	r7, sp, #8
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	4608      	mov	r0, r1
 80076c2:	4611      	mov	r1, r2
 80076c4:	461a      	mov	r2, r3
 80076c6:	4603      	mov	r3, r0
 80076c8:	817b      	strh	r3, [r7, #10]
 80076ca:	460b      	mov	r3, r1
 80076cc:	813b      	strh	r3, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	8979      	ldrh	r1, [r7, #10]
 80076d8:	4b20      	ldr	r3, [pc, #128]	; (800775c <I2C_RequestMemoryWrite+0xa4>)
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fa51 	bl	8007b88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	69b9      	ldr	r1, [r7, #24]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f8ef 	bl	80078ce <I2C_WaitOnTXISFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e02c      	b.n	8007754 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076fa:	88fb      	ldrh	r3, [r7, #6]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d105      	bne.n	800770c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007700:	893b      	ldrh	r3, [r7, #8]
 8007702:	b2da      	uxtb	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	629a      	str	r2, [r3, #40]	; 0x28
 800770a:	e015      	b.n	8007738 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800770c:	893b      	ldrh	r3, [r7, #8]
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	b29b      	uxth	r3, r3
 8007712:	b2da      	uxtb	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	69b9      	ldr	r1, [r7, #24]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f8d5 	bl	80078ce <I2C_WaitOnTXISFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d001      	beq.n	800772e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e012      	b.n	8007754 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800772e:	893b      	ldrh	r3, [r7, #8]
 8007730:	b2da      	uxtb	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	2200      	movs	r2, #0
 8007740:	2180      	movs	r1, #128	; 0x80
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f883 	bl	800784e <I2C_WaitOnFlagUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	80002000 	.word	0x80002000

08007760 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	4608      	mov	r0, r1
 800776a:	4611      	mov	r1, r2
 800776c:	461a      	mov	r2, r3
 800776e:	4603      	mov	r3, r0
 8007770:	817b      	strh	r3, [r7, #10]
 8007772:	460b      	mov	r3, r1
 8007774:	813b      	strh	r3, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800777a:	88fb      	ldrh	r3, [r7, #6]
 800777c:	b2da      	uxtb	r2, r3
 800777e:	8979      	ldrh	r1, [r7, #10]
 8007780:	4b20      	ldr	r3, [pc, #128]	; (8007804 <I2C_RequestMemoryRead+0xa4>)
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f9fe 	bl	8007b88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800778c:	69fa      	ldr	r2, [r7, #28]
 800778e:	69b9      	ldr	r1, [r7, #24]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 f89c 	bl	80078ce <I2C_WaitOnTXISFlagUntilTimeout>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e02c      	b.n	80077fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077a0:	88fb      	ldrh	r3, [r7, #6]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d105      	bne.n	80077b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077a6:	893b      	ldrh	r3, [r7, #8]
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
 80077b0:	e015      	b.n	80077de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077b2:	893b      	ldrh	r3, [r7, #8]
 80077b4:	0a1b      	lsrs	r3, r3, #8
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	69b9      	ldr	r1, [r7, #24]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 f882 	bl	80078ce <I2C_WaitOnTXISFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e012      	b.n	80077fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d4:	893b      	ldrh	r3, [r7, #8]
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	2200      	movs	r2, #0
 80077e6:	2140      	movs	r1, #64	; 0x40
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f830 	bl	800784e <I2C_WaitOnFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e000      	b.n	80077fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	80002000 	.word	0x80002000

08007808 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699b      	ldr	r3, [r3, #24]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b02      	cmp	r3, #2
 800781c:	d103      	bne.n	8007826 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d007      	beq.n	8007844 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	619a      	str	r2, [r3, #24]
  }
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr

0800784e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b084      	sub	sp, #16
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	603b      	str	r3, [r7, #0]
 800785a:	4613      	mov	r3, r2
 800785c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800785e:	e022      	b.n	80078a6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007866:	d01e      	beq.n	80078a6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007868:	f7fa fe20 	bl	80024ac <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d302      	bcc.n	800787e <I2C_WaitOnFlagUntilTimeout+0x30>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d113      	bne.n	80078a6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007882:	f043 0220 	orr.w	r2, r3, #32
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e00f      	b.n	80078c6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	699a      	ldr	r2, [r3, #24]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4013      	ands	r3, r2
 80078b0:	68ba      	ldr	r2, [r7, #8]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	bf0c      	ite	eq
 80078b6:	2301      	moveq	r3, #1
 80078b8:	2300      	movne	r3, #0
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	461a      	mov	r2, r3
 80078be:	79fb      	ldrb	r3, [r7, #7]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d0cd      	beq.n	8007860 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b084      	sub	sp, #16
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	60f8      	str	r0, [r7, #12]
 80078d6:	60b9      	str	r1, [r7, #8]
 80078d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078da:	e02c      	b.n	8007936 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f871 	bl	80079c8 <I2C_IsErrorOccurred>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e02a      	b.n	8007946 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078f6:	d01e      	beq.n	8007936 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078f8:	f7fa fdd8 	bl	80024ac <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	429a      	cmp	r2, r3
 8007906:	d302      	bcc.n	800790e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d113      	bne.n	8007936 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007912:	f043 0220 	orr.w	r2, r3, #32
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e007      	b.n	8007946 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b02      	cmp	r3, #2
 8007942:	d1cb      	bne.n	80078dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800795a:	e028      	b.n	80079ae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f831 	bl	80079c8 <I2C_IsErrorOccurred>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e026      	b.n	80079be <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007970:	f7fa fd9c 	bl	80024ac <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	429a      	cmp	r2, r3
 800797e:	d302      	bcc.n	8007986 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d113      	bne.n	80079ae <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798a:	f043 0220 	orr.w	r2, r3, #32
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2220      	movs	r2, #32
 8007996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e007      	b.n	80079be <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d1cf      	bne.n	800795c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d068      	beq.n	8007ac6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2210      	movs	r2, #16
 80079fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079fc:	e049      	b.n	8007a92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a04:	d045      	beq.n	8007a92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a06:	f7fa fd51 	bl	80024ac <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d302      	bcc.n	8007a1c <I2C_IsErrorOccurred+0x54>
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d13a      	bne.n	8007a92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3e:	d121      	bne.n	8007a84 <I2C_IsErrorOccurred+0xbc>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a46:	d01d      	beq.n	8007a84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007a48:	7cfb      	ldrb	r3, [r7, #19]
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d01a      	beq.n	8007a84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685a      	ldr	r2, [r3, #4]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007a5e:	f7fa fd25 	bl	80024ac <HAL_GetTick>
 8007a62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a64:	e00e      	b.n	8007a84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a66:	f7fa fd21 	bl	80024ac <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b19      	cmp	r3, #25
 8007a72:	d907      	bls.n	8007a84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	f043 0320 	orr.w	r3, r3, #32
 8007a7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007a82:	e006      	b.n	8007a92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	699b      	ldr	r3, [r3, #24]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d1e9      	bne.n	8007a66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	f003 0320 	and.w	r3, r3, #32
 8007a9c:	2b20      	cmp	r3, #32
 8007a9e:	d003      	beq.n	8007aa8 <I2C_IsErrorOccurred+0xe0>
 8007aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0aa      	beq.n	80079fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d103      	bne.n	8007ab8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	f043 0304 	orr.w	r3, r3, #4
 8007abe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ae8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f043 0308 	orr.w	r3, r3, #8
 8007b00:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b1c:	6a3b      	ldr	r3, [r7, #32]
 8007b1e:	f043 0302 	orr.w	r3, r3, #2
 8007b22:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d01c      	beq.n	8007b76 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7ff fe63 	bl	8007808 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6859      	ldr	r1, [r3, #4]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <I2C_IsErrorOccurred+0x1bc>)
 8007b4e:	400b      	ands	r3, r1
 8007b50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2220      	movs	r2, #32
 8007b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007b76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3728      	adds	r7, #40	; 0x28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	fe00e800 	.word	0xfe00e800

08007b88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	607b      	str	r3, [r7, #4]
 8007b92:	460b      	mov	r3, r1
 8007b94:	817b      	strh	r3, [r7, #10]
 8007b96:	4613      	mov	r3, r2
 8007b98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b9a:	897b      	ldrh	r3, [r7, #10]
 8007b9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007ba0:	7a7b      	ldrb	r3, [r7, #9]
 8007ba2:	041b      	lsls	r3, r3, #16
 8007ba4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ba8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bb6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	0d5b      	lsrs	r3, r3, #21
 8007bc2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <I2C_TransferConfig+0x5c>)
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	43db      	mvns	r3, r3
 8007bcc:	ea02 0103 	and.w	r1, r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007bda:	bf00      	nop
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bc80      	pop	{r7}
 8007be2:	4770      	bx	lr
 8007be4:	03ff63ff 	.word	0x03ff63ff

08007be8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b20      	cmp	r3, #32
 8007bfc:	d138      	bne.n	8007c70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	e032      	b.n	8007c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2224      	movs	r2, #36	; 0x24
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0201 	bic.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6819      	ldr	r1, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f042 0201 	orr.w	r2, r2, #1
 8007c5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e000      	b.n	8007c72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c70:	2302      	movs	r3, #2
  }
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr

08007c7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b085      	sub	sp, #20
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d139      	bne.n	8007d06 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d101      	bne.n	8007ca0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	e033      	b.n	8007d08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2224      	movs	r2, #36	; 0x24
 8007cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f042 0201 	orr.w	r2, r2, #1
 8007cf0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	e000      	b.n	8007d08 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d06:	2302      	movs	r3, #2
  }
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr
	...

08007d14 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d18:	4b04      	ldr	r3, [pc, #16]	; (8007d2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a03      	ldr	r2, [pc, #12]	; (8007d2c <HAL_PWR_EnableBkUpAccess+0x18>)
 8007d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d22:	6013      	str	r3, [r2, #0]
}
 8007d24:	bf00      	nop
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr
 8007d2c:	58000400 	.word	0x58000400

08007d30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007d34:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <HAL_PWREx_GetVoltageRange+0x14>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bc80      	pop	{r7}
 8007d42:	4770      	bx	lr
 8007d44:	58000400 	.word	0x58000400

08007d48 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d58:	d101      	bne.n	8007d5e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e000      	b.n	8007d60 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr
 8007d68:	58000400 	.word	0x58000400

08007d6c <LL_RCC_HSE_EnableTcxo>:
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d7e:	6013      	str	r3, [r2, #0]
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <LL_RCC_HSE_DisableTcxo>:
{
 8007d88:	b480      	push	{r7}
 8007d8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d9a:	6013      	str	r3, [r2, #0]
}
 8007d9c:	bf00      	nop
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bc80      	pop	{r7}
 8007da2:	4770      	bx	lr

08007da4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007db6:	d101      	bne.n	8007dbc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bc80      	pop	{r7}
 8007dc4:	4770      	bx	lr

08007dc6 <LL_RCC_HSE_Enable>:
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dd8:	6013      	str	r3, [r2, #0]
}
 8007dda:	bf00      	nop
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bc80      	pop	{r7}
 8007de0:	4770      	bx	lr

08007de2 <LL_RCC_HSE_Disable>:
{
 8007de2:	b480      	push	{r7}
 8007de4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007df4:	6013      	str	r3, [r2, #0]
}
 8007df6:	bf00      	nop
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bc80      	pop	{r7}
 8007dfc:	4770      	bx	lr

08007dfe <LL_RCC_HSE_IsReady>:
{
 8007dfe:	b480      	push	{r7}
 8007e00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e10:	d101      	bne.n	8007e16 <LL_RCC_HSE_IsReady+0x18>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e000      	b.n	8007e18 <LL_RCC_HSE_IsReady+0x1a>
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <LL_RCC_HSI_Enable>:
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e32:	6013      	str	r3, [r2, #0]
}
 8007e34:	bf00      	nop
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <LL_RCC_HSI_Disable>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e4e:	6013      	str	r3, [r2, #0]
}
 8007e50:	bf00      	nop
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr

08007e58 <LL_RCC_HSI_IsReady>:
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e6a:	d101      	bne.n	8007e70 <LL_RCC_HSI_IsReady+0x18>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <LL_RCC_HSI_IsReady+0x1a>
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bc80      	pop	{r7}
 8007e78:	4770      	bx	lr

08007e7a <LL_RCC_HSI_SetCalibTrimming>:
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	061b      	lsls	r3, r3, #24
 8007e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e94:	4313      	orrs	r3, r2
 8007e96:	604b      	str	r3, [r1, #4]
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bc80      	pop	{r7}
 8007ea0:	4770      	bx	lr

08007ea2 <LL_RCC_LSE_IsReady>:
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eae:	f003 0302 	and.w	r3, r3, #2
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d101      	bne.n	8007eba <LL_RCC_LSE_IsReady+0x18>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e000      	b.n	8007ebc <LL_RCC_LSE_IsReady+0x1a>
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr

08007ec4 <LL_RCC_LSI_Enable>:
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8007ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ed4:	f043 0301 	orr.w	r3, r3, #1
 8007ed8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007edc:	bf00      	nop
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr

08007ee4 <LL_RCC_LSI_Disable>:
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007efc:	bf00      	nop
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bc80      	pop	{r7}
 8007f02:	4770      	bx	lr

08007f04 <LL_RCC_LSI_IsReady>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d101      	bne.n	8007f1c <LL_RCC_LSI_IsReady+0x18>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e000      	b.n	8007f1e <LL_RCC_LSI_IsReady+0x1a>
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr

08007f26 <LL_RCC_MSI_Enable>:
{
 8007f26:	b480      	push	{r7}
 8007f28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f34:	f043 0301 	orr.w	r3, r3, #1
 8007f38:	6013      	str	r3, [r2, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <LL_RCC_MSI_Disable>:
{
 8007f42:	b480      	push	{r7}
 8007f44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f50:	f023 0301 	bic.w	r3, r3, #1
 8007f54:	6013      	str	r3, [r2, #0]
}
 8007f56:	bf00      	nop
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr

08007f5e <LL_RCC_MSI_IsReady>:
{
 8007f5e:	b480      	push	{r7}
 8007f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d101      	bne.n	8007f74 <LL_RCC_MSI_IsReady+0x16>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <LL_RCC_MSI_IsReady+0x18>
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr

08007f7e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007f7e:	b480      	push	{r7}
 8007f80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b08      	cmp	r3, #8
 8007f8e:	d101      	bne.n	8007f94 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <LL_RCC_MSI_GetRange>:
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bc80      	pop	{r7}
 8007fb2:	4770      	bx	lr

08007fb4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr

08007fcc <LL_RCC_MSI_SetCalibTrimming>:
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	604b      	str	r3, [r1, #4]
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr

08007ff4 <LL_RCC_SetSysClkSource>:
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f023 0203 	bic.w	r2, r3, #3
 8008006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4313      	orrs	r3, r2
 800800e:	608b      	str	r3, [r1, #8]
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <LL_RCC_GetSysClkSource>:
{
 800801a:	b480      	push	{r7}
 800801c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800801e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f003 030c 	and.w	r3, r3, #12
}
 8008028:	4618      	mov	r0, r3
 800802a:	46bd      	mov	sp, r7
 800802c:	bc80      	pop	{r7}
 800802e:	4770      	bx	lr

08008030 <LL_RCC_SetAHBPrescaler>:
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4313      	orrs	r3, r2
 800804a:	608b      	str	r3, [r1, #8]
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	bc80      	pop	{r7}
 8008054:	4770      	bx	lr

08008056 <LL_RCC_SetAHB3Prescaler>:
{
 8008056:	b480      	push	{r7}
 8008058:	b083      	sub	sp, #12
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800805e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008062:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008066:	f023 020f 	bic.w	r2, r3, #15
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	091b      	lsrs	r3, r3, #4
 800806e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008072:	4313      	orrs	r3, r2
 8008074:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8008078:	bf00      	nop
 800807a:	370c      	adds	r7, #12
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr

08008082 <LL_RCC_SetAPB1Prescaler>:
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800808a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4313      	orrs	r3, r2
 800809c:	608b      	str	r3, [r1, #8]
}
 800809e:	bf00      	nop
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr

080080a8 <LL_RCC_SetAPB2Prescaler>:
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80080b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80080ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	608b      	str	r3, [r1, #8]
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr

080080ce <LL_RCC_GetAHBPrescaler>:
{
 80080ce:	b480      	push	{r7}
 80080d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80080d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	46bd      	mov	sp, r7
 80080e0:	bc80      	pop	{r7}
 80080e2:	4770      	bx	lr

080080e4 <LL_RCC_GetAHB3Prescaler>:
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80080e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr

080080fe <LL_RCC_GetAPB1Prescaler>:
{
 80080fe:	b480      	push	{r7}
 8008100:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800810c:	4618      	mov	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr

08008114 <LL_RCC_GetAPB2Prescaler>:
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008122:	4618      	mov	r0, r3
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800812a:	b480      	push	{r7}
 800812c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800812e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800813c:	6013      	str	r3, [r2, #0]
}
 800813e:	bf00      	nop
 8008140:	46bd      	mov	sp, r7
 8008142:	bc80      	pop	{r7}
 8008144:	4770      	bx	lr

08008146 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008146:	b480      	push	{r7}
 8008148:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800814a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008154:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008158:	6013      	str	r3, [r2, #0]
}
 800815a:	bf00      	nop
 800815c:	46bd      	mov	sp, r7
 800815e:	bc80      	pop	{r7}
 8008160:	4770      	bx	lr

08008162 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008162:	b480      	push	{r7}
 8008164:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008170:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008174:	d101      	bne.n	800817a <LL_RCC_PLL_IsReady+0x18>
 8008176:	2301      	movs	r3, #1
 8008178:	e000      	b.n	800817c <LL_RCC_PLL_IsReady+0x1a>
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	46bd      	mov	sp, r7
 8008180:	bc80      	pop	{r7}
 8008182:	4770      	bx	lr

08008184 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	0a1b      	lsrs	r3, r3, #8
 8008190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008194:	4618      	mov	r0, r3
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800819c:	b480      	push	{r7}
 800819e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80081a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bc80      	pop	{r7}
 80081b0:	4770      	bx	lr

080081b2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80081b2:	b480      	push	{r7}
 80081b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80081b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr

080081c8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80081cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f003 0303 	and.w	r3, r3, #3
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr

080081de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80081de:	b480      	push	{r7}
 80081e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80081e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f0:	d101      	bne.n	80081f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bc80      	pop	{r7}
 80081fe:	4770      	bx	lr

08008200 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008208:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800820c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008214:	d101      	bne.n	800821a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008216:	2301      	movs	r3, #1
 8008218:	e000      	b.n	800821c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	46bd      	mov	sp, r7
 8008220:	bc80      	pop	{r7}
 8008222:	4770      	bx	lr

08008224 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008224:	b480      	push	{r7}
 8008226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008232:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008236:	d101      	bne.n	800823c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008238:	2301      	movs	r3, #1
 800823a:	e000      	b.n	800823e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr

08008246 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008246:	b480      	push	{r7}
 8008248:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800824a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008254:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008258:	d101      	bne.n	800825e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	46bd      	mov	sp, r7
 8008264:	bc80      	pop	{r7}
 8008266:	4770      	bx	lr

08008268 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e36f      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800827a:	f7ff fece 	bl	800801a <LL_RCC_GetSysClkSource>
 800827e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008280:	f7ff ffa2 	bl	80081c8 <LL_RCC_PLL_GetMainSource>
 8008284:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0320 	and.w	r3, r3, #32
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 80c4 	beq.w	800841c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <HAL_RCC_OscConfig+0x3e>
 800829a:	69fb      	ldr	r3, [r7, #28]
 800829c:	2b0c      	cmp	r3, #12
 800829e:	d176      	bne.n	800838e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d173      	bne.n	800838e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e353      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <HAL_RCC_OscConfig+0x68>
 80082c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082ce:	e006      	b.n	80082de <HAL_RCC_OscConfig+0x76>
 80082d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082d8:	091b      	lsrs	r3, r3, #4
 80082da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082de:	4293      	cmp	r3, r2
 80082e0:	d222      	bcs.n	8008328 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fd3c 	bl	8008d64 <RCC_SetFlashLatencyFromMSIRange>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e331      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80082f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008300:	f043 0308 	orr.w	r3, r3, #8
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008318:	4313      	orrs	r3, r2
 800831a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff fe53 	bl	8007fcc <LL_RCC_MSI_SetCalibTrimming>
 8008326:	e021      	b.n	800836c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008332:	f043 0308 	orr.w	r3, r3, #8
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800834a:	4313      	orrs	r3, r2
 800834c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff fe3a 	bl	8007fcc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fd01 	bl	8008d64 <RCC_SetFlashLatencyFromMSIRange>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e2f6      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800836c:	f000 fcc2 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8008370:	4603      	mov	r3, r0
 8008372:	4aa7      	ldr	r2, [pc, #668]	; (8008610 <HAL_RCC_OscConfig+0x3a8>)
 8008374:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8008376:	4ba7      	ldr	r3, [pc, #668]	; (8008614 <HAL_RCC_OscConfig+0x3ac>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4618      	mov	r0, r3
 800837c:	f7fa f88c 	bl	8002498 <HAL_InitTick>
 8008380:	4603      	mov	r3, r0
 8008382:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8008384:	7cfb      	ldrb	r3, [r7, #19]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d047      	beq.n	800841a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800838a:	7cfb      	ldrb	r3, [r7, #19]
 800838c:	e2e5      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d02c      	beq.n	80083f0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008396:	f7ff fdc6 	bl	8007f26 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800839a:	f7fa f887 	bl	80024ac <HAL_GetTick>
 800839e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80083a0:	e008      	b.n	80083b4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083a2:	f7fa f883 	bl	80024ac <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e2d2      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80083b4:	f7ff fdd3 	bl	8007f5e <LL_RCC_MSI_IsReady>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0f1      	beq.n	80083a2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083c8:	f043 0308 	orr.w	r3, r3, #8
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083e0:	4313      	orrs	r3, r2
 80083e2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff fdef 	bl	8007fcc <LL_RCC_MSI_SetCalibTrimming>
 80083ee:	e015      	b.n	800841c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80083f0:	f7ff fda7 	bl	8007f42 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80083f4:	f7fa f85a 	bl	80024ac <HAL_GetTick>
 80083f8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80083fa:	e008      	b.n	800840e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083fc:	f7fa f856 	bl	80024ac <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	1ad3      	subs	r3, r2, r3
 8008406:	2b02      	cmp	r3, #2
 8008408:	d901      	bls.n	800840e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e2a5      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800840e:	f7ff fda6 	bl	8007f5e <LL_RCC_MSI_IsReady>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1f1      	bne.n	80083fc <HAL_RCC_OscConfig+0x194>
 8008418:	e000      	b.n	800841c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800841a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d058      	beq.n	80084da <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	2b08      	cmp	r3, #8
 800842c:	d005      	beq.n	800843a <HAL_RCC_OscConfig+0x1d2>
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	2b0c      	cmp	r3, #12
 8008432:	d108      	bne.n	8008446 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	2b03      	cmp	r3, #3
 8008438:	d105      	bne.n	8008446 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d14b      	bne.n	80084da <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e289      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8008446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008458:	4313      	orrs	r3, r2
 800845a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008464:	d102      	bne.n	800846c <HAL_RCC_OscConfig+0x204>
 8008466:	f7ff fcae 	bl	8007dc6 <LL_RCC_HSE_Enable>
 800846a:	e00d      	b.n	8008488 <HAL_RCC_OscConfig+0x220>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008474:	d104      	bne.n	8008480 <HAL_RCC_OscConfig+0x218>
 8008476:	f7ff fc79 	bl	8007d6c <LL_RCC_HSE_EnableTcxo>
 800847a:	f7ff fca4 	bl	8007dc6 <LL_RCC_HSE_Enable>
 800847e:	e003      	b.n	8008488 <HAL_RCC_OscConfig+0x220>
 8008480:	f7ff fcaf 	bl	8007de2 <LL_RCC_HSE_Disable>
 8008484:	f7ff fc80 	bl	8007d88 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d012      	beq.n	80084b6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008490:	f7fa f80c 	bl	80024ac <HAL_GetTick>
 8008494:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008498:	f7fa f808 	bl	80024ac <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b64      	cmp	r3, #100	; 0x64
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e257      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80084aa:	f7ff fca8 	bl	8007dfe <LL_RCC_HSE_IsReady>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0f1      	beq.n	8008498 <HAL_RCC_OscConfig+0x230>
 80084b4:	e011      	b.n	80084da <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084b6:	f7f9 fff9 	bl	80024ac <HAL_GetTick>
 80084ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80084bc:	e008      	b.n	80084d0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084be:	f7f9 fff5 	bl	80024ac <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	2b64      	cmp	r3, #100	; 0x64
 80084ca:	d901      	bls.n	80084d0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e244      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80084d0:	f7ff fc95 	bl	8007dfe <LL_RCC_HSE_IsReady>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1f1      	bne.n	80084be <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d046      	beq.n	8008574 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	2b04      	cmp	r3, #4
 80084ea:	d005      	beq.n	80084f8 <HAL_RCC_OscConfig+0x290>
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b0c      	cmp	r3, #12
 80084f0:	d10e      	bne.n	8008510 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d10b      	bne.n	8008510 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e22a      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff fcb6 	bl	8007e7a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800850e:	e031      	b.n	8008574 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d019      	beq.n	800854c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008518:	f7ff fc82 	bl	8007e20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851c:	f7f9 ffc6 	bl	80024ac <HAL_GetTick>
 8008520:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008524:	f7f9 ffc2 	bl	80024ac <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e211      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008536:	f7ff fc8f 	bl	8007e58 <LL_RCC_HSI_IsReady>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0f1      	beq.n	8008524 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff fc98 	bl	8007e7a <LL_RCC_HSI_SetCalibTrimming>
 800854a:	e013      	b.n	8008574 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800854c:	f7ff fc76 	bl	8007e3c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008550:	f7f9 ffac 	bl	80024ac <HAL_GetTick>
 8008554:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008558:	f7f9 ffa8 	bl	80024ac <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e1f7      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800856a:	f7ff fc75 	bl	8007e58 <LL_RCC_HSI_IsReady>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d1f1      	bne.n	8008558 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b00      	cmp	r3, #0
 800857e:	d06e      	beq.n	800865e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d056      	beq.n	8008636 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8008588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800858c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008590:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	69da      	ldr	r2, [r3, #28]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	429a      	cmp	r2, r3
 800859e:	d031      	beq.n	8008604 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d006      	beq.n	80085b8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e1d0      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d013      	beq.n	80085ea <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80085c2:	f7ff fc8f 	bl	8007ee4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80085c6:	f7f9 ff71 	bl	80024ac <HAL_GetTick>
 80085ca:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80085cc:	e008      	b.n	80085e0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085ce:	f7f9 ff6d 	bl	80024ac <HAL_GetTick>
 80085d2:	4602      	mov	r2, r0
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	2b11      	cmp	r3, #17
 80085da:	d901      	bls.n	80085e0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80085dc:	2303      	movs	r3, #3
 80085de:	e1bc      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80085e0:	f7ff fc90 	bl	8007f04 <LL_RCC_LSI_IsReady>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f1      	bne.n	80085ce <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80085ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085f2:	f023 0210 	bic.w	r2, r3, #16
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085fe:	4313      	orrs	r3, r2
 8008600:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008604:	f7ff fc5e 	bl	8007ec4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008608:	f7f9 ff50 	bl	80024ac <HAL_GetTick>
 800860c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800860e:	e00c      	b.n	800862a <HAL_RCC_OscConfig+0x3c2>
 8008610:	20000000 	.word	0x20000000
 8008614:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008618:	f7f9 ff48 	bl	80024ac <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2b11      	cmp	r3, #17
 8008624:	d901      	bls.n	800862a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e197      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800862a:	f7ff fc6b 	bl	8007f04 <LL_RCC_LSI_IsReady>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f1      	beq.n	8008618 <HAL_RCC_OscConfig+0x3b0>
 8008634:	e013      	b.n	800865e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008636:	f7ff fc55 	bl	8007ee4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800863a:	f7f9 ff37 	bl	80024ac <HAL_GetTick>
 800863e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008640:	e008      	b.n	8008654 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008642:	f7f9 ff33 	bl	80024ac <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b11      	cmp	r3, #17
 800864e:	d901      	bls.n	8008654 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e182      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008654:	f7ff fc56 	bl	8007f04 <LL_RCC_LSI_IsReady>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1f1      	bne.n	8008642 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0304 	and.w	r3, r3, #4
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 80d8 	beq.w	800881c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800866c:	f7ff fb6c 	bl	8007d48 <LL_PWR_IsEnabledBkUpAccess>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d113      	bne.n	800869e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008676:	f7ff fb4d 	bl	8007d14 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800867a:	f7f9 ff17 	bl	80024ac <HAL_GetTick>
 800867e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008680:	e008      	b.n	8008694 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008682:	f7f9 ff13 	bl	80024ac <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e162      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008694:	f7ff fb58 	bl	8007d48 <LL_PWR_IsEnabledBkUpAccess>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0f1      	beq.n	8008682 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d07b      	beq.n	800879e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	2b85      	cmp	r3, #133	; 0x85
 80086ac:	d003      	beq.n	80086b6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	2b05      	cmp	r3, #5
 80086b4:	d109      	bne.n	80086ca <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80086b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086c2:	f043 0304 	orr.w	r3, r3, #4
 80086c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086ca:	f7f9 feef 	bl	80024ac <HAL_GetTick>
 80086ce:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80086d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80086e4:	e00a      	b.n	80086fc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086e6:	f7f9 fee1 	bl	80024ac <HAL_GetTick>
 80086ea:	4602      	mov	r2, r0
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d901      	bls.n	80086fc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e12e      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80086fc:	f7ff fbd1 	bl	8007ea2 <LL_RCC_LSE_IsReady>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0ef      	beq.n	80086e6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2b81      	cmp	r3, #129	; 0x81
 800870c:	d003      	beq.n	8008716 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	2b85      	cmp	r3, #133	; 0x85
 8008714:	d121      	bne.n	800875a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008716:	f7f9 fec9 	bl	80024ac <HAL_GetTick>
 800871a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800871c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008730:	e00a      	b.n	8008748 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008732:	f7f9 febb 	bl	80024ac <HAL_GetTick>
 8008736:	4602      	mov	r2, r0
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008740:	4293      	cmp	r3, r2
 8008742:	d901      	bls.n	8008748 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e108      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800874c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0ec      	beq.n	8008732 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008758:	e060      	b.n	800881c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800875a:	f7f9 fea7 	bl	80024ac <HAL_GetTick>
 800875e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800876c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008774:	e00a      	b.n	800878c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008776:	f7f9 fe99 	bl	80024ac <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	f241 3288 	movw	r2, #5000	; 0x1388
 8008784:	4293      	cmp	r3, r2
 8008786:	d901      	bls.n	800878c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e0e6      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800878c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1ec      	bne.n	8008776 <HAL_RCC_OscConfig+0x50e>
 800879c:	e03e      	b.n	800881c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800879e:	f7f9 fe85 	bl	80024ac <HAL_GetTick>
 80087a2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80087a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80087b8:	e00a      	b.n	80087d0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ba:	f7f9 fe77 	bl	80024ac <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d901      	bls.n	80087d0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e0c4      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80087d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d1ec      	bne.n	80087ba <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087e0:	f7f9 fe64 	bl	80024ac <HAL_GetTick>
 80087e4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80087e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087f2:	f023 0301 	bic.w	r3, r3, #1
 80087f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80087fa:	e00a      	b.n	8008812 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087fc:	f7f9 fe56 	bl	80024ac <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	f241 3288 	movw	r2, #5000	; 0x1388
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e0a3      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008812:	f7ff fb46 	bl	8007ea2 <LL_RCC_LSE_IsReady>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1ef      	bne.n	80087fc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8099 	beq.w	8008958 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	2b0c      	cmp	r3, #12
 800882a:	d06c      	beq.n	8008906 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	2b02      	cmp	r3, #2
 8008832:	d14b      	bne.n	80088cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008834:	f7ff fc87 	bl	8008146 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008838:	f7f9 fe38 	bl	80024ac <HAL_GetTick>
 800883c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800883e:	e008      	b.n	8008852 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008840:	f7f9 fe34 	bl	80024ac <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b0a      	cmp	r3, #10
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e083      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008852:	f7ff fc86 	bl	8008162 <LL_RCC_PLL_IsReady>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1f1      	bne.n	8008840 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800885c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	4b40      	ldr	r3, [pc, #256]	; (8008964 <HAL_RCC_OscConfig+0x6fc>)
 8008864:	4013      	ands	r3, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800886e:	4311      	orrs	r1, r2
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008874:	0212      	lsls	r2, r2, #8
 8008876:	4311      	orrs	r1, r2
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800887c:	4311      	orrs	r1, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008882:	4311      	orrs	r1, r2
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008888:	430a      	orrs	r2, r1
 800888a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800888e:	4313      	orrs	r3, r2
 8008890:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008892:	f7ff fc4a 	bl	800812a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088a4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088a6:	f7f9 fe01 	bl	80024ac <HAL_GetTick>
 80088aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80088ac:	e008      	b.n	80088c0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088ae:	f7f9 fdfd 	bl	80024ac <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b0a      	cmp	r3, #10
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e04c      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80088c0:	f7ff fc4f 	bl	8008162 <LL_RCC_PLL_IsReady>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f1      	beq.n	80088ae <HAL_RCC_OscConfig+0x646>
 80088ca:	e045      	b.n	8008958 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088cc:	f7ff fc3b 	bl	8008146 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d0:	f7f9 fdec 	bl	80024ac <HAL_GetTick>
 80088d4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80088d6:	e008      	b.n	80088ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088d8:	f7f9 fde8 	bl	80024ac <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	2b0a      	cmp	r3, #10
 80088e4:	d901      	bls.n	80088ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e037      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80088ea:	f7ff fc3a 	bl	8008162 <LL_RCC_PLL_IsReady>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1f1      	bne.n	80088d8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80088f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088fe:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <HAL_RCC_OscConfig+0x700>)
 8008900:	4013      	ands	r3, r2
 8008902:	60cb      	str	r3, [r1, #12]
 8008904:	e028      	b.n	8008958 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e023      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	f003 0203 	and.w	r2, r3, #3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	429a      	cmp	r2, r3
 8008926:	d115      	bne.n	8008954 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008932:	429a      	cmp	r2, r3
 8008934:	d10e      	bne.n	8008954 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	429a      	cmp	r2, r3
 8008944:	d106      	bne.n	8008954 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008950:	429a      	cmp	r2, r3
 8008952:	d001      	beq.n	8008958 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e000      	b.n	800895a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3720      	adds	r7, #32
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	11c1808c 	.word	0x11c1808c
 8008968:	eefefffc 	.word	0xeefefffc

0800896c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e10f      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008980:	4b89      	ldr	r3, [pc, #548]	; (8008ba8 <HAL_RCC_ClockConfig+0x23c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d91b      	bls.n	80089c6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800898e:	4b86      	ldr	r3, [pc, #536]	; (8008ba8 <HAL_RCC_ClockConfig+0x23c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f023 0207 	bic.w	r2, r3, #7
 8008996:	4984      	ldr	r1, [pc, #528]	; (8008ba8 <HAL_RCC_ClockConfig+0x23c>)
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	4313      	orrs	r3, r2
 800899c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800899e:	f7f9 fd85 	bl	80024ac <HAL_GetTick>
 80089a2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089a4:	e008      	b.n	80089b8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80089a6:	f7f9 fd81 	bl	80024ac <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d901      	bls.n	80089b8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80089b4:	2303      	movs	r3, #3
 80089b6:	e0f3      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b8:	4b7b      	ldr	r3, [pc, #492]	; (8008ba8 <HAL_RCC_ClockConfig+0x23c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 0307 	and.w	r3, r3, #7
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d1ef      	bne.n	80089a6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d016      	beq.n	8008a00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff fb2a 	bl	8008030 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80089dc:	f7f9 fd66 	bl	80024ac <HAL_GetTick>
 80089e0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80089e2:	e008      	b.n	80089f6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80089e4:	f7f9 fd62 	bl	80024ac <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d901      	bls.n	80089f6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e0d4      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80089f6:	f7ff fbf2 	bl	80081de <LL_RCC_IsActiveFlag_HPRE>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0f1      	beq.n	80089e4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d016      	beq.n	8008a3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff fb20 	bl	8008056 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008a16:	f7f9 fd49 	bl	80024ac <HAL_GetTick>
 8008a1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008a1c:	e008      	b.n	8008a30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a1e:	f7f9 fd45 	bl	80024ac <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d901      	bls.n	8008a30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008a2c:	2303      	movs	r3, #3
 8008a2e:	e0b7      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008a30:	f7ff fbe6 	bl	8008200 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0f1      	beq.n	8008a1e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0304 	and.w	r3, r3, #4
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d016      	beq.n	8008a74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff fb19 	bl	8008082 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008a50:	f7f9 fd2c 	bl	80024ac <HAL_GetTick>
 8008a54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a58:	f7f9 fd28 	bl	80024ac <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d901      	bls.n	8008a6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e09a      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008a6a:	f7ff fbdb 	bl	8008224 <LL_RCC_IsActiveFlag_PPRE1>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0f1      	beq.n	8008a58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0308 	and.w	r3, r3, #8
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d017      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff fb0e 	bl	80080a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008a8c:	f7f9 fd0e 	bl	80024ac <HAL_GetTick>
 8008a90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008a92:	e008      	b.n	8008aa6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008a94:	f7f9 fd0a 	bl	80024ac <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e07c      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008aa6:	f7ff fbce 	bl	8008246 <LL_RCC_IsActiveFlag_PPRE2>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0f1      	beq.n	8008a94 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d043      	beq.n	8008b44 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d106      	bne.n	8008ad2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008ac4:	f7ff f99b 	bl	8007dfe <LL_RCC_HSE_IsReady>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d11e      	bne.n	8008b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e066      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d106      	bne.n	8008ae8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008ada:	f7ff fb42 	bl	8008162 <LL_RCC_PLL_IsReady>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d113      	bne.n	8008b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e05b      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d106      	bne.n	8008afe <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008af0:	f7ff fa35 	bl	8007f5e <LL_RCC_MSI_IsReady>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d108      	bne.n	8008b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e050      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008afe:	f7ff f9ab 	bl	8007e58 <LL_RCC_HSI_IsReady>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e049      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff fa6f 	bl	8007ff4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b16:	f7f9 fcc9 	bl	80024ac <HAL_GetTick>
 8008b1a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b1c:	e00a      	b.n	8008b34 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b1e:	f7f9 fcc5 	bl	80024ac <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d901      	bls.n	8008b34 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008b30:	2303      	movs	r3, #3
 8008b32:	e035      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b34:	f7ff fa71 	bl	800801a <LL_RCC_GetSysClkSource>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d1ec      	bne.n	8008b1e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b44:	4b18      	ldr	r3, [pc, #96]	; (8008ba8 <HAL_RCC_ClockConfig+0x23c>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d21b      	bcs.n	8008b8a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b52:	4b15      	ldr	r3, [pc, #84]	; (8008ba8 <HAL_RCC_ClockConfig+0x23c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f023 0207 	bic.w	r2, r3, #7
 8008b5a:	4913      	ldr	r1, [pc, #76]	; (8008ba8 <HAL_RCC_ClockConfig+0x23c>)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b62:	f7f9 fca3 	bl	80024ac <HAL_GetTick>
 8008b66:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b68:	e008      	b.n	8008b7c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b6a:	f7f9 fc9f 	bl	80024ac <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d901      	bls.n	8008b7c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e011      	b.n	8008ba0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ba8 <HAL_RCC_ClockConfig+0x23c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0307 	and.w	r3, r3, #7
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d1ef      	bne.n	8008b6a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008b8a:	f000 f8b3 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	4a06      	ldr	r2, [pc, #24]	; (8008bac <HAL_RCC_ClockConfig+0x240>)
 8008b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8008b94:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <HAL_RCC_ClockConfig+0x244>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7f9 fc7d 	bl	8002498 <HAL_InitTick>
 8008b9e:	4603      	mov	r3, r0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	58004000 	.word	0x58004000
 8008bac:	20000000 	.word	0x20000000
 8008bb0:	20000004 	.word	0x20000004

08008bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bc2:	f7ff fa2a 	bl	800801a <LL_RCC_GetSysClkSource>
 8008bc6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bc8:	f7ff fafe 	bl	80081c8 <LL_RCC_PLL_GetMainSource>
 8008bcc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d005      	beq.n	8008be0 <HAL_RCC_GetSysClockFreq+0x2c>
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b0c      	cmp	r3, #12
 8008bd8:	d139      	bne.n	8008c4e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d136      	bne.n	8008c4e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008be0:	f7ff f9cd 	bl	8007f7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d115      	bne.n	8008c16 <HAL_RCC_GetSysClockFreq+0x62>
 8008bea:	f7ff f9c8 	bl	8007f7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d106      	bne.n	8008c02 <HAL_RCC_GetSysClockFreq+0x4e>
 8008bf4:	f7ff f9d3 	bl	8007f9e <LL_RCC_MSI_GetRange>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	0a1b      	lsrs	r3, r3, #8
 8008bfc:	f003 030f 	and.w	r3, r3, #15
 8008c00:	e005      	b.n	8008c0e <HAL_RCC_GetSysClockFreq+0x5a>
 8008c02:	f7ff f9d7 	bl	8007fb4 <LL_RCC_MSI_GetRangeAfterStandby>
 8008c06:	4603      	mov	r3, r0
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	4a36      	ldr	r2, [pc, #216]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x134>)
 8008c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c14:	e014      	b.n	8008c40 <HAL_RCC_GetSysClockFreq+0x8c>
 8008c16:	f7ff f9b2 	bl	8007f7e <LL_RCC_MSI_IsEnabledRangeSelect>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d106      	bne.n	8008c2e <HAL_RCC_GetSysClockFreq+0x7a>
 8008c20:	f7ff f9bd 	bl	8007f9e <LL_RCC_MSI_GetRange>
 8008c24:	4603      	mov	r3, r0
 8008c26:	091b      	lsrs	r3, r3, #4
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	e005      	b.n	8008c3a <HAL_RCC_GetSysClockFreq+0x86>
 8008c2e:	f7ff f9c1 	bl	8007fb4 <LL_RCC_MSI_GetRangeAfterStandby>
 8008c32:	4603      	mov	r3, r0
 8008c34:	091b      	lsrs	r3, r3, #4
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	4a2b      	ldr	r2, [pc, #172]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x134>)
 8008c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c40:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d115      	bne.n	8008c74 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008c4c:	e012      	b.n	8008c74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d102      	bne.n	8008c5a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c54:	4b25      	ldr	r3, [pc, #148]	; (8008cec <HAL_RCC_GetSysClockFreq+0x138>)
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e00c      	b.n	8008c74 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2b08      	cmp	r3, #8
 8008c5e:	d109      	bne.n	8008c74 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008c60:	f7ff f8a0 	bl	8007da4 <LL_RCC_HSE_IsEnabledDiv2>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d102      	bne.n	8008c70 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008c6a:	4b20      	ldr	r3, [pc, #128]	; (8008cec <HAL_RCC_GetSysClockFreq+0x138>)
 8008c6c:	617b      	str	r3, [r7, #20]
 8008c6e:	e001      	b.n	8008c74 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008c70:	4b1f      	ldr	r3, [pc, #124]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008c72:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c74:	f7ff f9d1 	bl	800801a <LL_RCC_GetSysClkSource>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b0c      	cmp	r3, #12
 8008c7c:	d12f      	bne.n	8008cde <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008c7e:	f7ff faa3 	bl	80081c8 <LL_RCC_PLL_GetMainSource>
 8008c82:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d003      	beq.n	8008c92 <HAL_RCC_GetSysClockFreq+0xde>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d003      	beq.n	8008c98 <HAL_RCC_GetSysClockFreq+0xe4>
 8008c90:	e00d      	b.n	8008cae <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008c92:	4b16      	ldr	r3, [pc, #88]	; (8008cec <HAL_RCC_GetSysClockFreq+0x138>)
 8008c94:	60fb      	str	r3, [r7, #12]
        break;
 8008c96:	e00d      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008c98:	f7ff f884 	bl	8007da4 <LL_RCC_HSE_IsEnabledDiv2>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d102      	bne.n	8008ca8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008ca2:	4b12      	ldr	r3, [pc, #72]	; (8008cec <HAL_RCC_GetSysClockFreq+0x138>)
 8008ca4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008ca6:	e005      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008ca8:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008caa:	60fb      	str	r3, [r7, #12]
        break;
 8008cac:	e002      	b.n	8008cb4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	60fb      	str	r3, [r7, #12]
        break;
 8008cb2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008cb4:	f7ff fa66 	bl	8008184 <LL_RCC_PLL_GetN>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	fb03 f402 	mul.w	r4, r3, r2
 8008cc0:	f7ff fa77 	bl	80081b2 <LL_RCC_PLL_GetDivider>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	091b      	lsrs	r3, r3, #4
 8008cc8:	3301      	adds	r3, #1
 8008cca:	fbb4 f4f3 	udiv	r4, r4, r3
 8008cce:	f7ff fa65 	bl	800819c <LL_RCC_PLL_GetR>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	0f5b      	lsrs	r3, r3, #29
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	fbb4 f3f3 	udiv	r3, r4, r3
 8008cdc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008cde:	697b      	ldr	r3, [r7, #20]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd90      	pop	{r4, r7, pc}
 8008ce8:	08020944 	.word	0x08020944
 8008cec:	00f42400 	.word	0x00f42400
 8008cf0:	01e84800 	.word	0x01e84800

08008cf4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cf4:	b598      	push	{r3, r4, r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008cf8:	f7ff ff5c 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	f7ff f9e6 	bl	80080ce <LL_RCC_GetAHBPrescaler>
 8008d02:	4603      	mov	r3, r0
 8008d04:	091b      	lsrs	r3, r3, #4
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	4a03      	ldr	r2, [pc, #12]	; (8008d18 <HAL_RCC_GetHCLKFreq+0x24>)
 8008d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	bd98      	pop	{r3, r4, r7, pc}
 8008d18:	080208e4 	.word	0x080208e4

08008d1c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d1c:	b598      	push	{r3, r4, r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008d20:	f7ff ffe8 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8008d24:	4604      	mov	r4, r0
 8008d26:	f7ff f9ea 	bl	80080fe <LL_RCC_GetAPB1Prescaler>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	0a1b      	lsrs	r3, r3, #8
 8008d2e:	4a03      	ldr	r2, [pc, #12]	; (8008d3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	bd98      	pop	{r3, r4, r7, pc}
 8008d3c:	08020924 	.word	0x08020924

08008d40 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d40:	b598      	push	{r3, r4, r7, lr}
 8008d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008d44:	f7ff ffd6 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8008d48:	4604      	mov	r4, r0
 8008d4a:	f7ff f9e3 	bl	8008114 <LL_RCC_GetAPB2Prescaler>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	0adb      	lsrs	r3, r3, #11
 8008d52:	4a03      	ldr	r2, [pc, #12]	; (8008d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	bd98      	pop	{r3, r4, r7, pc}
 8008d60:	08020924 	.word	0x08020924

08008d64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008d64:	b590      	push	{r4, r7, lr}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	091b      	lsrs	r3, r3, #4
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	4a10      	ldr	r2, [pc, #64]	; (8008db8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8008d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d7a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8008d7c:	f7ff f9b2 	bl	80080e4 <LL_RCC_GetAHB3Prescaler>
 8008d80:	4603      	mov	r3, r0
 8008d82:	091b      	lsrs	r3, r3, #4
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	4a0c      	ldr	r2, [pc, #48]	; (8008dbc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8008d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d94:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	4a09      	ldr	r2, [pc, #36]	; (8008dc0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8008d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d9e:	0c9c      	lsrs	r4, r3, #18
 8008da0:	f7fe ffc6 	bl	8007d30 <HAL_PWREx_GetVoltageRange>
 8008da4:	4603      	mov	r3, r0
 8008da6:	4619      	mov	r1, r3
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 f80b 	bl	8008dc4 <RCC_SetFlashLatency>
 8008dae:	4603      	mov	r3, r0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd90      	pop	{r4, r7, pc}
 8008db8:	08020944 	.word	0x08020944
 8008dbc:	080208e4 	.word	0x080208e4
 8008dc0:	431bde83 	.word	0x431bde83

08008dc4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08e      	sub	sp, #56	; 0x38
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8008dce:	4a3a      	ldr	r2, [pc, #232]	; (8008eb8 <RCC_SetFlashLatency+0xf4>)
 8008dd0:	f107 0320 	add.w	r3, r7, #32
 8008dd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dd8:	6018      	str	r0, [r3, #0]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8008dde:	4a37      	ldr	r2, [pc, #220]	; (8008ebc <RCC_SetFlashLatency+0xf8>)
 8008de0:	f107 0318 	add.w	r3, r7, #24
 8008de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008de8:	6018      	str	r0, [r3, #0]
 8008dea:	3304      	adds	r3, #4
 8008dec:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8008dee:	4a34      	ldr	r2, [pc, #208]	; (8008ec0 <RCC_SetFlashLatency+0xfc>)
 8008df0:	f107 030c 	add.w	r3, r7, #12
 8008df4:	ca07      	ldmia	r2, {r0, r1, r2}
 8008df6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e04:	d11b      	bne.n	8008e3e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008e06:	2300      	movs	r3, #0
 8008e08:	633b      	str	r3, [r7, #48]	; 0x30
 8008e0a:	e014      	b.n	8008e36 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	3338      	adds	r3, #56	; 0x38
 8008e12:	443b      	add	r3, r7
 8008e14:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d807      	bhi.n	8008e30 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	3338      	adds	r3, #56	; 0x38
 8008e26:	443b      	add	r3, r7
 8008e28:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008e2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e2e:	e021      	b.n	8008e74 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e32:	3301      	adds	r3, #1
 8008e34:	633b      	str	r3, [r7, #48]	; 0x30
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d9e7      	bls.n	8008e0c <RCC_SetFlashLatency+0x48>
 8008e3c:	e01a      	b.n	8008e74 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008e3e:	2300      	movs	r3, #0
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e42:	e014      	b.n	8008e6e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	3338      	adds	r3, #56	; 0x38
 8008e4a:	443b      	add	r3, r7
 8008e4c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008e50:	461a      	mov	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d807      	bhi.n	8008e68 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	3338      	adds	r3, #56	; 0x38
 8008e5e:	443b      	add	r3, r7
 8008e60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e66:	e005      	b.n	8008e74 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d9e7      	bls.n	8008e44 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008e74:	4b13      	ldr	r3, [pc, #76]	; (8008ec4 <RCC_SetFlashLatency+0x100>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f023 0207 	bic.w	r2, r3, #7
 8008e7c:	4911      	ldr	r1, [pc, #68]	; (8008ec4 <RCC_SetFlashLatency+0x100>)
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e80:	4313      	orrs	r3, r2
 8008e82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e84:	f7f9 fb12 	bl	80024ac <HAL_GetTick>
 8008e88:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008e8a:	e008      	b.n	8008e9e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008e8c:	f7f9 fb0e 	bl	80024ac <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d901      	bls.n	8008e9e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	e007      	b.n	8008eae <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008e9e:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <RCC_SetFlashLatency+0x100>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d1ef      	bne.n	8008e8c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3738      	adds	r7, #56	; 0x38
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	0802004c 	.word	0x0802004c
 8008ebc:	08020054 	.word	0x08020054
 8008ec0:	0802005c 	.word	0x0802005c
 8008ec4:	58004000 	.word	0x58004000

08008ec8 <LL_RCC_LSE_IsReady>:
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b02      	cmp	r3, #2
 8008eda:	d101      	bne.n	8008ee0 <LL_RCC_LSE_IsReady+0x18>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e000      	b.n	8008ee2 <LL_RCC_LSE_IsReady+0x1a>
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bc80      	pop	{r7}
 8008ee8:	4770      	bx	lr

08008eea <LL_RCC_SetUSARTClockSource>:
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	0c1b      	lsrs	r3, r3, #16
 8008efe:	43db      	mvns	r3, r3
 8008f00:	401a      	ands	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bc80      	pop	{r7}
 8008f18:	4770      	bx	lr

08008f1a <LL_RCC_SetI2SClockSource>:
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f3a:	bf00      	nop
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bc80      	pop	{r7}
 8008f42:	4770      	bx	lr

08008f44 <LL_RCC_SetLPUARTClockSource>:
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bc80      	pop	{r7}
 8008f6c:	4770      	bx	lr

08008f6e <LL_RCC_SetI2CClockSource>:
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008f86:	43db      	mvns	r3, r3
 8008f88:	401a      	ands	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f96:	4313      	orrs	r3, r2
 8008f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008f9c:	bf00      	nop
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bc80      	pop	{r7}
 8008fa4:	4770      	bx	lr

08008fa6 <LL_RCC_SetLPTIMClockSource>:
{
 8008fa6:	b480      	push	{r7}
 8008fa8:	b083      	sub	sp, #12
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	0c1b      	lsrs	r3, r3, #16
 8008fba:	041b      	lsls	r3, r3, #16
 8008fbc:	43db      	mvns	r3, r3
 8008fbe:	401a      	ands	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	041b      	lsls	r3, r3, #16
 8008fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr

08008fd8 <LL_RCC_SetRNGClockSource>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bc80      	pop	{r7}
 8009000:	4770      	bx	lr

08009002 <LL_RCC_SetADCClockSource>:
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800900a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800900e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009012:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4313      	orrs	r3, r2
 800901e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009022:	bf00      	nop
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	bc80      	pop	{r7}
 800902a:	4770      	bx	lr

0800902c <LL_RCC_SetRTCClockSource>:
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800903c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	bc80      	pop	{r7}
 8009054:	4770      	bx	lr

08009056 <LL_RCC_GetRTCClockSource>:
{
 8009056:	b480      	push	{r7}
 8009058:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800905a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800905e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009062:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009066:	4618      	mov	r0, r3
 8009068:	46bd      	mov	sp, r7
 800906a:	bc80      	pop	{r7}
 800906c:	4770      	bx	lr

0800906e <LL_RCC_ForceBackupDomainReset>:
{
 800906e:	b480      	push	{r7}
 8009070:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800907a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800907e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009086:	bf00      	nop
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr

0800908e <LL_RCC_ReleaseBackupDomainReset>:
{
 800908e:	b480      	push	{r7}
 8009090:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800909a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800909e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80090a6:	bf00      	nop
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
	...

080090b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80090bc:	2300      	movs	r3, #0
 80090be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80090c0:	2300      	movs	r3, #0
 80090c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d058      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80090d0:	f7fe fe20 	bl	8007d14 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090d4:	f7f9 f9ea 	bl	80024ac <HAL_GetTick>
 80090d8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80090da:	e009      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090dc:	f7f9 f9e6 	bl	80024ac <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d902      	bls.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80090ea:	2303      	movs	r3, #3
 80090ec:	74fb      	strb	r3, [r7, #19]
        break;
 80090ee:	e006      	b.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80090f0:	4b7b      	ldr	r3, [pc, #492]	; (80092e0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fc:	d1ee      	bne.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80090fe:	7cfb      	ldrb	r3, [r7, #19]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d13c      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009104:	f7ff ffa7 	bl	8009056 <LL_RCC_GetRTCClockSource>
 8009108:	4602      	mov	r2, r0
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910e:	429a      	cmp	r2, r3
 8009110:	d00f      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800911a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800911e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009120:	f7ff ffa5 	bl	800906e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009124:	f7ff ffb3 	bl	800908e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d014      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913c:	f7f9 f9b6 	bl	80024ac <HAL_GetTick>
 8009140:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8009142:	e00b      	b.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009144:	f7f9 f9b2 	bl	80024ac <HAL_GetTick>
 8009148:	4602      	mov	r2, r0
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009152:	4293      	cmp	r3, r2
 8009154:	d902      	bls.n	800915c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	74fb      	strb	r3, [r7, #19]
            break;
 800915a:	e004      	b.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800915c:	f7ff feb4 	bl	8008ec8 <LL_RCC_LSE_IsReady>
 8009160:	4603      	mov	r3, r0
 8009162:	2b01      	cmp	r3, #1
 8009164:	d1ee      	bne.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8009166:	7cfb      	ldrb	r3, [r7, #19]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d105      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff ff5b 	bl	800902c <LL_RCC_SetRTCClockSource>
 8009176:	e004      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009178:	7cfb      	ldrb	r3, [r7, #19]
 800917a:	74bb      	strb	r3, [r7, #18]
 800917c:	e001      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917e:	7cfb      	ldrb	r3, [r7, #19]
 8009180:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff fea9 	bl	8008eea <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d004      	beq.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff fe9e 	bl	8008eea <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d004      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fec0 	bl	8008f44 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d004      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7ff fee6 	bl	8008fa6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d004      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff fedb 	bl	8008fa6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d004      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009200:	4618      	mov	r0, r3
 8009202:	f7ff fed0 	bl	8008fa6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d004      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff fea9 	bl	8008f6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009224:	2b00      	cmp	r3, #0
 8009226:	d004      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff fe9e 	bl	8008f6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	69db      	ldr	r3, [r3, #28]
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff fe93 	bl	8008f6e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0310 	and.w	r3, r3, #16
 8009250:	2b00      	cmp	r3, #0
 8009252:	d011      	beq.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fe5e 	bl	8008f1a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009266:	d107      	bne.n	8009278 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8009268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009276:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009280:	2b00      	cmp	r3, #0
 8009282:	d010      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009288:	4618      	mov	r0, r3
 800928a:	f7ff fea5 	bl	8008fd8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	2b00      	cmp	r3, #0
 8009294:	d107      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092a4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d011      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7ff fea3 	bl	8009002 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c4:	d107      	bne.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80092c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092d4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80092d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3718      	adds	r7, #24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	58000400 	.word	0x58000400

080092e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d071      	beq.n	80093da <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d106      	bne.n	8009310 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7f8 fe5e 	bl	8001fcc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009318:	4b32      	ldr	r3, [pc, #200]	; (80093e4 <HAL_RTC_Init+0x100>)
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f003 0310 	and.w	r3, r3, #16
 8009320:	2b10      	cmp	r3, #16
 8009322:	d051      	beq.n	80093c8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009324:	4b2f      	ldr	r3, [pc, #188]	; (80093e4 <HAL_RTC_Init+0x100>)
 8009326:	22ca      	movs	r2, #202	; 0xca
 8009328:	625a      	str	r2, [r3, #36]	; 0x24
 800932a:	4b2e      	ldr	r3, [pc, #184]	; (80093e4 <HAL_RTC_Init+0x100>)
 800932c:	2253      	movs	r2, #83	; 0x53
 800932e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fa11 	bl	8009758 <RTC_EnterInitMode>
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d13f      	bne.n	80093c0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009340:	4b28      	ldr	r3, [pc, #160]	; (80093e4 <HAL_RTC_Init+0x100>)
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	4a27      	ldr	r2, [pc, #156]	; (80093e4 <HAL_RTC_Init+0x100>)
 8009346:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800934a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009350:	4b24      	ldr	r3, [pc, #144]	; (80093e4 <HAL_RTC_Init+0x100>)
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6859      	ldr	r1, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	4319      	orrs	r1, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	430b      	orrs	r3, r1
 8009364:	491f      	ldr	r1, [pc, #124]	; (80093e4 <HAL_RTC_Init+0x100>)
 8009366:	4313      	orrs	r3, r2
 8009368:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	041b      	lsls	r3, r3, #16
 8009374:	491b      	ldr	r1, [pc, #108]	; (80093e4 <HAL_RTC_Init+0x100>)
 8009376:	4313      	orrs	r3, r2
 8009378:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800937a:	4b1a      	ldr	r3, [pc, #104]	; (80093e4 <HAL_RTC_Init+0x100>)
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938a:	430b      	orrs	r3, r1
 800938c:	4915      	ldr	r1, [pc, #84]	; (80093e4 <HAL_RTC_Init+0x100>)
 800938e:	4313      	orrs	r3, r2
 8009390:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa14 	bl	80097c0 <RTC_ExitInitMode>
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10e      	bne.n	80093c0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80093a2:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <HAL_RTC_Init+0x100>)
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a19      	ldr	r1, [r3, #32]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	69db      	ldr	r3, [r3, #28]
 80093b2:	4319      	orrs	r1, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	695b      	ldr	r3, [r3, #20]
 80093b8:	430b      	orrs	r3, r1
 80093ba:	490a      	ldr	r1, [pc, #40]	; (80093e4 <HAL_RTC_Init+0x100>)
 80093bc:	4313      	orrs	r3, r2
 80093be:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093c0:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <HAL_RTC_Init+0x100>)
 80093c2:	22ff      	movs	r2, #255	; 0xff
 80093c4:	625a      	str	r2, [r3, #36]	; 0x24
 80093c6:	e001      	b.n	80093cc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d103      	bne.n	80093da <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80093da:	7bfb      	ldrb	r3, [r7, #15]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	40002800 	.word	0x40002800

080093e8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80093e8:	b590      	push	{r4, r7, lr}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_RTC_SetAlarm_IT+0x1e>
 8009402:	2302      	movs	r3, #2
 8009404:	e0f3      	b.n	80095ee <HAL_RTC_SetAlarm_IT+0x206>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2202      	movs	r2, #2
 8009412:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8009416:	4b78      	ldr	r3, [pc, #480]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800941e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009426:	d06a      	beq.n	80094fe <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d13a      	bne.n	80094a4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800942e:	4b72      	ldr	r3, [pc, #456]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d102      	bne.n	8009440 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	2200      	movs	r2, #0
 800943e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	695b      	ldr	r3, [r3, #20]
 8009444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	4618      	mov	r0, r3
 800944e:	f000 f9f5 	bl	800983c <RTC_ByteToBcd2>
 8009452:	4603      	mov	r3, r0
 8009454:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	785b      	ldrb	r3, [r3, #1]
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f9ee 	bl	800983c <RTC_ByteToBcd2>
 8009460:	4603      	mov	r3, r0
 8009462:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009464:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	789b      	ldrb	r3, [r3, #2]
 800946a:	4618      	mov	r0, r3
 800946c:	f000 f9e6 	bl	800983c <RTC_ByteToBcd2>
 8009470:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009472:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	78db      	ldrb	r3, [r3, #3]
 800947a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800947c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f9d8 	bl	800983c <RTC_ByteToBcd2>
 800948c:	4603      	mov	r3, r0
 800948e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009490:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009498:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800949e:	4313      	orrs	r3, r2
 80094a0:	617b      	str	r3, [r7, #20]
 80094a2:	e02c      	b.n	80094fe <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80094ac:	d00d      	beq.n	80094ca <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	695b      	ldr	r3, [r3, #20]
 80094b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094b6:	d008      	beq.n	80094ca <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80094b8:	4b4f      	ldr	r3, [pc, #316]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d102      	bne.n	80094ca <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	2200      	movs	r2, #0
 80094c8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	785b      	ldrb	r3, [r3, #1]
 80094d4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80094d6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80094dc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	78db      	ldrb	r3, [r3, #3]
 80094e2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80094e4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094ec:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80094ee:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80094f4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80094fa:	4313      	orrs	r3, r2
 80094fc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094fe:	4b3e      	ldr	r3, [pc, #248]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009500:	22ca      	movs	r2, #202	; 0xca
 8009502:	625a      	str	r2, [r3, #36]	; 0x24
 8009504:	4b3c      	ldr	r3, [pc, #240]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009506:	2253      	movs	r2, #83	; 0x53
 8009508:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009512:	d12c      	bne.n	800956e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009514:	4b38      	ldr	r3, [pc, #224]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	4a37      	ldr	r2, [pc, #220]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800951a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800951e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009520:	4b35      	ldr	r3, [pc, #212]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009522:	2201      	movs	r2, #1
 8009524:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952c:	d107      	bne.n	800953e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	4930      	ldr	r1, [pc, #192]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009538:	4313      	orrs	r3, r2
 800953a:	644b      	str	r3, [r1, #68]	; 0x44
 800953c:	e006      	b.n	800954c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800953e:	4a2e      	ldr	r2, [pc, #184]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009544:	4a2c      	ldr	r2, [pc, #176]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800954c:	4a2a      	ldr	r2, [pc, #168]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009558:	f043 0201 	orr.w	r2, r3, #1
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009560:	4b25      	ldr	r3, [pc, #148]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	4a24      	ldr	r2, [pc, #144]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009566:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800956a:	6193      	str	r3, [r2, #24]
 800956c:	e02b      	b.n	80095c6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800956e:	4b22      	ldr	r3, [pc, #136]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	4a21      	ldr	r2, [pc, #132]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009574:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009578:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800957a:	4b1f      	ldr	r3, [pc, #124]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800957c:	2202      	movs	r2, #2
 800957e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009586:	d107      	bne.n	8009598 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	4919      	ldr	r1, [pc, #100]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 8009592:	4313      	orrs	r3, r2
 8009594:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009596:	e006      	b.n	80095a6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009598:	4a17      	ldr	r2, [pc, #92]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800959e:	4a16      	ldr	r2, [pc, #88]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80095a6:	4a14      	ldr	r2, [pc, #80]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b2:	f043 0202 	orr.w	r2, r3, #2
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80095ba:	4b0f      	ldr	r3, [pc, #60]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	4a0e      	ldr	r2, [pc, #56]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80095c0:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80095c4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80095c6:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <HAL_RTC_SetAlarm_IT+0x214>)
 80095c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095cc:	4a0b      	ldr	r2, [pc, #44]	; (80095fc <HAL_RTC_SetAlarm_IT+0x214>)
 80095ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095d6:	4b08      	ldr	r3, [pc, #32]	; (80095f8 <HAL_RTC_SetAlarm_IT+0x210>)
 80095d8:	22ff      	movs	r2, #255	; 0xff
 80095da:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd90      	pop	{r4, r7, pc}
 80095f6:	bf00      	nop
 80095f8:	40002800 	.word	0x40002800
 80095fc:	58000800 	.word	0x58000800

08009600 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_RTC_DeactivateAlarm+0x18>
 8009614:	2302      	movs	r3, #2
 8009616:	e048      	b.n	80096aa <HAL_RTC_DeactivateAlarm+0xaa>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009628:	4b22      	ldr	r3, [pc, #136]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800962a:	22ca      	movs	r2, #202	; 0xca
 800962c:	625a      	str	r2, [r3, #36]	; 0x24
 800962e:	4b21      	ldr	r3, [pc, #132]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009630:	2253      	movs	r2, #83	; 0x53
 8009632:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800963a:	d115      	bne.n	8009668 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800963c:	4b1d      	ldr	r3, [pc, #116]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800963e:	699b      	ldr	r3, [r3, #24]
 8009640:	4a1c      	ldr	r2, [pc, #112]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009642:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009646:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009648:	4b1a      	ldr	r3, [pc, #104]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800964a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964c:	4a19      	ldr	r2, [pc, #100]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800964e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009652:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009658:	f023 0201 	bic.w	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009660:	4b14      	ldr	r3, [pc, #80]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009662:	2201      	movs	r2, #1
 8009664:	65da      	str	r2, [r3, #92]	; 0x5c
 8009666:	e014      	b.n	8009692 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009668:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	4a11      	ldr	r2, [pc, #68]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800966e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009672:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009674:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009678:	4a0e      	ldr	r2, [pc, #56]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800967a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800967e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009684:	f023 0202 	bic.w	r2, r3, #2
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800968c:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 800968e:	2202      	movs	r2, #2
 8009690:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009694:	22ff      	movs	r2, #255	; 0xff
 8009696:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bc80      	pop	{r7}
 80096b2:	4770      	bx	lr
 80096b4:	40002800 	.word	0x40002800

080096b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80096c0:	4b11      	ldr	r3, [pc, #68]	; (8009708 <HAL_RTC_AlarmIRQHandler+0x50>)
 80096c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c8:	4013      	ands	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80096d6:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <HAL_RTC_AlarmIRQHandler+0x50>)
 80096d8:	2201      	movs	r2, #1
 80096da:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7f9 f910 	bl	8002902 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80096ec:	4b06      	ldr	r3, [pc, #24]	; (8009708 <HAL_RTC_AlarmIRQHandler+0x50>)
 80096ee:	2202      	movs	r2, #2
 80096f0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f94a 	bl	800998c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009700:	bf00      	nop
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	40002800 	.word	0x40002800

0800970c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009714:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <HAL_RTC_WaitForSynchro+0x48>)
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	4a0e      	ldr	r2, [pc, #56]	; (8009754 <HAL_RTC_WaitForSynchro+0x48>)
 800971a:	f023 0320 	bic.w	r3, r3, #32
 800971e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009720:	f7f8 fec4 	bl	80024ac <HAL_GetTick>
 8009724:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009726:	e009      	b.n	800973c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009728:	f7f8 fec0 	bl	80024ac <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009736:	d901      	bls.n	800973c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e006      	b.n	800974a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <HAL_RTC_WaitForSynchro+0x48>)
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f003 0320 	and.w	r3, r3, #32
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0ef      	beq.n	8009728 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	40002800 	.word	0x40002800

08009758 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009764:	4b15      	ldr	r3, [pc, #84]	; (80097bc <RTC_EnterInitMode+0x64>)
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976c:	2b00      	cmp	r3, #0
 800976e:	d120      	bne.n	80097b2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009770:	4b12      	ldr	r3, [pc, #72]	; (80097bc <RTC_EnterInitMode+0x64>)
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	4a11      	ldr	r2, [pc, #68]	; (80097bc <RTC_EnterInitMode+0x64>)
 8009776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800977a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800977c:	f7f8 fe96 	bl	80024ac <HAL_GetTick>
 8009780:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009782:	e00d      	b.n	80097a0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009784:	f7f8 fe92 	bl	80024ac <HAL_GetTick>
 8009788:	4602      	mov	r2, r0
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	1ad3      	subs	r3, r2, r3
 800978e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009792:	d905      	bls.n	80097a0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2203      	movs	r2, #3
 800979c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80097a0:	4b06      	ldr	r3, [pc, #24]	; (80097bc <RTC_EnterInitMode+0x64>)
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <RTC_EnterInitMode+0x5a>
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	d1e8      	bne.n	8009784 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80097b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	40002800 	.word	0x40002800

080097c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80097cc:	4b1a      	ldr	r3, [pc, #104]	; (8009838 <RTC_ExitInitMode+0x78>)
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	4a19      	ldr	r2, [pc, #100]	; (8009838 <RTC_ExitInitMode+0x78>)
 80097d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097d6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80097d8:	4b17      	ldr	r3, [pc, #92]	; (8009838 <RTC_ExitInitMode+0x78>)
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	f003 0320 	and.w	r3, r3, #32
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10c      	bne.n	80097fe <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff ff91 	bl	800970c <HAL_RTC_WaitForSynchro>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d01e      	beq.n	800982e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2203      	movs	r2, #3
 80097f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	73fb      	strb	r3, [r7, #15]
 80097fc:	e017      	b.n	800982e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80097fe:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <RTC_ExitInitMode+0x78>)
 8009800:	699b      	ldr	r3, [r3, #24]
 8009802:	4a0d      	ldr	r2, [pc, #52]	; (8009838 <RTC_ExitInitMode+0x78>)
 8009804:	f023 0320 	bic.w	r3, r3, #32
 8009808:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff ff7e 	bl	800970c <HAL_RTC_WaitForSynchro>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d005      	beq.n	8009822 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2203      	movs	r2, #3
 800981a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009822:	4b05      	ldr	r3, [pc, #20]	; (8009838 <RTC_ExitInitMode+0x78>)
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	4a04      	ldr	r2, [pc, #16]	; (8009838 <RTC_ExitInitMode+0x78>)
 8009828:	f043 0320 	orr.w	r3, r3, #32
 800982c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800982e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}
 8009838:	40002800 	.word	0x40002800

0800983c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	4603      	mov	r3, r0
 8009844:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800984e:	e005      	b.n	800985c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3301      	adds	r3, #1
 8009854:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009856:	7afb      	ldrb	r3, [r7, #11]
 8009858:	3b0a      	subs	r3, #10
 800985a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	2b09      	cmp	r3, #9
 8009860:	d8f6      	bhi.n	8009850 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	b2db      	uxtb	r3, r3
 8009866:	011b      	lsls	r3, r3, #4
 8009868:	b2da      	uxtb	r2, r3
 800986a:	7afb      	ldrb	r3, [r7, #11]
 800986c:	4313      	orrs	r3, r2
 800986e:	b2db      	uxtb	r3, r3
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	bc80      	pop	{r7}
 8009878:	4770      	bx	lr
	...

0800987c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <HAL_RTCEx_EnableBypassShadow+0x16>
 800988e:	2302      	movs	r3, #2
 8009890:	e01f      	b.n	80098d2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2202      	movs	r2, #2
 800989e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098a2:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80098a4:	22ca      	movs	r2, #202	; 0xca
 80098a6:	625a      	str	r2, [r3, #36]	; 0x24
 80098a8:	4b0c      	ldr	r3, [pc, #48]	; (80098dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80098aa:	2253      	movs	r2, #83	; 0x53
 80098ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80098ae:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80098b0:	699b      	ldr	r3, [r3, #24]
 80098b2:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80098b4:	f043 0320 	orr.w	r3, r3, #32
 80098b8:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098ba:	4b08      	ldr	r3, [pc, #32]	; (80098dc <HAL_RTCEx_EnableBypassShadow+0x60>)
 80098bc:	22ff      	movs	r2, #255	; 0xff
 80098be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bc80      	pop	{r7}
 80098da:	4770      	bx	lr
 80098dc:	40002800 	.word	0x40002800

080098e0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80098f2:	2302      	movs	r3, #2
 80098f4:	e027      	b.n	8009946 <HAL_RTCEx_SetSSRU_IT+0x66>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2202      	movs	r2, #2
 8009902:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009908:	22ca      	movs	r2, #202	; 0xca
 800990a:	625a      	str	r2, [r3, #36]	; 0x24
 800990c:	4b10      	ldr	r3, [pc, #64]	; (8009950 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800990e:	2253      	movs	r2, #83	; 0x53
 8009910:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8009912:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	4a0e      	ldr	r2, [pc, #56]	; (8009950 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800991c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800991e:	4b0d      	ldr	r3, [pc, #52]	; (8009954 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009924:	4a0b      	ldr	r2, [pc, #44]	; (8009954 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8009926:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800992a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800992e:	4b08      	ldr	r3, [pc, #32]	; (8009950 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009930:	22ff      	movs	r2, #255	; 0xff
 8009932:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	bc80      	pop	{r7}
 800994e:	4770      	bx	lr
 8009950:	40002800 	.word	0x40002800
 8009954:	58000800 	.word	0x58000800

08009958 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8009960:	4b09      	ldr	r3, [pc, #36]	; (8009988 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8009962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800996e:	2240      	movs	r2, #64	; 0x40
 8009970:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f7f8 ffcf 	bl	8002916 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	40002800 	.word	0x40002800

0800998c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	bc80      	pop	{r7}
 800999c:	4770      	bx	lr
	...

080099a0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80099ac:	4b07      	ldr	r3, [pc, #28]	; (80099cc <HAL_RTCEx_BKUPWrite+0x2c>)
 80099ae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	601a      	str	r2, [r3, #0]
}
 80099c0:	bf00      	nop
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bc80      	pop	{r7}
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	4000b100 	.word	0x4000b100

080099d0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80099da:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <HAL_RTCEx_BKUPRead+0x28>)
 80099dc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	4413      	add	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	4000b100 	.word	0x4000b100

080099fc <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009a04:	4b06      	ldr	r3, [pc, #24]	; (8009a20 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a0c:	4904      	ldr	r1, [pc, #16]	; (8009a20 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	608b      	str	r3, [r1, #8]
}
 8009a14:	bf00      	nop
 8009a16:	370c      	adds	r7, #12
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bc80      	pop	{r7}
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	58000400 	.word	0x58000400

08009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8009a24:	b480      	push	{r7}
 8009a26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a2e:	4a04      	ldr	r2, [pc, #16]	; (8009a40 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009a38:	bf00      	nop
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bc80      	pop	{r7}
 8009a3e:	4770      	bx	lr
 8009a40:	58000400 	.word	0x58000400

08009a44 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009a48:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a4e:	4a04      	ldr	r2, [pc, #16]	; (8009a60 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009a58:	bf00      	nop
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bc80      	pop	{r7}
 8009a5e:	4770      	bx	lr
 8009a60:	58000400 	.word	0x58000400

08009a64 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009a68:	4b03      	ldr	r3, [pc, #12]	; (8009a78 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009a6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a6e:	619a      	str	r2, [r3, #24]
}
 8009a70:	bf00      	nop
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bc80      	pop	{r7}
 8009a76:	4770      	bx	lr
 8009a78:	58000400 	.word	0x58000400

08009a7c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009a80:	4b06      	ldr	r3, [pc, #24]	; (8009a9c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	d101      	bne.n	8009a90 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e000      	b.n	8009a92 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	58000400 	.word	0x58000400

08009aa0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009aa4:	4b06      	ldr	r3, [pc, #24]	; (8009ac0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b04      	cmp	r3, #4
 8009aae:	d101      	bne.n	8009ab4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e000      	b.n	8009ab6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bc80      	pop	{r7}
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	58000400 	.word	0x58000400

08009ac4 <LL_RCC_RF_DisableReset>:
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009acc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009adc:	bf00      	nop
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bc80      	pop	{r7}
 8009ae2:	4770      	bx	lr

08009ae4 <LL_RCC_IsRFUnderReset>:
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009af8:	d101      	bne.n	8009afe <LL_RCC_IsRFUnderReset+0x1a>
 8009afa:	2301      	movs	r3, #1
 8009afc:	e000      	b.n	8009b00 <LL_RCC_IsRFUnderReset+0x1c>
 8009afe:	2300      	movs	r3, #0
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bc80      	pop	{r7}
 8009b06:	4770      	bx	lr

08009b08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009b10:	4b06      	ldr	r3, [pc, #24]	; (8009b2c <LL_EXTI_EnableIT_32_63+0x24>)
 8009b12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009b16:	4905      	ldr	r1, [pc, #20]	; (8009b2c <LL_EXTI_EnableIT_32_63+0x24>)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009b20:	bf00      	nop
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bc80      	pop	{r7}
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	58000800 	.word	0x58000800

08009b30 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d103      	bne.n	8009b46 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	73fb      	strb	r3, [r7, #15]
    return status;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
 8009b44:	e052      	b.n	8009bec <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	799b      	ldrb	r3, [r3, #6]
 8009b4e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <HAL_SUBGHZ_Init+0x2c>
 8009b56:	7bbb      	ldrb	r3, [r7, #14]
 8009b58:	2b03      	cmp	r3, #3
 8009b5a:	d109      	bne.n	8009b70 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7f8 fb00 	bl	8002168 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009b68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009b6c:	f7ff ffcc 	bl	8009b08 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d126      	bne.n	8009bc4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2202      	movs	r2, #2
 8009b7a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009b7c:	f7ff ffa2 	bl	8009ac4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009b80:	4b1c      	ldr	r3, [pc, #112]	; (8009bf4 <HAL_SUBGHZ_Init+0xc4>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	4613      	mov	r3, r2
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	0cdb      	lsrs	r3, r3, #19
 8009b8e:	2264      	movs	r2, #100	; 0x64
 8009b90:	fb02 f303 	mul.w	r3, r2, r3
 8009b94:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d105      	bne.n	8009ba8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	609a      	str	r2, [r3, #8]
        break;
 8009ba6:	e007      	b.n	8009bb8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009bae:	f7ff ff99 	bl	8009ae4 <LL_RCC_IsRFUnderReset>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1ee      	bne.n	8009b96 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009bb8:	f7ff ff34 	bl	8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009bbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009bc0:	f7ff ff1c 	bl	80099fc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009bc4:	f7ff ff4e 	bl	8009a64 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f000 faac 	bl	800a130 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	719a      	strb	r2, [r3, #6]

  return status;
 8009bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3710      	adds	r7, #16
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	20000000 	.word	0x20000000

08009bf8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b086      	sub	sp, #24
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	607a      	str	r2, [r7, #4]
 8009c02:	461a      	mov	r2, r3
 8009c04:	460b      	mov	r3, r1
 8009c06:	817b      	strh	r3, [r7, #10]
 8009c08:	4613      	mov	r3, r2
 8009c0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	799b      	ldrb	r3, [r3, #6]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d14a      	bne.n	8009cac <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	795b      	ldrb	r3, [r3, #5]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e045      	b.n	8009cae <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2202      	movs	r2, #2
 8009c2c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f000 fb4c 	bl	800a2cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009c34:	f7ff ff06 	bl	8009a44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009c38:	210d      	movs	r1, #13
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f000 fa98 	bl	800a170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009c40:	897b      	ldrh	r3, [r7, #10]
 8009c42:	0a1b      	lsrs	r3, r3, #8
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	4619      	mov	r1, r3
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 fa90 	bl	800a170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009c50:	897b      	ldrh	r3, [r7, #10]
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	4619      	mov	r1, r3
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 fa8a 	bl	800a170 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	82bb      	strh	r3, [r7, #20]
 8009c60:	e00a      	b.n	8009c78 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009c62:	8abb      	ldrh	r3, [r7, #20]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	4413      	add	r3, r2
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 fa7f 	bl	800a170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009c72:	8abb      	ldrh	r3, [r7, #20]
 8009c74:	3301      	adds	r3, #1
 8009c76:	82bb      	strh	r3, [r7, #20]
 8009c78:	8aba      	ldrh	r2, [r7, #20]
 8009c7a:	893b      	ldrh	r3, [r7, #8]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d3f0      	bcc.n	8009c62 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009c80:	f7ff fed0 	bl	8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f000 fb45 	bl	800a314 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d002      	beq.n	8009c98 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	75fb      	strb	r3, [r7, #23]
 8009c96:	e001      	b.n	8009c9c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	715a      	strb	r2, [r3, #5]

    return status;
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	e000      	b.n	8009cae <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009cac:	2302      	movs	r3, #2
  }
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b088      	sub	sp, #32
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	817b      	strh	r3, [r7, #10]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	799b      	ldrb	r3, [r3, #6]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d14a      	bne.n	8009d6e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	795b      	ldrb	r3, [r3, #5]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d101      	bne.n	8009ce4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e045      	b.n	8009d70 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	f000 faee 	bl	800a2cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009cf0:	f7ff fea8 	bl	8009a44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009cf4:	211d      	movs	r1, #29
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 fa3a 	bl	800a170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009cfc:	897b      	ldrh	r3, [r7, #10]
 8009cfe:	0a1b      	lsrs	r3, r3, #8
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	4619      	mov	r1, r3
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 fa32 	bl	800a170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009d0c:	897b      	ldrh	r3, [r7, #10]
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	4619      	mov	r1, r3
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 fa2c 	bl	800a170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009d18:	2100      	movs	r1, #0
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	f000 fa28 	bl	800a170 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009d20:	2300      	movs	r3, #0
 8009d22:	82fb      	strh	r3, [r7, #22]
 8009d24:	e009      	b.n	8009d3a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009d26:	69b9      	ldr	r1, [r7, #24]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 fa77 	bl	800a21c <SUBGHZSPI_Receive>
      pData++;
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	3301      	adds	r3, #1
 8009d32:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009d34:	8afb      	ldrh	r3, [r7, #22]
 8009d36:	3301      	adds	r3, #1
 8009d38:	82fb      	strh	r3, [r7, #22]
 8009d3a:	8afa      	ldrh	r2, [r7, #22]
 8009d3c:	893b      	ldrh	r3, [r7, #8]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d3f1      	bcc.n	8009d26 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009d42:	f7ff fe6f 	bl	8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009d46:	68f8      	ldr	r0, [r7, #12]
 8009d48:	f000 fae4 	bl	800a314 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	77fb      	strb	r3, [r7, #31]
 8009d58:	e001      	b.n	8009d5e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2201      	movs	r2, #1
 8009d62:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2200      	movs	r2, #0
 8009d68:	715a      	strb	r2, [r3, #5]

    return status;
 8009d6a:	7ffb      	ldrb	r3, [r7, #31]
 8009d6c:	e000      	b.n	8009d70 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009d6e:	2302      	movs	r3, #2
  }
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3720      	adds	r7, #32
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	607a      	str	r2, [r7, #4]
 8009d82:	461a      	mov	r2, r3
 8009d84:	460b      	mov	r3, r1
 8009d86:	72fb      	strb	r3, [r7, #11]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	799b      	ldrb	r3, [r3, #6]
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d14a      	bne.n	8009e2c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	795b      	ldrb	r3, [r3, #5]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009d9e:	2302      	movs	r3, #2
 8009da0:	e045      	b.n	8009e2e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2201      	movs	r2, #1
 8009da6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 fa8f 	bl	800a2cc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009dae:	7afb      	ldrb	r3, [r7, #11]
 8009db0:	2b84      	cmp	r3, #132	; 0x84
 8009db2:	d002      	beq.n	8009dba <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009db4:	7afb      	ldrb	r3, [r7, #11]
 8009db6:	2b94      	cmp	r3, #148	; 0x94
 8009db8:	d103      	bne.n	8009dc2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	711a      	strb	r2, [r3, #4]
 8009dc0:	e002      	b.n	8009dc8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009dc8:	f7ff fe3c 	bl	8009a44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009dcc:	7afb      	ldrb	r3, [r7, #11]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f9cd 	bl	800a170 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	82bb      	strh	r3, [r7, #20]
 8009dda:	e00a      	b.n	8009df2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009ddc:	8abb      	ldrh	r3, [r7, #20]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	4413      	add	r3, r2
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 f9c2 	bl	800a170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009dec:	8abb      	ldrh	r3, [r7, #20]
 8009dee:	3301      	adds	r3, #1
 8009df0:	82bb      	strh	r3, [r7, #20]
 8009df2:	8aba      	ldrh	r2, [r7, #20]
 8009df4:	893b      	ldrh	r3, [r7, #8]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d3f0      	bcc.n	8009ddc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009dfa:	f7ff fe13 	bl	8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8009dfe:	7afb      	ldrb	r3, [r7, #11]
 8009e00:	2b84      	cmp	r3, #132	; 0x84
 8009e02:	d002      	beq.n	8009e0a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f000 fa85 	bl	800a314 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8009e12:	2301      	movs	r3, #1
 8009e14:	75fb      	strb	r3, [r7, #23]
 8009e16:	e001      	b.n	8009e1c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	715a      	strb	r2, [r3, #5]

    return status;
 8009e28:	7dfb      	ldrb	r3, [r7, #23]
 8009e2a:	e000      	b.n	8009e2e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009e2c:	2302      	movs	r3, #2
  }
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b088      	sub	sp, #32
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	60f8      	str	r0, [r7, #12]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	461a      	mov	r2, r3
 8009e42:	460b      	mov	r3, r1
 8009e44:	72fb      	strb	r3, [r7, #11]
 8009e46:	4613      	mov	r3, r2
 8009e48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	799b      	ldrb	r3, [r3, #6]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d13d      	bne.n	8009ed4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	795b      	ldrb	r3, [r3, #5]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d101      	bne.n	8009e64 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009e60:	2302      	movs	r3, #2
 8009e62:	e038      	b.n	8009ed6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2201      	movs	r2, #1
 8009e68:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f000 fa2e 	bl	800a2cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009e70:	f7ff fde8 	bl	8009a44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009e74:	7afb      	ldrb	r3, [r7, #11]
 8009e76:	4619      	mov	r1, r3
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f000 f979 	bl	800a170 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009e7e:	2100      	movs	r1, #0
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f000 f975 	bl	800a170 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009e86:	2300      	movs	r3, #0
 8009e88:	82fb      	strh	r3, [r7, #22]
 8009e8a:	e009      	b.n	8009ea0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009e8c:	69b9      	ldr	r1, [r7, #24]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 f9c4 	bl	800a21c <SUBGHZSPI_Receive>
      pData++;
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	3301      	adds	r3, #1
 8009e98:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009e9a:	8afb      	ldrh	r3, [r7, #22]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	82fb      	strh	r3, [r7, #22]
 8009ea0:	8afa      	ldrh	r2, [r7, #22]
 8009ea2:	893b      	ldrh	r3, [r7, #8]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d3f1      	bcc.n	8009e8c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009ea8:	f7ff fdbc 	bl	8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009eac:	68f8      	ldr	r0, [r7, #12]
 8009eae:	f000 fa31 	bl	800a314 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	77fb      	strb	r3, [r7, #31]
 8009ebe:	e001      	b.n	8009ec4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	715a      	strb	r2, [r3, #5]

    return status;
 8009ed0:	7ffb      	ldrb	r3, [r7, #31]
 8009ed2:	e000      	b.n	8009ed6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009ed4:	2302      	movs	r3, #2
  }
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3720      	adds	r7, #32
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b086      	sub	sp, #24
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	460b      	mov	r3, r1
 8009eec:	72fb      	strb	r3, [r7, #11]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	799b      	ldrb	r3, [r3, #6]
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d13e      	bne.n	8009f7a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	795b      	ldrb	r3, [r3, #5]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e039      	b.n	8009f7c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f000 f9dc 	bl	800a2cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f14:	f7ff fd96 	bl	8009a44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8009f18:	210e      	movs	r1, #14
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 f928 	bl	800a170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	4619      	mov	r1, r3
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f923 	bl	800a170 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	82bb      	strh	r3, [r7, #20]
 8009f2e:	e00a      	b.n	8009f46 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009f30:	8abb      	ldrh	r3, [r7, #20]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	4413      	add	r3, r2
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	f000 f918 	bl	800a170 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009f40:	8abb      	ldrh	r3, [r7, #20]
 8009f42:	3301      	adds	r3, #1
 8009f44:	82bb      	strh	r3, [r7, #20]
 8009f46:	8aba      	ldrh	r2, [r7, #20]
 8009f48:	893b      	ldrh	r3, [r7, #8]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d3f0      	bcc.n	8009f30 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f4e:	f7ff fd69 	bl	8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f000 f9de 	bl	800a314 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	75fb      	strb	r3, [r7, #23]
 8009f64:	e001      	b.n	8009f6a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	715a      	strb	r2, [r3, #5]

    return status;
 8009f76:	7dfb      	ldrb	r3, [r7, #23]
 8009f78:	e000      	b.n	8009f7c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009f7a:	2302      	movs	r3, #2
  }
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	607a      	str	r2, [r7, #4]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	460b      	mov	r3, r1
 8009f92:	72fb      	strb	r3, [r7, #11]
 8009f94:	4613      	mov	r3, r2
 8009f96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	799b      	ldrb	r3, [r3, #6]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d141      	bne.n	800a02a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	795b      	ldrb	r3, [r3, #5]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d101      	bne.n	8009fb2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8009fae:	2302      	movs	r3, #2
 8009fb0:	e03c      	b.n	800a02c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f987 	bl	800a2cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009fbe:	f7ff fd41 	bl	8009a44 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8009fc2:	211e      	movs	r1, #30
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f8d3 	bl	800a170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 f8ce 	bl	800a170 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 f8ca 	bl	800a170 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	82fb      	strh	r3, [r7, #22]
 8009fe0:	e009      	b.n	8009ff6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009fe2:	69b9      	ldr	r1, [r7, #24]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f000 f919 	bl	800a21c <SUBGHZSPI_Receive>
      pData++;
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	3301      	adds	r3, #1
 8009fee:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009ff0:	8afb      	ldrh	r3, [r7, #22]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	82fb      	strh	r3, [r7, #22]
 8009ff6:	8afa      	ldrh	r2, [r7, #22]
 8009ff8:	893b      	ldrh	r3, [r7, #8]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d3f1      	bcc.n	8009fe2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009ffe:	f7ff fd11 	bl	8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 f986 	bl	800a314 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d002      	beq.n	800a016 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	77fb      	strb	r3, [r7, #31]
 800a014:	e001      	b.n	800a01a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2201      	movs	r2, #1
 800a01e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	715a      	strb	r2, [r3, #5]

    return status;
 800a026:	7ffb      	ldrb	r3, [r7, #31]
 800a028:	e000      	b.n	800a02c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a02a:	2302      	movs	r3, #2
  }
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3720      	adds	r7, #32
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a03c:	2300      	movs	r3, #0
 800a03e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a040:	f107 020c 	add.w	r2, r7, #12
 800a044:	2302      	movs	r3, #2
 800a046:	2112      	movs	r1, #18
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7ff fef4 	bl	8009e36 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a04e:	7b3b      	ldrb	r3, [r7, #12]
 800a050:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a052:	89fb      	ldrh	r3, [r7, #14]
 800a054:	021b      	lsls	r3, r3, #8
 800a056:	b21a      	sxth	r2, r3
 800a058:	7b7b      	ldrb	r3, [r7, #13]
 800a05a:	b21b      	sxth	r3, r3
 800a05c:	4313      	orrs	r3, r2
 800a05e:	b21b      	sxth	r3, r3
 800a060:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a062:	f107 020c 	add.w	r2, r7, #12
 800a066:	2302      	movs	r3, #2
 800a068:	2102      	movs	r1, #2
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fe84 	bl	8009d78 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a070:	89fb      	ldrh	r3, [r7, #14]
 800a072:	f003 0301 	and.w	r3, r3, #1
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f014 faca 	bl	801e614 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a080:	89fb      	ldrh	r3, [r7, #14]
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d002      	beq.n	800a090 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f014 fad0 	bl	801e630 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a090:	89fb      	ldrh	r3, [r7, #14]
 800a092:	f003 0304 	and.w	r3, r3, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	d002      	beq.n	800a0a0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f014 fb20 	bl	801e6e0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a0a0:	89fb      	ldrh	r3, [r7, #14]
 800a0a2:	f003 0308 	and.w	r3, r3, #8
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f014 fb26 	bl	801e6fc <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a0b0:	89fb      	ldrh	r3, [r7, #14]
 800a0b2:	f003 0310 	and.w	r3, r3, #16
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f014 fb2c 	bl	801e718 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a0c0:	89fb      	ldrh	r3, [r7, #14]
 800a0c2:	f003 0320 	and.w	r3, r3, #32
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f014 fafa 	bl	801e6c4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a0d0:	89fb      	ldrh	r3, [r7, #14]
 800a0d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d002      	beq.n	800a0e0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f014 fab6 	bl	801e64c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a0e0:	89fb      	ldrh	r3, [r7, #14]
 800a0e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00d      	beq.n	800a106 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a0ea:	89fb      	ldrh	r3, [r7, #14]
 800a0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d004      	beq.n	800a0fe <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f014 fab6 	bl	801e668 <HAL_SUBGHZ_CADStatusCallback>
 800a0fc:	e003      	b.n	800a106 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a0fe:	2100      	movs	r1, #0
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f014 fab1 	bl	801e668 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a106:	89fb      	ldrh	r3, [r7, #14]
 800a108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d002      	beq.n	800a116 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f014 fac7 	bl	801e6a4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a116:	89fb      	ldrh	r3, [r7, #14]
 800a118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d002      	beq.n	800a126 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f014 fb07 	bl	801e734 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a126:	bf00      	nop
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
	...

0800a130 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a138:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <SUBGHZSPI_Init+0x3c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a0b      	ldr	r2, [pc, #44]	; (800a16c <SUBGHZSPI_Init+0x3c>)
 800a13e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a142:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a144:	4a09      	ldr	r2, [pc, #36]	; (800a16c <SUBGHZSPI_Init+0x3c>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800a14c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a14e:	4b07      	ldr	r3, [pc, #28]	; (800a16c <SUBGHZSPI_Init+0x3c>)
 800a150:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800a154:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a156:	4b05      	ldr	r3, [pc, #20]	; (800a16c <SUBGHZSPI_Init+0x3c>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a04      	ldr	r2, [pc, #16]	; (800a16c <SUBGHZSPI_Init+0x3c>)
 800a15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a160:	6013      	str	r3, [r2, #0]
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	bc80      	pop	{r7}
 800a16a:	4770      	bx	lr
 800a16c:	58010000 	.word	0x58010000

0800a170 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a17c:	2300      	movs	r3, #0
 800a17e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a180:	4b23      	ldr	r3, [pc, #140]	; (800a210 <SUBGHZSPI_Transmit+0xa0>)
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	4613      	mov	r3, r2
 800a186:	00db      	lsls	r3, r3, #3
 800a188:	1a9b      	subs	r3, r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	0cdb      	lsrs	r3, r3, #19
 800a18e:	2264      	movs	r2, #100	; 0x64
 800a190:	fb02 f303 	mul.w	r3, r2, r3
 800a194:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d105      	bne.n	800a1a8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	609a      	str	r2, [r3, #8]
      break;
 800a1a6:	e008      	b.n	800a1ba <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a1ae:	4b19      	ldr	r3, [pc, #100]	; (800a214 <SUBGHZSPI_Transmit+0xa4>)
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 0302 	and.w	r3, r3, #2
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d1ed      	bne.n	800a196 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a1ba:	4b17      	ldr	r3, [pc, #92]	; (800a218 <SUBGHZSPI_Transmit+0xa8>)
 800a1bc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	78fa      	ldrb	r2, [r7, #3]
 800a1c2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a1c4:	4b12      	ldr	r3, [pc, #72]	; (800a210 <SUBGHZSPI_Transmit+0xa0>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	1a9b      	subs	r3, r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	0cdb      	lsrs	r3, r3, #19
 800a1d2:	2264      	movs	r2, #100	; 0x64
 800a1d4:	fb02 f303 	mul.w	r3, r2, r3
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d105      	bne.n	800a1ec <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	609a      	str	r2, [r3, #8]
      break;
 800a1ea:	e008      	b.n	800a1fe <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a1f2:	4b08      	ldr	r3, [pc, #32]	; (800a214 <SUBGHZSPI_Transmit+0xa4>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d1ed      	bne.n	800a1da <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a1fe:	4b05      	ldr	r3, [pc, #20]	; (800a214 <SUBGHZSPI_Transmit+0xa4>)
 800a200:	68db      	ldr	r3, [r3, #12]

  return status;
 800a202:	7dfb      	ldrb	r3, [r7, #23]
}
 800a204:	4618      	mov	r0, r3
 800a206:	371c      	adds	r7, #28
 800a208:	46bd      	mov	sp, r7
 800a20a:	bc80      	pop	{r7}
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20000000 	.word	0x20000000
 800a214:	58010000 	.word	0x58010000
 800a218:	5801000c 	.word	0x5801000c

0800a21c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a226:	2300      	movs	r3, #0
 800a228:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a22a:	4b25      	ldr	r3, [pc, #148]	; (800a2c0 <SUBGHZSPI_Receive+0xa4>)
 800a22c:	681a      	ldr	r2, [r3, #0]
 800a22e:	4613      	mov	r3, r2
 800a230:	00db      	lsls	r3, r3, #3
 800a232:	1a9b      	subs	r3, r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	0cdb      	lsrs	r3, r3, #19
 800a238:	2264      	movs	r2, #100	; 0x64
 800a23a:	fb02 f303 	mul.w	r3, r2, r3
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a246:	2301      	movs	r3, #1
 800a248:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	609a      	str	r2, [r3, #8]
      break;
 800a250:	e008      	b.n	800a264 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	3b01      	subs	r3, #1
 800a256:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a258:	4b1a      	ldr	r3, [pc, #104]	; (800a2c4 <SUBGHZSPI_Receive+0xa8>)
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f003 0302 	and.w	r3, r3, #2
 800a260:	2b02      	cmp	r3, #2
 800a262:	d1ed      	bne.n	800a240 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a264:	4b18      	ldr	r3, [pc, #96]	; (800a2c8 <SUBGHZSPI_Receive+0xac>)
 800a266:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	22ff      	movs	r2, #255	; 0xff
 800a26c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a26e:	4b14      	ldr	r3, [pc, #80]	; (800a2c0 <SUBGHZSPI_Receive+0xa4>)
 800a270:	681a      	ldr	r2, [r3, #0]
 800a272:	4613      	mov	r3, r2
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	1a9b      	subs	r3, r3, r2
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	0cdb      	lsrs	r3, r3, #19
 800a27c:	2264      	movs	r2, #100	; 0x64
 800a27e:	fb02 f303 	mul.w	r3, r2, r3
 800a282:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d105      	bne.n	800a296 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2201      	movs	r2, #1
 800a292:	609a      	str	r2, [r3, #8]
      break;
 800a294:	e008      	b.n	800a2a8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	3b01      	subs	r3, #1
 800a29a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <SUBGHZSPI_Receive+0xa8>)
 800a29e:	689b      	ldr	r3, [r3, #8]
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d1ed      	bne.n	800a284 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a2a8:	4b06      	ldr	r3, [pc, #24]	; (800a2c4 <SUBGHZSPI_Receive+0xa8>)
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	701a      	strb	r2, [r3, #0]

  return status;
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	371c      	adds	r7, #28
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bc80      	pop	{r7}
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	20000000 	.word	0x20000000
 800a2c4:	58010000 	.word	0x58010000
 800a2c8:	5801000c 	.word	0x5801000c

0800a2cc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	791b      	ldrb	r3, [r3, #4]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d111      	bne.n	800a300 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a2dc:	4b0c      	ldr	r3, [pc, #48]	; (800a310 <SUBGHZ_CheckDeviceReady+0x44>)
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	005b      	lsls	r3, r3, #1
 800a2e4:	4413      	add	r3, r2
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	0c1b      	lsrs	r3, r3, #16
 800a2ea:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a2ec:	f7ff fbaa 	bl	8009a44 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1f9      	bne.n	800a2f0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a2fc:	f7ff fb92 	bl	8009a24 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f807 	bl	800a314 <SUBGHZ_WaitOnBusy>
 800a306:	4603      	mov	r3, r0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	20000000 	.word	0x20000000

0800a314 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b086      	sub	sp, #24
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a320:	4b12      	ldr	r3, [pc, #72]	; (800a36c <SUBGHZ_WaitOnBusy+0x58>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	4613      	mov	r3, r2
 800a326:	005b      	lsls	r3, r3, #1
 800a328:	4413      	add	r3, r2
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	0d1b      	lsrs	r3, r3, #20
 800a32e:	2264      	movs	r2, #100	; 0x64
 800a330:	fb02 f303 	mul.w	r3, r2, r3
 800a334:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a336:	f7ff fbb3 	bl	8009aa0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a33a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d105      	bne.n	800a34e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2202      	movs	r2, #2
 800a34a:	609a      	str	r2, [r3, #8]
      break;
 800a34c:	e009      	b.n	800a362 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3b01      	subs	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a354:	f7ff fb92 	bl	8009a7c <LL_PWR_IsActiveFlag_RFBUSYS>
 800a358:	4602      	mov	r2, r0
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	4013      	ands	r3, r2
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d0e9      	beq.n	800a336 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a362:	7dfb      	ldrb	r3, [r7, #23]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20000000 	.word	0x20000000

0800a370 <LL_RCC_GetUSARTClockSource>:
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800a378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a37c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	401a      	ands	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	041b      	lsls	r3, r3, #16
 800a388:	4313      	orrs	r3, r2
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	bc80      	pop	{r7}
 800a392:	4770      	bx	lr

0800a394 <LL_RCC_GetLPUARTClockSource>:
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a39c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4013      	ands	r3, r2
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr

0800a3b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e042      	b.n	800a44a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7f8 fc02 	bl	8002be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2224      	movs	r2, #36	; 0x24
 800a3e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f022 0201 	bic.w	r2, r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 fc3b 	bl	800ac70 <UART_SetConfig>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d101      	bne.n	800a404 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e022      	b.n	800a44a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 fea3 	bl	800b158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	685a      	ldr	r2, [r3, #4]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a420:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a430:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f042 0201 	orr.w	r2, r2, #1
 800a440:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 ff29 	bl	800b29a <UART_CheckIdleState>
 800a448:	4603      	mov	r3, r0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
	...

0800a454 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08a      	sub	sp, #40	; 0x28
 800a458:	af00      	add	r7, sp, #0
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	4613      	mov	r3, r2
 800a460:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a468:	2b20      	cmp	r3, #32
 800a46a:	d137      	bne.n	800a4dc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <HAL_UART_Receive_IT+0x24>
 800a472:	88fb      	ldrh	r3, [r7, #6]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e030      	b.n	800a4de <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a18      	ldr	r2, [pc, #96]	; (800a4e8 <HAL_UART_Receive_IT+0x94>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d01f      	beq.n	800a4cc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d018      	beq.n	800a4cc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	e853 3f00 	ldrex	r3, [r3]
 800a4a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b8:	623b      	str	r3, [r7, #32]
 800a4ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4bc:	69f9      	ldr	r1, [r7, #28]
 800a4be:	6a3a      	ldr	r2, [r7, #32]
 800a4c0:	e841 2300 	strex	r3, r2, [r1]
 800a4c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e6      	bne.n	800a49a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fff8 	bl	800b4c8 <UART_Start_Receive_IT>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	e000      	b.n	800a4de <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a4dc:	2302      	movs	r3, #2
  }
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3728      	adds	r7, #40	; 0x28
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	40008000 	.word	0x40008000

0800a4ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08a      	sub	sp, #40	; 0x28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a500:	2b20      	cmp	r3, #32
 800a502:	d167      	bne.n	800a5d4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d002      	beq.n	800a510 <HAL_UART_Transmit_DMA+0x24>
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e060      	b.n	800a5d6 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	88fa      	ldrh	r2, [r7, #6]
 800a51e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	88fa      	ldrh	r2, [r7, #6]
 800a526:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2221      	movs	r2, #33	; 0x21
 800a536:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d028      	beq.n	800a594 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a546:	4a26      	ldr	r2, [pc, #152]	; (800a5e0 <HAL_UART_Transmit_DMA+0xf4>)
 800a548:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a54e:	4a25      	ldr	r2, [pc, #148]	; (800a5e4 <HAL_UART_Transmit_DMA+0xf8>)
 800a550:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a556:	4a24      	ldr	r2, [pc, #144]	; (800a5e8 <HAL_UART_Transmit_DMA+0xfc>)
 800a558:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a55e:	2200      	movs	r2, #0
 800a560:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56a:	4619      	mov	r1, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3328      	adds	r3, #40	; 0x28
 800a572:	461a      	mov	r2, r3
 800a574:	88fb      	ldrh	r3, [r7, #6]
 800a576:	f7fb febd 	bl	80062f4 <HAL_DMA_Start_IT>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d009      	beq.n	800a594 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2210      	movs	r2, #16
 800a584:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2220      	movs	r2, #32
 800a58c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800a590:	2301      	movs	r3, #1
 800a592:	e020      	b.n	800a5d6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2240      	movs	r2, #64	; 0x40
 800a59a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3308      	adds	r3, #8
 800a5a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	e853 3f00 	ldrex	r3, [r3]
 800a5aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5bc:	623a      	str	r2, [r7, #32]
 800a5be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c0:	69f9      	ldr	r1, [r7, #28]
 800a5c2:	6a3a      	ldr	r2, [r7, #32]
 800a5c4:	e841 2300 	strex	r3, r2, [r1]
 800a5c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d1e5      	bne.n	800a59c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	e000      	b.n	800a5d6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a5d4:	2302      	movs	r3, #2
  }
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3728      	adds	r7, #40	; 0x28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	0800b853 	.word	0x0800b853
 800a5e4:	0800b8ed 	.word	0x0800b8ed
 800a5e8:	0800b909 	.word	0x0800b909

0800a5ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b0ba      	sub	sp, #232	; 0xe8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	69db      	ldr	r3, [r3, #28]
 800a5fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a612:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a616:	f640 030f 	movw	r3, #2063	; 0x80f
 800a61a:	4013      	ands	r3, r2
 800a61c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a620:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a624:	2b00      	cmp	r3, #0
 800a626:	d11b      	bne.n	800a660 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a62c:	f003 0320 	and.w	r3, r3, #32
 800a630:	2b00      	cmp	r3, #0
 800a632:	d015      	beq.n	800a660 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a638:	f003 0320 	and.w	r3, r3, #32
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d105      	bne.n	800a64c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d009      	beq.n	800a660 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 82e3 	beq.w	800ac1c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	4798      	blx	r3
      }
      return;
 800a65e:	e2dd      	b.n	800ac1c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 8123 	beq.w	800a8b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a66a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a66e:	4b8d      	ldr	r3, [pc, #564]	; (800a8a4 <HAL_UART_IRQHandler+0x2b8>)
 800a670:	4013      	ands	r3, r2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d106      	bne.n	800a684 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a676:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a67a:	4b8b      	ldr	r3, [pc, #556]	; (800a8a8 <HAL_UART_IRQHandler+0x2bc>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 8116 	beq.w	800a8b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d011      	beq.n	800a6b4 <HAL_UART_IRQHandler+0xc8>
 800a690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00b      	beq.n	800a6b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6aa:	f043 0201 	orr.w	r2, r3, #1
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d011      	beq.n	800a6e4 <HAL_UART_IRQHandler+0xf8>
 800a6c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00b      	beq.n	800a6e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	2202      	movs	r2, #2
 800a6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6da:	f043 0204 	orr.w	r2, r3, #4
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e8:	f003 0304 	and.w	r3, r3, #4
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d011      	beq.n	800a714 <HAL_UART_IRQHandler+0x128>
 800a6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2204      	movs	r2, #4
 800a702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a70a:	f043 0202 	orr.w	r2, r3, #2
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a718:	f003 0308 	and.w	r3, r3, #8
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d017      	beq.n	800a750 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a724:	f003 0320 	and.w	r3, r3, #32
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d105      	bne.n	800a738 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a72c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a730:	4b5c      	ldr	r3, [pc, #368]	; (800a8a4 <HAL_UART_IRQHandler+0x2b8>)
 800a732:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00b      	beq.n	800a750 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2208      	movs	r2, #8
 800a73e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a746:	f043 0208 	orr.w	r2, r3, #8
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d012      	beq.n	800a782 <HAL_UART_IRQHandler+0x196>
 800a75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a760:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d00c      	beq.n	800a782 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a770:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a778:	f043 0220 	orr.w	r2, r3, #32
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 8249 	beq.w	800ac20 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a78e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d013      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a79a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a79e:	f003 0320 	and.w	r3, r3, #32
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d105      	bne.n	800a7b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a7a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d007      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d003      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d6:	2b40      	cmp	r3, #64	; 0x40
 800a7d8:	d005      	beq.n	800a7e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d054      	beq.n	800a890 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 ffce 	bl	800b788 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f6:	2b40      	cmp	r3, #64	; 0x40
 800a7f8:	d146      	bne.n	800a888 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	3308      	adds	r3, #8
 800a800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3308      	adds	r3, #8
 800a822:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a826:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a82a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a832:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a83e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1d9      	bne.n	800a7fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d017      	beq.n	800a880 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a856:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <HAL_UART_IRQHandler+0x2c0>)
 800a858:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a860:	4618      	mov	r0, r3
 800a862:	f7fb fe23 	bl	80064ac <HAL_DMA_Abort_IT>
 800a866:	4603      	mov	r3, r0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d019      	beq.n	800a8a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a87a:	4610      	mov	r0, r2
 800a87c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a87e:	e00f      	b.n	800a8a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f9e0 	bl	800ac46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a886:	e00b      	b.n	800a8a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f9dc 	bl	800ac46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a88e:	e007      	b.n	800a8a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f000 f9d8 	bl	800ac46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a89e:	e1bf      	b.n	800ac20 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a0:	bf00      	nop
    return;
 800a8a2:	e1bd      	b.n	800ac20 <HAL_UART_IRQHandler+0x634>
 800a8a4:	10000001 	.word	0x10000001
 800a8a8:	04000120 	.word	0x04000120
 800a8ac:	0800b989 	.word	0x0800b989

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	f040 8153 	bne.w	800ab60 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8be:	f003 0310 	and.w	r3, r3, #16
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 814c 	beq.w	800ab60 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8cc:	f003 0310 	and.w	r3, r3, #16
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 8145 	beq.w	800ab60 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2210      	movs	r2, #16
 800a8dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e8:	2b40      	cmp	r3, #64	; 0x40
 800a8ea:	f040 80bb 	bne.w	800aa64 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 818f 	beq.w	800ac24 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a90c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a910:	429a      	cmp	r2, r3
 800a912:	f080 8187 	bcs.w	800ac24 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a91c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f040 8087 	bne.w	800aa42 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a940:	e853 3f00 	ldrex	r3, [r3]
 800a944:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a948:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a94c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	461a      	mov	r2, r3
 800a95a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a95e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a962:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a96a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a976:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1da      	bne.n	800a934 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3308      	adds	r3, #8
 800a984:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a98e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3308      	adds	r3, #8
 800a99e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a9a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a9a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a9aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a9ae:	e841 2300 	strex	r3, r2, [r1]
 800a9b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a9b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1e1      	bne.n	800a97e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3308      	adds	r3, #8
 800a9c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3308      	adds	r3, #8
 800a9da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9de:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e3      	bne.n	800a9ba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa10:	f023 0310 	bic.w	r3, r3, #16
 800aa14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa22:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa2a:	e841 2300 	strex	r3, r2, [r1]
 800aa2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aa30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d1e4      	bne.n	800aa00 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7fb fcd7 	bl	80063f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2202      	movs	r2, #2
 800aa46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f8fb 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aa62:	e0df      	b.n	800ac24 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	1ad3      	subs	r3, r2, r3
 800aa74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 80d1 	beq.w	800ac28 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800aa86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 80cc 	beq.w	800ac28 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	e853 3f00 	ldrex	r3, [r3]
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aaa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aab2:	647b      	str	r3, [r7, #68]	; 0x44
 800aab4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aaba:	e841 2300 	strex	r3, r2, [r1]
 800aabe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e4      	bne.n	800aa90 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3308      	adds	r3, #8
 800aacc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad0:	e853 3f00 	ldrex	r3, [r3]
 800aad4:	623b      	str	r3, [r7, #32]
   return(result);
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aadc:	f023 0301 	bic.w	r3, r3, #1
 800aae0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3308      	adds	r3, #8
 800aaea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaee:	633a      	str	r2, [r7, #48]	; 0x30
 800aaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aaf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf6:	e841 2300 	strex	r3, r2, [r1]
 800aafa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1e1      	bne.n	800aac6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2220      	movs	r2, #32
 800ab06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2200      	movs	r2, #0
 800ab14:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f023 0310 	bic.w	r3, r3, #16
 800ab2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	461a      	mov	r2, r3
 800ab34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab38:	61fb      	str	r3, [r7, #28]
 800ab3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	69b9      	ldr	r1, [r7, #24]
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	617b      	str	r3, [r7, #20]
   return(result);
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e4      	bne.n	800ab16 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab56:	4619      	mov	r1, r3
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f87d 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab5e:	e063      	b.n	800ac28 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00e      	beq.n	800ab8a <HAL_UART_IRQHandler+0x59e>
 800ab6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ab70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d008      	beq.n	800ab8a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ab80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f001 fc5e 	bl	800c444 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab88:	e051      	b.n	800ac2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ab8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d014      	beq.n	800abc0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ab96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d105      	bne.n	800abae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aba6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d008      	beq.n	800abc0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d03a      	beq.n	800ac2c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	4798      	blx	r3
    }
    return;
 800abbe:	e035      	b.n	800ac2c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800abc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d009      	beq.n	800abe0 <HAL_UART_IRQHandler+0x5f4>
 800abcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d003      	beq.n	800abe0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 feeb 	bl	800b9b4 <UART_EndTransmit_IT>
    return;
 800abde:	e026      	b.n	800ac2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800abe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abe4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d009      	beq.n	800ac00 <HAL_UART_IRQHandler+0x614>
 800abec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d003      	beq.n	800ac00 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f001 fc35 	bl	800c468 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abfe:	e016      	b.n	800ac2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ac00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d010      	beq.n	800ac2e <HAL_UART_IRQHandler+0x642>
 800ac0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	da0c      	bge.n	800ac2e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f001 fc1e 	bl	800c456 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac1a:	e008      	b.n	800ac2e <HAL_UART_IRQHandler+0x642>
      return;
 800ac1c:	bf00      	nop
 800ac1e:	e006      	b.n	800ac2e <HAL_UART_IRQHandler+0x642>
    return;
 800ac20:	bf00      	nop
 800ac22:	e004      	b.n	800ac2e <HAL_UART_IRQHandler+0x642>
      return;
 800ac24:	bf00      	nop
 800ac26:	e002      	b.n	800ac2e <HAL_UART_IRQHandler+0x642>
      return;
 800ac28:	bf00      	nop
 800ac2a:	e000      	b.n	800ac2e <HAL_UART_IRQHandler+0x642>
    return;
 800ac2c:	bf00      	nop
  }
}
 800ac2e:	37e8      	adds	r7, #232	; 0xe8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bc80      	pop	{r7}
 800ac44:	4770      	bx	lr

0800ac46 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b083      	sub	sp, #12
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac4e:	bf00      	nop
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bc80      	pop	{r7}
 800ac56:	4770      	bx	lr

0800ac58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	460b      	mov	r3, r1
 800ac62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bc80      	pop	{r7}
 800ac6c:	4770      	bx	lr
	...

0800ac70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac74:	b08c      	sub	sp, #48	; 0x30
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac80:	697b      	ldr	r3, [r7, #20]
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	431a      	orrs	r2, r3
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	69db      	ldr	r3, [r3, #28]
 800ac94:	4313      	orrs	r3, r2
 800ac96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	4b94      	ldr	r3, [pc, #592]	; (800aef0 <UART_SetConfig+0x280>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	6812      	ldr	r2, [r2, #0]
 800aca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	68da      	ldr	r2, [r3, #12]
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	430a      	orrs	r2, r1
 800acc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a89      	ldr	r2, [pc, #548]	; (800aef4 <UART_SetConfig+0x284>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d004      	beq.n	800acdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acd8:	4313      	orrs	r3, r2
 800acda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ace6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	6812      	ldr	r2, [r2, #0]
 800acee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acf0:	430b      	orrs	r3, r1
 800acf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfa:	f023 010f 	bic.w	r1, r3, #15
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	430a      	orrs	r2, r1
 800ad08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a7a      	ldr	r2, [pc, #488]	; (800aef8 <UART_SetConfig+0x288>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d127      	bne.n	800ad64 <UART_SetConfig+0xf4>
 800ad14:	2003      	movs	r0, #3
 800ad16:	f7ff fb2b 	bl	800a370 <LL_RCC_GetUSARTClockSource>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d81b      	bhi.n	800ad5c <UART_SetConfig+0xec>
 800ad24:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <UART_SetConfig+0xbc>)
 800ad26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2a:	bf00      	nop
 800ad2c:	0800ad3d 	.word	0x0800ad3d
 800ad30:	0800ad4d 	.word	0x0800ad4d
 800ad34:	0800ad45 	.word	0x0800ad45
 800ad38:	0800ad55 	.word	0x0800ad55
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad42:	e080      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ad44:	2302      	movs	r3, #2
 800ad46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad4a:	e07c      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ad4c:	2304      	movs	r3, #4
 800ad4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad52:	e078      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ad54:	2308      	movs	r3, #8
 800ad56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad5a:	e074      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ad5c:	2310      	movs	r3, #16
 800ad5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad62:	e070      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a64      	ldr	r2, [pc, #400]	; (800aefc <UART_SetConfig+0x28c>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d138      	bne.n	800ade0 <UART_SetConfig+0x170>
 800ad6e:	200c      	movs	r0, #12
 800ad70:	f7ff fafe 	bl	800a370 <LL_RCC_GetUSARTClockSource>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800ad7a:	2b0c      	cmp	r3, #12
 800ad7c:	d82c      	bhi.n	800add8 <UART_SetConfig+0x168>
 800ad7e:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <UART_SetConfig+0x114>)
 800ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad84:	0800adb9 	.word	0x0800adb9
 800ad88:	0800add9 	.word	0x0800add9
 800ad8c:	0800add9 	.word	0x0800add9
 800ad90:	0800add9 	.word	0x0800add9
 800ad94:	0800adc9 	.word	0x0800adc9
 800ad98:	0800add9 	.word	0x0800add9
 800ad9c:	0800add9 	.word	0x0800add9
 800ada0:	0800add9 	.word	0x0800add9
 800ada4:	0800adc1 	.word	0x0800adc1
 800ada8:	0800add9 	.word	0x0800add9
 800adac:	0800add9 	.word	0x0800add9
 800adb0:	0800add9 	.word	0x0800add9
 800adb4:	0800add1 	.word	0x0800add1
 800adb8:	2300      	movs	r3, #0
 800adba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adbe:	e042      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800adc0:	2302      	movs	r3, #2
 800adc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adc6:	e03e      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800adc8:	2304      	movs	r3, #4
 800adca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adce:	e03a      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800add0:	2308      	movs	r3, #8
 800add2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800add6:	e036      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800add8:	2310      	movs	r3, #16
 800adda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800adde:	e032      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a43      	ldr	r2, [pc, #268]	; (800aef4 <UART_SetConfig+0x284>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d12a      	bne.n	800ae40 <UART_SetConfig+0x1d0>
 800adea:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800adee:	f7ff fad1 	bl	800a394 <LL_RCC_GetLPUARTClockSource>
 800adf2:	4603      	mov	r3, r0
 800adf4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800adf8:	d01a      	beq.n	800ae30 <UART_SetConfig+0x1c0>
 800adfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800adfe:	d81b      	bhi.n	800ae38 <UART_SetConfig+0x1c8>
 800ae00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae04:	d00c      	beq.n	800ae20 <UART_SetConfig+0x1b0>
 800ae06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae0a:	d815      	bhi.n	800ae38 <UART_SetConfig+0x1c8>
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d003      	beq.n	800ae18 <UART_SetConfig+0x1a8>
 800ae10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae14:	d008      	beq.n	800ae28 <UART_SetConfig+0x1b8>
 800ae16:	e00f      	b.n	800ae38 <UART_SetConfig+0x1c8>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae1e:	e012      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ae20:	2302      	movs	r3, #2
 800ae22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae26:	e00e      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ae28:	2304      	movs	r3, #4
 800ae2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae2e:	e00a      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ae30:	2308      	movs	r3, #8
 800ae32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae36:	e006      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ae38:	2310      	movs	r3, #16
 800ae3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae3e:	e002      	b.n	800ae46 <UART_SetConfig+0x1d6>
 800ae40:	2310      	movs	r3, #16
 800ae42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a2a      	ldr	r2, [pc, #168]	; (800aef4 <UART_SetConfig+0x284>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	f040 80a4 	bne.w	800af9a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ae52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae56:	2b08      	cmp	r3, #8
 800ae58:	d823      	bhi.n	800aea2 <UART_SetConfig+0x232>
 800ae5a:	a201      	add	r2, pc, #4	; (adr r2, 800ae60 <UART_SetConfig+0x1f0>)
 800ae5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae60:	0800ae85 	.word	0x0800ae85
 800ae64:	0800aea3 	.word	0x0800aea3
 800ae68:	0800ae8d 	.word	0x0800ae8d
 800ae6c:	0800aea3 	.word	0x0800aea3
 800ae70:	0800ae93 	.word	0x0800ae93
 800ae74:	0800aea3 	.word	0x0800aea3
 800ae78:	0800aea3 	.word	0x0800aea3
 800ae7c:	0800aea3 	.word	0x0800aea3
 800ae80:	0800ae9b 	.word	0x0800ae9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae84:	f7fd ff4a 	bl	8008d1c <HAL_RCC_GetPCLK1Freq>
 800ae88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae8a:	e010      	b.n	800aeae <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae8c:	4b1c      	ldr	r3, [pc, #112]	; (800af00 <UART_SetConfig+0x290>)
 800ae8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae90:	e00d      	b.n	800aeae <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae92:	f7fd fe8f 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 800ae96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae98:	e009      	b.n	800aeae <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aea0:	e005      	b.n	800aeae <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aeac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f000 8137 	beq.w	800b124 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	4a12      	ldr	r2, [pc, #72]	; (800af04 <UART_SetConfig+0x294>)
 800aebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aec0:	461a      	mov	r2, r3
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aec8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	4613      	mov	r3, r2
 800aed0:	005b      	lsls	r3, r3, #1
 800aed2:	4413      	add	r3, r2
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d305      	bcc.n	800aee6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aee0:	69ba      	ldr	r2, [r7, #24]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d910      	bls.n	800af08 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aeec:	e11a      	b.n	800b124 <UART_SetConfig+0x4b4>
 800aeee:	bf00      	nop
 800aef0:	cfff69f3 	.word	0xcfff69f3
 800aef4:	40008000 	.word	0x40008000
 800aef8:	40013800 	.word	0x40013800
 800aefc:	40004400 	.word	0x40004400
 800af00:	00f42400 	.word	0x00f42400
 800af04:	080209d4 	.word	0x080209d4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	2200      	movs	r2, #0
 800af0c:	60bb      	str	r3, [r7, #8]
 800af0e:	60fa      	str	r2, [r7, #12]
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	4a8e      	ldr	r2, [pc, #568]	; (800b150 <UART_SetConfig+0x4e0>)
 800af16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	2200      	movs	r2, #0
 800af1e:	603b      	str	r3, [r7, #0]
 800af20:	607a      	str	r2, [r7, #4]
 800af22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800af2a:	f7f6 f89f 	bl	800106c <__aeabi_uldivmod>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4610      	mov	r0, r2
 800af34:	4619      	mov	r1, r3
 800af36:	f04f 0200 	mov.w	r2, #0
 800af3a:	f04f 0300 	mov.w	r3, #0
 800af3e:	020b      	lsls	r3, r1, #8
 800af40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af44:	0202      	lsls	r2, r0, #8
 800af46:	6979      	ldr	r1, [r7, #20]
 800af48:	6849      	ldr	r1, [r1, #4]
 800af4a:	0849      	lsrs	r1, r1, #1
 800af4c:	2000      	movs	r0, #0
 800af4e:	460c      	mov	r4, r1
 800af50:	4605      	mov	r5, r0
 800af52:	eb12 0804 	adds.w	r8, r2, r4
 800af56:	eb43 0905 	adc.w	r9, r3, r5
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	469a      	mov	sl, r3
 800af62:	4693      	mov	fp, r2
 800af64:	4652      	mov	r2, sl
 800af66:	465b      	mov	r3, fp
 800af68:	4640      	mov	r0, r8
 800af6a:	4649      	mov	r1, r9
 800af6c:	f7f6 f87e 	bl	800106c <__aeabi_uldivmod>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4613      	mov	r3, r2
 800af76:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af7e:	d308      	bcc.n	800af92 <UART_SetConfig+0x322>
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af86:	d204      	bcs.n	800af92 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	6a3a      	ldr	r2, [r7, #32]
 800af8e:	60da      	str	r2, [r3, #12]
 800af90:	e0c8      	b.n	800b124 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800af98:	e0c4      	b.n	800b124 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	69db      	ldr	r3, [r3, #28]
 800af9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afa2:	d167      	bne.n	800b074 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800afa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afa8:	2b08      	cmp	r3, #8
 800afaa:	d828      	bhi.n	800affe <UART_SetConfig+0x38e>
 800afac:	a201      	add	r2, pc, #4	; (adr r2, 800afb4 <UART_SetConfig+0x344>)
 800afae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb2:	bf00      	nop
 800afb4:	0800afd9 	.word	0x0800afd9
 800afb8:	0800afe1 	.word	0x0800afe1
 800afbc:	0800afe9 	.word	0x0800afe9
 800afc0:	0800afff 	.word	0x0800afff
 800afc4:	0800afef 	.word	0x0800afef
 800afc8:	0800afff 	.word	0x0800afff
 800afcc:	0800afff 	.word	0x0800afff
 800afd0:	0800afff 	.word	0x0800afff
 800afd4:	0800aff7 	.word	0x0800aff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afd8:	f7fd fea0 	bl	8008d1c <HAL_RCC_GetPCLK1Freq>
 800afdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afde:	e014      	b.n	800b00a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afe0:	f7fd feae 	bl	8008d40 <HAL_RCC_GetPCLK2Freq>
 800afe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afe6:	e010      	b.n	800b00a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afe8:	4b5a      	ldr	r3, [pc, #360]	; (800b154 <UART_SetConfig+0x4e4>)
 800afea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800afec:	e00d      	b.n	800b00a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afee:	f7fd fde1 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 800aff2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aff4:	e009      	b.n	800b00a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800affc:	e005      	b.n	800b00a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b008:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 8089 	beq.w	800b124 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b016:	4a4e      	ldr	r2, [pc, #312]	; (800b150 <UART_SetConfig+0x4e0>)
 800b018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b01c:	461a      	mov	r2, r3
 800b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b020:	fbb3 f3f2 	udiv	r3, r3, r2
 800b024:	005a      	lsls	r2, r3, #1
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	085b      	lsrs	r3, r3, #1
 800b02c:	441a      	add	r2, r3
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	fbb2 f3f3 	udiv	r3, r2, r3
 800b036:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b038:	6a3b      	ldr	r3, [r7, #32]
 800b03a:	2b0f      	cmp	r3, #15
 800b03c:	d916      	bls.n	800b06c <UART_SetConfig+0x3fc>
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b044:	d212      	bcs.n	800b06c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	b29b      	uxth	r3, r3
 800b04a:	f023 030f 	bic.w	r3, r3, #15
 800b04e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b050:	6a3b      	ldr	r3, [r7, #32]
 800b052:	085b      	lsrs	r3, r3, #1
 800b054:	b29b      	uxth	r3, r3
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	b29a      	uxth	r2, r3
 800b05c:	8bfb      	ldrh	r3, [r7, #30]
 800b05e:	4313      	orrs	r3, r2
 800b060:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	8bfa      	ldrh	r2, [r7, #30]
 800b068:	60da      	str	r2, [r3, #12]
 800b06a:	e05b      	b.n	800b124 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b072:	e057      	b.n	800b124 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b074:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b078:	2b08      	cmp	r3, #8
 800b07a:	d828      	bhi.n	800b0ce <UART_SetConfig+0x45e>
 800b07c:	a201      	add	r2, pc, #4	; (adr r2, 800b084 <UART_SetConfig+0x414>)
 800b07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b082:	bf00      	nop
 800b084:	0800b0a9 	.word	0x0800b0a9
 800b088:	0800b0b1 	.word	0x0800b0b1
 800b08c:	0800b0b9 	.word	0x0800b0b9
 800b090:	0800b0cf 	.word	0x0800b0cf
 800b094:	0800b0bf 	.word	0x0800b0bf
 800b098:	0800b0cf 	.word	0x0800b0cf
 800b09c:	0800b0cf 	.word	0x0800b0cf
 800b0a0:	0800b0cf 	.word	0x0800b0cf
 800b0a4:	0800b0c7 	.word	0x0800b0c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0a8:	f7fd fe38 	bl	8008d1c <HAL_RCC_GetPCLK1Freq>
 800b0ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0ae:	e014      	b.n	800b0da <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b0b0:	f7fd fe46 	bl	8008d40 <HAL_RCC_GetPCLK2Freq>
 800b0b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0b6:	e010      	b.n	800b0da <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0b8:	4b26      	ldr	r3, [pc, #152]	; (800b154 <UART_SetConfig+0x4e4>)
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0bc:	e00d      	b.n	800b0da <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0be:	f7fd fd79 	bl	8008bb4 <HAL_RCC_GetSysClockFreq>
 800b0c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0c4:	e009      	b.n	800b0da <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0cc:	e005      	b.n	800b0da <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b0d8:	bf00      	nop
    }

    if (pclk != 0U)
 800b0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d021      	beq.n	800b124 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e4:	4a1a      	ldr	r2, [pc, #104]	; (800b150 <UART_SetConfig+0x4e0>)
 800b0e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	fbb3 f2f2 	udiv	r2, r3, r2
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	085b      	lsrs	r3, r3, #1
 800b0f8:	441a      	add	r2, r3
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b102:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	2b0f      	cmp	r3, #15
 800b108:	d909      	bls.n	800b11e <UART_SetConfig+0x4ae>
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b110:	d205      	bcs.n	800b11e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	b29a      	uxth	r2, r3
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	60da      	str	r2, [r3, #12]
 800b11c:	e002      	b.n	800b124 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	2201      	movs	r2, #1
 800b128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	2201      	movs	r2, #1
 800b130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	2200      	movs	r2, #0
 800b138:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2200      	movs	r2, #0
 800b13e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b140:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b144:	4618      	mov	r0, r3
 800b146:	3730      	adds	r7, #48	; 0x30
 800b148:	46bd      	mov	sp, r7
 800b14a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b14e:	bf00      	nop
 800b150:	080209d4 	.word	0x080209d4
 800b154:	00f42400 	.word	0x00f42400

0800b158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00a      	beq.n	800b182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b186:	f003 0302 	and.w	r3, r3, #2
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00a      	beq.n	800b1c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	430a      	orrs	r2, r1
 800b1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ca:	f003 0308 	and.w	r3, r3, #8
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00a      	beq.n	800b1e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	430a      	orrs	r2, r1
 800b1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ec:	f003 0310 	and.w	r3, r3, #16
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00a      	beq.n	800b20a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	430a      	orrs	r2, r1
 800b208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b20e:	f003 0320 	and.w	r3, r3, #32
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00a      	beq.n	800b22c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	430a      	orrs	r2, r1
 800b22a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b234:	2b00      	cmp	r3, #0
 800b236:	d01a      	beq.n	800b26e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	430a      	orrs	r2, r1
 800b24c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b256:	d10a      	bne.n	800b26e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	430a      	orrs	r2, r1
 800b26c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	430a      	orrs	r2, r1
 800b28e:	605a      	str	r2, [r3, #4]
  }
}
 800b290:	bf00      	nop
 800b292:	370c      	adds	r7, #12
 800b294:	46bd      	mov	sp, r7
 800b296:	bc80      	pop	{r7}
 800b298:	4770      	bx	lr

0800b29a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b086      	sub	sp, #24
 800b29e:	af02      	add	r7, sp, #8
 800b2a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2aa:	f7f7 f8ff 	bl	80024ac <HAL_GetTick>
 800b2ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0308 	and.w	r3, r3, #8
 800b2ba:	2b08      	cmp	r3, #8
 800b2bc:	d10e      	bne.n	800b2dc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f832 	bl	800b336 <UART_WaitOnFlagUntilTimeout>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e028      	b.n	800b32e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 0304 	and.w	r3, r3, #4
 800b2e6:	2b04      	cmp	r3, #4
 800b2e8:	d10e      	bne.n	800b308 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f81c 	bl	800b336 <UART_WaitOnFlagUntilTimeout>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e012      	b.n	800b32e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2220      	movs	r2, #32
 800b30c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2220      	movs	r2, #32
 800b314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2200      	movs	r2, #0
 800b322:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b09c      	sub	sp, #112	; 0x70
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	603b      	str	r3, [r7, #0]
 800b342:	4613      	mov	r3, r2
 800b344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b346:	e0a9      	b.n	800b49c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b34a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b34e:	f000 80a5 	beq.w	800b49c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b352:	f7f7 f8ab 	bl	80024ac <HAL_GetTick>
 800b356:	4602      	mov	r2, r0
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b35e:	429a      	cmp	r2, r3
 800b360:	d302      	bcc.n	800b368 <UART_WaitOnFlagUntilTimeout+0x32>
 800b362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b364:	2b00      	cmp	r3, #0
 800b366:	d140      	bne.n	800b3ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b370:	e853 3f00 	ldrex	r3, [r3]
 800b374:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b378:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b37c:	667b      	str	r3, [r7, #100]	; 0x64
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	461a      	mov	r2, r3
 800b384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b386:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b388:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b38c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e6      	bne.n	800b368 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a4:	e853 3f00 	ldrex	r3, [r3]
 800b3a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	f023 0301 	bic.w	r3, r3, #1
 800b3b0:	663b      	str	r3, [r7, #96]	; 0x60
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800b3bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3c2:	e841 2300 	strex	r3, r2, [r1]
 800b3c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d1e5      	bne.n	800b39a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2220      	movs	r2, #32
 800b3d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800b3e6:	2303      	movs	r3, #3
 800b3e8:	e069      	b.n	800b4be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 0304 	and.w	r3, r3, #4
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d051      	beq.n	800b49c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b406:	d149      	bne.n	800b49c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b410:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41a:	e853 3f00 	ldrex	r3, [r3]
 800b41e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b426:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	461a      	mov	r2, r3
 800b42e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b430:	637b      	str	r3, [r7, #52]	; 0x34
 800b432:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e6      	bne.n	800b412 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3308      	adds	r3, #8
 800b44a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	e853 3f00 	ldrex	r3, [r3]
 800b452:	613b      	str	r3, [r7, #16]
   return(result);
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	f023 0301 	bic.w	r3, r3, #1
 800b45a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3308      	adds	r3, #8
 800b462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b464:	623a      	str	r2, [r7, #32]
 800b466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b468:	69f9      	ldr	r1, [r7, #28]
 800b46a:	6a3a      	ldr	r2, [r7, #32]
 800b46c:	e841 2300 	strex	r3, r2, [r1]
 800b470:	61bb      	str	r3, [r7, #24]
   return(result);
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1e5      	bne.n	800b444 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2220      	movs	r2, #32
 800b47c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2220      	movs	r2, #32
 800b484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2220      	movs	r2, #32
 800b48c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e010      	b.n	800b4be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	69da      	ldr	r2, [r3, #28]
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	68ba      	ldr	r2, [r7, #8]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	bf0c      	ite	eq
 800b4ac:	2301      	moveq	r3, #1
 800b4ae:	2300      	movne	r3, #0
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	79fb      	ldrb	r3, [r7, #7]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	f43f af46 	beq.w	800b348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3770      	adds	r7, #112	; 0x70
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b0a3      	sub	sp, #140	; 0x8c
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	88fa      	ldrh	r2, [r7, #6]
 800b4e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	88fa      	ldrh	r2, [r7, #6]
 800b4e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4fa:	d10e      	bne.n	800b51a <UART_Start_Receive_IT+0x52>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d105      	bne.n	800b510 <UART_Start_Receive_IT+0x48>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b50a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b50e:	e02d      	b.n	800b56c <UART_Start_Receive_IT+0xa4>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	22ff      	movs	r2, #255	; 0xff
 800b514:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b518:	e028      	b.n	800b56c <UART_Start_Receive_IT+0xa4>
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	689b      	ldr	r3, [r3, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10d      	bne.n	800b53e <UART_Start_Receive_IT+0x76>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d104      	bne.n	800b534 <UART_Start_Receive_IT+0x6c>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	22ff      	movs	r2, #255	; 0xff
 800b52e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b532:	e01b      	b.n	800b56c <UART_Start_Receive_IT+0xa4>
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	227f      	movs	r2, #127	; 0x7f
 800b538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b53c:	e016      	b.n	800b56c <UART_Start_Receive_IT+0xa4>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b546:	d10d      	bne.n	800b564 <UART_Start_Receive_IT+0x9c>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d104      	bne.n	800b55a <UART_Start_Receive_IT+0x92>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	227f      	movs	r2, #127	; 0x7f
 800b554:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b558:	e008      	b.n	800b56c <UART_Start_Receive_IT+0xa4>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	223f      	movs	r2, #63	; 0x3f
 800b55e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b562:	e003      	b.n	800b56c <UART_Start_Receive_IT+0xa4>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2200      	movs	r2, #0
 800b568:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2200      	movs	r2, #0
 800b570:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2222      	movs	r2, #34	; 0x22
 800b578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3308      	adds	r3, #8
 800b582:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b584:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b586:	e853 3f00 	ldrex	r3, [r3]
 800b58a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b58c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b58e:	f043 0301 	orr.w	r3, r3, #1
 800b592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3308      	adds	r3, #8
 800b59c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b5a0:	673a      	str	r2, [r7, #112]	; 0x70
 800b5a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b5a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b5a8:	e841 2300 	strex	r3, r2, [r1]
 800b5ac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b5ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e3      	bne.n	800b57c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b5b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5bc:	d14f      	bne.n	800b65e <UART_Start_Receive_IT+0x196>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5c4:	88fa      	ldrh	r2, [r7, #6]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d349      	bcc.n	800b65e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d2:	d107      	bne.n	800b5e4 <UART_Start_Receive_IT+0x11c>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	691b      	ldr	r3, [r3, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	4a46      	ldr	r2, [pc, #280]	; (800b6f8 <UART_Start_Receive_IT+0x230>)
 800b5e0:	675a      	str	r2, [r3, #116]	; 0x74
 800b5e2:	e002      	b.n	800b5ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	4a45      	ldr	r2, [pc, #276]	; (800b6fc <UART_Start_Receive_IT+0x234>)
 800b5e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d01a      	beq.n	800b628 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5fa:	e853 3f00 	ldrex	r3, [r3]
 800b5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	461a      	mov	r2, r3
 800b610:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b614:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b616:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b618:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b61a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b61c:	e841 2300 	strex	r3, r2, [r1]
 800b620:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1e4      	bne.n	800b5f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3308      	adds	r3, #8
 800b62e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b632:	e853 3f00 	ldrex	r3, [r3]
 800b636:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b63e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3308      	adds	r3, #8
 800b646:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b648:	64ba      	str	r2, [r7, #72]	; 0x48
 800b64a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b64e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b650:	e841 2300 	strex	r3, r2, [r1]
 800b654:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1e5      	bne.n	800b628 <UART_Start_Receive_IT+0x160>
 800b65c:	e046      	b.n	800b6ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b666:	d107      	bne.n	800b678 <UART_Start_Receive_IT+0x1b0>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d103      	bne.n	800b678 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	4a23      	ldr	r2, [pc, #140]	; (800b700 <UART_Start_Receive_IT+0x238>)
 800b674:	675a      	str	r2, [r3, #116]	; 0x74
 800b676:	e002      	b.n	800b67e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	4a22      	ldr	r2, [pc, #136]	; (800b704 <UART_Start_Receive_IT+0x23c>)
 800b67c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d019      	beq.n	800b6ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	e853 3f00 	ldrex	r3, [r3]
 800b692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b69a:	677b      	str	r3, [r7, #116]	; 0x74
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6a4:	637b      	str	r3, [r7, #52]	; 0x34
 800b6a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b6aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6ac:	e841 2300 	strex	r3, r2, [r1]
 800b6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1e6      	bne.n	800b686 <UART_Start_Receive_IT+0x1be>
 800b6b8:	e018      	b.n	800b6ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	e853 3f00 	ldrex	r3, [r3]
 800b6c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	f043 0320 	orr.w	r3, r3, #32
 800b6ce:	67bb      	str	r3, [r7, #120]	; 0x78
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6d8:	623b      	str	r3, [r7, #32]
 800b6da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6dc:	69f9      	ldr	r1, [r7, #28]
 800b6de:	6a3a      	ldr	r2, [r7, #32]
 800b6e0:	e841 2300 	strex	r3, r2, [r1]
 800b6e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1e6      	bne.n	800b6ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	378c      	adds	r7, #140	; 0x8c
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bc80      	pop	{r7}
 800b6f6:	4770      	bx	lr
 800b6f8:	0800c0dd 	.word	0x0800c0dd
 800b6fc:	0800bd7d 	.word	0x0800bd7d
 800b700:	0800bbc5 	.word	0x0800bbc5
 800b704:	0800ba0d 	.word	0x0800ba0d

0800b708 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b708:	b480      	push	{r7}
 800b70a:	b08f      	sub	sp, #60	; 0x3c
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b724:	637b      	str	r3, [r7, #52]	; 0x34
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b730:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b736:	e841 2300 	strex	r3, r2, [r1]
 800b73a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1e6      	bne.n	800b710 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3308      	adds	r3, #8
 800b748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	e853 3f00 	ldrex	r3, [r3]
 800b750:	60bb      	str	r3, [r7, #8]
   return(result);
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b758:	633b      	str	r3, [r7, #48]	; 0x30
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	3308      	adds	r3, #8
 800b760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b762:	61ba      	str	r2, [r7, #24]
 800b764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b766:	6979      	ldr	r1, [r7, #20]
 800b768:	69ba      	ldr	r2, [r7, #24]
 800b76a:	e841 2300 	strex	r3, r2, [r1]
 800b76e:	613b      	str	r3, [r7, #16]
   return(result);
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1e5      	bne.n	800b742 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2220      	movs	r2, #32
 800b77a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800b77e:	bf00      	nop
 800b780:	373c      	adds	r7, #60	; 0x3c
 800b782:	46bd      	mov	sp, r7
 800b784:	bc80      	pop	{r7}
 800b786:	4770      	bx	lr

0800b788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b788:	b480      	push	{r7}
 800b78a:	b095      	sub	sp, #84	; 0x54
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b798:	e853 3f00 	ldrex	r3, [r3]
 800b79c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ae:	643b      	str	r3, [r7, #64]	; 0x40
 800b7b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7b6:	e841 2300 	strex	r3, r2, [r1]
 800b7ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1e6      	bne.n	800b790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ca:	6a3b      	ldr	r3, [r7, #32]
 800b7cc:	e853 3f00 	ldrex	r3, [r3]
 800b7d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7d8:	f023 0301 	bic.w	r3, r3, #1
 800b7dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	3308      	adds	r3, #8
 800b7e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b7e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ee:	e841 2300 	strex	r3, r2, [r1]
 800b7f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d1e3      	bne.n	800b7c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d118      	bne.n	800b834 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	e853 3f00 	ldrex	r3, [r3]
 800b80e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f023 0310 	bic.w	r3, r3, #16
 800b816:	647b      	str	r3, [r7, #68]	; 0x44
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	461a      	mov	r2, r3
 800b81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b820:	61bb      	str	r3, [r7, #24]
 800b822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b824:	6979      	ldr	r1, [r7, #20]
 800b826:	69ba      	ldr	r2, [r7, #24]
 800b828:	e841 2300 	strex	r3, r2, [r1]
 800b82c:	613b      	str	r3, [r7, #16]
   return(result);
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1e6      	bne.n	800b802 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2220      	movs	r2, #32
 800b838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b848:	bf00      	nop
 800b84a:	3754      	adds	r7, #84	; 0x54
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bc80      	pop	{r7}
 800b850:	4770      	bx	lr

0800b852 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b090      	sub	sp, #64	; 0x40
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b85e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0320 	and.w	r3, r3, #32
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d137      	bne.n	800b8de <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b870:	2200      	movs	r2, #0
 800b872:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3308      	adds	r3, #8
 800b87c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	623b      	str	r3, [r7, #32]
   return(result);
 800b886:	6a3b      	ldr	r3, [r7, #32]
 800b888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b88c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b88e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3308      	adds	r3, #8
 800b894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b896:	633a      	str	r2, [r7, #48]	; 0x30
 800b898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e5      	bne.n	800b876 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	e853 3f00 	ldrex	r3, [r3]
 800b8b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8be:	637b      	str	r3, [r7, #52]	; 0x34
 800b8c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8c8:	61fb      	str	r3, [r7, #28]
 800b8ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8cc:	69b9      	ldr	r1, [r7, #24]
 800b8ce:	69fa      	ldr	r2, [r7, #28]
 800b8d0:	e841 2300 	strex	r3, r2, [r1]
 800b8d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d1e6      	bne.n	800b8aa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b8dc:	e002      	b.n	800b8e4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b8de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b8e0:	f7f7 fad2 	bl	8002e88 <HAL_UART_TxCpltCallback>
}
 800b8e4:	bf00      	nop
 800b8e6:	3740      	adds	r7, #64	; 0x40
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f7ff f99a 	bl	800ac34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b914:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b91c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b924:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b930:	2b80      	cmp	r3, #128	; 0x80
 800b932:	d109      	bne.n	800b948 <UART_DMAError+0x40>
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	2b21      	cmp	r3, #33	; 0x21
 800b938:	d106      	bne.n	800b948 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b942:	6978      	ldr	r0, [r7, #20]
 800b944:	f7ff fee0 	bl	800b708 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b952:	2b40      	cmp	r3, #64	; 0x40
 800b954:	d109      	bne.n	800b96a <UART_DMAError+0x62>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2b22      	cmp	r3, #34	; 0x22
 800b95a:	d106      	bne.n	800b96a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2200      	movs	r2, #0
 800b960:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b964:	6978      	ldr	r0, [r7, #20]
 800b966:	f7ff ff0f 	bl	800b788 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b970:	f043 0210 	orr.w	r2, r3, #16
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b97a:	6978      	ldr	r0, [r7, #20]
 800b97c:	f7ff f963 	bl	800ac46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b980:	bf00      	nop
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f7ff f94d 	bl	800ac46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9ac:	bf00      	nop
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b088      	sub	sp, #32
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9d0:	61fb      	str	r3, [r7, #28]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	61bb      	str	r3, [r7, #24]
 800b9dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9de:	6979      	ldr	r1, [r7, #20]
 800b9e0:	69ba      	ldr	r2, [r7, #24]
 800b9e2:	e841 2300 	strex	r3, r2, [r1]
 800b9e6:	613b      	str	r3, [r7, #16]
   return(result);
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1e6      	bne.n	800b9bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2220      	movs	r2, #32
 800b9f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7f7 fa43 	bl	8002e88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba02:	bf00      	nop
 800ba04:	3720      	adds	r7, #32
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b09c      	sub	sp, #112	; 0x70
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba24:	2b22      	cmp	r3, #34	; 0x22
 800ba26:	f040 80be 	bne.w	800bba6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba38:	b2d9      	uxtb	r1, r3
 800ba3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba44:	400a      	ands	r2, r1
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	f040 80a1 	bne.w	800bbb6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7c:	e853 3f00 	ldrex	r3, [r3]
 800ba80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba88:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba92:	65bb      	str	r3, [r7, #88]	; 0x58
 800ba94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba9a:	e841 2300 	strex	r3, r2, [r1]
 800ba9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800baa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1e6      	bne.n	800ba74 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3308      	adds	r3, #8
 800baac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab0:	e853 3f00 	ldrex	r3, [r3]
 800bab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bab8:	f023 0301 	bic.w	r3, r3, #1
 800babc:	667b      	str	r3, [r7, #100]	; 0x64
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3308      	adds	r3, #8
 800bac4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bac6:	647a      	str	r2, [r7, #68]	; 0x44
 800bac8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bacc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bace:	e841 2300 	strex	r3, r2, [r1]
 800bad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1e5      	bne.n	800baa6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2220      	movs	r2, #32
 800bade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	4a33      	ldr	r2, [pc, #204]	; (800bbc0 <UART_RxISR_8BIT+0x1b4>)
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d01f      	beq.n	800bb38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d018      	beq.n	800bb38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0e:	e853 3f00 	ldrex	r3, [r3]
 800bb12:	623b      	str	r3, [r7, #32]
   return(result);
 800bb14:	6a3b      	ldr	r3, [r7, #32]
 800bb16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb1a:	663b      	str	r3, [r7, #96]	; 0x60
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	461a      	mov	r2, r3
 800bb22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb24:	633b      	str	r3, [r7, #48]	; 0x30
 800bb26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb2c:	e841 2300 	strex	r3, r2, [r1]
 800bb30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1e6      	bne.n	800bb06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d12e      	bne.n	800bb9e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	e853 3f00 	ldrex	r3, [r3]
 800bb52:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f023 0310 	bic.w	r3, r3, #16
 800bb5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	461a      	mov	r2, r3
 800bb62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb64:	61fb      	str	r3, [r7, #28]
 800bb66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb68:	69b9      	ldr	r1, [r7, #24]
 800bb6a:	69fa      	ldr	r2, [r7, #28]
 800bb6c:	e841 2300 	strex	r3, r2, [r1]
 800bb70:	617b      	str	r3, [r7, #20]
   return(result);
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e6      	bne.n	800bb46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	f003 0310 	and.w	r3, r3, #16
 800bb82:	2b10      	cmp	r3, #16
 800bb84:	d103      	bne.n	800bb8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2210      	movs	r2, #16
 800bb8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f7ff f85e 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb9c:	e00b      	b.n	800bbb6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7f7 f988 	bl	8002eb4 <HAL_UART_RxCpltCallback>
}
 800bba4:	e007      	b.n	800bbb6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	699a      	ldr	r2, [r3, #24]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f042 0208 	orr.w	r2, r2, #8
 800bbb4:	619a      	str	r2, [r3, #24]
}
 800bbb6:	bf00      	nop
 800bbb8:	3770      	adds	r7, #112	; 0x70
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
 800bbbe:	bf00      	nop
 800bbc0:	40008000 	.word	0x40008000

0800bbc4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b09c      	sub	sp, #112	; 0x70
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbd2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbdc:	2b22      	cmp	r3, #34	; 0x22
 800bbde:	f040 80be 	bne.w	800bd5e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbe8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bbf2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800bbf6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc06:	1c9a      	adds	r2, r3, #2
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	3b01      	subs	r3, #1
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f040 80a1 	bne.w	800bd6e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc34:	e853 3f00 	ldrex	r3, [r3]
 800bc38:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bc3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc40:	667b      	str	r3, [r7, #100]	; 0x64
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	461a      	mov	r2, r3
 800bc48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc4a:	657b      	str	r3, [r7, #84]	; 0x54
 800bc4c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc52:	e841 2300 	strex	r3, r2, [r1]
 800bc56:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1e6      	bne.n	800bc2c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3308      	adds	r3, #8
 800bc64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc68:	e853 3f00 	ldrex	r3, [r3]
 800bc6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	f023 0301 	bic.w	r3, r3, #1
 800bc74:	663b      	str	r3, [r7, #96]	; 0x60
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc7e:	643a      	str	r2, [r7, #64]	; 0x40
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc86:	e841 2300 	strex	r3, r2, [r1]
 800bc8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1e5      	bne.n	800bc5e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2220      	movs	r2, #32
 800bc96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a33      	ldr	r2, [pc, #204]	; (800bd78 <UART_RxISR_16BIT+0x1b4>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d01f      	beq.n	800bcf0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d018      	beq.n	800bcf0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	e853 3f00 	ldrex	r3, [r3]
 800bcca:	61fb      	str	r3, [r7, #28]
   return(result);
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	461a      	mov	r2, r3
 800bcda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcde:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bce4:	e841 2300 	strex	r3, r2, [r1]
 800bce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d1e6      	bne.n	800bcbe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d12e      	bne.n	800bd56 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	f023 0310 	bic.w	r3, r3, #16
 800bd12:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bd1c:	61bb      	str	r3, [r7, #24]
 800bd1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6979      	ldr	r1, [r7, #20]
 800bd22:	69ba      	ldr	r2, [r7, #24]
 800bd24:	e841 2300 	strex	r3, r2, [r1]
 800bd28:	613b      	str	r3, [r7, #16]
   return(result);
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e6      	bne.n	800bcfe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	f003 0310 	and.w	r3, r3, #16
 800bd3a:	2b10      	cmp	r3, #16
 800bd3c:	d103      	bne.n	800bd46 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	2210      	movs	r2, #16
 800bd44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f7fe ff82 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd54:	e00b      	b.n	800bd6e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f7f7 f8ac 	bl	8002eb4 <HAL_UART_RxCpltCallback>
}
 800bd5c:	e007      	b.n	800bd6e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	699a      	ldr	r2, [r3, #24]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f042 0208 	orr.w	r2, r2, #8
 800bd6c:	619a      	str	r2, [r3, #24]
}
 800bd6e:	bf00      	nop
 800bd70:	3770      	adds	r7, #112	; 0x70
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	40008000 	.word	0x40008000

0800bd7c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b0ac      	sub	sp, #176	; 0xb0
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd8a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	69db      	ldr	r3, [r3, #28]
 800bd94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdb2:	2b22      	cmp	r3, #34	; 0x22
 800bdb4:	f040 8182 	bne.w	800c0bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bdbe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bdc2:	e125      	b.n	800c010 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdca:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bdce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800bdd2:	b2d9      	uxtb	r1, r3
 800bdd4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdde:	400a      	ands	r2, r1
 800bde0:	b2d2      	uxtb	r2, r2
 800bde2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bde8:	1c5a      	adds	r2, r3, #1
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	b29a      	uxth	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be0e:	f003 0307 	and.w	r3, r3, #7
 800be12:	2b00      	cmp	r3, #0
 800be14:	d053      	beq.n	800bebe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be1a:	f003 0301 	and.w	r3, r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d011      	beq.n	800be46 <UART_RxISR_8BIT_FIFOEN+0xca>
 800be22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800be26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00b      	beq.n	800be46 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2201      	movs	r2, #1
 800be34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be3c:	f043 0201 	orr.w	r2, r3, #1
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be4a:	f003 0302 	and.w	r3, r3, #2
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d011      	beq.n	800be76 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800be52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00b      	beq.n	800be76 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2202      	movs	r2, #2
 800be64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be6c:	f043 0204 	orr.w	r2, r3, #4
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be7a:	f003 0304 	and.w	r3, r3, #4
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d011      	beq.n	800bea6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800be82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d00b      	beq.n	800bea6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	2204      	movs	r2, #4
 800be94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be9c:	f043 0202 	orr.w	r2, r3, #2
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beac:	2b00      	cmp	r3, #0
 800beae:	d006      	beq.n	800bebe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7fe fec8 	bl	800ac46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f040 80a2 	bne.w	800c010 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bed4:	e853 3f00 	ldrex	r3, [r3]
 800bed8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800beda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800beee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bef0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bef4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bef6:	e841 2300 	strex	r3, r2, [r1]
 800befa:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800befc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1e4      	bne.n	800becc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3308      	adds	r3, #8
 800bf08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf0c:	e853 3f00 	ldrex	r3, [r3]
 800bf10:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bf12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf18:	f023 0301 	bic.w	r3, r3, #1
 800bf1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3308      	adds	r3, #8
 800bf26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf2a:	66ba      	str	r2, [r7, #104]	; 0x68
 800bf2c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bf30:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf32:	e841 2300 	strex	r3, r2, [r1]
 800bf36:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bf38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e1      	bne.n	800bf02 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2220      	movs	r2, #32
 800bf42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4a5f      	ldr	r2, [pc, #380]	; (800c0d4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d021      	beq.n	800bfa0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d01a      	beq.n	800bfa0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf72:	e853 3f00 	ldrex	r3, [r3]
 800bf76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bf78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	461a      	mov	r2, r3
 800bf88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf8c:	657b      	str	r3, [r7, #84]	; 0x54
 800bf8e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf94:	e841 2300 	strex	r3, r2, [r1]
 800bf98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bf9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1e4      	bne.n	800bf6a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d130      	bne.n	800c00a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfb6:	e853 3f00 	ldrex	r3, [r3]
 800bfba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	f023 0310 	bic.w	r3, r3, #16
 800bfc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bfd0:	643b      	str	r3, [r7, #64]	; 0x40
 800bfd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bfd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bfd8:	e841 2300 	strex	r3, r2, [r1]
 800bfdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d1e4      	bne.n	800bfae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	69db      	ldr	r3, [r3, #28]
 800bfea:	f003 0310 	and.w	r3, r3, #16
 800bfee:	2b10      	cmp	r3, #16
 800bff0:	d103      	bne.n	800bffa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2210      	movs	r2, #16
 800bff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7fe fe28 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
 800c008:	e002      	b.n	800c010 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7f6 ff52 	bl	8002eb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c010:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c014:	2b00      	cmp	r3, #0
 800c016:	d006      	beq.n	800c026 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c01c:	f003 0320 	and.w	r3, r3, #32
 800c020:	2b00      	cmp	r3, #0
 800c022:	f47f aecf 	bne.w	800bdc4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c02c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c030:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c034:	2b00      	cmp	r3, #0
 800c036:	d049      	beq.n	800c0cc <UART_RxISR_8BIT_FIFOEN+0x350>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c03e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c042:	429a      	cmp	r2, r3
 800c044:	d242      	bcs.n	800c0cc <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3308      	adds	r3, #8
 800c04c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	e853 3f00 	ldrex	r3, [r3]
 800c054:	61fb      	str	r3, [r7, #28]
   return(result);
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c05c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3308      	adds	r3, #8
 800c066:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c06a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c06c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e3      	bne.n	800c046 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a15      	ldr	r2, [pc, #84]	; (800c0d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c082:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	e853 3f00 	ldrex	r3, [r3]
 800c090:	60bb      	str	r3, [r7, #8]
   return(result);
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	f043 0320 	orr.w	r3, r3, #32
 800c098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c0a6:	61bb      	str	r3, [r7, #24]
 800c0a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	6979      	ldr	r1, [r7, #20]
 800c0ac:	69ba      	ldr	r2, [r7, #24]
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	613b      	str	r3, [r7, #16]
   return(result);
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e4      	bne.n	800c084 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c0ba:	e007      	b.n	800c0cc <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	699a      	ldr	r2, [r3, #24]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f042 0208 	orr.w	r2, r2, #8
 800c0ca:	619a      	str	r2, [r3, #24]
}
 800c0cc:	bf00      	nop
 800c0ce:	37b0      	adds	r7, #176	; 0xb0
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	40008000 	.word	0x40008000
 800c0d8:	0800ba0d 	.word	0x0800ba0d

0800c0dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b0ae      	sub	sp, #184	; 0xb8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0ea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	69db      	ldr	r3, [r3, #28]
 800c0f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c112:	2b22      	cmp	r3, #34	; 0x22
 800c114:	f040 8186 	bne.w	800c424 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c11e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c122:	e129      	b.n	800c378 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c136:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c13a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c13e:	4013      	ands	r3, r2
 800c140:	b29a      	uxth	r2, r3
 800c142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c146:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c14c:	1c9a      	adds	r2, r3, #2
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c158:	b29b      	uxth	r3, r3
 800c15a:	3b01      	subs	r3, #1
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	69db      	ldr	r3, [r3, #28]
 800c16a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c16e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c172:	f003 0307 	and.w	r3, r3, #7
 800c176:	2b00      	cmp	r3, #0
 800c178:	d053      	beq.n	800c222 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c17a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c17e:	f003 0301 	and.w	r3, r3, #1
 800c182:	2b00      	cmp	r3, #0
 800c184:	d011      	beq.n	800c1aa <UART_RxISR_16BIT_FIFOEN+0xce>
 800c186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c18a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00b      	beq.n	800c1aa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2201      	movs	r2, #1
 800c198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a0:	f043 0201 	orr.w	r2, r3, #1
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1ae:	f003 0302 	and.w	r3, r3, #2
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d011      	beq.n	800c1da <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c1b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1ba:	f003 0301 	and.w	r3, r3, #1
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d00b      	beq.n	800c1da <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1d0:	f043 0204 	orr.w	r2, r3, #4
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1de:	f003 0304 	and.w	r3, r3, #4
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d011      	beq.n	800c20a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c1e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1ea:	f003 0301 	and.w	r3, r3, #1
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00b      	beq.n	800c20a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c200:	f043 0202 	orr.w	r2, r3, #2
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c210:	2b00      	cmp	r3, #0
 800c212:	d006      	beq.n	800c222 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7fe fd16 	bl	800ac46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c228:	b29b      	uxth	r3, r3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f040 80a4 	bne.w	800c378 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c238:	e853 3f00 	ldrex	r3, [r3]
 800c23c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c23e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c244:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	461a      	mov	r2, r3
 800c24e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c252:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c256:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c258:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c25a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c25e:	e841 2300 	strex	r3, r2, [r1]
 800c262:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1e2      	bne.n	800c230 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	3308      	adds	r3, #8
 800c270:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c274:	e853 3f00 	ldrex	r3, [r3]
 800c278:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c27a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c27c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c280:	f023 0301 	bic.w	r3, r3, #1
 800c284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	3308      	adds	r3, #8
 800c28e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c292:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c294:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c296:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c298:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c29a:	e841 2300 	strex	r3, r2, [r1]
 800c29e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c2a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d1e1      	bne.n	800c26a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2220      	movs	r2, #32
 800c2aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a5f      	ldr	r2, [pc, #380]	; (800c43c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d021      	beq.n	800c308 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d01a      	beq.n	800c308 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2da:	e853 3f00 	ldrex	r3, [r3]
 800c2de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c2e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c2f4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2fc:	e841 2300 	strex	r3, r2, [r1]
 800c300:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e4      	bne.n	800c2d2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d130      	bne.n	800c372 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	e853 3f00 	ldrex	r3, [r3]
 800c322:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c326:	f023 0310 	bic.w	r3, r3, #16
 800c32a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	461a      	mov	r2, r3
 800c334:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c338:	647b      	str	r3, [r7, #68]	; 0x44
 800c33a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c33e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c340:	e841 2300 	strex	r3, r2, [r1]
 800c344:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e4      	bne.n	800c316 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	69db      	ldr	r3, [r3, #28]
 800c352:	f003 0310 	and.w	r3, r3, #16
 800c356:	2b10      	cmp	r3, #16
 800c358:	d103      	bne.n	800c362 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2210      	movs	r2, #16
 800c360:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7fe fc74 	bl	800ac58 <HAL_UARTEx_RxEventCallback>
 800c370:	e002      	b.n	800c378 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7f6 fd9e 	bl	8002eb4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c378:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d006      	beq.n	800c38e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800c380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c384:	f003 0320 	and.w	r3, r3, #32
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f47f aecb 	bne.w	800c124 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c394:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c398:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d049      	beq.n	800c434 <UART_RxISR_16BIT_FIFOEN+0x358>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3a6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d242      	bcs.n	800c434 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b8:	e853 3f00 	ldrex	r3, [r3]
 800c3bc:	623b      	str	r3, [r7, #32]
   return(result);
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3d2:	633a      	str	r2, [r7, #48]	; 0x30
 800c3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3da:	e841 2300 	strex	r3, r2, [r1]
 800c3de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d1e3      	bne.n	800c3ae <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a15      	ldr	r2, [pc, #84]	; (800c440 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c3ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	e853 3f00 	ldrex	r3, [r3]
 800c3f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	f043 0320 	orr.w	r3, r3, #32
 800c400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	461a      	mov	r2, r3
 800c40a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c40e:	61fb      	str	r3, [r7, #28]
 800c410:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c412:	69b9      	ldr	r1, [r7, #24]
 800c414:	69fa      	ldr	r2, [r7, #28]
 800c416:	e841 2300 	strex	r3, r2, [r1]
 800c41a:	617b      	str	r3, [r7, #20]
   return(result);
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1e4      	bne.n	800c3ec <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c422:	e007      	b.n	800c434 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	699a      	ldr	r2, [r3, #24]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f042 0208 	orr.w	r2, r2, #8
 800c432:	619a      	str	r2, [r3, #24]
}
 800c434:	bf00      	nop
 800c436:	37b8      	adds	r7, #184	; 0xb8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	40008000 	.word	0x40008000
 800c440:	0800bbc5 	.word	0x0800bbc5

0800c444 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c444:	b480      	push	{r7}
 800c446:	b083      	sub	sp, #12
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c44c:	bf00      	nop
 800c44e:	370c      	adds	r7, #12
 800c450:	46bd      	mov	sp, r7
 800c452:	bc80      	pop	{r7}
 800c454:	4770      	bx	lr

0800c456 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c456:	b480      	push	{r7}
 800c458:	b083      	sub	sp, #12
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c45e:	bf00      	nop
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	bc80      	pop	{r7}
 800c466:	4770      	bx	lr

0800c468 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c470:	bf00      	nop
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	bc80      	pop	{r7}
 800c478:	4770      	bx	lr

0800c47a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b088      	sub	sp, #32
 800c47e:	af02      	add	r7, sp, #8
 800c480:	60f8      	str	r0, [r7, #12]
 800c482:	1d3b      	adds	r3, r7, #4
 800c484:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c488:	2300      	movs	r3, #0
 800c48a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c492:	2b01      	cmp	r3, #1
 800c494:	d101      	bne.n	800c49a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c496:	2302      	movs	r3, #2
 800c498:	e046      	b.n	800c528 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2201      	movs	r2, #1
 800c49e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2224      	movs	r2, #36	; 0x24
 800c4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	681a      	ldr	r2, [r3, #0]
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f022 0201 	bic.w	r2, r2, #1
 800c4b8:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	430a      	orrs	r2, r1
 800c4cc:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d105      	bne.n	800c4e0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c4d4:	1d3b      	adds	r3, r7, #4
 800c4d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f000 f911 	bl	800c702 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f042 0201 	orr.w	r2, r2, #1
 800c4ee:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4f0:	f7f5 ffdc 	bl	80024ac <HAL_GetTick>
 800c4f4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	2200      	movs	r2, #0
 800c500:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f7fe ff16 	bl	800b336 <UART_WaitOnFlagUntilTimeout>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800c510:	2303      	movs	r3, #3
 800c512:	75fb      	strb	r3, [r7, #23]
 800c514:	e003      	b.n	800c51e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2220      	movs	r2, #32
 800c51a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2200      	movs	r2, #0
 800c522:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800c526:	7dfb      	ldrb	r3, [r7, #23]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3718      	adds	r7, #24
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c530:	b480      	push	{r7}
 800c532:	b089      	sub	sp, #36	; 0x24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d101      	bne.n	800c546 <HAL_UARTEx_EnableStopMode+0x16>
 800c542:	2302      	movs	r3, #2
 800c544:	e021      	b.n	800c58a <HAL_UARTEx_EnableStopMode+0x5a>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	e853 3f00 	ldrex	r3, [r3]
 800c55a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	f043 0302 	orr.w	r3, r3, #2
 800c562:	61fb      	str	r3, [r7, #28]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	461a      	mov	r2, r3
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	61bb      	str	r3, [r7, #24]
 800c56e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c570:	6979      	ldr	r1, [r7, #20]
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	e841 2300 	strex	r3, r2, [r1]
 800c578:	613b      	str	r3, [r7, #16]
   return(result);
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d1e6      	bne.n	800c54e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3724      	adds	r7, #36	; 0x24
 800c58e:	46bd      	mov	sp, r7
 800c590:	bc80      	pop	{r7}
 800c592:	4770      	bx	lr

0800c594 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d101      	bne.n	800c5aa <HAL_UARTEx_EnableFifoMode+0x16>
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	e02b      	b.n	800c602 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2224      	movs	r2, #36	; 0x24
 800c5b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f022 0201 	bic.w	r2, r2, #1
 800c5d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c5e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 f8ac 	bl	800c748 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2220      	movs	r2, #32
 800c5f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c600:	2300      	movs	r3, #0
}
 800c602:	4618      	mov	r0, r3
 800c604:	3710      	adds	r7, #16
 800c606:	46bd      	mov	sp, r7
 800c608:	bd80      	pop	{r7, pc}

0800c60a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b084      	sub	sp, #16
 800c60e:	af00      	add	r7, sp, #0
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d101      	bne.n	800c622 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c61e:	2302      	movs	r3, #2
 800c620:	e02d      	b.n	800c67e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2224      	movs	r2, #36	; 0x24
 800c62e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f022 0201 	bic.w	r2, r2, #1
 800c648:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f872 	bl	800c748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2220      	movs	r2, #32
 800c670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c686:	b580      	push	{r7, lr}
 800c688:	b084      	sub	sp, #16
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c696:	2b01      	cmp	r3, #1
 800c698:	d101      	bne.n	800c69e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c69a:	2302      	movs	r3, #2
 800c69c:	e02d      	b.n	800c6fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2224      	movs	r2, #36	; 0x24
 800c6aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f022 0201 	bic.w	r2, r2, #1
 800c6c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	683a      	ldr	r2, [r7, #0]
 800c6d6:	430a      	orrs	r2, r1
 800c6d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f834 	bl	800c748 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2220      	movs	r2, #32
 800c6ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c6f8:	2300      	movs	r3, #0
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}

0800c702 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c702:	b480      	push	{r7}
 800c704:	b085      	sub	sp, #20
 800c706:	af00      	add	r7, sp, #0
 800c708:	60f8      	str	r0, [r7, #12]
 800c70a:	1d3b      	adds	r3, r7, #4
 800c70c:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	f023 0210 	bic.w	r2, r3, #16
 800c71a:	893b      	ldrh	r3, [r7, #8]
 800c71c:	4619      	mov	r1, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	430a      	orrs	r2, r1
 800c724:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800c730:	7abb      	ldrb	r3, [r7, #10]
 800c732:	061a      	lsls	r2, r3, #24
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	430a      	orrs	r2, r1
 800c73a:	605a      	str	r2, [r3, #4]
}
 800c73c:	bf00      	nop
 800c73e:	3714      	adds	r7, #20
 800c740:	46bd      	mov	sp, r7
 800c742:	bc80      	pop	{r7}
 800c744:	4770      	bx	lr
	...

0800c748 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c748:	b480      	push	{r7}
 800c74a:	b085      	sub	sp, #20
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c754:	2b00      	cmp	r3, #0
 800c756:	d108      	bne.n	800c76a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c768:	e031      	b.n	800c7ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c76a:	2308      	movs	r3, #8
 800c76c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c76e:	2308      	movs	r3, #8
 800c770:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	0e5b      	lsrs	r3, r3, #25
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	f003 0307 	and.w	r3, r3, #7
 800c780:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	0f5b      	lsrs	r3, r3, #29
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	f003 0307 	and.w	r3, r3, #7
 800c790:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c792:	7bbb      	ldrb	r3, [r7, #14]
 800c794:	7b3a      	ldrb	r2, [r7, #12]
 800c796:	4910      	ldr	r1, [pc, #64]	; (800c7d8 <UARTEx_SetNbDataToProcess+0x90>)
 800c798:	5c8a      	ldrb	r2, [r1, r2]
 800c79a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c79e:	7b3a      	ldrb	r2, [r7, #12]
 800c7a0:	490e      	ldr	r1, [pc, #56]	; (800c7dc <UARTEx_SetNbDataToProcess+0x94>)
 800c7a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c7a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	7b7a      	ldrb	r2, [r7, #13]
 800c7b4:	4908      	ldr	r1, [pc, #32]	; (800c7d8 <UARTEx_SetNbDataToProcess+0x90>)
 800c7b6:	5c8a      	ldrb	r2, [r1, r2]
 800c7b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c7bc:	7b7a      	ldrb	r2, [r7, #13]
 800c7be:	4907      	ldr	r1, [pc, #28]	; (800c7dc <UARTEx_SetNbDataToProcess+0x94>)
 800c7c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c7c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c7ce:	bf00      	nop
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bc80      	pop	{r7}
 800c7d6:	4770      	bx	lr
 800c7d8:	080209ec 	.word	0x080209ec
 800c7dc:	080209f4 	.word	0x080209f4

0800c7e0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800c7e4:	f7f5 fd08 	bl	80021f8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800c7e8:	f000 f818 	bl	800c81c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800c7ec:	bf00      	nop
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800c7f4:	f3bf 8f4f 	dsb	sy
}
 800c7f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800c7fa:	4b06      	ldr	r3, [pc, #24]	; (800c814 <__NVIC_SystemReset+0x24>)
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800c802:	4904      	ldr	r1, [pc, #16]	; (800c814 <__NVIC_SystemReset+0x24>)
 800c804:	4b04      	ldr	r3, [pc, #16]	; (800c818 <__NVIC_SystemReset+0x28>)
 800c806:	4313      	orrs	r3, r2
 800c808:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c80a:	f3bf 8f4f 	dsb	sy
}
 800c80e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800c810:	bf00      	nop
 800c812:	e7fd      	b.n	800c810 <__NVIC_SystemReset+0x20>
 800c814:	e000ed00 	.word	0xe000ed00
 800c818:	05fa0004 	.word	0x05fa0004

0800c81c <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800c822:	2300      	movs	r3, #0
 800c824:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800c826:	2300      	movs	r3, #0
 800c828:	9302      	str	r3, [sp, #8]
 800c82a:	2303      	movs	r3, #3
 800c82c:	9301      	str	r3, [sp, #4]
 800c82e:	2301      	movs	r3, #1
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	4b59      	ldr	r3, [pc, #356]	; (800c998 <LoRaWAN_Init+0x17c>)
 800c834:	2200      	movs	r2, #0
 800c836:	2100      	movs	r1, #0
 800c838:	2002      	movs	r0, #2
 800c83a:	f013 f87b 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800c83e:	2300      	movs	r3, #0
 800c840:	9302      	str	r3, [sp, #8]
 800c842:	2305      	movs	r3, #5
 800c844:	9301      	str	r3, [sp, #4]
 800c846:	2302      	movs	r3, #2
 800c848:	9300      	str	r3, [sp, #0]
 800c84a:	4b54      	ldr	r3, [pc, #336]	; (800c99c <LoRaWAN_Init+0x180>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	2100      	movs	r1, #0
 800c850:	2002      	movs	r0, #2
 800c852:	f013 f86f 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800c856:	2300      	movs	r3, #0
 800c858:	9302      	str	r3, [sp, #8]
 800c85a:	2303      	movs	r3, #3
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	2301      	movs	r3, #1
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	4b4f      	ldr	r3, [pc, #316]	; (800c9a0 <LoRaWAN_Init+0x184>)
 800c864:	2200      	movs	r2, #0
 800c866:	2100      	movs	r1, #0
 800c868:	2002      	movs	r0, #2
 800c86a:	f013 f863 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800c86e:	1d3b      	adds	r3, r7, #4
 800c870:	4619      	mov	r1, r3
 800c872:	2000      	movs	r0, #0
 800c874:	f003 fa34 	bl	800fce0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	0e1b      	lsrs	r3, r3, #24
 800c87c:	b2db      	uxtb	r3, r3
 800c87e:	461a      	mov	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	0c1b      	lsrs	r3, r3, #16
 800c884:	b2db      	uxtb	r3, r3
 800c886:	4619      	mov	r1, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	0a1b      	lsrs	r3, r3, #8
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	9302      	str	r3, [sp, #8]
 800c890:	9101      	str	r1, [sp, #4]
 800c892:	9200      	str	r2, [sp, #0]
 800c894:	4b43      	ldr	r3, [pc, #268]	; (800c9a4 <LoRaWAN_Init+0x188>)
 800c896:	2200      	movs	r2, #0
 800c898:	2100      	movs	r1, #0
 800c89a:	2002      	movs	r0, #2
 800c89c:	f013 f84a 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800c8a0:	1d3b      	adds	r3, r7, #4
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	2001      	movs	r0, #1
 800c8a6:	f003 fa1b 	bl	800fce0 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	0e1b      	lsrs	r3, r3, #24
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	0c1b      	lsrs	r3, r3, #16
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	0a1b      	lsrs	r3, r3, #8
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	b2c0      	uxtb	r0, r0
 800c8c4:	9003      	str	r0, [sp, #12]
 800c8c6:	9302      	str	r3, [sp, #8]
 800c8c8:	9101      	str	r1, [sp, #4]
 800c8ca:	9200      	str	r2, [sp, #0]
 800c8cc:	4b36      	ldr	r3, [pc, #216]	; (800c9a8 <LoRaWAN_Init+0x18c>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	2002      	movs	r0, #2
 800c8d4:	f013 f82e 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800c8d8:	2300      	movs	r3, #0
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	4b33      	ldr	r3, [pc, #204]	; (800c9ac <LoRaWAN_Init+0x190>)
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c8e4:	4832      	ldr	r0, [pc, #200]	; (800c9b0 <LoRaWAN_Init+0x194>)
 800c8e6:	f012 fd77 	bl	801f3d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	9300      	str	r3, [sp, #0]
 800c8ee:	4b31      	ldr	r3, [pc, #196]	; (800c9b4 <LoRaWAN_Init+0x198>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c8f6:	4830      	ldr	r0, [pc, #192]	; (800c9b8 <LoRaWAN_Init+0x19c>)
 800c8f8:	f012 fd6e 	bl	801f3d8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	4b2e      	ldr	r3, [pc, #184]	; (800c9bc <LoRaWAN_Init+0x1a0>)
 800c902:	2201      	movs	r2, #1
 800c904:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800c908:	482d      	ldr	r0, [pc, #180]	; (800c9c0 <LoRaWAN_Init+0x1a4>)
 800c90a:	f012 fd65 	bl	801f3d8 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800c90e:	2300      	movs	r3, #0
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	4b2c      	ldr	r3, [pc, #176]	; (800c9c4 <LoRaWAN_Init+0x1a8>)
 800c914:	2200      	movs	r2, #0
 800c916:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800c91a:	482b      	ldr	r0, [pc, #172]	; (800c9c8 <LoRaWAN_Init+0x1ac>)
 800c91c:	f012 fd5c 	bl	801f3d8 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800c920:	4a2a      	ldr	r2, [pc, #168]	; (800c9cc <LoRaWAN_Init+0x1b0>)
 800c922:	2100      	movs	r1, #0
 800c924:	2001      	movs	r0, #1
 800c926:	f012 fcbf 	bl	801f2a8 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800c92a:	4a29      	ldr	r2, [pc, #164]	; (800c9d0 <LoRaWAN_Init+0x1b4>)
 800c92c:	2100      	movs	r1, #0
 800c92e:	2002      	movs	r0, #2
 800c930:	f012 fcba 	bl	801f2a8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800c934:	4a27      	ldr	r2, [pc, #156]	; (800c9d4 <LoRaWAN_Init+0x1b8>)
 800c936:	2100      	movs	r1, #0
 800c938:	2004      	movs	r0, #4
 800c93a:	f012 fcb5 	bl	801f2a8 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800c93e:	4a26      	ldr	r2, [pc, #152]	; (800c9d8 <LoRaWAN_Init+0x1bc>)
 800c940:	2100      	movs	r1, #0
 800c942:	2008      	movs	r0, #8
 800c944:	f012 fcb0 	bl	801f2a8 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800c948:	f000 fd22 	bl	800d390 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800c94c:	4923      	ldr	r1, [pc, #140]	; (800c9dc <LoRaWAN_Init+0x1c0>)
 800c94e:	4824      	ldr	r0, [pc, #144]	; (800c9e0 <LoRaWAN_Init+0x1c4>)
 800c950:	f002 fa38 	bl	800edc4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800c954:	4823      	ldr	r0, [pc, #140]	; (800c9e4 <LoRaWAN_Init+0x1c8>)
 800c956:	f002 faa3 	bl	800eea0 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800c95a:	4819      	ldr	r0, [pc, #100]	; (800c9c0 <LoRaWAN_Init+0x1a4>)
 800c95c:	f012 fd72 	bl	801f444 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800c960:	4b21      	ldr	r3, [pc, #132]	; (800c9e8 <LoRaWAN_Init+0x1cc>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	4a21      	ldr	r2, [pc, #132]	; (800c9ec <LoRaWAN_Init+0x1d0>)
 800c966:	7812      	ldrb	r2, [r2, #0]
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f002 fbf0 	bl	800f150 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800c970:	4b1f      	ldr	r3, [pc, #124]	; (800c9f0 <LoRaWAN_Init+0x1d4>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d10b      	bne.n	800c990 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800c978:	4b1e      	ldr	r3, [pc, #120]	; (800c9f4 <LoRaWAN_Init+0x1d8>)
 800c97a:	6819      	ldr	r1, [r3, #0]
 800c97c:	2300      	movs	r3, #0
 800c97e:	9300      	str	r3, [sp, #0]
 800c980:	4b1d      	ldr	r3, [pc, #116]	; (800c9f8 <LoRaWAN_Init+0x1dc>)
 800c982:	2200      	movs	r2, #0
 800c984:	481d      	ldr	r0, [pc, #116]	; (800c9fc <LoRaWAN_Init+0x1e0>)
 800c986:	f012 fd27 	bl	801f3d8 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800c98a:	481c      	ldr	r0, [pc, #112]	; (800c9fc <LoRaWAN_Init+0x1e0>)
 800c98c:	f012 fd5a 	bl	801f444 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	08020088 	.word	0x08020088
 800c99c:	080200ac 	.word	0x080200ac
 800c9a0:	080200d0 	.word	0x080200d0
 800c9a4:	080200f4 	.word	0x080200f4
 800c9a8:	08020118 	.word	0x08020118
 800c9ac:	0800ceb1 	.word	0x0800ceb1
 800c9b0:	200004a4 	.word	0x200004a4
 800c9b4:	0800cec3 	.word	0x0800cec3
 800c9b8:	200004bc 	.word	0x200004bc
 800c9bc:	0800ced5 	.word	0x0800ced5
 800c9c0:	200004d4 	.word	0x200004d4
 800c9c4:	0800d291 	.word	0x0800d291
 800c9c8:	20000398 	.word	0x20000398
 800c9cc:	0800f0e5 	.word	0x0800f0e5
 800c9d0:	0800cb71 	.word	0x0800cb71
 800c9d4:	0800d2b5 	.word	0x0800d2b5
 800c9d8:	0800d211 	.word	0x0800d211
 800c9dc:	01030000 	.word	0x01030000
 800c9e0:	20000024 	.word	0x20000024
 800c9e4:	20000070 	.word	0x20000070
 800c9e8:	20000020 	.word	0x20000020
 800c9ec:	20000021 	.word	0x20000021
 800c9f0:	2000037c 	.word	0x2000037c
 800c9f4:	20000088 	.word	0x20000088
 800c9f8:	0800ce8d 	.word	0x0800ce8d
 800c9fc:	20000380 	.word	0x20000380

0800ca00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800ca0a:	88fb      	ldrh	r3, [r7, #6]
 800ca0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca10:	d104      	bne.n	800ca1c <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800ca12:	2100      	movs	r1, #0
 800ca14:	2002      	movs	r0, #2
 800ca16:	f012 fc69 	bl	801f2ec <UTIL_SEQ_SetTask>
      }
      break;
 800ca1a:	e000      	b.n	800ca1e <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800ca1c:	bf00      	nop
  }
}
 800ca1e:	bf00      	nop
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
	...

0800ca28 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800ca28:	b5b0      	push	{r4, r5, r7, lr}
 800ca2a:	b08a      	sub	sp, #40	; 0x28
 800ca2c:	af06      	add	r7, sp, #24
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 8086 	beq.w	800cb4a <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800ca3e:	4845      	ldr	r0, [pc, #276]	; (800cb54 <OnRxData+0x12c>)
 800ca40:	f012 fd00 	bl	801f444 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d05a      	beq.n	800cb02 <OnRxData+0xda>
    {
      if (appData != NULL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d057      	beq.n	800cb02 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d050      	beq.n	800cb02 <OnRxData+0xda>
        {
          switch (appData->Port)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b02      	cmp	r3, #2
 800ca66:	d01f      	beq.n	800caa8 <OnRxData+0x80>
 800ca68:	2b03      	cmp	r3, #3
 800ca6a:	d145      	bne.n	800caf8 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	785b      	ldrb	r3, [r3, #1]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d143      	bne.n	800cafc <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	2b02      	cmp	r3, #2
 800ca7c:	d00e      	beq.n	800ca9c <OnRxData+0x74>
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	dc10      	bgt.n	800caa4 <OnRxData+0x7c>
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d002      	beq.n	800ca8c <OnRxData+0x64>
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d004      	beq.n	800ca94 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800ca8a:	e00b      	b.n	800caa4 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	f002 fd13 	bl	800f4b8 <LmHandlerRequestClass>
                    break;
 800ca92:	e008      	b.n	800caa6 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800ca94:	2001      	movs	r0, #1
 800ca96:	f002 fd0f 	bl	800f4b8 <LmHandlerRequestClass>
                    break;
 800ca9a:	e004      	b.n	800caa6 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800ca9c:	2002      	movs	r0, #2
 800ca9e:	f002 fd0b 	bl	800f4b8 <LmHandlerRequestClass>
                    break;
 800caa2:	e000      	b.n	800caa6 <OnRxData+0x7e>
                    break;
 800caa4:	bf00      	nop
                }
              }
              break;
 800caa6:	e029      	b.n	800cafc <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	785b      	ldrb	r3, [r3, #1]
 800caac:	2b01      	cmp	r3, #1
 800caae:	d127      	bne.n	800cb00 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	f003 0301 	and.w	r3, r3, #1
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	4b26      	ldr	r3, [pc, #152]	; (800cb58 <OnRxData+0x130>)
 800cabe:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800cac0:	4b25      	ldr	r3, [pc, #148]	; (800cb58 <OnRxData+0x130>)
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10b      	bne.n	800cae0 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800cac8:	4b24      	ldr	r3, [pc, #144]	; (800cb5c <OnRxData+0x134>)
 800caca:	2200      	movs	r2, #0
 800cacc:	2100      	movs	r1, #0
 800cace:	2003      	movs	r0, #3
 800cad0:	f012 ff30 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800cad4:	2201      	movs	r2, #1
 800cad6:	2120      	movs	r1, #32
 800cad8:	4821      	ldr	r0, [pc, #132]	; (800cb60 <OnRxData+0x138>)
 800cada:	f7fa faff 	bl	80070dc <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800cade:	e00f      	b.n	800cb00 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800cae0:	4b20      	ldr	r3, [pc, #128]	; (800cb64 <OnRxData+0x13c>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	2100      	movs	r1, #0
 800cae6:	2003      	movs	r0, #3
 800cae8:	f012 ff24 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800caec:	2200      	movs	r2, #0
 800caee:	2120      	movs	r1, #32
 800caf0:	481b      	ldr	r0, [pc, #108]	; (800cb60 <OnRxData+0x138>)
 800caf2:	f7fa faf3 	bl	80070dc <HAL_GPIO_WritePin>
              break;
 800caf6:	e003      	b.n	800cb00 <OnRxData+0xd8>

            default:

              break;
 800caf8:	bf00      	nop
 800cafa:	e002      	b.n	800cb02 <OnRxData+0xda>
              break;
 800cafc:	bf00      	nop
 800cafe:	e000      	b.n	800cb02 <OnRxData+0xda>
              break;
 800cb00:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	7c1b      	ldrb	r3, [r3, #16]
 800cb06:	2b05      	cmp	r3, #5
 800cb08:	d81f      	bhi.n	800cb4a <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	7bfa      	ldrb	r2, [r7, #15]
 800cb10:	6839      	ldr	r1, [r7, #0]
 800cb12:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800cb16:	460c      	mov	r4, r1
 800cb18:	6839      	ldr	r1, [r7, #0]
 800cb1a:	7c09      	ldrb	r1, [r1, #16]
 800cb1c:	4608      	mov	r0, r1
 800cb1e:	4912      	ldr	r1, [pc, #72]	; (800cb68 <OnRxData+0x140>)
 800cb20:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800cb24:	6838      	ldr	r0, [r7, #0]
 800cb26:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800cb2a:	4605      	mov	r5, r0
 800cb2c:	6838      	ldr	r0, [r7, #0]
 800cb2e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800cb32:	9005      	str	r0, [sp, #20]
 800cb34:	9504      	str	r5, [sp, #16]
 800cb36:	9103      	str	r1, [sp, #12]
 800cb38:	9402      	str	r4, [sp, #8]
 800cb3a:	9201      	str	r2, [sp, #4]
 800cb3c:	9300      	str	r3, [sp, #0]
 800cb3e:	4b0b      	ldr	r3, [pc, #44]	; (800cb6c <OnRxData+0x144>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	2100      	movs	r1, #0
 800cb44:	2003      	movs	r0, #3
 800cb46:	f012 fef5 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800cb4a:	bf00      	nop
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bdb0      	pop	{r4, r5, r7, pc}
 800cb52:	bf00      	nop
 800cb54:	200004bc 	.word	0x200004bc
 800cb58:	200004a2 	.word	0x200004a2
 800cb5c:	0802013c 	.word	0x0802013c
 800cb60:	48000400 	.word	0x48000400
 800cb64:	08020148 	.word	0x08020148
 800cb68:	20000008 	.word	0x20000008
 800cb6c:	08020154 	.word	0x08020154

0800cb70 <SendTxData>:

static void SendTxData(void)
{
 800cb70:	b590      	push	{r4, r7, lr}
 800cb72:	b091      	sub	sp, #68	; 0x44
 800cb74:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800cb76:	23ff      	movs	r3, #255	; 0xff
 800cb78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800cb7c:	f7f5 fb66 	bl	800224c <GetBatteryLevel>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800cb86:	2300      	movs	r3, #0
 800cb88:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800cba6:	1d3b      	adds	r3, r7, #4
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7f5 fd13 	bl	80025d4 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800cbae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	4b8f      	ldr	r3, [pc, #572]	; (800cdf4 <SendTxData+0x284>)
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	2100      	movs	r1, #0
 800cbba:	2002      	movs	r0, #2
 800cbbc:	f012 feba 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f7f4 fa0c 	bl	8000fe0 <__aeabi_f2iz>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	b21b      	sxth	r3, r3
 800cbcc:	9300      	str	r3, [sp, #0]
 800cbce:	4b8a      	ldr	r3, [pc, #552]	; (800cdf8 <SendTxData+0x288>)
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	2002      	movs	r0, #2
 800cbd6:	f012 fead 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800cbda:	4b88      	ldr	r3, [pc, #544]	; (800cdfc <SendTxData+0x28c>)
 800cbdc:	2202      	movs	r2, #2
 800cbde:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	4987      	ldr	r1, [pc, #540]	; (800ce00 <SendTxData+0x290>)
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7f4 f8ab 	bl	8000d40 <__aeabi_fmul>
 800cbea:	4603      	mov	r3, r0
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7f4 fa1d 	bl	800102c <__aeabi_f2uiz>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7f4 f9f1 	bl	8000fe0 <__aeabi_f2iz>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	497f      	ldr	r1, [pc, #508]	; (800ce04 <SendTxData+0x294>)
 800cc06:	4618      	mov	r0, r3
 800cc08:	f7f4 f89a 	bl	8000d40 <__aeabi_fmul>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	497c      	ldr	r1, [pc, #496]	; (800ce00 <SendTxData+0x290>)
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7f4 f949 	bl	8000ea8 <__aeabi_fdiv>
 800cc16:	4603      	mov	r3, r0
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f7f4 fa07 	bl	800102c <__aeabi_f2uiz>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800cc22:	4b76      	ldr	r3, [pc, #472]	; (800cdfc <SendTxData+0x28c>)
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	1c59      	adds	r1, r3, #1
 800cc2a:	6339      	str	r1, [r7, #48]	; 0x30
 800cc2c:	4413      	add	r3, r2
 800cc2e:	4a76      	ldr	r2, [pc, #472]	; (800ce08 <SendTxData+0x298>)
 800cc30:	7812      	ldrb	r2, [r2, #0]
 800cc32:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800cc34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc36:	0a1b      	lsrs	r3, r3, #8
 800cc38:	b298      	uxth	r0, r3
 800cc3a:	4b70      	ldr	r3, [pc, #448]	; (800cdfc <SendTxData+0x28c>)
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc40:	1c59      	adds	r1, r3, #1
 800cc42:	6339      	str	r1, [r7, #48]	; 0x30
 800cc44:	4413      	add	r3, r2
 800cc46:	b2c2      	uxtb	r2, r0
 800cc48:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800cc4a:	4b6c      	ldr	r3, [pc, #432]	; (800cdfc <SendTxData+0x28c>)
 800cc4c:	685a      	ldr	r2, [r3, #4]
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc50:	1c59      	adds	r1, r3, #1
 800cc52:	6339      	str	r1, [r7, #48]	; 0x30
 800cc54:	4413      	add	r3, r2
 800cc56:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cc58:	b2d2      	uxtb	r2, r2
 800cc5a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800cc5c:	4b67      	ldr	r3, [pc, #412]	; (800cdfc <SendTxData+0x28c>)
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc62:	1c59      	adds	r1, r3, #1
 800cc64:	6339      	str	r1, [r7, #48]	; 0x30
 800cc66:	4413      	add	r3, r2
 800cc68:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800cc6a:	b2d2      	uxtb	r2, r2
 800cc6c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800cc6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cc70:	0a1b      	lsrs	r3, r3, #8
 800cc72:	b298      	uxth	r0, r3
 800cc74:	4b61      	ldr	r3, [pc, #388]	; (800cdfc <SendTxData+0x28c>)
 800cc76:	685a      	ldr	r2, [r3, #4]
 800cc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7a:	1c59      	adds	r1, r3, #1
 800cc7c:	6339      	str	r1, [r7, #48]	; 0x30
 800cc7e:	4413      	add	r3, r2
 800cc80:	b2c2      	uxtb	r2, r0
 800cc82:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800cc84:	4b5d      	ldr	r3, [pc, #372]	; (800cdfc <SendTxData+0x28c>)
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8a:	1c59      	adds	r1, r3, #1
 800cc8c:	6339      	str	r1, [r7, #48]	; 0x30
 800cc8e:	4413      	add	r3, r2
 800cc90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cc92:	b2d2      	uxtb	r2, r2
 800cc94:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800cc96:	4b5d      	ldr	r3, [pc, #372]	; (800ce0c <SendTxData+0x29c>)
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2b08      	cmp	r3, #8
 800cc9c:	d007      	beq.n	800ccae <SendTxData+0x13e>
 800cc9e:	4b5b      	ldr	r3, [pc, #364]	; (800ce0c <SendTxData+0x29c>)
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d003      	beq.n	800ccae <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800cca6:	4b59      	ldr	r3, [pc, #356]	; (800ce0c <SendTxData+0x29c>)
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d120      	bne.n	800ccf0 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800ccae:	4b53      	ldr	r3, [pc, #332]	; (800cdfc <SendTxData+0x28c>)
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	1c59      	adds	r1, r3, #1
 800ccb6:	6339      	str	r1, [r7, #48]	; 0x30
 800ccb8:	4413      	add	r3, r2
 800ccba:	2200      	movs	r2, #0
 800ccbc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ccbe:	4b4f      	ldr	r3, [pc, #316]	; (800cdfc <SendTxData+0x28c>)
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc4:	1c59      	adds	r1, r3, #1
 800ccc6:	6339      	str	r1, [r7, #48]	; 0x30
 800ccc8:	4413      	add	r3, r2
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ccce:	4b4b      	ldr	r3, [pc, #300]	; (800cdfc <SendTxData+0x28c>)
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd4:	1c59      	adds	r1, r3, #1
 800ccd6:	6339      	str	r1, [r7, #48]	; 0x30
 800ccd8:	4413      	add	r3, r2
 800ccda:	2200      	movs	r2, #0
 800ccdc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800ccde:	4b47      	ldr	r3, [pc, #284]	; (800cdfc <SendTxData+0x28c>)
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce4:	1c59      	adds	r1, r3, #1
 800cce6:	6339      	str	r1, [r7, #48]	; 0x30
 800cce8:	4413      	add	r3, r2
 800ccea:	2200      	movs	r2, #0
 800ccec:	701a      	strb	r2, [r3, #0]
 800ccee:	e05b      	b.n	800cda8 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800ccf8:	4b40      	ldr	r3, [pc, #256]	; (800cdfc <SendTxData+0x28c>)
 800ccfa:	685a      	ldr	r2, [r3, #4]
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfe:	1c59      	adds	r1, r3, #1
 800cd00:	6339      	str	r1, [r7, #48]	; 0x30
 800cd02:	18d4      	adds	r4, r2, r3
 800cd04:	f7f5 faa2 	bl	800224c <GetBatteryLevel>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	1418      	asrs	r0, r3, #16
 800cd10:	4b3a      	ldr	r3, [pc, #232]	; (800cdfc <SendTxData+0x28c>)
 800cd12:	685a      	ldr	r2, [r3, #4]
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	1c59      	adds	r1, r3, #1
 800cd18:	6339      	str	r1, [r7, #48]	; 0x30
 800cd1a:	4413      	add	r3, r2
 800cd1c:	b2c2      	uxtb	r2, r0
 800cd1e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	1218      	asrs	r0, r3, #8
 800cd24:	4b35      	ldr	r3, [pc, #212]	; (800cdfc <SendTxData+0x28c>)
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2a:	1c59      	adds	r1, r3, #1
 800cd2c:	6339      	str	r1, [r7, #48]	; 0x30
 800cd2e:	4413      	add	r3, r2
 800cd30:	b2c2      	uxtb	r2, r0
 800cd32:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800cd34:	4b31      	ldr	r3, [pc, #196]	; (800cdfc <SendTxData+0x28c>)
 800cd36:	685a      	ldr	r2, [r3, #4]
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	1c59      	adds	r1, r3, #1
 800cd3c:	6339      	str	r1, [r7, #48]	; 0x30
 800cd3e:	4413      	add	r3, r2
 800cd40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd42:	b2d2      	uxtb	r2, r2
 800cd44:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	1418      	asrs	r0, r3, #16
 800cd4a:	4b2c      	ldr	r3, [pc, #176]	; (800cdfc <SendTxData+0x28c>)
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd50:	1c59      	adds	r1, r3, #1
 800cd52:	6339      	str	r1, [r7, #48]	; 0x30
 800cd54:	4413      	add	r3, r2
 800cd56:	b2c2      	uxtb	r2, r0
 800cd58:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	1218      	asrs	r0, r3, #8
 800cd5e:	4b27      	ldr	r3, [pc, #156]	; (800cdfc <SendTxData+0x28c>)
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	1c59      	adds	r1, r3, #1
 800cd66:	6339      	str	r1, [r7, #48]	; 0x30
 800cd68:	4413      	add	r3, r2
 800cd6a:	b2c2      	uxtb	r2, r0
 800cd6c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800cd6e:	4b23      	ldr	r3, [pc, #140]	; (800cdfc <SendTxData+0x28c>)
 800cd70:	685a      	ldr	r2, [r3, #4]
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	1c59      	adds	r1, r3, #1
 800cd76:	6339      	str	r1, [r7, #48]	; 0x30
 800cd78:	4413      	add	r3, r2
 800cd7a:	6a3a      	ldr	r2, [r7, #32]
 800cd7c:	b2d2      	uxtb	r2, r2
 800cd7e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800cd80:	8bfb      	ldrh	r3, [r7, #30]
 800cd82:	0a1b      	lsrs	r3, r3, #8
 800cd84:	b298      	uxth	r0, r3
 800cd86:	4b1d      	ldr	r3, [pc, #116]	; (800cdfc <SendTxData+0x28c>)
 800cd88:	685a      	ldr	r2, [r3, #4]
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	1c59      	adds	r1, r3, #1
 800cd8e:	6339      	str	r1, [r7, #48]	; 0x30
 800cd90:	4413      	add	r3, r2
 800cd92:	b2c2      	uxtb	r2, r0
 800cd94:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800cd96:	4b19      	ldr	r3, [pc, #100]	; (800cdfc <SendTxData+0x28c>)
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9c:	1c59      	adds	r1, r3, #1
 800cd9e:	6339      	str	r1, [r7, #48]	; 0x30
 800cda0:	4413      	add	r3, r2
 800cda2:	8bfa      	ldrh	r2, [r7, #30]
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800cda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdaa:	b2da      	uxtb	r2, r3
 800cdac:	4b13      	ldr	r3, [pc, #76]	; (800cdfc <SendTxData+0x28c>)
 800cdae:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800cdb0:	4b17      	ldr	r3, [pc, #92]	; (800ce10 <SendTxData+0x2a0>)
 800cdb2:	7a5b      	ldrb	r3, [r3, #9]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d007      	beq.n	800cdc8 <SendTxData+0x258>
 800cdb8:	f002 fa6c 	bl	800f294 <LmHandlerJoinStatus>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d102      	bne.n	800cdc8 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800cdc2:	4813      	ldr	r0, [pc, #76]	; (800ce10 <SendTxData+0x2a0>)
 800cdc4:	f012 fbac 	bl	801f520 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800cdc8:	4b10      	ldr	r3, [pc, #64]	; (800ce0c <SendTxData+0x29c>)
 800cdca:	78db      	ldrb	r3, [r3, #3]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	4619      	mov	r1, r3
 800cdd0:	480a      	ldr	r0, [pc, #40]	; (800cdfc <SendTxData+0x28c>)
 800cdd2:	f002 fa7b 	bl	800f2cc <LmHandlerSend>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800cddc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d119      	bne.n	800ce18 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800cde4:	4b0b      	ldr	r3, [pc, #44]	; (800ce14 <SendTxData+0x2a4>)
 800cde6:	2201      	movs	r2, #1
 800cde8:	2100      	movs	r1, #0
 800cdea:	2001      	movs	r0, #1
 800cdec:	f012 fda2 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
 800cdf0:	e029      	b.n	800ce46 <SendTxData+0x2d6>
 800cdf2:	bf00      	nop
 800cdf4:	0802019c 	.word	0x0802019c
 800cdf8:	080201a8 	.word	0x080201a8
 800cdfc:	2000008c 	.word	0x2000008c
 800ce00:	41200000 	.word	0x41200000
 800ce04:	42c80000 	.word	0x42c80000
 800ce08:	200004a2 	.word	0x200004a2
 800ce0c:	20000070 	.word	0x20000070
 800ce10:	200004d4 	.word	0x200004d4
 800ce14:	080201b4 	.word	0x080201b4
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800ce18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce1c:	f113 0f06 	cmn.w	r3, #6
 800ce20:	d111      	bne.n	800ce46 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800ce22:	f002 f98b 	bl	800f13c <LmHandlerGetDutyCycleWaitTime>
 800ce26:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800ce28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00b      	beq.n	800ce46 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce30:	4a11      	ldr	r2, [pc, #68]	; (800ce78 <SendTxData+0x308>)
 800ce32:	fba2 2303 	umull	r2, r3, r2, r3
 800ce36:	099b      	lsrs	r3, r3, #6
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	4b10      	ldr	r3, [pc, #64]	; (800ce7c <SendTxData+0x30c>)
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	2100      	movs	r1, #0
 800ce40:	2001      	movs	r0, #1
 800ce42:	f012 fd77 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800ce46:	4b0e      	ldr	r3, [pc, #56]	; (800ce80 <SendTxData+0x310>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10f      	bne.n	800ce6e <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800ce4e:	480d      	ldr	r0, [pc, #52]	; (800ce84 <SendTxData+0x314>)
 800ce50:	f012 fb66 	bl	801f520 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800ce54:	4b0c      	ldr	r3, [pc, #48]	; (800ce88 <SendTxData+0x318>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	bf38      	it	cc
 800ce5e:	4613      	movcc	r3, r2
 800ce60:	4619      	mov	r1, r3
 800ce62:	4808      	ldr	r0, [pc, #32]	; (800ce84 <SendTxData+0x314>)
 800ce64:	f012 fbcc 	bl	801f600 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800ce68:	4806      	ldr	r0, [pc, #24]	; (800ce84 <SendTxData+0x314>)
 800ce6a:	f012 faeb 	bl	801f444 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800ce6e:	bf00      	nop
 800ce70:	373c      	adds	r7, #60	; 0x3c
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd90      	pop	{r4, r7, pc}
 800ce76:	bf00      	nop
 800ce78:	10624dd3 	.word	0x10624dd3
 800ce7c:	080201c4 	.word	0x080201c4
 800ce80:	2000037c 	.word	0x2000037c
 800ce84:	20000380 	.word	0x20000380
 800ce88:	20000088 	.word	0x20000088

0800ce8c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800ce94:	2100      	movs	r1, #0
 800ce96:	2002      	movs	r0, #2
 800ce98:	f012 fa28 	bl	801f2ec <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800ce9c:	4803      	ldr	r0, [pc, #12]	; (800ceac <OnTxTimerEvent+0x20>)
 800ce9e:	f012 fad1 	bl	801f444 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800cea2:	bf00      	nop
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	20000380 	.word	0x20000380

0800ceb0 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800ceb8:	bf00      	nop
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bc80      	pop	{r7}
 800cec0:	4770      	bx	lr

0800cec2 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b083      	sub	sp, #12
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800ceca:	bf00      	nop
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	bc80      	pop	{r7}
 800ced2:	4770      	bx	lr

0800ced4 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800cedc:	bf00      	nop
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bc80      	pop	{r7}
 800cee4:	4770      	bx	lr
	...

0800cee8 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af04      	add	r7, sp, #16
 800ceee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d041      	beq.n	800cf7a <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d03d      	beq.n	800cf7a <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800cefe:	4821      	ldr	r0, [pc, #132]	; (800cf84 <OnTxData+0x9c>)
 800cf00:	f012 faa0 	bl	801f444 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800cf04:	4b20      	ldr	r3, [pc, #128]	; (800cf88 <OnTxData+0xa0>)
 800cf06:	2200      	movs	r2, #0
 800cf08:	2100      	movs	r1, #0
 800cf0a:	2002      	movs	r0, #2
 800cf0c:	f012 fd12 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	7c12      	ldrb	r2, [r2, #16]
 800cf18:	4611      	mov	r1, r2
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800cf20:	4610      	mov	r0, r2
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800cf28:	9203      	str	r2, [sp, #12]
 800cf2a:	9002      	str	r0, [sp, #8]
 800cf2c:	9101      	str	r1, [sp, #4]
 800cf2e:	9300      	str	r3, [sp, #0]
 800cf30:	4b16      	ldr	r3, [pc, #88]	; (800cf8c <OnTxData+0xa4>)
 800cf32:	2200      	movs	r2, #0
 800cf34:	2100      	movs	r1, #0
 800cf36:	2003      	movs	r0, #3
 800cf38:	f012 fcfc 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800cf3c:	4b14      	ldr	r3, [pc, #80]	; (800cf90 <OnTxData+0xa8>)
 800cf3e:	2200      	movs	r2, #0
 800cf40:	2100      	movs	r1, #0
 800cf42:	2003      	movs	r0, #3
 800cf44:	f012 fcf6 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7a1b      	ldrb	r3, [r3, #8]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d10e      	bne.n	800cf6e <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	7a5b      	ldrb	r3, [r3, #9]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <OnTxData+0x74>
 800cf58:	4b0e      	ldr	r3, [pc, #56]	; (800cf94 <OnTxData+0xac>)
 800cf5a:	e000      	b.n	800cf5e <OnTxData+0x76>
 800cf5c:	4b0e      	ldr	r3, [pc, #56]	; (800cf98 <OnTxData+0xb0>)
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	4b0e      	ldr	r3, [pc, #56]	; (800cf9c <OnTxData+0xb4>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	2100      	movs	r1, #0
 800cf66:	2003      	movs	r0, #3
 800cf68:	f012 fce4 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800cf6c:	e005      	b.n	800cf7a <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800cf6e:	4b0c      	ldr	r3, [pc, #48]	; (800cfa0 <OnTxData+0xb8>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	2100      	movs	r1, #0
 800cf74:	2003      	movs	r0, #3
 800cf76:	f012 fcdd 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 800cf7a:	bf00      	nop
 800cf7c:	3708      	adds	r7, #8
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	200004a4 	.word	0x200004a4
 800cf88:	080201e4 	.word	0x080201e4
 800cf8c:	08020218 	.word	0x08020218
 800cf90:	0802024c 	.word	0x0802024c
 800cf94:	0802025c 	.word	0x0802025c
 800cf98:	08020260 	.word	0x08020260
 800cf9c:	08020268 	.word	0x08020268
 800cfa0:	0802027c 	.word	0x0802027c

0800cfa4 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d039      	beq.n	800d026 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d11e      	bne.n	800cffa <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	2004      	movs	r0, #4
 800cfc0:	f012 f994 	bl	801f2ec <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800cfc4:	481a      	ldr	r0, [pc, #104]	; (800d030 <OnJoinRequest+0x8c>)
 800cfc6:	f012 faab 	bl	801f520 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800cfca:	4b1a      	ldr	r3, [pc, #104]	; (800d034 <OnJoinRequest+0x90>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	2100      	movs	r1, #0
 800cfd0:	2002      	movs	r0, #2
 800cfd2:	f012 fcaf 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	79db      	ldrb	r3, [r3, #7]
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d106      	bne.n	800cfec <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800cfde:	4b16      	ldr	r3, [pc, #88]	; (800d038 <OnJoinRequest+0x94>)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	2002      	movs	r0, #2
 800cfe6:	f012 fca5 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800cfea:	e01c      	b.n	800d026 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800cfec:	4b13      	ldr	r3, [pc, #76]	; (800d03c <OnJoinRequest+0x98>)
 800cfee:	2200      	movs	r2, #0
 800cff0:	2100      	movs	r1, #0
 800cff2:	2002      	movs	r0, #2
 800cff4:	f012 fc9e 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 800cff8:	e015      	b.n	800d026 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800cffa:	4b11      	ldr	r3, [pc, #68]	; (800d040 <OnJoinRequest+0x9c>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	2100      	movs	r1, #0
 800d000:	2002      	movs	r0, #2
 800d002:	f012 fc97 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	79db      	ldrb	r3, [r3, #7]
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d10b      	bne.n	800d026 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d00e:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <OnJoinRequest+0xa0>)
 800d010:	2200      	movs	r2, #0
 800d012:	2100      	movs	r1, #0
 800d014:	2002      	movs	r0, #2
 800d016:	f012 fc8d 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d01a:	4b0b      	ldr	r3, [pc, #44]	; (800d048 <OnJoinRequest+0xa4>)
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	2101      	movs	r1, #1
 800d020:	4618      	mov	r0, r3
 800d022:	f002 f895 	bl	800f150 <LmHandlerJoin>
}
 800d026:	bf00      	nop
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	200004d4 	.word	0x200004d4
 800d034:	0802028c 	.word	0x0802028c
 800d038:	080202a4 	.word	0x080202a4
 800d03c:	080202c4 	.word	0x080202c4
 800d040:	080202e4 	.word	0x080202e4
 800d044:	08020300 	.word	0x08020300
 800d048:	20000020 	.word	0x20000020

0800d04c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d04e:	b093      	sub	sp, #76	; 0x4c
 800d050:	af0c      	add	r7, sp, #48	; 0x30
 800d052:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d056      	beq.n	800d108 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	785b      	ldrb	r3, [r3, #1]
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d008      	beq.n	800d074 <OnBeaconStatusChange+0x28>
 800d062:	2b03      	cmp	r3, #3
 800d064:	d049      	beq.n	800d0fa <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d066:	4b2a      	ldr	r3, [pc, #168]	; (800d110 <OnBeaconStatusChange+0xc4>)
 800d068:	2200      	movs	r2, #0
 800d06a:	2100      	movs	r1, #0
 800d06c:	2002      	movs	r0, #2
 800d06e:	f012 fc61 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d072:	e049      	b.n	800d108 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	7c1b      	ldrb	r3, [r3, #16]
 800d078:	4618      	mov	r0, r3
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d080:	461c      	mov	r4, r3
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d088:	461d      	mov	r5, r3
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	697a      	ldr	r2, [r7, #20]
 800d090:	6852      	ldr	r2, [r2, #4]
 800d092:	6979      	ldr	r1, [r7, #20]
 800d094:	7d89      	ldrb	r1, [r1, #22]
 800d096:	460e      	mov	r6, r1
 800d098:	6979      	ldr	r1, [r7, #20]
 800d09a:	7dc9      	ldrb	r1, [r1, #23]
 800d09c:	6139      	str	r1, [r7, #16]
 800d09e:	6979      	ldr	r1, [r7, #20]
 800d0a0:	7e09      	ldrb	r1, [r1, #24]
 800d0a2:	60f9      	str	r1, [r7, #12]
 800d0a4:	6979      	ldr	r1, [r7, #20]
 800d0a6:	7e49      	ldrb	r1, [r1, #25]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	6979      	ldr	r1, [r7, #20]
 800d0ac:	7e89      	ldrb	r1, [r1, #26]
 800d0ae:	6079      	str	r1, [r7, #4]
 800d0b0:	6979      	ldr	r1, [r7, #20]
 800d0b2:	7ec9      	ldrb	r1, [r1, #27]
 800d0b4:	6039      	str	r1, [r7, #0]
 800d0b6:	6979      	ldr	r1, [r7, #20]
 800d0b8:	7f09      	ldrb	r1, [r1, #28]
 800d0ba:	910b      	str	r1, [sp, #44]	; 0x2c
 800d0bc:	f8d7 c000 	ldr.w	ip, [r7]
 800d0c0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d0c4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d0c8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d0cc:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d0d0:	f8cd c020 	str.w	ip, [sp, #32]
 800d0d4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d0d8:	f8cd c01c 	str.w	ip, [sp, #28]
 800d0dc:	6939      	ldr	r1, [r7, #16]
 800d0de:	9106      	str	r1, [sp, #24]
 800d0e0:	9605      	str	r6, [sp, #20]
 800d0e2:	9204      	str	r2, [sp, #16]
 800d0e4:	9303      	str	r3, [sp, #12]
 800d0e6:	9502      	str	r5, [sp, #8]
 800d0e8:	9401      	str	r4, [sp, #4]
 800d0ea:	9000      	str	r0, [sp, #0]
 800d0ec:	4b09      	ldr	r3, [pc, #36]	; (800d114 <OnBeaconStatusChange+0xc8>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	2002      	movs	r0, #2
 800d0f4:	f012 fc1e 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d0f8:	e006      	b.n	800d108 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d0fa:	4b07      	ldr	r3, [pc, #28]	; (800d118 <OnBeaconStatusChange+0xcc>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2100      	movs	r1, #0
 800d100:	2002      	movs	r0, #2
 800d102:	f012 fc17 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d106:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800d108:	bf00      	nop
 800d10a:	371c      	adds	r7, #28
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d110:	08020324 	.word	0x08020324
 800d114:	0802033c 	.word	0x0802033c
 800d118:	080203b0 	.word	0x080203b0

0800d11c <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800d11c:	b480      	push	{r7}
 800d11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800d120:	bf00      	nop
 800d122:	46bd      	mov	sp, r7
 800d124:	bc80      	pop	{r7}
 800d126:	4770      	bx	lr

0800d128 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af02      	add	r7, sp, #8
 800d12e:	4603      	mov	r3, r0
 800d130:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800d132:	79fb      	ldrb	r3, [r7, #7]
 800d134:	4a06      	ldr	r2, [pc, #24]	; (800d150 <OnClassChange+0x28>)
 800d136:	5cd3      	ldrb	r3, [r2, r3]
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	4b06      	ldr	r3, [pc, #24]	; (800d154 <OnClassChange+0x2c>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	2100      	movs	r1, #0
 800d140:	2002      	movs	r0, #2
 800d142:	f012 fbf7 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800d146:	bf00      	nop
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	080203ec 	.word	0x080203ec
 800d154:	080203d0 	.word	0x080203d0

0800d158 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800d15c:	2100      	movs	r1, #0
 800d15e:	2001      	movs	r0, #1
 800d160:	f012 f8c4 	bl	801f2ec <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800d164:	bf00      	nop
 800d166:	bd80      	pop	{r7, pc}

0800d168 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800d170:	4a0d      	ldr	r2, [pc, #52]	; (800d1a8 <OnTxPeriodicityChanged+0x40>)
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800d176:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <OnTxPeriodicityChanged+0x40>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d103      	bne.n	800d186 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800d17e:	4b0a      	ldr	r3, [pc, #40]	; (800d1a8 <OnTxPeriodicityChanged+0x40>)
 800d180:	f242 7210 	movw	r2, #10000	; 0x2710
 800d184:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800d186:	4809      	ldr	r0, [pc, #36]	; (800d1ac <OnTxPeriodicityChanged+0x44>)
 800d188:	f012 f9ca 	bl	801f520 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800d18c:	4b06      	ldr	r3, [pc, #24]	; (800d1a8 <OnTxPeriodicityChanged+0x40>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4619      	mov	r1, r3
 800d192:	4806      	ldr	r0, [pc, #24]	; (800d1ac <OnTxPeriodicityChanged+0x44>)
 800d194:	f012 fa34 	bl	801f600 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800d198:	4804      	ldr	r0, [pc, #16]	; (800d1ac <OnTxPeriodicityChanged+0x44>)
 800d19a:	f012 f953 	bl	801f444 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800d19e:	bf00      	nop
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	20000088 	.word	0x20000088
 800d1ac:	20000380 	.word	0x20000380

0800d1b0 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800d1ba:	4a04      	ldr	r2, [pc, #16]	; (800d1cc <OnTxFrameCtrlChanged+0x1c>)
 800d1bc:	79fb      	ldrb	r3, [r7, #7]
 800d1be:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bc80      	pop	{r7}
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	20000070 	.word	0x20000070

0800d1d0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800d1da:	4a04      	ldr	r2, [pc, #16]	; (800d1ec <OnPingSlotPeriodicityChanged+0x1c>)
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
 800d1de:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800d1e0:	bf00      	nop
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bc80      	pop	{r7}
 800d1e8:	4770      	bx	lr
 800d1ea:	bf00      	nop
 800d1ec:	20000070 	.word	0x20000070

0800d1f0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d1f4:	f002 fda5 	bl	800fd42 <LmHandlerHalt>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d106      	bne.n	800d20c <OnSystemReset+0x1c>
 800d1fe:	f002 f849 	bl	800f294 <LmHandlerJoinStatus>
 800d202:	4603      	mov	r3, r0
 800d204:	2b01      	cmp	r3, #1
 800d206:	d101      	bne.n	800d20c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800d208:	f7ff faf2 	bl	800c7f0 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800d20c:	bf00      	nop
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <StopJoin>:

static void StopJoin(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800d214:	4817      	ldr	r0, [pc, #92]	; (800d274 <StopJoin+0x64>)
 800d216:	f012 f983 	bl	801f520 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800d21a:	f002 fd85 	bl	800fd28 <LmHandlerStop>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d006      	beq.n	800d232 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800d224:	4b14      	ldr	r3, [pc, #80]	; (800d278 <StopJoin+0x68>)
 800d226:	2200      	movs	r2, #0
 800d228:	2100      	movs	r1, #0
 800d22a:	2002      	movs	r0, #2
 800d22c:	f012 fb82 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
 800d230:	e01a      	b.n	800d268 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800d232:	4b12      	ldr	r3, [pc, #72]	; (800d27c <StopJoin+0x6c>)
 800d234:	2200      	movs	r2, #0
 800d236:	2100      	movs	r1, #0
 800d238:	2002      	movs	r0, #2
 800d23a:	f012 fb7b 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800d23e:	4b10      	ldr	r3, [pc, #64]	; (800d280 <StopJoin+0x70>)
 800d240:	2201      	movs	r2, #1
 800d242:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800d244:	4b0f      	ldr	r3, [pc, #60]	; (800d284 <StopJoin+0x74>)
 800d246:	2200      	movs	r2, #0
 800d248:	2100      	movs	r1, #0
 800d24a:	2002      	movs	r0, #2
 800d24c:	f012 fb72 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800d250:	480d      	ldr	r0, [pc, #52]	; (800d288 <StopJoin+0x78>)
 800d252:	f001 fe25 	bl	800eea0 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800d256:	4b0a      	ldr	r3, [pc, #40]	; (800d280 <StopJoin+0x70>)
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	2101      	movs	r1, #1
 800d25c:	4618      	mov	r0, r3
 800d25e:	f001 ff77 	bl	800f150 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800d262:	4804      	ldr	r0, [pc, #16]	; (800d274 <StopJoin+0x64>)
 800d264:	f012 f8ee 	bl	801f444 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800d268:	4808      	ldr	r0, [pc, #32]	; (800d28c <StopJoin+0x7c>)
 800d26a:	f012 f8eb 	bl	801f444 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800d26e:	bf00      	nop
 800d270:	bd80      	pop	{r7, pc}
 800d272:	bf00      	nop
 800d274:	20000380 	.word	0x20000380
 800d278:	080203f0 	.word	0x080203f0
 800d27c:	08020410 	.word	0x08020410
 800d280:	20000020 	.word	0x20000020
 800d284:	08020424 	.word	0x08020424
 800d288:	20000070 	.word	0x20000070
 800d28c:	20000398 	.word	0x20000398

0800d290 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800d298:	4b05      	ldr	r3, [pc, #20]	; (800d2b0 <OnStopJoinTimerEvent+0x20>)
 800d29a:	781b      	ldrb	r3, [r3, #0]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d103      	bne.n	800d2a8 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	2008      	movs	r0, #8
 800d2a4:	f012 f822 	bl	801f2ec <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800d2a8:	bf00      	nop
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	20000020 	.word	0x20000020

0800d2b4 <StoreContext>:

static void StoreContext(void)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d2ba:	23ff      	movs	r3, #255	; 0xff
 800d2bc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800d2be:	f002 fd75 	bl	800fdac <LmHandlerNvmDataStore>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800d2c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2ca:	f113 0f08 	cmn.w	r3, #8
 800d2ce:	d106      	bne.n	800d2de <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800d2d0:	4b0a      	ldr	r3, [pc, #40]	; (800d2fc <StoreContext+0x48>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	2002      	movs	r0, #2
 800d2d8:	f012 fb2c 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800d2dc:	e00a      	b.n	800d2f4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800d2de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2e6:	d105      	bne.n	800d2f4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800d2e8:	4b05      	ldr	r3, [pc, #20]	; (800d300 <StoreContext+0x4c>)
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	2100      	movs	r1, #0
 800d2ee:	2002      	movs	r0, #2
 800d2f0:	f012 fb20 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 800d2f4:	bf00      	nop
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	08020444 	.word	0x08020444
 800d300:	0802045c 	.word	0x0802045c

0800d304 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b082      	sub	sp, #8
 800d308:	af00      	add	r7, sp, #0
 800d30a:	4603      	mov	r3, r0
 800d30c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800d30e:	79fb      	ldrb	r3, [r7, #7]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d106      	bne.n	800d322 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800d314:	4b08      	ldr	r3, [pc, #32]	; (800d338 <OnNvmDataChange+0x34>)
 800d316:	2200      	movs	r2, #0
 800d318:	2100      	movs	r1, #0
 800d31a:	2002      	movs	r0, #2
 800d31c:	f012 fb0a 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800d320:	e005      	b.n	800d32e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800d322:	4b06      	ldr	r3, [pc, #24]	; (800d33c <OnNvmDataChange+0x38>)
 800d324:	2200      	movs	r2, #0
 800d326:	2100      	movs	r1, #0
 800d328:	2002      	movs	r0, #2
 800d32a:	f012 fb03 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 800d32e:	bf00      	nop
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	08020474 	.word	0x08020474
 800d33c:	08020488 	.word	0x08020488

0800d340 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b082      	sub	sp, #8
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800d34a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d34e:	4807      	ldr	r0, [pc, #28]	; (800d36c <OnStoreContextRequest+0x2c>)
 800d350:	f7f4 f9ac 	bl	80016ac <FLASH_IF_Erase>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d104      	bne.n	800d364 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	6879      	ldr	r1, [r7, #4]
 800d35e:	4803      	ldr	r0, [pc, #12]	; (800d36c <OnStoreContextRequest+0x2c>)
 800d360:	f7f4 f954 	bl	800160c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800d364:	bf00      	nop
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	0803f000 	.word	0x0803f000

0800d370 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	4903      	ldr	r1, [pc, #12]	; (800d38c <OnRestoreContextRequest+0x1c>)
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7f4 f96c 	bl	800165c <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	0803f000 	.word	0x0803f000

0800d390 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800d394:	4b18      	ldr	r3, [pc, #96]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d396:	2200      	movs	r2, #0
 800d398:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800d39a:	4b17      	ldr	r3, [pc, #92]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d39c:	2200      	movs	r2, #0
 800d39e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800d3a0:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800d3a6:	4b14      	ldr	r3, [pc, #80]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800d3ac:	4b12      	ldr	r3, [pc, #72]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f043 0320 	orr.w	r3, r3, #32
 800d3b4:	4a10      	ldr	r2, [pc, #64]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3b6:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800d3b8:	4b0f      	ldr	r3, [pc, #60]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3c0:	4a0d      	ldr	r2, [pc, #52]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3c2:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800d3c4:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d10c      	bne.n	800d3e6 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800d3cc:	4b0b      	ldr	r3, [pc, #44]	; (800d3fc <LoraInfo_Init+0x6c>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	2000      	movs	r0, #0
 800d3d4:	f012 faae 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800d3d8:	bf00      	nop
 800d3da:	f012 fa99 	bl	801f910 <UTIL_ADV_TRACE_IsBufferEmpty>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d1fa      	bne.n	800d3da <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800d3e4:	e7fe      	b.n	800d3e4 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800d3e6:	4b04      	ldr	r3, [pc, #16]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800d3ec:	4b02      	ldr	r3, [pc, #8]	; (800d3f8 <LoraInfo_Init+0x68>)
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800d3f2:	bf00      	nop
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	200004ec 	.word	0x200004ec
 800d3fc:	0802049c 	.word	0x0802049c

0800d400 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800d400:	b480      	push	{r7}
 800d402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800d404:	4b02      	ldr	r3, [pc, #8]	; (800d410 <LoraInfo_GetPtr+0x10>)
}
 800d406:	4618      	mov	r0, r3
 800d408:	46bd      	mov	sp, r7
 800d40a:	bc80      	pop	{r7}
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	200004ec 	.word	0x200004ec

0800d414 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d418:	f7f7 fb8f 	bl	8004b3a <BSP_RADIO_Init>
 800d41c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d41e:	4618      	mov	r0, r3
 800d420:	bd80      	pop	{r7, pc}

0800d422 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d422:	b580      	push	{r7, lr}
 800d424:	b082      	sub	sp, #8
 800d426:	af00      	add	r7, sp, #0
 800d428:	4603      	mov	r3, r0
 800d42a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	4618      	mov	r0, r3
 800d430:	f7f7 fbb4 	bl	8004b9c <BSP_RADIO_ConfigRFSwitch>
 800d434:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d436:	4618      	mov	r0, r3
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d442:	f7f7 fbf9 	bl	8004c38 <BSP_RADIO_GetTxConfig>
 800d446:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d448:	4618      	mov	r0, r3
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d450:	f7f7 fbf9 	bl	8004c46 <BSP_RADIO_IsTCXO>
 800d454:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d456:	4618      	mov	r0, r3
 800d458:	bd80      	pop	{r7, pc}

0800d45a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d45e:	f7f7 fbf9 	bl	8004c54 <BSP_RADIO_IsDCDC>
 800d462:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d464:	4618      	mov	r0, r3
 800d466:	bd80      	pop	{r7, pc}

0800d468 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	4603      	mov	r3, r0
 800d470:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d472:	79fb      	ldrb	r3, [r7, #7]
 800d474:	4618      	mov	r0, r3
 800d476:	f7f7 fbf4 	bl	8004c62 <BSP_RADIO_GetRFOMaxPowerConfig>
 800d47a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	33f1      	adds	r3, #241	; 0xf1
 800d490:	2210      	movs	r2, #16
 800d492:	2100      	movs	r1, #0
 800d494:	4618      	mov	r0, r3
 800d496:	f00e f821 	bl	801b4dc <memset1>
    ctx->M_n = 0;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	22f0      	movs	r2, #240	; 0xf0
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f00e f817 	bl	801b4dc <memset1>
}
 800d4ae:	bf00      	nop
 800d4b0:	3708      	adds	r7, #8
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b082      	sub	sp, #8
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	461a      	mov	r2, r3
 800d4c4:	2110      	movs	r1, #16
 800d4c6:	6838      	ldr	r0, [r7, #0]
 800d4c8:	f000 fe5c 	bl	800e184 <lorawan_aes_set_key>
}
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08c      	sub	sp, #48	; 0x30
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f000 80a1 	beq.w	800d62e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d4f2:	f1c3 0310 	rsb	r3, r3, #16
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	bf28      	it	cs
 800d4fc:	4613      	movcs	r3, r2
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f203 1201 	addw	r2, r3, #257	; 0x101
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d50c:	4413      	add	r3, r2
 800d50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d510:	b292      	uxth	r2, r2
 800d512:	68b9      	ldr	r1, [r7, #8]
 800d514:	4618      	mov	r0, r3
 800d516:	f00d ffa6 	bl	801b466 <memcpy1>
        ctx->M_n += mlen;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	441a      	add	r2, r3
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d530:	2b0f      	cmp	r3, #15
 800d532:	f240 808d 	bls.w	800d650 <AES_CMAC_Update+0x17c>
 800d536:	687a      	ldr	r2, [r7, #4]
 800d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53a:	429a      	cmp	r2, r3
 800d53c:	f000 8088 	beq.w	800d650 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800d540:	2300      	movs	r3, #0
 800d542:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d544:	e015      	b.n	800d572 <AES_CMAC_Update+0x9e>
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	4413      	add	r3, r2
 800d54c:	33f1      	adds	r3, #241	; 0xf1
 800d54e:	781a      	ldrb	r2, [r3, #0]
 800d550:	68f9      	ldr	r1, [r7, #12]
 800d552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d554:	440b      	add	r3, r1
 800d556:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	4053      	eors	r3, r2
 800d55e:	b2d9      	uxtb	r1, r3
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	4413      	add	r3, r2
 800d566:	33f1      	adds	r3, #241	; 0xf1
 800d568:	460a      	mov	r2, r1
 800d56a:	701a      	strb	r2, [r3, #0]
 800d56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56e:	3301      	adds	r3, #1
 800d570:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	2b0f      	cmp	r3, #15
 800d576:	dde6      	ble.n	800d546 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d57e:	f107 0314 	add.w	r3, r7, #20
 800d582:	2210      	movs	r2, #16
 800d584:	4618      	mov	r0, r3
 800d586:	f00d ff6e 	bl	801b466 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	f107 0114 	add.w	r1, r7, #20
 800d590:	f107 0314 	add.w	r3, r7, #20
 800d594:	4618      	mov	r0, r3
 800d596:	f000 fed3 	bl	800e340 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	33f1      	adds	r3, #241	; 0xf1
 800d59e:	f107 0114 	add.w	r1, r7, #20
 800d5a2:	2210      	movs	r2, #16
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f00d ff5e 	bl	801b466 <memcpy1>

        data += mlen;
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ae:	4413      	add	r3, r2
 800d5b0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800d5ba:	e038      	b.n	800d62e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800d5bc:	2300      	movs	r3, #0
 800d5be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5c0:	e013      	b.n	800d5ea <AES_CMAC_Update+0x116>
 800d5c2:	68fa      	ldr	r2, [r7, #12]
 800d5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c6:	4413      	add	r3, r2
 800d5c8:	33f1      	adds	r3, #241	; 0xf1
 800d5ca:	781a      	ldrb	r2, [r3, #0]
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	68b9      	ldr	r1, [r7, #8]
 800d5d0:	440b      	add	r3, r1
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	4053      	eors	r3, r2
 800d5d6:	b2d9      	uxtb	r1, r3
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5dc:	4413      	add	r3, r2
 800d5de:	33f1      	adds	r3, #241	; 0xf1
 800d5e0:	460a      	mov	r2, r1
 800d5e2:	701a      	strb	r2, [r3, #0]
 800d5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ec:	2b0f      	cmp	r3, #15
 800d5ee:	dde8      	ble.n	800d5c2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d5f6:	f107 0314 	add.w	r3, r7, #20
 800d5fa:	2210      	movs	r2, #16
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f00d ff32 	bl	801b466 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	f107 0114 	add.w	r1, r7, #20
 800d608:	f107 0314 	add.w	r3, r7, #20
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 fe97 	bl	800e340 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	33f1      	adds	r3, #241	; 0xf1
 800d616:	f107 0114 	add.w	r1, r7, #20
 800d61a:	2210      	movs	r2, #16
 800d61c:	4618      	mov	r0, r3
 800d61e:	f00d ff22 	bl	801b466 <memcpy1>

        data += 16;
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	3310      	adds	r3, #16
 800d626:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3b10      	subs	r3, #16
 800d62c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b10      	cmp	r3, #16
 800d632:	d8c3      	bhi.n	800d5bc <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	b292      	uxth	r2, r2
 800d63e:	68b9      	ldr	r1, [r7, #8]
 800d640:	4618      	mov	r0, r3
 800d642:	f00d ff10 	bl	801b466 <memcpy1>
    ctx->M_n = len;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d64e:	e000      	b.n	800d652 <AES_CMAC_Update+0x17e>
            return;
 800d650:	bf00      	nop
}
 800d652:	3730      	adds	r7, #48	; 0x30
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b092      	sub	sp, #72	; 0x48
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800d662:	f107 031c 	add.w	r3, r7, #28
 800d666:	2210      	movs	r2, #16
 800d668:	2100      	movs	r1, #0
 800d66a:	4618      	mov	r0, r3
 800d66c:	f00d ff36 	bl	801b4dc <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800d670:	683a      	ldr	r2, [r7, #0]
 800d672:	f107 011c 	add.w	r1, r7, #28
 800d676:	f107 031c 	add.w	r3, r7, #28
 800d67a:	4618      	mov	r0, r3
 800d67c:	f000 fe60 	bl	800e340 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800d680:	7f3b      	ldrb	r3, [r7, #28]
 800d682:	b25b      	sxtb	r3, r3
 800d684:	2b00      	cmp	r3, #0
 800d686:	da30      	bge.n	800d6ea <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800d688:	2300      	movs	r3, #0
 800d68a:	647b      	str	r3, [r7, #68]	; 0x44
 800d68c:	e01b      	b.n	800d6c6 <AES_CMAC_Final+0x6e>
 800d68e:	f107 021c 	add.w	r2, r7, #28
 800d692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d694:	4413      	add	r3, r2
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	005b      	lsls	r3, r3, #1
 800d69a:	b25a      	sxtb	r2, r3
 800d69c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d69e:	3301      	adds	r3, #1
 800d6a0:	3348      	adds	r3, #72	; 0x48
 800d6a2:	443b      	add	r3, r7
 800d6a4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d6a8:	09db      	lsrs	r3, r3, #7
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	b25b      	sxtb	r3, r3
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	b25b      	sxtb	r3, r3
 800d6b2:	b2d9      	uxtb	r1, r3
 800d6b4:	f107 021c 	add.w	r2, r7, #28
 800d6b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ba:	4413      	add	r3, r2
 800d6bc:	460a      	mov	r2, r1
 800d6be:	701a      	strb	r2, [r3, #0]
 800d6c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6c8:	2b0e      	cmp	r3, #14
 800d6ca:	dde0      	ble.n	800d68e <AES_CMAC_Final+0x36>
 800d6cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800d6d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6dc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800d6e0:	43db      	mvns	r3, r3
 800d6e2:	b2db      	uxtb	r3, r3
 800d6e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6e8:	e027      	b.n	800d73a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	643b      	str	r3, [r7, #64]	; 0x40
 800d6ee:	e01b      	b.n	800d728 <AES_CMAC_Final+0xd0>
 800d6f0:	f107 021c 	add.w	r2, r7, #28
 800d6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6f6:	4413      	add	r3, r2
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	005b      	lsls	r3, r3, #1
 800d6fc:	b25a      	sxtb	r2, r3
 800d6fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d700:	3301      	adds	r3, #1
 800d702:	3348      	adds	r3, #72	; 0x48
 800d704:	443b      	add	r3, r7
 800d706:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d70a:	09db      	lsrs	r3, r3, #7
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	b25b      	sxtb	r3, r3
 800d710:	4313      	orrs	r3, r2
 800d712:	b25b      	sxtb	r3, r3
 800d714:	b2d9      	uxtb	r1, r3
 800d716:	f107 021c 	add.w	r2, r7, #28
 800d71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d71c:	4413      	add	r3, r2
 800d71e:	460a      	mov	r2, r1
 800d720:	701a      	strb	r2, [r3, #0]
 800d722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d724:	3301      	adds	r3, #1
 800d726:	643b      	str	r3, [r7, #64]	; 0x40
 800d728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d72a:	2b0e      	cmp	r3, #14
 800d72c:	dde0      	ble.n	800d6f0 <AES_CMAC_Final+0x98>
 800d72e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d732:	005b      	lsls	r3, r3, #1
 800d734:	b2db      	uxtb	r3, r3
 800d736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d740:	2b10      	cmp	r3, #16
 800d742:	d11d      	bne.n	800d780 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800d744:	2300      	movs	r3, #0
 800d746:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d748:	e016      	b.n	800d778 <AES_CMAC_Final+0x120>
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d74e:	4413      	add	r3, r2
 800d750:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d754:	781a      	ldrb	r2, [r3, #0]
 800d756:	f107 011c 	add.w	r1, r7, #28
 800d75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75c:	440b      	add	r3, r1
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	4053      	eors	r3, r2
 800d762:	b2d9      	uxtb	r1, r3
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d768:	4413      	add	r3, r2
 800d76a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d76e:	460a      	mov	r2, r1
 800d770:	701a      	strb	r2, [r3, #0]
 800d772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d774:	3301      	adds	r3, #1
 800d776:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d77a:	2b0f      	cmp	r3, #15
 800d77c:	dde5      	ble.n	800d74a <AES_CMAC_Final+0xf2>
 800d77e:	e096      	b.n	800d8ae <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800d780:	7f3b      	ldrb	r3, [r7, #28]
 800d782:	b25b      	sxtb	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	da30      	bge.n	800d7ea <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800d788:	2300      	movs	r3, #0
 800d78a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d78c:	e01b      	b.n	800d7c6 <AES_CMAC_Final+0x16e>
 800d78e:	f107 021c 	add.w	r2, r7, #28
 800d792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d794:	4413      	add	r3, r2
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	005b      	lsls	r3, r3, #1
 800d79a:	b25a      	sxtb	r2, r3
 800d79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d79e:	3301      	adds	r3, #1
 800d7a0:	3348      	adds	r3, #72	; 0x48
 800d7a2:	443b      	add	r3, r7
 800d7a4:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d7a8:	09db      	lsrs	r3, r3, #7
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	b25b      	sxtb	r3, r3
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	b25b      	sxtb	r3, r3
 800d7b2:	b2d9      	uxtb	r1, r3
 800d7b4:	f107 021c 	add.w	r2, r7, #28
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ba:	4413      	add	r3, r2
 800d7bc:	460a      	mov	r2, r1
 800d7be:	701a      	strb	r2, [r3, #0]
 800d7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	2b0e      	cmp	r3, #14
 800d7ca:	dde0      	ble.n	800d78e <AES_CMAC_Final+0x136>
 800d7cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800d7d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7dc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800d7e0:	43db      	mvns	r3, r3
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d7e8:	e027      	b.n	800d83a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	637b      	str	r3, [r7, #52]	; 0x34
 800d7ee:	e01b      	b.n	800d828 <AES_CMAC_Final+0x1d0>
 800d7f0:	f107 021c 	add.w	r2, r7, #28
 800d7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7f6:	4413      	add	r3, r2
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	005b      	lsls	r3, r3, #1
 800d7fc:	b25a      	sxtb	r2, r3
 800d7fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d800:	3301      	adds	r3, #1
 800d802:	3348      	adds	r3, #72	; 0x48
 800d804:	443b      	add	r3, r7
 800d806:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800d80a:	09db      	lsrs	r3, r3, #7
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	b25b      	sxtb	r3, r3
 800d810:	4313      	orrs	r3, r2
 800d812:	b25b      	sxtb	r3, r3
 800d814:	b2d9      	uxtb	r1, r3
 800d816:	f107 021c 	add.w	r2, r7, #28
 800d81a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d81c:	4413      	add	r3, r2
 800d81e:	460a      	mov	r2, r1
 800d820:	701a      	strb	r2, [r3, #0]
 800d822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d824:	3301      	adds	r3, #1
 800d826:	637b      	str	r3, [r7, #52]	; 0x34
 800d828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d82a:	2b0e      	cmp	r3, #14
 800d82c:	dde0      	ble.n	800d7f0 <AES_CMAC_Final+0x198>
 800d82e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	b2db      	uxtb	r3, r3
 800d836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	4413      	add	r3, r2
 800d844:	2280      	movs	r2, #128	; 0x80
 800d846:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d84a:	e007      	b.n	800d85c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	4413      	add	r3, r2
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800d870:	2b0f      	cmp	r3, #15
 800d872:	d9eb      	bls.n	800d84c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800d874:	2300      	movs	r3, #0
 800d876:	633b      	str	r3, [r7, #48]	; 0x30
 800d878:	e016      	b.n	800d8a8 <AES_CMAC_Final+0x250>
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	4413      	add	r3, r2
 800d880:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d884:	781a      	ldrb	r2, [r3, #0]
 800d886:	f107 011c 	add.w	r1, r7, #28
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	440b      	add	r3, r1
 800d88e:	781b      	ldrb	r3, [r3, #0]
 800d890:	4053      	eors	r3, r2
 800d892:	b2d9      	uxtb	r1, r3
 800d894:	683a      	ldr	r2, [r7, #0]
 800d896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d898:	4413      	add	r3, r2
 800d89a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d89e:	460a      	mov	r2, r1
 800d8a0:	701a      	strb	r2, [r3, #0]
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	633b      	str	r3, [r7, #48]	; 0x30
 800d8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8aa:	2b0f      	cmp	r3, #15
 800d8ac:	dde5      	ble.n	800d87a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8b2:	e015      	b.n	800d8e0 <AES_CMAC_Final+0x288>
 800d8b4:	683a      	ldr	r2, [r7, #0]
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	4413      	add	r3, r2
 800d8ba:	33f1      	adds	r3, #241	; 0xf1
 800d8bc:	781a      	ldrb	r2, [r3, #0]
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c2:	440b      	add	r3, r1
 800d8c4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	4053      	eors	r3, r2
 800d8cc:	b2d9      	uxtb	r1, r3
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d2:	4413      	add	r3, r2
 800d8d4:	33f1      	adds	r3, #241	; 0xf1
 800d8d6:	460a      	mov	r2, r1
 800d8d8:	701a      	strb	r2, [r3, #0]
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	3301      	adds	r3, #1
 800d8de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	2b0f      	cmp	r3, #15
 800d8e4:	dde6      	ble.n	800d8b4 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800d8ec:	f107 030c 	add.w	r3, r7, #12
 800d8f0:	2210      	movs	r2, #16
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f00d fdb7 	bl	801b466 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800d8f8:	683a      	ldr	r2, [r7, #0]
 800d8fa:	f107 030c 	add.w	r3, r7, #12
 800d8fe:	6879      	ldr	r1, [r7, #4]
 800d900:	4618      	mov	r0, r3
 800d902:	f000 fd1d 	bl	800e340 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800d906:	f107 031c 	add.w	r3, r7, #28
 800d90a:	2210      	movs	r2, #16
 800d90c:	2100      	movs	r1, #0
 800d90e:	4618      	mov	r0, r3
 800d910:	f00d fde4 	bl	801b4dc <memset1>
}
 800d914:	bf00      	nop
 800d916:	3748      	adds	r7, #72	; 0x48
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	781a      	ldrb	r2, [r3, #0]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3301      	adds	r3, #1
 800d932:	683a      	ldr	r2, [r7, #0]
 800d934:	7852      	ldrb	r2, [r2, #1]
 800d936:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	3302      	adds	r3, #2
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	7892      	ldrb	r2, [r2, #2]
 800d940:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	3303      	adds	r3, #3
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	78d2      	ldrb	r2, [r2, #3]
 800d94a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	3304      	adds	r3, #4
 800d950:	683a      	ldr	r2, [r7, #0]
 800d952:	7912      	ldrb	r2, [r2, #4]
 800d954:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	3305      	adds	r3, #5
 800d95a:	683a      	ldr	r2, [r7, #0]
 800d95c:	7952      	ldrb	r2, [r2, #5]
 800d95e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	3306      	adds	r3, #6
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	7992      	ldrb	r2, [r2, #6]
 800d968:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	3307      	adds	r3, #7
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	79d2      	ldrb	r2, [r2, #7]
 800d972:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3308      	adds	r3, #8
 800d978:	683a      	ldr	r2, [r7, #0]
 800d97a:	7a12      	ldrb	r2, [r2, #8]
 800d97c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	3309      	adds	r3, #9
 800d982:	683a      	ldr	r2, [r7, #0]
 800d984:	7a52      	ldrb	r2, [r2, #9]
 800d986:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	330a      	adds	r3, #10
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	7a92      	ldrb	r2, [r2, #10]
 800d990:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	330b      	adds	r3, #11
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	7ad2      	ldrb	r2, [r2, #11]
 800d99a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	330c      	adds	r3, #12
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	7b12      	ldrb	r2, [r2, #12]
 800d9a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	330d      	adds	r3, #13
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	7b52      	ldrb	r2, [r2, #13]
 800d9ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	330e      	adds	r3, #14
 800d9b4:	683a      	ldr	r2, [r7, #0]
 800d9b6:	7b92      	ldrb	r2, [r2, #14]
 800d9b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	330f      	adds	r3, #15
 800d9be:	683a      	ldr	r2, [r7, #0]
 800d9c0:	7bd2      	ldrb	r2, [r2, #15]
 800d9c2:	701a      	strb	r2, [r3, #0]
#endif
}
 800d9c4:	bf00      	nop
 800d9c6:	370c      	adds	r7, #12
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bc80      	pop	{r7}
 800d9cc:	4770      	bx	lr

0800d9ce <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b085      	sub	sp, #20
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	60f8      	str	r0, [r7, #12]
 800d9d6:	60b9      	str	r1, [r7, #8]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800d9dc:	e007      	b.n	800d9ee <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	1c53      	adds	r3, r2, #1
 800d9e2:	60bb      	str	r3, [r7, #8]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	1c59      	adds	r1, r3, #1
 800d9e8:	60f9      	str	r1, [r7, #12]
 800d9ea:	7812      	ldrb	r2, [r2, #0]
 800d9ec:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800d9ee:	79fb      	ldrb	r3, [r7, #7]
 800d9f0:	1e5a      	subs	r2, r3, #1
 800d9f2:	71fa      	strb	r2, [r7, #7]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d1f2      	bne.n	800d9de <copy_block_nn+0x10>
}
 800d9f8:	bf00      	nop
 800d9fa:	bf00      	nop
 800d9fc:	3714      	adds	r7, #20
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bc80      	pop	{r7}
 800da02:	4770      	bx	lr

0800da04 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	781a      	ldrb	r2, [r3, #0]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	4053      	eors	r3, r2
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	3301      	adds	r3, #1
 800da22:	7819      	ldrb	r1, [r3, #0]
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	3301      	adds	r3, #1
 800da28:	781a      	ldrb	r2, [r3, #0]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	3301      	adds	r3, #1
 800da2e:	404a      	eors	r2, r1
 800da30:	b2d2      	uxtb	r2, r2
 800da32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	3302      	adds	r3, #2
 800da38:	7819      	ldrb	r1, [r3, #0]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	3302      	adds	r3, #2
 800da3e:	781a      	ldrb	r2, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3302      	adds	r3, #2
 800da44:	404a      	eors	r2, r1
 800da46:	b2d2      	uxtb	r2, r2
 800da48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	3303      	adds	r3, #3
 800da4e:	7819      	ldrb	r1, [r3, #0]
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	3303      	adds	r3, #3
 800da54:	781a      	ldrb	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	3303      	adds	r3, #3
 800da5a:	404a      	eors	r2, r1
 800da5c:	b2d2      	uxtb	r2, r2
 800da5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	3304      	adds	r3, #4
 800da64:	7819      	ldrb	r1, [r3, #0]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	3304      	adds	r3, #4
 800da6a:	781a      	ldrb	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	3304      	adds	r3, #4
 800da70:	404a      	eors	r2, r1
 800da72:	b2d2      	uxtb	r2, r2
 800da74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	3305      	adds	r3, #5
 800da7a:	7819      	ldrb	r1, [r3, #0]
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	3305      	adds	r3, #5
 800da80:	781a      	ldrb	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	3305      	adds	r3, #5
 800da86:	404a      	eors	r2, r1
 800da88:	b2d2      	uxtb	r2, r2
 800da8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	3306      	adds	r3, #6
 800da90:	7819      	ldrb	r1, [r3, #0]
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	3306      	adds	r3, #6
 800da96:	781a      	ldrb	r2, [r3, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	3306      	adds	r3, #6
 800da9c:	404a      	eors	r2, r1
 800da9e:	b2d2      	uxtb	r2, r2
 800daa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	3307      	adds	r3, #7
 800daa6:	7819      	ldrb	r1, [r3, #0]
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	3307      	adds	r3, #7
 800daac:	781a      	ldrb	r2, [r3, #0]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	3307      	adds	r3, #7
 800dab2:	404a      	eors	r2, r1
 800dab4:	b2d2      	uxtb	r2, r2
 800dab6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	3308      	adds	r3, #8
 800dabc:	7819      	ldrb	r1, [r3, #0]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	3308      	adds	r3, #8
 800dac2:	781a      	ldrb	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	3308      	adds	r3, #8
 800dac8:	404a      	eors	r2, r1
 800daca:	b2d2      	uxtb	r2, r2
 800dacc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	3309      	adds	r3, #9
 800dad2:	7819      	ldrb	r1, [r3, #0]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	3309      	adds	r3, #9
 800dad8:	781a      	ldrb	r2, [r3, #0]
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	3309      	adds	r3, #9
 800dade:	404a      	eors	r2, r1
 800dae0:	b2d2      	uxtb	r2, r2
 800dae2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	330a      	adds	r3, #10
 800dae8:	7819      	ldrb	r1, [r3, #0]
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	330a      	adds	r3, #10
 800daee:	781a      	ldrb	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	330a      	adds	r3, #10
 800daf4:	404a      	eors	r2, r1
 800daf6:	b2d2      	uxtb	r2, r2
 800daf8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	330b      	adds	r3, #11
 800dafe:	7819      	ldrb	r1, [r3, #0]
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	330b      	adds	r3, #11
 800db04:	781a      	ldrb	r2, [r3, #0]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	330b      	adds	r3, #11
 800db0a:	404a      	eors	r2, r1
 800db0c:	b2d2      	uxtb	r2, r2
 800db0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	330c      	adds	r3, #12
 800db14:	7819      	ldrb	r1, [r3, #0]
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	330c      	adds	r3, #12
 800db1a:	781a      	ldrb	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	330c      	adds	r3, #12
 800db20:	404a      	eors	r2, r1
 800db22:	b2d2      	uxtb	r2, r2
 800db24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	330d      	adds	r3, #13
 800db2a:	7819      	ldrb	r1, [r3, #0]
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	330d      	adds	r3, #13
 800db30:	781a      	ldrb	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	330d      	adds	r3, #13
 800db36:	404a      	eors	r2, r1
 800db38:	b2d2      	uxtb	r2, r2
 800db3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	330e      	adds	r3, #14
 800db40:	7819      	ldrb	r1, [r3, #0]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	330e      	adds	r3, #14
 800db46:	781a      	ldrb	r2, [r3, #0]
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	330e      	adds	r3, #14
 800db4c:	404a      	eors	r2, r1
 800db4e:	b2d2      	uxtb	r2, r2
 800db50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	330f      	adds	r3, #15
 800db56:	7819      	ldrb	r1, [r3, #0]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	330f      	adds	r3, #15
 800db5c:	781a      	ldrb	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	330f      	adds	r3, #15
 800db62:	404a      	eors	r2, r1
 800db64:	b2d2      	uxtb	r2, r2
 800db66:	701a      	strb	r2, [r3, #0]
#endif
}
 800db68:	bf00      	nop
 800db6a:	370c      	adds	r7, #12
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bc80      	pop	{r7}
 800db70:	4770      	bx	lr

0800db72 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800db72:	b480      	push	{r7}
 800db74:	b085      	sub	sp, #20
 800db76:	af00      	add	r7, sp, #0
 800db78:	60f8      	str	r0, [r7, #12]
 800db7a:	60b9      	str	r1, [r7, #8]
 800db7c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	781a      	ldrb	r2, [r3, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	4053      	eors	r3, r2
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	3301      	adds	r3, #1
 800db92:	7819      	ldrb	r1, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	3301      	adds	r3, #1
 800db98:	781a      	ldrb	r2, [r3, #0]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	3301      	adds	r3, #1
 800db9e:	404a      	eors	r2, r1
 800dba0:	b2d2      	uxtb	r2, r2
 800dba2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	3302      	adds	r3, #2
 800dba8:	7819      	ldrb	r1, [r3, #0]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	3302      	adds	r3, #2
 800dbae:	781a      	ldrb	r2, [r3, #0]
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3302      	adds	r3, #2
 800dbb4:	404a      	eors	r2, r1
 800dbb6:	b2d2      	uxtb	r2, r2
 800dbb8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	3303      	adds	r3, #3
 800dbbe:	7819      	ldrb	r1, [r3, #0]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	3303      	adds	r3, #3
 800dbc4:	781a      	ldrb	r2, [r3, #0]
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3303      	adds	r3, #3
 800dbca:	404a      	eors	r2, r1
 800dbcc:	b2d2      	uxtb	r2, r2
 800dbce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	7819      	ldrb	r1, [r3, #0]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	781a      	ldrb	r2, [r3, #0]
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	3304      	adds	r3, #4
 800dbe0:	404a      	eors	r2, r1
 800dbe2:	b2d2      	uxtb	r2, r2
 800dbe4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	3305      	adds	r3, #5
 800dbea:	7819      	ldrb	r1, [r3, #0]
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	3305      	adds	r3, #5
 800dbf0:	781a      	ldrb	r2, [r3, #0]
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	3305      	adds	r3, #5
 800dbf6:	404a      	eors	r2, r1
 800dbf8:	b2d2      	uxtb	r2, r2
 800dbfa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	3306      	adds	r3, #6
 800dc00:	7819      	ldrb	r1, [r3, #0]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	3306      	adds	r3, #6
 800dc06:	781a      	ldrb	r2, [r3, #0]
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	3306      	adds	r3, #6
 800dc0c:	404a      	eors	r2, r1
 800dc0e:	b2d2      	uxtb	r2, r2
 800dc10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	3307      	adds	r3, #7
 800dc16:	7819      	ldrb	r1, [r3, #0]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	3307      	adds	r3, #7
 800dc1c:	781a      	ldrb	r2, [r3, #0]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	3307      	adds	r3, #7
 800dc22:	404a      	eors	r2, r1
 800dc24:	b2d2      	uxtb	r2, r2
 800dc26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	3308      	adds	r3, #8
 800dc2c:	7819      	ldrb	r1, [r3, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3308      	adds	r3, #8
 800dc32:	781a      	ldrb	r2, [r3, #0]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	3308      	adds	r3, #8
 800dc38:	404a      	eors	r2, r1
 800dc3a:	b2d2      	uxtb	r2, r2
 800dc3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	3309      	adds	r3, #9
 800dc42:	7819      	ldrb	r1, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3309      	adds	r3, #9
 800dc48:	781a      	ldrb	r2, [r3, #0]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	3309      	adds	r3, #9
 800dc4e:	404a      	eors	r2, r1
 800dc50:	b2d2      	uxtb	r2, r2
 800dc52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	330a      	adds	r3, #10
 800dc58:	7819      	ldrb	r1, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	330a      	adds	r3, #10
 800dc5e:	781a      	ldrb	r2, [r3, #0]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	330a      	adds	r3, #10
 800dc64:	404a      	eors	r2, r1
 800dc66:	b2d2      	uxtb	r2, r2
 800dc68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	330b      	adds	r3, #11
 800dc6e:	7819      	ldrb	r1, [r3, #0]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	330b      	adds	r3, #11
 800dc74:	781a      	ldrb	r2, [r3, #0]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	330b      	adds	r3, #11
 800dc7a:	404a      	eors	r2, r1
 800dc7c:	b2d2      	uxtb	r2, r2
 800dc7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	330c      	adds	r3, #12
 800dc84:	7819      	ldrb	r1, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	330c      	adds	r3, #12
 800dc8a:	781a      	ldrb	r2, [r3, #0]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	330c      	adds	r3, #12
 800dc90:	404a      	eors	r2, r1
 800dc92:	b2d2      	uxtb	r2, r2
 800dc94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	330d      	adds	r3, #13
 800dc9a:	7819      	ldrb	r1, [r3, #0]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	330d      	adds	r3, #13
 800dca0:	781a      	ldrb	r2, [r3, #0]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	330d      	adds	r3, #13
 800dca6:	404a      	eors	r2, r1
 800dca8:	b2d2      	uxtb	r2, r2
 800dcaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	330e      	adds	r3, #14
 800dcb0:	7819      	ldrb	r1, [r3, #0]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	330e      	adds	r3, #14
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	330e      	adds	r3, #14
 800dcbc:	404a      	eors	r2, r1
 800dcbe:	b2d2      	uxtb	r2, r2
 800dcc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	330f      	adds	r3, #15
 800dcc6:	7819      	ldrb	r1, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	330f      	adds	r3, #15
 800dccc:	781a      	ldrb	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	330f      	adds	r3, #15
 800dcd2:	404a      	eors	r2, r1
 800dcd4:	b2d2      	uxtb	r2, r2
 800dcd6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800dcd8:	bf00      	nop
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bc80      	pop	{r7}
 800dce0:	4770      	bx	lr

0800dce2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800dce2:	b580      	push	{r7, lr}
 800dce4:	b082      	sub	sp, #8
 800dce6:	af00      	add	r7, sp, #0
 800dce8:	6078      	str	r0, [r7, #4]
 800dcea:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800dcec:	6839      	ldr	r1, [r7, #0]
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff fe88 	bl	800da04 <xor_block>
}
 800dcf4:	bf00      	nop
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	461a      	mov	r2, r3
 800dd0a:	4b48      	ldr	r3, [pc, #288]	; (800de2c <shift_sub_rows+0x130>)
 800dd0c:	5c9a      	ldrb	r2, [r3, r2]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	701a      	strb	r2, [r3, #0]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	3304      	adds	r3, #4
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	4619      	mov	r1, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	4a43      	ldr	r2, [pc, #268]	; (800de2c <shift_sub_rows+0x130>)
 800dd20:	5c52      	ldrb	r2, [r2, r1]
 800dd22:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	3308      	adds	r3, #8
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	3308      	adds	r3, #8
 800dd30:	4a3e      	ldr	r2, [pc, #248]	; (800de2c <shift_sub_rows+0x130>)
 800dd32:	5c52      	ldrb	r2, [r2, r1]
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	330c      	adds	r3, #12
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	4619      	mov	r1, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	330c      	adds	r3, #12
 800dd42:	4a3a      	ldr	r2, [pc, #232]	; (800de2c <shift_sub_rows+0x130>)
 800dd44:	5c52      	ldrb	r2, [r2, r1]
 800dd46:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	785b      	ldrb	r3, [r3, #1]
 800dd4c:	73fb      	strb	r3, [r7, #15]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	3305      	adds	r3, #5
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	4619      	mov	r1, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	4a34      	ldr	r2, [pc, #208]	; (800de2c <shift_sub_rows+0x130>)
 800dd5c:	5c52      	ldrb	r2, [r2, r1]
 800dd5e:	701a      	strb	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	3309      	adds	r3, #9
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	4619      	mov	r1, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3305      	adds	r3, #5
 800dd6c:	4a2f      	ldr	r2, [pc, #188]	; (800de2c <shift_sub_rows+0x130>)
 800dd6e:	5c52      	ldrb	r2, [r2, r1]
 800dd70:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	330d      	adds	r3, #13
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	4619      	mov	r1, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	3309      	adds	r3, #9
 800dd7e:	4a2b      	ldr	r2, [pc, #172]	; (800de2c <shift_sub_rows+0x130>)
 800dd80:	5c52      	ldrb	r2, [r2, r1]
 800dd82:	701a      	strb	r2, [r3, #0]
 800dd84:	7bfa      	ldrb	r2, [r7, #15]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	330d      	adds	r3, #13
 800dd8a:	4928      	ldr	r1, [pc, #160]	; (800de2c <shift_sub_rows+0x130>)
 800dd8c:	5c8a      	ldrb	r2, [r1, r2]
 800dd8e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	789b      	ldrb	r3, [r3, #2]
 800dd94:	73fb      	strb	r3, [r7, #15]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	330a      	adds	r3, #10
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	3302      	adds	r3, #2
 800dda2:	4a22      	ldr	r2, [pc, #136]	; (800de2c <shift_sub_rows+0x130>)
 800dda4:	5c52      	ldrb	r2, [r2, r1]
 800dda6:	701a      	strb	r2, [r3, #0]
 800dda8:	7bfa      	ldrb	r2, [r7, #15]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	330a      	adds	r3, #10
 800ddae:	491f      	ldr	r1, [pc, #124]	; (800de2c <shift_sub_rows+0x130>)
 800ddb0:	5c8a      	ldrb	r2, [r1, r2]
 800ddb2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	799b      	ldrb	r3, [r3, #6]
 800ddb8:	73fb      	strb	r3, [r7, #15]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	330e      	adds	r3, #14
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	3306      	adds	r3, #6
 800ddc6:	4a19      	ldr	r2, [pc, #100]	; (800de2c <shift_sub_rows+0x130>)
 800ddc8:	5c52      	ldrb	r2, [r2, r1]
 800ddca:	701a      	strb	r2, [r3, #0]
 800ddcc:	7bfa      	ldrb	r2, [r7, #15]
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	330e      	adds	r3, #14
 800ddd2:	4916      	ldr	r1, [pc, #88]	; (800de2c <shift_sub_rows+0x130>)
 800ddd4:	5c8a      	ldrb	r2, [r1, r2]
 800ddd6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	7bdb      	ldrb	r3, [r3, #15]
 800dddc:	73fb      	strb	r3, [r7, #15]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	330b      	adds	r3, #11
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	4619      	mov	r1, r3
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	330f      	adds	r3, #15
 800ddea:	4a10      	ldr	r2, [pc, #64]	; (800de2c <shift_sub_rows+0x130>)
 800ddec:	5c52      	ldrb	r2, [r2, r1]
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3307      	adds	r3, #7
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	330b      	adds	r3, #11
 800ddfc:	4a0b      	ldr	r2, [pc, #44]	; (800de2c <shift_sub_rows+0x130>)
 800ddfe:	5c52      	ldrb	r2, [r2, r1]
 800de00:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	3303      	adds	r3, #3
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	4619      	mov	r1, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	3307      	adds	r3, #7
 800de0e:	4a07      	ldr	r2, [pc, #28]	; (800de2c <shift_sub_rows+0x130>)
 800de10:	5c52      	ldrb	r2, [r2, r1]
 800de12:	701a      	strb	r2, [r3, #0]
 800de14:	7bfa      	ldrb	r2, [r7, #15]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	3303      	adds	r3, #3
 800de1a:	4904      	ldr	r1, [pc, #16]	; (800de2c <shift_sub_rows+0x130>)
 800de1c:	5c8a      	ldrb	r2, [r1, r2]
 800de1e:	701a      	strb	r2, [r3, #0]
}
 800de20:	bf00      	nop
 800de22:	3714      	adds	r7, #20
 800de24:	46bd      	mov	sp, r7
 800de26:	bc80      	pop	{r7}
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	080209fc 	.word	0x080209fc

0800de30 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800de38:	f107 0308 	add.w	r3, r7, #8
 800de3c:	6879      	ldr	r1, [r7, #4]
 800de3e:	4618      	mov	r0, r3
 800de40:	f7ff fd6c 	bl	800d91c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800de44:	7a3b      	ldrb	r3, [r7, #8]
 800de46:	461a      	mov	r2, r3
 800de48:	4b9a      	ldr	r3, [pc, #616]	; (800e0b4 <mix_sub_columns+0x284>)
 800de4a:	5c9a      	ldrb	r2, [r3, r2]
 800de4c:	7b7b      	ldrb	r3, [r7, #13]
 800de4e:	4619      	mov	r1, r3
 800de50:	4b99      	ldr	r3, [pc, #612]	; (800e0b8 <mix_sub_columns+0x288>)
 800de52:	5c5b      	ldrb	r3, [r3, r1]
 800de54:	4053      	eors	r3, r2
 800de56:	b2da      	uxtb	r2, r3
 800de58:	7cbb      	ldrb	r3, [r7, #18]
 800de5a:	4619      	mov	r1, r3
 800de5c:	4b97      	ldr	r3, [pc, #604]	; (800e0bc <mix_sub_columns+0x28c>)
 800de5e:	5c5b      	ldrb	r3, [r3, r1]
 800de60:	4053      	eors	r3, r2
 800de62:	b2da      	uxtb	r2, r3
 800de64:	7dfb      	ldrb	r3, [r7, #23]
 800de66:	4619      	mov	r1, r3
 800de68:	4b94      	ldr	r3, [pc, #592]	; (800e0bc <mix_sub_columns+0x28c>)
 800de6a:	5c5b      	ldrb	r3, [r3, r1]
 800de6c:	4053      	eors	r3, r2
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800de74:	7a3b      	ldrb	r3, [r7, #8]
 800de76:	461a      	mov	r2, r3
 800de78:	4b90      	ldr	r3, [pc, #576]	; (800e0bc <mix_sub_columns+0x28c>)
 800de7a:	5c9a      	ldrb	r2, [r3, r2]
 800de7c:	7b7b      	ldrb	r3, [r7, #13]
 800de7e:	4619      	mov	r1, r3
 800de80:	4b8c      	ldr	r3, [pc, #560]	; (800e0b4 <mix_sub_columns+0x284>)
 800de82:	5c5b      	ldrb	r3, [r3, r1]
 800de84:	4053      	eors	r3, r2
 800de86:	b2da      	uxtb	r2, r3
 800de88:	7cbb      	ldrb	r3, [r7, #18]
 800de8a:	4619      	mov	r1, r3
 800de8c:	4b8a      	ldr	r3, [pc, #552]	; (800e0b8 <mix_sub_columns+0x288>)
 800de8e:	5c5b      	ldrb	r3, [r3, r1]
 800de90:	4053      	eors	r3, r2
 800de92:	b2d9      	uxtb	r1, r3
 800de94:	7dfb      	ldrb	r3, [r7, #23]
 800de96:	461a      	mov	r2, r3
 800de98:	4b88      	ldr	r3, [pc, #544]	; (800e0bc <mix_sub_columns+0x28c>)
 800de9a:	5c9a      	ldrb	r2, [r3, r2]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	3301      	adds	r3, #1
 800dea0:	404a      	eors	r2, r1
 800dea2:	b2d2      	uxtb	r2, r2
 800dea4:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800dea6:	7a3b      	ldrb	r3, [r7, #8]
 800dea8:	461a      	mov	r2, r3
 800deaa:	4b84      	ldr	r3, [pc, #528]	; (800e0bc <mix_sub_columns+0x28c>)
 800deac:	5c9a      	ldrb	r2, [r3, r2]
 800deae:	7b7b      	ldrb	r3, [r7, #13]
 800deb0:	4619      	mov	r1, r3
 800deb2:	4b82      	ldr	r3, [pc, #520]	; (800e0bc <mix_sub_columns+0x28c>)
 800deb4:	5c5b      	ldrb	r3, [r3, r1]
 800deb6:	4053      	eors	r3, r2
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	7cbb      	ldrb	r3, [r7, #18]
 800debc:	4619      	mov	r1, r3
 800debe:	4b7d      	ldr	r3, [pc, #500]	; (800e0b4 <mix_sub_columns+0x284>)
 800dec0:	5c5b      	ldrb	r3, [r3, r1]
 800dec2:	4053      	eors	r3, r2
 800dec4:	b2d9      	uxtb	r1, r3
 800dec6:	7dfb      	ldrb	r3, [r7, #23]
 800dec8:	461a      	mov	r2, r3
 800deca:	4b7b      	ldr	r3, [pc, #492]	; (800e0b8 <mix_sub_columns+0x288>)
 800decc:	5c9a      	ldrb	r2, [r3, r2]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	3302      	adds	r3, #2
 800ded2:	404a      	eors	r2, r1
 800ded4:	b2d2      	uxtb	r2, r2
 800ded6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800ded8:	7a3b      	ldrb	r3, [r7, #8]
 800deda:	461a      	mov	r2, r3
 800dedc:	4b76      	ldr	r3, [pc, #472]	; (800e0b8 <mix_sub_columns+0x288>)
 800dede:	5c9a      	ldrb	r2, [r3, r2]
 800dee0:	7b7b      	ldrb	r3, [r7, #13]
 800dee2:	4619      	mov	r1, r3
 800dee4:	4b75      	ldr	r3, [pc, #468]	; (800e0bc <mix_sub_columns+0x28c>)
 800dee6:	5c5b      	ldrb	r3, [r3, r1]
 800dee8:	4053      	eors	r3, r2
 800deea:	b2da      	uxtb	r2, r3
 800deec:	7cbb      	ldrb	r3, [r7, #18]
 800deee:	4619      	mov	r1, r3
 800def0:	4b72      	ldr	r3, [pc, #456]	; (800e0bc <mix_sub_columns+0x28c>)
 800def2:	5c5b      	ldrb	r3, [r3, r1]
 800def4:	4053      	eors	r3, r2
 800def6:	b2d9      	uxtb	r1, r3
 800def8:	7dfb      	ldrb	r3, [r7, #23]
 800defa:	461a      	mov	r2, r3
 800defc:	4b6d      	ldr	r3, [pc, #436]	; (800e0b4 <mix_sub_columns+0x284>)
 800defe:	5c9a      	ldrb	r2, [r3, r2]
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	3303      	adds	r3, #3
 800df04:	404a      	eors	r2, r1
 800df06:	b2d2      	uxtb	r2, r2
 800df08:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800df0a:	7b3b      	ldrb	r3, [r7, #12]
 800df0c:	461a      	mov	r2, r3
 800df0e:	4b69      	ldr	r3, [pc, #420]	; (800e0b4 <mix_sub_columns+0x284>)
 800df10:	5c9a      	ldrb	r2, [r3, r2]
 800df12:	7c7b      	ldrb	r3, [r7, #17]
 800df14:	4619      	mov	r1, r3
 800df16:	4b68      	ldr	r3, [pc, #416]	; (800e0b8 <mix_sub_columns+0x288>)
 800df18:	5c5b      	ldrb	r3, [r3, r1]
 800df1a:	4053      	eors	r3, r2
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	7dbb      	ldrb	r3, [r7, #22]
 800df20:	4619      	mov	r1, r3
 800df22:	4b66      	ldr	r3, [pc, #408]	; (800e0bc <mix_sub_columns+0x28c>)
 800df24:	5c5b      	ldrb	r3, [r3, r1]
 800df26:	4053      	eors	r3, r2
 800df28:	b2d9      	uxtb	r1, r3
 800df2a:	7afb      	ldrb	r3, [r7, #11]
 800df2c:	461a      	mov	r2, r3
 800df2e:	4b63      	ldr	r3, [pc, #396]	; (800e0bc <mix_sub_columns+0x28c>)
 800df30:	5c9a      	ldrb	r2, [r3, r2]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	3304      	adds	r3, #4
 800df36:	404a      	eors	r2, r1
 800df38:	b2d2      	uxtb	r2, r2
 800df3a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800df3c:	7b3b      	ldrb	r3, [r7, #12]
 800df3e:	461a      	mov	r2, r3
 800df40:	4b5e      	ldr	r3, [pc, #376]	; (800e0bc <mix_sub_columns+0x28c>)
 800df42:	5c9a      	ldrb	r2, [r3, r2]
 800df44:	7c7b      	ldrb	r3, [r7, #17]
 800df46:	4619      	mov	r1, r3
 800df48:	4b5a      	ldr	r3, [pc, #360]	; (800e0b4 <mix_sub_columns+0x284>)
 800df4a:	5c5b      	ldrb	r3, [r3, r1]
 800df4c:	4053      	eors	r3, r2
 800df4e:	b2da      	uxtb	r2, r3
 800df50:	7dbb      	ldrb	r3, [r7, #22]
 800df52:	4619      	mov	r1, r3
 800df54:	4b58      	ldr	r3, [pc, #352]	; (800e0b8 <mix_sub_columns+0x288>)
 800df56:	5c5b      	ldrb	r3, [r3, r1]
 800df58:	4053      	eors	r3, r2
 800df5a:	b2d9      	uxtb	r1, r3
 800df5c:	7afb      	ldrb	r3, [r7, #11]
 800df5e:	461a      	mov	r2, r3
 800df60:	4b56      	ldr	r3, [pc, #344]	; (800e0bc <mix_sub_columns+0x28c>)
 800df62:	5c9a      	ldrb	r2, [r3, r2]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	3305      	adds	r3, #5
 800df68:	404a      	eors	r2, r1
 800df6a:	b2d2      	uxtb	r2, r2
 800df6c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800df6e:	7b3b      	ldrb	r3, [r7, #12]
 800df70:	461a      	mov	r2, r3
 800df72:	4b52      	ldr	r3, [pc, #328]	; (800e0bc <mix_sub_columns+0x28c>)
 800df74:	5c9a      	ldrb	r2, [r3, r2]
 800df76:	7c7b      	ldrb	r3, [r7, #17]
 800df78:	4619      	mov	r1, r3
 800df7a:	4b50      	ldr	r3, [pc, #320]	; (800e0bc <mix_sub_columns+0x28c>)
 800df7c:	5c5b      	ldrb	r3, [r3, r1]
 800df7e:	4053      	eors	r3, r2
 800df80:	b2da      	uxtb	r2, r3
 800df82:	7dbb      	ldrb	r3, [r7, #22]
 800df84:	4619      	mov	r1, r3
 800df86:	4b4b      	ldr	r3, [pc, #300]	; (800e0b4 <mix_sub_columns+0x284>)
 800df88:	5c5b      	ldrb	r3, [r3, r1]
 800df8a:	4053      	eors	r3, r2
 800df8c:	b2d9      	uxtb	r1, r3
 800df8e:	7afb      	ldrb	r3, [r7, #11]
 800df90:	461a      	mov	r2, r3
 800df92:	4b49      	ldr	r3, [pc, #292]	; (800e0b8 <mix_sub_columns+0x288>)
 800df94:	5c9a      	ldrb	r2, [r3, r2]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	3306      	adds	r3, #6
 800df9a:	404a      	eors	r2, r1
 800df9c:	b2d2      	uxtb	r2, r2
 800df9e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800dfa0:	7b3b      	ldrb	r3, [r7, #12]
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	4b44      	ldr	r3, [pc, #272]	; (800e0b8 <mix_sub_columns+0x288>)
 800dfa6:	5c9a      	ldrb	r2, [r3, r2]
 800dfa8:	7c7b      	ldrb	r3, [r7, #17]
 800dfaa:	4619      	mov	r1, r3
 800dfac:	4b43      	ldr	r3, [pc, #268]	; (800e0bc <mix_sub_columns+0x28c>)
 800dfae:	5c5b      	ldrb	r3, [r3, r1]
 800dfb0:	4053      	eors	r3, r2
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	7dbb      	ldrb	r3, [r7, #22]
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	4b40      	ldr	r3, [pc, #256]	; (800e0bc <mix_sub_columns+0x28c>)
 800dfba:	5c5b      	ldrb	r3, [r3, r1]
 800dfbc:	4053      	eors	r3, r2
 800dfbe:	b2d9      	uxtb	r1, r3
 800dfc0:	7afb      	ldrb	r3, [r7, #11]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	4b3b      	ldr	r3, [pc, #236]	; (800e0b4 <mix_sub_columns+0x284>)
 800dfc6:	5c9a      	ldrb	r2, [r3, r2]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	3307      	adds	r3, #7
 800dfcc:	404a      	eors	r2, r1
 800dfce:	b2d2      	uxtb	r2, r2
 800dfd0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800dfd2:	7c3b      	ldrb	r3, [r7, #16]
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	4b37      	ldr	r3, [pc, #220]	; (800e0b4 <mix_sub_columns+0x284>)
 800dfd8:	5c9a      	ldrb	r2, [r3, r2]
 800dfda:	7d7b      	ldrb	r3, [r7, #21]
 800dfdc:	4619      	mov	r1, r3
 800dfde:	4b36      	ldr	r3, [pc, #216]	; (800e0b8 <mix_sub_columns+0x288>)
 800dfe0:	5c5b      	ldrb	r3, [r3, r1]
 800dfe2:	4053      	eors	r3, r2
 800dfe4:	b2da      	uxtb	r2, r3
 800dfe6:	7abb      	ldrb	r3, [r7, #10]
 800dfe8:	4619      	mov	r1, r3
 800dfea:	4b34      	ldr	r3, [pc, #208]	; (800e0bc <mix_sub_columns+0x28c>)
 800dfec:	5c5b      	ldrb	r3, [r3, r1]
 800dfee:	4053      	eors	r3, r2
 800dff0:	b2d9      	uxtb	r1, r3
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
 800dff4:	461a      	mov	r2, r3
 800dff6:	4b31      	ldr	r3, [pc, #196]	; (800e0bc <mix_sub_columns+0x28c>)
 800dff8:	5c9a      	ldrb	r2, [r3, r2]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	3308      	adds	r3, #8
 800dffe:	404a      	eors	r2, r1
 800e000:	b2d2      	uxtb	r2, r2
 800e002:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e004:	7c3b      	ldrb	r3, [r7, #16]
 800e006:	461a      	mov	r2, r3
 800e008:	4b2c      	ldr	r3, [pc, #176]	; (800e0bc <mix_sub_columns+0x28c>)
 800e00a:	5c9a      	ldrb	r2, [r3, r2]
 800e00c:	7d7b      	ldrb	r3, [r7, #21]
 800e00e:	4619      	mov	r1, r3
 800e010:	4b28      	ldr	r3, [pc, #160]	; (800e0b4 <mix_sub_columns+0x284>)
 800e012:	5c5b      	ldrb	r3, [r3, r1]
 800e014:	4053      	eors	r3, r2
 800e016:	b2da      	uxtb	r2, r3
 800e018:	7abb      	ldrb	r3, [r7, #10]
 800e01a:	4619      	mov	r1, r3
 800e01c:	4b26      	ldr	r3, [pc, #152]	; (800e0b8 <mix_sub_columns+0x288>)
 800e01e:	5c5b      	ldrb	r3, [r3, r1]
 800e020:	4053      	eors	r3, r2
 800e022:	b2d9      	uxtb	r1, r3
 800e024:	7bfb      	ldrb	r3, [r7, #15]
 800e026:	461a      	mov	r2, r3
 800e028:	4b24      	ldr	r3, [pc, #144]	; (800e0bc <mix_sub_columns+0x28c>)
 800e02a:	5c9a      	ldrb	r2, [r3, r2]
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3309      	adds	r3, #9
 800e030:	404a      	eors	r2, r1
 800e032:	b2d2      	uxtb	r2, r2
 800e034:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e036:	7c3b      	ldrb	r3, [r7, #16]
 800e038:	461a      	mov	r2, r3
 800e03a:	4b20      	ldr	r3, [pc, #128]	; (800e0bc <mix_sub_columns+0x28c>)
 800e03c:	5c9a      	ldrb	r2, [r3, r2]
 800e03e:	7d7b      	ldrb	r3, [r7, #21]
 800e040:	4619      	mov	r1, r3
 800e042:	4b1e      	ldr	r3, [pc, #120]	; (800e0bc <mix_sub_columns+0x28c>)
 800e044:	5c5b      	ldrb	r3, [r3, r1]
 800e046:	4053      	eors	r3, r2
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	7abb      	ldrb	r3, [r7, #10]
 800e04c:	4619      	mov	r1, r3
 800e04e:	4b19      	ldr	r3, [pc, #100]	; (800e0b4 <mix_sub_columns+0x284>)
 800e050:	5c5b      	ldrb	r3, [r3, r1]
 800e052:	4053      	eors	r3, r2
 800e054:	b2d9      	uxtb	r1, r3
 800e056:	7bfb      	ldrb	r3, [r7, #15]
 800e058:	461a      	mov	r2, r3
 800e05a:	4b17      	ldr	r3, [pc, #92]	; (800e0b8 <mix_sub_columns+0x288>)
 800e05c:	5c9a      	ldrb	r2, [r3, r2]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	330a      	adds	r3, #10
 800e062:	404a      	eors	r2, r1
 800e064:	b2d2      	uxtb	r2, r2
 800e066:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e068:	7c3b      	ldrb	r3, [r7, #16]
 800e06a:	461a      	mov	r2, r3
 800e06c:	4b12      	ldr	r3, [pc, #72]	; (800e0b8 <mix_sub_columns+0x288>)
 800e06e:	5c9a      	ldrb	r2, [r3, r2]
 800e070:	7d7b      	ldrb	r3, [r7, #21]
 800e072:	4619      	mov	r1, r3
 800e074:	4b11      	ldr	r3, [pc, #68]	; (800e0bc <mix_sub_columns+0x28c>)
 800e076:	5c5b      	ldrb	r3, [r3, r1]
 800e078:	4053      	eors	r3, r2
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	7abb      	ldrb	r3, [r7, #10]
 800e07e:	4619      	mov	r1, r3
 800e080:	4b0e      	ldr	r3, [pc, #56]	; (800e0bc <mix_sub_columns+0x28c>)
 800e082:	5c5b      	ldrb	r3, [r3, r1]
 800e084:	4053      	eors	r3, r2
 800e086:	b2d9      	uxtb	r1, r3
 800e088:	7bfb      	ldrb	r3, [r7, #15]
 800e08a:	461a      	mov	r2, r3
 800e08c:	4b09      	ldr	r3, [pc, #36]	; (800e0b4 <mix_sub_columns+0x284>)
 800e08e:	5c9a      	ldrb	r2, [r3, r2]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	330b      	adds	r3, #11
 800e094:	404a      	eors	r2, r1
 800e096:	b2d2      	uxtb	r2, r2
 800e098:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e09a:	7d3b      	ldrb	r3, [r7, #20]
 800e09c:	461a      	mov	r2, r3
 800e09e:	4b05      	ldr	r3, [pc, #20]	; (800e0b4 <mix_sub_columns+0x284>)
 800e0a0:	5c9a      	ldrb	r2, [r3, r2]
 800e0a2:	7a7b      	ldrb	r3, [r7, #9]
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	4b04      	ldr	r3, [pc, #16]	; (800e0b8 <mix_sub_columns+0x288>)
 800e0a8:	5c5b      	ldrb	r3, [r3, r1]
 800e0aa:	4053      	eors	r3, r2
 800e0ac:	b2da      	uxtb	r2, r3
 800e0ae:	7bbb      	ldrb	r3, [r7, #14]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	e005      	b.n	800e0c0 <mix_sub_columns+0x290>
 800e0b4:	08020afc 	.word	0x08020afc
 800e0b8:	08020bfc 	.word	0x08020bfc
 800e0bc:	080209fc 	.word	0x080209fc
 800e0c0:	4b2d      	ldr	r3, [pc, #180]	; (800e178 <mix_sub_columns+0x348>)
 800e0c2:	5c5b      	ldrb	r3, [r3, r1]
 800e0c4:	4053      	eors	r3, r2
 800e0c6:	b2d9      	uxtb	r1, r3
 800e0c8:	7cfb      	ldrb	r3, [r7, #19]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4b2a      	ldr	r3, [pc, #168]	; (800e178 <mix_sub_columns+0x348>)
 800e0ce:	5c9a      	ldrb	r2, [r3, r2]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	330c      	adds	r3, #12
 800e0d4:	404a      	eors	r2, r1
 800e0d6:	b2d2      	uxtb	r2, r2
 800e0d8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e0da:	7d3b      	ldrb	r3, [r7, #20]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	4b26      	ldr	r3, [pc, #152]	; (800e178 <mix_sub_columns+0x348>)
 800e0e0:	5c9a      	ldrb	r2, [r3, r2]
 800e0e2:	7a7b      	ldrb	r3, [r7, #9]
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	4b25      	ldr	r3, [pc, #148]	; (800e17c <mix_sub_columns+0x34c>)
 800e0e8:	5c5b      	ldrb	r3, [r3, r1]
 800e0ea:	4053      	eors	r3, r2
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	7bbb      	ldrb	r3, [r7, #14]
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4b23      	ldr	r3, [pc, #140]	; (800e180 <mix_sub_columns+0x350>)
 800e0f4:	5c5b      	ldrb	r3, [r3, r1]
 800e0f6:	4053      	eors	r3, r2
 800e0f8:	b2d9      	uxtb	r1, r3
 800e0fa:	7cfb      	ldrb	r3, [r7, #19]
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	4b1e      	ldr	r3, [pc, #120]	; (800e178 <mix_sub_columns+0x348>)
 800e100:	5c9a      	ldrb	r2, [r3, r2]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	330d      	adds	r3, #13
 800e106:	404a      	eors	r2, r1
 800e108:	b2d2      	uxtb	r2, r2
 800e10a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e10c:	7d3b      	ldrb	r3, [r7, #20]
 800e10e:	461a      	mov	r2, r3
 800e110:	4b19      	ldr	r3, [pc, #100]	; (800e178 <mix_sub_columns+0x348>)
 800e112:	5c9a      	ldrb	r2, [r3, r2]
 800e114:	7a7b      	ldrb	r3, [r7, #9]
 800e116:	4619      	mov	r1, r3
 800e118:	4b17      	ldr	r3, [pc, #92]	; (800e178 <mix_sub_columns+0x348>)
 800e11a:	5c5b      	ldrb	r3, [r3, r1]
 800e11c:	4053      	eors	r3, r2
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	7bbb      	ldrb	r3, [r7, #14]
 800e122:	4619      	mov	r1, r3
 800e124:	4b15      	ldr	r3, [pc, #84]	; (800e17c <mix_sub_columns+0x34c>)
 800e126:	5c5b      	ldrb	r3, [r3, r1]
 800e128:	4053      	eors	r3, r2
 800e12a:	b2d9      	uxtb	r1, r3
 800e12c:	7cfb      	ldrb	r3, [r7, #19]
 800e12e:	461a      	mov	r2, r3
 800e130:	4b13      	ldr	r3, [pc, #76]	; (800e180 <mix_sub_columns+0x350>)
 800e132:	5c9a      	ldrb	r2, [r3, r2]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	330e      	adds	r3, #14
 800e138:	404a      	eors	r2, r1
 800e13a:	b2d2      	uxtb	r2, r2
 800e13c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e13e:	7d3b      	ldrb	r3, [r7, #20]
 800e140:	461a      	mov	r2, r3
 800e142:	4b0f      	ldr	r3, [pc, #60]	; (800e180 <mix_sub_columns+0x350>)
 800e144:	5c9a      	ldrb	r2, [r3, r2]
 800e146:	7a7b      	ldrb	r3, [r7, #9]
 800e148:	4619      	mov	r1, r3
 800e14a:	4b0b      	ldr	r3, [pc, #44]	; (800e178 <mix_sub_columns+0x348>)
 800e14c:	5c5b      	ldrb	r3, [r3, r1]
 800e14e:	4053      	eors	r3, r2
 800e150:	b2da      	uxtb	r2, r3
 800e152:	7bbb      	ldrb	r3, [r7, #14]
 800e154:	4619      	mov	r1, r3
 800e156:	4b08      	ldr	r3, [pc, #32]	; (800e178 <mix_sub_columns+0x348>)
 800e158:	5c5b      	ldrb	r3, [r3, r1]
 800e15a:	4053      	eors	r3, r2
 800e15c:	b2d9      	uxtb	r1, r3
 800e15e:	7cfb      	ldrb	r3, [r7, #19]
 800e160:	461a      	mov	r2, r3
 800e162:	4b06      	ldr	r3, [pc, #24]	; (800e17c <mix_sub_columns+0x34c>)
 800e164:	5c9a      	ldrb	r2, [r3, r2]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	330f      	adds	r3, #15
 800e16a:	404a      	eors	r2, r1
 800e16c:	b2d2      	uxtb	r2, r2
 800e16e:	701a      	strb	r2, [r3, #0]
  }
 800e170:	bf00      	nop
 800e172:	3718      	adds	r7, #24
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}
 800e178:	080209fc 	.word	0x080209fc
 800e17c:	08020afc 	.word	0x08020afc
 800e180:	08020bfc 	.word	0x08020bfc

0800e184 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	460b      	mov	r3, r1
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e192:	7afb      	ldrb	r3, [r7, #11]
 800e194:	3b10      	subs	r3, #16
 800e196:	2b10      	cmp	r3, #16
 800e198:	bf8c      	ite	hi
 800e19a:	2201      	movhi	r2, #1
 800e19c:	2200      	movls	r2, #0
 800e19e:	b2d2      	uxtb	r2, r2
 800e1a0:	2a00      	cmp	r2, #0
 800e1a2:	d10b      	bne.n	800e1bc <lorawan_aes_set_key+0x38>
 800e1a4:	4a64      	ldr	r2, [pc, #400]	; (800e338 <lorawan_aes_set_key+0x1b4>)
 800e1a6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1aa:	f003 0301 	and.w	r3, r3, #1
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	bf14      	ite	ne
 800e1b2:	2301      	movne	r3, #1
 800e1b4:	2300      	moveq	r3, #0
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d105      	bne.n	800e1c8 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e1c4:	23ff      	movs	r3, #255	; 0xff
 800e1c6:	e0b2      	b.n	800e32e <lorawan_aes_set_key+0x1aa>
        break;
 800e1c8:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	7afa      	ldrb	r2, [r7, #11]
 800e1ce:	68f9      	ldr	r1, [r7, #12]
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7ff fbfc 	bl	800d9ce <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e1d6:	7afb      	ldrb	r3, [r7, #11]
 800e1d8:	331c      	adds	r3, #28
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e1e0:	7c7b      	ldrb	r3, [r7, #17]
 800e1e2:	091b      	lsrs	r3, r3, #4
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	3b01      	subs	r3, #1
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e1f0:	7afb      	ldrb	r3, [r7, #11]
 800e1f2:	75fb      	strb	r3, [r7, #23]
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	75bb      	strb	r3, [r7, #22]
 800e1f8:	e093      	b.n	800e322 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e1fa:	7dfb      	ldrb	r3, [r7, #23]
 800e1fc:	3b04      	subs	r3, #4
 800e1fe:	687a      	ldr	r2, [r7, #4]
 800e200:	5cd3      	ldrb	r3, [r2, r3]
 800e202:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e204:	7dfb      	ldrb	r3, [r7, #23]
 800e206:	3b03      	subs	r3, #3
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	5cd3      	ldrb	r3, [r2, r3]
 800e20c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
 800e210:	3b02      	subs	r3, #2
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	5cd3      	ldrb	r3, [r2, r3]
 800e216:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e218:	7dfb      	ldrb	r3, [r7, #23]
 800e21a:	3b01      	subs	r3, #1
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	5cd3      	ldrb	r3, [r2, r3]
 800e220:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e222:	7dfb      	ldrb	r3, [r7, #23]
 800e224:	7afa      	ldrb	r2, [r7, #11]
 800e226:	fbb3 f1f2 	udiv	r1, r3, r2
 800e22a:	fb01 f202 	mul.w	r2, r1, r2
 800e22e:	1a9b      	subs	r3, r3, r2
 800e230:	b2db      	uxtb	r3, r3
 800e232:	2b00      	cmp	r3, #0
 800e234:	d127      	bne.n	800e286 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800e236:	7d7b      	ldrb	r3, [r7, #21]
 800e238:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e23a:	7d3b      	ldrb	r3, [r7, #20]
 800e23c:	4a3f      	ldr	r2, [pc, #252]	; (800e33c <lorawan_aes_set_key+0x1b8>)
 800e23e:	5cd2      	ldrb	r2, [r2, r3]
 800e240:	7dbb      	ldrb	r3, [r7, #22]
 800e242:	4053      	eors	r3, r2
 800e244:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e246:	7cfb      	ldrb	r3, [r7, #19]
 800e248:	4a3c      	ldr	r2, [pc, #240]	; (800e33c <lorawan_aes_set_key+0x1b8>)
 800e24a:	5cd3      	ldrb	r3, [r2, r3]
 800e24c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e24e:	7cbb      	ldrb	r3, [r7, #18]
 800e250:	4a3a      	ldr	r2, [pc, #232]	; (800e33c <lorawan_aes_set_key+0x1b8>)
 800e252:	5cd3      	ldrb	r3, [r2, r3]
 800e254:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e256:	7c3b      	ldrb	r3, [r7, #16]
 800e258:	4a38      	ldr	r2, [pc, #224]	; (800e33c <lorawan_aes_set_key+0x1b8>)
 800e25a:	5cd3      	ldrb	r3, [r2, r3]
 800e25c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e25e:	7dbb      	ldrb	r3, [r7, #22]
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	b25a      	sxtb	r2, r3
 800e264:	7dbb      	ldrb	r3, [r7, #22]
 800e266:	09db      	lsrs	r3, r3, #7
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	4619      	mov	r1, r3
 800e26c:	0049      	lsls	r1, r1, #1
 800e26e:	440b      	add	r3, r1
 800e270:	4619      	mov	r1, r3
 800e272:	00c8      	lsls	r0, r1, #3
 800e274:	4619      	mov	r1, r3
 800e276:	4603      	mov	r3, r0
 800e278:	440b      	add	r3, r1
 800e27a:	b2db      	uxtb	r3, r3
 800e27c:	b25b      	sxtb	r3, r3
 800e27e:	4053      	eors	r3, r2
 800e280:	b25b      	sxtb	r3, r3
 800e282:	75bb      	strb	r3, [r7, #22]
 800e284:	e01c      	b.n	800e2c0 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e286:	7afb      	ldrb	r3, [r7, #11]
 800e288:	2b18      	cmp	r3, #24
 800e28a:	d919      	bls.n	800e2c0 <lorawan_aes_set_key+0x13c>
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
 800e28e:	7afa      	ldrb	r2, [r7, #11]
 800e290:	fbb3 f1f2 	udiv	r1, r3, r2
 800e294:	fb01 f202 	mul.w	r2, r1, r2
 800e298:	1a9b      	subs	r3, r3, r2
 800e29a:	b2db      	uxtb	r3, r3
 800e29c:	2b10      	cmp	r3, #16
 800e29e:	d10f      	bne.n	800e2c0 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800e2a0:	7d7b      	ldrb	r3, [r7, #21]
 800e2a2:	4a26      	ldr	r2, [pc, #152]	; (800e33c <lorawan_aes_set_key+0x1b8>)
 800e2a4:	5cd3      	ldrb	r3, [r2, r3]
 800e2a6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e2a8:	7d3b      	ldrb	r3, [r7, #20]
 800e2aa:	4a24      	ldr	r2, [pc, #144]	; (800e33c <lorawan_aes_set_key+0x1b8>)
 800e2ac:	5cd3      	ldrb	r3, [r2, r3]
 800e2ae:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e2b0:	7cfb      	ldrb	r3, [r7, #19]
 800e2b2:	4a22      	ldr	r2, [pc, #136]	; (800e33c <lorawan_aes_set_key+0x1b8>)
 800e2b4:	5cd3      	ldrb	r3, [r2, r3]
 800e2b6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e2b8:	7cbb      	ldrb	r3, [r7, #18]
 800e2ba:	4a20      	ldr	r2, [pc, #128]	; (800e33c <lorawan_aes_set_key+0x1b8>)
 800e2bc:	5cd3      	ldrb	r3, [r2, r3]
 800e2be:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e2c0:	7dfa      	ldrb	r2, [r7, #23]
 800e2c2:	7afb      	ldrb	r3, [r7, #11]
 800e2c4:	1ad3      	subs	r3, r2, r3
 800e2c6:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e2c8:	7c3b      	ldrb	r3, [r7, #16]
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	5cd1      	ldrb	r1, [r2, r3]
 800e2ce:	7dfb      	ldrb	r3, [r7, #23]
 800e2d0:	7d7a      	ldrb	r2, [r7, #21]
 800e2d2:	404a      	eors	r2, r1
 800e2d4:	b2d1      	uxtb	r1, r2
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e2da:	7c3b      	ldrb	r3, [r7, #16]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	5cd1      	ldrb	r1, [r2, r3]
 800e2e2:	7dfb      	ldrb	r3, [r7, #23]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	7d3a      	ldrb	r2, [r7, #20]
 800e2e8:	404a      	eors	r2, r1
 800e2ea:	b2d1      	uxtb	r1, r2
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e2f0:	7c3b      	ldrb	r3, [r7, #16]
 800e2f2:	3302      	adds	r3, #2
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	5cd1      	ldrb	r1, [r2, r3]
 800e2f8:	7dfb      	ldrb	r3, [r7, #23]
 800e2fa:	3302      	adds	r3, #2
 800e2fc:	7cfa      	ldrb	r2, [r7, #19]
 800e2fe:	404a      	eors	r2, r1
 800e300:	b2d1      	uxtb	r1, r2
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e306:	7c3b      	ldrb	r3, [r7, #16]
 800e308:	3303      	adds	r3, #3
 800e30a:	687a      	ldr	r2, [r7, #4]
 800e30c:	5cd1      	ldrb	r1, [r2, r3]
 800e30e:	7dfb      	ldrb	r3, [r7, #23]
 800e310:	3303      	adds	r3, #3
 800e312:	7cba      	ldrb	r2, [r7, #18]
 800e314:	404a      	eors	r2, r1
 800e316:	b2d1      	uxtb	r1, r2
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e31c:	7dfb      	ldrb	r3, [r7, #23]
 800e31e:	3304      	adds	r3, #4
 800e320:	75fb      	strb	r3, [r7, #23]
 800e322:	7dfa      	ldrb	r2, [r7, #23]
 800e324:	7c7b      	ldrb	r3, [r7, #17]
 800e326:	429a      	cmp	r2, r3
 800e328:	f4ff af67 	bcc.w	800e1fa <lorawan_aes_set_key+0x76>
    }
    return 0;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3718      	adds	r7, #24
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	00010101 	.word	0x00010101
 800e33c:	080209fc 	.word	0x080209fc

0800e340 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08a      	sub	sp, #40	; 0x28
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d038      	beq.n	800e3c8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	f107 0314 	add.w	r3, r7, #20
 800e35c:	68f9      	ldr	r1, [r7, #12]
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff fc07 	bl	800db72 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e364:	2301      	movs	r3, #1
 800e366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e36a:	e014      	b.n	800e396 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e36c:	f107 0314 	add.w	r3, r7, #20
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff fd5d 	bl	800de30 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e37c:	0112      	lsls	r2, r2, #4
 800e37e:	441a      	add	r2, r3
 800e380:	f107 0314 	add.w	r3, r7, #20
 800e384:	4611      	mov	r1, r2
 800e386:	4618      	mov	r0, r3
 800e388:	f7ff fcab 	bl	800dce2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e390:	3301      	adds	r3, #1
 800e392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e39c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d3e3      	bcc.n	800e36c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e3a4:	f107 0314 	add.w	r3, r7, #20
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7ff fca7 	bl	800dcfc <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e3b4:	0112      	lsls	r2, r2, #4
 800e3b6:	441a      	add	r2, r3
 800e3b8:	f107 0314 	add.w	r3, r7, #20
 800e3bc:	4619      	mov	r1, r3
 800e3be:	68b8      	ldr	r0, [r7, #8]
 800e3c0:	f7ff fbd7 	bl	800db72 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	e000      	b.n	800e3ca <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800e3c8:	23ff      	movs	r3, #255	; 0xff
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3728      	adds	r7, #40	; 0x28
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}
	...

0800e3d4 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800e3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3d6:	b0a1      	sub	sp, #132	; 0x84
 800e3d8:	af12      	add	r7, sp, #72	; 0x48
 800e3da:	4603      	mov	r3, r0
 800e3dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800e3e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e3e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e3e8:	4611      	mov	r1, r2
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f000 fa12 	bl	800e814 <SecureElementGetKeyByID>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d174      	bne.n	800e4e0 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e3fc:	e06c      	b.n	800e4d8 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800e3fe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e402:	4939      	ldr	r1, [pc, #228]	; (800e4e8 <PrintKey+0x114>)
 800e404:	4613      	mov	r3, r2
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	4413      	add	r3, r2
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	440b      	add	r3, r1
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e414:	429a      	cmp	r2, r3
 800e416:	d15a      	bne.n	800e4ce <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800e418:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e41c:	4932      	ldr	r1, [pc, #200]	; (800e4e8 <PrintKey+0x114>)
 800e41e:	4613      	mov	r3, r2
 800e420:	005b      	lsls	r3, r3, #1
 800e422:	4413      	add	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	440b      	add	r3, r1
 800e428:	3308      	adds	r3, #8
 800e42a:	6819      	ldr	r1, [r3, #0]
 800e42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42e:	785b      	ldrb	r3, [r3, #1]
 800e430:	461d      	mov	r5, r3
 800e432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e434:	789b      	ldrb	r3, [r3, #2]
 800e436:	461e      	mov	r6, r3
 800e438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43a:	78db      	ldrb	r3, [r3, #3]
 800e43c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e440:	791b      	ldrb	r3, [r3, #4]
 800e442:	627b      	str	r3, [r7, #36]	; 0x24
 800e444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e446:	795b      	ldrb	r3, [r3, #5]
 800e448:	623b      	str	r3, [r7, #32]
 800e44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e44c:	799b      	ldrb	r3, [r3, #6]
 800e44e:	61fb      	str	r3, [r7, #28]
 800e450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e452:	79db      	ldrb	r3, [r3, #7]
 800e454:	61bb      	str	r3, [r7, #24]
 800e456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e458:	7a1b      	ldrb	r3, [r3, #8]
 800e45a:	617b      	str	r3, [r7, #20]
 800e45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e45e:	7a5b      	ldrb	r3, [r3, #9]
 800e460:	613b      	str	r3, [r7, #16]
 800e462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e464:	7a9b      	ldrb	r3, [r3, #10]
 800e466:	60fb      	str	r3, [r7, #12]
 800e468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46a:	7adb      	ldrb	r3, [r3, #11]
 800e46c:	60bb      	str	r3, [r7, #8]
 800e46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e470:	7b1b      	ldrb	r3, [r3, #12]
 800e472:	607b      	str	r3, [r7, #4]
 800e474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e476:	7b5b      	ldrb	r3, [r3, #13]
 800e478:	461c      	mov	r4, r3
 800e47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47c:	7b9b      	ldrb	r3, [r3, #14]
 800e47e:	4618      	mov	r0, r3
 800e480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e482:	7bdb      	ldrb	r3, [r3, #15]
 800e484:	461a      	mov	r2, r3
 800e486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e488:	7c1b      	ldrb	r3, [r3, #16]
 800e48a:	9310      	str	r3, [sp, #64]	; 0x40
 800e48c:	920f      	str	r2, [sp, #60]	; 0x3c
 800e48e:	900e      	str	r0, [sp, #56]	; 0x38
 800e490:	940d      	str	r4, [sp, #52]	; 0x34
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	920c      	str	r2, [sp, #48]	; 0x30
 800e496:	68ba      	ldr	r2, [r7, #8]
 800e498:	920b      	str	r2, [sp, #44]	; 0x2c
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	920a      	str	r2, [sp, #40]	; 0x28
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	9209      	str	r2, [sp, #36]	; 0x24
 800e4a2:	697a      	ldr	r2, [r7, #20]
 800e4a4:	9208      	str	r2, [sp, #32]
 800e4a6:	69ba      	ldr	r2, [r7, #24]
 800e4a8:	9207      	str	r2, [sp, #28]
 800e4aa:	69fa      	ldr	r2, [r7, #28]
 800e4ac:	9206      	str	r2, [sp, #24]
 800e4ae:	6a3a      	ldr	r2, [r7, #32]
 800e4b0:	9205      	str	r2, [sp, #20]
 800e4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4b4:	9204      	str	r2, [sp, #16]
 800e4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b8:	9303      	str	r3, [sp, #12]
 800e4ba:	9602      	str	r6, [sp, #8]
 800e4bc:	9501      	str	r5, [sp, #4]
 800e4be:	9100      	str	r1, [sp, #0]
 800e4c0:	4b0a      	ldr	r3, [pc, #40]	; (800e4ec <PrintKey+0x118>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	2002      	movs	r0, #2
 800e4c8:	f011 fa34 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
 800e4cc:	e008      	b.n	800e4e0 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e4ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e4d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e4dc:	2b0a      	cmp	r3, #10
 800e4de:	d98e      	bls.n	800e3fe <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800e4e0:	373c      	adds	r7, #60	; 0x3c
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	08020cfc 	.word	0x08020cfc
 800e4ec:	08020580 	.word	0x08020580

0800e4f0 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800e4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4f2:	b091      	sub	sp, #68	; 0x44
 800e4f4:	af08      	add	r7, sp, #32
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800e4fe:	f107 0310 	add.w	r3, r7, #16
 800e502:	4618      	mov	r0, r3
 800e504:	f000 fbda 	bl	800ecbc <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800e508:	7c3b      	ldrb	r3, [r7, #16]
 800e50a:	7c7a      	ldrb	r2, [r7, #17]
 800e50c:	7cb9      	ldrb	r1, [r7, #18]
 800e50e:	7cf8      	ldrb	r0, [r7, #19]
 800e510:	7d3c      	ldrb	r4, [r7, #20]
 800e512:	7d7d      	ldrb	r5, [r7, #21]
 800e514:	7dbe      	ldrb	r6, [r7, #22]
 800e516:	f897 c017 	ldrb.w	ip, [r7, #23]
 800e51a:	f8cd c01c 	str.w	ip, [sp, #28]
 800e51e:	9606      	str	r6, [sp, #24]
 800e520:	9505      	str	r5, [sp, #20]
 800e522:	9404      	str	r4, [sp, #16]
 800e524:	9003      	str	r0, [sp, #12]
 800e526:	9102      	str	r1, [sp, #8]
 800e528:	9201      	str	r2, [sp, #4]
 800e52a:	9300      	str	r3, [sp, #0]
 800e52c:	4b24      	ldr	r3, [pc, #144]	; (800e5c0 <PrintIds+0xd0>)
 800e52e:	2200      	movs	r2, #0
 800e530:	2100      	movs	r1, #0
 800e532:	2002      	movs	r0, #2
 800e534:	f011 f9fe 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800e538:	f107 0318 	add.w	r3, r7, #24
 800e53c:	4618      	mov	r0, r3
 800e53e:	f000 fbed 	bl	800ed1c <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800e542:	7e3b      	ldrb	r3, [r7, #24]
 800e544:	7e7a      	ldrb	r2, [r7, #25]
 800e546:	7eb9      	ldrb	r1, [r7, #26]
 800e548:	7ef8      	ldrb	r0, [r7, #27]
 800e54a:	7f3c      	ldrb	r4, [r7, #28]
 800e54c:	7f7d      	ldrb	r5, [r7, #29]
 800e54e:	7fbe      	ldrb	r6, [r7, #30]
 800e550:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800e554:	f8cd c01c 	str.w	ip, [sp, #28]
 800e558:	9606      	str	r6, [sp, #24]
 800e55a:	9505      	str	r5, [sp, #20]
 800e55c:	9404      	str	r4, [sp, #16]
 800e55e:	9003      	str	r0, [sp, #12]
 800e560:	9102      	str	r1, [sp, #8]
 800e562:	9201      	str	r2, [sp, #4]
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	4b17      	ldr	r3, [pc, #92]	; (800e5c4 <PrintIds+0xd4>)
 800e568:	2200      	movs	r2, #0
 800e56a:	2100      	movs	r1, #0
 800e56c:	2002      	movs	r0, #2
 800e56e:	f011 f9e1 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800e572:	f107 020c 	add.w	r2, r7, #12
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	4611      	mov	r1, r2
 800e57a:	4618      	mov	r0, r3
 800e57c:	f000 fc00 	bl	800ed80 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800e580:	f107 030c 	add.w	r3, r7, #12
 800e584:	3303      	adds	r3, #3
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	461a      	mov	r2, r3
 800e58a:	f107 030c 	add.w	r3, r7, #12
 800e58e:	3302      	adds	r3, #2
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	4619      	mov	r1, r3
 800e594:	f107 030c 	add.w	r3, r7, #12
 800e598:	3301      	adds	r3, #1
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f107 030c 	add.w	r3, r7, #12
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	9303      	str	r3, [sp, #12]
 800e5a6:	9002      	str	r0, [sp, #8]
 800e5a8:	9101      	str	r1, [sp, #4]
 800e5aa:	9200      	str	r2, [sp, #0]
 800e5ac:	4b06      	ldr	r3, [pc, #24]	; (800e5c8 <PrintIds+0xd8>)
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	2002      	movs	r0, #2
 800e5b4:	f011 f9be 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800e5b8:	bf00      	nop
 800e5ba:	3724      	adds	r7, #36	; 0x24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5c0:	080205dc 	.word	0x080205dc
 800e5c4:	0802061c 	.word	0x0802061c
 800e5c8:	0802065c 	.word	0x0802065c

0800e5cc <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	6039      	str	r1, [r7, #0]
 800e5d6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e5d8:	2300      	movs	r3, #0
 800e5da:	73fb      	strb	r3, [r7, #15]
 800e5dc:	e01a      	b.n	800e614 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e5de:	4b12      	ldr	r3, [pc, #72]	; (800e628 <GetKeyByID+0x5c>)
 800e5e0:	6819      	ldr	r1, [r3, #0]
 800e5e2:	7bfa      	ldrb	r2, [r7, #15]
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	011b      	lsls	r3, r3, #4
 800e5e8:	4413      	add	r3, r2
 800e5ea:	440b      	add	r3, r1
 800e5ec:	3318      	adds	r3, #24
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	79fa      	ldrb	r2, [r7, #7]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d10b      	bne.n	800e60e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e5f6:	4b0c      	ldr	r3, [pc, #48]	; (800e628 <GetKeyByID+0x5c>)
 800e5f8:	6819      	ldr	r1, [r3, #0]
 800e5fa:	7bfa      	ldrb	r2, [r7, #15]
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	011b      	lsls	r3, r3, #4
 800e600:	4413      	add	r3, r2
 800e602:	3318      	adds	r3, #24
 800e604:	18ca      	adds	r2, r1, r3
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e60a:	2300      	movs	r3, #0
 800e60c:	e006      	b.n	800e61c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e60e:	7bfb      	ldrb	r3, [r7, #15]
 800e610:	3301      	adds	r3, #1
 800e612:	73fb      	strb	r3, [r7, #15]
 800e614:	7bfb      	ldrb	r3, [r7, #15]
 800e616:	2b0a      	cmp	r3, #10
 800e618:	d9e1      	bls.n	800e5de <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e61a:	2303      	movs	r3, #3
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3714      	adds	r7, #20
 800e620:	46bd      	mov	sp, r7
 800e622:	bc80      	pop	{r7}
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	200004fc 	.word	0x200004fc

0800e62c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800e62c:	b590      	push	{r4, r7, lr}
 800e62e:	b0d1      	sub	sp, #324	; 0x144
 800e630:	af00      	add	r7, sp, #0
 800e632:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800e636:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800e63a:	6020      	str	r0, [r4, #0]
 800e63c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800e640:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e644:	6001      	str	r1, [r0, #0]
 800e646:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e64a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800e64e:	600a      	str	r2, [r1, #0]
 800e650:	461a      	mov	r2, r3
 800e652:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e656:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e65a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800e65c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e660:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <ComputeCmac+0x46>
 800e66a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d101      	bne.n	800e676 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e672:	2302      	movs	r3, #2
 800e674:	e05d      	b.n	800e732 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800e676:	f107 0314 	add.w	r3, r7, #20
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fe ff02 	bl	800d484 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800e680:	f107 0210 	add.w	r2, r7, #16
 800e684:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e688:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800e68c:	781b      	ldrb	r3, [r3, #0]
 800e68e:	4611      	mov	r1, r2
 800e690:	4618      	mov	r0, r3
 800e692:	f7ff ff9b 	bl	800e5cc <GetKeyByID>
 800e696:	4603      	mov	r3, r0
 800e698:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800e69c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d144      	bne.n	800e72e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800e6a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	1c5a      	adds	r2, r3, #1
 800e6b0:	f107 0314 	add.w	r3, r7, #20
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fe fefd 	bl	800d4b6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800e6bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6c0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d009      	beq.n	800e6de <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800e6ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6ce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800e6d2:	f107 0014 	add.w	r0, r7, #20
 800e6d6:	2210      	movs	r2, #16
 800e6d8:	6819      	ldr	r1, [r3, #0]
 800e6da:	f7fe fefb 	bl	800d4d4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800e6de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6e2:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800e6e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e6ee:	f107 0014 	add.w	r0, r7, #20
 800e6f2:	6812      	ldr	r2, [r2, #0]
 800e6f4:	6819      	ldr	r1, [r3, #0]
 800e6f6:	f7fe feed 	bl	800d4d4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800e6fa:	f107 0214 	add.w	r2, r7, #20
 800e6fe:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800e702:	4611      	mov	r1, r2
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe ffa7 	bl	800d658 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800e70a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800e70e:	461a      	mov	r2, r3
 800e710:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800e714:	021b      	lsls	r3, r3, #8
 800e716:	431a      	orrs	r2, r3
 800e718:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800e71c:	041b      	lsls	r3, r3, #16
 800e71e:	431a      	orrs	r2, r3
 800e720:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800e724:	061b      	lsls	r3, r3, #24
 800e726:	431a      	orrs	r2, r3
 800e728:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800e72c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800e72e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800e732:	4618      	mov	r0, r3
 800e734:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd90      	pop	{r4, r7, pc}

0800e73c <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d101      	bne.n	800e74e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e74a:	2302      	movs	r3, #2
 800e74c:	e00a      	b.n	800e764 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800e74e:	4a07      	ldr	r2, [pc, #28]	; (800e76c <SecureElementInit+0x30>)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800e754:	4b05      	ldr	r3, [pc, #20]	; (800e76c <SecureElementInit+0x30>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	22d8      	movs	r2, #216	; 0xd8
 800e75a:	4905      	ldr	r1, [pc, #20]	; (800e770 <SecureElementInit+0x34>)
 800e75c:	4618      	mov	r0, r3
 800e75e:	f00c fe82 	bl	801b466 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800e762:	2300      	movs	r3, #0
}
 800e764:	4618      	mov	r0, r3
 800e766:	3708      	adds	r7, #8
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd80      	pop	{r7, pc}
 800e76c:	200004fc 	.word	0x200004fc
 800e770:	08020f9c 	.word	0x08020f9c

0800e774 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800e782:	f107 030c 	add.w	r3, r7, #12
 800e786:	4618      	mov	r0, r3
 800e788:	f000 fa98 	bl	800ecbc <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800e78c:	f107 0308 	add.w	r3, r7, #8
 800e790:	4619      	mov	r1, r3
 800e792:	2001      	movs	r0, #1
 800e794:	f000 faf4 	bl	800ed80 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d024      	beq.n	800e7e8 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800e79e:	2300      	movs	r3, #0
 800e7a0:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	75bb      	strb	r3, [r7, #22]
 800e7a6:	e00c      	b.n	800e7c2 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800e7a8:	7dbb      	ldrb	r3, [r7, #22]
 800e7aa:	3318      	adds	r3, #24
 800e7ac:	443b      	add	r3, r7
 800e7ae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d002      	beq.n	800e7bc <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	75fb      	strb	r3, [r7, #23]
                break;
 800e7ba:	e005      	b.n	800e7c8 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800e7bc:	7dbb      	ldrb	r3, [r7, #22]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	75bb      	strb	r3, [r7, #22]
 800e7c2:	7dbb      	ldrb	r3, [r7, #22]
 800e7c4:	2b07      	cmp	r3, #7
 800e7c6:	d9ef      	bls.n	800e7a8 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800e7c8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ca:	f083 0301 	eor.w	r3, r3, #1
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d009      	beq.n	800e7e8 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800e7d4:	f107 020c 	add.w	r2, r7, #12
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4610      	mov	r0, r2
 800e7dc:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800e7de:	f107 030c 	add.w	r3, r7, #12
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f000 fa52 	bl	800ec8c <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00c      	beq.n	800e808 <SecureElementInitMcuID+0x94>
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d109      	bne.n	800e808 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800e7f4:	f107 0208 	add.w	r2, r7, #8
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	4619      	mov	r1, r3
 800e802:	2001      	movs	r0, #1
 800e804:	f000 faa2 	bl	800ed4c <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3718      	adds	r7, #24
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	4603      	mov	r3, r0
 800e81c:	6039      	str	r1, [r7, #0]
 800e81e:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
 800e824:	e01a      	b.n	800e85c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e826:	4b12      	ldr	r3, [pc, #72]	; (800e870 <SecureElementGetKeyByID+0x5c>)
 800e828:	6819      	ldr	r1, [r3, #0]
 800e82a:	7bfa      	ldrb	r2, [r7, #15]
 800e82c:	4613      	mov	r3, r2
 800e82e:	011b      	lsls	r3, r3, #4
 800e830:	4413      	add	r3, r2
 800e832:	440b      	add	r3, r1
 800e834:	3318      	adds	r3, #24
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	79fa      	ldrb	r2, [r7, #7]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d10b      	bne.n	800e856 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800e83e:	4b0c      	ldr	r3, [pc, #48]	; (800e870 <SecureElementGetKeyByID+0x5c>)
 800e840:	6819      	ldr	r1, [r3, #0]
 800e842:	7bfa      	ldrb	r2, [r7, #15]
 800e844:	4613      	mov	r3, r2
 800e846:	011b      	lsls	r3, r3, #4
 800e848:	4413      	add	r3, r2
 800e84a:	3318      	adds	r3, #24
 800e84c:	18ca      	adds	r2, r1, r3
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800e852:	2300      	movs	r3, #0
 800e854:	e006      	b.n	800e864 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e856:	7bfb      	ldrb	r3, [r7, #15]
 800e858:	3301      	adds	r3, #1
 800e85a:	73fb      	strb	r3, [r7, #15]
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
 800e85e:	2b0a      	cmp	r3, #10
 800e860:	d9e1      	bls.n	800e826 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e862:	2303      	movs	r3, #3
}
 800e864:	4618      	mov	r0, r3
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	bc80      	pop	{r7}
 800e86c:	4770      	bx	lr
 800e86e:	bf00      	nop
 800e870:	200004fc 	.word	0x200004fc

0800e874 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800e878:	2000      	movs	r0, #0
 800e87a:	f7ff fdab 	bl	800e3d4 <PrintKey>
    PrintKey( NWK_KEY );
 800e87e:	2001      	movs	r0, #1
 800e880:	f7ff fda8 	bl	800e3d4 <PrintKey>
    PrintKey( APP_S_KEY );
 800e884:	2009      	movs	r0, #9
 800e886:	f7ff fda5 	bl	800e3d4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e88a:	2008      	movs	r0, #8
 800e88c:	f7ff fda2 	bl	800e3d4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800e890:	2000      	movs	r0, #0
 800e892:	f7ff fe2d 	bl	800e4f0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e896:	2300      	movs	r3, #0
}
 800e898:	4618      	mov	r0, r3
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800e8a6:	200b      	movs	r0, #11
 800e8a8:	f7ff fd94 	bl	800e3d4 <PrintKey>
    PrintKey( MC_KE_KEY );
 800e8ac:	200c      	movs	r0, #12
 800e8ae:	f7ff fd91 	bl	800e3d4 <PrintKey>
    PrintKey( APP_S_KEY );
 800e8b2:	2009      	movs	r0, #9
 800e8b4:	f7ff fd8e 	bl	800e3d4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800e8b8:	2008      	movs	r0, #8
 800e8ba:	f7ff fd8b 	bl	800e3d4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800e8be:	200a      	movs	r0, #10
 800e8c0:	f7ff fd88 	bl	800e3d4 <PrintKey>
    PrintIds( mode );
 800e8c4:	79fb      	ldrb	r3, [r7, #7]
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7ff fe12 	bl	800e4f0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
	...

0800e8d8 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b088      	sub	sp, #32
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	6039      	str	r1, [r7, #0]
 800e8e2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d101      	bne.n	800e8ee <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	e04c      	b.n	800e988 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	77fb      	strb	r3, [r7, #31]
 800e8f2:	e045      	b.n	800e980 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800e8f4:	4b26      	ldr	r3, [pc, #152]	; (800e990 <SecureElementSetKey+0xb8>)
 800e8f6:	6819      	ldr	r1, [r3, #0]
 800e8f8:	7ffa      	ldrb	r2, [r7, #31]
 800e8fa:	4613      	mov	r3, r2
 800e8fc:	011b      	lsls	r3, r3, #4
 800e8fe:	4413      	add	r3, r2
 800e900:	440b      	add	r3, r1
 800e902:	3318      	adds	r3, #24
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	79fa      	ldrb	r2, [r7, #7]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d136      	bne.n	800e97a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800e90c:	79fb      	ldrb	r3, [r7, #7]
 800e90e:	2b0d      	cmp	r3, #13
 800e910:	d123      	bne.n	800e95a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800e912:	2306      	movs	r3, #6
 800e914:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800e916:	2300      	movs	r3, #0
 800e918:	60fb      	str	r3, [r7, #12]
 800e91a:	f107 0310 	add.w	r3, r7, #16
 800e91e:	2200      	movs	r2, #0
 800e920:	601a      	str	r2, [r3, #0]
 800e922:	605a      	str	r2, [r3, #4]
 800e924:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800e926:	f107 030c 	add.w	r3, r7, #12
 800e92a:	220c      	movs	r2, #12
 800e92c:	2110      	movs	r1, #16
 800e92e:	6838      	ldr	r0, [r7, #0]
 800e930:	f000 f876 	bl	800ea20 <SecureElementAesEncrypt>
 800e934:	4603      	mov	r3, r0
 800e936:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800e938:	4b15      	ldr	r3, [pc, #84]	; (800e990 <SecureElementSetKey+0xb8>)
 800e93a:	6819      	ldr	r1, [r3, #0]
 800e93c:	7ffa      	ldrb	r2, [r7, #31]
 800e93e:	4613      	mov	r3, r2
 800e940:	011b      	lsls	r3, r3, #4
 800e942:	4413      	add	r3, r2
 800e944:	3318      	adds	r3, #24
 800e946:	440b      	add	r3, r1
 800e948:	3301      	adds	r3, #1
 800e94a:	f107 010c 	add.w	r1, r7, #12
 800e94e:	2210      	movs	r2, #16
 800e950:	4618      	mov	r0, r3
 800e952:	f00c fd88 	bl	801b466 <memcpy1>
                return retval;
 800e956:	7fbb      	ldrb	r3, [r7, #30]
 800e958:	e016      	b.n	800e988 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800e95a:	4b0d      	ldr	r3, [pc, #52]	; (800e990 <SecureElementSetKey+0xb8>)
 800e95c:	6819      	ldr	r1, [r3, #0]
 800e95e:	7ffa      	ldrb	r2, [r7, #31]
 800e960:	4613      	mov	r3, r2
 800e962:	011b      	lsls	r3, r3, #4
 800e964:	4413      	add	r3, r2
 800e966:	3318      	adds	r3, #24
 800e968:	440b      	add	r3, r1
 800e96a:	3301      	adds	r3, #1
 800e96c:	2210      	movs	r2, #16
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	4618      	mov	r0, r3
 800e972:	f00c fd78 	bl	801b466 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800e976:	2300      	movs	r3, #0
 800e978:	e006      	b.n	800e988 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800e97a:	7ffb      	ldrb	r3, [r7, #31]
 800e97c:	3301      	adds	r3, #1
 800e97e:	77fb      	strb	r3, [r7, #31]
 800e980:	7ffb      	ldrb	r3, [r7, #31]
 800e982:	2b0a      	cmp	r3, #10
 800e984:	d9b6      	bls.n	800e8f4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e986:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3720      	adds	r7, #32
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	200004fc 	.word	0x200004fc

0800e994 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af02      	add	r7, sp, #8
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]
 800e9a0:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800e9a2:	78fb      	ldrb	r3, [r7, #3]
 800e9a4:	2b0b      	cmp	r3, #11
 800e9a6:	d901      	bls.n	800e9ac <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	e009      	b.n	800e9c0 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800e9ac:	78fa      	ldrb	r2, [r7, #3]
 800e9ae:	69bb      	ldr	r3, [r7, #24]
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	68b9      	ldr	r1, [r7, #8]
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f7ff fe37 	bl	800e62c <ComputeCmac>
 800e9be:	4603      	mov	r3, r0
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3710      	adds	r7, #16
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af02      	add	r7, sp, #8
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d101      	bne.n	800e9e0 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e9dc:	2302      	movs	r3, #2
 800e9de:	e01b      	b.n	800ea18 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800e9e0:	2306      	movs	r3, #6
 800e9e2:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800e9e8:	78fa      	ldrb	r2, [r7, #3]
 800e9ea:	f107 0310 	add.w	r3, r7, #16
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	68ba      	ldr	r2, [r7, #8]
 800e9f4:	68f9      	ldr	r1, [r7, #12]
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	f7ff fe18 	bl	800e62c <ComputeCmac>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ea00:	7dfb      	ldrb	r3, [r7, #23]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d001      	beq.n	800ea0a <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800ea06:	7dfb      	ldrb	r3, [r7, #23]
 800ea08:	e006      	b.n	800ea18 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	687a      	ldr	r2, [r7, #4]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d001      	beq.n	800ea16 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800ea12:	2301      	movs	r3, #1
 800ea14:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800ea16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3718      	adds	r7, #24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b0c2      	sub	sp, #264	; 0x108
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ea2c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800ea30:	6001      	str	r1, [r0, #0]
 800ea32:	4611      	mov	r1, r2
 800ea34:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ea38:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ea3c:	6013      	str	r3, [r2, #0]
 800ea3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea42:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800ea46:	460a      	mov	r2, r1
 800ea48:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d006      	beq.n	800ea5e <SecureElementAesEncrypt+0x3e>
 800ea50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d101      	bne.n	800ea62 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ea5e:	2302      	movs	r3, #2
 800ea60:	e059      	b.n	800eb16 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800ea62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea66:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f003 030f 	and.w	r3, r3, #15
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d001      	beq.n	800ea78 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ea74:	2305      	movs	r3, #5
 800ea76:	e04e      	b.n	800eb16 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800ea78:	f107 0314 	add.w	r3, r7, #20
 800ea7c:	22f0      	movs	r2, #240	; 0xf0
 800ea7e:	2100      	movs	r1, #0
 800ea80:	4618      	mov	r0, r3
 800ea82:	f00c fd2b 	bl	801b4dc <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800ea86:	f107 0210 	add.w	r2, r7, #16
 800ea8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea8e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	4611      	mov	r1, r2
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7ff fd98 	bl	800e5cc <GetKeyByID>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800eaa2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d133      	bne.n	800eb12 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	3301      	adds	r3, #1
 800eaae:	f107 0214 	add.w	r2, r7, #20
 800eab2:	2110      	movs	r1, #16
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7ff fb65 	bl	800e184 <lorawan_aes_set_key>

        uint8_t block = 0;
 800eaba:	2300      	movs	r3, #0
 800eabc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800eac0:	e020      	b.n	800eb04 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800eac2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	18d0      	adds	r0, r2, r3
 800eaca:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800eace:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800ead2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800ead6:	6812      	ldr	r2, [r2, #0]
 800ead8:	4413      	add	r3, r2
 800eada:	f107 0214 	add.w	r2, r7, #20
 800eade:	4619      	mov	r1, r3
 800eae0:	f7ff fc2e 	bl	800e340 <lorawan_aes_encrypt>
            block = block + 16;
 800eae4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800eae8:	3310      	adds	r3, #16
 800eaea:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800eaee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eaf2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eaf6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800eafa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800eafe:	6812      	ldr	r2, [r2, #0]
 800eb00:	3a10      	subs	r2, #16
 800eb02:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800eb04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb08:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1d7      	bne.n	800eac2 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800eb12:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b088      	sub	sp, #32
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eb36:	2302      	movs	r3, #2
 800eb38:	e02e      	b.n	800eb98 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800eb3a:	2306      	movs	r3, #6
 800eb3c:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800eb3e:	78bb      	ldrb	r3, [r7, #2]
 800eb40:	2b0c      	cmp	r3, #12
 800eb42:	d104      	bne.n	800eb4e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800eb44:	78fb      	ldrb	r3, [r7, #3]
 800eb46:	2b0b      	cmp	r3, #11
 800eb48:	d001      	beq.n	800eb4e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	e024      	b.n	800eb98 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800eb4e:	2300      	movs	r3, #0
 800eb50:	60fb      	str	r3, [r7, #12]
 800eb52:	f107 0310 	add.w	r3, r7, #16
 800eb56:	2200      	movs	r2, #0
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	605a      	str	r2, [r3, #4]
 800eb5c:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800eb5e:	f107 030c 	add.w	r3, r7, #12
 800eb62:	78fa      	ldrb	r2, [r7, #3]
 800eb64:	2110      	movs	r1, #16
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7ff ff5a 	bl	800ea20 <SecureElementAesEncrypt>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800eb70:	7ffb      	ldrb	r3, [r7, #31]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d001      	beq.n	800eb7a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800eb76:	7ffb      	ldrb	r3, [r7, #31]
 800eb78:	e00e      	b.n	800eb98 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800eb7a:	f107 020c 	add.w	r2, r7, #12
 800eb7e:	78bb      	ldrb	r3, [r7, #2]
 800eb80:	4611      	mov	r1, r2
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7ff fea8 	bl	800e8d8 <SecureElementSetKey>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800eb8c:	7ffb      	ldrb	r3, [r7, #31]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d001      	beq.n	800eb96 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800eb92:	7ffb      	ldrb	r3, [r7, #31]
 800eb94:	e000      	b.n	800eb98 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800eb96:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3720      	adds	r7, #32
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60b9      	str	r1, [r7, #8]
 800eba8:	607b      	str	r3, [r7, #4]
 800ebaa:	4603      	mov	r3, r0
 800ebac:	73fb      	strb	r3, [r7, #15]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d005      	beq.n	800ebc4 <SecureElementProcessJoinAccept+0x24>
 800ebb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <SecureElementProcessJoinAccept+0x24>
 800ebbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d101      	bne.n	800ebc8 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ebc4:	2302      	movs	r3, #2
 800ebc6:	e05c      	b.n	800ec82 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800ebc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebcc:	2b21      	cmp	r3, #33	; 0x21
 800ebce:	d901      	bls.n	800ebd4 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ebd0:	2305      	movs	r3, #5
 800ebd2:	e056      	b.n	800ec82 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800ebd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	461a      	mov	r2, r3
 800ebe0:	6879      	ldr	r1, [r7, #4]
 800ebe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebe4:	f00c fc3f 	bl	801b466 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	1c58      	adds	r0, r3, #1
 800ebec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebf0:	3b01      	subs	r3, #1
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	7dfa      	ldrb	r2, [r7, #23]
 800ebfa:	f7ff ff11 	bl	800ea20 <SecureElementAesEncrypt>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800ec04:	2307      	movs	r3, #7
 800ec06:	e03c      	b.n	800ec82 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800ec08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec0a:	330b      	adds	r3, #11
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	09db      	lsrs	r3, r3, #7
 800ec10:	b2da      	uxtb	r2, r3
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800ec16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec1a:	3b04      	subs	r3, #4
 800ec1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec1e:	4413      	add	r3, r2
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	4619      	mov	r1, r3
 800ec24:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec28:	3b03      	subs	r3, #3
 800ec2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec2c:	4413      	add	r3, r2
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	021b      	lsls	r3, r3, #8
 800ec32:	ea41 0203 	orr.w	r2, r1, r3
 800ec36:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec3a:	3b02      	subs	r3, #2
 800ec3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec3e:	440b      	add	r3, r1
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	041b      	lsls	r3, r3, #16
 800ec44:	431a      	orrs	r2, r3
 800ec46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec4a:	3b01      	subs	r3, #1
 800ec4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec4e:	440b      	add	r3, r1
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	061b      	lsls	r3, r3, #24
 800ec54:	4313      	orrs	r3, r2
 800ec56:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800ec58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d10d      	bne.n	800ec7c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ec60:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec64:	3b04      	subs	r3, #4
 800ec66:	4619      	mov	r1, r3
 800ec68:	2301      	movs	r3, #1
 800ec6a:	693a      	ldr	r2, [r7, #16]
 800ec6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec6e:	f7ff feab 	bl	800e9c8 <SecureElementVerifyAesCmac>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d003      	beq.n	800ec80 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e002      	b.n	800ec82 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800ec7c:	2304      	movs	r3, #4
 800ec7e:	e000      	b.n	800ec82 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
	...

0800ec8c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec9a:	2302      	movs	r3, #2
 800ec9c:	e007      	b.n	800ecae <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800ec9e:	4b06      	ldr	r3, [pc, #24]	; (800ecb8 <SecureElementSetDevEui+0x2c>)
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2208      	movs	r2, #8
 800eca4:	6879      	ldr	r1, [r7, #4]
 800eca6:	4618      	mov	r0, r3
 800eca8:	f00c fbdd 	bl	801b466 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ecac:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
 800ecb6:	bf00      	nop
 800ecb8:	200004fc 	.word	0x200004fc

0800ecbc <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d101      	bne.n	800ecce <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ecca:	2302      	movs	r3, #2
 800eccc:	e007      	b.n	800ecde <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800ecce:	4b06      	ldr	r3, [pc, #24]	; (800ece8 <SecureElementGetDevEui+0x2c>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	2208      	movs	r2, #8
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f00c fbc5 	bl	801b466 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ecdc:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	200004fc 	.word	0x200004fc

0800ecec <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d101      	bne.n	800ecfe <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ecfa:	2302      	movs	r3, #2
 800ecfc:	e008      	b.n	800ed10 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800ecfe:	4b06      	ldr	r3, [pc, #24]	; (800ed18 <SecureElementSetJoinEui+0x2c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	3308      	adds	r3, #8
 800ed04:	2208      	movs	r2, #8
 800ed06:	6879      	ldr	r1, [r7, #4]
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f00c fbac 	bl	801b466 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ed0e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3708      	adds	r7, #8
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	200004fc 	.word	0x200004fc

0800ed1c <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d101      	bne.n	800ed2e <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ed2a:	2302      	movs	r3, #2
 800ed2c:	e008      	b.n	800ed40 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800ed2e:	4b06      	ldr	r3, [pc, #24]	; (800ed48 <SecureElementGetJoinEui+0x2c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	3308      	adds	r3, #8
 800ed34:	2208      	movs	r2, #8
 800ed36:	4619      	mov	r1, r3
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f00c fb94 	bl	801b466 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800ed3e:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}
 800ed48:	200004fc 	.word	0x200004fc

0800ed4c <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	4603      	mov	r3, r0
 800ed54:	6039      	str	r1, [r7, #0]
 800ed56:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800ed58:	79fb      	ldrb	r3, [r7, #7]
 800ed5a:	2b02      	cmp	r3, #2
 800ed5c:	d104      	bne.n	800ed68 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800ed5e:	4b07      	ldr	r3, [pc, #28]	; (800ed7c <SecureElementSetDevAddr+0x30>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	611a      	str	r2, [r3, #16]
 800ed66:	e003      	b.n	800ed70 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800ed68:	4b04      	ldr	r3, [pc, #16]	; (800ed7c <SecureElementSetDevAddr+0x30>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	683a      	ldr	r2, [r7, #0]
 800ed6e:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800ed70:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	370c      	adds	r7, #12
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bc80      	pop	{r7}
 800ed7a:	4770      	bx	lr
 800ed7c:	200004fc 	.word	0x200004fc

0800ed80 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	4603      	mov	r3, r0
 800ed88:	6039      	str	r1, [r7, #0]
 800ed8a:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d101      	bne.n	800ed96 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ed92:	2302      	movs	r3, #2
 800ed94:	e00e      	b.n	800edb4 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800ed96:	79fb      	ldrb	r3, [r7, #7]
 800ed98:	2b02      	cmp	r3, #2
 800ed9a:	d105      	bne.n	800eda8 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800ed9c:	4b08      	ldr	r3, [pc, #32]	; (800edc0 <SecureElementGetDevAddr+0x40>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	691a      	ldr	r2, [r3, #16]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	601a      	str	r2, [r3, #0]
 800eda6:	e004      	b.n	800edb2 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800eda8:	4b05      	ldr	r3, [pc, #20]	; (800edc0 <SecureElementGetDevAddr+0x40>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	695a      	ldr	r2, [r3, #20]
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800edb2:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	bc80      	pop	{r7}
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	200004fc 	.word	0x200004fc

0800edc4 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800edce:	4a29      	ldr	r2, [pc, #164]	; (800ee74 <LmHandlerInit+0xb0>)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800edd4:	4b28      	ldr	r3, [pc, #160]	; (800ee78 <LmHandlerInit+0xb4>)
 800edd6:	4a29      	ldr	r2, [pc, #164]	; (800ee7c <LmHandlerInit+0xb8>)
 800edd8:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800edda:	4b27      	ldr	r3, [pc, #156]	; (800ee78 <LmHandlerInit+0xb4>)
 800eddc:	4a28      	ldr	r2, [pc, #160]	; (800ee80 <LmHandlerInit+0xbc>)
 800edde:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800ede0:	4b25      	ldr	r3, [pc, #148]	; (800ee78 <LmHandlerInit+0xb4>)
 800ede2:	4a28      	ldr	r2, [pc, #160]	; (800ee84 <LmHandlerInit+0xc0>)
 800ede4:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800ede6:	4b24      	ldr	r3, [pc, #144]	; (800ee78 <LmHandlerInit+0xb4>)
 800ede8:	4a27      	ldr	r2, [pc, #156]	; (800ee88 <LmHandlerInit+0xc4>)
 800edea:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800edec:	4b21      	ldr	r3, [pc, #132]	; (800ee74 <LmHandlerInit+0xb0>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4a26      	ldr	r2, [pc, #152]	; (800ee8c <LmHandlerInit+0xc8>)
 800edf4:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800edf6:	4b1f      	ldr	r3, [pc, #124]	; (800ee74 <LmHandlerInit+0xb0>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	4a23      	ldr	r2, [pc, #140]	; (800ee8c <LmHandlerInit+0xc8>)
 800edfe:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800ee00:	4b1c      	ldr	r3, [pc, #112]	; (800ee74 <LmHandlerInit+0xb0>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	689b      	ldr	r3, [r3, #8]
 800ee06:	4a21      	ldr	r2, [pc, #132]	; (800ee8c <LmHandlerInit+0xc8>)
 800ee08:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800ee0a:	4b1a      	ldr	r3, [pc, #104]	; (800ee74 <LmHandlerInit+0xb0>)
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	4a1e      	ldr	r2, [pc, #120]	; (800ee8c <LmHandlerInit+0xc8>)
 800ee12:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800ee14:	4b1d      	ldr	r3, [pc, #116]	; (800ee8c <LmHandlerInit+0xc8>)
 800ee16:	4a1e      	ldr	r2, [pc, #120]	; (800ee90 <LmHandlerInit+0xcc>)
 800ee18:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800ee1a:	4b16      	ldr	r3, [pc, #88]	; (800ee74 <LmHandlerInit+0xb0>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	699b      	ldr	r3, [r3, #24]
 800ee20:	4a1a      	ldr	r2, [pc, #104]	; (800ee8c <LmHandlerInit+0xc8>)
 800ee22:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	4a1b      	ldr	r2, [pc, #108]	; (800ee94 <LmHandlerInit+0xd0>)
 800ee28:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800ee2a:	4b12      	ldr	r3, [pc, #72]	; (800ee74 <LmHandlerInit+0xb0>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee30:	4a18      	ldr	r2, [pc, #96]	; (800ee94 <LmHandlerInit+0xd0>)
 800ee32:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800ee34:	4b17      	ldr	r3, [pc, #92]	; (800ee94 <LmHandlerInit+0xd0>)
 800ee36:	4a18      	ldr	r2, [pc, #96]	; (800ee98 <LmHandlerInit+0xd4>)
 800ee38:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800ee3a:	4b16      	ldr	r3, [pc, #88]	; (800ee94 <LmHandlerInit+0xd0>)
 800ee3c:	4a17      	ldr	r2, [pc, #92]	; (800ee9c <LmHandlerInit+0xd8>)
 800ee3e:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800ee40:	4914      	ldr	r1, [pc, #80]	; (800ee94 <LmHandlerInit+0xd0>)
 800ee42:	2000      	movs	r0, #0
 800ee44:	f000 fdb4 	bl	800f9b0 <LmHandlerPackageRegister>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d002      	beq.n	800ee54 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800ee4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee52:	e00a      	b.n	800ee6a <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800ee54:	463b      	mov	r3, r7
 800ee56:	4618      	mov	r0, r3
 800ee58:	f001 fd2a 	bl	80108b0 <LmhpPackagesRegistrationInit>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800ee62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee66:	e000      	b.n	800ee6a <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	20000554 	.word	0x20000554
 800ee78:	20000558 	.word	0x20000558
 800ee7c:	0800f689 	.word	0x0800f689
 800ee80:	0800f6fd 	.word	0x0800f6fd
 800ee84:	0800f7cd 	.word	0x0800f7cd
 800ee88:	0800f91d 	.word	0x0800f91d
 800ee8c:	20000568 	.word	0x20000568
 800ee90:	0800fe5d 	.word	0x0800fe5d
 800ee94:	20000518 	.word	0x20000518
 800ee98:	0800fc71 	.word	0x0800fc71
 800ee9c:	0800fca9 	.word	0x0800fca9

0800eea0 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b092      	sub	sp, #72	; 0x48
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800eea8:	2218      	movs	r2, #24
 800eeaa:	6879      	ldr	r1, [r7, #4]
 800eeac:	4884      	ldr	r0, [pc, #528]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800eeae:	f00c fada 	bl	801b466 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800eeb2:	4b84      	ldr	r3, [pc, #528]	; (800f0c4 <LmHandlerConfigure+0x224>)
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800eeb8:	f7fe faa2 	bl	800d400 <LoraInfo_GetPtr>
 800eebc:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800eebe:	4b80      	ldr	r3, [pc, #512]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800eec0:	781b      	ldrb	r3, [r3, #0]
 800eec2:	461a      	mov	r2, r3
 800eec4:	2301      	movs	r3, #1
 800eec6:	4093      	lsls	r3, r2
 800eec8:	461a      	mov	r2, r3
 800eeca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	4013      	ands	r3, r2
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d106      	bne.n	800eee2 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800eed4:	4b7c      	ldr	r3, [pc, #496]	; (800f0c8 <LmHandlerConfigure+0x228>)
 800eed6:	2201      	movs	r2, #1
 800eed8:	2100      	movs	r1, #0
 800eeda:	2000      	movs	r0, #0
 800eedc:	f010 fd2a 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800eee0:	e7fe      	b.n	800eee0 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800eee2:	4b77      	ldr	r3, [pc, #476]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	461a      	mov	r2, r3
 800eee8:	4978      	ldr	r1, [pc, #480]	; (800f0cc <LmHandlerConfigure+0x22c>)
 800eeea:	4879      	ldr	r0, [pc, #484]	; (800f0d0 <LmHandlerConfigure+0x230>)
 800eeec:	f004 ffd4 	bl	8013e98 <LoRaMacInitialization>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d002      	beq.n	800eefc <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800eef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eefa:	e0dc      	b.n	800f0b6 <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800eefc:	2327      	movs	r3, #39	; 0x27
 800eefe:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ef00:	f107 0318 	add.w	r3, r7, #24
 800ef04:	4618      	mov	r0, r3
 800ef06:	f005 fd53 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d103      	bne.n	800ef18 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800ef10:	4b70      	ldr	r3, [pc, #448]	; (800f0d4 <LmHandlerConfigure+0x234>)
 800ef12:	2201      	movs	r2, #1
 800ef14:	701a      	strb	r2, [r3, #0]
 800ef16:	e02a      	b.n	800ef6e <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800ef18:	2328      	movs	r3, #40	; 0x28
 800ef1a:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800ef1c:	4b6e      	ldr	r3, [pc, #440]	; (800f0d8 <LmHandlerConfigure+0x238>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	691b      	ldr	r3, [r3, #16]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00c      	beq.n	800ef40 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ef26:	f107 0318 	add.w	r3, r7, #24
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f005 fb68 	bl	8014600 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800ef30:	4b69      	ldr	r3, [pc, #420]	; (800f0d8 <LmHandlerConfigure+0x238>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	691b      	ldr	r3, [r3, #16]
 800ef36:	69fa      	ldr	r2, [r7, #28]
 800ef38:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800ef40:	2327      	movs	r3, #39	; 0x27
 800ef42:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ef44:	f107 0318 	add.w	r3, r7, #24
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f005 fd31 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10c      	bne.n	800ef6e <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800ef54:	2301      	movs	r3, #1
 800ef56:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ef58:	f107 0318 	add.w	r3, r7, #24
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f005 fb4f 	bl	8014600 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ef62:	7f3b      	ldrb	r3, [r7, #28]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d002      	beq.n	800ef6e <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800ef68:	4b5a      	ldr	r3, [pc, #360]	; (800f0d4 <LmHandlerConfigure+0x234>)
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800ef6e:	4b59      	ldr	r3, [pc, #356]	; (800f0d4 <LmHandlerConfigure+0x234>)
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d022      	beq.n	800efbc <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800ef76:	4b58      	ldr	r3, [pc, #352]	; (800f0d8 <LmHandlerConfigure+0x238>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	69db      	ldr	r3, [r3, #28]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d004      	beq.n	800ef8a <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800ef80:	4b55      	ldr	r3, [pc, #340]	; (800f0d8 <LmHandlerConfigure+0x238>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	69db      	ldr	r3, [r3, #28]
 800ef86:	2000      	movs	r0, #0
 800ef88:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800ef8a:	2327      	movs	r3, #39	; 0x27
 800ef8c:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ef8e:	f107 0318 	add.w	r3, r7, #24
 800ef92:	4618      	mov	r0, r3
 800ef94:	f005 fb34 	bl	8014600 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800ef9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef9e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800efa2:	4b47      	ldr	r3, [pc, #284]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800efa4:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800efa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa8:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800efac:	4b44      	ldr	r3, [pc, #272]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800efae:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800efb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800efb6:	4b42      	ldr	r3, [pc, #264]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800efb8:	709a      	strb	r2, [r3, #2]
 800efba:	e008      	b.n	800efce <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800efbc:	2305      	movs	r3, #5
 800efbe:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800efc0:	2300      	movs	r3, #0
 800efc2:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800efc4:	f107 0318 	add.w	r3, r7, #24
 800efc8:	4618      	mov	r0, r3
 800efca:	f005 fcf1 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800efce:	4b3f      	ldr	r3, [pc, #252]	; (800f0cc <LmHandlerConfigure+0x22c>)
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	4a3e      	ldr	r2, [pc, #248]	; (800f0cc <LmHandlerConfigure+0x22c>)
 800efd4:	68d2      	ldr	r2, [r2, #12]
 800efd6:	4611      	mov	r1, r2
 800efd8:	4618      	mov	r0, r3
 800efda:	f7ff fbcb 	bl	800e774 <SecureElementInitMcuID>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800efe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efe8:	e065      	b.n	800f0b6 <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800efea:	2306      	movs	r3, #6
 800efec:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800efee:	f107 0318 	add.w	r3, r7, #24
 800eff2:	4618      	mov	r0, r3
 800eff4:	f005 fb04 	bl	8014600 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	4a38      	ldr	r2, [pc, #224]	; (800f0dc <LmHandlerConfigure+0x23c>)
 800effc:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800effe:	f107 0318 	add.w	r3, r7, #24
 800f002:	4618      	mov	r0, r3
 800f004:	f005 fcd4 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f008:	2302      	movs	r3, #2
 800f00a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f00c:	4b33      	ldr	r3, [pc, #204]	; (800f0dc <LmHandlerConfigure+0x23c>)
 800f00e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f010:	f107 0318 	add.w	r3, r7, #24
 800f014:	4618      	mov	r0, r3
 800f016:	f005 faf3 	bl	8014600 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f01a:	2303      	movs	r3, #3
 800f01c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f01e:	4b30      	ldr	r3, [pc, #192]	; (800f0e0 <LmHandlerConfigure+0x240>)
 800f020:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f022:	f107 0318 	add.w	r3, r7, #24
 800f026:	4618      	mov	r0, r3
 800f028:	f005 faea 	bl	8014600 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f02c:	f7ff fc22 	bl	800e874 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f030:	230f      	movs	r3, #15
 800f032:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f034:	2301      	movs	r3, #1
 800f036:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f038:	f107 0318 	add.w	r3, r7, #24
 800f03c:	4618      	mov	r0, r3
 800f03e:	f005 fcb7 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f042:	2310      	movs	r3, #16
 800f044:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f046:	2300      	movs	r3, #0
 800f048:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f04a:	f107 0318 	add.w	r3, r7, #24
 800f04e:	4618      	mov	r0, r3
 800f050:	f005 fcae 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f054:	2304      	movs	r3, #4
 800f056:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f058:	4b19      	ldr	r3, [pc, #100]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800f05a:	789b      	ldrb	r3, [r3, #2]
 800f05c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f05e:	f107 0318 	add.w	r3, r7, #24
 800f062:	4618      	mov	r0, r3
 800f064:	f005 fca4 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f068:	233a      	movs	r3, #58	; 0x3a
 800f06a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f06c:	4b14      	ldr	r3, [pc, #80]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800f06e:	695b      	ldr	r3, [r3, #20]
 800f070:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f072:	f107 0318 	add.w	r3, r7, #24
 800f076:	4618      	mov	r0, r3
 800f078:	f005 fc9a 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f07c:	230f      	movs	r3, #15
 800f07e:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f080:	4b0f      	ldr	r3, [pc, #60]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	f107 0210 	add.w	r2, r7, #16
 800f088:	4611      	mov	r1, r2
 800f08a:	4618      	mov	r0, r3
 800f08c:	f008 fbea 	bl	8017864 <RegionGetPhyParam>
 800f090:	4603      	mov	r3, r0
 800f092:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	bf14      	ite	ne
 800f09a:	2301      	movne	r3, #1
 800f09c:	2300      	moveq	r3, #0
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	4b07      	ldr	r3, [pc, #28]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800f0a2:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f0a4:	2014      	movs	r0, #20
 800f0a6:	f000 fad7 	bl	800f658 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f0aa:	4b05      	ldr	r3, [pc, #20]	; (800f0c0 <LmHandlerConfigure+0x220>)
 800f0ac:	79db      	ldrb	r3, [r3, #7]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f006 faf8 	bl	80156a4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3748      	adds	r7, #72	; 0x48
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	2000053c 	.word	0x2000053c
 800f0c4:	20000584 	.word	0x20000584
 800f0c8:	08020688 	.word	0x08020688
 800f0cc:	20000568 	.word	0x20000568
 800f0d0:	20000558 	.word	0x20000558
 800f0d4:	2000067a 	.word	0x2000067a
 800f0d8:	20000554 	.word	0x20000554
 800f0dc:	20000500 	.word	0x20000500
 800f0e0:	20000508 	.word	0x20000508

0800f0e4 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f0ea:	f002 fe49 	bl	8011d80 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f0ee:	f000 fd8b 	bl	800fc08 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f0f2:	f000 fd5f 	bl	800fbb4 <LmHandlerPackageIsTxPending>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d117      	bne.n	800f12c <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800f0fc:	4b0d      	ldr	r3, [pc, #52]	; (800f134 <LmHandlerProcess+0x50>)
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d014      	beq.n	800f12e <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800f104:	2300      	movs	r3, #0
 800f106:	703b      	strb	r3, [r7, #0]
 800f108:	2300      	movs	r3, #0
 800f10a:	707b      	strb	r3, [r7, #1]
 800f10c:	2300      	movs	r3, #0
 800f10e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800f110:	4b09      	ldr	r3, [pc, #36]	; (800f138 <LmHandlerProcess+0x54>)
 800f112:	78d9      	ldrb	r1, [r3, #3]
 800f114:	463b      	mov	r3, r7
 800f116:	2200      	movs	r2, #0
 800f118:	4618      	mov	r0, r3
 800f11a:	f000 f8d7 	bl	800f2cc <LmHandlerSend>
 800f11e:	4603      	mov	r3, r0
 800f120:	2b00      	cmp	r3, #0
 800f122:	d104      	bne.n	800f12e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800f124:	4b03      	ldr	r3, [pc, #12]	; (800f134 <LmHandlerProcess+0x50>)
 800f126:	2200      	movs	r2, #0
 800f128:	701a      	strb	r2, [r3, #0]
 800f12a:	e000      	b.n	800f12e <LmHandlerProcess+0x4a>
        return;
 800f12c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	20000584 	.word	0x20000584
 800f138:	2000053c 	.word	0x2000053c

0800f13c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f13c:	b480      	push	{r7}
 800f13e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f140:	4b02      	ldr	r3, [pc, #8]	; (800f14c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f142:	681b      	ldr	r3, [r3, #0]
}
 800f144:	4618      	mov	r0, r3
 800f146:	46bd      	mov	sp, r7
 800f148:	bc80      	pop	{r7}
 800f14a:	4770      	bx	lr
 800f14c:	20000580 	.word	0x20000580

0800f150 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b092      	sub	sp, #72	; 0x48
 800f154:	af00      	add	r7, sp, #0
 800f156:	4603      	mov	r3, r0
 800f158:	460a      	mov	r2, r1
 800f15a:	71fb      	strb	r3, [r7, #7]
 800f15c:	4613      	mov	r3, r2
 800f15e:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f160:	2301      	movs	r3, #1
 800f162:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f166:	4b46      	ldr	r3, [pc, #280]	; (800f280 <LmHandlerJoin+0x130>)
 800f168:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f172:	4b43      	ldr	r3, [pc, #268]	; (800f280 <LmHandlerJoin+0x130>)
 800f174:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f178:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f17c:	79fb      	ldrb	r3, [r7, #7]
 800f17e:	2b02      	cmp	r3, #2
 800f180:	d10b      	bne.n	800f19a <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f182:	2302      	movs	r3, #2
 800f184:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f188:	4b3e      	ldr	r3, [pc, #248]	; (800f284 <LmHandlerJoin+0x134>)
 800f18a:	2202      	movs	r2, #2
 800f18c:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f18e:	4a3d      	ldr	r2, [pc, #244]	; (800f284 <LmHandlerJoin+0x134>)
 800f190:	79bb      	ldrb	r3, [r7, #6]
 800f192:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f194:	f005 f936 	bl	8014404 <LoRaMacStart>
 800f198:	e05c      	b.n	800f254 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f19a:	2301      	movs	r3, #1
 800f19c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f1a0:	4b38      	ldr	r3, [pc, #224]	; (800f284 <LmHandlerJoin+0x134>)
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f1a6:	4b36      	ldr	r3, [pc, #216]	; (800f280 <LmHandlerJoin+0x130>)
 800f1a8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f1ac:	4b35      	ldr	r3, [pc, #212]	; (800f284 <LmHandlerJoin+0x134>)
 800f1ae:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f1b0:	4b33      	ldr	r3, [pc, #204]	; (800f280 <LmHandlerJoin+0x130>)
 800f1b2:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f1b6:	4b33      	ldr	r3, [pc, #204]	; (800f284 <LmHandlerJoin+0x134>)
 800f1b8:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f1ba:	4b32      	ldr	r3, [pc, #200]	; (800f284 <LmHandlerJoin+0x134>)
 800f1bc:	2200      	movs	r2, #0
 800f1be:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f1c0:	4a30      	ldr	r2, [pc, #192]	; (800f284 <LmHandlerJoin+0x134>)
 800f1c2:	79bb      	ldrb	r3, [r7, #6]
 800f1c4:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800f1c6:	4b30      	ldr	r3, [pc, #192]	; (800f288 <LmHandlerJoin+0x138>)
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	f083 0301 	eor.w	r3, r3, #1
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d034      	beq.n	800f23e <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f1d4:	231f      	movs	r3, #31
 800f1d6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f1d8:	4b29      	ldr	r3, [pc, #164]	; (800f280 <LmHandlerJoin+0x130>)
 800f1da:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f1de:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f1e0:	f107 030c 	add.w	r3, r7, #12
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f005 fbe3 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f1ea:	2320      	movs	r3, #32
 800f1ec:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f1ee:	4b24      	ldr	r3, [pc, #144]	; (800f280 <LmHandlerJoin+0x130>)
 800f1f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f1f4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f1f6:	f107 030c 	add.w	r3, r7, #12
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f005 fbd8 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f200:	2322      	movs	r3, #34	; 0x22
 800f202:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f204:	4b1e      	ldr	r3, [pc, #120]	; (800f280 <LmHandlerJoin+0x130>)
 800f206:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f20a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f20c:	f107 030c 	add.w	r3, r7, #12
 800f210:	4618      	mov	r0, r3
 800f212:	f005 fbcd 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f216:	2321      	movs	r3, #33	; 0x21
 800f218:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800f21a:	4b19      	ldr	r3, [pc, #100]	; (800f280 <LmHandlerJoin+0x130>)
 800f21c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f220:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f222:	f107 030c 	add.w	r3, r7, #12
 800f226:	4618      	mov	r0, r3
 800f228:	f005 fbc2 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f22c:	2329      	movs	r3, #41	; 0x29
 800f22e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f230:	4b16      	ldr	r3, [pc, #88]	; (800f28c <LmHandlerJoin+0x13c>)
 800f232:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f234:	f107 030c 	add.w	r3, r7, #12
 800f238:	4618      	mov	r0, r3
 800f23a:	f005 fbb9 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800f23e:	f005 f8e1 	bl	8014404 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f242:	2301      	movs	r3, #1
 800f244:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f246:	2301      	movs	r3, #1
 800f248:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f24a:	f107 030c 	add.w	r3, r7, #12
 800f24e:	4618      	mov	r0, r3
 800f250:	f005 fbae 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800f254:	4b0c      	ldr	r3, [pc, #48]	; (800f288 <LmHandlerJoin+0x138>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	f083 0301 	eor.w	r3, r3, #1
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d102      	bne.n	800f268 <LmHandlerJoin+0x118>
 800f262:	79bb      	ldrb	r3, [r7, #6]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d004      	beq.n	800f272 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f268:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f26c:	4618      	mov	r0, r3
 800f26e:	f005 ff49 	bl	8015104 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f274:	4a06      	ldr	r2, [pc, #24]	; (800f290 <LmHandlerJoin+0x140>)
 800f276:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800f278:	bf00      	nop
 800f27a:	3748      	adds	r7, #72	; 0x48
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	2000053c 	.word	0x2000053c
 800f284:	20000094 	.word	0x20000094
 800f288:	2000067a 	.word	0x2000067a
 800f28c:	01000400 	.word	0x01000400
 800f290:	20000580 	.word	0x20000580

0800f294 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b08c      	sub	sp, #48	; 0x30
 800f298:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f29a:	2301      	movs	r3, #1
 800f29c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f29e:	1d3b      	adds	r3, r7, #4
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f005 f9ad 	bl	8014600 <LoRaMacMibGetRequestConfirm>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800f2ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d106      	bne.n	800f2c2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f2b4:	7a3b      	ldrb	r3, [r7, #8]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d101      	bne.n	800f2be <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	e002      	b.n	800f2c4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	e000      	b.n	800f2c4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f2c2:	2300      	movs	r3, #0
    }
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3730      	adds	r7, #48	; 0x30
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b08a      	sub	sp, #40	; 0x28
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	70fb      	strb	r3, [r7, #3]
 800f2d8:	4613      	mov	r3, r2
 800f2da:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f2dc:	23ff      	movs	r3, #255	; 0xff
 800f2de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800f2e2:	f002 faa7 	bl	8011834 <LoRaMacIsBusy>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d002      	beq.n	800f2f2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f2ec:	f06f 0301 	mvn.w	r3, #1
 800f2f0:	e0ab      	b.n	800f44a <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800f2f2:	f002 fac7 	bl	8011884 <LoRaMacIsStopped>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f2fc:	f06f 0302 	mvn.w	r3, #2
 800f300:	e0a3      	b.n	800f44a <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f302:	f7ff ffc7 	bl	800f294 <LmHandlerJoinStatus>
 800f306:	4603      	mov	r3, r0
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d00a      	beq.n	800f322 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800f30c:	4b51      	ldr	r3, [pc, #324]	; (800f454 <LmHandlerSend+0x188>)
 800f30e:	79db      	ldrb	r3, [r3, #7]
 800f310:	4a50      	ldr	r2, [pc, #320]	; (800f454 <LmHandlerSend+0x188>)
 800f312:	7a12      	ldrb	r2, [r2, #8]
 800f314:	4611      	mov	r1, r2
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff ff1a 	bl	800f150 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f31c:	f06f 0302 	mvn.w	r3, #2
 800f320:	e093      	b.n	800f44a <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800f322:	4a4d      	ldr	r2, [pc, #308]	; (800f458 <LmHandlerSend+0x18c>)
 800f324:	78fb      	ldrb	r3, [r7, #3]
 800f326:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800f328:	78fb      	ldrb	r3, [r7, #3]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	bf14      	ite	ne
 800f32e:	2301      	movne	r3, #1
 800f330:	2300      	moveq	r3, #0
 800f332:	b2db      	uxtb	r3, r3
 800f334:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f336:	4b49      	ldr	r3, [pc, #292]	; (800f45c <LmHandlerSend+0x190>)
 800f338:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f33c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	785b      	ldrb	r3, [r3, #1]
 800f342:	f107 020c 	add.w	r2, r7, #12
 800f346:	4611      	mov	r1, r2
 800f348:	4618      	mov	r0, r3
 800f34a:	f005 f8c9 	bl	80144e0 <LoRaMacQueryTxPossible>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d009      	beq.n	800f368 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f354:	2300      	movs	r3, #0
 800f356:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f358:	2300      	movs	r3, #0
 800f35a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f35c:	2300      	movs	r3, #0
 800f35e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800f360:	23f9      	movs	r3, #249	; 0xf9
 800f362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f366:	e009      	b.n	800f37c <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	785b      	ldrb	r3, [r3, #1]
 800f372:	b29b      	uxth	r3, r3
 800f374:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800f37c:	4b36      	ldr	r3, [pc, #216]	; (800f458 <LmHandlerSend+0x18c>)
 800f37e:	687a      	ldr	r2, [r7, #4]
 800f380:	3310      	adds	r3, #16
 800f382:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f386:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f38a:	4b34      	ldr	r3, [pc, #208]	; (800f45c <LmHandlerSend+0x190>)
 800f38c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f390:	4b31      	ldr	r3, [pc, #196]	; (800f458 <LmHandlerSend+0x18c>)
 800f392:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800f394:	78ba      	ldrb	r2, [r7, #2]
 800f396:	f107 0310 	add.w	r3, r7, #16
 800f39a:	4611      	mov	r1, r2
 800f39c:	4618      	mov	r0, r3
 800f39e:	f006 f849 	bl	8015434 <LoRaMacMcpsRequest>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f3a8:	6a3b      	ldr	r3, [r7, #32]
 800f3aa:	4a2d      	ldr	r2, [pc, #180]	; (800f460 <LmHandlerSend+0x194>)
 800f3ac:	6013      	str	r3, [r2, #0]

    switch( status )
 800f3ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3b2:	2b11      	cmp	r3, #17
 800f3b4:	d842      	bhi.n	800f43c <LmHandlerSend+0x170>
 800f3b6:	a201      	add	r2, pc, #4	; (adr r2, 800f3bc <LmHandlerSend+0xf0>)
 800f3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3bc:	0800f405 	.word	0x0800f405
 800f3c0:	0800f41d 	.word	0x0800f41d
 800f3c4:	0800f43d 	.word	0x0800f43d
 800f3c8:	0800f43d 	.word	0x0800f43d
 800f3cc:	0800f43d 	.word	0x0800f43d
 800f3d0:	0800f43d 	.word	0x0800f43d
 800f3d4:	0800f43d 	.word	0x0800f43d
 800f3d8:	0800f425 	.word	0x0800f425
 800f3dc:	0800f43d 	.word	0x0800f43d
 800f3e0:	0800f43d 	.word	0x0800f43d
 800f3e4:	0800f43d 	.word	0x0800f43d
 800f3e8:	0800f435 	.word	0x0800f435
 800f3ec:	0800f43d 	.word	0x0800f43d
 800f3f0:	0800f43d 	.word	0x0800f43d
 800f3f4:	0800f41d 	.word	0x0800f41d
 800f3f8:	0800f41d 	.word	0x0800f41d
 800f3fc:	0800f41d 	.word	0x0800f41d
 800f400:	0800f42d 	.word	0x0800f42d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800f404:	4b17      	ldr	r3, [pc, #92]	; (800f464 <LmHandlerSend+0x198>)
 800f406:	2200      	movs	r2, #0
 800f408:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800f40a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f40e:	f113 0f07 	cmn.w	r3, #7
 800f412:	d017      	beq.n	800f444 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f414:	2300      	movs	r3, #0
 800f416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800f41a:	e013      	b.n	800f444 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f41c:	23fe      	movs	r3, #254	; 0xfe
 800f41e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f422:	e010      	b.n	800f446 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f424:	23fd      	movs	r3, #253	; 0xfd
 800f426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f42a:	e00c      	b.n	800f446 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f42c:	23fb      	movs	r3, #251	; 0xfb
 800f42e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f432:	e008      	b.n	800f446 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f434:	23fa      	movs	r3, #250	; 0xfa
 800f436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f43a:	e004      	b.n	800f446 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f43c:	23ff      	movs	r3, #255	; 0xff
 800f43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800f442:	e000      	b.n	800f446 <LmHandlerSend+0x17a>
            break;
 800f444:	bf00      	nop
    }

    return lmhStatus;
 800f446:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3728      	adds	r7, #40	; 0x28
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	20000094 	.word	0x20000094
 800f458:	200000a0 	.word	0x200000a0
 800f45c:	2000053c 	.word	0x2000053c
 800f460:	20000580 	.word	0x20000580
 800f464:	20000584 	.word	0x20000584

0800f468 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b086      	sub	sp, #24
 800f46c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f46e:	2309      	movs	r3, #9
 800f470:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f472:	463b      	mov	r3, r7
 800f474:	4618      	mov	r0, r3
 800f476:	f005 fe45 	bl	8015104 <LoRaMacMlmeRequest>
 800f47a:	4603      	mov	r3, r0
 800f47c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	4a06      	ldr	r2, [pc, #24]	; (800f49c <LmHandlerDeviceTimeReq+0x34>)
 800f482:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800f484:	7dfb      	ldrb	r3, [r7, #23]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d101      	bne.n	800f48e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f48a:	2300      	movs	r3, #0
 800f48c:	e001      	b.n	800f492 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f48e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800f492:	4618      	mov	r0, r3
 800f494:	3718      	adds	r7, #24
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	20000580 	.word	0x20000580

0800f4a0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800f4aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	370c      	adds	r7, #12
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bc80      	pop	{r7}
 800f4b6:	4770      	bx	lr

0800f4b8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b08e      	sub	sp, #56	; 0x38
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800f4c8:	f002 f9b4 	bl	8011834 <LoRaMacIsBusy>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d002      	beq.n	800f4d8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f4d2:	f06f 0301 	mvn.w	r3, #1
 800f4d6:	e071      	b.n	800f5bc <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800f4d8:	f7ff fedc 	bl	800f294 <LmHandlerJoinStatus>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d002      	beq.n	800f4e8 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f4e2:	f06f 0302 	mvn.w	r3, #2
 800f4e6:	e069      	b.n	800f5bc <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f4ec:	f107 030c 	add.w	r3, r7, #12
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f005 f885 	bl	8014600 <LoRaMacMibGetRequestConfirm>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d002      	beq.n	800f502 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f4fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f500:	e05c      	b.n	800f5bc <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800f502:	7c3b      	ldrb	r3, [r7, #16]
 800f504:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800f508:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800f50c:	79fb      	ldrb	r3, [r7, #7]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d052      	beq.n	800f5b8 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800f512:	79fb      	ldrb	r3, [r7, #7]
 800f514:	2b02      	cmp	r3, #2
 800f516:	d028      	beq.n	800f56a <LmHandlerRequestClass+0xb2>
 800f518:	2b02      	cmp	r3, #2
 800f51a:	dc48      	bgt.n	800f5ae <LmHandlerRequestClass+0xf6>
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d002      	beq.n	800f526 <LmHandlerRequestClass+0x6e>
 800f520:	2b01      	cmp	r3, #1
 800f522:	d01e      	beq.n	800f562 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800f524:	e043      	b.n	800f5ae <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800f526:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d041      	beq.n	800f5b2 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800f52e:	79fb      	ldrb	r3, [r7, #7]
 800f530:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f532:	f107 030c 	add.w	r3, r7, #12
 800f536:	4618      	mov	r0, r3
 800f538:	f005 fa3a 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10b      	bne.n	800f55a <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f542:	4b20      	ldr	r3, [pc, #128]	; (800f5c4 <LmHandlerRequestClass+0x10c>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d032      	beq.n	800f5b2 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f54c:	4b1d      	ldr	r3, [pc, #116]	; (800f5c4 <LmHandlerRequestClass+0x10c>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f552:	79fa      	ldrb	r2, [r7, #7]
 800f554:	4610      	mov	r0, r2
 800f556:	4798      	blx	r3
                break;
 800f558:	e02b      	b.n	800f5b2 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f55a:	23ff      	movs	r3, #255	; 0xff
 800f55c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f560:	e027      	b.n	800f5b2 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f562:	23ff      	movs	r3, #255	; 0xff
 800f564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f568:	e026      	b.n	800f5b8 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800f56a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d003      	beq.n	800f57a <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f572:	23ff      	movs	r3, #255	; 0xff
 800f574:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f578:	e01d      	b.n	800f5b6 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800f57a:	79fb      	ldrb	r3, [r7, #7]
 800f57c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f57e:	f107 030c 	add.w	r3, r7, #12
 800f582:	4618      	mov	r0, r3
 800f584:	f005 fa14 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
 800f588:	4603      	mov	r3, r0
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d10b      	bne.n	800f5a6 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800f58e:	4b0d      	ldr	r3, [pc, #52]	; (800f5c4 <LmHandlerRequestClass+0x10c>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f594:	2b00      	cmp	r3, #0
 800f596:	d00e      	beq.n	800f5b6 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800f598:	4b0a      	ldr	r3, [pc, #40]	; (800f5c4 <LmHandlerRequestClass+0x10c>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f59e:	79fa      	ldrb	r2, [r7, #7]
 800f5a0:	4610      	mov	r0, r2
 800f5a2:	4798      	blx	r3
                break;
 800f5a4:	e007      	b.n	800f5b6 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800f5a6:	23ff      	movs	r3, #255	; 0xff
 800f5a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800f5ac:	e003      	b.n	800f5b6 <LmHandlerRequestClass+0xfe>
                break;
 800f5ae:	bf00      	nop
 800f5b0:	e002      	b.n	800f5b8 <LmHandlerRequestClass+0x100>
                break;
 800f5b2:	bf00      	nop
 800f5b4:	e000      	b.n	800f5b8 <LmHandlerRequestClass+0x100>
                break;
 800f5b6:	bf00      	nop
        }
    }
    return errorStatus;
 800f5b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3738      	adds	r7, #56	; 0x38
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	20000554 	.word	0x20000554

0800f5c8 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b08c      	sub	sp, #48	; 0x30
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d102      	bne.n	800f5dc <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5da:	e010      	b.n	800f5fe <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f5e0:	f107 0308 	add.w	r3, r7, #8
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f005 f80b 	bl	8014600 <LoRaMacMibGetRequestConfirm>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f5f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5f4:	e003      	b.n	800f5fe <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800f5f6:	7b3a      	ldrb	r2, [r7, #12]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3730      	adds	r7, #48	; 0x30
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
	...

0800f608 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b08c      	sub	sp, #48	; 0x30
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d102      	bne.n	800f61c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f61a:	e016      	b.n	800f64a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800f61c:	2320      	movs	r3, #32
 800f61e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800f620:	f107 0308 	add.w	r3, r7, #8
 800f624:	4618      	mov	r0, r3
 800f626:	f004 ffeb 	bl	8014600 <LoRaMacMibGetRequestConfirm>
 800f62a:	4603      	mov	r3, r0
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d002      	beq.n	800f636 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f634:	e009      	b.n	800f64a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800f636:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f993 2000 	ldrsb.w	r2, [r3]
 800f644:	4b03      	ldr	r3, [pc, #12]	; (800f654 <LmHandlerGetTxDatarate+0x4c>)
 800f646:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800f648:	2300      	movs	r3, #0
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3730      	adds	r7, #48	; 0x30
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	2000053c 	.word	0x2000053c

0800f658 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08c      	sub	sp, #48	; 0x30
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800f660:	2323      	movs	r3, #35	; 0x23
 800f662:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f668:	f107 0308 	add.w	r3, r7, #8
 800f66c:	4618      	mov	r0, r3
 800f66e:	f005 f99f 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d002      	beq.n	800f67e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800f678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f67c:	e000      	b.n	800f680 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800f67e:	2300      	movs	r3, #0
}
 800f680:	4618      	mov	r0, r3
 800f682:	3730      	adds	r7, #48	; 0x30
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800f690:	4b18      	ldr	r3, [pc, #96]	; (800f6f4 <McpsConfirm+0x6c>)
 800f692:	2201      	movs	r2, #1
 800f694:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	785a      	ldrb	r2, [r3, #1]
 800f69a:	4b16      	ldr	r3, [pc, #88]	; (800f6f4 <McpsConfirm+0x6c>)
 800f69c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	789b      	ldrb	r3, [r3, #2]
 800f6a2:	b25a      	sxtb	r2, r3
 800f6a4:	4b13      	ldr	r3, [pc, #76]	; (800f6f4 <McpsConfirm+0x6c>)
 800f6a6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	4a11      	ldr	r2, [pc, #68]	; (800f6f4 <McpsConfirm+0x6c>)
 800f6ae:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800f6b6:	4b0f      	ldr	r3, [pc, #60]	; (800f6f4 <McpsConfirm+0x6c>)
 800f6b8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	691b      	ldr	r3, [r3, #16]
 800f6be:	b2da      	uxtb	r2, r3
 800f6c0:	4b0c      	ldr	r3, [pc, #48]	; (800f6f4 <McpsConfirm+0x6c>)
 800f6c2:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	791b      	ldrb	r3, [r3, #4]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	4b0a      	ldr	r3, [pc, #40]	; (800f6f4 <McpsConfirm+0x6c>)
 800f6cc:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800f6ce:	4b0a      	ldr	r3, [pc, #40]	; (800f6f8 <McpsConfirm+0x70>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d004      	beq.n	800f6e2 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800f6d8:	4b07      	ldr	r3, [pc, #28]	; (800f6f8 <McpsConfirm+0x70>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6de:	4805      	ldr	r0, [pc, #20]	; (800f6f4 <McpsConfirm+0x6c>)
 800f6e0:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800f6e2:	6879      	ldr	r1, [r7, #4]
 800f6e4:	2000      	movs	r0, #0
 800f6e6:	f000 f9e9 	bl	800fabc <LmHandlerPackagesNotify>
}
 800f6ea:	bf00      	nop
 800f6ec:	3708      	adds	r7, #8
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	200000a0 	.word	0x200000a0
 800f6f8:	20000554 	.word	0x20000554

0800f6fc <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b086      	sub	sp, #24
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800f706:	2300      	movs	r3, #0
 800f708:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800f70a:	4b2d      	ldr	r3, [pc, #180]	; (800f7c0 <McpsIndication+0xc4>)
 800f70c:	2201      	movs	r2, #1
 800f70e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	785a      	ldrb	r2, [r3, #1]
 800f714:	4b2a      	ldr	r3, [pc, #168]	; (800f7c0 <McpsIndication+0xc4>)
 800f716:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800f718:	4b29      	ldr	r3, [pc, #164]	; (800f7c0 <McpsIndication+0xc4>)
 800f71a:	785b      	ldrb	r3, [r3, #1]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d14b      	bne.n	800f7b8 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	791b      	ldrb	r3, [r3, #4]
 800f724:	b25a      	sxtb	r2, r3
 800f726:	4b26      	ldr	r3, [pc, #152]	; (800f7c0 <McpsIndication+0xc4>)
 800f728:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f730:	b25a      	sxtb	r2, r3
 800f732:	4b23      	ldr	r3, [pc, #140]	; (800f7c0 <McpsIndication+0xc4>)
 800f734:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800f73c:	4b20      	ldr	r3, [pc, #128]	; (800f7c0 <McpsIndication+0xc4>)
 800f73e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	78da      	ldrb	r2, [r3, #3]
 800f744:	4b1e      	ldr	r3, [pc, #120]	; (800f7c0 <McpsIndication+0xc4>)
 800f746:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	4a1c      	ldr	r2, [pc, #112]	; (800f7c0 <McpsIndication+0xc4>)
 800f74e:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	78db      	ldrb	r3, [r3, #3]
 800f754:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	7b1b      	ldrb	r3, [r3, #12]
 800f75a:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800f762:	4b18      	ldr	r3, [pc, #96]	; (800f7c4 <McpsIndication+0xc8>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d007      	beq.n	800f77c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800f76c:	4b15      	ldr	r3, [pc, #84]	; (800f7c4 <McpsIndication+0xc8>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f772:	f107 0210 	add.w	r2, r7, #16
 800f776:	4912      	ldr	r1, [pc, #72]	; (800f7c0 <McpsIndication+0xc4>)
 800f778:	4610      	mov	r0, r2
 800f77a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800f77c:	4b11      	ldr	r3, [pc, #68]	; (800f7c4 <McpsIndication+0xc8>)
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f782:	2b00      	cmp	r3, #0
 800f784:	d007      	beq.n	800f796 <McpsIndication+0x9a>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	7e1b      	ldrb	r3, [r3, #24]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d003      	beq.n	800f796 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800f78e:	4b0d      	ldr	r3, [pc, #52]	; (800f7c4 <McpsIndication+0xc8>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f794:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800f796:	6879      	ldr	r1, [r7, #4]
 800f798:	2001      	movs	r0, #1
 800f79a:	f000 f98f 	bl	800fabc <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800f79e:	f107 030f 	add.w	r3, r7, #15
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7ff ff10 	bl	800f5c8 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	795b      	ldrb	r3, [r3, #5]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d004      	beq.n	800f7ba <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800f7b0:	4b05      	ldr	r3, [pc, #20]	; (800f7c8 <McpsIndication+0xcc>)
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	701a      	strb	r2, [r3, #0]
 800f7b6:	e000      	b.n	800f7ba <McpsIndication+0xbe>
        return;
 800f7b8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800f7ba:	3718      	adds	r7, #24
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	200000bc 	.word	0x200000bc
 800f7c4:	20000554 	.word	0x20000554
 800f7c8:	20000584 	.word	0x20000584

0800f7cc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b08c      	sub	sp, #48	; 0x30
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800f7d4:	4b49      	ldr	r3, [pc, #292]	; (800f8fc <MlmeConfirm+0x130>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	785a      	ldrb	r2, [r3, #1]
 800f7de:	4b47      	ldr	r3, [pc, #284]	; (800f8fc <MlmeConfirm+0x130>)
 800f7e0:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800f7e2:	4b47      	ldr	r3, [pc, #284]	; (800f900 <MlmeConfirm+0x134>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d004      	beq.n	800f7f6 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800f7ec:	4b44      	ldr	r3, [pc, #272]	; (800f900 <MlmeConfirm+0x134>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7f2:	4842      	ldr	r0, [pc, #264]	; (800f8fc <MlmeConfirm+0x130>)
 800f7f4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800f7f6:	6879      	ldr	r1, [r7, #4]
 800f7f8:	2002      	movs	r0, #2
 800f7fa:	f000 f95f 	bl	800fabc <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	3b01      	subs	r3, #1
 800f804:	2b0b      	cmp	r3, #11
 800f806:	d872      	bhi.n	800f8ee <MlmeConfirm+0x122>
 800f808:	a201      	add	r2, pc, #4	; (adr r2, 800f810 <MlmeConfirm+0x44>)
 800f80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f80e:	bf00      	nop
 800f810:	0800f841 	.word	0x0800f841
 800f814:	0800f8ef 	.word	0x0800f8ef
 800f818:	0800f8ef 	.word	0x0800f8ef
 800f81c:	0800f8ef 	.word	0x0800f8ef
 800f820:	0800f8bd 	.word	0x0800f8bd
 800f824:	0800f8ef 	.word	0x0800f8ef
 800f828:	0800f8ef 	.word	0x0800f8ef
 800f82c:	0800f8ef 	.word	0x0800f8ef
 800f830:	0800f8ef 	.word	0x0800f8ef
 800f834:	0800f8ef 	.word	0x0800f8ef
 800f838:	0800f8d5 	.word	0x0800f8d5
 800f83c:	0800f8ef 	.word	0x0800f8ef
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800f840:	2306      	movs	r3, #6
 800f842:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800f844:	f107 0308 	add.w	r3, r7, #8
 800f848:	4618      	mov	r0, r3
 800f84a:	f004 fed9 	bl	8014600 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800f84e:	4b2d      	ldr	r3, [pc, #180]	; (800f904 <MlmeConfirm+0x138>)
 800f850:	79db      	ldrb	r3, [r3, #7]
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	4611      	mov	r1, r2
 800f856:	4618      	mov	r0, r3
 800f858:	f7ff fa78 	bl	800ed4c <SecureElementSetDevAddr>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d102      	bne.n	800f868 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	4a28      	ldr	r2, [pc, #160]	; (800f908 <MlmeConfirm+0x13c>)
 800f866:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800f868:	4828      	ldr	r0, [pc, #160]	; (800f90c <MlmeConfirm+0x140>)
 800f86a:	f7ff fecd 	bl	800f608 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800f86e:	4828      	ldr	r0, [pc, #160]	; (800f910 <MlmeConfirm+0x144>)
 800f870:	f000 fa74 	bl	800fd5c <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f874:	4b21      	ldr	r3, [pc, #132]	; (800f8fc <MlmeConfirm+0x130>)
 800f876:	785b      	ldrb	r3, [r3, #1]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d108      	bne.n	800f88e <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f87c:	4b21      	ldr	r3, [pc, #132]	; (800f904 <MlmeConfirm+0x138>)
 800f87e:	2200      	movs	r2, #0
 800f880:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800f882:	4b24      	ldr	r3, [pc, #144]	; (800f914 <MlmeConfirm+0x148>)
 800f884:	785b      	ldrb	r3, [r3, #1]
 800f886:	4618      	mov	r0, r3
 800f888:	f7ff fe16 	bl	800f4b8 <LmHandlerRequestClass>
 800f88c:	e002      	b.n	800f894 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800f88e:	4b1d      	ldr	r3, [pc, #116]	; (800f904 <MlmeConfirm+0x138>)
 800f890:	22ff      	movs	r2, #255	; 0xff
 800f892:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800f894:	4b1a      	ldr	r3, [pc, #104]	; (800f900 <MlmeConfirm+0x134>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d004      	beq.n	800f8a8 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f89e:	4b18      	ldr	r3, [pc, #96]	; (800f900 <MlmeConfirm+0x134>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	4817      	ldr	r0, [pc, #92]	; (800f904 <MlmeConfirm+0x138>)
 800f8a6:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f8a8:	4b14      	ldr	r3, [pc, #80]	; (800f8fc <MlmeConfirm+0x130>)
 800f8aa:	785b      	ldrb	r3, [r3, #1]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d120      	bne.n	800f8f2 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800f8b0:	4b14      	ldr	r3, [pc, #80]	; (800f904 <MlmeConfirm+0x138>)
 800f8b2:	79db      	ldrb	r3, [r3, #7]
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fe fff1 	bl	800e89c <SecureElementPrintSessionKeys>
                }
            }
            break;
 800f8ba:	e01a      	b.n	800f8f2 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800f8bc:	4b16      	ldr	r3, [pc, #88]	; (800f918 <MlmeConfirm+0x14c>)
 800f8be:	2201      	movs	r2, #1
 800f8c0:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	7a1a      	ldrb	r2, [r3, #8]
 800f8c6:	4b14      	ldr	r3, [pc, #80]	; (800f918 <MlmeConfirm+0x14c>)
 800f8c8:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	7a5a      	ldrb	r2, [r3, #9]
 800f8ce:	4b12      	ldr	r3, [pc, #72]	; (800f918 <MlmeConfirm+0x14c>)
 800f8d0:	74da      	strb	r2, [r3, #19]
            }
            break;
 800f8d2:	e00f      	b.n	800f8f4 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	785b      	ldrb	r3, [r3, #1]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d105      	bne.n	800f8e8 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800f8dc:	4b0d      	ldr	r3, [pc, #52]	; (800f914 <MlmeConfirm+0x148>)
 800f8de:	7c1b      	ldrb	r3, [r3, #16]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7ff fddd 	bl	800f4a0 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800f8e6:	e005      	b.n	800f8f4 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800f8e8:	f7ff fdbe 	bl	800f468 <LmHandlerDeviceTimeReq>
            break;
 800f8ec:	e002      	b.n	800f8f4 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800f8ee:	bf00      	nop
 800f8f0:	e000      	b.n	800f8f4 <MlmeConfirm+0x128>
            break;
 800f8f2:	bf00      	nop
    }
}
 800f8f4:	bf00      	nop
 800f8f6:	3730      	adds	r7, #48	; 0x30
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}
 800f8fc:	200000a0 	.word	0x200000a0
 800f900:	20000554 	.word	0x20000554
 800f904:	20000094 	.word	0x20000094
 800f908:	20000500 	.word	0x20000500
 800f90c:	20000098 	.word	0x20000098
 800f910:	20000099 	.word	0x20000099
 800f914:	2000053c 	.word	0x2000053c
 800f918:	200000bc 	.word	0x200000bc

0800f91c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800f926:	4b20      	ldr	r3, [pc, #128]	; (800f9a8 <MlmeIndication+0x8c>)
 800f928:	2200      	movs	r2, #0
 800f92a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	785a      	ldrb	r2, [r3, #1]
 800f930:	4b1d      	ldr	r3, [pc, #116]	; (800f9a8 <MlmeIndication+0x8c>)
 800f932:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	789b      	ldrb	r3, [r3, #2]
 800f938:	b25a      	sxtb	r2, r3
 800f93a:	4b1b      	ldr	r3, [pc, #108]	; (800f9a8 <MlmeIndication+0x8c>)
 800f93c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f944:	b25a      	sxtb	r2, r3
 800f946:	4b18      	ldr	r3, [pc, #96]	; (800f9a8 <MlmeIndication+0x8c>)
 800f948:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800f950:	4b15      	ldr	r3, [pc, #84]	; (800f9a8 <MlmeIndication+0x8c>)
 800f952:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	78da      	ldrb	r2, [r3, #3]
 800f958:	4b13      	ldr	r3, [pc, #76]	; (800f9a8 <MlmeIndication+0x8c>)
 800f95a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	4a11      	ldr	r2, [pc, #68]	; (800f9a8 <MlmeIndication+0x8c>)
 800f962:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800f964:	4b11      	ldr	r3, [pc, #68]	; (800f9ac <MlmeIndication+0x90>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00d      	beq.n	800f98a <MlmeIndication+0x6e>
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	2b0a      	cmp	r3, #10
 800f974:	d009      	beq.n	800f98a <MlmeIndication+0x6e>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	2b0e      	cmp	r3, #14
 800f97c:	d005      	beq.n	800f98a <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800f97e:	4b0b      	ldr	r3, [pc, #44]	; (800f9ac <MlmeIndication+0x90>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f984:	4908      	ldr	r1, [pc, #32]	; (800f9a8 <MlmeIndication+0x8c>)
 800f986:	2000      	movs	r0, #0
 800f988:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800f98a:	6879      	ldr	r1, [r7, #4]
 800f98c:	2003      	movs	r0, #3
 800f98e:	f000 f895 	bl	800fabc <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	781b      	ldrb	r3, [r3, #0]
 800f996:	2b0a      	cmp	r3, #10
 800f998:	d001      	beq.n	800f99e <MlmeIndication+0x82>
 800f99a:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800f99c:	e000      	b.n	800f9a0 <MlmeIndication+0x84>
            break;
 800f99e:	bf00      	nop
    }
}
 800f9a0:	bf00      	nop
 800f9a2:	3708      	adds	r7, #8
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bd80      	pop	{r7, pc}
 800f9a8:	200000bc 	.word	0x200000bc
 800f9ac:	20000554 	.word	0x20000554

0800f9b0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	6039      	str	r1, [r7, #0]
 800f9ba:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	60fb      	str	r3, [r7, #12]
    switch( id )
 800f9c0:	79fb      	ldrb	r3, [r7, #7]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d104      	bne.n	800f9d0 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800f9c6:	f000 fa8b 	bl	800fee0 <LmhpCompliancePackageFactory>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	60fb      	str	r3, [r7, #12]
                break;
 800f9ce:	e00d      	b.n	800f9ec <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800f9d0:	f107 020c 	add.w	r2, r7, #12
 800f9d4:	79fb      	ldrb	r3, [r7, #7]
 800f9d6:	4611      	mov	r1, r2
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f000 ff73 	bl	80108c4 <LmhpPackagesRegister>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800f9e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9e8:	e03b      	b.n	800fa62 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800f9ea:	bf00      	nop
            }
    }
    if( package != NULL )
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d035      	beq.n	800fa5e <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800f9f2:	79fb      	ldrb	r3, [r7, #7]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	491d      	ldr	r1, [pc, #116]	; (800fa6c <LmHandlerPackageRegister+0xbc>)
 800f9f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800f9fc:	79fb      	ldrb	r3, [r7, #7]
 800f9fe:	4a1b      	ldr	r2, [pc, #108]	; (800fa6c <LmHandlerPackageRegister+0xbc>)
 800fa00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa04:	4a1a      	ldr	r2, [pc, #104]	; (800fa70 <LmHandlerPackageRegister+0xc0>)
 800fa06:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800fa08:	4b1a      	ldr	r3, [pc, #104]	; (800fa74 <LmHandlerPackageRegister+0xc4>)
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	79fb      	ldrb	r3, [r7, #7]
 800fa0e:	4917      	ldr	r1, [pc, #92]	; (800fa6c <LmHandlerPackageRegister+0xbc>)
 800fa10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fa14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fa16:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800fa18:	4b16      	ldr	r3, [pc, #88]	; (800fa74 <LmHandlerPackageRegister+0xc4>)
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	79fb      	ldrb	r3, [r7, #7]
 800fa1e:	4913      	ldr	r1, [pc, #76]	; (800fa6c <LmHandlerPackageRegister+0xbc>)
 800fa20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fa24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800fa26:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	4a10      	ldr	r2, [pc, #64]	; (800fa6c <LmHandlerPackageRegister+0xbc>)
 800fa2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa30:	4a11      	ldr	r2, [pc, #68]	; (800fa78 <LmHandlerPackageRegister+0xc8>)
 800fa32:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fa34:	4b0f      	ldr	r3, [pc, #60]	; (800fa74 <LmHandlerPackageRegister+0xc4>)
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	490c      	ldr	r1, [pc, #48]	; (800fa6c <LmHandlerPackageRegister+0xbc>)
 800fa3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fa40:	6992      	ldr	r2, [r2, #24]
 800fa42:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fa44:	79fb      	ldrb	r3, [r7, #7]
 800fa46:	4a09      	ldr	r2, [pc, #36]	; (800fa6c <LmHandlerPackageRegister+0xbc>)
 800fa48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	4a0b      	ldr	r2, [pc, #44]	; (800fa7c <LmHandlerPackageRegister+0xcc>)
 800fa50:	6851      	ldr	r1, [r2, #4]
 800fa52:	4a0a      	ldr	r2, [pc, #40]	; (800fa7c <LmHandlerPackageRegister+0xcc>)
 800fa54:	7852      	ldrb	r2, [r2, #1]
 800fa56:	6838      	ldr	r0, [r7, #0]
 800fa58:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	e001      	b.n	800fa62 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fa5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	20000528 	.word	0x20000528
 800fa70:	0800f151 	.word	0x0800f151
 800fa74:	20000554 	.word	0x20000554
 800fa78:	0800f469 	.word	0x0800f469
 800fa7c:	200000d0 	.word	0x200000d0

0800fa80 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4603      	mov	r3, r0
 800fa88:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800fa8a:	79fb      	ldrb	r3, [r7, #7]
 800fa8c:	2b04      	cmp	r3, #4
 800fa8e:	d80e      	bhi.n	800faae <LmHandlerPackageIsInitialized+0x2e>
 800fa90:	79fb      	ldrb	r3, [r7, #7]
 800fa92:	4a09      	ldr	r2, [pc, #36]	; (800fab8 <LmHandlerPackageIsInitialized+0x38>)
 800fa94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d007      	beq.n	800faae <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fa9e:	79fb      	ldrb	r3, [r7, #7]
 800faa0:	4a05      	ldr	r2, [pc, #20]	; (800fab8 <LmHandlerPackageIsInitialized+0x38>)
 800faa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faa6:	689b      	ldr	r3, [r3, #8]
 800faa8:	4798      	blx	r3
 800faaa:	4603      	mov	r3, r0
 800faac:	e000      	b.n	800fab0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800faae:	2300      	movs	r3, #0
    }
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	20000528 	.word	0x20000528

0800fabc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	4603      	mov	r3, r0
 800fac4:	6039      	str	r1, [r7, #0]
 800fac6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fac8:	2300      	movs	r3, #0
 800faca:	73fb      	strb	r3, [r7, #15]
 800facc:	e067      	b.n	800fb9e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800face:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fad2:	4a37      	ldr	r2, [pc, #220]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d05a      	beq.n	800fb92 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	2b03      	cmp	r3, #3
 800fae0:	d84e      	bhi.n	800fb80 <LmHandlerPackagesNotify+0xc4>
 800fae2:	a201      	add	r2, pc, #4	; (adr r2, 800fae8 <LmHandlerPackagesNotify+0x2c>)
 800fae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae8:	0800faf9 	.word	0x0800faf9
 800faec:	0800fb1b 	.word	0x0800fb1b
 800faf0:	0800fb3d 	.word	0x0800fb3d
 800faf4:	0800fb5f 	.word	0x0800fb5f
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800faf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fafc:	4a2c      	ldr	r2, [pc, #176]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb02:	699b      	ldr	r3, [r3, #24]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d03d      	beq.n	800fb84 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800fb08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb0c:	4a28      	ldr	r2, [pc, #160]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fb0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb12:	699b      	ldr	r3, [r3, #24]
 800fb14:	6838      	ldr	r0, [r7, #0]
 800fb16:	4798      	blx	r3
                        }
                        break;
 800fb18:	e034      	b.n	800fb84 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800fb1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb1e:	4a24      	ldr	r2, [pc, #144]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fb20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb24:	69db      	ldr	r3, [r3, #28]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d02e      	beq.n	800fb88 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800fb2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb2e:	4a20      	ldr	r2, [pc, #128]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fb30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb34:	69db      	ldr	r3, [r3, #28]
 800fb36:	6838      	ldr	r0, [r7, #0]
 800fb38:	4798      	blx	r3
                        }
                        break;
 800fb3a:	e025      	b.n	800fb88 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800fb3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb40:	4a1b      	ldr	r2, [pc, #108]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fb42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb46:	6a1b      	ldr	r3, [r3, #32]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d01f      	beq.n	800fb8c <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800fb4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb50:	4a17      	ldr	r2, [pc, #92]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb56:	6a1b      	ldr	r3, [r3, #32]
 800fb58:	6838      	ldr	r0, [r7, #0]
 800fb5a:	4798      	blx	r3
                        }
                        break;
 800fb5c:	e016      	b.n	800fb8c <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800fb5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb62:	4a13      	ldr	r2, [pc, #76]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fb64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d010      	beq.n	800fb90 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800fb6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb72:	4a0f      	ldr	r2, [pc, #60]	; (800fbb0 <LmHandlerPackagesNotify+0xf4>)
 800fb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb7a:	6838      	ldr	r0, [r7, #0]
 800fb7c:	4798      	blx	r3
                        }
                        break;
 800fb7e:	e007      	b.n	800fb90 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800fb80:	bf00      	nop
 800fb82:	e006      	b.n	800fb92 <LmHandlerPackagesNotify+0xd6>
                        break;
 800fb84:	bf00      	nop
 800fb86:	e004      	b.n	800fb92 <LmHandlerPackagesNotify+0xd6>
                        break;
 800fb88:	bf00      	nop
 800fb8a:	e002      	b.n	800fb92 <LmHandlerPackagesNotify+0xd6>
                        break;
 800fb8c:	bf00      	nop
 800fb8e:	e000      	b.n	800fb92 <LmHandlerPackagesNotify+0xd6>
                        break;
 800fb90:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fb92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	3301      	adds	r3, #1
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	73fb      	strb	r3, [r7, #15]
 800fb9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fba2:	2b04      	cmp	r3, #4
 800fba4:	dd93      	ble.n	800face <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800fba6:	bf00      	nop
 800fba8:	bf00      	nop
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	20000528 	.word	0x20000528

0800fbb4 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b082      	sub	sp, #8
 800fbb8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fbba:	2300      	movs	r3, #0
 800fbbc:	71fb      	strb	r3, [r7, #7]
 800fbbe:	e018      	b.n	800fbf2 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800fbc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbc4:	4a0f      	ldr	r2, [pc, #60]	; (800fc04 <LmHandlerPackageIsTxPending+0x50>)
 800fbc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d00b      	beq.n	800fbe6 <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800fbce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbd2:	4a0c      	ldr	r2, [pc, #48]	; (800fc04 <LmHandlerPackageIsTxPending+0x50>)
 800fbd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbd8:	68db      	ldr	r3, [r3, #12]
 800fbda:	4798      	blx	r3
 800fbdc:	4603      	mov	r3, r0
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800fbe2:	2301      	movs	r3, #1
 800fbe4:	e00a      	b.n	800fbfc <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fbe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	3301      	adds	r3, #1
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	71fb      	strb	r3, [r7, #7]
 800fbf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbf6:	2b04      	cmp	r3, #4
 800fbf8:	dde2      	ble.n	800fbc0 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800fbfa:	2300      	movs	r3, #0
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3708      	adds	r7, #8
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}
 800fc04:	20000528 	.word	0x20000528

0800fc08 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b082      	sub	sp, #8
 800fc0c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fc0e:	2300      	movs	r3, #0
 800fc10:	71fb      	strb	r3, [r7, #7]
 800fc12:	e022      	b.n	800fc5a <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800fc14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc18:	4a14      	ldr	r2, [pc, #80]	; (800fc6c <LmHandlerPackagesProcess+0x64>)
 800fc1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d015      	beq.n	800fc4e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800fc22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc26:	4a11      	ldr	r2, [pc, #68]	; (800fc6c <LmHandlerPackagesProcess+0x64>)
 800fc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc2c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d00d      	beq.n	800fc4e <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800fc32:	79fb      	ldrb	r3, [r7, #7]
 800fc34:	4618      	mov	r0, r3
 800fc36:	f7ff ff23 	bl	800fa80 <LmHandlerPackageIsInitialized>
 800fc3a:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d006      	beq.n	800fc4e <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800fc40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc44:	4a09      	ldr	r2, [pc, #36]	; (800fc6c <LmHandlerPackagesProcess+0x64>)
 800fc46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc4a:	691b      	ldr	r3, [r3, #16]
 800fc4c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800fc4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	3301      	adds	r3, #1
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	71fb      	strb	r3, [r7, #7]
 800fc5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc5e:	2b04      	cmp	r3, #4
 800fc60:	ddd8      	ble.n	800fc14 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800fc62:	bf00      	nop
 800fc64:	bf00      	nop
 800fc66:	3708      	adds	r7, #8
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}
 800fc6c:	20000528 	.word	0x20000528

0800fc70 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	4603      	mov	r3, r0
 800fc78:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800fc7a:	4a09      	ldr	r2, [pc, #36]	; (800fca0 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800fc7c:	79fb      	ldrb	r3, [r7, #7]
 800fc7e:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800fc80:	4b08      	ldr	r3, [pc, #32]	; (800fca4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d005      	beq.n	800fc96 <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800fc8a:	4b06      	ldr	r3, [pc, #24]	; (800fca4 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc90:	79fa      	ldrb	r2, [r7, #7]
 800fc92:	4610      	mov	r0, r2
 800fc94:	4798      	blx	r3
    }
}
 800fc96:	bf00      	nop
 800fc98:	3708      	adds	r7, #8
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	2000053c 	.word	0x2000053c
 800fca4:	20000554 	.word	0x20000554

0800fca8 <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b082      	sub	sp, #8
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	4603      	mov	r3, r0
 800fcb0:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800fcb2:	4a09      	ldr	r2, [pc, #36]	; (800fcd8 <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800fcb4:	79fb      	ldrb	r3, [r7, #7]
 800fcb6:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800fcb8:	4b08      	ldr	r3, [pc, #32]	; (800fcdc <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d005      	beq.n	800fcce <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800fcc2:	4b06      	ldr	r3, [pc, #24]	; (800fcdc <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcc8:	79fa      	ldrb	r2, [r7, #7]
 800fcca:	4610      	mov	r0, r2
 800fccc:	4798      	blx	r3
    }
}
 800fcce:	bf00      	nop
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	2000053c 	.word	0x2000053c
 800fcdc:	20000554 	.word	0x20000554

0800fce0 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	4603      	mov	r3, r0
 800fce8:	6039      	str	r1, [r7, #0]
 800fcea:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d102      	bne.n	800fcf8 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800fcf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fcf6:	e00e      	b.n	800fd16 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d002      	beq.n	800fd04 <LmHandlerGetVersion+0x24>
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d004      	beq.n	800fd0c <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800fd02:	e007      	b.n	800fd14 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	4a06      	ldr	r2, [pc, #24]	; (800fd20 <LmHandlerGetVersion+0x40>)
 800fd08:	601a      	str	r2, [r3, #0]
            break;
 800fd0a:	e003      	b.n	800fd14 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	4a05      	ldr	r2, [pc, #20]	; (800fd24 <LmHandlerGetVersion+0x44>)
 800fd10:	601a      	str	r2, [r3, #0]
            break;
 800fd12:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	370c      	adds	r7, #12
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bc80      	pop	{r7}
 800fd1e:	4770      	bx	lr
 800fd20:	01000400 	.word	0x01000400
 800fd24:	02010001 	.word	0x02010001

0800fd28 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800fd2c:	f005 fce0 	bl	80156f0 <LoRaMacDeInitialization>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fd36:	2300      	movs	r3, #0
 800fd38:	e001      	b.n	800fd3e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fd3a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	bd80      	pop	{r7, pc}

0800fd42 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800fd42:	b580      	push	{r7, lr}
 800fd44:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800fd46:	f004 fb93 	bl	8014470 <LoRaMacHalt>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d101      	bne.n	800fd54 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fd50:	2300      	movs	r3, #0
 800fd52:	e001      	b.n	800fd58 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fd54:	f06f 0301 	mvn.w	r3, #1
    }
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b08c      	sub	sp, #48	; 0x30
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d102      	bne.n	800fd70 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd6e:	e016      	b.n	800fd9e <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800fd70:	2321      	movs	r3, #33	; 0x21
 800fd72:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fd74:	f107 0308 	add.w	r3, r7, #8
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f004 fc41 	bl	8014600 <LoRaMacMibGetRequestConfirm>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d002      	beq.n	800fd8a <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd88:	e009      	b.n	800fd9e <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800fd8a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f993 2000 	ldrsb.w	r2, [r3]
 800fd98:	4b03      	ldr	r3, [pc, #12]	; (800fda8 <LmHandlerGetTxPower+0x4c>)
 800fd9a:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800fd9c:	2300      	movs	r3, #0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3730      	adds	r7, #48	; 0x30
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	2000053c 	.word	0x2000053c

0800fdac <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b08e      	sub	sp, #56	; 0x38
 800fdb0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800fdbc:	f7ff ffc1 	bl	800fd42 <LmHandlerHalt>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800fdc6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d12f      	bne.n	800fe2e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800fdce:	f000 f859 	bl	800fe84 <NvmDataMgmtStoreBegin>
 800fdd2:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800fdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd6:	f113 0f02 	cmn.w	r3, #2
 800fdda:	d103      	bne.n	800fde4 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800fddc:	23f8      	movs	r3, #248	; 0xf8
 800fdde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fde2:	e01c      	b.n	800fe1e <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800fde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d104      	bne.n	800fdf4 <LmHandlerNvmDataStore+0x48>
 800fdea:	4b1b      	ldr	r3, [pc, #108]	; (800fe58 <LmHandlerNvmDataStore+0xac>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	695b      	ldr	r3, [r3, #20]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d103      	bne.n	800fdfc <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fdf4:	23ff      	movs	r3, #255	; 0xff
 800fdf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fdfa:	e010      	b.n	800fe1e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800fdfc:	2327      	movs	r3, #39	; 0x27
 800fdfe:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fe00:	463b      	mov	r3, r7
 800fe02:	4618      	mov	r0, r3
 800fe04:	f004 fbfc 	bl	8014600 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800fe0c:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800fe10:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800fe12:	4b11      	ldr	r3, [pc, #68]	; (800fe58 <LmHandlerNvmDataStore+0xac>)
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	695b      	ldr	r3, [r3, #20]
 800fe18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe1c:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800fe1e:	f000 f847 	bl	800feb0 <NvmDataMgmtStoreEnd>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d002      	beq.n	800fe2e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fe28:	23ff      	movs	r3, #255	; 0xff
 800fe2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800fe2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d109      	bne.n	800fe4a <LmHandlerNvmDataStore+0x9e>
 800fe36:	4b08      	ldr	r3, [pc, #32]	; (800fe58 <LmHandlerNvmDataStore+0xac>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	69db      	ldr	r3, [r3, #28]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d004      	beq.n	800fe4a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800fe40:	4b05      	ldr	r3, [pc, #20]	; (800fe58 <LmHandlerNvmDataStore+0xac>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	69db      	ldr	r3, [r3, #28]
 800fe46:	2001      	movs	r0, #1
 800fe48:	4798      	blx	r3
    }

    return lmhStatus;
 800fe4a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3738      	adds	r7, #56	; 0x38
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	20000554 	.word	0x20000554

0800fe5c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	4603      	mov	r3, r0
 800fe64:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800fe66:	4b06      	ldr	r3, [pc, #24]	; (800fe80 <NvmDataMgmtEvent+0x24>)
 800fe68:	881a      	ldrh	r2, [r3, #0]
 800fe6a:	88fb      	ldrh	r3, [r7, #6]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	b29a      	uxth	r2, r3
 800fe70:	4b03      	ldr	r3, [pc, #12]	; (800fe80 <NvmDataMgmtEvent+0x24>)
 800fe72:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800fe74:	bf00      	nop
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bc80      	pop	{r7}
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	2000067c 	.word	0x2000067c

0800fe84 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800fe88:	4b08      	ldr	r3, [pc, #32]	; (800feac <NvmDataMgmtStoreBegin+0x28>)
 800fe8a:	881b      	ldrh	r3, [r3, #0]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d102      	bne.n	800fe96 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800fe90:	f06f 0301 	mvn.w	r3, #1
 800fe94:	e008      	b.n	800fea8 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800fe96:	f004 fac3 	bl	8014420 <LoRaMacStop>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d002      	beq.n	800fea6 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800fea0:	f06f 0302 	mvn.w	r3, #2
 800fea4:	e000      	b.n	800fea8 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800fea6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fea8:	4618      	mov	r0, r3
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	2000067c 	.word	0x2000067c

0800feb0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800feb4:	4b03      	ldr	r3, [pc, #12]	; (800fec4 <NvmDataMgmtStoreEnd+0x14>)
 800feb6:	2200      	movs	r2, #0
 800feb8:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800feba:	f004 faa3 	bl	8014404 <LoRaMacStart>
    return NVM_DATA_OK;
 800febe:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	bd80      	pop	{r7, pc}
 800fec4:	2000067c 	.word	0x2000067c

0800fec8 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800fecc:	2220      	movs	r2, #32
 800fece:	2100      	movs	r1, #0
 800fed0:	4802      	ldr	r0, [pc, #8]	; (800fedc <ClassBStatusReset+0x14>)
 800fed2:	f00b fb03 	bl	801b4dc <memset1>
}
 800fed6:	bf00      	nop
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	20000694 	.word	0x20000694

0800fee0 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800fee0:	b480      	push	{r7}
 800fee2:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800fee4:	4b02      	ldr	r3, [pc, #8]	; (800fef0 <LmhpCompliancePackageFactory+0x10>)
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	46bd      	mov	sp, r7
 800feea:	bc80      	pop	{r7}
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	200000d8 	.word	0x200000d8

0800fef4 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af02      	add	r7, sp, #8
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	4613      	mov	r3, r2
 800ff00:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d018      	beq.n	800ff3a <LmhpComplianceInit+0x46>
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d015      	beq.n	800ff3a <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800ff0e:	4a19      	ldr	r2, [pc, #100]	; (800ff74 <LmhpComplianceInit+0x80>)
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800ff14:	4a18      	ldr	r2, [pc, #96]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800ff1a:	4a17      	ldr	r2, [pc, #92]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff1c:	79fb      	ldrb	r3, [r7, #7]
 800ff1e:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800ff20:	4b15      	ldr	r3, [pc, #84]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff22:	2201      	movs	r2, #1
 800ff24:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800ff26:	2300      	movs	r3, #0
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	4b14      	ldr	r3, [pc, #80]	; (800ff7c <LmhpComplianceInit+0x88>)
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ff32:	4813      	ldr	r0, [pc, #76]	; (800ff80 <LmhpComplianceInit+0x8c>)
 800ff34:	f00f fa50 	bl	801f3d8 <UTIL_TIMER_Create>
 800ff38:	e005      	b.n	800ff46 <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800ff3a:	4b0e      	ldr	r3, [pc, #56]	; (800ff74 <LmhpComplianceInit+0x80>)
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800ff40:	4b0d      	ldr	r3, [pc, #52]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff42:	2200      	movs	r2, #0
 800ff44:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800ff46:	4b0c      	ldr	r3, [pc, #48]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff48:	2200      	movs	r2, #0
 800ff4a:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800ff4c:	f7ff ffbc 	bl	800fec8 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800ff50:	4b09      	ldr	r3, [pc, #36]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff52:	2200      	movs	r2, #0
 800ff54:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800ff56:	4b08      	ldr	r3, [pc, #32]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff58:	2200      	movs	r2, #0
 800ff5a:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800ff5c:	4b06      	ldr	r3, [pc, #24]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff5e:	2200      	movs	r2, #0
 800ff60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800ff64:	4b04      	ldr	r3, [pc, #16]	; (800ff78 <LmhpComplianceInit+0x84>)
 800ff66:	2200      	movs	r2, #0
 800ff68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800ff6c:	bf00      	nop
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	200006b8 	.word	0x200006b8
 800ff78:	20000680 	.word	0x20000680
 800ff7c:	0801087d 	.word	0x0801087d
 800ff80:	200006bc 	.word	0x200006bc

0800ff84 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800ff84:	b480      	push	{r7}
 800ff86:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800ff88:	4b02      	ldr	r3, [pc, #8]	; (800ff94 <LmhpComplianceIsInitialized+0x10>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bc80      	pop	{r7}
 800ff92:	4770      	bx	lr
 800ff94:	20000680 	.word	0x20000680

0800ff98 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800ff98:	b480      	push	{r7}
 800ff9a:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800ff9c:	4b02      	ldr	r3, [pc, #8]	; (800ffa8 <LmhpComplianceIsTxPending+0x10>)
 800ff9e:	785b      	ldrb	r3, [r3, #1]
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bc80      	pop	{r7}
 800ffa6:	4770      	bx	lr
 800ffa8:	20000680 	.word	0x20000680

0800ffac <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ffac:	b590      	push	{r4, r7, lr}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800ffb2:	4b33      	ldr	r3, [pc, #204]	; (8010080 <LmhpComplianceProcess+0xd4>)
 800ffb4:	785b      	ldrb	r3, [r3, #1]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d03e      	beq.n	8010038 <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800ffba:	f00f fbcb 	bl	801f754 <UTIL_TIMER_GetCurrentTime>
 800ffbe:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800ffc0:	4b2f      	ldr	r3, [pc, #188]	; (8010080 <LmhpComplianceProcess+0xd4>)
 800ffc2:	685c      	ldr	r4, [r3, #4]
 800ffc4:	f7ff f8ba 	bl	800f13c <LmHandlerGetDutyCycleWaitTime>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	4423      	add	r3, r4
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d941      	bls.n	8010056 <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800ffd2:	4b2b      	ldr	r3, [pc, #172]	; (8010080 <LmhpComplianceProcess+0xd4>)
 800ffd4:	7a9b      	ldrb	r3, [r3, #10]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d03d      	beq.n	8010056 <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800ffda:	23e0      	movs	r3, #224	; 0xe0
 800ffdc:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800ffde:	4b28      	ldr	r3, [pc, #160]	; (8010080 <LmhpComplianceProcess+0xd4>)
 800ffe0:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800ffe2:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800ffe4:	4b26      	ldr	r3, [pc, #152]	; (8010080 <LmhpComplianceProcess+0xd4>)
 800ffe6:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800ffe8:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800ffea:	23ff      	movs	r3, #255	; 0xff
 800ffec:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800ffee:	4b24      	ldr	r3, [pc, #144]	; (8010080 <LmhpComplianceProcess+0xd4>)
 800fff0:	7a19      	ldrb	r1, [r3, #8]
 800fff2:	463b      	mov	r3, r7
 800fff4:	2201      	movs	r2, #1
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7ff f968 	bl	800f2cc <LmHandlerSend>
 800fffc:	4603      	mov	r3, r0
 800fffe:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8010000:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d004      	beq.n	8010012 <LmhpComplianceProcess+0x66>
 8010008:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801000c:	f113 0f07 	cmn.w	r3, #7
 8010010:	d106      	bne.n	8010020 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 8010012:	4b1b      	ldr	r3, [pc, #108]	; (8010080 <LmhpComplianceProcess+0xd4>)
 8010014:	2200      	movs	r2, #0
 8010016:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8010018:	4b19      	ldr	r3, [pc, #100]	; (8010080 <LmhpComplianceProcess+0xd4>)
 801001a:	2200      	movs	r2, #0
 801001c:	729a      	strb	r2, [r3, #10]
 801001e:	e007      	b.n	8010030 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 8010020:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8010024:	4817      	ldr	r0, [pc, #92]	; (8010084 <LmhpComplianceProcess+0xd8>)
 8010026:	f00f faeb 	bl	801f600 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 801002a:	4816      	ldr	r0, [pc, #88]	; (8010084 <LmhpComplianceProcess+0xd8>)
 801002c:	f00f fa0a 	bl	801f444 <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 8010030:	4a13      	ldr	r2, [pc, #76]	; (8010080 <LmhpComplianceProcess+0xd4>)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	6053      	str	r3, [r2, #4]
 8010036:	e00e      	b.n	8010056 <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8010038:	4b11      	ldr	r3, [pc, #68]	; (8010080 <LmhpComplianceProcess+0xd4>)
 801003a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801003e:	2b00      	cmp	r3, #0
 8010040:	d009      	beq.n	8010056 <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 8010042:	4b0f      	ldr	r3, [pc, #60]	; (8010080 <LmhpComplianceProcess+0xd4>)
 8010044:	2200      	movs	r2, #0
 8010046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 801004a:	4b0d      	ldr	r3, [pc, #52]	; (8010080 <LmhpComplianceProcess+0xd4>)
 801004c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff fa31 	bl	800f4b8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 8010056:	4b0a      	ldr	r3, [pc, #40]	; (8010080 <LmhpComplianceProcess+0xd4>)
 8010058:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801005c:	2b00      	cmp	r3, #0
 801005e:	d00a      	beq.n	8010076 <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 8010060:	4b07      	ldr	r3, [pc, #28]	; (8010080 <LmhpComplianceProcess+0xd4>)
 8010062:	2200      	movs	r2, #0
 8010064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 8010068:	4b07      	ldr	r3, [pc, #28]	; (8010088 <LmhpComplianceProcess+0xdc>)
 801006a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 8010070:	4b05      	ldr	r3, [pc, #20]	; (8010088 <LmhpComplianceProcess+0xdc>)
 8010072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010074:	4798      	blx	r3
        }
    }
}
 8010076:	bf00      	nop
 8010078:	3714      	adds	r7, #20
 801007a:	46bd      	mov	sp, r7
 801007c:	bd90      	pop	{r4, r7, pc}
 801007e:	bf00      	nop
 8010080:	20000680 	.word	0x20000680
 8010084:	200006bc 	.word	0x200006bc
 8010088:	200000d8 	.word	0x200000d8

0801008c <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 801008c:	b5b0      	push	{r4, r5, r7, lr}
 801008e:	b0a4      	sub	sp, #144	; 0x90
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 8010094:	2300      	movs	r3, #0
 8010096:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 801009a:	4bd0      	ldr	r3, [pc, #832]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	f083 0301 	eor.w	r3, r3, #1
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f040 83bf 	bne.w	8010828 <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	78db      	ldrb	r3, [r3, #3]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d103      	bne.n	80100ba <LmhpComplianceOnMcpsIndication+0x2e>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	7b9b      	ldrb	r3, [r3, #14]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d005      	beq.n	80100c6 <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 80100ba:	4bc8      	ldr	r3, [pc, #800]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 80100bc:	8a1b      	ldrh	r3, [r3, #16]
 80100be:	3301      	adds	r3, #1
 80100c0:	b29a      	uxth	r2, r3
 80100c2:	4bc6      	ldr	r3, [pc, #792]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 80100c4:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	7b5b      	ldrb	r3, [r3, #13]
 80100ca:	f083 0301 	eor.w	r3, r3, #1
 80100ce:	b2db      	uxtb	r3, r3
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	f040 83ab 	bne.w	801082c <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	78db      	ldrb	r3, [r3, #3]
 80100da:	2be0      	cmp	r3, #224	; 0xe0
 80100dc:	f040 83a8 	bne.w	8010830 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 80100e0:	4bbe      	ldr	r3, [pc, #760]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 80100e2:	2200      	movs	r2, #0
 80100e4:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	689a      	ldr	r2, [r3, #8]
 80100ea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80100ee:	1c59      	adds	r1, r3, #1
 80100f0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80100f4:	4413      	add	r3, r2
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	2b7f      	cmp	r3, #127	; 0x7f
 80100fa:	f200 8372 	bhi.w	80107e2 <LmhpComplianceOnMcpsIndication+0x756>
 80100fe:	a201      	add	r2, pc, #4	; (adr r2, 8010104 <LmhpComplianceOnMcpsIndication+0x78>)
 8010100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010104:	08010305 	.word	0x08010305
 8010108:	08010349 	.word	0x08010349
 801010c:	08010353 	.word	0x08010353
 8010110:	08010369 	.word	0x08010369
 8010114:	0801038b 	.word	0x0801038b
 8010118:	080103b9 	.word	0x080103b9
 801011c:	080103e5 	.word	0x080103e5
 8010120:	08010443 	.word	0x08010443
 8010124:	0801049b 	.word	0x0801049b
 8010128:	08010507 	.word	0x08010507
 801012c:	08010557 	.word	0x08010557
 8010130:	080107e3 	.word	0x080107e3
 8010134:	080107e3 	.word	0x080107e3
 8010138:	080107e3 	.word	0x080107e3
 801013c:	080107e3 	.word	0x080107e3
 8010140:	080107e3 	.word	0x080107e3
 8010144:	080107e3 	.word	0x080107e3
 8010148:	080107e3 	.word	0x080107e3
 801014c:	080107e3 	.word	0x080107e3
 8010150:	080107e3 	.word	0x080107e3
 8010154:	080107e3 	.word	0x080107e3
 8010158:	080107e3 	.word	0x080107e3
 801015c:	080107e3 	.word	0x080107e3
 8010160:	080107e3 	.word	0x080107e3
 8010164:	080107e3 	.word	0x080107e3
 8010168:	080107e3 	.word	0x080107e3
 801016c:	080107e3 	.word	0x080107e3
 8010170:	080107e3 	.word	0x080107e3
 8010174:	080107e3 	.word	0x080107e3
 8010178:	080107e3 	.word	0x080107e3
 801017c:	080107e3 	.word	0x080107e3
 8010180:	080107e3 	.word	0x080107e3
 8010184:	0801055f 	.word	0x0801055f
 8010188:	08010571 	.word	0x08010571
 801018c:	08010579 	.word	0x08010579
 8010190:	080107e3 	.word	0x080107e3
 8010194:	080107e3 	.word	0x080107e3
 8010198:	080107e3 	.word	0x080107e3
 801019c:	080107e3 	.word	0x080107e3
 80101a0:	080107e3 	.word	0x080107e3
 80101a4:	080107e3 	.word	0x080107e3
 80101a8:	080107e3 	.word	0x080107e3
 80101ac:	080107e3 	.word	0x080107e3
 80101b0:	080107e3 	.word	0x080107e3
 80101b4:	080107e3 	.word	0x080107e3
 80101b8:	080107e3 	.word	0x080107e3
 80101bc:	080107e3 	.word	0x080107e3
 80101c0:	080107e3 	.word	0x080107e3
 80101c4:	080107e3 	.word	0x080107e3
 80101c8:	080107e3 	.word	0x080107e3
 80101cc:	080107e3 	.word	0x080107e3
 80101d0:	080107e3 	.word	0x080107e3
 80101d4:	080107e3 	.word	0x080107e3
 80101d8:	080107e3 	.word	0x080107e3
 80101dc:	080107e3 	.word	0x080107e3
 80101e0:	080107e3 	.word	0x080107e3
 80101e4:	080107e3 	.word	0x080107e3
 80101e8:	080107e3 	.word	0x080107e3
 80101ec:	080107e3 	.word	0x080107e3
 80101f0:	080107e3 	.word	0x080107e3
 80101f4:	080107e3 	.word	0x080107e3
 80101f8:	080107e3 	.word	0x080107e3
 80101fc:	080107e3 	.word	0x080107e3
 8010200:	080107e3 	.word	0x080107e3
 8010204:	080107e3 	.word	0x080107e3
 8010208:	080107e3 	.word	0x080107e3
 801020c:	080107e3 	.word	0x080107e3
 8010210:	080107e3 	.word	0x080107e3
 8010214:	080107e3 	.word	0x080107e3
 8010218:	080107e3 	.word	0x080107e3
 801021c:	080107e3 	.word	0x080107e3
 8010220:	080107e3 	.word	0x080107e3
 8010224:	080107e3 	.word	0x080107e3
 8010228:	080107e3 	.word	0x080107e3
 801022c:	080107e3 	.word	0x080107e3
 8010230:	080107e3 	.word	0x080107e3
 8010234:	080107e3 	.word	0x080107e3
 8010238:	080107e3 	.word	0x080107e3
 801023c:	080107e3 	.word	0x080107e3
 8010240:	080107e3 	.word	0x080107e3
 8010244:	080107e3 	.word	0x080107e3
 8010248:	080107e3 	.word	0x080107e3
 801024c:	080107e3 	.word	0x080107e3
 8010250:	080107e3 	.word	0x080107e3
 8010254:	080107e3 	.word	0x080107e3
 8010258:	080107e3 	.word	0x080107e3
 801025c:	080107e3 	.word	0x080107e3
 8010260:	080107e3 	.word	0x080107e3
 8010264:	080107e3 	.word	0x080107e3
 8010268:	080107e3 	.word	0x080107e3
 801026c:	080107e3 	.word	0x080107e3
 8010270:	080107e3 	.word	0x080107e3
 8010274:	080107e3 	.word	0x080107e3
 8010278:	080107e3 	.word	0x080107e3
 801027c:	080107e3 	.word	0x080107e3
 8010280:	080107e3 	.word	0x080107e3
 8010284:	080107e3 	.word	0x080107e3
 8010288:	080107e3 	.word	0x080107e3
 801028c:	080107e3 	.word	0x080107e3
 8010290:	080107e3 	.word	0x080107e3
 8010294:	080107e3 	.word	0x080107e3
 8010298:	080107e3 	.word	0x080107e3
 801029c:	080107e3 	.word	0x080107e3
 80102a0:	080107e3 	.word	0x080107e3
 80102a4:	080107e3 	.word	0x080107e3
 80102a8:	080107e3 	.word	0x080107e3
 80102ac:	080107e3 	.word	0x080107e3
 80102b0:	080107e3 	.word	0x080107e3
 80102b4:	080107e3 	.word	0x080107e3
 80102b8:	080107e3 	.word	0x080107e3
 80102bc:	080107e3 	.word	0x080107e3
 80102c0:	080107e3 	.word	0x080107e3
 80102c4:	080107e3 	.word	0x080107e3
 80102c8:	080107e3 	.word	0x080107e3
 80102cc:	080107e3 	.word	0x080107e3
 80102d0:	080107e3 	.word	0x080107e3
 80102d4:	080107e3 	.word	0x080107e3
 80102d8:	080107e3 	.word	0x080107e3
 80102dc:	080107e3 	.word	0x080107e3
 80102e0:	080107e3 	.word	0x080107e3
 80102e4:	080107e3 	.word	0x080107e3
 80102e8:	080107e3 	.word	0x080107e3
 80102ec:	080107e3 	.word	0x080107e3
 80102f0:	080107e3 	.word	0x080107e3
 80102f4:	080107e3 	.word	0x080107e3
 80102f8:	080105ab 	.word	0x080105ab
 80102fc:	0801065b 	.word	0x0801065b
 8010300:	0801068d 	.word	0x0801068d
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8010304:	4b35      	ldr	r3, [pc, #212]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 8010306:	68da      	ldr	r2, [r3, #12]
 8010308:	4b34      	ldr	r3, [pc, #208]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 801030a:	7a9b      	ldrb	r3, [r3, #10]
 801030c:	1c59      	adds	r1, r3, #1
 801030e:	b2c8      	uxtb	r0, r1
 8010310:	4932      	ldr	r1, [pc, #200]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 8010312:	7288      	strb	r0, [r1, #10]
 8010314:	4413      	add	r3, r2
 8010316:	2200      	movs	r2, #0
 8010318:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 801031a:	4b30      	ldr	r3, [pc, #192]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 801031c:	68da      	ldr	r2, [r3, #12]
 801031e:	4b2f      	ldr	r3, [pc, #188]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 8010320:	7a9b      	ldrb	r3, [r3, #10]
 8010322:	1c59      	adds	r1, r3, #1
 8010324:	b2c8      	uxtb	r0, r1
 8010326:	492d      	ldr	r1, [pc, #180]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 8010328:	7288      	strb	r0, [r1, #10]
 801032a:	4413      	add	r3, r2
 801032c:	2206      	movs	r2, #6
 801032e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8010330:	4b2a      	ldr	r3, [pc, #168]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 8010332:	68da      	ldr	r2, [r3, #12]
 8010334:	4b29      	ldr	r3, [pc, #164]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 8010336:	7a9b      	ldrb	r3, [r3, #10]
 8010338:	1c59      	adds	r1, r3, #1
 801033a:	b2c8      	uxtb	r0, r1
 801033c:	4927      	ldr	r1, [pc, #156]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 801033e:	7288      	strb	r0, [r1, #10]
 8010340:	4413      	add	r3, r2
 8010342:	2201      	movs	r2, #1
 8010344:	701a      	strb	r2, [r3, #0]
                break;
 8010346:	e257      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 8010348:	4b24      	ldr	r3, [pc, #144]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8010350:	e252      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 8010352:	4b23      	ldr	r3, [pc, #140]	; (80103e0 <LmhpComplianceOnMcpsIndication+0x354>)
 8010354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010356:	2b00      	cmp	r3, #0
 8010358:	f000 8245 	beq.w	80107e6 <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 801035c:	4b20      	ldr	r3, [pc, #128]	; (80103e0 <LmhpComplianceOnMcpsIndication+0x354>)
 801035e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010360:	2101      	movs	r1, #1
 8010362:	2002      	movs	r0, #2
 8010364:	4798      	blx	r3
                }
                break;
 8010366:	e23e      	b.n	80107e6 <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	689a      	ldr	r2, [r3, #8]
 801036c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010370:	1c59      	adds	r1, r3, #1
 8010372:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010376:	4413      	add	r3, r2
 8010378:	781a      	ldrb	r2, [r3, #0]
 801037a:	4b18      	ldr	r3, [pc, #96]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 801037c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8010380:	4b16      	ldr	r3, [pc, #88]	; (80103dc <LmhpComplianceOnMcpsIndication+0x350>)
 8010382:	2201      	movs	r2, #1
 8010384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8010388:	e236      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 801038a:	2304      	movs	r3, #4
 801038c:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	689a      	ldr	r2, [r3, #8]
 8010392:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010396:	1c59      	adds	r1, r3, #1
 8010398:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801039c:	4413      	add	r3, r2
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	bf14      	ite	ne
 80103a4:	2301      	movne	r3, #1
 80103a6:	2300      	moveq	r3, #0
 80103a8:	b2db      	uxtb	r3, r3
 80103aa:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 80103ac:	f107 0308 	add.w	r3, r7, #8
 80103b0:	4618      	mov	r0, r3
 80103b2:	f004 fafd 	bl	80149b0 <LoRaMacMibSetRequestConfirm>
                break;
 80103b6:	e21f      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	689a      	ldr	r2, [r3, #8]
 80103bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80103c0:	1c59      	adds	r1, r3, #1
 80103c2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80103c6:	4413      	add	r3, r2
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	bf14      	ite	ne
 80103ce:	2301      	movne	r3, #1
 80103d0:	2300      	moveq	r3, #0
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	4618      	mov	r0, r3
 80103d6:	f005 f965 	bl	80156a4 <LoRaMacTestSetDutyCycleOn>
                break;
 80103da:	e20d      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
 80103dc:	20000680 	.word	0x20000680
 80103e0:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 80103e4:	4ba5      	ldr	r3, [pc, #660]	; (801067c <LmhpComplianceOnMcpsIndication+0x5f0>)
 80103e6:	f107 0408 	add.w	r4, r7, #8
 80103ea:	461d      	mov	r5, r3
 80103ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80103f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	689a      	ldr	r2, [r3, #8]
 8010400:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010404:	1c59      	adds	r1, r3, #1
 8010406:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 801040a:	4413      	add	r3, r2
 801040c:	781b      	ldrb	r3, [r3, #0]
 801040e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8010412:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010416:	2b0a      	cmp	r3, #10
 8010418:	f200 81e7 	bhi.w	80107ea <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 801041c:	4b98      	ldr	r3, [pc, #608]	; (8010680 <LmhpComplianceOnMcpsIndication+0x5f4>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	f000 81e1 	beq.w	80107ea <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8010428:	4b95      	ldr	r3, [pc, #596]	; (8010680 <LmhpComplianceOnMcpsIndication+0x5f4>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	685a      	ldr	r2, [r3, #4]
 801042e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	3390      	adds	r3, #144	; 0x90
 8010436:	443b      	add	r3, r7
 8010438:	f853 3c88 	ldr.w	r3, [r3, #-136]
 801043c:	4618      	mov	r0, r3
 801043e:	4790      	blx	r2
                    }
                }
                break;
 8010440:	e1d3      	b.n	80107ea <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	689a      	ldr	r2, [r3, #8]
 8010446:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801044a:	1c59      	adds	r1, r3, #1
 801044c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010450:	4413      	add	r3, r2
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8010458:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 801045c:	2b01      	cmp	r3, #1
 801045e:	d004      	beq.n	801046a <LmhpComplianceOnMcpsIndication+0x3de>
 8010460:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010464:	2b02      	cmp	r3, #2
 8010466:	f040 81c2 	bne.w	80107ee <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 801046a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 801046e:	2b01      	cmp	r3, #1
 8010470:	bf14      	ite	ne
 8010472:	2301      	movne	r3, #1
 8010474:	2300      	moveq	r3, #0
 8010476:	b2db      	uxtb	r3, r3
 8010478:	461a      	mov	r2, r3
 801047a:	4b82      	ldr	r3, [pc, #520]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801047c:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 801047e:	4b80      	ldr	r3, [pc, #512]	; (8010680 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	2b00      	cmp	r3, #0
 8010486:	f000 81b2 	beq.w	80107ee <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 801048a:	4b7d      	ldr	r3, [pc, #500]	; (8010680 <LmhpComplianceOnMcpsIndication+0x5f4>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	4a7c      	ldr	r2, [pc, #496]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010492:	7a12      	ldrb	r2, [r2, #8]
 8010494:	4610      	mov	r0, r2
 8010496:	4798      	blx	r3
                    }
                }
                break;
 8010498:	e1a9      	b.n	80107ee <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 801049a:	4b7a      	ldr	r3, [pc, #488]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801049c:	68da      	ldr	r2, [r3, #12]
 801049e:	4b79      	ldr	r3, [pc, #484]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104a0:	7a9b      	ldrb	r3, [r3, #10]
 80104a2:	1c59      	adds	r1, r3, #1
 80104a4:	b2c8      	uxtb	r0, r1
 80104a6:	4977      	ldr	r1, [pc, #476]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104a8:	7288      	strb	r0, [r1, #10]
 80104aa:	4413      	add	r3, r2
 80104ac:	2208      	movs	r2, #8
 80104ae:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80104b0:	2301      	movs	r3, #1
 80104b2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80104b6:	e019      	b.n	80104ec <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	689a      	ldr	r2, [r3, #8]
 80104bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80104c0:	1c59      	adds	r1, r3, #1
 80104c2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 80104c6:	4413      	add	r3, r2
 80104c8:	781a      	ldrb	r2, [r3, #0]
 80104ca:	4b6e      	ldr	r3, [pc, #440]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104cc:	68d9      	ldr	r1, [r3, #12]
 80104ce:	4b6d      	ldr	r3, [pc, #436]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104d0:	7a9b      	ldrb	r3, [r3, #10]
 80104d2:	1c58      	adds	r0, r3, #1
 80104d4:	b2c4      	uxtb	r4, r0
 80104d6:	486b      	ldr	r0, [pc, #428]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104d8:	7284      	strb	r4, [r0, #10]
 80104da:	440b      	add	r3, r1
 80104dc:	3201      	adds	r2, #1
 80104de:	b2d2      	uxtb	r2, r2
 80104e0:	701a      	strb	r2, [r3, #0]
                     i++ )
 80104e2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80104e6:	3301      	adds	r3, #1
 80104e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 80104ec:	4b65      	ldr	r3, [pc, #404]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80104ee:	7a5a      	ldrb	r2, [r3, #9]
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	7b1b      	ldrb	r3, [r3, #12]
 80104f4:	4293      	cmp	r3, r2
 80104f6:	bf28      	it	cs
 80104f8:	4613      	movcs	r3, r2
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8010500:	429a      	cmp	r2, r3
 8010502:	d3d9      	bcc.n	80104b8 <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 8010504:	e178      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8010506:	4b5f      	ldr	r3, [pc, #380]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010508:	68da      	ldr	r2, [r3, #12]
 801050a:	4b5e      	ldr	r3, [pc, #376]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801050c:	7a9b      	ldrb	r3, [r3, #10]
 801050e:	1c59      	adds	r1, r3, #1
 8010510:	b2c8      	uxtb	r0, r1
 8010512:	495c      	ldr	r1, [pc, #368]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010514:	7288      	strb	r0, [r1, #10]
 8010516:	4413      	add	r3, r2
 8010518:	2209      	movs	r2, #9
 801051a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 801051c:	4b59      	ldr	r3, [pc, #356]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801051e:	8a18      	ldrh	r0, [r3, #16]
 8010520:	4b58      	ldr	r3, [pc, #352]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010522:	68da      	ldr	r2, [r3, #12]
 8010524:	4b57      	ldr	r3, [pc, #348]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010526:	7a9b      	ldrb	r3, [r3, #10]
 8010528:	1c59      	adds	r1, r3, #1
 801052a:	b2cc      	uxtb	r4, r1
 801052c:	4955      	ldr	r1, [pc, #340]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801052e:	728c      	strb	r4, [r1, #10]
 8010530:	4413      	add	r3, r2
 8010532:	b2c2      	uxtb	r2, r0
 8010534:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8010536:	4b53      	ldr	r3, [pc, #332]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010538:	8a1b      	ldrh	r3, [r3, #16]
 801053a:	0a1b      	lsrs	r3, r3, #8
 801053c:	b298      	uxth	r0, r3
 801053e:	4b51      	ldr	r3, [pc, #324]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010540:	68da      	ldr	r2, [r3, #12]
 8010542:	4b50      	ldr	r3, [pc, #320]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010544:	7a9b      	ldrb	r3, [r3, #10]
 8010546:	1c59      	adds	r1, r3, #1
 8010548:	b2cc      	uxtb	r4, r1
 801054a:	494e      	ldr	r1, [pc, #312]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801054c:	728c      	strb	r4, [r1, #10]
 801054e:	4413      	add	r3, r2
 8010550:	b2c2      	uxtb	r2, r0
 8010552:	701a      	strb	r2, [r3, #0]
                break;
 8010554:	e150      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 8010556:	4b4b      	ldr	r3, [pc, #300]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010558:	2200      	movs	r2, #0
 801055a:	821a      	strh	r2, [r3, #16]
                break;
 801055c:	e14c      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 801055e:	2305      	movs	r3, #5
 8010560:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 8010564:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010568:	4618      	mov	r0, r3
 801056a:	f004 fdcb 	bl	8015104 <LoRaMacMlmeRequest>
                break;
 801056e:	e143      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 8010570:	4b45      	ldr	r3, [pc, #276]	; (8010688 <LmhpComplianceOnMcpsIndication+0x5fc>)
 8010572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010574:	4798      	blx	r3
                break;
 8010576:	e13f      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	689a      	ldr	r2, [r3, #8]
 801057c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010580:	1c59      	adds	r1, r3, #1
 8010582:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010586:	4413      	add	r3, r2
 8010588:	781a      	ldrb	r2, [r3, #0]
 801058a:	4b3e      	ldr	r3, [pc, #248]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 801058c:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 801058e:	4b3c      	ldr	r3, [pc, #240]	; (8010680 <LmhpComplianceOnMcpsIndication+0x5f4>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	68db      	ldr	r3, [r3, #12]
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 812c 	beq.w	80107f2 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 801059a:	4b39      	ldr	r3, [pc, #228]	; (8010680 <LmhpComplianceOnMcpsIndication+0x5f4>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	4a38      	ldr	r2, [pc, #224]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 80105a2:	7d52      	ldrb	r2, [r2, #21]
 80105a4:	4610      	mov	r0, r2
 80105a6:	4798      	blx	r3
                }
                break;
 80105a8:	e123      	b.n	80107f2 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	7b1b      	ldrb	r3, [r3, #12]
 80105ae:	2b07      	cmp	r3, #7
 80105b0:	f040 8121 	bne.w	80107f6 <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 80105b4:	2306      	movs	r3, #6
 80105b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	689a      	ldr	r2, [r3, #8]
 80105be:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105c2:	4413      	add	r3, r2
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	b21a      	sxth	r2, r3
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6899      	ldr	r1, [r3, #8]
 80105cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105d0:	3301      	adds	r3, #1
 80105d2:	440b      	add	r3, r1
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	021b      	lsls	r3, r3, #8
 80105d8:	b21b      	sxth	r3, r3
 80105da:	4313      	orrs	r3, r2
 80105dc:	b21b      	sxth	r3, r3
 80105de:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 80105e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 80105e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105e8:	3302      	adds	r3, #2
 80105ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	689a      	ldr	r2, [r3, #8]
 80105f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80105f6:	4413      	add	r3, r2
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	4619      	mov	r1, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	689a      	ldr	r2, [r3, #8]
 8010600:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010604:	3301      	adds	r3, #1
 8010606:	4413      	add	r3, r2
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	021b      	lsls	r3, r3, #8
 801060c:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6899      	ldr	r1, [r3, #8]
 8010614:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010618:	3302      	adds	r3, #2
 801061a:	440b      	add	r3, r1
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8010620:	4313      	orrs	r3, r2
 8010622:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8010624:	2364      	movs	r3, #100	; 0x64
 8010626:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 801062a:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 801062c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010630:	3303      	adds	r3, #3
 8010632:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	689a      	ldr	r2, [r3, #8]
 801063a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 801063e:	1c59      	adds	r1, r3, #1
 8010640:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 8010644:	4413      	add	r3, r2
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	b25b      	sxtb	r3, r3
 801064a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 801064e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010652:	4618      	mov	r0, r3
 8010654:	f004 fd56 	bl	8015104 <LoRaMacMlmeRequest>
                }
                break;
 8010658:	e0cd      	b.n	80107f6 <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 801065a:	233b      	movs	r3, #59	; 0x3b
 801065c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 8010660:	2300      	movs	r3, #0
 8010662:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010666:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801066a:	4618      	mov	r0, r3
 801066c:	f004 f9a0 	bl	80149b0 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 8010670:	4b04      	ldr	r3, [pc, #16]	; (8010684 <LmhpComplianceOnMcpsIndication+0x5f8>)
 8010672:	2201      	movs	r2, #1
 8010674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8010678:	e0be      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
 801067a:	bf00      	nop
 801067c:	080206d4 	.word	0x080206d4
 8010680:	200006b8 	.word	0x200006b8
 8010684:	20000680 	.word	0x20000680
 8010688:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 801068c:	232a      	movs	r3, #42	; 0x2a
 801068e:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 8010690:	f107 0308 	add.w	r3, r7, #8
 8010694:	4618      	mov	r0, r3
 8010696:	f003 ffb3 	bl	8014600 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 80106a2:	4b65      	ldr	r3, [pc, #404]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106a4:	68da      	ldr	r2, [r3, #12]
 80106a6:	4b64      	ldr	r3, [pc, #400]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106a8:	7a9b      	ldrb	r3, [r3, #10]
 80106aa:	1c59      	adds	r1, r3, #1
 80106ac:	b2c8      	uxtb	r0, r1
 80106ae:	4962      	ldr	r1, [pc, #392]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106b0:	7288      	strb	r0, [r1, #10]
 80106b2:	4413      	add	r3, r2
 80106b4:	227f      	movs	r2, #127	; 0x7f
 80106b6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 80106b8:	4b60      	ldr	r3, [pc, #384]	; (801083c <LmhpComplianceOnMcpsIndication+0x7b0>)
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	4b5e      	ldr	r3, [pc, #376]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106be:	68d9      	ldr	r1, [r3, #12]
 80106c0:	4b5d      	ldr	r3, [pc, #372]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106c2:	7a9b      	ldrb	r3, [r3, #10]
 80106c4:	1c58      	adds	r0, r3, #1
 80106c6:	b2c4      	uxtb	r4, r0
 80106c8:	485b      	ldr	r0, [pc, #364]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106ca:	7284      	strb	r4, [r0, #10]
 80106cc:	440b      	add	r3, r1
 80106ce:	78d2      	ldrb	r2, [r2, #3]
 80106d0:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 80106d2:	4b5a      	ldr	r3, [pc, #360]	; (801083c <LmhpComplianceOnMcpsIndication+0x7b0>)
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	4b58      	ldr	r3, [pc, #352]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106d8:	68d9      	ldr	r1, [r3, #12]
 80106da:	4b57      	ldr	r3, [pc, #348]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106dc:	7a9b      	ldrb	r3, [r3, #10]
 80106de:	1c58      	adds	r0, r3, #1
 80106e0:	b2c4      	uxtb	r4, r0
 80106e2:	4855      	ldr	r0, [pc, #340]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106e4:	7284      	strb	r4, [r0, #10]
 80106e6:	440b      	add	r3, r1
 80106e8:	7892      	ldrb	r2, [r2, #2]
 80106ea:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 80106ec:	4b53      	ldr	r3, [pc, #332]	; (801083c <LmhpComplianceOnMcpsIndication+0x7b0>)
 80106ee:	681a      	ldr	r2, [r3, #0]
 80106f0:	4b51      	ldr	r3, [pc, #324]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106f2:	68d9      	ldr	r1, [r3, #12]
 80106f4:	4b50      	ldr	r3, [pc, #320]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106f6:	7a9b      	ldrb	r3, [r3, #10]
 80106f8:	1c58      	adds	r0, r3, #1
 80106fa:	b2c4      	uxtb	r4, r0
 80106fc:	484e      	ldr	r0, [pc, #312]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80106fe:	7284      	strb	r4, [r0, #10]
 8010700:	440b      	add	r3, r1
 8010702:	7852      	ldrb	r2, [r2, #1]
 8010704:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8010706:	4b4d      	ldr	r3, [pc, #308]	; (801083c <LmhpComplianceOnMcpsIndication+0x7b0>)
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	4b4b      	ldr	r3, [pc, #300]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801070c:	68d9      	ldr	r1, [r3, #12]
 801070e:	4b4a      	ldr	r3, [pc, #296]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010710:	7a9b      	ldrb	r3, [r3, #10]
 8010712:	1c58      	adds	r0, r3, #1
 8010714:	b2c4      	uxtb	r4, r0
 8010716:	4848      	ldr	r0, [pc, #288]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010718:	7284      	strb	r4, [r0, #10]
 801071a:	440b      	add	r3, r1
 801071c:	7812      	ldrb	r2, [r2, #0]
 801071e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8010720:	4b45      	ldr	r3, [pc, #276]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010722:	68da      	ldr	r2, [r3, #12]
 8010724:	4b44      	ldr	r3, [pc, #272]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010726:	7a9b      	ldrb	r3, [r3, #10]
 8010728:	1c59      	adds	r1, r3, #1
 801072a:	b2c8      	uxtb	r0, r1
 801072c:	4942      	ldr	r1, [pc, #264]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801072e:	7288      	strb	r0, [r1, #10]
 8010730:	4413      	add	r3, r2
 8010732:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8010736:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8010738:	4b3f      	ldr	r3, [pc, #252]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801073a:	68da      	ldr	r2, [r3, #12]
 801073c:	4b3e      	ldr	r3, [pc, #248]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801073e:	7a9b      	ldrb	r3, [r3, #10]
 8010740:	1c59      	adds	r1, r3, #1
 8010742:	b2c8      	uxtb	r0, r1
 8010744:	493c      	ldr	r1, [pc, #240]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010746:	7288      	strb	r0, [r1, #10]
 8010748:	4413      	add	r3, r2
 801074a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 801074e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8010750:	4b39      	ldr	r3, [pc, #228]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010752:	68da      	ldr	r2, [r3, #12]
 8010754:	4b38      	ldr	r3, [pc, #224]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010756:	7a9b      	ldrb	r3, [r3, #10]
 8010758:	1c59      	adds	r1, r3, #1
 801075a:	b2c8      	uxtb	r0, r1
 801075c:	4936      	ldr	r1, [pc, #216]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801075e:	7288      	strb	r0, [r1, #10]
 8010760:	4413      	add	r3, r2
 8010762:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 8010766:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8010768:	4b33      	ldr	r3, [pc, #204]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801076a:	68da      	ldr	r2, [r3, #12]
 801076c:	4b32      	ldr	r3, [pc, #200]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801076e:	7a9b      	ldrb	r3, [r3, #10]
 8010770:	1c59      	adds	r1, r3, #1
 8010772:	b2c8      	uxtb	r0, r1
 8010774:	4930      	ldr	r1, [pc, #192]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010776:	7288      	strb	r0, [r1, #10]
 8010778:	4413      	add	r3, r2
 801077a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801077e:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8010780:	4b2d      	ldr	r3, [pc, #180]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010782:	68da      	ldr	r2, [r3, #12]
 8010784:	4b2c      	ldr	r3, [pc, #176]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010786:	7a9b      	ldrb	r3, [r3, #10]
 8010788:	1c59      	adds	r1, r3, #1
 801078a:	b2c8      	uxtb	r0, r1
 801078c:	492a      	ldr	r1, [pc, #168]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801078e:	7288      	strb	r0, [r1, #10]
 8010790:	4413      	add	r3, r2
 8010792:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010796:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8010798:	4b27      	ldr	r3, [pc, #156]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801079a:	68da      	ldr	r2, [r3, #12]
 801079c:	4b26      	ldr	r3, [pc, #152]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 801079e:	7a9b      	ldrb	r3, [r3, #10]
 80107a0:	1c59      	adds	r1, r3, #1
 80107a2:	b2c8      	uxtb	r0, r1
 80107a4:	4924      	ldr	r1, [pc, #144]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107a6:	7288      	strb	r0, [r1, #10]
 80107a8:	4413      	add	r3, r2
 80107aa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80107ae:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 80107b0:	4b21      	ldr	r3, [pc, #132]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107b2:	68da      	ldr	r2, [r3, #12]
 80107b4:	4b20      	ldr	r3, [pc, #128]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107b6:	7a9b      	ldrb	r3, [r3, #10]
 80107b8:	1c59      	adds	r1, r3, #1
 80107ba:	b2c8      	uxtb	r0, r1
 80107bc:	491e      	ldr	r1, [pc, #120]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107be:	7288      	strb	r0, [r1, #10]
 80107c0:	4413      	add	r3, r2
 80107c2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80107c6:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 80107c8:	4b1b      	ldr	r3, [pc, #108]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107ca:	68da      	ldr	r2, [r3, #12]
 80107cc:	4b1a      	ldr	r3, [pc, #104]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107ce:	7a9b      	ldrb	r3, [r3, #10]
 80107d0:	1c59      	adds	r1, r3, #1
 80107d2:	b2c8      	uxtb	r0, r1
 80107d4:	4918      	ldr	r1, [pc, #96]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107d6:	7288      	strb	r0, [r1, #10]
 80107d8:	4413      	add	r3, r2
 80107da:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80107de:	701a      	strb	r2, [r3, #0]
                break;
 80107e0:	e00a      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 80107e2:	bf00      	nop
 80107e4:	e008      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107e6:	bf00      	nop
 80107e8:	e006      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107ea:	bf00      	nop
 80107ec:	e004      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107ee:	bf00      	nop
 80107f0:	e002      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107f2:	bf00      	nop
 80107f4:	e000      	b.n	80107f8 <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 80107f6:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 80107f8:	4b0f      	ldr	r3, [pc, #60]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 80107fa:	7a9b      	ldrb	r3, [r3, #10]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00c      	beq.n	801081a <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 8010800:	4b0f      	ldr	r3, [pc, #60]	; (8010840 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010802:	7a5b      	ldrb	r3, [r3, #9]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d114      	bne.n	8010832 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 8010808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801080c:	480c      	ldr	r0, [pc, #48]	; (8010840 <LmhpComplianceOnMcpsIndication+0x7b4>)
 801080e:	f00e fef7 	bl	801f600 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8010812:	480b      	ldr	r0, [pc, #44]	; (8010840 <LmhpComplianceOnMcpsIndication+0x7b4>)
 8010814:	f00e fe16 	bl	801f444 <UTIL_TIMER_Start>
 8010818:	e00b      	b.n	8010832 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 801081a:	4809      	ldr	r0, [pc, #36]	; (8010840 <LmhpComplianceOnMcpsIndication+0x7b4>)
 801081c:	f00e fe80 	bl	801f520 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8010820:	4b05      	ldr	r3, [pc, #20]	; (8010838 <LmhpComplianceOnMcpsIndication+0x7ac>)
 8010822:	2200      	movs	r2, #0
 8010824:	705a      	strb	r2, [r3, #1]
 8010826:	e004      	b.n	8010832 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010828:	bf00      	nop
 801082a:	e002      	b.n	8010832 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 801082c:	bf00      	nop
 801082e:	e000      	b.n	8010832 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 8010830:	bf00      	nop
    }
}
 8010832:	3790      	adds	r7, #144	; 0x90
 8010834:	46bd      	mov	sp, r7
 8010836:	bdb0      	pop	{r4, r5, r7, pc}
 8010838:	20000680 	.word	0x20000680
 801083c:	200006b8 	.word	0x200006b8
 8010840:	200006bc 	.word	0x200006bc

08010844 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 801084c:	bf00      	nop
    }
}
 801084e:	bf00      	nop
 8010850:	370c      	adds	r7, #12
 8010852:	46bd      	mov	sp, r7
 8010854:	bc80      	pop	{r7}
 8010856:	4770      	bx	lr

08010858 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010860:	4b05      	ldr	r3, [pc, #20]	; (8010878 <LmhpComplianceOnMlmeIndication+0x20>)
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	f083 0301 	eor.w	r3, r3, #1
 8010868:	b2db      	uxtb	r3, r3
 801086a:	2b00      	cmp	r3, #0
    {
        return;
 801086c:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	bc80      	pop	{r7}
 8010874:	4770      	bx	lr
 8010876:	bf00      	nop
 8010878:	20000680 	.word	0x20000680

0801087c <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 8010884:	4b08      	ldr	r3, [pc, #32]	; (80108a8 <OnProcessTimer+0x2c>)
 8010886:	7a9b      	ldrb	r3, [r3, #10]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d002      	beq.n	8010892 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 801088c:	4b06      	ldr	r3, [pc, #24]	; (80108a8 <OnProcessTimer+0x2c>)
 801088e:	2201      	movs	r2, #1
 8010890:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8010892:	4b06      	ldr	r3, [pc, #24]	; (80108ac <OnProcessTimer+0x30>)
 8010894:	695b      	ldr	r3, [r3, #20]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d002      	beq.n	80108a0 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 801089a:	4b04      	ldr	r3, [pc, #16]	; (80108ac <OnProcessTimer+0x30>)
 801089c:	695b      	ldr	r3, [r3, #20]
 801089e:	4798      	blx	r3
    }
}
 80108a0:	bf00      	nop
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	20000680 	.word	0x20000680
 80108ac:	200000d8 	.word	0x200000d8

080108b0 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 80108b0:	b480      	push	{r7}
 80108b2:	b083      	sub	sp, #12
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 80108b8:	2300      	movs	r3, #0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	370c      	adds	r7, #12
 80108be:	46bd      	mov	sp, r7
 80108c0:	bc80      	pop	{r7}
 80108c2:	4770      	bx	lr

080108c4 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 80108c4:	b480      	push	{r7}
 80108c6:	b083      	sub	sp, #12
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	4603      	mov	r3, r0
 80108cc:	6039      	str	r1, [r7, #0]
 80108ce:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 80108d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	bc80      	pop	{r7}
 80108dc:	4770      	bx	lr
	...

080108e0 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80108e6:	f00e ff35 	bl	801f754 <UTIL_TIMER_GetCurrentTime>
 80108ea:	4603      	mov	r3, r0
 80108ec:	4a0f      	ldr	r2, [pc, #60]	; (801092c <OnRadioTxDone+0x4c>)
 80108ee:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80108f0:	4c0f      	ldr	r4, [pc, #60]	; (8010930 <OnRadioTxDone+0x50>)
 80108f2:	463b      	mov	r3, r7
 80108f4:	4618      	mov	r0, r3
 80108f6:	f00e f9b3 	bl	801ec60 <SysTimeGet>
 80108fa:	f504 734e 	add.w	r3, r4, #824	; 0x338
 80108fe:	463a      	mov	r2, r7
 8010900:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010904:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010908:	4a0a      	ldr	r2, [pc, #40]	; (8010934 <OnRadioTxDone+0x54>)
 801090a:	7813      	ldrb	r3, [r2, #0]
 801090c:	f043 0320 	orr.w	r3, r3, #32
 8010910:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010912:	f003 fa71 	bl	8013df8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010916:	4b08      	ldr	r3, [pc, #32]	; (8010938 <OnRadioTxDone+0x58>)
 8010918:	2201      	movs	r2, #1
 801091a:	2100      	movs	r1, #0
 801091c:	2002      	movs	r0, #2
 801091e:	f00f f809 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 8010922:	bf00      	nop
 8010924:	370c      	adds	r7, #12
 8010926:	46bd      	mov	sp, r7
 8010928:	bd90      	pop	{r4, r7, pc}
 801092a:	bf00      	nop
 801092c:	2000181c 	.word	0x2000181c
 8010930:	200006d4 	.word	0x200006d4
 8010934:	20001818 	.word	0x20001818
 8010938:	08020700 	.word	0x08020700

0801093c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b084      	sub	sp, #16
 8010940:	af00      	add	r7, sp, #0
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	4608      	mov	r0, r1
 8010946:	4611      	mov	r1, r2
 8010948:	461a      	mov	r2, r3
 801094a:	4603      	mov	r3, r0
 801094c:	817b      	strh	r3, [r7, #10]
 801094e:	460b      	mov	r3, r1
 8010950:	813b      	strh	r3, [r7, #8]
 8010952:	4613      	mov	r3, r2
 8010954:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010956:	f00e fefd 	bl	801f754 <UTIL_TIMER_GetCurrentTime>
 801095a:	4603      	mov	r3, r0
 801095c:	4a11      	ldr	r2, [pc, #68]	; (80109a4 <OnRadioRxDone+0x68>)
 801095e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010960:	4a10      	ldr	r2, [pc, #64]	; (80109a4 <OnRadioRxDone+0x68>)
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010966:	4a0f      	ldr	r2, [pc, #60]	; (80109a4 <OnRadioRxDone+0x68>)
 8010968:	897b      	ldrh	r3, [r7, #10]
 801096a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 801096c:	4a0d      	ldr	r2, [pc, #52]	; (80109a4 <OnRadioRxDone+0x68>)
 801096e:	893b      	ldrh	r3, [r7, #8]
 8010970:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010972:	4a0c      	ldr	r2, [pc, #48]	; (80109a4 <OnRadioRxDone+0x68>)
 8010974:	79fb      	ldrb	r3, [r7, #7]
 8010976:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010978:	4a0b      	ldr	r2, [pc, #44]	; (80109a8 <OnRadioRxDone+0x6c>)
 801097a:	7813      	ldrb	r3, [r2, #0]
 801097c:	f043 0310 	orr.w	r3, r3, #16
 8010980:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 8010982:	4a09      	ldr	r2, [pc, #36]	; (80109a8 <OnRadioRxDone+0x6c>)
 8010984:	7813      	ldrb	r3, [r2, #0]
 8010986:	f043 0301 	orr.w	r3, r3, #1
 801098a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 801098c:	f003 fa34 	bl	8013df8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010990:	4b06      	ldr	r3, [pc, #24]	; (80109ac <OnRadioRxDone+0x70>)
 8010992:	2201      	movs	r2, #1
 8010994:	2100      	movs	r1, #0
 8010996:	2002      	movs	r0, #2
 8010998:	f00e ffcc 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 801099c:	bf00      	nop
 801099e:	3710      	adds	r7, #16
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	20001820 	.word	0x20001820
 80109a8:	20001818 	.word	0x20001818
 80109ac:	08020710 	.word	0x08020710

080109b0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80109b4:	4a07      	ldr	r2, [pc, #28]	; (80109d4 <OnRadioTxTimeout+0x24>)
 80109b6:	7813      	ldrb	r3, [r2, #0]
 80109b8:	f043 0308 	orr.w	r3, r3, #8
 80109bc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80109be:	f003 fa1b 	bl	8013df8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80109c2:	4b05      	ldr	r3, [pc, #20]	; (80109d8 <OnRadioTxTimeout+0x28>)
 80109c4:	2201      	movs	r2, #1
 80109c6:	2100      	movs	r1, #0
 80109c8:	2002      	movs	r0, #2
 80109ca:	f00e ffb3 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 80109ce:	bf00      	nop
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	20001818 	.word	0x20001818
 80109d8:	08020720 	.word	0x08020720

080109dc <OnRadioRxError>:

static void OnRadioRxError( void )
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 80109e0:	4a04      	ldr	r2, [pc, #16]	; (80109f4 <OnRadioRxError+0x18>)
 80109e2:	7813      	ldrb	r3, [r2, #0]
 80109e4:	f043 0304 	orr.w	r3, r3, #4
 80109e8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 80109ea:	f003 fa05 	bl	8013df8 <OnMacProcessNotify>
}
 80109ee:	bf00      	nop
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	20001818 	.word	0x20001818

080109f8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80109fc:	4a07      	ldr	r2, [pc, #28]	; (8010a1c <OnRadioRxTimeout+0x24>)
 80109fe:	7813      	ldrb	r3, [r2, #0]
 8010a00:	f043 0302 	orr.w	r3, r3, #2
 8010a04:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010a06:	f003 f9f7 	bl	8013df8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010a0a:	4b05      	ldr	r3, [pc, #20]	; (8010a20 <OnRadioRxTimeout+0x28>)
 8010a0c:	2201      	movs	r2, #1
 8010a0e:	2100      	movs	r1, #0
 8010a10:	2002      	movs	r0, #2
 8010a12:	f00e ff8f 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 8010a16:	bf00      	nop
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	20001818 	.word	0x20001818
 8010a20:	08020730 	.word	0x08020730

08010a24 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010a24:	b480      	push	{r7}
 8010a26:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010a28:	4b08      	ldr	r3, [pc, #32]	; (8010a4c <UpdateRxSlotIdleState+0x28>)
 8010a2a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010a2e:	2b02      	cmp	r3, #2
 8010a30:	d004      	beq.n	8010a3c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010a32:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <UpdateRxSlotIdleState+0x2c>)
 8010a34:	2206      	movs	r2, #6
 8010a36:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010a3a:	e003      	b.n	8010a44 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a3c:	4b04      	ldr	r3, [pc, #16]	; (8010a50 <UpdateRxSlotIdleState+0x2c>)
 8010a3e:	2202      	movs	r2, #2
 8010a40:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 8010a44:	bf00      	nop
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bc80      	pop	{r7}
 8010a4a:	4770      	bx	lr
 8010a4c:	20000bf0 	.word	0x20000bf0
 8010a50:	200006d4 	.word	0x200006d4

08010a54 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b092      	sub	sp, #72	; 0x48
 8010a58:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010a5a:	4b4a      	ldr	r3, [pc, #296]	; (8010b84 <ProcessRadioTxDone+0x130>)
 8010a5c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010a60:	2b02      	cmp	r3, #2
 8010a62:	d002      	beq.n	8010a6a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010a64:	4b48      	ldr	r3, [pc, #288]	; (8010b88 <ProcessRadioTxDone+0x134>)
 8010a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a68:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8010a6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010a74:	b672      	cpsid	i
}
 8010a76:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010a78:	f00e fe6c 	bl	801f754 <UTIL_TIMER_GetCurrentTime>
 8010a7c:	4602      	mov	r2, r0
 8010a7e:	4b43      	ldr	r3, [pc, #268]	; (8010b8c <ProcessRadioTxDone+0x138>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	1ad3      	subs	r3, r2, r3
 8010a84:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010a86:	4b42      	ldr	r3, [pc, #264]	; (8010b90 <ProcessRadioTxDone+0x13c>)
 8010a88:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a8e:	1ad3      	subs	r3, r2, r3
 8010a90:	4619      	mov	r1, r3
 8010a92:	4840      	ldr	r0, [pc, #256]	; (8010b94 <ProcessRadioTxDone+0x140>)
 8010a94:	f00e fdb4 	bl	801f600 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010a98:	483e      	ldr	r0, [pc, #248]	; (8010b94 <ProcessRadioTxDone+0x140>)
 8010a9a:	f00e fcd3 	bl	801f444 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010a9e:	4b3c      	ldr	r3, [pc, #240]	; (8010b90 <ProcessRadioTxDone+0x13c>)
 8010aa0:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa6:	1ad3      	subs	r3, r2, r3
 8010aa8:	4619      	mov	r1, r3
 8010aaa:	483b      	ldr	r0, [pc, #236]	; (8010b98 <ProcessRadioTxDone+0x144>)
 8010aac:	f00e fda8 	bl	801f600 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010ab0:	4839      	ldr	r0, [pc, #228]	; (8010b98 <ProcessRadioTxDone+0x144>)
 8010ab2:	f00e fcc7 	bl	801f444 <UTIL_TIMER_Start>
 8010ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ab8:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010abc:	f383 8810 	msr	PRIMASK, r3
}
 8010ac0:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 8010ac2:	4b33      	ldr	r3, [pc, #204]	; (8010b90 <ProcessRadioTxDone+0x13c>)
 8010ac4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d01a      	beq.n	8010b02 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8010acc:	2315      	movs	r3, #21
 8010ace:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ad2:	4b2c      	ldr	r3, [pc, #176]	; (8010b84 <ProcessRadioTxDone+0x130>)
 8010ad4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010ad8:	f107 0220 	add.w	r2, r7, #32
 8010adc:	4611      	mov	r1, r2
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f006 fec0 	bl	8017864 <RegionGetPhyParam>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010ae8:	4b29      	ldr	r3, [pc, #164]	; (8010b90 <ProcessRadioTxDone+0x13c>)
 8010aea:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	4413      	add	r3, r2
 8010af2:	4619      	mov	r1, r3
 8010af4:	4829      	ldr	r0, [pc, #164]	; (8010b9c <ProcessRadioTxDone+0x148>)
 8010af6:	f00e fd83 	bl	801f600 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8010afa:	4828      	ldr	r0, [pc, #160]	; (8010b9c <ProcessRadioTxDone+0x148>)
 8010afc:	f00e fca2 	bl	801f444 <UTIL_TIMER_Start>
 8010b00:	e003      	b.n	8010b0a <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010b02:	4b23      	ldr	r3, [pc, #140]	; (8010b90 <ProcessRadioTxDone+0x13c>)
 8010b04:	2200      	movs	r2, #0
 8010b06:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010b0a:	4b20      	ldr	r3, [pc, #128]	; (8010b8c <ProcessRadioTxDone+0x138>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	4a1d      	ldr	r2, [pc, #116]	; (8010b84 <ProcessRadioTxDone+0x130>)
 8010b10:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010b12:	4b1f      	ldr	r3, [pc, #124]	; (8010b90 <ProcessRadioTxDone+0x13c>)
 8010b14:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010b18:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010b1a:	4b1c      	ldr	r3, [pc, #112]	; (8010b8c <ProcessRadioTxDone+0x138>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010b20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b24:	4618      	mov	r0, r3
 8010b26:	f00e f8d3 	bl	801ecd0 <SysTimeGetMcuTime>
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	4b15      	ldr	r3, [pc, #84]	; (8010b84 <ProcessRadioTxDone+0x130>)
 8010b2e:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010b32:	9200      	str	r2, [sp, #0]
 8010b34:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8010b38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010b3c:	ca06      	ldmia	r2, {r1, r2}
 8010b3e:	f00e f828 	bl	801eb92 <SysTimeSub>
 8010b42:	f107 0314 	add.w	r3, r7, #20
 8010b46:	463a      	mov	r2, r7
 8010b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b4c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010b50:	4b0f      	ldr	r3, [pc, #60]	; (8010b90 <ProcessRadioTxDone+0x13c>)
 8010b52:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8010b56:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b5c:	4b09      	ldr	r3, [pc, #36]	; (8010b84 <ProcessRadioTxDone+0x130>)
 8010b5e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d101      	bne.n	8010b6a <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010b66:	2300      	movs	r3, #0
 8010b68:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010b6a:	4b06      	ldr	r3, [pc, #24]	; (8010b84 <ProcessRadioTxDone+0x130>)
 8010b6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010b70:	f107 0208 	add.w	r2, r7, #8
 8010b74:	4611      	mov	r1, r2
 8010b76:	4618      	mov	r0, r3
 8010b78:	f006 fe95 	bl	80178a6 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 8010b7c:	bf00      	nop
 8010b7e:	3740      	adds	r7, #64	; 0x40
 8010b80:	46bd      	mov	sp, r7
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	20000bf0 	.word	0x20000bf0
 8010b88:	08020e4c 	.word	0x08020e4c
 8010b8c:	2000181c 	.word	0x2000181c
 8010b90:	200006d4 	.word	0x200006d4
 8010b94:	20000a54 	.word	0x20000a54
 8010b98:	20000a6c 	.word	0x20000a6c
 8010b9c:	20000ad4 	.word	0x20000ad4

08010ba0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010ba4:	4b10      	ldr	r3, [pc, #64]	; (8010be8 <PrepareRxDoneAbort+0x48>)
 8010ba6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bae:	4a0e      	ldr	r2, [pc, #56]	; (8010be8 <PrepareRxDoneAbort+0x48>)
 8010bb0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010bb4:	4b0c      	ldr	r3, [pc, #48]	; (8010be8 <PrepareRxDoneAbort+0x48>)
 8010bb6:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d002      	beq.n	8010bc4 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	f001 f9fa 	bl	8011fb8 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010bc4:	4a08      	ldr	r2, [pc, #32]	; (8010be8 <PrepareRxDoneAbort+0x48>)
 8010bc6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010bca:	f043 0302 	orr.w	r3, r3, #2
 8010bce:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010bd2:	4a05      	ldr	r2, [pc, #20]	; (8010be8 <PrepareRxDoneAbort+0x48>)
 8010bd4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010bd8:	f043 0310 	orr.w	r3, r3, #16
 8010bdc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 8010be0:	f7ff ff20 	bl	8010a24 <UpdateRxSlotIdleState>
}
 8010be4:	bf00      	nop
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	200006d4 	.word	0x200006d4

08010bec <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010bec:	b590      	push	{r4, r7, lr}
 8010bee:	b0ab      	sub	sp, #172	; 0xac
 8010bf0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010bf2:	2312      	movs	r3, #18
 8010bf4:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010bf8:	4b81      	ldr	r3, [pc, #516]	; (8010e00 <ProcessRadioRxDone+0x214>)
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 8010c00:	4b7f      	ldr	r3, [pc, #508]	; (8010e00 <ProcessRadioRxDone+0x214>)
 8010c02:	891b      	ldrh	r3, [r3, #8]
 8010c04:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 8010c08:	4b7d      	ldr	r3, [pc, #500]	; (8010e00 <ProcessRadioRxDone+0x214>)
 8010c0a:	895b      	ldrh	r3, [r3, #10]
 8010c0c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 8010c10:	4b7b      	ldr	r3, [pc, #492]	; (8010e00 <ProcessRadioRxDone+0x214>)
 8010c12:	7b1b      	ldrb	r3, [r3, #12]
 8010c14:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010c22:	4b78      	ldr	r3, [pc, #480]	; (8010e04 <ProcessRadioRxDone+0x218>)
 8010c24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010c28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010c32:	2301      	movs	r3, #1
 8010c34:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8010c3e:	4a72      	ldr	r2, [pc, #456]	; (8010e08 <ProcessRadioRxDone+0x21c>)
 8010c40:	7813      	ldrb	r3, [r2, #0]
 8010c42:	f36f 0300 	bfc	r3, #0, #1
 8010c46:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010c48:	4b70      	ldr	r3, [pc, #448]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8010c50:	4a6e      	ldr	r2, [pc, #440]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c52:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010c56:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 8010c5a:	4a6c      	ldr	r2, [pc, #432]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010c60:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010c64:	4b69      	ldr	r3, [pc, #420]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c66:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 8010c6a:	4b68      	ldr	r3, [pc, #416]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c6c:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8010c70:	4b66      	ldr	r3, [pc, #408]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8010c78:	4b64      	ldr	r3, [pc, #400]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010c80:	4b62      	ldr	r3, [pc, #392]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c82:	2200      	movs	r2, #0
 8010c84:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8010c88:	4b60      	ldr	r3, [pc, #384]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8010c90:	4b5e      	ldr	r3, [pc, #376]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8010c98:	4b5c      	ldr	r3, [pc, #368]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8010ca0:	4b5a      	ldr	r3, [pc, #360]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010ca8:	4b58      	ldr	r3, [pc, #352]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010caa:	2200      	movs	r2, #0
 8010cac:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010cb0:	4b56      	ldr	r3, [pc, #344]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8010cb8:	4b54      	ldr	r3, [pc, #336]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010cba:	2200      	movs	r2, #0
 8010cbc:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010cc0:	4b52      	ldr	r3, [pc, #328]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8010cc8:	4b50      	ldr	r3, [pc, #320]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010cd0:	4b4f      	ldr	r3, [pc, #316]	; (8010e10 <ProcessRadioRxDone+0x224>)
 8010cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd4:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8010cd6:	4b4d      	ldr	r3, [pc, #308]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010cd8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d102      	bne.n	8010ce6 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 8010ce0:	484c      	ldr	r0, [pc, #304]	; (8010e14 <ProcessRadioRxDone+0x228>)
 8010ce2:	f00e fc1d 	bl	801f520 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010ce6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010cea:	4619      	mov	r1, r3
 8010cec:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8010cf0:	f004 fe28 	bl	8015944 <LoRaMacClassBRxBeacon>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d00b      	beq.n	8010d12 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8010cfa:	4a44      	ldr	r2, [pc, #272]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010cfc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8010d00:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8010d04:	4a41      	ldr	r2, [pc, #260]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010d06:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010d0a:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 8010d0e:	f000 bc75 	b.w	80115fc <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010d12:	4b3c      	ldr	r3, [pc, #240]	; (8010e04 <ProcessRadioRxDone+0x218>)
 8010d14:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d11e      	bne.n	8010d5a <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010d1c:	f004 fe25 	bl	801596a <LoRaMacClassBIsPingExpected>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00a      	beq.n	8010d3c <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010d26:	2000      	movs	r0, #0
 8010d28:	f004 fdd6 	bl	80158d8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	f004 fdf7 	bl	8015920 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010d32:	4b36      	ldr	r3, [pc, #216]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010d34:	2204      	movs	r2, #4
 8010d36:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8010d3a:	e00e      	b.n	8010d5a <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010d3c:	f004 fe1c 	bl	8015978 <LoRaMacClassBIsMulticastExpected>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d009      	beq.n	8010d5a <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010d46:	2000      	movs	r0, #0
 8010d48:	f004 fdd0 	bl	80158ec <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	f004 fdf0 	bl	8015932 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010d52:	4b2e      	ldr	r3, [pc, #184]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010d54:	2205      	movs	r2, #5
 8010d56:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 8010d5a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d107      	bne.n	8010d72 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010d62:	4b2a      	ldr	r3, [pc, #168]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010d64:	2201      	movs	r2, #1
 8010d66:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 8010d6a:	f7ff ff19 	bl	8010ba0 <PrepareRxDoneAbort>
        return;
 8010d6e:	f000 bc45 	b.w	80115fc <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010d72:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010d76:	1c5a      	adds	r2, r3, #1
 8010d78:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d82:	4413      	add	r3, r2
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 8010d8a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010d8e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	3b01      	subs	r3, #1
 8010d96:	2b06      	cmp	r3, #6
 8010d98:	f200 8403 	bhi.w	80115a2 <ProcessRadioRxDone+0x9b6>
 8010d9c:	a201      	add	r2, pc, #4	; (adr r2, 8010da4 <ProcessRadioRxDone+0x1b8>)
 8010d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010da2:	bf00      	nop
 8010da4:	08010dc1 	.word	0x08010dc1
 8010da8:	080115a3 	.word	0x080115a3
 8010dac:	08010fbf 	.word	0x08010fbf
 8010db0:	080115a3 	.word	0x080115a3
 8010db4:	08010fb7 	.word	0x08010fb7
 8010db8:	080115a3 	.word	0x080115a3
 8010dbc:	08011547 	.word	0x08011547
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8010dc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010dc4:	2b10      	cmp	r3, #16
 8010dc6:	d807      	bhi.n	8010dd8 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010dc8:	4b10      	ldr	r3, [pc, #64]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8010dd0:	f7ff fee6 	bl	8010ba0 <PrepareRxDoneAbort>
                return;
 8010dd4:	f000 bc12 	b.w	80115fc <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 8010dd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ddc:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 8010dde:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010de6:	4b07      	ldr	r3, [pc, #28]	; (8010e04 <ProcessRadioRxDone+0x218>)
 8010de8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d013      	beq.n	8010e18 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010df0:	4b06      	ldr	r3, [pc, #24]	; (8010e0c <ProcessRadioRxDone+0x220>)
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8010df8:	f7ff fed2 	bl	8010ba0 <PrepareRxDoneAbort>
                return;
 8010dfc:	e3fe      	b.n	80115fc <ProcessRadioRxDone+0xa10>
 8010dfe:	bf00      	nop
 8010e00:	20001820 	.word	0x20001820
 8010e04:	20000bf0 	.word	0x20000bf0
 8010e08:	20001818 	.word	0x20001818
 8010e0c:	200006d4 	.word	0x200006d4
 8010e10:	08020e4c 	.word	0x08020e4c
 8010e14:	20000a6c 	.word	0x20000a6c
            }

            SecureElementGetJoinEui( joinEui );
 8010e18:	f107 0308 	add.w	r3, r7, #8
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7fd ff7d 	bl	800ed1c <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8010e22:	f107 0218 	add.w	r2, r7, #24
 8010e26:	f107 0308 	add.w	r3, r7, #8
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	20ff      	movs	r0, #255	; 0xff
 8010e2e:	f005 ff95 	bl	8016d5c <LoRaMacCryptoHandleJoinAccept>
 8010e32:	4603      	mov	r3, r0
 8010e34:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010e3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010e42:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	b25b      	sxtb	r3, r3
 8010e4a:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010e4c:	4bb1      	ldr	r3, [pc, #708]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010e4e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010e52:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8010e54:	4baf      	ldr	r3, [pc, #700]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010e56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e5a:	1d39      	adds	r1, r7, #4
 8010e5c:	2207      	movs	r2, #7
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f006 fd4e 	bl	8017900 <RegionVerify>
 8010e64:	4603      	mov	r3, r0
 8010e66:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8010e6a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	f040 8095 	bne.w	8010f9e <ProcessRadioRxDone+0x3b2>
 8010e74:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f000 8090 	beq.w	8010f9e <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8010e7e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e82:	461a      	mov	r2, r3
 8010e84:	4ba3      	ldr	r3, [pc, #652]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010e86:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8010e8a:	4ba2      	ldr	r3, [pc, #648]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010e8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010e90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010e94:	021b      	lsls	r3, r3, #8
 8010e96:	4313      	orrs	r3, r2
 8010e98:	4a9e      	ldr	r2, [pc, #632]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010e9e:	4b9d      	ldr	r3, [pc, #628]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010ea0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ea8:	041b      	lsls	r3, r3, #16
 8010eaa:	4313      	orrs	r3, r2
 8010eac:	4a99      	ldr	r2, [pc, #612]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb4:	4a97      	ldr	r2, [pc, #604]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010eb6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8010eba:	4b96      	ldr	r3, [pc, #600]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010ebc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	2002      	movs	r0, #2
 8010ec4:	f7fd ff42 	bl	800ed4c <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8010ec8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ecc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8010ed0:	b2db      	uxtb	r3, r3
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	4b8f      	ldr	r3, [pc, #572]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010ed6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010eda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ede:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	461a      	mov	r2, r3
 8010ee6:	4b8b      	ldr	r3, [pc, #556]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010ee8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010eec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010ef0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010ef4:	b2db      	uxtb	r3, r3
 8010ef6:	461a      	mov	r2, r3
 8010ef8:	4b86      	ldr	r3, [pc, #536]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010efa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8010efe:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8010f02:	461a      	mov	r2, r3
 8010f04:	4b83      	ldr	r3, [pc, #524]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f06:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8010f08:	4b82      	ldr	r3, [pc, #520]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d102      	bne.n	8010f16 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8010f10:	4b80      	ldr	r3, [pc, #512]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f12:	2201      	movs	r2, #1
 8010f14:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8010f16:	4b7f      	ldr	r3, [pc, #508]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010f1e:	fb02 f303 	mul.w	r3, r2, r3
 8010f22:	4a7c      	ldr	r2, [pc, #496]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f24:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010f26:	4b7b      	ldr	r3, [pc, #492]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f2a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010f2e:	4a79      	ldr	r2, [pc, #484]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f30:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8010f32:	4b78      	ldr	r3, [pc, #480]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f34:	2201      	movs	r2, #1
 8010f36:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8010f3a:	4b76      	ldr	r3, [pc, #472]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010f42:	f107 0318 	add.w	r3, r7, #24
 8010f46:	3312      	adds	r3, #18
 8010f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010f4c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010f50:	b2db      	uxtb	r3, r3
 8010f52:	3b11      	subs	r3, #17
 8010f54:	b2db      	uxtb	r3, r3
 8010f56:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 8010f5a:	4b6f      	ldr	r3, [pc, #444]	; (8011118 <ProcessRadioRxDone+0x52c>)
 8010f5c:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010f60:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010f64:	4b6b      	ldr	r3, [pc, #428]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010f6a:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8010f6e:	4611      	mov	r1, r2
 8010f70:	4618      	mov	r0, r3
 8010f72:	f006 fce6 	bl	8017942 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8010f76:	4b67      	ldr	r3, [pc, #412]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010f78:	2202      	movs	r2, #2
 8010f7a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010f7e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010f82:	4618      	mov	r0, r3
 8010f84:	f005 f9f4 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	f000 8311 	beq.w	80115b2 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8010f90:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010f94:	4619      	mov	r1, r3
 8010f96:	2000      	movs	r0, #0
 8010f98:	f005 f95e 	bl	8016258 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010f9c:	e309      	b.n	80115b2 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010f9e:	2001      	movs	r0, #1
 8010fa0:	f005 f9e6 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f000 8302 	beq.w	80115b0 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010fac:	2101      	movs	r1, #1
 8010fae:	2007      	movs	r0, #7
 8010fb0:	f005 f952 	bl	8016258 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8010fb4:	e2fc      	b.n	80115b0 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010fb6:	4b58      	ldr	r3, [pc, #352]	; (8011118 <ProcessRadioRxDone+0x52c>)
 8010fb8:	2201      	movs	r2, #1
 8010fba:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010fbe:	4b55      	ldr	r3, [pc, #340]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010fc0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010fc4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8010fc8:	4b53      	ldr	r3, [pc, #332]	; (8011118 <ProcessRadioRxDone+0x52c>)
 8010fca:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 8010fce:	b25b      	sxtb	r3, r3
 8010fd0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8010fd4:	230d      	movs	r3, #13
 8010fd6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8010fda:	4b4e      	ldr	r3, [pc, #312]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010fdc:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d002      	beq.n	8010fea <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8010fe4:	230e      	movs	r3, #14
 8010fe6:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fea:	4b4a      	ldr	r3, [pc, #296]	; (8011114 <ProcessRadioRxDone+0x528>)
 8010fec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010ff0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8010ff4:	4611      	mov	r1, r2
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f006 fc34 	bl	8017864 <RegionGetPhyParam>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011000:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011004:	3b0d      	subs	r3, #13
 8011006:	b29b      	uxth	r3, r3
 8011008:	b21b      	sxth	r3, r3
 801100a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801100e:	b21a      	sxth	r2, r3
 8011010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011012:	b21b      	sxth	r3, r3
 8011014:	429a      	cmp	r2, r3
 8011016:	dc03      	bgt.n	8011020 <ProcessRadioRxDone+0x434>
 8011018:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801101c:	2b0b      	cmp	r3, #11
 801101e:	d806      	bhi.n	801102e <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011020:	4b3d      	ldr	r3, [pc, #244]	; (8011118 <ProcessRadioRxDone+0x52c>)
 8011022:	2201      	movs	r2, #1
 8011024:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011028:	f7ff fdba 	bl	8010ba0 <PrepareRxDoneAbort>
                return;
 801102c:	e2e6      	b.n	80115fc <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 801102e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011032:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 8011034:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011038:	b2db      	uxtb	r3, r3
 801103a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 801103e:	4b37      	ldr	r3, [pc, #220]	; (801111c <ProcessRadioRxDone+0x530>)
 8011040:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011042:	23ff      	movs	r3, #255	; 0xff
 8011044:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8011048:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801104c:	4618      	mov	r0, r3
 801104e:	f006 f987 	bl	8017360 <LoRaMacParserData>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d006      	beq.n	8011066 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011058:	4b2f      	ldr	r3, [pc, #188]	; (8011118 <ProcessRadioRxDone+0x52c>)
 801105a:	2201      	movs	r2, #1
 801105c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8011060:	f7ff fd9e 	bl	8010ba0 <PrepareRxDoneAbort>
                return;
 8011064:	e2ca      	b.n	80115fc <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011066:	4b2b      	ldr	r3, [pc, #172]	; (8011114 <ProcessRadioRxDone+0x528>)
 8011068:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801106c:	2b01      	cmp	r3, #1
 801106e:	d132      	bne.n	80110d6 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 8011070:	f004 fc7b 	bl	801596a <LoRaMacClassBIsPingExpected>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d014      	beq.n	80110a4 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801107a:	2000      	movs	r0, #0
 801107c:	f004 fc2c 	bl	80158d8 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8011080:	2000      	movs	r0, #0
 8011082:	f004 fc4d 	bl	8015920 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8011086:	4b24      	ldr	r3, [pc, #144]	; (8011118 <ProcessRadioRxDone+0x52c>)
 8011088:	2204      	movs	r2, #4
 801108a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 801108e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011090:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011094:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8011098:	b2db      	uxtb	r3, r3
 801109a:	4619      	mov	r1, r3
 801109c:	4610      	mov	r0, r2
 801109e:	f004 fced 	bl	8015a7c <LoRaMacClassBSetFPendingBit>
 80110a2:	e018      	b.n	80110d6 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80110a4:	f004 fc68 	bl	8015978 <LoRaMacClassBIsMulticastExpected>
 80110a8:	4603      	mov	r3, r0
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d013      	beq.n	80110d6 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80110ae:	2000      	movs	r0, #0
 80110b0:	f004 fc1c 	bl	80158ec <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80110b4:	2000      	movs	r0, #0
 80110b6:	f004 fc3c 	bl	8015932 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80110ba:	4b17      	ldr	r3, [pc, #92]	; (8011118 <ProcessRadioRxDone+0x52c>)
 80110bc:	2205      	movs	r2, #5
 80110be:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80110c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80110c8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80110cc:	b2db      	uxtb	r3, r3
 80110ce:	4619      	mov	r1, r3
 80110d0:	4610      	mov	r0, r2
 80110d2:	f004 fcd3 	bl	8015a7c <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80110d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110d8:	4a0f      	ldr	r2, [pc, #60]	; (8011118 <ProcessRadioRxDone+0x52c>)
 80110da:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80110de:	f107 0212 	add.w	r2, r7, #18
 80110e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80110e6:	4611      	mov	r1, r2
 80110e8:	4618      	mov	r0, r3
 80110ea:	f002 fd81 	bl	8013bf0 <DetermineFrameType>
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d006      	beq.n	8011102 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110f4:	4b08      	ldr	r3, [pc, #32]	; (8011118 <ProcessRadioRxDone+0x52c>)
 80110f6:	2201      	movs	r2, #1
 80110f8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80110fc:	f7ff fd50 	bl	8010ba0 <PrepareRxDoneAbort>
                return;
 8011100:	e27c      	b.n	80115fc <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011102:	2300      	movs	r3, #0
 8011104:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 8011108:	2300      	movs	r3, #0
 801110a:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801110c:	2300      	movs	r3, #0
 801110e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8011112:	e055      	b.n	80111c0 <ProcessRadioRxDone+0x5d4>
 8011114:	20000bf0 	.word	0x20000bf0
 8011118:	200006d4 	.word	0x200006d4
 801111c:	2000090c 	.word	0x2000090c
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011120:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011124:	499f      	ldr	r1, [pc, #636]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 8011126:	4613      	mov	r3, r2
 8011128:	005b      	lsls	r3, r3, #1
 801112a:	4413      	add	r3, r2
 801112c:	011b      	lsls	r3, r3, #4
 801112e:	440b      	add	r3, r1
 8011130:	33ec      	adds	r3, #236	; 0xec
 8011132:	681a      	ldr	r2, [r3, #0]
 8011134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011136:	429a      	cmp	r2, r3
 8011138:	d13d      	bne.n	80111b6 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 801113a:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 801113e:	4999      	ldr	r1, [pc, #612]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 8011140:	4613      	mov	r3, r2
 8011142:	005b      	lsls	r3, r3, #1
 8011144:	4413      	add	r3, r2
 8011146:	011b      	lsls	r3, r3, #4
 8011148:	440b      	add	r3, r1
 801114a:	33e9      	adds	r3, #233	; 0xe9
 801114c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801114e:	2b00      	cmp	r3, #0
 8011150:	d031      	beq.n	80111b6 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 8011152:	2301      	movs	r3, #1
 8011154:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8011158:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 801115c:	4991      	ldr	r1, [pc, #580]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 801115e:	4613      	mov	r3, r2
 8011160:	005b      	lsls	r3, r3, #1
 8011162:	4413      	add	r3, r2
 8011164:	011b      	lsls	r3, r3, #4
 8011166:	440b      	add	r3, r1
 8011168:	33ea      	adds	r3, #234	; 0xea
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011170:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8011174:	498b      	ldr	r1, [pc, #556]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 8011176:	4613      	mov	r3, r2
 8011178:	005b      	lsls	r3, r3, #1
 801117a:	4413      	add	r3, r2
 801117c:	011b      	lsls	r3, r3, #4
 801117e:	440b      	add	r3, r1
 8011180:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 801118a:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 801118e:	4985      	ldr	r1, [pc, #532]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 8011190:	4613      	mov	r3, r2
 8011192:	005b      	lsls	r3, r3, #1
 8011194:	4413      	add	r3, r2
 8011196:	011b      	lsls	r3, r3, #4
 8011198:	440b      	add	r3, r1
 801119a:	33ec      	adds	r3, #236	; 0xec
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80111a2:	4b80      	ldr	r3, [pc, #512]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 80111a4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80111a8:	2b02      	cmp	r3, #2
 80111aa:	d10e      	bne.n	80111ca <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80111ac:	4b7e      	ldr	r3, [pc, #504]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80111ae:	2203      	movs	r2, #3
 80111b0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 80111b4:	e009      	b.n	80111ca <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80111b6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80111ba:	3301      	adds	r3, #1
 80111bc:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80111c0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d0ab      	beq.n	8011120 <ProcessRadioRxDone+0x534>
 80111c8:	e000      	b.n	80111cc <ProcessRadioRxDone+0x5e0>
                    break;
 80111ca:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80111cc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80111d0:	2b01      	cmp	r3, #1
 80111d2:	d117      	bne.n	8011204 <ProcessRadioRxDone+0x618>
 80111d4:	7cbb      	ldrb	r3, [r7, #18]
 80111d6:	2b03      	cmp	r3, #3
 80111d8:	d10d      	bne.n	80111f6 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80111da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80111de:	f003 0320 	and.w	r3, r3, #32
 80111e2:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d106      	bne.n	80111f6 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 80111e8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80111ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111f0:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d006      	beq.n	8011204 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80111f6:	4b6c      	ldr	r3, [pc, #432]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80111f8:	2201      	movs	r2, #1
 80111fa:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80111fe:	f7ff fccf 	bl	8010ba0 <PrepareRxDoneAbort>
                return;
 8011202:	e1fb      	b.n	80115fc <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8011204:	7cb9      	ldrb	r1, [r7, #18]
 8011206:	4c67      	ldr	r4, [pc, #412]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 8011208:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801120c:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 8011210:	f107 0314 	add.w	r3, r7, #20
 8011214:	9301      	str	r3, [sp, #4]
 8011216:	f107 0313 	add.w	r3, r7, #19
 801121a:	9300      	str	r3, [sp, #0]
 801121c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 8011220:	f000 fee4 	bl	8011fec <GetFCntDown>
 8011224:	4603      	mov	r3, r0
 8011226:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801122a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801122e:	2b00      	cmp	r3, #0
 8011230:	d017      	beq.n	8011262 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8011232:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011236:	2b07      	cmp	r3, #7
 8011238:	d104      	bne.n	8011244 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 801123a:	4b5b      	ldr	r3, [pc, #364]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 801123c:	2208      	movs	r2, #8
 801123e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8011242:	e003      	b.n	801124c <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011244:	4b58      	ldr	r3, [pc, #352]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011246:	2201      	movs	r2, #1
 8011248:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	4a56      	ldr	r2, [pc, #344]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011250:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011254:	697b      	ldr	r3, [r7, #20]
 8011256:	4a54      	ldr	r2, [pc, #336]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011258:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 801125c:	f7ff fca0 	bl	8010ba0 <PrepareRxDoneAbort>
                return;
 8011260:	e1cc      	b.n	80115fc <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011262:	7cfa      	ldrb	r2, [r7, #19]
 8011264:	6979      	ldr	r1, [r7, #20]
 8011266:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801126a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801126e:	9300      	str	r3, [sp, #0]
 8011270:	460b      	mov	r3, r1
 8011272:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011276:	f005 fed3 	bl	8017020 <LoRaMacCryptoUnsecureMessage>
 801127a:	4603      	mov	r3, r0
 801127c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011280:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8011284:	2b00      	cmp	r3, #0
 8011286:	d00f      	beq.n	80112a8 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8011288:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801128c:	2b02      	cmp	r3, #2
 801128e:	d104      	bne.n	801129a <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011290:	4b45      	ldr	r3, [pc, #276]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011292:	220a      	movs	r2, #10
 8011294:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8011298:	e003      	b.n	80112a2 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 801129a:	4b43      	ldr	r3, [pc, #268]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 801129c:	220b      	movs	r2, #11
 801129e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 80112a2:	f7ff fc7d 	bl	8010ba0 <PrepareRxDoneAbort>
                return;
 80112a6:	e1a9      	b.n	80115fc <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80112a8:	4b3f      	ldr	r3, [pc, #252]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80112aa:	2200      	movs	r2, #0
 80112ac:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 80112b0:	4a3d      	ldr	r2, [pc, #244]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80112b2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80112b6:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 80112ba:	4b3b      	ldr	r3, [pc, #236]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80112bc:	2200      	movs	r2, #0
 80112be:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 80112c2:	4b39      	ldr	r3, [pc, #228]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80112c4:	2200      	movs	r2, #0
 80112c6:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	4a36      	ldr	r2, [pc, #216]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80112ce:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	4a34      	ldr	r2, [pc, #208]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80112d6:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80112da:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80112de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80112e2:	b2db      	uxtb	r3, r3
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	bf14      	ite	ne
 80112e8:	2301      	movne	r3, #1
 80112ea:	2300      	moveq	r3, #0
 80112ec:	b2da      	uxtb	r2, r3
 80112ee:	4b2e      	ldr	r3, [pc, #184]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80112f0:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80112f4:	4b2c      	ldr	r3, [pc, #176]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 80112f6:	2200      	movs	r2, #0
 80112f8:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80112fc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011300:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011304:	b2db      	uxtb	r3, r3
 8011306:	2b00      	cmp	r3, #0
 8011308:	bf14      	ite	ne
 801130a:	2301      	movne	r3, #1
 801130c:	2300      	moveq	r3, #0
 801130e:	b2da      	uxtb	r2, r3
 8011310:	4b25      	ldr	r3, [pc, #148]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011312:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011316:	4b24      	ldr	r3, [pc, #144]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011318:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801131c:	2b00      	cmp	r3, #0
 801131e:	d004      	beq.n	801132a <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011320:	4b21      	ldr	r3, [pc, #132]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011322:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011326:	2b01      	cmp	r3, #1
 8011328:	d106      	bne.n	8011338 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 801132a:	4b1e      	ldr	r3, [pc, #120]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 801132c:	2200      	movs	r2, #0
 801132e:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8011330:	4b1c      	ldr	r3, [pc, #112]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 8011332:	2201      	movs	r2, #1
 8011334:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011338:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801133c:	2b01      	cmp	r3, #1
 801133e:	d104      	bne.n	801134a <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011340:	4b19      	ldr	r3, [pc, #100]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011342:	2202      	movs	r2, #2
 8011344:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8011348:	e03a      	b.n	80113c0 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 801134a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801134e:	f023 031f 	bic.w	r3, r3, #31
 8011352:	b2db      	uxtb	r3, r3
 8011354:	2ba0      	cmp	r3, #160	; 0xa0
 8011356:	d12b      	bne.n	80113b0 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011358:	4b12      	ldr	r3, [pc, #72]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 801135a:	2201      	movs	r2, #1
 801135c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011360:	4b10      	ldr	r3, [pc, #64]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 8011362:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 8011366:	2b00      	cmp	r3, #0
 8011368:	d102      	bne.n	8011370 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 801136a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801136c:	4a0d      	ldr	r2, [pc, #52]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 801136e:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011370:	4b0d      	ldr	r3, [pc, #52]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011372:	2201      	movs	r2, #1
 8011374:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011378:	4b0b      	ldr	r3, [pc, #44]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 801137a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801137e:	2b00      	cmp	r3, #0
 8011380:	d01e      	beq.n	80113c0 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 8011382:	4b09      	ldr	r3, [pc, #36]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011384:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011388:	2b01      	cmp	r3, #1
 801138a:	d019      	beq.n	80113c0 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801138c:	4b05      	ldr	r3, [pc, #20]	; (80113a4 <ProcessRadioRxDone+0x7b8>)
 801138e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011392:	4a05      	ldr	r2, [pc, #20]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 8011394:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8011398:	4b04      	ldr	r3, [pc, #16]	; (80113ac <ProcessRadioRxDone+0x7c0>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4a02      	ldr	r2, [pc, #8]	; (80113a8 <ProcessRadioRxDone+0x7bc>)
 801139e:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 80113a2:	e00d      	b.n	80113c0 <ProcessRadioRxDone+0x7d4>
 80113a4:	20000bf0 	.word	0x20000bf0
 80113a8:	200006d4 	.word	0x200006d4
 80113ac:	20001820 	.word	0x20001820
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80113b0:	4b94      	ldr	r3, [pc, #592]	; (8011604 <ProcessRadioRxDone+0xa18>)
 80113b2:	2200      	movs	r2, #0
 80113b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80113b8:	4b93      	ldr	r3, [pc, #588]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80113ba:	2200      	movs	r2, #0
 80113bc:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 80113c0:	4b90      	ldr	r3, [pc, #576]	; (8011604 <ProcessRadioRxDone+0xa18>)
 80113c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d106      	bne.n	80113d8 <ProcessRadioRxDone+0x7ec>
 80113ca:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80113ce:	f003 0310 	and.w	r3, r3, #16
 80113d2:	b2db      	uxtb	r3, r3
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d008      	beq.n	80113ea <ProcessRadioRxDone+0x7fe>
 80113d8:	4b8a      	ldr	r3, [pc, #552]	; (8011604 <ProcessRadioRxDone+0xa18>)
 80113da:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d103      	bne.n	80113ea <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 80113e2:	4b89      	ldr	r3, [pc, #548]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80113e4:	2201      	movs	r2, #1
 80113e6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80113ea:	4b87      	ldr	r3, [pc, #540]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80113ec:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80113f0:	4a85      	ldr	r2, [pc, #532]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80113f2:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 80113f6:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 80113fa:	4618      	mov	r0, r3
 80113fc:	f001 ff8a 	bl	8013314 <RemoveMacCommands>

            switch( fType )
 8011400:	7cbb      	ldrb	r3, [r7, #18]
 8011402:	2b03      	cmp	r3, #3
 8011404:	d873      	bhi.n	80114ee <ProcessRadioRxDone+0x902>
 8011406:	a201      	add	r2, pc, #4	; (adr r2, 801140c <ProcessRadioRxDone+0x820>)
 8011408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801140c:	0801141d 	.word	0x0801141d
 8011410:	0801146d 	.word	0x0801146d
 8011414:	080114a3 	.word	0x080114a3
 8011418:	080114c9 	.word	0x080114c9
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801141c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011420:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011424:	b2db      	uxtb	r3, r3
 8011426:	461c      	mov	r4, r3
 8011428:	4b77      	ldr	r3, [pc, #476]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 801142a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801142e:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011432:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011436:	f102 0010 	add.w	r0, r2, #16
 801143a:	9300      	str	r3, [sp, #0]
 801143c:	460b      	mov	r3, r1
 801143e:	4622      	mov	r2, r4
 8011440:	2100      	movs	r1, #0
 8011442:	f000 ff4f 	bl	80122e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011446:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801144a:	4b6f      	ldr	r3, [pc, #444]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 801144c:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011452:	4a6d      	ldr	r2, [pc, #436]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011454:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011458:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801145c:	4b6a      	ldr	r3, [pc, #424]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 801145e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8011462:	4b69      	ldr	r3, [pc, #420]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011464:	2201      	movs	r2, #1
 8011466:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 801146a:	e047      	b.n	80114fc <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801146c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8011470:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011474:	b2db      	uxtb	r3, r3
 8011476:	461c      	mov	r4, r3
 8011478:	4b63      	ldr	r3, [pc, #396]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 801147a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 801147e:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8011482:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011486:	f102 0010 	add.w	r0, r2, #16
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	460b      	mov	r3, r1
 801148e:	4622      	mov	r2, r4
 8011490:	2100      	movs	r1, #0
 8011492:	f000 ff27 	bl	80122e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011496:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801149a:	4b5b      	ldr	r3, [pc, #364]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 801149c:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 80114a0:	e02c      	b.n	80114fc <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80114a2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80114a4:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80114a8:	4b57      	ldr	r3, [pc, #348]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80114aa:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80114ae:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 80114b2:	9300      	str	r3, [sp, #0]
 80114b4:	460b      	mov	r3, r1
 80114b6:	2100      	movs	r1, #0
 80114b8:	f000 ff14 	bl	80122e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80114bc:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80114c0:	4b51      	ldr	r3, [pc, #324]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80114c2:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 80114c6:	e019      	b.n	80114fc <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80114c8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80114cc:	4b4e      	ldr	r3, [pc, #312]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80114ce:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80114d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114d4:	4a4c      	ldr	r2, [pc, #304]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80114d6:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80114da:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80114de:	4b4a      	ldr	r3, [pc, #296]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80114e0:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80114e4:	4b48      	ldr	r3, [pc, #288]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80114e6:	2201      	movs	r2, #1
 80114e8:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 80114ec:	e006      	b.n	80114fc <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80114ee:	4b46      	ldr	r3, [pc, #280]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80114f0:	2201      	movs	r2, #1
 80114f2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 80114f6:	f7ff fb53 	bl	8010ba0 <PrepareRxDoneAbort>
                    break;
 80114fa:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80114fc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8011500:	2be0      	cmp	r3, #224	; 0xe0
 8011502:	d118      	bne.n	8011536 <ProcessRadioRxDone+0x94a>
 8011504:	4b3f      	ldr	r3, [pc, #252]	; (8011604 <ProcessRadioRxDone+0xa18>)
 8011506:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 801150a:	f083 0301 	eor.w	r3, r3, #1
 801150e:	b2db      	uxtb	r3, r3
 8011510:	2b00      	cmp	r3, #0
 8011512:	d010      	beq.n	8011536 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011514:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8011518:	4b3b      	ldr	r3, [pc, #236]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 801151a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 801151e:	4b3a      	ldr	r3, [pc, #232]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011520:	2200      	movs	r2, #0
 8011522:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8011526:	4b38      	ldr	r3, [pc, #224]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011528:	2200      	movs	r2, #0
 801152a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 801152e:	4b36      	ldr	r3, [pc, #216]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011530:	2200      	movs	r2, #0
 8011532:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011536:	4a34      	ldr	r2, [pc, #208]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011538:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801153c:	f043 0302 	orr.w	r3, r3, #2
 8011540:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8011544:	e035      	b.n	80115b2 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8011546:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801154a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801154e:	18d1      	adds	r1, r2, r3
 8011550:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011554:	b29b      	uxth	r3, r3
 8011556:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 801155a:	1ad3      	subs	r3, r2, r3
 801155c:	b29b      	uxth	r3, r3
 801155e:	461a      	mov	r2, r3
 8011560:	482a      	ldr	r0, [pc, #168]	; (801160c <ProcessRadioRxDone+0xa20>)
 8011562:	f009 ff80 	bl	801b466 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8011566:	4b28      	ldr	r3, [pc, #160]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011568:	2203      	movs	r2, #3
 801156a:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801156e:	4b26      	ldr	r3, [pc, #152]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011570:	2200      	movs	r2, #0
 8011572:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8011576:	4b24      	ldr	r3, [pc, #144]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011578:	4a24      	ldr	r2, [pc, #144]	; (801160c <ProcessRadioRxDone+0xa20>)
 801157a:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 801157e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8011582:	b2da      	uxtb	r2, r3
 8011584:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8011588:	1ad3      	subs	r3, r2, r3
 801158a:	b2da      	uxtb	r2, r3
 801158c:	4b1e      	ldr	r3, [pc, #120]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 801158e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011592:	4a1d      	ldr	r2, [pc, #116]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 8011594:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011598:	f043 0302 	orr.w	r3, r3, #2
 801159c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 80115a0:	e007      	b.n	80115b2 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80115a2:	4b19      	ldr	r3, [pc, #100]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80115a4:	2201      	movs	r2, #1
 80115a6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 80115aa:	f7ff faf9 	bl	8010ba0 <PrepareRxDoneAbort>
            break;
 80115ae:	e000      	b.n	80115b2 <ProcessRadioRxDone+0x9c6>
            break;
 80115b0:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80115b2:	4b15      	ldr	r3, [pc, #84]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80115b4:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d004      	beq.n	80115c6 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80115bc:	4b12      	ldr	r3, [pc, #72]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80115be:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d10c      	bne.n	80115e0 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 80115c6:	4b10      	ldr	r3, [pc, #64]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80115c8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d007      	beq.n	80115e0 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 80115d0:	4b0d      	ldr	r3, [pc, #52]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80115d2:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d002      	beq.n	80115e0 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 80115da:	2000      	movs	r0, #0
 80115dc:	f000 fcec 	bl	8011fb8 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 80115e0:	4b09      	ldr	r3, [pc, #36]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80115e2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80115e6:	2b02      	cmp	r3, #2
 80115e8:	d006      	beq.n	80115f8 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80115ea:	4a07      	ldr	r2, [pc, #28]	; (8011608 <ProcessRadioRxDone+0xa1c>)
 80115ec:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80115f0:	f043 0310 	orr.w	r3, r3, #16
 80115f4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 80115f8:	f7ff fa14 	bl	8010a24 <UpdateRxSlotIdleState>
}
 80115fc:	37a4      	adds	r7, #164	; 0xa4
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd90      	pop	{r4, r7, pc}
 8011602:	bf00      	nop
 8011604:	20000bf0 	.word	0x20000bf0
 8011608:	200006d4 	.word	0x200006d4
 801160c:	2000090c 	.word	0x2000090c

08011610 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011610:	b580      	push	{r7, lr}
 8011612:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011614:	4b11      	ldr	r3, [pc, #68]	; (801165c <ProcessRadioTxTimeout+0x4c>)
 8011616:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801161a:	2b02      	cmp	r3, #2
 801161c:	d002      	beq.n	8011624 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801161e:	4b10      	ldr	r3, [pc, #64]	; (8011660 <ProcessRadioTxTimeout+0x50>)
 8011620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011622:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011624:	f7ff f9fe 	bl	8010a24 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011628:	4b0e      	ldr	r3, [pc, #56]	; (8011664 <ProcessRadioTxTimeout+0x54>)
 801162a:	2202      	movs	r2, #2
 801162c:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011630:	2002      	movs	r0, #2
 8011632:	f004 fe69 	bl	8016308 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8011636:	4b0b      	ldr	r3, [pc, #44]	; (8011664 <ProcessRadioTxTimeout+0x54>)
 8011638:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801163c:	2b00      	cmp	r3, #0
 801163e:	d003      	beq.n	8011648 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8011640:	4b08      	ldr	r3, [pc, #32]	; (8011664 <ProcessRadioTxTimeout+0x54>)
 8011642:	2201      	movs	r2, #1
 8011644:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011648:	4a06      	ldr	r2, [pc, #24]	; (8011664 <ProcessRadioTxTimeout+0x54>)
 801164a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801164e:	f043 0310 	orr.w	r3, r3, #16
 8011652:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8011656:	bf00      	nop
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	20000bf0 	.word	0x20000bf0
 8011660:	08020e4c 	.word	0x08020e4c
 8011664:	200006d4 	.word	0x200006d4

08011668 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b084      	sub	sp, #16
 801166c:	af00      	add	r7, sp, #0
 801166e:	4603      	mov	r3, r0
 8011670:	460a      	mov	r2, r1
 8011672:	71fb      	strb	r3, [r7, #7]
 8011674:	4613      	mov	r3, r2
 8011676:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011678:	2300      	movs	r3, #0
 801167a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801167c:	4b3d      	ldr	r3, [pc, #244]	; (8011774 <HandleRadioRxErrorTimeout+0x10c>)
 801167e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011682:	2b02      	cmp	r3, #2
 8011684:	d002      	beq.n	801168c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8011686:	4b3c      	ldr	r3, [pc, #240]	; (8011778 <HandleRadioRxErrorTimeout+0x110>)
 8011688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801168a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801168c:	f004 f966 	bl	801595c <LoRaMacClassBIsBeaconExpected>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d007      	beq.n	80116a6 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8011696:	2002      	movs	r0, #2
 8011698:	f004 f914 	bl	80158c4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 801169c:	2000      	movs	r0, #0
 801169e:	f004 f936 	bl	801590e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80116a2:	2301      	movs	r3, #1
 80116a4:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80116a6:	4b33      	ldr	r3, [pc, #204]	; (8011774 <HandleRadioRxErrorTimeout+0x10c>)
 80116a8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d119      	bne.n	80116e4 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80116b0:	f004 f95b 	bl	801596a <LoRaMacClassBIsPingExpected>
 80116b4:	4603      	mov	r3, r0
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d007      	beq.n	80116ca <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80116ba:	2000      	movs	r0, #0
 80116bc:	f004 f90c 	bl	80158d8 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80116c0:	2000      	movs	r0, #0
 80116c2:	f004 f92d 	bl	8015920 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80116c6:	2301      	movs	r3, #1
 80116c8:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80116ca:	f004 f955 	bl	8015978 <LoRaMacClassBIsMulticastExpected>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d007      	beq.n	80116e4 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80116d4:	2000      	movs	r0, #0
 80116d6:	f004 f909 	bl	80158ec <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80116da:	2000      	movs	r0, #0
 80116dc:	f004 f929 	bl	8015932 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 80116e0:	2301      	movs	r3, #1
 80116e2:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 80116e4:	7bfb      	ldrb	r3, [r7, #15]
 80116e6:	f083 0301 	eor.w	r3, r3, #1
 80116ea:	b2db      	uxtb	r3, r3
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d03b      	beq.n	8011768 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80116f0:	4b22      	ldr	r3, [pc, #136]	; (801177c <HandleRadioRxErrorTimeout+0x114>)
 80116f2:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d122      	bne.n	8011740 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 80116fa:	4b20      	ldr	r3, [pc, #128]	; (801177c <HandleRadioRxErrorTimeout+0x114>)
 80116fc:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011700:	2b00      	cmp	r3, #0
 8011702:	d003      	beq.n	801170c <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011704:	4a1d      	ldr	r2, [pc, #116]	; (801177c <HandleRadioRxErrorTimeout+0x114>)
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 801170c:	79fb      	ldrb	r3, [r7, #7]
 801170e:	4618      	mov	r0, r3
 8011710:	f004 fdfa 	bl	8016308 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011714:	4b17      	ldr	r3, [pc, #92]	; (8011774 <HandleRadioRxErrorTimeout+0x10c>)
 8011716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011718:	4618      	mov	r0, r3
 801171a:	f00e f82d 	bl	801f778 <UTIL_TIMER_GetElapsedTime>
 801171e:	4602      	mov	r2, r0
 8011720:	4b16      	ldr	r3, [pc, #88]	; (801177c <HandleRadioRxErrorTimeout+0x114>)
 8011722:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011726:	429a      	cmp	r2, r3
 8011728:	d31e      	bcc.n	8011768 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801172a:	4815      	ldr	r0, [pc, #84]	; (8011780 <HandleRadioRxErrorTimeout+0x118>)
 801172c:	f00d fef8 	bl	801f520 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011730:	4a12      	ldr	r2, [pc, #72]	; (801177c <HandleRadioRxErrorTimeout+0x114>)
 8011732:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011736:	f043 0310 	orr.w	r3, r3, #16
 801173a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 801173e:	e013      	b.n	8011768 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011740:	4b0e      	ldr	r3, [pc, #56]	; (801177c <HandleRadioRxErrorTimeout+0x114>)
 8011742:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011746:	2b00      	cmp	r3, #0
 8011748:	d003      	beq.n	8011752 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801174a:	4a0c      	ldr	r2, [pc, #48]	; (801177c <HandleRadioRxErrorTimeout+0x114>)
 801174c:	79bb      	ldrb	r3, [r7, #6]
 801174e:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011752:	79bb      	ldrb	r3, [r7, #6]
 8011754:	4618      	mov	r0, r3
 8011756:	f004 fdd7 	bl	8016308 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 801175a:	4a08      	ldr	r2, [pc, #32]	; (801177c <HandleRadioRxErrorTimeout+0x114>)
 801175c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011760:	f043 0310 	orr.w	r3, r3, #16
 8011764:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8011768:	f7ff f95c 	bl	8010a24 <UpdateRxSlotIdleState>
}
 801176c:	bf00      	nop
 801176e:	3710      	adds	r7, #16
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	20000bf0 	.word	0x20000bf0
 8011778:	08020e4c 	.word	0x08020e4c
 801177c:	200006d4 	.word	0x200006d4
 8011780:	20000a6c 	.word	0x20000a6c

08011784 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011784:	b580      	push	{r7, lr}
 8011786:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011788:	2106      	movs	r1, #6
 801178a:	2005      	movs	r0, #5
 801178c:	f7ff ff6c 	bl	8011668 <HandleRadioRxErrorTimeout>
}
 8011790:	bf00      	nop
 8011792:	bd80      	pop	{r7, pc}

08011794 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011794:	b580      	push	{r7, lr}
 8011796:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011798:	2104      	movs	r1, #4
 801179a:	2003      	movs	r0, #3
 801179c:	f7ff ff64 	bl	8011668 <HandleRadioRxErrorTimeout>
}
 80117a0:	bf00      	nop
 80117a2:	bd80      	pop	{r7, pc}

080117a4 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b084      	sub	sp, #16
 80117a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117aa:	f3ef 8310 	mrs	r3, PRIMASK
 80117ae:	607b      	str	r3, [r7, #4]
  return(result);
 80117b0:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 80117b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80117b4:	b672      	cpsid	i
}
 80117b6:	bf00      	nop
    events = LoRaMacRadioEvents;
 80117b8:	4b1d      	ldr	r3, [pc, #116]	; (8011830 <LoRaMacHandleIrqEvents+0x8c>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 80117be:	4b1c      	ldr	r3, [pc, #112]	; (8011830 <LoRaMacHandleIrqEvents+0x8c>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	601a      	str	r2, [r3, #0]
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	f383 8810 	msr	PRIMASK, r3
}
 80117ce:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 80117d0:	683b      	ldr	r3, [r7, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d027      	beq.n	8011826 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 80117d6:	783b      	ldrb	r3, [r7, #0]
 80117d8:	f003 0320 	and.w	r3, r3, #32
 80117dc:	b2db      	uxtb	r3, r3
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d001      	beq.n	80117e6 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 80117e2:	f7ff f937 	bl	8010a54 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 80117e6:	783b      	ldrb	r3, [r7, #0]
 80117e8:	f003 0310 	and.w	r3, r3, #16
 80117ec:	b2db      	uxtb	r3, r3
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 80117f2:	f7ff f9fb 	bl	8010bec <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 80117f6:	783b      	ldrb	r3, [r7, #0]
 80117f8:	f003 0308 	and.w	r3, r3, #8
 80117fc:	b2db      	uxtb	r3, r3
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d001      	beq.n	8011806 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011802:	f7ff ff05 	bl	8011610 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011806:	783b      	ldrb	r3, [r7, #0]
 8011808:	f003 0304 	and.w	r3, r3, #4
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	d001      	beq.n	8011816 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011812:	f7ff ffb7 	bl	8011784 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011816:	783b      	ldrb	r3, [r7, #0]
 8011818:	f003 0302 	and.w	r3, r3, #2
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b00      	cmp	r3, #0
 8011820:	d001      	beq.n	8011826 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011822:	f7ff ffb7 	bl	8011794 <ProcessRadioRxTimeout>
        }
    }
}
 8011826:	bf00      	nop
 8011828:	3710      	adds	r7, #16
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
 801182e:	bf00      	nop
 8011830:	20001818 	.word	0x20001818

08011834 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011834:	b480      	push	{r7}
 8011836:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011838:	4b10      	ldr	r3, [pc, #64]	; (801187c <LoRaMacIsBusy+0x48>)
 801183a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801183e:	2b01      	cmp	r3, #1
 8011840:	d101      	bne.n	8011846 <LoRaMacIsBusy+0x12>
    {
        return false;
 8011842:	2300      	movs	r3, #0
 8011844:	e015      	b.n	8011872 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8011846:	4b0e      	ldr	r3, [pc, #56]	; (8011880 <LoRaMacIsBusy+0x4c>)
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	f003 0301 	and.w	r3, r3, #1
 801184e:	b2db      	uxtb	r3, r3
 8011850:	2b00      	cmp	r3, #0
 8011852:	d001      	beq.n	8011858 <LoRaMacIsBusy+0x24>
    {
        return true;
 8011854:	2301      	movs	r3, #1
 8011856:	e00c      	b.n	8011872 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011858:	4b08      	ldr	r3, [pc, #32]	; (801187c <LoRaMacIsBusy+0x48>)
 801185a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801185e:	2b00      	cmp	r3, #0
 8011860:	d106      	bne.n	8011870 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011862:	4b06      	ldr	r3, [pc, #24]	; (801187c <LoRaMacIsBusy+0x48>)
 8011864:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011868:	2b01      	cmp	r3, #1
 801186a:	d101      	bne.n	8011870 <LoRaMacIsBusy+0x3c>
    {
        return false;
 801186c:	2300      	movs	r3, #0
 801186e:	e000      	b.n	8011872 <LoRaMacIsBusy+0x3e>
    }
    return true;
 8011870:	2301      	movs	r3, #1
}
 8011872:	4618      	mov	r0, r3
 8011874:	46bd      	mov	sp, r7
 8011876:	bc80      	pop	{r7}
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	200006d4 	.word	0x200006d4
 8011880:	20001818 	.word	0x20001818

08011884 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011884:	b480      	push	{r7}
 8011886:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011888:	4b05      	ldr	r3, [pc, #20]	; (80118a0 <LoRaMacIsStopped+0x1c>)
 801188a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801188e:	2b01      	cmp	r3, #1
 8011890:	d101      	bne.n	8011896 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011892:	2301      	movs	r3, #1
 8011894:	e000      	b.n	8011898 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011896:	2300      	movs	r3, #0
}
 8011898:	4618      	mov	r0, r3
 801189a:	46bd      	mov	sp, r7
 801189c:	bc80      	pop	{r7}
 801189e:	4770      	bx	lr
 80118a0:	200006d4 	.word	0x200006d4

080118a4 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	4603      	mov	r3, r0
 80118ac:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 80118ae:	4a04      	ldr	r2, [pc, #16]	; (80118c0 <LoRaMacEnableRequests+0x1c>)
 80118b0:	79fb      	ldrb	r3, [r7, #7]
 80118b2:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 80118b6:	bf00      	nop
 80118b8:	370c      	adds	r7, #12
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bc80      	pop	{r7}
 80118be:	4770      	bx	lr
 80118c0:	200006d4 	.word	0x200006d4

080118c4 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 80118ca:	4b2c      	ldr	r3, [pc, #176]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 80118cc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80118d0:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 80118d2:	4b2a      	ldr	r3, [pc, #168]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 80118d4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d14a      	bne.n	8011972 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80118dc:	4b27      	ldr	r3, [pc, #156]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 80118de:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80118e2:	f003 0301 	and.w	r3, r3, #1
 80118e6:	b2db      	uxtb	r3, r3
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d006      	beq.n	80118fa <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 80118ec:	4a23      	ldr	r2, [pc, #140]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 80118ee:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80118f2:	f36f 0300 	bfc	r3, #0, #1
 80118f6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80118fa:	4b20      	ldr	r3, [pc, #128]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 80118fc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011900:	f003 0304 	and.w	r3, r3, #4
 8011904:	b2db      	uxtb	r3, r3
 8011906:	2b00      	cmp	r3, #0
 8011908:	d006      	beq.n	8011918 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801190a:	4a1c      	ldr	r2, [pc, #112]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 801190c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011910:	f36f 0382 	bfc	r3, #2, #1
 8011914:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011918:	2001      	movs	r0, #1
 801191a:	f7ff ffc3 	bl	80118a4 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 801191e:	793b      	ldrb	r3, [r7, #4]
 8011920:	f003 0301 	and.w	r3, r3, #1
 8011924:	b2db      	uxtb	r3, r3
 8011926:	2b00      	cmp	r3, #0
 8011928:	d005      	beq.n	8011936 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 801192a:	4b14      	ldr	r3, [pc, #80]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 801192c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	4813      	ldr	r0, [pc, #76]	; (8011980 <LoRaMacHandleRequestEvents+0xbc>)
 8011934:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011936:	793b      	ldrb	r3, [r7, #4]
 8011938:	f003 0304 	and.w	r3, r3, #4
 801193c:	b2db      	uxtb	r3, r3
 801193e:	2b00      	cmp	r3, #0
 8011940:	d00e      	beq.n	8011960 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011942:	4810      	ldr	r0, [pc, #64]	; (8011984 <LoRaMacHandleRequestEvents+0xc0>)
 8011944:	f004 fd2e 	bl	80163a4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011948:	f004 fd7e 	bl	8016448 <LoRaMacConfirmQueueGetCnt>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d006      	beq.n	8011960 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011952:	4a0a      	ldr	r2, [pc, #40]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 8011954:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011958:	f043 0304 	orr.w	r3, r3, #4
 801195c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011960:	f004 f828 	bl	80159b4 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011964:	4a05      	ldr	r2, [pc, #20]	; (801197c <LoRaMacHandleRequestEvents+0xb8>)
 8011966:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801196a:	f36f 1304 	bfc	r3, #4, #1
 801196e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8011972:	bf00      	nop
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	200006d4 	.word	0x200006d4
 8011980:	20000b14 	.word	0x20000b14
 8011984:	20000b28 	.word	0x20000b28

08011988 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011988:	b580      	push	{r7, lr}
 801198a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 801198c:	4b16      	ldr	r3, [pc, #88]	; (80119e8 <LoRaMacHandleIndicationEvents+0x60>)
 801198e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011992:	f003 0308 	and.w	r3, r3, #8
 8011996:	b2db      	uxtb	r3, r3
 8011998:	2b00      	cmp	r3, #0
 801199a:	d00d      	beq.n	80119b8 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 801199c:	4a12      	ldr	r2, [pc, #72]	; (80119e8 <LoRaMacHandleIndicationEvents+0x60>)
 801199e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80119a2:	f36f 03c3 	bfc	r3, #3, #1
 80119a6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80119aa:	4b0f      	ldr	r3, [pc, #60]	; (80119e8 <LoRaMacHandleIndicationEvents+0x60>)
 80119ac:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80119b0:	68db      	ldr	r3, [r3, #12]
 80119b2:	490e      	ldr	r1, [pc, #56]	; (80119ec <LoRaMacHandleIndicationEvents+0x64>)
 80119b4:	480e      	ldr	r0, [pc, #56]	; (80119f0 <LoRaMacHandleIndicationEvents+0x68>)
 80119b6:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80119b8:	4b0b      	ldr	r3, [pc, #44]	; (80119e8 <LoRaMacHandleIndicationEvents+0x60>)
 80119ba:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80119be:	f003 0302 	and.w	r3, r3, #2
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d00d      	beq.n	80119e4 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80119c8:	4a07      	ldr	r2, [pc, #28]	; (80119e8 <LoRaMacHandleIndicationEvents+0x60>)
 80119ca:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80119ce:	f36f 0341 	bfc	r3, #1, #1
 80119d2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80119d6:	4b04      	ldr	r3, [pc, #16]	; (80119e8 <LoRaMacHandleIndicationEvents+0x60>)
 80119d8:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	4903      	ldr	r1, [pc, #12]	; (80119ec <LoRaMacHandleIndicationEvents+0x64>)
 80119e0:	4804      	ldr	r0, [pc, #16]	; (80119f4 <LoRaMacHandleIndicationEvents+0x6c>)
 80119e2:	4798      	blx	r3
    }
}
 80119e4:	bf00      	nop
 80119e6:	bd80      	pop	{r7, pc}
 80119e8:	200006d4 	.word	0x200006d4
 80119ec:	20000b60 	.word	0x20000b60
 80119f0:	20000b3c 	.word	0x20000b3c
 80119f4:	20000af4 	.word	0x20000af4

080119f8 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80119fe:	4b2a      	ldr	r3, [pc, #168]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a00:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011a04:	f003 0301 	and.w	r3, r3, #1
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d048      	beq.n	8011aa0 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011a12:	2300      	movs	r3, #0
 8011a14:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011a16:	4b24      	ldr	r3, [pc, #144]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a18:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d004      	beq.n	8011a2a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011a20:	4b21      	ldr	r3, [pc, #132]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a22:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011a26:	2b03      	cmp	r3, #3
 8011a28:	d104      	bne.n	8011a34 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011a2a:	f002 f943 	bl	8013cb4 <CheckRetransUnconfirmedUplink>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	71fb      	strb	r3, [r7, #7]
 8011a32:	e010      	b.n	8011a56 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011a34:	4b1c      	ldr	r3, [pc, #112]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a36:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d10b      	bne.n	8011a56 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8011a3e:	4b1a      	ldr	r3, [pc, #104]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a40:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d004      	beq.n	8011a52 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011a48:	f002 f960 	bl	8013d0c <CheckRetransConfirmedUplink>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	71fb      	strb	r3, [r7, #7]
 8011a50:	e001      	b.n	8011a56 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8011a52:	2301      	movs	r3, #1
 8011a54:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011a56:	79fb      	ldrb	r3, [r7, #7]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d00d      	beq.n	8011a78 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011a5c:	4813      	ldr	r0, [pc, #76]	; (8011aac <LoRaMacHandleMcpsRequest+0xb4>)
 8011a5e:	f00d fd5f 	bl	801f520 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011a62:	4b11      	ldr	r3, [pc, #68]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a64:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a68:	f023 0320 	bic.w	r3, r3, #32
 8011a6c:	4a0e      	ldr	r2, [pc, #56]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a6e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011a72:	f002 f985 	bl	8013d80 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011a76:	e013      	b.n	8011aa0 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8011a78:	79bb      	ldrb	r3, [r7, #6]
 8011a7a:	f083 0301 	eor.w	r3, r3, #1
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d00d      	beq.n	8011aa0 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011a84:	4a08      	ldr	r2, [pc, #32]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a86:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011a8a:	f36f 1304 	bfc	r3, #4, #1
 8011a8e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8011a92:	4b05      	ldr	r3, [pc, #20]	; (8011aa8 <LoRaMacHandleMcpsRequest+0xb0>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8011a9a:	2000      	movs	r0, #0
 8011a9c:	f000 f9c8 	bl	8011e30 <OnTxDelayedTimerEvent>
}
 8011aa0:	bf00      	nop
 8011aa2:	3708      	adds	r7, #8
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}
 8011aa8:	200006d4 	.word	0x200006d4
 8011aac:	20000a3c 	.word	0x20000a3c

08011ab0 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011ab4:	4b18      	ldr	r3, [pc, #96]	; (8011b18 <LoRaMacHandleMlmeRequest+0x68>)
 8011ab6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011aba:	f003 0304 	and.w	r3, r3, #4
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d026      	beq.n	8011b12 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011ac4:	2001      	movs	r0, #1
 8011ac6:	f004 fc53 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 8011aca:	4603      	mov	r3, r0
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d012      	beq.n	8011af6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011ad0:	2001      	movs	r0, #1
 8011ad2:	f004 fbef 	bl	80162b4 <LoRaMacConfirmQueueGetStatus>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d103      	bne.n	8011ae4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011adc:	4b0e      	ldr	r3, [pc, #56]	; (8011b18 <LoRaMacHandleMlmeRequest+0x68>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011ae4:	4b0c      	ldr	r3, [pc, #48]	; (8011b18 <LoRaMacHandleMlmeRequest+0x68>)
 8011ae6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011aea:	f023 0302 	bic.w	r3, r3, #2
 8011aee:	4a0a      	ldr	r2, [pc, #40]	; (8011b18 <LoRaMacHandleMlmeRequest+0x68>)
 8011af0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011af4:	e00d      	b.n	8011b12 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8011af6:	2006      	movs	r0, #6
 8011af8:	f004 fc3a 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 8011afc:	4603      	mov	r3, r0
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d007      	beq.n	8011b12 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011b02:	4b05      	ldr	r3, [pc, #20]	; (8011b18 <LoRaMacHandleMlmeRequest+0x68>)
 8011b04:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b08:	f023 0302 	bic.w	r3, r3, #2
 8011b0c:	4a02      	ldr	r2, [pc, #8]	; (8011b18 <LoRaMacHandleMlmeRequest+0x68>)
 8011b0e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011b12:	bf00      	nop
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	200006d4 	.word	0x200006d4

08011b1c <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011b20:	200b      	movs	r0, #11
 8011b22:	f004 fc25 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d019      	beq.n	8011b60 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011b2c:	4b0e      	ldr	r3, [pc, #56]	; (8011b68 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011b2e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011b32:	f003 0301 	and.w	r3, r3, #1
 8011b36:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d111      	bne.n	8011b60 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011b3c:	4b0a      	ldr	r3, [pc, #40]	; (8011b68 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011b3e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011b42:	f003 0304 	and.w	r3, r3, #4
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d009      	beq.n	8011b60 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011b4c:	4b06      	ldr	r3, [pc, #24]	; (8011b68 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011b4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b52:	f023 0302 	bic.w	r3, r3, #2
 8011b56:	4a04      	ldr	r2, [pc, #16]	; (8011b68 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011b58:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	e000      	b.n	8011b62 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011b60:	2300      	movs	r3, #0
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	200006d4 	.word	0x200006d4

08011b6c <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	4603      	mov	r3, r0
 8011b74:	71fb      	strb	r3, [r7, #7]
 8011b76:	460b      	mov	r3, r1
 8011b78:	71bb      	strb	r3, [r7, #6]
 8011b7a:	4613      	mov	r3, r2
 8011b7c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8011b7e:	79fb      	ldrb	r3, [r7, #7]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00a      	beq.n	8011b9a <CheckForMinimumAbpDatarate+0x2e>
 8011b84:	79bb      	ldrb	r3, [r7, #6]
 8011b86:	2b01      	cmp	r3, #1
 8011b88:	d107      	bne.n	8011b9a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 8011b8a:	797b      	ldrb	r3, [r7, #5]
 8011b8c:	f083 0301 	eor.w	r3, r3, #1
 8011b90:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d001      	beq.n	8011b9a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 8011b96:	2301      	movs	r3, #1
 8011b98:	e000      	b.n	8011b9c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 8011b9a:	2300      	movs	r3, #0
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bc80      	pop	{r7}
 8011ba4:	4770      	bx	lr
	...

08011ba8 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011ba8:	b480      	push	{r7}
 8011baa:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011bac:	4b0d      	ldr	r3, [pc, #52]	; (8011be4 <LoRaMacCheckForRxAbort+0x3c>)
 8011bae:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d00f      	beq.n	8011bda <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011bba:	4b0a      	ldr	r3, [pc, #40]	; (8011be4 <LoRaMacCheckForRxAbort+0x3c>)
 8011bbc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011bc4:	4a07      	ldr	r2, [pc, #28]	; (8011be4 <LoRaMacCheckForRxAbort+0x3c>)
 8011bc6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011bca:	4b06      	ldr	r3, [pc, #24]	; (8011be4 <LoRaMacCheckForRxAbort+0x3c>)
 8011bcc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bd0:	f023 0302 	bic.w	r3, r3, #2
 8011bd4:	4a03      	ldr	r2, [pc, #12]	; (8011be4 <LoRaMacCheckForRxAbort+0x3c>)
 8011bd6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011bda:	bf00      	nop
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bc80      	pop	{r7}
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	200006d4 	.word	0x200006d4

08011be8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b084      	sub	sp, #16
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011bf8:	4b51      	ldr	r3, [pc, #324]	; (8011d40 <LoRaMacHandleNvm+0x158>)
 8011bfa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	f040 8099 	bne.w	8011d36 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2124      	movs	r1, #36	; 0x24
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f009 fc81 	bl	801b510 <Crc32>
 8011c0e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c14:	68ba      	ldr	r2, [r7, #8]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d006      	beq.n	8011c28 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	68ba      	ldr	r2, [r7, #8]
 8011c1e:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011c20:	89fb      	ldrh	r3, [r7, #14]
 8011c22:	f043 0301 	orr.w	r3, r3, #1
 8011c26:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	3328      	adds	r3, #40	; 0x28
 8011c2c:	211c      	movs	r1, #28
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f009 fc6e 	bl	801b510 <Crc32>
 8011c34:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c3a:	68ba      	ldr	r2, [r7, #8]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d006      	beq.n	8011c4e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	68ba      	ldr	r2, [r7, #8]
 8011c44:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011c46:	89fb      	ldrh	r3, [r7, #14]
 8011c48:	f043 0302 	orr.w	r3, r3, #2
 8011c4c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	3348      	adds	r3, #72	; 0x48
 8011c52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011c56:	4618      	mov	r0, r3
 8011c58:	f009 fc5a 	bl	801b510 <Crc32>
 8011c5c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011c64:	68ba      	ldr	r2, [r7, #8]
 8011c66:	429a      	cmp	r2, r3
 8011c68:	d007      	beq.n	8011c7a <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011c72:	89fb      	ldrh	r3, [r7, #14]
 8011c74:	f043 0304 	orr.w	r3, r3, #4
 8011c78:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8011c80:	21d4      	movs	r1, #212	; 0xd4
 8011c82:	4618      	mov	r0, r3
 8011c84:	f009 fc44 	bl	801b510 <Crc32>
 8011c88:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d007      	beq.n	8011ca6 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	68ba      	ldr	r2, [r7, #8]
 8011c9a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011c9e:	89fb      	ldrh	r3, [r7, #14]
 8011ca0:	f043 0308 	orr.w	r3, r3, #8
 8011ca4:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011cac:	2110      	movs	r1, #16
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f009 fc2e 	bl	801b510 <Crc32>
 8011cb4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8011cbc:	68ba      	ldr	r2, [r7, #8]
 8011cbe:	429a      	cmp	r2, r3
 8011cc0:	d007      	beq.n	8011cd2 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	68ba      	ldr	r2, [r7, #8]
 8011cc6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011cca:	89fb      	ldrh	r3, [r7, #14]
 8011ccc:	f043 0310 	orr.w	r3, r3, #16
 8011cd0:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8011cd8:	f44f 715e 	mov.w	r1, #888	; 0x378
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f009 fc17 	bl	801b510 <Crc32>
 8011ce2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8011cea:	68ba      	ldr	r2, [r7, #8]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d007      	beq.n	8011d00 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	68ba      	ldr	r2, [r7, #8]
 8011cf4:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011cf8:	89fb      	ldrh	r3, [r7, #14]
 8011cfa:	f043 0320 	orr.w	r3, r3, #32
 8011cfe:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8011d06:	2114      	movs	r1, #20
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f009 fc01 	bl	801b510 <Crc32>
 8011d0e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8011d16:	68ba      	ldr	r2, [r7, #8]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d007      	beq.n	8011d2c <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	68ba      	ldr	r2, [r7, #8]
 8011d20:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011d24:	89fb      	ldrh	r3, [r7, #14]
 8011d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d2a:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011d2c:	89fb      	ldrh	r3, [r7, #14]
 8011d2e:	4618      	mov	r0, r3
 8011d30:	f002 f878 	bl	8013e24 <CallNvmDataChangeCallback>
 8011d34:	e000      	b.n	8011d38 <LoRaMacHandleNvm+0x150>
        return;
 8011d36:	bf00      	nop
}
 8011d38:	3710      	adds	r7, #16
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	200006d4 	.word	0x200006d4

08011d44 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b084      	sub	sp, #16
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d00d      	beq.n	8011d70 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8011d54:	6838      	ldr	r0, [r7, #0]
 8011d56:	f00d fd0f 	bl	801f778 <UTIL_TIMER_GetElapsedTime>
 8011d5a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8011d5c:	68fa      	ldr	r2, [r7, #12]
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d905      	bls.n	8011d70 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8011d64:	4b05      	ldr	r3, [pc, #20]	; (8011d7c <LoRaMacHandleResponseTimeout+0x38>)
 8011d66:	2200      	movs	r2, #0
 8011d68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	e000      	b.n	8011d72 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8011d70:	2300      	movs	r3, #0
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3710      	adds	r7, #16
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20000bf0 	.word	0x20000bf0

08011d80 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011d86:	2300      	movs	r3, #0
 8011d88:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011d8a:	f7ff fd0b 	bl	80117a4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011d8e:	f003 fe80 	bl	8015a92 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011d92:	4b25      	ldr	r3, [pc, #148]	; (8011e28 <LoRaMacProcess+0xa8>)
 8011d94:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011d98:	f003 0310 	and.w	r3, r3, #16
 8011d9c:	b2db      	uxtb	r3, r3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d023      	beq.n	8011dea <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011da2:	2000      	movs	r0, #0
 8011da4:	f7ff fd7e 	bl	80118a4 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011da8:	f7ff fefe 	bl	8011ba8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011dac:	f002 f858 	bl	8013e60 <IsRequestPending>
 8011db0:	4603      	mov	r3, r0
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d006      	beq.n	8011dc4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011db6:	f7ff feb1 	bl	8011b1c <LoRaMacCheckForBeaconAcquisition>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	79fb      	ldrb	r3, [r7, #7]
 8011dc0:	4313      	orrs	r3, r2
 8011dc2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011dc4:	79fb      	ldrb	r3, [r7, #7]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d103      	bne.n	8011dd2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011dca:	f7ff fe71 	bl	8011ab0 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011dce:	f7ff fe13 	bl	80119f8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011dd2:	f7ff fd77 	bl	80118c4 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011dd6:	2001      	movs	r0, #1
 8011dd8:	f7ff fd64 	bl	80118a4 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011ddc:	4a12      	ldr	r2, [pc, #72]	; (8011e28 <LoRaMacProcess+0xa8>)
 8011dde:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011de2:	f043 0320 	orr.w	r3, r3, #32
 8011de6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 8011dea:	f7ff fdcd 	bl	8011988 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011dee:	4b0e      	ldr	r3, [pc, #56]	; (8011e28 <LoRaMacProcess+0xa8>)
 8011df0:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011df4:	2b02      	cmp	r3, #2
 8011df6:	d101      	bne.n	8011dfc <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8011df8:	f001 fc1a 	bl	8013630 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011dfc:	4b0a      	ldr	r3, [pc, #40]	; (8011e28 <LoRaMacProcess+0xa8>)
 8011dfe:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011e02:	f003 0320 	and.w	r3, r3, #32
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d009      	beq.n	8011e20 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8011e0c:	4a06      	ldr	r2, [pc, #24]	; (8011e28 <LoRaMacProcess+0xa8>)
 8011e0e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8011e12:	f36f 1345 	bfc	r3, #5, #1
 8011e16:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 8011e1a:	4804      	ldr	r0, [pc, #16]	; (8011e2c <LoRaMacProcess+0xac>)
 8011e1c:	f7ff fee4 	bl	8011be8 <LoRaMacHandleNvm>
    }
}
 8011e20:	bf00      	nop
 8011e22:	3708      	adds	r7, #8
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}
 8011e28:	200006d4 	.word	0x200006d4
 8011e2c:	20000bf0 	.word	0x20000bf0

08011e30 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8011e38:	481e      	ldr	r0, [pc, #120]	; (8011eb4 <OnTxDelayedTimerEvent+0x84>)
 8011e3a:	f00d fb71 	bl	801f520 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011e3e:	4b1e      	ldr	r3, [pc, #120]	; (8011eb8 <OnTxDelayedTimerEvent+0x88>)
 8011e40:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e44:	f023 0320 	bic.w	r3, r3, #32
 8011e48:	4a1b      	ldr	r2, [pc, #108]	; (8011eb8 <OnTxDelayedTimerEvent+0x88>)
 8011e4a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8011e4e:	4b1b      	ldr	r3, [pc, #108]	; (8011ebc <OnTxDelayedTimerEvent+0x8c>)
 8011e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e54:	4a18      	ldr	r2, [pc, #96]	; (8011eb8 <OnTxDelayedTimerEvent+0x88>)
 8011e56:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8011e5a:	4611      	mov	r1, r2
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7ff ff71 	bl	8011d44 <LoRaMacHandleResponseTimeout>
 8011e62:	4603      	mov	r3, r0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d11e      	bne.n	8011ea6 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8011e68:	2001      	movs	r0, #1
 8011e6a:	f001 f92b 	bl	80130c4 <ScheduleTx>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d01a      	beq.n	8011eaa <OnTxDelayedTimerEvent+0x7a>
 8011e74:	2b0b      	cmp	r3, #11
 8011e76:	d018      	beq.n	8011eaa <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011e78:	4b10      	ldr	r3, [pc, #64]	; (8011ebc <OnTxDelayedTimerEvent+0x8c>)
 8011e7a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011e7e:	b2da      	uxtb	r2, r3
 8011e80:	4b0d      	ldr	r3, [pc, #52]	; (8011eb8 <OnTxDelayedTimerEvent+0x88>)
 8011e82:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011e86:	4b0c      	ldr	r3, [pc, #48]	; (8011eb8 <OnTxDelayedTimerEvent+0x88>)
 8011e88:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8011e8c:	4b0a      	ldr	r3, [pc, #40]	; (8011eb8 <OnTxDelayedTimerEvent+0x88>)
 8011e8e:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8011e92:	4b09      	ldr	r3, [pc, #36]	; (8011eb8 <OnTxDelayedTimerEvent+0x88>)
 8011e94:	2209      	movs	r2, #9
 8011e96:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8011e9a:	2009      	movs	r0, #9
 8011e9c:	f004 fa34 	bl	8016308 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8011ea0:	f001 ff6e 	bl	8013d80 <StopRetransmission>
            break;
 8011ea4:	e002      	b.n	8011eac <OnTxDelayedTimerEvent+0x7c>
        return;
 8011ea6:	bf00      	nop
 8011ea8:	e000      	b.n	8011eac <OnTxDelayedTimerEvent+0x7c>
            break;
 8011eaa:	bf00      	nop
        }
    }
}
 8011eac:	3708      	adds	r7, #8
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	20000a3c 	.word	0x20000a3c
 8011eb8:	200006d4 	.word	0x200006d4
 8011ebc:	20000bf0 	.word	0x20000bf0

08011ec0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b082      	sub	sp, #8
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8011ec8:	4b17      	ldr	r3, [pc, #92]	; (8011f28 <OnRxWindow1TimerEvent+0x68>)
 8011eca:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011ece:	4b16      	ldr	r3, [pc, #88]	; (8011f28 <OnRxWindow1TimerEvent+0x68>)
 8011ed0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8011ed4:	4b15      	ldr	r3, [pc, #84]	; (8011f2c <OnRxWindow1TimerEvent+0x6c>)
 8011ed6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8011eda:	b25a      	sxtb	r2, r3
 8011edc:	4b12      	ldr	r3, [pc, #72]	; (8011f28 <OnRxWindow1TimerEvent+0x68>)
 8011ede:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011ee2:	4b12      	ldr	r3, [pc, #72]	; (8011f2c <OnRxWindow1TimerEvent+0x6c>)
 8011ee4:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011ee8:	4b0f      	ldr	r3, [pc, #60]	; (8011f28 <OnRxWindow1TimerEvent+0x68>)
 8011eea:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011eee:	4b0f      	ldr	r3, [pc, #60]	; (8011f2c <OnRxWindow1TimerEvent+0x6c>)
 8011ef0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011ef4:	4b0c      	ldr	r3, [pc, #48]	; (8011f28 <OnRxWindow1TimerEvent+0x68>)
 8011ef6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8011efa:	4b0b      	ldr	r3, [pc, #44]	; (8011f28 <OnRxWindow1TimerEvent+0x68>)
 8011efc:	2200      	movs	r2, #0
 8011efe:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 8011f02:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <OnRxWindow1TimerEvent+0x68>)
 8011f04:	2200      	movs	r2, #0
 8011f06:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011f0a:	4b08      	ldr	r3, [pc, #32]	; (8011f2c <OnRxWindow1TimerEvent+0x6c>)
 8011f0c:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011f10:	4b05      	ldr	r3, [pc, #20]	; (8011f28 <OnRxWindow1TimerEvent+0x68>)
 8011f12:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8011f16:	4906      	ldr	r1, [pc, #24]	; (8011f30 <OnRxWindow1TimerEvent+0x70>)
 8011f18:	4806      	ldr	r0, [pc, #24]	; (8011f34 <OnRxWindow1TimerEvent+0x74>)
 8011f1a:	f001 fb55 	bl	80135c8 <RxWindowSetup>
}
 8011f1e:	bf00      	nop
 8011f20:	3708      	adds	r7, #8
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	200006d4 	.word	0x200006d4
 8011f2c:	20000bf0 	.word	0x20000bf0
 8011f30:	20000a8c 	.word	0x20000a8c
 8011f34:	20000a54 	.word	0x20000a54

08011f38 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011f40:	4b19      	ldr	r3, [pc, #100]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f42:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d029      	beq.n	8011f9e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8011f4a:	4b17      	ldr	r3, [pc, #92]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f4c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011f50:	4b15      	ldr	r3, [pc, #84]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f52:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8011f56:	4b15      	ldr	r3, [pc, #84]	; (8011fac <OnRxWindow2TimerEvent+0x74>)
 8011f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f5a:	4a13      	ldr	r2, [pc, #76]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f5c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011f60:	4b12      	ldr	r3, [pc, #72]	; (8011fac <OnRxWindow2TimerEvent+0x74>)
 8011f62:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011f66:	4b10      	ldr	r3, [pc, #64]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f68:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011f6c:	4b0f      	ldr	r3, [pc, #60]	; (8011fac <OnRxWindow2TimerEvent+0x74>)
 8011f6e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011f72:	4b0d      	ldr	r3, [pc, #52]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f74:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011f78:	4b0b      	ldr	r3, [pc, #44]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011f80:	4b09      	ldr	r3, [pc, #36]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f82:	2201      	movs	r2, #1
 8011f84:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011f88:	4b08      	ldr	r3, [pc, #32]	; (8011fac <OnRxWindow2TimerEvent+0x74>)
 8011f8a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011f8e:	4b06      	ldr	r3, [pc, #24]	; (8011fa8 <OnRxWindow2TimerEvent+0x70>)
 8011f90:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011f94:	4906      	ldr	r1, [pc, #24]	; (8011fb0 <OnRxWindow2TimerEvent+0x78>)
 8011f96:	4807      	ldr	r0, [pc, #28]	; (8011fb4 <OnRxWindow2TimerEvent+0x7c>)
 8011f98:	f001 fb16 	bl	80135c8 <RxWindowSetup>
 8011f9c:	e000      	b.n	8011fa0 <OnRxWindow2TimerEvent+0x68>
        return;
 8011f9e:	bf00      	nop
}
 8011fa0:	3708      	adds	r7, #8
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	200006d4 	.word	0x200006d4
 8011fac:	20000bf0 	.word	0x20000bf0
 8011fb0:	20000aa4 	.word	0x20000aa4
 8011fb4:	20000a6c 	.word	0x20000a6c

08011fb8 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011fc0:	4808      	ldr	r0, [pc, #32]	; (8011fe4 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8011fc2:	f00d faad 	bl	801f520 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8011fc6:	4b08      	ldr	r3, [pc, #32]	; (8011fe8 <OnRetransmitTimeoutTimerEvent+0x30>)
 8011fc8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d003      	beq.n	8011fd8 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8011fd0:	4b05      	ldr	r3, [pc, #20]	; (8011fe8 <OnRetransmitTimeoutTimerEvent+0x30>)
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 8011fd8:	f001 ff0e 	bl	8013df8 <OnMacProcessNotify>
}
 8011fdc:	bf00      	nop
 8011fde:	3708      	adds	r7, #8
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	bd80      	pop	{r7, pc}
 8011fe4:	20000ad4 	.word	0x20000ad4
 8011fe8:	200006d4 	.word	0x200006d4

08011fec <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	60ba      	str	r2, [r7, #8]
 8011ff4:	607b      	str	r3, [r7, #4]
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	73fb      	strb	r3, [r7, #15]
 8011ffa:	460b      	mov	r3, r1
 8011ffc:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d005      	beq.n	8012010 <GetFCntDown+0x24>
 8012004:	69bb      	ldr	r3, [r7, #24]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d002      	beq.n	8012010 <GetFCntDown+0x24>
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d101      	bne.n	8012014 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012010:	2309      	movs	r3, #9
 8012012:	e028      	b.n	8012066 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012014:	7bfb      	ldrb	r3, [r7, #15]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d016      	beq.n	8012048 <GetFCntDown+0x5c>
 801201a:	2b01      	cmp	r3, #1
 801201c:	d118      	bne.n	8012050 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801201e:	79bb      	ldrb	r3, [r7, #6]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d10d      	bne.n	8012040 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012024:	7bbb      	ldrb	r3, [r7, #14]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d002      	beq.n	8012030 <GetFCntDown+0x44>
 801202a:	7bbb      	ldrb	r3, [r7, #14]
 801202c:	2b03      	cmp	r3, #3
 801202e:	d103      	bne.n	8012038 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012030:	69bb      	ldr	r3, [r7, #24]
 8012032:	2202      	movs	r2, #2
 8012034:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8012036:	e00d      	b.n	8012054 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	2201      	movs	r2, #1
 801203c:	701a      	strb	r2, [r3, #0]
            break;
 801203e:	e009      	b.n	8012054 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	2203      	movs	r2, #3
 8012044:	701a      	strb	r2, [r3, #0]
            break;
 8012046:	e005      	b.n	8012054 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012048:	69bb      	ldr	r3, [r7, #24]
 801204a:	2204      	movs	r2, #4
 801204c:	701a      	strb	r2, [r3, #0]
            break;
 801204e:	e001      	b.n	8012054 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012050:	2305      	movs	r3, #5
 8012052:	e008      	b.n	8012066 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8012054:	69bb      	ldr	r3, [r7, #24]
 8012056:	7818      	ldrb	r0, [r3, #0]
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	89db      	ldrh	r3, [r3, #14]
 801205c:	69fa      	ldr	r2, [r7, #28]
 801205e:	4619      	mov	r1, r3
 8012060:	f004 fd90 	bl	8016b84 <LoRaMacCryptoGetFCntDown>
 8012064:	4603      	mov	r3, r0
}
 8012066:	4618      	mov	r0, r3
 8012068:	3710      	adds	r7, #16
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
	...

08012070 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012070:	b5b0      	push	{r4, r5, r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	4603      	mov	r3, r0
 8012078:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801207a:	2303      	movs	r3, #3
 801207c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801207e:	4b6e      	ldr	r3, [pc, #440]	; (8012238 <SwitchClass+0x1c8>)
 8012080:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012084:	2b02      	cmp	r3, #2
 8012086:	f000 80bb 	beq.w	8012200 <SwitchClass+0x190>
 801208a:	2b02      	cmp	r3, #2
 801208c:	f300 80ce 	bgt.w	801222c <SwitchClass+0x1bc>
 8012090:	2b00      	cmp	r3, #0
 8012092:	d003      	beq.n	801209c <SwitchClass+0x2c>
 8012094:	2b01      	cmp	r3, #1
 8012096:	f000 80a5 	beq.w	80121e4 <SwitchClass+0x174>
 801209a:	e0c7      	b.n	801222c <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 801209c:	79fb      	ldrb	r3, [r7, #7]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d109      	bne.n	80120b6 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80120a2:	4b65      	ldr	r3, [pc, #404]	; (8012238 <SwitchClass+0x1c8>)
 80120a4:	4a64      	ldr	r2, [pc, #400]	; (8012238 <SwitchClass+0x1c8>)
 80120a6:	3374      	adds	r3, #116	; 0x74
 80120a8:	326c      	adds	r2, #108	; 0x6c
 80120aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80120ae:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80120b2:	2300      	movs	r3, #0
 80120b4:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80120b6:	79fb      	ldrb	r3, [r7, #7]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d10c      	bne.n	80120d6 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80120bc:	79fb      	ldrb	r3, [r7, #7]
 80120be:	4618      	mov	r0, r3
 80120c0:	f003 fc7e 	bl	80159c0 <LoRaMacClassBSwitchClass>
 80120c4:	4603      	mov	r3, r0
 80120c6:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80120c8:	7bfb      	ldrb	r3, [r7, #15]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d103      	bne.n	80120d6 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80120ce:	4a5a      	ldr	r2, [pc, #360]	; (8012238 <SwitchClass+0x1c8>)
 80120d0:	79fb      	ldrb	r3, [r7, #7]
 80120d2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80120d6:	79fb      	ldrb	r3, [r7, #7]
 80120d8:	2b02      	cmp	r3, #2
 80120da:	f040 80a2 	bne.w	8012222 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80120de:	4a56      	ldr	r2, [pc, #344]	; (8012238 <SwitchClass+0x1c8>)
 80120e0:	79fb      	ldrb	r3, [r7, #7]
 80120e2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80120e6:	4a55      	ldr	r2, [pc, #340]	; (801223c <SwitchClass+0x1cc>)
 80120e8:	4b54      	ldr	r3, [pc, #336]	; (801223c <SwitchClass+0x1cc>)
 80120ea:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 80120ee:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 80120f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80120f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80120fa:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80120fe:	4b4f      	ldr	r3, [pc, #316]	; (801223c <SwitchClass+0x1cc>)
 8012100:	2202      	movs	r2, #2
 8012102:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012106:	2300      	movs	r3, #0
 8012108:	73bb      	strb	r3, [r7, #14]
 801210a:	e05b      	b.n	80121c4 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801210c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012110:	4949      	ldr	r1, [pc, #292]	; (8012238 <SwitchClass+0x1c8>)
 8012112:	4613      	mov	r3, r2
 8012114:	005b      	lsls	r3, r3, #1
 8012116:	4413      	add	r3, r2
 8012118:	011b      	lsls	r3, r3, #4
 801211a:	440b      	add	r3, r1
 801211c:	33e9      	adds	r3, #233	; 0xe9
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d049      	beq.n	80121b8 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8012124:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012128:	4943      	ldr	r1, [pc, #268]	; (8012238 <SwitchClass+0x1c8>)
 801212a:	4613      	mov	r3, r2
 801212c:	005b      	lsls	r3, r3, #1
 801212e:	4413      	add	r3, r2
 8012130:	011b      	lsls	r3, r3, #4
 8012132:	440b      	add	r3, r1
 8012134:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012138:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801213a:	2b02      	cmp	r3, #2
 801213c:	d13c      	bne.n	80121b8 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 801213e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012142:	493d      	ldr	r1, [pc, #244]	; (8012238 <SwitchClass+0x1c8>)
 8012144:	4613      	mov	r3, r2
 8012146:	005b      	lsls	r3, r3, #1
 8012148:	4413      	add	r3, r2
 801214a:	011b      	lsls	r3, r3, #4
 801214c:	440b      	add	r3, r1
 801214e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	4a38      	ldr	r2, [pc, #224]	; (8012238 <SwitchClass+0x1c8>)
 8012156:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8012158:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801215c:	4936      	ldr	r1, [pc, #216]	; (8012238 <SwitchClass+0x1c8>)
 801215e:	4613      	mov	r3, r2
 8012160:	005b      	lsls	r3, r3, #1
 8012162:	4413      	add	r3, r2
 8012164:	011b      	lsls	r3, r3, #4
 8012166:	440b      	add	r3, r1
 8012168:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801216c:	f993 3000 	ldrsb.w	r3, [r3]
 8012170:	b2da      	uxtb	r2, r3
 8012172:	4b31      	ldr	r3, [pc, #196]	; (8012238 <SwitchClass+0x1c8>)
 8012174:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012178:	4b30      	ldr	r3, [pc, #192]	; (801223c <SwitchClass+0x1cc>)
 801217a:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 801217e:	4b2f      	ldr	r3, [pc, #188]	; (801223c <SwitchClass+0x1cc>)
 8012180:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012184:	4b2c      	ldr	r3, [pc, #176]	; (8012238 <SwitchClass+0x1c8>)
 8012186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012188:	4a2c      	ldr	r2, [pc, #176]	; (801223c <SwitchClass+0x1cc>)
 801218a:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801218e:	4b2a      	ldr	r3, [pc, #168]	; (8012238 <SwitchClass+0x1c8>)
 8012190:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012194:	4b29      	ldr	r3, [pc, #164]	; (801223c <SwitchClass+0x1cc>)
 8012196:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801219a:	4b27      	ldr	r3, [pc, #156]	; (8012238 <SwitchClass+0x1c8>)
 801219c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80121a0:	4b26      	ldr	r3, [pc, #152]	; (801223c <SwitchClass+0x1cc>)
 80121a2:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80121a6:	4b25      	ldr	r3, [pc, #148]	; (801223c <SwitchClass+0x1cc>)
 80121a8:	2203      	movs	r2, #3
 80121aa:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80121ae:	4b23      	ldr	r3, [pc, #140]	; (801223c <SwitchClass+0x1cc>)
 80121b0:	2201      	movs	r2, #1
 80121b2:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 80121b6:	e009      	b.n	80121cc <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80121b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121bc:	b2db      	uxtb	r3, r3
 80121be:	3301      	adds	r3, #1
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	73bb      	strb	r3, [r7, #14]
 80121c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	dd9f      	ble.n	801210c <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80121cc:	4b1b      	ldr	r3, [pc, #108]	; (801223c <SwitchClass+0x1cc>)
 80121ce:	2200      	movs	r2, #0
 80121d0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80121d4:	4b1a      	ldr	r3, [pc, #104]	; (8012240 <SwitchClass+0x1d0>)
 80121d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80121da:	f001 fa29 	bl	8013630 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80121de:	2300      	movs	r3, #0
 80121e0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80121e2:	e01e      	b.n	8012222 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80121e4:	79fb      	ldrb	r3, [r7, #7]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f003 fbea 	bl	80159c0 <LoRaMacClassBSwitchClass>
 80121ec:	4603      	mov	r3, r0
 80121ee:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80121f0:	7bfb      	ldrb	r3, [r7, #15]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d117      	bne.n	8012226 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80121f6:	4a10      	ldr	r2, [pc, #64]	; (8012238 <SwitchClass+0x1c8>)
 80121f8:	79fb      	ldrb	r3, [r7, #7]
 80121fa:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80121fe:	e012      	b.n	8012226 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012200:	79fb      	ldrb	r3, [r7, #7]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d111      	bne.n	801222a <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 8012206:	4b0d      	ldr	r3, [pc, #52]	; (801223c <SwitchClass+0x1cc>)
 8012208:	2206      	movs	r2, #6
 801220a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 801220e:	4a0a      	ldr	r2, [pc, #40]	; (8012238 <SwitchClass+0x1c8>)
 8012210:	79fb      	ldrb	r3, [r7, #7]
 8012212:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8012216:	4b0a      	ldr	r3, [pc, #40]	; (8012240 <SwitchClass+0x1d0>)
 8012218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801221a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 801221c:	2300      	movs	r3, #0
 801221e:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012220:	e003      	b.n	801222a <SwitchClass+0x1ba>
            break;
 8012222:	bf00      	nop
 8012224:	e002      	b.n	801222c <SwitchClass+0x1bc>
            break;
 8012226:	bf00      	nop
 8012228:	e000      	b.n	801222c <SwitchClass+0x1bc>
            break;
 801222a:	bf00      	nop
        }
    }

    return status;
 801222c:	7bfb      	ldrb	r3, [r7, #15]
}
 801222e:	4618      	mov	r0, r3
 8012230:	3710      	adds	r7, #16
 8012232:	46bd      	mov	sp, r7
 8012234:	bdb0      	pop	{r4, r5, r7, pc}
 8012236:	bf00      	nop
 8012238:	20000bf0 	.word	0x20000bf0
 801223c:	200006d4 	.word	0x200006d4
 8012240:	08020e4c 	.word	0x08020e4c

08012244 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b086      	sub	sp, #24
 8012248:	af00      	add	r7, sp, #0
 801224a:	4603      	mov	r3, r0
 801224c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801224e:	4b10      	ldr	r3, [pc, #64]	; (8012290 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012250:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012254:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8012256:	79fb      	ldrb	r3, [r7, #7]
 8012258:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801225a:	230d      	movs	r3, #13
 801225c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801225e:	4b0c      	ldr	r3, [pc, #48]	; (8012290 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012260:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8012264:	2b00      	cmp	r3, #0
 8012266:	d001      	beq.n	801226c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012268:	230e      	movs	r3, #14
 801226a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801226c:	4b08      	ldr	r3, [pc, #32]	; (8012290 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801226e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012272:	f107 0210 	add.w	r2, r7, #16
 8012276:	4611      	mov	r1, r2
 8012278:	4618      	mov	r0, r3
 801227a:	f005 faf3 	bl	8017864 <RegionGetPhyParam>
 801227e:	4603      	mov	r3, r0
 8012280:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	b2db      	uxtb	r3, r3
}
 8012286:	4618      	mov	r0, r3
 8012288:	3718      	adds	r7, #24
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	20000bf0 	.word	0x20000bf0

08012294 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	4603      	mov	r3, r0
 801229c:	71fb      	strb	r3, [r7, #7]
 801229e:	460b      	mov	r3, r1
 80122a0:	71bb      	strb	r3, [r7, #6]
 80122a2:	4613      	mov	r3, r2
 80122a4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80122a6:	2300      	movs	r3, #0
 80122a8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80122aa:	2300      	movs	r3, #0
 80122ac:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80122ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80122b2:	4618      	mov	r0, r3
 80122b4:	f7ff ffc6 	bl	8012244 <GetMaxAppPayloadWithoutFOptsLength>
 80122b8:	4603      	mov	r3, r0
 80122ba:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80122bc:	79fb      	ldrb	r3, [r7, #7]
 80122be:	b29a      	uxth	r2, r3
 80122c0:	797b      	ldrb	r3, [r7, #5]
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	4413      	add	r3, r2
 80122c6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80122c8:	89ba      	ldrh	r2, [r7, #12]
 80122ca:	89fb      	ldrh	r3, [r7, #14]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d804      	bhi.n	80122da <ValidatePayloadLength+0x46>
 80122d0:	89bb      	ldrh	r3, [r7, #12]
 80122d2:	2bff      	cmp	r3, #255	; 0xff
 80122d4:	d801      	bhi.n	80122da <ValidatePayloadLength+0x46>
    {
        return true;
 80122d6:	2301      	movs	r3, #1
 80122d8:	e000      	b.n	80122dc <ValidatePayloadLength+0x48>
    }
    return false;
 80122da:	2300      	movs	r3, #0
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3710      	adds	r7, #16
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80122e4:	b590      	push	{r4, r7, lr}
 80122e6:	b0a5      	sub	sp, #148	; 0x94
 80122e8:	af02      	add	r7, sp, #8
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	4608      	mov	r0, r1
 80122ee:	4611      	mov	r1, r2
 80122f0:	461a      	mov	r2, r3
 80122f2:	4603      	mov	r3, r0
 80122f4:	70fb      	strb	r3, [r7, #3]
 80122f6:	460b      	mov	r3, r1
 80122f8:	70bb      	strb	r3, [r7, #2]
 80122fa:	4613      	mov	r3, r2
 80122fc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80122fe:	2300      	movs	r3, #0
 8012300:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8012304:	2300      	movs	r3, #0
 8012306:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801230a:	2300      	movs	r3, #0
 801230c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 8012310:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8012314:	2b00      	cmp	r3, #0
 8012316:	f000 84ab 	beq.w	8012c70 <ProcessMacCommands+0x98c>
 801231a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801231e:	2b01      	cmp	r3, #1
 8012320:	f040 84ac 	bne.w	8012c7c <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012324:	f000 bca4 	b.w	8012c70 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8012328:	78fb      	ldrb	r3, [r7, #3]
 801232a:	687a      	ldr	r2, [r7, #4]
 801232c:	4413      	add	r3, r2
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	4618      	mov	r0, r3
 8012332:	f003 fe45 	bl	8015fc0 <LoRaMacCommandsGetCmdSize>
 8012336:	4603      	mov	r3, r0
 8012338:	461a      	mov	r2, r3
 801233a:	78fb      	ldrb	r3, [r7, #3]
 801233c:	441a      	add	r2, r3
 801233e:	78bb      	ldrb	r3, [r7, #2]
 8012340:	429a      	cmp	r2, r3
 8012342:	f300 849d 	bgt.w	8012c80 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012346:	78fb      	ldrb	r3, [r7, #3]
 8012348:	1c5a      	adds	r2, r3, #1
 801234a:	70fa      	strb	r2, [r7, #3]
 801234c:	461a      	mov	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4413      	add	r3, r2
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	3b02      	subs	r3, #2
 8012356:	2b11      	cmp	r3, #17
 8012358:	f200 8494 	bhi.w	8012c84 <ProcessMacCommands+0x9a0>
 801235c:	a201      	add	r2, pc, #4	; (adr r2, 8012364 <ProcessMacCommands+0x80>)
 801235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012362:	bf00      	nop
 8012364:	080123ad 	.word	0x080123ad
 8012368:	080123ef 	.word	0x080123ef
 801236c:	0801256b 	.word	0x0801256b
 8012370:	080125a9 	.word	0x080125a9
 8012374:	080126a1 	.word	0x080126a1
 8012378:	080126f1 	.word	0x080126f1
 801237c:	080127ad 	.word	0x080127ad
 8012380:	08012803 	.word	0x08012803
 8012384:	080128e9 	.word	0x080128e9
 8012388:	08012c85 	.word	0x08012c85
 801238c:	08012c85 	.word	0x08012c85
 8012390:	08012991 	.word	0x08012991
 8012394:	08012c85 	.word	0x08012c85
 8012398:	08012c85 	.word	0x08012c85
 801239c:	08012ab1 	.word	0x08012ab1
 80123a0:	08012ae5 	.word	0x08012ae5
 80123a4:	08012b75 	.word	0x08012b75
 80123a8:	08012beb 	.word	0x08012beb
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80123ac:	2005      	movs	r0, #5
 80123ae:	f003 ffdf 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 80123b2:	4603      	mov	r3, r0
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f000 845b 	beq.w	8012c70 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80123ba:	2105      	movs	r1, #5
 80123bc:	2000      	movs	r0, #0
 80123be:	f003 ff4b 	bl	8016258 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80123c2:	78fb      	ldrb	r3, [r7, #3]
 80123c4:	1c5a      	adds	r2, r3, #1
 80123c6:	70fa      	strb	r2, [r7, #3]
 80123c8:	461a      	mov	r2, r3
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	4413      	add	r3, r2
 80123ce:	781a      	ldrb	r2, [r3, #0]
 80123d0:	4bb0      	ldr	r3, [pc, #704]	; (8012694 <ProcessMacCommands+0x3b0>)
 80123d2:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80123d6:	78fb      	ldrb	r3, [r7, #3]
 80123d8:	1c5a      	adds	r2, r3, #1
 80123da:	70fa      	strb	r2, [r7, #3]
 80123dc:	461a      	mov	r2, r3
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	4413      	add	r3, r2
 80123e2:	781a      	ldrb	r2, [r3, #0]
 80123e4:	4bab      	ldr	r3, [pc, #684]	; (8012694 <ProcessMacCommands+0x3b0>)
 80123e6:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 80123ea:	f000 bc41 	b.w	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80123ee:	2300      	movs	r3, #0
 80123f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80123f4:	2300      	movs	r3, #0
 80123f6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80123fa:	2300      	movs	r3, #0
 80123fc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012400:	2300      	movs	r3, #0
 8012402:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 8012406:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801240a:	f083 0301 	eor.w	r3, r3, #1
 801240e:	b2db      	uxtb	r3, r3
 8012410:	2b00      	cmp	r3, #0
 8012412:	f000 80a5 	beq.w	8012560 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8012416:	2301      	movs	r3, #1
 8012418:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 801241c:	78fb      	ldrb	r3, [r7, #3]
 801241e:	3b01      	subs	r3, #1
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	4413      	add	r3, r2
 8012424:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012426:	4b9c      	ldr	r3, [pc, #624]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012428:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801242c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012430:	4b99      	ldr	r3, [pc, #612]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012432:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012436:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801243a:	4b97      	ldr	r3, [pc, #604]	; (8012698 <ProcessMacCommands+0x3b4>)
 801243c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012440:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012444:	4b94      	ldr	r3, [pc, #592]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012446:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801244a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801244e:	4b92      	ldr	r3, [pc, #584]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012450:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012454:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012458:	4b8f      	ldr	r3, [pc, #572]	; (8012698 <ProcessMacCommands+0x3b4>)
 801245a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 801245e:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8012460:	4b8d      	ldr	r3, [pc, #564]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012462:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012466:	2b00      	cmp	r3, #0
 8012468:	d008      	beq.n	801247c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801246a:	78ba      	ldrb	r2, [r7, #2]
 801246c:	78fb      	ldrb	r3, [r7, #3]
 801246e:	1ad3      	subs	r3, r2, r3
 8012470:	b2db      	uxtb	r3, r3
 8012472:	3301      	adds	r3, #1
 8012474:	b2db      	uxtb	r3, r3
 8012476:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 801247a:	e002      	b.n	8012482 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 801247c:	2305      	movs	r3, #5
 801247e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012482:	4b85      	ldr	r3, [pc, #532]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012484:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012488:	f107 0456 	add.w	r4, r7, #86	; 0x56
 801248c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012490:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012494:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012498:	9301      	str	r3, [sp, #4]
 801249a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801249e:	9300      	str	r3, [sp, #0]
 80124a0:	4623      	mov	r3, r4
 80124a2:	f005 fae2 	bl	8017a6a <RegionLinkAdrReq>
 80124a6:	4603      	mov	r3, r0
 80124a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 80124ac:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80124b0:	f003 0307 	and.w	r3, r3, #7
 80124b4:	2b07      	cmp	r3, #7
 80124b6:	d119      	bne.n	80124ec <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 80124b8:	4b77      	ldr	r3, [pc, #476]	; (8012698 <ProcessMacCommands+0x3b4>)
 80124ba:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80124be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80124c2:	429a      	cmp	r2, r3
 80124c4:	da03      	bge.n	80124ce <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 80124c6:	4b74      	ldr	r3, [pc, #464]	; (8012698 <ProcessMacCommands+0x3b4>)
 80124c8:	2201      	movs	r2, #1
 80124ca:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80124ce:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80124d2:	4b71      	ldr	r3, [pc, #452]	; (8012698 <ProcessMacCommands+0x3b4>)
 80124d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80124d8:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80124dc:	4b6e      	ldr	r3, [pc, #440]	; (8012698 <ProcessMacCommands+0x3b4>)
 80124de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80124e2:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80124e6:	4b6c      	ldr	r3, [pc, #432]	; (8012698 <ProcessMacCommands+0x3b4>)
 80124e8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80124ec:	2300      	movs	r3, #0
 80124ee:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80124f2:	e00b      	b.n	801250c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80124f4:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80124f8:	2201      	movs	r2, #1
 80124fa:	4619      	mov	r1, r3
 80124fc:	2003      	movs	r0, #3
 80124fe:	f003 fbff 	bl	8015d00 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8012502:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012506:	3301      	adds	r3, #1
 8012508:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801250c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8012510:	4a62      	ldr	r2, [pc, #392]	; (801269c <ProcessMacCommands+0x3b8>)
 8012512:	fba2 2303 	umull	r2, r3, r2, r3
 8012516:	089b      	lsrs	r3, r3, #2
 8012518:	b2db      	uxtb	r3, r3
 801251a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 801251e:	429a      	cmp	r2, r3
 8012520:	d3e8      	bcc.n	80124f4 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8012522:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012526:	78fb      	ldrb	r3, [r7, #3]
 8012528:	4413      	add	r3, r2
 801252a:	b2db      	uxtb	r3, r3
 801252c:	3b01      	subs	r3, #1
 801252e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8012530:	78fa      	ldrb	r2, [r7, #3]
 8012532:	78bb      	ldrb	r3, [r7, #2]
 8012534:	429a      	cmp	r2, r3
 8012536:	d20a      	bcs.n	801254e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8012538:	78fb      	ldrb	r3, [r7, #3]
 801253a:	1c5a      	adds	r2, r3, #1
 801253c:	70fa      	strb	r2, [r7, #3]
 801253e:	461a      	mov	r2, r3
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4413      	add	r3, r2
 8012544:	781b      	ldrb	r3, [r3, #0]
 8012546:	2b03      	cmp	r3, #3
 8012548:	f43f af68 	beq.w	801241c <ProcessMacCommands+0x138>
 801254c:	e000      	b.n	8012550 <ProcessMacCommands+0x26c>
                            break;
 801254e:	bf00      	nop

                    if( macIndex < commandsSize )
 8012550:	78fa      	ldrb	r2, [r7, #3]
 8012552:	78bb      	ldrb	r3, [r7, #2]
 8012554:	429a      	cmp	r2, r3
 8012556:	d206      	bcs.n	8012566 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8012558:	78fb      	ldrb	r3, [r7, #3]
 801255a:	3b01      	subs	r3, #1
 801255c:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 801255e:	e002      	b.n	8012566 <ProcessMacCommands+0x282>
                    macIndex += 4;
 8012560:	78fb      	ldrb	r3, [r7, #3]
 8012562:	3304      	adds	r3, #4
 8012564:	70fb      	strb	r3, [r7, #3]
                break;
 8012566:	bf00      	nop
 8012568:	e382      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801256a:	78fb      	ldrb	r3, [r7, #3]
 801256c:	1c5a      	adds	r2, r3, #1
 801256e:	70fa      	strb	r2, [r7, #3]
 8012570:	461a      	mov	r2, r3
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	4413      	add	r3, r2
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	f003 030f 	and.w	r3, r3, #15
 801257c:	b2da      	uxtb	r2, r3
 801257e:	4b46      	ldr	r3, [pc, #280]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012580:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012584:	4b44      	ldr	r3, [pc, #272]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012586:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801258a:	461a      	mov	r2, r3
 801258c:	2301      	movs	r3, #1
 801258e:	4093      	lsls	r3, r2
 8012590:	b29a      	uxth	r2, r3
 8012592:	4b41      	ldr	r3, [pc, #260]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012594:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012598:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801259c:	2200      	movs	r2, #0
 801259e:	4619      	mov	r1, r3
 80125a0:	2004      	movs	r0, #4
 80125a2:	f003 fbad 	bl	8015d00 <LoRaMacCommandsAddCmd>
                break;
 80125a6:	e363      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 80125a8:	2307      	movs	r3, #7
 80125aa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 80125ae:	78fb      	ldrb	r3, [r7, #3]
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	4413      	add	r3, r2
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	091b      	lsrs	r3, r3, #4
 80125b8:	b2db      	uxtb	r3, r3
 80125ba:	b25b      	sxtb	r3, r3
 80125bc:	f003 0307 	and.w	r3, r3, #7
 80125c0:	b25b      	sxtb	r3, r3
 80125c2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 80125c6:	78fb      	ldrb	r3, [r7, #3]
 80125c8:	687a      	ldr	r2, [r7, #4]
 80125ca:	4413      	add	r3, r2
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	b25b      	sxtb	r3, r3
 80125d0:	f003 030f 	and.w	r3, r3, #15
 80125d4:	b25b      	sxtb	r3, r3
 80125d6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 80125da:	78fb      	ldrb	r3, [r7, #3]
 80125dc:	3301      	adds	r3, #1
 80125de:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80125e0:	78fb      	ldrb	r3, [r7, #3]
 80125e2:	1c5a      	adds	r2, r3, #1
 80125e4:	70fa      	strb	r2, [r7, #3]
 80125e6:	461a      	mov	r2, r3
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4413      	add	r3, r2
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80125f0:	78fb      	ldrb	r3, [r7, #3]
 80125f2:	1c5a      	adds	r2, r3, #1
 80125f4:	70fa      	strb	r2, [r7, #3]
 80125f6:	461a      	mov	r2, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4413      	add	r3, r2
 80125fc:	781b      	ldrb	r3, [r3, #0]
 80125fe:	021a      	lsls	r2, r3, #8
 8012600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012602:	4313      	orrs	r3, r2
 8012604:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012606:	78fb      	ldrb	r3, [r7, #3]
 8012608:	1c5a      	adds	r2, r3, #1
 801260a:	70fa      	strb	r2, [r7, #3]
 801260c:	461a      	mov	r2, r3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	4413      	add	r3, r2
 8012612:	781b      	ldrb	r3, [r3, #0]
 8012614:	041a      	lsls	r2, r3, #16
 8012616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012618:	4313      	orrs	r3, r2
 801261a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 801261c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801261e:	2264      	movs	r2, #100	; 0x64
 8012620:	fb02 f303 	mul.w	r3, r2, r3
 8012624:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8012626:	4b1c      	ldr	r3, [pc, #112]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012628:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801262c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f005 fa40 	bl	8017ab8 <RegionRxParamSetupReq>
 8012638:	4603      	mov	r3, r0
 801263a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801263e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012642:	f003 0307 	and.w	r3, r3, #7
 8012646:	2b07      	cmp	r3, #7
 8012648:	d117      	bne.n	801267a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 801264a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801264e:	b2da      	uxtb	r2, r3
 8012650:	4b11      	ldr	r3, [pc, #68]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012652:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8012656:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 801265a:	b2da      	uxtb	r2, r3
 801265c:	4b0e      	ldr	r3, [pc, #56]	; (8012698 <ProcessMacCommands+0x3b4>)
 801265e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8012662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012664:	4a0c      	ldr	r2, [pc, #48]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012666:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801266a:	4a0b      	ldr	r2, [pc, #44]	; (8012698 <ProcessMacCommands+0x3b4>)
 801266c:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 801266e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012672:	b2da      	uxtb	r2, r3
 8012674:	4b08      	ldr	r3, [pc, #32]	; (8012698 <ProcessMacCommands+0x3b4>)
 8012676:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 801267a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801267e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012682:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012686:	2201      	movs	r2, #1
 8012688:	4619      	mov	r1, r3
 801268a:	2005      	movs	r0, #5
 801268c:	f003 fb38 	bl	8015d00 <LoRaMacCommandsAddCmd>
                break;
 8012690:	bf00      	nop
 8012692:	e2ed      	b.n	8012c70 <ProcessMacCommands+0x98c>
 8012694:	200006d4 	.word	0x200006d4
 8012698:	20000bf0 	.word	0x20000bf0
 801269c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80126a0:	23ff      	movs	r3, #255	; 0xff
 80126a2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80126a6:	4bb7      	ldr	r3, [pc, #732]	; (8012984 <ProcessMacCommands+0x6a0>)
 80126a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d00d      	beq.n	80126cc <ProcessMacCommands+0x3e8>
 80126b0:	4bb4      	ldr	r3, [pc, #720]	; (8012984 <ProcessMacCommands+0x6a0>)
 80126b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d007      	beq.n	80126cc <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80126bc:	4bb1      	ldr	r3, [pc, #708]	; (8012984 <ProcessMacCommands+0x6a0>)
 80126be:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	4798      	blx	r3
 80126c6:	4603      	mov	r3, r0
 80126c8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 80126cc:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80126d0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80126d4:	787b      	ldrb	r3, [r7, #1]
 80126d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80126e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80126e4:	2202      	movs	r2, #2
 80126e6:	4619      	mov	r1, r3
 80126e8:	2006      	movs	r0, #6
 80126ea:	f003 fb09 	bl	8015d00 <LoRaMacCommandsAddCmd>
                break;
 80126ee:	e2bf      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 80126f0:	2303      	movs	r3, #3
 80126f2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 80126f6:	78fb      	ldrb	r3, [r7, #3]
 80126f8:	1c5a      	adds	r2, r3, #1
 80126fa:	70fa      	strb	r2, [r7, #3]
 80126fc:	461a      	mov	r2, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	4413      	add	r3, r2
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	b25b      	sxtb	r3, r3
 8012706:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801270a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801270e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012710:	78fb      	ldrb	r3, [r7, #3]
 8012712:	1c5a      	adds	r2, r3, #1
 8012714:	70fa      	strb	r2, [r7, #3]
 8012716:	461a      	mov	r2, r3
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	4413      	add	r3, r2
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012720:	78fb      	ldrb	r3, [r7, #3]
 8012722:	1c5a      	adds	r2, r3, #1
 8012724:	70fa      	strb	r2, [r7, #3]
 8012726:	461a      	mov	r2, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	4413      	add	r3, r2
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	021a      	lsls	r2, r3, #8
 8012730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012732:	4313      	orrs	r3, r2
 8012734:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012736:	78fb      	ldrb	r3, [r7, #3]
 8012738:	1c5a      	adds	r2, r3, #1
 801273a:	70fa      	strb	r2, [r7, #3]
 801273c:	461a      	mov	r2, r3
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	4413      	add	r3, r2
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	041a      	lsls	r2, r3, #16
 8012746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012748:	4313      	orrs	r3, r2
 801274a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 801274c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801274e:	2264      	movs	r2, #100	; 0x64
 8012750:	fb02 f303 	mul.w	r3, r2, r3
 8012754:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012756:	2300      	movs	r3, #0
 8012758:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 801275a:	78fb      	ldrb	r3, [r7, #3]
 801275c:	1c5a      	adds	r2, r3, #1
 801275e:	70fa      	strb	r2, [r7, #3]
 8012760:	461a      	mov	r2, r3
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	4413      	add	r3, r2
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	b25b      	sxtb	r3, r3
 801276a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 801276e:	4b86      	ldr	r3, [pc, #536]	; (8012988 <ProcessMacCommands+0x6a4>)
 8012770:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012774:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012778:	4611      	mov	r1, r2
 801277a:	4618      	mov	r0, r3
 801277c:	f005 f9b7 	bl	8017aee <RegionNewChannelReq>
 8012780:	4603      	mov	r3, r0
 8012782:	b2db      	uxtb	r3, r3
 8012784:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012788:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801278c:	b25b      	sxtb	r3, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	db0a      	blt.n	80127a8 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8012792:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012796:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801279a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801279e:	2201      	movs	r2, #1
 80127a0:	4619      	mov	r1, r3
 80127a2:	2007      	movs	r0, #7
 80127a4:	f003 faac 	bl	8015d00 <LoRaMacCommandsAddCmd>
                }
                break;
 80127a8:	bf00      	nop
 80127aa:	e261      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 80127ac:	78fb      	ldrb	r3, [r7, #3]
 80127ae:	1c5a      	adds	r2, r3, #1
 80127b0:	70fa      	strb	r2, [r7, #3]
 80127b2:	461a      	mov	r2, r3
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	4413      	add	r3, r2
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	f003 030f 	and.w	r3, r3, #15
 80127be:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 80127c2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d104      	bne.n	80127d4 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 80127ca:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80127ce:	3301      	adds	r3, #1
 80127d0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 80127d4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 80127d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80127dc:	fb02 f303 	mul.w	r3, r2, r3
 80127e0:	461a      	mov	r2, r3
 80127e2:	4b69      	ldr	r3, [pc, #420]	; (8012988 <ProcessMacCommands+0x6a4>)
 80127e4:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80127e6:	4b68      	ldr	r3, [pc, #416]	; (8012988 <ProcessMacCommands+0x6a4>)
 80127e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127ea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80127ee:	4a66      	ldr	r2, [pc, #408]	; (8012988 <ProcessMacCommands+0x6a4>)
 80127f0:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80127f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80127f6:	2200      	movs	r2, #0
 80127f8:	4619      	mov	r1, r3
 80127fa:	2008      	movs	r0, #8
 80127fc:	f003 fa80 	bl	8015d00 <LoRaMacCommandsAddCmd>
                break;
 8012800:	e236      	b.n	8012c70 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012802:	78fb      	ldrb	r3, [r7, #3]
 8012804:	1c5a      	adds	r2, r3, #1
 8012806:	70fa      	strb	r2, [r7, #3]
 8012808:	461a      	mov	r2, r3
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	4413      	add	r3, r2
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012814:	2300      	movs	r3, #0
 8012816:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801281a:	2300      	movs	r3, #0
 801281c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012820:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012824:	f003 0320 	and.w	r3, r3, #32
 8012828:	2b00      	cmp	r3, #0
 801282a:	d002      	beq.n	8012832 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 801282c:	2301      	movs	r3, #1
 801282e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012832:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012836:	f003 0310 	and.w	r3, r3, #16
 801283a:	2b00      	cmp	r3, #0
 801283c:	d002      	beq.n	8012844 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801283e:	2301      	movs	r3, #1
 8012840:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012844:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012848:	f003 030f 	and.w	r3, r3, #15
 801284c:	b2db      	uxtb	r3, r3
 801284e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012852:	4b4d      	ldr	r3, [pc, #308]	; (8012988 <ProcessMacCommands+0x6a4>)
 8012854:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012858:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801285c:	4611      	mov	r1, r2
 801285e:	4618      	mov	r0, r3
 8012860:	f005 f960 	bl	8017b24 <RegionTxParamSetupReq>
 8012864:	4603      	mov	r3, r0
 8012866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801286a:	d03b      	beq.n	80128e4 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 801286c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012870:	4b45      	ldr	r3, [pc, #276]	; (8012988 <ProcessMacCommands+0x6a4>)
 8012872:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012876:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801287a:	4b43      	ldr	r3, [pc, #268]	; (8012988 <ProcessMacCommands+0x6a4>)
 801287c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012880:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012884:	461a      	mov	r2, r3
 8012886:	4b41      	ldr	r3, [pc, #260]	; (801298c <ProcessMacCommands+0x6a8>)
 8012888:	5c9b      	ldrb	r3, [r3, r2]
 801288a:	4618      	mov	r0, r3
 801288c:	f7ee fa00 	bl	8000c90 <__aeabi_ui2f>
 8012890:	4603      	mov	r3, r0
 8012892:	4a3d      	ldr	r2, [pc, #244]	; (8012988 <ProcessMacCommands+0x6a4>)
 8012894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012898:	2302      	movs	r3, #2
 801289a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801289e:	4b3a      	ldr	r3, [pc, #232]	; (8012988 <ProcessMacCommands+0x6a4>)
 80128a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80128a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80128a8:	4b37      	ldr	r3, [pc, #220]	; (8012988 <ProcessMacCommands+0x6a4>)
 80128aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80128b2:	4611      	mov	r1, r2
 80128b4:	4618      	mov	r0, r3
 80128b6:	f004 ffd5 	bl	8017864 <RegionGetPhyParam>
 80128ba:	4603      	mov	r3, r0
 80128bc:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80128be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c0:	b25a      	sxtb	r2, r3
 80128c2:	4b31      	ldr	r3, [pc, #196]	; (8012988 <ProcessMacCommands+0x6a4>)
 80128c4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80128c8:	4293      	cmp	r3, r2
 80128ca:	bfb8      	it	lt
 80128cc:	4613      	movlt	r3, r2
 80128ce:	b25a      	sxtb	r2, r3
 80128d0:	4b2d      	ldr	r3, [pc, #180]	; (8012988 <ProcessMacCommands+0x6a4>)
 80128d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80128d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80128da:	2200      	movs	r2, #0
 80128dc:	4619      	mov	r1, r3
 80128de:	2009      	movs	r0, #9
 80128e0:	f003 fa0e 	bl	8015d00 <LoRaMacCommandsAddCmd>
                }
                break;
 80128e4:	bf00      	nop
 80128e6:	e1c3      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 80128e8:	2303      	movs	r3, #3
 80128ea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 80128ee:	78fb      	ldrb	r3, [r7, #3]
 80128f0:	1c5a      	adds	r2, r3, #1
 80128f2:	70fa      	strb	r2, [r7, #3]
 80128f4:	461a      	mov	r2, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4413      	add	r3, r2
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012900:	78fb      	ldrb	r3, [r7, #3]
 8012902:	1c5a      	adds	r2, r3, #1
 8012904:	70fa      	strb	r2, [r7, #3]
 8012906:	461a      	mov	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	4413      	add	r3, r2
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012910:	78fb      	ldrb	r3, [r7, #3]
 8012912:	1c5a      	adds	r2, r3, #1
 8012914:	70fa      	strb	r2, [r7, #3]
 8012916:	461a      	mov	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	4413      	add	r3, r2
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	021a      	lsls	r2, r3, #8
 8012920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012922:	4313      	orrs	r3, r2
 8012924:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012926:	78fb      	ldrb	r3, [r7, #3]
 8012928:	1c5a      	adds	r2, r3, #1
 801292a:	70fa      	strb	r2, [r7, #3]
 801292c:	461a      	mov	r2, r3
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4413      	add	r3, r2
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	041a      	lsls	r2, r3, #16
 8012936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012938:	4313      	orrs	r3, r2
 801293a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 801293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293e:	2264      	movs	r2, #100	; 0x64
 8012940:	fb02 f303 	mul.w	r3, r2, r3
 8012944:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012946:	4b10      	ldr	r3, [pc, #64]	; (8012988 <ProcessMacCommands+0x6a4>)
 8012948:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801294c:	f107 0220 	add.w	r2, r7, #32
 8012950:	4611      	mov	r1, r2
 8012952:	4618      	mov	r0, r3
 8012954:	f005 f901 	bl	8017b5a <RegionDlChannelReq>
 8012958:	4603      	mov	r3, r0
 801295a:	b2db      	uxtb	r3, r3
 801295c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012960:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012964:	b25b      	sxtb	r3, r3
 8012966:	2b00      	cmp	r3, #0
 8012968:	db0a      	blt.n	8012980 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 801296a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801296e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012972:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012976:	2201      	movs	r2, #1
 8012978:	4619      	mov	r1, r3
 801297a:	200a      	movs	r0, #10
 801297c:	f003 f9c0 	bl	8015d00 <LoRaMacCommandsAddCmd>
                }
                break;
 8012980:	bf00      	nop
 8012982:	e175      	b.n	8012c70 <ProcessMacCommands+0x98c>
 8012984:	200006d4 	.word	0x200006d4
 8012988:	20000bf0 	.word	0x20000bf0
 801298c:	08020d80 	.word	0x08020d80
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012990:	2009      	movs	r0, #9
 8012992:	f003 fced 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 8012996:	4603      	mov	r3, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	f000 8084 	beq.w	8012aa6 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 801299e:	2109      	movs	r1, #9
 80129a0:	2000      	movs	r0, #0
 80129a2:	f003 fc59 	bl	8016258 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 80129a6:	f107 0318 	add.w	r3, r7, #24
 80129aa:	2200      	movs	r2, #0
 80129ac:	601a      	str	r2, [r3, #0]
 80129ae:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 80129b0:	f107 0310 	add.w	r3, r7, #16
 80129b4:	2200      	movs	r2, #0
 80129b6:	601a      	str	r2, [r3, #0]
 80129b8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 80129ba:	f107 0308 	add.w	r3, r7, #8
 80129be:	2200      	movs	r2, #0
 80129c0:	601a      	str	r2, [r3, #0]
 80129c2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80129c4:	78fb      	ldrb	r3, [r7, #3]
 80129c6:	1c5a      	adds	r2, r3, #1
 80129c8:	70fa      	strb	r2, [r7, #3]
 80129ca:	461a      	mov	r2, r3
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	4413      	add	r3, r2
 80129d0:	781b      	ldrb	r3, [r3, #0]
 80129d2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80129d4:	78fb      	ldrb	r3, [r7, #3]
 80129d6:	1c5a      	adds	r2, r3, #1
 80129d8:	70fa      	strb	r2, [r7, #3]
 80129da:	461a      	mov	r2, r3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	4413      	add	r3, r2
 80129e0:	781b      	ldrb	r3, [r3, #0]
 80129e2:	021a      	lsls	r2, r3, #8
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	4313      	orrs	r3, r2
 80129e8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80129ea:	78fb      	ldrb	r3, [r7, #3]
 80129ec:	1c5a      	adds	r2, r3, #1
 80129ee:	70fa      	strb	r2, [r7, #3]
 80129f0:	461a      	mov	r2, r3
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	4413      	add	r3, r2
 80129f6:	781b      	ldrb	r3, [r3, #0]
 80129f8:	041a      	lsls	r2, r3, #16
 80129fa:	69bb      	ldr	r3, [r7, #24]
 80129fc:	4313      	orrs	r3, r2
 80129fe:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012a00:	78fb      	ldrb	r3, [r7, #3]
 8012a02:	1c5a      	adds	r2, r3, #1
 8012a04:	70fa      	strb	r2, [r7, #3]
 8012a06:	461a      	mov	r2, r3
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	4413      	add	r3, r2
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	061a      	lsls	r2, r3, #24
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	4313      	orrs	r3, r2
 8012a14:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012a16:	78fb      	ldrb	r3, [r7, #3]
 8012a18:	1c5a      	adds	r2, r3, #1
 8012a1a:	70fa      	strb	r2, [r7, #3]
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	4413      	add	r3, r2
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	b21b      	sxth	r3, r3
 8012a26:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012a28:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012a32:	fb02 f303 	mul.w	r3, r2, r3
 8012a36:	121b      	asrs	r3, r3, #8
 8012a38:	b21b      	sxth	r3, r3
 8012a3a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012a3c:	f107 0310 	add.w	r3, r7, #16
 8012a40:	f107 0218 	add.w	r2, r7, #24
 8012a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012a48:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012a4c:	693a      	ldr	r2, [r7, #16]
 8012a4e:	4b8f      	ldr	r3, [pc, #572]	; (8012c8c <ProcessMacCommands+0x9a8>)
 8012a50:	4413      	add	r3, r2
 8012a52:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012a54:	f107 0308 	add.w	r3, r7, #8
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f00c f901 	bl	801ec60 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012a5e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012a62:	4b8b      	ldr	r3, [pc, #556]	; (8012c90 <ProcessMacCommands+0x9ac>)
 8012a64:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012a68:	9200      	str	r2, [sp, #0]
 8012a6a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012a6e:	f107 0210 	add.w	r2, r7, #16
 8012a72:	ca06      	ldmia	r2, {r1, r2}
 8012a74:	f00c f88d 	bl	801eb92 <SysTimeSub>
 8012a78:	f107 0010 	add.w	r0, r7, #16
 8012a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a7e:	9300      	str	r3, [sp, #0]
 8012a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a82:	f107 0208 	add.w	r2, r7, #8
 8012a86:	ca06      	ldmia	r2, {r1, r2}
 8012a88:	f00c f84a 	bl	801eb20 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012a8c:	f107 0310 	add.w	r3, r7, #16
 8012a90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012a94:	f00c f8b6 	bl	801ec04 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012a98:	f002 ffd0 	bl	8015a3c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012a9c:	4b7c      	ldr	r3, [pc, #496]	; (8012c90 <ProcessMacCommands+0x9ac>)
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8012aa4:	e0e4      	b.n	8012c70 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8012aa6:	4b7a      	ldr	r3, [pc, #488]	; (8012c90 <ProcessMacCommands+0x9ac>)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 8012aae:	e0df      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012ab0:	200c      	movs	r0, #12
 8012ab2:	f003 fc5d 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	f000 80d9 	beq.w	8012c70 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012abe:	210c      	movs	r1, #12
 8012ac0:	2000      	movs	r0, #0
 8012ac2:	f003 fbc9 	bl	8016258 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012ac6:	4b72      	ldr	r3, [pc, #456]	; (8012c90 <ProcessMacCommands+0x9ac>)
 8012ac8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012acc:	2b04      	cmp	r3, #4
 8012ace:	f000 80cf 	beq.w	8012c70 <ProcessMacCommands+0x98c>
 8012ad2:	4b6f      	ldr	r3, [pc, #444]	; (8012c90 <ProcessMacCommands+0x9ac>)
 8012ad4:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8012ad8:	2b05      	cmp	r3, #5
 8012ada:	f000 80c9 	beq.w	8012c70 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012ade:	f002 ff8e 	bl	80159fe <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012ae2:	e0c5      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012ae4:	2303      	movs	r3, #3
 8012ae6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012aee:	78fb      	ldrb	r3, [r7, #3]
 8012af0:	1c5a      	adds	r2, r3, #1
 8012af2:	70fa      	strb	r2, [r7, #3]
 8012af4:	461a      	mov	r2, r3
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	4413      	add	r3, r2
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012afe:	78fb      	ldrb	r3, [r7, #3]
 8012b00:	1c5a      	adds	r2, r3, #1
 8012b02:	70fa      	strb	r2, [r7, #3]
 8012b04:	461a      	mov	r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4413      	add	r3, r2
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	021b      	lsls	r3, r3, #8
 8012b0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012b10:	4313      	orrs	r3, r2
 8012b12:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012b14:	78fb      	ldrb	r3, [r7, #3]
 8012b16:	1c5a      	adds	r2, r3, #1
 8012b18:	70fa      	strb	r2, [r7, #3]
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	4413      	add	r3, r2
 8012b20:	781b      	ldrb	r3, [r3, #0]
 8012b22:	041b      	lsls	r3, r3, #16
 8012b24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012b26:	4313      	orrs	r3, r2
 8012b28:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012b2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b2c:	2264      	movs	r2, #100	; 0x64
 8012b2e:	fb02 f303 	mul.w	r3, r2, r3
 8012b32:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012b34:	78fb      	ldrb	r3, [r7, #3]
 8012b36:	1c5a      	adds	r2, r3, #1
 8012b38:	70fa      	strb	r2, [r7, #3]
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	4413      	add	r3, r2
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	f003 030f 	and.w	r3, r3, #15
 8012b46:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012b4a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012b4e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012b50:	4618      	mov	r0, r3
 8012b52:	f002 ff5a 	bl	8015a0a <LoRaMacClassBPingSlotChannelReq>
 8012b56:	4603      	mov	r3, r0
 8012b58:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012b5c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012b60:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8012b64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b68:	2201      	movs	r2, #1
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	2011      	movs	r0, #17
 8012b6e:	f003 f8c7 	bl	8015d00 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8012b72:	e07d      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012b74:	200d      	movs	r0, #13
 8012b76:	f003 fbfb 	bl	8016370 <LoRaMacConfirmQueueIsCmdActive>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d077      	beq.n	8012c70 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012b80:	210d      	movs	r1, #13
 8012b82:	2000      	movs	r0, #0
 8012b84:	f003 fb68 	bl	8016258 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012b88:	2300      	movs	r3, #0
 8012b8a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012b94:	78fb      	ldrb	r3, [r7, #3]
 8012b96:	1c5a      	adds	r2, r3, #1
 8012b98:	70fa      	strb	r2, [r7, #3]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	4413      	add	r3, r2
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012ba6:	78fb      	ldrb	r3, [r7, #3]
 8012ba8:	1c5a      	adds	r2, r3, #1
 8012baa:	70fa      	strb	r2, [r7, #3]
 8012bac:	461a      	mov	r2, r3
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	021b      	lsls	r3, r3, #8
 8012bb6:	b21a      	sxth	r2, r3
 8012bb8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012bbc:	4313      	orrs	r3, r2
 8012bbe:	b21b      	sxth	r3, r3
 8012bc0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012bc4:	78fb      	ldrb	r3, [r7, #3]
 8012bc6:	1c5a      	adds	r2, r3, #1
 8012bc8:	70fa      	strb	r2, [r7, #3]
 8012bca:	461a      	mov	r2, r3
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	4413      	add	r3, r2
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012bd6:	4b2f      	ldr	r3, [pc, #188]	; (8012c94 <ProcessMacCommands+0x9b0>)
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012bde:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012be2:	4618      	mov	r0, r3
 8012be4:	f002 ff1d 	bl	8015a22 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012be8:	e042      	b.n	8012c70 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012bea:	2300      	movs	r3, #0
 8012bec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012bf0:	78fb      	ldrb	r3, [r7, #3]
 8012bf2:	1c5a      	adds	r2, r3, #1
 8012bf4:	70fa      	strb	r2, [r7, #3]
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	4413      	add	r3, r2
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012c02:	78fb      	ldrb	r3, [r7, #3]
 8012c04:	1c5a      	adds	r2, r3, #1
 8012c06:	70fa      	strb	r2, [r7, #3]
 8012c08:	461a      	mov	r2, r3
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	4413      	add	r3, r2
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	021b      	lsls	r3, r3, #8
 8012c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c16:	4313      	orrs	r3, r2
 8012c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012c1c:	78fb      	ldrb	r3, [r7, #3]
 8012c1e:	1c5a      	adds	r2, r3, #1
 8012c20:	70fa      	strb	r2, [r7, #3]
 8012c22:	461a      	mov	r2, r3
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	4413      	add	r3, r2
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	041b      	lsls	r3, r3, #16
 8012c2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012c30:	4313      	orrs	r3, r2
 8012c32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012c36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012c3a:	2264      	movs	r2, #100	; 0x64
 8012c3c:	fb02 f303 	mul.w	r3, r2, r3
 8012c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012c44:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012c48:	f002 fefe 	bl	8015a48 <LoRaMacClassBBeaconFreqReq>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d003      	beq.n	8012c5a <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8012c52:	2301      	movs	r3, #1
 8012c54:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012c58:	e002      	b.n	8012c60 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012c60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012c64:	2201      	movs	r2, #1
 8012c66:	4619      	mov	r1, r3
 8012c68:	2013      	movs	r0, #19
 8012c6a:	f003 f849 	bl	8015d00 <LoRaMacCommandsAddCmd>
                }
                break;
 8012c6e:	bf00      	nop
    while( macIndex < commandsSize )
 8012c70:	78fa      	ldrb	r2, [r7, #3]
 8012c72:	78bb      	ldrb	r3, [r7, #2]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	f4ff ab57 	bcc.w	8012328 <ProcessMacCommands+0x44>
 8012c7a:	e004      	b.n	8012c86 <ProcessMacCommands+0x9a2>
        return;
 8012c7c:	bf00      	nop
 8012c7e:	e002      	b.n	8012c86 <ProcessMacCommands+0x9a2>
            return;
 8012c80:	bf00      	nop
 8012c82:	e000      	b.n	8012c86 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012c84:	bf00      	nop
        }
    }
}
 8012c86:	378c      	adds	r7, #140	; 0x8c
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd90      	pop	{r4, r7, pc}
 8012c8c:	12d53d80 	.word	0x12d53d80
 8012c90:	200006d4 	.word	0x200006d4
 8012c94:	20001820 	.word	0x20001820

08012c98 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b08e      	sub	sp, #56	; 0x38
 8012c9c:	af02      	add	r7, sp, #8
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	607a      	str	r2, [r7, #4]
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	460b      	mov	r3, r1
 8012ca6:	72fb      	strb	r3, [r7, #11]
 8012ca8:	4613      	mov	r3, r2
 8012caa:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012cac:	2303      	movs	r3, #3
 8012cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012cb2:	4b66      	ldr	r3, [pc, #408]	; (8012e4c <Send+0x1b4>)
 8012cb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012cb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012cbc:	4b63      	ldr	r3, [pc, #396]	; (8012e4c <Send+0x1b4>)
 8012cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012cc2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012cc6:	4b61      	ldr	r3, [pc, #388]	; (8012e4c <Send+0x1b4>)
 8012cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cca:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012ccc:	4b5f      	ldr	r3, [pc, #380]	; (8012e4c <Send+0x1b4>)
 8012cce:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d101      	bne.n	8012cda <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012cd6:	2307      	movs	r3, #7
 8012cd8:	e0b4      	b.n	8012e44 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012cda:	4b5c      	ldr	r3, [pc, #368]	; (8012e4c <Send+0x1b4>)
 8012cdc:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d102      	bne.n	8012cea <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012ce4:	4b59      	ldr	r3, [pc, #356]	; (8012e4c <Send+0x1b4>)
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012cea:	2300      	movs	r3, #0
 8012cec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012cf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012cf4:	f36f 0303 	bfc	r3, #0, #4
 8012cf8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012cfc:	4b53      	ldr	r3, [pc, #332]	; (8012e4c <Send+0x1b4>)
 8012cfe:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012d02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d06:	f362 13c7 	bfi	r3, r2, #7, #1
 8012d0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012d0e:	4b4f      	ldr	r3, [pc, #316]	; (8012e4c <Send+0x1b4>)
 8012d10:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012d14:	2b01      	cmp	r3, #1
 8012d16:	d106      	bne.n	8012d26 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012d18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d1c:	f043 0310 	orr.w	r3, r3, #16
 8012d20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012d24:	e005      	b.n	8012d32 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012d26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d2a:	f36f 1304 	bfc	r3, #4, #1
 8012d2e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012d32:	4b46      	ldr	r3, [pc, #280]	; (8012e4c <Send+0x1b4>)
 8012d34:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d005      	beq.n	8012d48 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012d3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d40:	f043 0320 	orr.w	r3, r3, #32
 8012d44:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012d4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012d50:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	bf14      	ite	ne
 8012d5a:	2301      	movne	r3, #1
 8012d5c:	2300      	moveq	r3, #0
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012d62:	4b3a      	ldr	r3, [pc, #232]	; (8012e4c <Send+0x1b4>)
 8012d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d66:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012d68:	4b38      	ldr	r3, [pc, #224]	; (8012e4c <Send+0x1b4>)
 8012d6a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012d6e:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012d70:	4b36      	ldr	r3, [pc, #216]	; (8012e4c <Send+0x1b4>)
 8012d72:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012d76:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012d78:	4b34      	ldr	r3, [pc, #208]	; (8012e4c <Send+0x1b4>)
 8012d7a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012d7e:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012d82:	4b32      	ldr	r3, [pc, #200]	; (8012e4c <Send+0x1b4>)
 8012d84:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012d88:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012d8c:	4b2f      	ldr	r3, [pc, #188]	; (8012e4c <Send+0x1b4>)
 8012d8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012d96:	4b2d      	ldr	r3, [pc, #180]	; (8012e4c <Send+0x1b4>)
 8012d98:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012d9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012da0:	4b2a      	ldr	r3, [pc, #168]	; (8012e4c <Send+0x1b4>)
 8012da2:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012da6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012daa:	f107 0014 	add.w	r0, r7, #20
 8012dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012db2:	9300      	str	r3, [sp, #0]
 8012db4:	4b26      	ldr	r3, [pc, #152]	; (8012e50 <Send+0x1b8>)
 8012db6:	4a27      	ldr	r2, [pc, #156]	; (8012e54 <Send+0x1bc>)
 8012db8:	4927      	ldr	r1, [pc, #156]	; (8012e58 <Send+0x1c0>)
 8012dba:	f002 fcbf 	bl	801573c <LoRaMacAdrCalcNext>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012dc6:	f362 1386 	bfi	r3, r2, #6, #1
 8012dca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012dce:	7afa      	ldrb	r2, [r7, #11]
 8012dd0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012dd4:	893b      	ldrh	r3, [r7, #8]
 8012dd6:	9300      	str	r3, [sp, #0]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f000 fc72 	bl	80136c4 <PrepareFrame>
 8012de0:	4603      	mov	r3, r0
 8012de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d003      	beq.n	8012df6 <Send+0x15e>
 8012dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012df2:	2b0a      	cmp	r3, #10
 8012df4:	d107      	bne.n	8012e06 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012df6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f000 f962 	bl	80130c4 <ScheduleTx>
 8012e00:	4603      	mov	r3, r0
 8012e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d00a      	beq.n	8012e24 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012e0e:	4a0f      	ldr	r2, [pc, #60]	; (8012e4c <Send+0x1b4>)
 8012e10:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012e14:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012e18:	4a0c      	ldr	r2, [pc, #48]	; (8012e4c <Send+0x1b4>)
 8012e1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012e1e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012e22:	e00d      	b.n	8012e40 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012e24:	4b09      	ldr	r3, [pc, #36]	; (8012e4c <Send+0x1b4>)
 8012e26:	2200      	movs	r2, #0
 8012e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2e:	4a07      	ldr	r2, [pc, #28]	; (8012e4c <Send+0x1b4>)
 8012e30:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012e32:	f003 f80b 	bl	8015e4c <LoRaMacCommandsRemoveNoneStickyCmds>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d001      	beq.n	8012e40 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012e3c:	2313      	movs	r3, #19
 8012e3e:	e001      	b.n	8012e44 <Send+0x1ac>
        }
    }
    return status;
 8012e40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3730      	adds	r7, #48	; 0x30
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	20000bf0 	.word	0x20000bf0
 8012e50:	20000c58 	.word	0x20000c58
 8012e54:	20000c28 	.word	0x20000c28
 8012e58:	20000c29 	.word	0x20000c29

08012e5c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012e5c:	b580      	push	{r7, lr}
 8012e5e:	b084      	sub	sp, #16
 8012e60:	af00      	add	r7, sp, #0
 8012e62:	4603      	mov	r3, r0
 8012e64:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012e66:	2300      	movs	r3, #0
 8012e68:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012e72:	79fb      	ldrb	r3, [r7, #7]
 8012e74:	2bff      	cmp	r3, #255	; 0xff
 8012e76:	d11f      	bne.n	8012eb8 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012e78:	2000      	movs	r0, #0
 8012e7a:	f7ff f8f9 	bl	8012070 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012e7e:	4b15      	ldr	r3, [pc, #84]	; (8012ed4 <SendReJoinReq+0x78>)
 8012e80:	2200      	movs	r2, #0
 8012e82:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012e86:	4b13      	ldr	r3, [pc, #76]	; (8012ed4 <SendReJoinReq+0x78>)
 8012e88:	4a13      	ldr	r2, [pc, #76]	; (8012ed8 <SendReJoinReq+0x7c>)
 8012e8a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012e8e:	4b11      	ldr	r3, [pc, #68]	; (8012ed4 <SendReJoinReq+0x78>)
 8012e90:	22ff      	movs	r2, #255	; 0xff
 8012e92:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012e96:	7b3b      	ldrb	r3, [r7, #12]
 8012e98:	f36f 1347 	bfc	r3, #5, #3
 8012e9c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012e9e:	7b3a      	ldrb	r2, [r7, #12]
 8012ea0:	4b0c      	ldr	r3, [pc, #48]	; (8012ed4 <SendReJoinReq+0x78>)
 8012ea2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8012ea6:	480d      	ldr	r0, [pc, #52]	; (8012edc <SendReJoinReq+0x80>)
 8012ea8:	f7fb ff38 	bl	800ed1c <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8012eac:	480c      	ldr	r0, [pc, #48]	; (8012ee0 <SendReJoinReq+0x84>)
 8012eae:	f7fb ff05 	bl	800ecbc <SecureElementGetDevEui>

            allowDelayedTx = false;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	73fb      	strb	r3, [r7, #15]

            break;
 8012eb6:	e002      	b.n	8012ebe <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012eb8:	2302      	movs	r3, #2
 8012eba:	73bb      	strb	r3, [r7, #14]
            break;
 8012ebc:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012ebe:	7bfb      	ldrb	r3, [r7, #15]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f000 f8ff 	bl	80130c4 <ScheduleTx>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	73bb      	strb	r3, [r7, #14]
    return status;
 8012eca:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3710      	adds	r7, #16
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	200006d4 	.word	0x200006d4
 8012ed8:	200006d6 	.word	0x200006d6
 8012edc:	200007e2 	.word	0x200007e2
 8012ee0:	200007ea 	.word	0x200007ea

08012ee4 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8012ee8:	f002 fd38 	bl	801595c <LoRaMacClassBIsBeaconExpected>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d001      	beq.n	8012ef6 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8012ef2:	230e      	movs	r3, #14
 8012ef4:	e013      	b.n	8012f1e <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012ef6:	4b0b      	ldr	r3, [pc, #44]	; (8012f24 <CheckForClassBCollision+0x40>)
 8012ef8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012efc:	2b01      	cmp	r3, #1
 8012efe:	d10d      	bne.n	8012f1c <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8012f00:	f002 fd33 	bl	801596a <LoRaMacClassBIsPingExpected>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d001      	beq.n	8012f0e <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012f0a:	230f      	movs	r3, #15
 8012f0c:	e007      	b.n	8012f1e <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8012f0e:	f002 fd33 	bl	8015978 <LoRaMacClassBIsMulticastExpected>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d001      	beq.n	8012f1c <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8012f18:	230f      	movs	r3, #15
 8012f1a:	e000      	b.n	8012f1e <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8012f1c:	2300      	movs	r3, #0
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	bd80      	pop	{r7, pc}
 8012f22:	bf00      	nop
 8012f24:	20000bf0 	.word	0x20000bf0

08012f28 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8012f28:	b590      	push	{r4, r7, lr}
 8012f2a:	b083      	sub	sp, #12
 8012f2c:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012f2e:	4b2d      	ldr	r3, [pc, #180]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f30:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012f34:	4b2b      	ldr	r3, [pc, #172]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f36:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012f3a:	4b2a      	ldr	r3, [pc, #168]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f3c:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8012f40:	4b28      	ldr	r3, [pc, #160]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f42:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8012f46:	4b27      	ldr	r3, [pc, #156]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f48:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012f4c:	b25b      	sxtb	r3, r3
 8012f4e:	f004 fe68 	bl	8017c22 <RegionApplyDrOffset>
 8012f52:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012f54:	b259      	sxtb	r1, r3
 8012f56:	4b23      	ldr	r3, [pc, #140]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f58:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012f5c:	4b21      	ldr	r3, [pc, #132]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f60:	4821      	ldr	r0, [pc, #132]	; (8012fe8 <ComputeRxWindowParameters+0xc0>)
 8012f62:	9000      	str	r0, [sp, #0]
 8012f64:	4620      	mov	r0, r4
 8012f66:	f004 fd1e 	bl	80179a6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012f6a:	4b1e      	ldr	r3, [pc, #120]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f6c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8012f70:	4b1c      	ldr	r3, [pc, #112]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f72:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012f76:	b259      	sxtb	r1, r3
 8012f78:	4b1a      	ldr	r3, [pc, #104]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f7a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012f7e:	4b19      	ldr	r3, [pc, #100]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f82:	4c1a      	ldr	r4, [pc, #104]	; (8012fec <ComputeRxWindowParameters+0xc4>)
 8012f84:	9400      	str	r4, [sp, #0]
 8012f86:	f004 fd0e 	bl	80179a6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012f8a:	4b16      	ldr	r3, [pc, #88]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f8e:	4a18      	ldr	r2, [pc, #96]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012f90:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012f94:	4413      	add	r3, r2
 8012f96:	4a16      	ldr	r2, [pc, #88]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012f98:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012f9c:	4b11      	ldr	r3, [pc, #68]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012fa0:	4a13      	ldr	r2, [pc, #76]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012fa2:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8012fa6:	4413      	add	r3, r2
 8012fa8:	4a11      	ldr	r2, [pc, #68]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012faa:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8012fae:	4b10      	ldr	r3, [pc, #64]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012fb0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012fb4:	2b04      	cmp	r3, #4
 8012fb6:	d011      	beq.n	8012fdc <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8012fb8:	4b0a      	ldr	r3, [pc, #40]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012fbc:	4a0c      	ldr	r2, [pc, #48]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012fbe:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012fc2:	4413      	add	r3, r2
 8012fc4:	4a0a      	ldr	r2, [pc, #40]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012fc6:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012fca:	4b06      	ldr	r3, [pc, #24]	; (8012fe4 <ComputeRxWindowParameters+0xbc>)
 8012fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fce:	4a08      	ldr	r2, [pc, #32]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012fd0:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8012fd4:	4413      	add	r3, r2
 8012fd6:	4a06      	ldr	r2, [pc, #24]	; (8012ff0 <ComputeRxWindowParameters+0xc8>)
 8012fd8:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8012fdc:	bf00      	nop
 8012fde:	3704      	adds	r7, #4
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd90      	pop	{r4, r7, pc}
 8012fe4:	20000bf0 	.word	0x20000bf0
 8012fe8:	20000a8c 	.word	0x20000a8c
 8012fec:	20000aa4 	.word	0x20000aa4
 8012ff0:	200006d4 	.word	0x200006d4

08012ff4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b082      	sub	sp, #8
 8012ff8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8012ffe:	4b13      	ldr	r3, [pc, #76]	; (801304c <VerifyTxFrame+0x58>)
 8013000:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013004:	2b00      	cmp	r3, #0
 8013006:	d01b      	beq.n	8013040 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013008:	1d3b      	adds	r3, r7, #4
 801300a:	4618      	mov	r0, r3
 801300c:	f002 ff6e 	bl	8015eec <LoRaMacCommandsGetSizeSerializedCmds>
 8013010:	4603      	mov	r3, r0
 8013012:	2b00      	cmp	r3, #0
 8013014:	d001      	beq.n	801301a <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013016:	2313      	movs	r3, #19
 8013018:	e013      	b.n	8013042 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801301a:	4b0d      	ldr	r3, [pc, #52]	; (8013050 <VerifyTxFrame+0x5c>)
 801301c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013020:	4a0a      	ldr	r2, [pc, #40]	; (801304c <VerifyTxFrame+0x58>)
 8013022:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8013026:	687a      	ldr	r2, [r7, #4]
 8013028:	b2d2      	uxtb	r2, r2
 801302a:	4618      	mov	r0, r3
 801302c:	f7ff f932 	bl	8012294 <ValidatePayloadLength>
 8013030:	4603      	mov	r3, r0
 8013032:	f083 0301 	eor.w	r3, r3, #1
 8013036:	b2db      	uxtb	r3, r3
 8013038:	2b00      	cmp	r3, #0
 801303a:	d001      	beq.n	8013040 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 801303c:	2308      	movs	r3, #8
 801303e:	e000      	b.n	8013042 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013040:	2300      	movs	r3, #0
}
 8013042:	4618      	mov	r0, r3
 8013044:	3708      	adds	r7, #8
 8013046:	46bd      	mov	sp, r7
 8013048:	bd80      	pop	{r7, pc}
 801304a:	bf00      	nop
 801304c:	20000bf0 	.word	0x20000bf0
 8013050:	200006d4 	.word	0x200006d4

08013054 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801305a:	4b18      	ldr	r3, [pc, #96]	; (80130bc <SerializeTxFrame+0x68>)
 801305c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013060:	2b00      	cmp	r3, #0
 8013062:	d002      	beq.n	801306a <SerializeTxFrame+0x16>
 8013064:	2b04      	cmp	r3, #4
 8013066:	d011      	beq.n	801308c <SerializeTxFrame+0x38>
 8013068:	e021      	b.n	80130ae <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801306a:	4815      	ldr	r0, [pc, #84]	; (80130c0 <SerializeTxFrame+0x6c>)
 801306c:	f004 fa6c 	bl	8017548 <LoRaMacSerializerJoinRequest>
 8013070:	4603      	mov	r3, r0
 8013072:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013074:	79fb      	ldrb	r3, [r7, #7]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d001      	beq.n	801307e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801307a:	2311      	movs	r3, #17
 801307c:	e01a      	b.n	80130b4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801307e:	4b0f      	ldr	r3, [pc, #60]	; (80130bc <SerializeTxFrame+0x68>)
 8013080:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013084:	b29a      	uxth	r2, r3
 8013086:	4b0d      	ldr	r3, [pc, #52]	; (80130bc <SerializeTxFrame+0x68>)
 8013088:	801a      	strh	r2, [r3, #0]
            break;
 801308a:	e012      	b.n	80130b2 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 801308c:	480c      	ldr	r0, [pc, #48]	; (80130c0 <SerializeTxFrame+0x6c>)
 801308e:	f004 fadd 	bl	801764c <LoRaMacSerializerData>
 8013092:	4603      	mov	r3, r0
 8013094:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013096:	79fb      	ldrb	r3, [r7, #7]
 8013098:	2b00      	cmp	r3, #0
 801309a:	d001      	beq.n	80130a0 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801309c:	2311      	movs	r3, #17
 801309e:	e009      	b.n	80130b4 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80130a0:	4b06      	ldr	r3, [pc, #24]	; (80130bc <SerializeTxFrame+0x68>)
 80130a2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80130a6:	b29a      	uxth	r2, r3
 80130a8:	4b04      	ldr	r3, [pc, #16]	; (80130bc <SerializeTxFrame+0x68>)
 80130aa:	801a      	strh	r2, [r3, #0]
            break;
 80130ac:	e001      	b.n	80130b2 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80130ae:	2303      	movs	r3, #3
 80130b0:	e000      	b.n	80130b4 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80130b2:	2300      	movs	r3, #0
}
 80130b4:	4618      	mov	r0, r3
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}
 80130bc:	200006d4 	.word	0x200006d4
 80130c0:	200007dc 	.word	0x200007dc

080130c4 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b090      	sub	sp, #64	; 0x40
 80130c8:	af02      	add	r7, sp, #8
 80130ca:	4603      	mov	r3, r0
 80130cc:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80130ce:	2303      	movs	r3, #3
 80130d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80130d4:	f7ff ff06 	bl	8012ee4 <CheckForClassBCollision>
 80130d8:	4603      	mov	r3, r0
 80130da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80130de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d002      	beq.n	80130ec <ScheduleTx+0x28>
    {
        return status;
 80130e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130ea:	e092      	b.n	8013212 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 80130ec:	f000 f8f8 	bl	80132e0 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80130f0:	f7ff ffb0 	bl	8013054 <SerializeTxFrame>
 80130f4:	4603      	mov	r3, r0
 80130f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80130fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d002      	beq.n	8013108 <ScheduleTx+0x44>
    {
        return status;
 8013102:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013106:	e084      	b.n	8013212 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8013108:	4b44      	ldr	r3, [pc, #272]	; (801321c <ScheduleTx+0x158>)
 801310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801310c:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801310e:	4b43      	ldr	r3, [pc, #268]	; (801321c <ScheduleTx+0x158>)
 8013110:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013114:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8013116:	4b41      	ldr	r3, [pc, #260]	; (801321c <ScheduleTx+0x158>)
 8013118:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 801311c:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801311e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013122:	4618      	mov	r0, r3
 8013124:	f00b fdd4 	bl	801ecd0 <SysTimeGetMcuTime>
 8013128:	4638      	mov	r0, r7
 801312a:	4b3c      	ldr	r3, [pc, #240]	; (801321c <ScheduleTx+0x158>)
 801312c:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8013130:	9200      	str	r2, [sp, #0]
 8013132:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8013136:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801313a:	ca06      	ldmia	r2, {r1, r2}
 801313c:	f00b fd29 	bl	801eb92 <SysTimeSub>
 8013140:	f107 0320 	add.w	r3, r7, #32
 8013144:	463a      	mov	r2, r7
 8013146:	e892 0003 	ldmia.w	r2, {r0, r1}
 801314a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801314e:	4b33      	ldr	r3, [pc, #204]	; (801321c <ScheduleTx+0x158>)
 8013150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013152:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8013154:	2300      	movs	r3, #0
 8013156:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 801315a:	2301      	movs	r3, #1
 801315c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801315e:	4b30      	ldr	r3, [pc, #192]	; (8013220 <ScheduleTx+0x15c>)
 8013160:	881b      	ldrh	r3, [r3, #0]
 8013162:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013164:	4b2d      	ldr	r3, [pc, #180]	; (801321c <ScheduleTx+0x158>)
 8013166:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801316a:	2b00      	cmp	r3, #0
 801316c:	d104      	bne.n	8013178 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 801316e:	2301      	movs	r3, #1
 8013170:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8013174:	2300      	movs	r3, #0
 8013176:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8013178:	4b28      	ldr	r3, [pc, #160]	; (801321c <ScheduleTx+0x158>)
 801317a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801317e:	f107 0114 	add.w	r1, r7, #20
 8013182:	4b28      	ldr	r3, [pc, #160]	; (8013224 <ScheduleTx+0x160>)
 8013184:	9300      	str	r3, [sp, #0]
 8013186:	4b28      	ldr	r3, [pc, #160]	; (8013228 <ScheduleTx+0x164>)
 8013188:	4a28      	ldr	r2, [pc, #160]	; (801322c <ScheduleTx+0x168>)
 801318a:	f004 fd27 	bl	8017bdc <RegionNextChannel>
 801318e:	4603      	mov	r3, r0
 8013190:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013194:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013198:	2b00      	cmp	r3, #0
 801319a:	d025      	beq.n	80131e8 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 801319c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131a0:	2b0b      	cmp	r3, #11
 80131a2:	d11e      	bne.n	80131e2 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80131a4:	4b1e      	ldr	r3, [pc, #120]	; (8013220 <ScheduleTx+0x15c>)
 80131a6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d01c      	beq.n	80131e8 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 80131ae:	7bfb      	ldrb	r3, [r7, #15]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d013      	beq.n	80131dc <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80131b4:	4b1a      	ldr	r3, [pc, #104]	; (8013220 <ScheduleTx+0x15c>)
 80131b6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80131ba:	f043 0320 	orr.w	r3, r3, #32
 80131be:	4a18      	ldr	r2, [pc, #96]	; (8013220 <ScheduleTx+0x15c>)
 80131c0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80131c4:	4b16      	ldr	r3, [pc, #88]	; (8013220 <ScheduleTx+0x15c>)
 80131c6:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80131ca:	4619      	mov	r1, r3
 80131cc:	4818      	ldr	r0, [pc, #96]	; (8013230 <ScheduleTx+0x16c>)
 80131ce:	f00c fa17 	bl	801f600 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80131d2:	4817      	ldr	r0, [pc, #92]	; (8013230 <ScheduleTx+0x16c>)
 80131d4:	f00c f936 	bl	801f444 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80131d8:	2300      	movs	r3, #0
 80131da:	e01a      	b.n	8013212 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80131dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131e0:	e017      	b.n	8013212 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80131e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131e6:	e014      	b.n	8013212 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80131e8:	f7ff fe9e 	bl	8012f28 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80131ec:	f7ff ff02 	bl	8012ff4 <VerifyTxFrame>
 80131f0:	4603      	mov	r3, r0
 80131f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80131f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d002      	beq.n	8013204 <ScheduleTx+0x140>
    {
        return status;
 80131fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013202:	e006      	b.n	8013212 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013204:	4b06      	ldr	r3, [pc, #24]	; (8013220 <ScheduleTx+0x15c>)
 8013206:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 801320a:	4618      	mov	r0, r3
 801320c:	f000 fb76 	bl	80138fc <SendFrameOnChannel>
 8013210:	4603      	mov	r3, r0
}
 8013212:	4618      	mov	r0, r3
 8013214:	3738      	adds	r7, #56	; 0x38
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
 801321a:	bf00      	nop
 801321c:	20000bf0 	.word	0x20000bf0
 8013220:	200006d4 	.word	0x200006d4
 8013224:	20000c20 	.word	0x20000c20
 8013228:	20000b68 	.word	0x20000b68
 801322c:	20000aef 	.word	0x20000aef
 8013230:	20000a3c 	.word	0x20000a3c

08013234 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	4603      	mov	r3, r0
 801323c:	460a      	mov	r2, r1
 801323e:	71fb      	strb	r3, [r7, #7]
 8013240:	4613      	mov	r3, r2
 8013242:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013244:	2312      	movs	r3, #18
 8013246:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8013248:	2300      	movs	r3, #0
 801324a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 801324c:	4b22      	ldr	r3, [pc, #136]	; (80132d8 <SecureFrame+0xa4>)
 801324e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013252:	2b00      	cmp	r3, #0
 8013254:	d002      	beq.n	801325c <SecureFrame+0x28>
 8013256:	2b04      	cmp	r3, #4
 8013258:	d011      	beq.n	801327e <SecureFrame+0x4a>
 801325a:	e036      	b.n	80132ca <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801325c:	481f      	ldr	r0, [pc, #124]	; (80132dc <SecureFrame+0xa8>)
 801325e:	f003 fd3f 	bl	8016ce0 <LoRaMacCryptoPrepareJoinRequest>
 8013262:	4603      	mov	r3, r0
 8013264:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013266:	7bfb      	ldrb	r3, [r7, #15]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d001      	beq.n	8013270 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801326c:	2311      	movs	r3, #17
 801326e:	e02f      	b.n	80132d0 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013270:	4b19      	ldr	r3, [pc, #100]	; (80132d8 <SecureFrame+0xa4>)
 8013272:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013276:	b29a      	uxth	r2, r3
 8013278:	4b17      	ldr	r3, [pc, #92]	; (80132d8 <SecureFrame+0xa4>)
 801327a:	801a      	strh	r2, [r3, #0]
            break;
 801327c:	e027      	b.n	80132ce <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801327e:	f107 0308 	add.w	r3, r7, #8
 8013282:	4618      	mov	r0, r3
 8013284:	f003 fc66 	bl	8016b54 <LoRaMacCryptoGetFCntUp>
 8013288:	4603      	mov	r3, r0
 801328a:	2b00      	cmp	r3, #0
 801328c:	d001      	beq.n	8013292 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801328e:	2312      	movs	r3, #18
 8013290:	e01e      	b.n	80132d0 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8013292:	4b11      	ldr	r3, [pc, #68]	; (80132d8 <SecureFrame+0xa4>)
 8013294:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013298:	2b00      	cmp	r3, #0
 801329a:	d002      	beq.n	80132a2 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	3b01      	subs	r3, #1
 80132a0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80132a2:	68b8      	ldr	r0, [r7, #8]
 80132a4:	79ba      	ldrb	r2, [r7, #6]
 80132a6:	79f9      	ldrb	r1, [r7, #7]
 80132a8:	4b0c      	ldr	r3, [pc, #48]	; (80132dc <SecureFrame+0xa8>)
 80132aa:	f003 fe41 	bl	8016f30 <LoRaMacCryptoSecureMessage>
 80132ae:	4603      	mov	r3, r0
 80132b0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80132b2:	7bfb      	ldrb	r3, [r7, #15]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80132b8:	2311      	movs	r3, #17
 80132ba:	e009      	b.n	80132d0 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80132bc:	4b06      	ldr	r3, [pc, #24]	; (80132d8 <SecureFrame+0xa4>)
 80132be:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80132c2:	b29a      	uxth	r2, r3
 80132c4:	4b04      	ldr	r3, [pc, #16]	; (80132d8 <SecureFrame+0xa4>)
 80132c6:	801a      	strh	r2, [r3, #0]
            break;
 80132c8:	e001      	b.n	80132ce <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80132ca:	2303      	movs	r3, #3
 80132cc:	e000      	b.n	80132d0 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80132ce:	2300      	movs	r3, #0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3710      	adds	r7, #16
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}
 80132d8:	200006d4 	.word	0x200006d4
 80132dc:	200007dc 	.word	0x200007dc

080132e0 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80132e0:	b480      	push	{r7}
 80132e2:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80132e4:	4b09      	ldr	r3, [pc, #36]	; (801330c <CalculateBackOff+0x2c>)
 80132e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d10a      	bne.n	8013302 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80132ec:	4b07      	ldr	r3, [pc, #28]	; (801330c <CalculateBackOff+0x2c>)
 80132ee:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80132f2:	3b01      	subs	r3, #1
 80132f4:	4a06      	ldr	r2, [pc, #24]	; (8013310 <CalculateBackOff+0x30>)
 80132f6:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 80132fa:	fb02 f303 	mul.w	r3, r2, r3
 80132fe:	4a03      	ldr	r2, [pc, #12]	; (801330c <CalculateBackOff+0x2c>)
 8013300:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013302:	bf00      	nop
 8013304:	46bd      	mov	sp, r7
 8013306:	bc80      	pop	{r7}
 8013308:	4770      	bx	lr
 801330a:	bf00      	nop
 801330c:	20000bf0 	.word	0x20000bf0
 8013310:	200006d4 	.word	0x200006d4

08013314 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b082      	sub	sp, #8
 8013318:	af00      	add	r7, sp, #0
 801331a:	4603      	mov	r3, r0
 801331c:	7139      	strb	r1, [r7, #4]
 801331e:	71fb      	strb	r3, [r7, #7]
 8013320:	4613      	mov	r3, r2
 8013322:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013324:	79fb      	ldrb	r3, [r7, #7]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d002      	beq.n	8013330 <RemoveMacCommands+0x1c>
 801332a:	79fb      	ldrb	r3, [r7, #7]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d10d      	bne.n	801334c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013330:	79bb      	ldrb	r3, [r7, #6]
 8013332:	2b01      	cmp	r3, #1
 8013334:	d108      	bne.n	8013348 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8013336:	793b      	ldrb	r3, [r7, #4]
 8013338:	f003 0320 	and.w	r3, r3, #32
 801333c:	b2db      	uxtb	r3, r3
 801333e:	2b00      	cmp	r3, #0
 8013340:	d004      	beq.n	801334c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8013342:	f002 fda7 	bl	8015e94 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8013346:	e001      	b.n	801334c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8013348:	f002 fda4 	bl	8015e94 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801334c:	bf00      	nop
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8013354:	b5b0      	push	{r4, r5, r7, lr}
 8013356:	b092      	sub	sp, #72	; 0x48
 8013358:	af00      	add	r7, sp, #0
 801335a:	4603      	mov	r3, r0
 801335c:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 801335e:	79fb      	ldrb	r3, [r7, #7]
 8013360:	f083 0301 	eor.w	r3, r3, #1
 8013364:	b2db      	uxtb	r3, r3
 8013366:	2b00      	cmp	r3, #0
 8013368:	d003      	beq.n	8013372 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801336a:	4b88      	ldr	r3, [pc, #544]	; (801358c <ResetMacParameters+0x238>)
 801336c:	2200      	movs	r2, #0
 801336e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8013372:	4b86      	ldr	r3, [pc, #536]	; (801358c <ResetMacParameters+0x238>)
 8013374:	2200      	movs	r2, #0
 8013376:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8013378:	4b85      	ldr	r3, [pc, #532]	; (8013590 <ResetMacParameters+0x23c>)
 801337a:	2200      	movs	r2, #0
 801337c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8013380:	4b83      	ldr	r3, [pc, #524]	; (8013590 <ResetMacParameters+0x23c>)
 8013382:	2200      	movs	r2, #0
 8013384:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 8013388:	4b81      	ldr	r3, [pc, #516]	; (8013590 <ResetMacParameters+0x23c>)
 801338a:	2200      	movs	r2, #0
 801338c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013390:	4b7e      	ldr	r3, [pc, #504]	; (801358c <ResetMacParameters+0x238>)
 8013392:	2200      	movs	r2, #0
 8013394:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013398:	4b7c      	ldr	r3, [pc, #496]	; (801358c <ResetMacParameters+0x238>)
 801339a:	2201      	movs	r2, #1
 801339c:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80133a0:	4b7a      	ldr	r3, [pc, #488]	; (801358c <ResetMacParameters+0x238>)
 80133a2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80133a6:	4b79      	ldr	r3, [pc, #484]	; (801358c <ResetMacParameters+0x238>)
 80133a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80133ac:	4b77      	ldr	r3, [pc, #476]	; (801358c <ResetMacParameters+0x238>)
 80133ae:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80133b2:	4b76      	ldr	r3, [pc, #472]	; (801358c <ResetMacParameters+0x238>)
 80133b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80133b8:	4b74      	ldr	r3, [pc, #464]	; (801358c <ResetMacParameters+0x238>)
 80133ba:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 80133be:	4b73      	ldr	r3, [pc, #460]	; (801358c <ResetMacParameters+0x238>)
 80133c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80133c4:	4b71      	ldr	r3, [pc, #452]	; (801358c <ResetMacParameters+0x238>)
 80133c6:	4a71      	ldr	r2, [pc, #452]	; (801358c <ResetMacParameters+0x238>)
 80133c8:	336c      	adds	r3, #108	; 0x6c
 80133ca:	32b4      	adds	r2, #180	; 0xb4
 80133cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133d0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80133d4:	4b6d      	ldr	r3, [pc, #436]	; (801358c <ResetMacParameters+0x238>)
 80133d6:	4a6d      	ldr	r2, [pc, #436]	; (801358c <ResetMacParameters+0x238>)
 80133d8:	3374      	adds	r3, #116	; 0x74
 80133da:	32bc      	adds	r2, #188	; 0xbc
 80133dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80133e0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80133e4:	4b69      	ldr	r3, [pc, #420]	; (801358c <ResetMacParameters+0x238>)
 80133e6:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80133ea:	4b68      	ldr	r3, [pc, #416]	; (801358c <ResetMacParameters+0x238>)
 80133ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80133f0:	4b66      	ldr	r3, [pc, #408]	; (801358c <ResetMacParameters+0x238>)
 80133f2:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80133f6:	4b65      	ldr	r3, [pc, #404]	; (801358c <ResetMacParameters+0x238>)
 80133f8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80133fc:	4b63      	ldr	r3, [pc, #396]	; (801358c <ResetMacParameters+0x238>)
 80133fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013402:	4a62      	ldr	r2, [pc, #392]	; (801358c <ResetMacParameters+0x238>)
 8013404:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013408:	4b60      	ldr	r3, [pc, #384]	; (801358c <ResetMacParameters+0x238>)
 801340a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801340e:	4a5f      	ldr	r2, [pc, #380]	; (801358c <ResetMacParameters+0x238>)
 8013410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013414:	4b5d      	ldr	r3, [pc, #372]	; (801358c <ResetMacParameters+0x238>)
 8013416:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 801341a:	4b5c      	ldr	r3, [pc, #368]	; (801358c <ResetMacParameters+0x238>)
 801341c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013420:	4b5a      	ldr	r3, [pc, #360]	; (801358c <ResetMacParameters+0x238>)
 8013422:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8013426:	4b59      	ldr	r3, [pc, #356]	; (801358c <ResetMacParameters+0x238>)
 8013428:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 801342c:	4b58      	ldr	r3, [pc, #352]	; (8013590 <ResetMacParameters+0x23c>)
 801342e:	2200      	movs	r2, #0
 8013430:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8013434:	4b55      	ldr	r3, [pc, #340]	; (801358c <ResetMacParameters+0x238>)
 8013436:	2200      	movs	r2, #0
 8013438:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801343c:	4b53      	ldr	r3, [pc, #332]	; (801358c <ResetMacParameters+0x238>)
 801343e:	2200      	movs	r2, #0
 8013440:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8013444:	4b51      	ldr	r3, [pc, #324]	; (801358c <ResetMacParameters+0x238>)
 8013446:	2200      	movs	r2, #0
 8013448:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 801344c:	4b4f      	ldr	r3, [pc, #316]	; (801358c <ResetMacParameters+0x238>)
 801344e:	2200      	movs	r2, #0
 8013450:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8013454:	4b4d      	ldr	r3, [pc, #308]	; (801358c <ResetMacParameters+0x238>)
 8013456:	2200      	movs	r2, #0
 8013458:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 801345c:	4b4b      	ldr	r3, [pc, #300]	; (801358c <ResetMacParameters+0x238>)
 801345e:	2200      	movs	r2, #0
 8013460:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8013464:	4b49      	ldr	r3, [pc, #292]	; (801358c <ResetMacParameters+0x238>)
 8013466:	2200      	movs	r2, #0
 8013468:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 801346c:	4b47      	ldr	r3, [pc, #284]	; (801358c <ResetMacParameters+0x238>)
 801346e:	2200      	movs	r2, #0
 8013470:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8013474:	4b45      	ldr	r3, [pc, #276]	; (801358c <ResetMacParameters+0x238>)
 8013476:	2200      	movs	r2, #0
 8013478:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 801347c:	4b43      	ldr	r3, [pc, #268]	; (801358c <ResetMacParameters+0x238>)
 801347e:	2200      	movs	r2, #0
 8013480:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8013484:	4b41      	ldr	r3, [pc, #260]	; (801358c <ResetMacParameters+0x238>)
 8013486:	2200      	movs	r2, #0
 8013488:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801348c:	2301      	movs	r3, #1
 801348e:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013490:	4b40      	ldr	r3, [pc, #256]	; (8013594 <ResetMacParameters+0x240>)
 8013492:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013494:	4b40      	ldr	r3, [pc, #256]	; (8013598 <ResetMacParameters+0x244>)
 8013496:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 8013498:	4b40      	ldr	r3, [pc, #256]	; (801359c <ResetMacParameters+0x248>)
 801349a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801349c:	4b3b      	ldr	r3, [pc, #236]	; (801358c <ResetMacParameters+0x238>)
 801349e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134a2:	f107 020c 	add.w	r2, r7, #12
 80134a6:	4611      	mov	r1, r2
 80134a8:	4618      	mov	r0, r3
 80134aa:	f004 fa12 	bl	80178d2 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80134ae:	4b38      	ldr	r3, [pc, #224]	; (8013590 <ResetMacParameters+0x23c>)
 80134b0:	2200      	movs	r2, #0
 80134b2:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80134b6:	4b36      	ldr	r3, [pc, #216]	; (8013590 <ResetMacParameters+0x23c>)
 80134b8:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80134bc:	4b34      	ldr	r3, [pc, #208]	; (8013590 <ResetMacParameters+0x23c>)
 80134be:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80134c2:	4b32      	ldr	r3, [pc, #200]	; (801358c <ResetMacParameters+0x238>)
 80134c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134c6:	4a32      	ldr	r2, [pc, #200]	; (8013590 <ResetMacParameters+0x23c>)
 80134c8:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80134cc:	4b2f      	ldr	r3, [pc, #188]	; (801358c <ResetMacParameters+0x238>)
 80134ce:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80134d2:	4b2f      	ldr	r3, [pc, #188]	; (8013590 <ResetMacParameters+0x23c>)
 80134d4:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80134d8:	4b2c      	ldr	r3, [pc, #176]	; (801358c <ResetMacParameters+0x238>)
 80134da:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80134de:	4b2c      	ldr	r3, [pc, #176]	; (8013590 <ResetMacParameters+0x23c>)
 80134e0:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80134e4:	4b2a      	ldr	r3, [pc, #168]	; (8013590 <ResetMacParameters+0x23c>)
 80134e6:	2200      	movs	r2, #0
 80134e8:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80134ec:	4b28      	ldr	r3, [pc, #160]	; (8013590 <ResetMacParameters+0x23c>)
 80134ee:	2201      	movs	r2, #1
 80134f0:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80134f4:	4b25      	ldr	r3, [pc, #148]	; (801358c <ResetMacParameters+0x238>)
 80134f6:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80134fa:	4b25      	ldr	r3, [pc, #148]	; (8013590 <ResetMacParameters+0x23c>)
 80134fc:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013500:	4a23      	ldr	r2, [pc, #140]	; (8013590 <ResetMacParameters+0x23c>)
 8013502:	4b23      	ldr	r3, [pc, #140]	; (8013590 <ResetMacParameters+0x23c>)
 8013504:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8013508:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801350c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801350e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013510:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013514:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013518:	4b1d      	ldr	r3, [pc, #116]	; (8013590 <ResetMacParameters+0x23c>)
 801351a:	2201      	movs	r2, #1
 801351c:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013520:	4b1b      	ldr	r3, [pc, #108]	; (8013590 <ResetMacParameters+0x23c>)
 8013522:	2202      	movs	r2, #2
 8013524:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013528:	2300      	movs	r3, #0
 801352a:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 801352c:	2300      	movs	r3, #0
 801352e:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8013530:	4b17      	ldr	r3, [pc, #92]	; (8013590 <ResetMacParameters+0x23c>)
 8013532:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013536:	2b00      	cmp	r3, #0
 8013538:	d009      	beq.n	801354e <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801353a:	4b15      	ldr	r3, [pc, #84]	; (8013590 <ResetMacParameters+0x23c>)
 801353c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013540:	685b      	ldr	r3, [r3, #4]
 8013542:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013544:	4b12      	ldr	r3, [pc, #72]	; (8013590 <ResetMacParameters+0x23c>)
 8013546:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801354a:	695b      	ldr	r3, [r3, #20]
 801354c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801354e:	4b14      	ldr	r3, [pc, #80]	; (80135a0 <ResetMacParameters+0x24c>)
 8013550:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013552:	4b14      	ldr	r3, [pc, #80]	; (80135a4 <ResetMacParameters+0x250>)
 8013554:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8013556:	4b14      	ldr	r3, [pc, #80]	; (80135a8 <ResetMacParameters+0x254>)
 8013558:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801355a:	4b14      	ldr	r3, [pc, #80]	; (80135ac <ResetMacParameters+0x258>)
 801355c:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801355e:	4b14      	ldr	r3, [pc, #80]	; (80135b0 <ResetMacParameters+0x25c>)
 8013560:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8013562:	4b14      	ldr	r3, [pc, #80]	; (80135b4 <ResetMacParameters+0x260>)
 8013564:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8013566:	4b14      	ldr	r3, [pc, #80]	; (80135b8 <ResetMacParameters+0x264>)
 8013568:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801356a:	4b14      	ldr	r3, [pc, #80]	; (80135bc <ResetMacParameters+0x268>)
 801356c:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 801356e:	4b14      	ldr	r3, [pc, #80]	; (80135c0 <ResetMacParameters+0x26c>)
 8013570:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8013572:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013576:	f107 031c 	add.w	r3, r7, #28
 801357a:	4a12      	ldr	r2, [pc, #72]	; (80135c4 <ResetMacParameters+0x270>)
 801357c:	4618      	mov	r0, r3
 801357e:	f002 f996 	bl	80158ae <LoRaMacClassBInit>
}
 8013582:	bf00      	nop
 8013584:	3748      	adds	r7, #72	; 0x48
 8013586:	46bd      	mov	sp, r7
 8013588:	bdb0      	pop	{r4, r5, r7, pc}
 801358a:	bf00      	nop
 801358c:	20000bf0 	.word	0x20000bf0
 8013590:	200006d4 	.word	0x200006d4
 8013594:	20000e14 	.word	0x20000e14
 8013598:	20000e28 	.word	0x20000e28
 801359c:	20001788 	.word	0x20001788
 80135a0:	20000b3c 	.word	0x20000b3c
 80135a4:	20000af4 	.word	0x20000af4
 80135a8:	20000b28 	.word	0x20000b28
 80135ac:	20000b65 	.word	0x20000b65
 80135b0:	20000cd4 	.word	0x20000cd4
 80135b4:	20000c38 	.word	0x20000c38
 80135b8:	20000c3c 	.word	0x20000c3c
 80135bc:	20000cd8 	.word	0x20000cd8
 80135c0:	20000d20 	.word	0x20000d20
 80135c4:	200011a4 	.word	0x200011a4

080135c8 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f00b ffa4 	bl	801f520 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80135d8:	4b11      	ldr	r3, [pc, #68]	; (8013620 <RxWindowSetup+0x58>)
 80135da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135dc:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80135de:	4b11      	ldr	r3, [pc, #68]	; (8013624 <RxWindowSetup+0x5c>)
 80135e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80135e4:	4a10      	ldr	r2, [pc, #64]	; (8013628 <RxWindowSetup+0x60>)
 80135e6:	6839      	ldr	r1, [r7, #0]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f004 f9ff 	bl	80179ec <RegionRxConfig>
 80135ee:	4603      	mov	r3, r0
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d010      	beq.n	8013616 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80135f4:	4b0d      	ldr	r3, [pc, #52]	; (801362c <RxWindowSetup+0x64>)
 80135f6:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 80135fa:	4b0c      	ldr	r3, [pc, #48]	; (801362c <RxWindowSetup+0x64>)
 80135fc:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013600:	4b07      	ldr	r3, [pc, #28]	; (8013620 <RxWindowSetup+0x58>)
 8013602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013604:	4a07      	ldr	r2, [pc, #28]	; (8013624 <RxWindowSetup+0x5c>)
 8013606:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013608:	4610      	mov	r0, r2
 801360a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801360c:	683b      	ldr	r3, [r7, #0]
 801360e:	7cda      	ldrb	r2, [r3, #19]
 8013610:	4b06      	ldr	r3, [pc, #24]	; (801362c <RxWindowSetup+0x64>)
 8013612:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8013616:	bf00      	nop
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	08020e4c 	.word	0x08020e4c
 8013624:	20000bf0 	.word	0x20000bf0
 8013628:	20000af8 	.word	0x20000af8
 801362c:	200006d4 	.word	0x200006d4

08013630 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013630:	b590      	push	{r4, r7, lr}
 8013632:	b083      	sub	sp, #12
 8013634:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013636:	4b1e      	ldr	r3, [pc, #120]	; (80136b0 <OpenContinuousRxCWindow+0x80>)
 8013638:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801363c:	4b1c      	ldr	r3, [pc, #112]	; (80136b0 <OpenContinuousRxCWindow+0x80>)
 801363e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013642:	b259      	sxtb	r1, r3
 8013644:	4b1a      	ldr	r3, [pc, #104]	; (80136b0 <OpenContinuousRxCWindow+0x80>)
 8013646:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801364a:	4b19      	ldr	r3, [pc, #100]	; (80136b0 <OpenContinuousRxCWindow+0x80>)
 801364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801364e:	4c19      	ldr	r4, [pc, #100]	; (80136b4 <OpenContinuousRxCWindow+0x84>)
 8013650:	9400      	str	r4, [sp, #0]
 8013652:	f004 f9a8 	bl	80179a6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013656:	4b18      	ldr	r3, [pc, #96]	; (80136b8 <OpenContinuousRxCWindow+0x88>)
 8013658:	2202      	movs	r2, #2
 801365a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801365e:	4b14      	ldr	r3, [pc, #80]	; (80136b0 <OpenContinuousRxCWindow+0x80>)
 8013660:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013664:	4b14      	ldr	r3, [pc, #80]	; (80136b8 <OpenContinuousRxCWindow+0x88>)
 8013666:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801366a:	4b13      	ldr	r3, [pc, #76]	; (80136b8 <OpenContinuousRxCWindow+0x88>)
 801366c:	2201      	movs	r2, #1
 801366e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013672:	4b0f      	ldr	r3, [pc, #60]	; (80136b0 <OpenContinuousRxCWindow+0x80>)
 8013674:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013678:	4a10      	ldr	r2, [pc, #64]	; (80136bc <OpenContinuousRxCWindow+0x8c>)
 801367a:	490e      	ldr	r1, [pc, #56]	; (80136b4 <OpenContinuousRxCWindow+0x84>)
 801367c:	4618      	mov	r0, r3
 801367e:	f004 f9b5 	bl	80179ec <RegionRxConfig>
 8013682:	4603      	mov	r3, r0
 8013684:	2b00      	cmp	r3, #0
 8013686:	d00f      	beq.n	80136a8 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013688:	4b0b      	ldr	r3, [pc, #44]	; (80136b8 <OpenContinuousRxCWindow+0x88>)
 801368a:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 801368e:	4b0a      	ldr	r3, [pc, #40]	; (80136b8 <OpenContinuousRxCWindow+0x88>)
 8013690:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8013694:	4b0a      	ldr	r3, [pc, #40]	; (80136c0 <OpenContinuousRxCWindow+0x90>)
 8013696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013698:	2000      	movs	r0, #0
 801369a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801369c:	4b06      	ldr	r3, [pc, #24]	; (80136b8 <OpenContinuousRxCWindow+0x88>)
 801369e:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80136a2:	4b05      	ldr	r3, [pc, #20]	; (80136b8 <OpenContinuousRxCWindow+0x88>)
 80136a4:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 80136a8:	bf00      	nop
 80136aa:	3704      	adds	r7, #4
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd90      	pop	{r4, r7, pc}
 80136b0:	20000bf0 	.word	0x20000bf0
 80136b4:	20000abc 	.word	0x20000abc
 80136b8:	200006d4 	.word	0x200006d4
 80136bc:	20000af8 	.word	0x20000af8
 80136c0:	08020e4c 	.word	0x08020e4c

080136c4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b088      	sub	sp, #32
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	60b9      	str	r1, [r7, #8]
 80136ce:	603b      	str	r3, [r7, #0]
 80136d0:	4613      	mov	r3, r2
 80136d2:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80136d4:	4b82      	ldr	r3, [pc, #520]	; (80138e0 <PrepareFrame+0x21c>)
 80136d6:	2200      	movs	r2, #0
 80136d8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80136da:	4b81      	ldr	r3, [pc, #516]	; (80138e0 <PrepareFrame+0x21c>)
 80136dc:	2200      	movs	r2, #0
 80136de:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 80136e2:	2300      	movs	r3, #0
 80136e4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80136e6:	2300      	movs	r3, #0
 80136e8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80136ea:	2300      	movs	r3, #0
 80136ec:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d101      	bne.n	80136f8 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80136f4:	2300      	movs	r3, #0
 80136f6:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80136f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80136fa:	461a      	mov	r2, r3
 80136fc:	6839      	ldr	r1, [r7, #0]
 80136fe:	4879      	ldr	r0, [pc, #484]	; (80138e4 <PrepareFrame+0x220>)
 8013700:	f007 feb1 	bl	801b466 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013704:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013706:	b2da      	uxtb	r2, r3
 8013708:	4b75      	ldr	r3, [pc, #468]	; (80138e0 <PrepareFrame+0x21c>)
 801370a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	781a      	ldrb	r2, [r3, #0]
 8013712:	4b73      	ldr	r3, [pc, #460]	; (80138e0 <PrepareFrame+0x21c>)
 8013714:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801371e:	b2db      	uxtb	r3, r3
 8013720:	2b07      	cmp	r3, #7
 8013722:	f000 80b9 	beq.w	8013898 <PrepareFrame+0x1d4>
 8013726:	2b07      	cmp	r3, #7
 8013728:	f300 80d0 	bgt.w	80138cc <PrepareFrame+0x208>
 801372c:	2b02      	cmp	r3, #2
 801372e:	d006      	beq.n	801373e <PrepareFrame+0x7a>
 8013730:	2b04      	cmp	r3, #4
 8013732:	f040 80cb 	bne.w	80138cc <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013736:	4b6a      	ldr	r3, [pc, #424]	; (80138e0 <PrepareFrame+0x21c>)
 8013738:	2201      	movs	r2, #1
 801373a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801373e:	4b68      	ldr	r3, [pc, #416]	; (80138e0 <PrepareFrame+0x21c>)
 8013740:	2204      	movs	r2, #4
 8013742:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013746:	4b66      	ldr	r3, [pc, #408]	; (80138e0 <PrepareFrame+0x21c>)
 8013748:	4a67      	ldr	r2, [pc, #412]	; (80138e8 <PrepareFrame+0x224>)
 801374a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801374e:	4b64      	ldr	r3, [pc, #400]	; (80138e0 <PrepareFrame+0x21c>)
 8013750:	22ff      	movs	r2, #255	; 0xff
 8013752:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	781a      	ldrb	r2, [r3, #0]
 801375a:	4b61      	ldr	r3, [pc, #388]	; (80138e0 <PrepareFrame+0x21c>)
 801375c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013760:	4a5f      	ldr	r2, [pc, #380]	; (80138e0 <PrepareFrame+0x21c>)
 8013762:	79fb      	ldrb	r3, [r7, #7]
 8013764:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013768:	4b60      	ldr	r3, [pc, #384]	; (80138ec <PrepareFrame+0x228>)
 801376a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801376e:	4a5c      	ldr	r2, [pc, #368]	; (80138e0 <PrepareFrame+0x21c>)
 8013770:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	781a      	ldrb	r2, [r3, #0]
 8013778:	4b59      	ldr	r3, [pc, #356]	; (80138e0 <PrepareFrame+0x21c>)
 801377a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801377e:	4b58      	ldr	r3, [pc, #352]	; (80138e0 <PrepareFrame+0x21c>)
 8013780:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013784:	4b56      	ldr	r3, [pc, #344]	; (80138e0 <PrepareFrame+0x21c>)
 8013786:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801378a:	4b55      	ldr	r3, [pc, #340]	; (80138e0 <PrepareFrame+0x21c>)
 801378c:	4a55      	ldr	r2, [pc, #340]	; (80138e4 <PrepareFrame+0x220>)
 801378e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013792:	f107 0318 	add.w	r3, r7, #24
 8013796:	4618      	mov	r0, r3
 8013798:	f003 f9dc 	bl	8016b54 <LoRaMacCryptoGetFCntUp>
 801379c:	4603      	mov	r3, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d001      	beq.n	80137a6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80137a2:	2312      	movs	r3, #18
 80137a4:	e098      	b.n	80138d8 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80137a6:	69bb      	ldr	r3, [r7, #24]
 80137a8:	b29a      	uxth	r2, r3
 80137aa:	4b4d      	ldr	r3, [pc, #308]	; (80138e0 <PrepareFrame+0x21c>)
 80137ac:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 80137b0:	4b4b      	ldr	r3, [pc, #300]	; (80138e0 <PrepareFrame+0x21c>)
 80137b2:	2200      	movs	r2, #0
 80137b4:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80137b8:	4b49      	ldr	r3, [pc, #292]	; (80138e0 <PrepareFrame+0x21c>)
 80137ba:	2200      	movs	r2, #0
 80137bc:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80137c0:	69bb      	ldr	r3, [r7, #24]
 80137c2:	4a47      	ldr	r2, [pc, #284]	; (80138e0 <PrepareFrame+0x21c>)
 80137c4:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80137c8:	f107 0314 	add.w	r3, r7, #20
 80137cc:	4618      	mov	r0, r3
 80137ce:	f002 fb8d 	bl	8015eec <LoRaMacCommandsGetSizeSerializedCmds>
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d001      	beq.n	80137dc <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80137d8:	2313      	movs	r3, #19
 80137da:	e07d      	b.n	80138d8 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d076      	beq.n	80138d0 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80137e2:	4b42      	ldr	r3, [pc, #264]	; (80138ec <PrepareFrame+0x228>)
 80137e4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7fe fd2b 	bl	8012244 <GetMaxAppPayloadWithoutFOptsLength>
 80137ee:	4603      	mov	r3, r0
 80137f0:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80137f2:	4b3b      	ldr	r3, [pc, #236]	; (80138e0 <PrepareFrame+0x21c>)
 80137f4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d01d      	beq.n	8013838 <PrepareFrame+0x174>
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	2b0f      	cmp	r3, #15
 8013800:	d81a      	bhi.n	8013838 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013802:	f107 0314 	add.w	r3, r7, #20
 8013806:	4a3a      	ldr	r2, [pc, #232]	; (80138f0 <PrepareFrame+0x22c>)
 8013808:	4619      	mov	r1, r3
 801380a:	200f      	movs	r0, #15
 801380c:	f002 fb84 	bl	8015f18 <LoRaMacCommandsSerializeCmds>
 8013810:	4603      	mov	r3, r0
 8013812:	2b00      	cmp	r3, #0
 8013814:	d001      	beq.n	801381a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013816:	2313      	movs	r3, #19
 8013818:	e05e      	b.n	80138d8 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	f003 030f 	and.w	r3, r3, #15
 8013820:	b2d9      	uxtb	r1, r3
 8013822:	68ba      	ldr	r2, [r7, #8]
 8013824:	7813      	ldrb	r3, [r2, #0]
 8013826:	f361 0303 	bfi	r3, r1, #0, #4
 801382a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	781a      	ldrb	r2, [r3, #0]
 8013830:	4b2b      	ldr	r3, [pc, #172]	; (80138e0 <PrepareFrame+0x21c>)
 8013832:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013836:	e04b      	b.n	80138d0 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013838:	4b29      	ldr	r3, [pc, #164]	; (80138e0 <PrepareFrame+0x21c>)
 801383a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801383e:	2b00      	cmp	r3, #0
 8013840:	d010      	beq.n	8013864 <PrepareFrame+0x1a0>
 8013842:	697b      	ldr	r3, [r7, #20]
 8013844:	2b0f      	cmp	r3, #15
 8013846:	d90d      	bls.n	8013864 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013848:	7ffb      	ldrb	r3, [r7, #31]
 801384a:	f107 0114 	add.w	r1, r7, #20
 801384e:	4a29      	ldr	r2, [pc, #164]	; (80138f4 <PrepareFrame+0x230>)
 8013850:	4618      	mov	r0, r3
 8013852:	f002 fb61 	bl	8015f18 <LoRaMacCommandsSerializeCmds>
 8013856:	4603      	mov	r3, r0
 8013858:	2b00      	cmp	r3, #0
 801385a:	d001      	beq.n	8013860 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801385c:	2313      	movs	r3, #19
 801385e:	e03b      	b.n	80138d8 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013860:	230a      	movs	r3, #10
 8013862:	e039      	b.n	80138d8 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013864:	7ffb      	ldrb	r3, [r7, #31]
 8013866:	f107 0114 	add.w	r1, r7, #20
 801386a:	4a22      	ldr	r2, [pc, #136]	; (80138f4 <PrepareFrame+0x230>)
 801386c:	4618      	mov	r0, r3
 801386e:	f002 fb53 	bl	8015f18 <LoRaMacCommandsSerializeCmds>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d001      	beq.n	801387c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013878:	2313      	movs	r3, #19
 801387a:	e02d      	b.n	80138d8 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801387c:	4b18      	ldr	r3, [pc, #96]	; (80138e0 <PrepareFrame+0x21c>)
 801387e:	2200      	movs	r2, #0
 8013880:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013884:	4b16      	ldr	r3, [pc, #88]	; (80138e0 <PrepareFrame+0x21c>)
 8013886:	4a1b      	ldr	r2, [pc, #108]	; (80138f4 <PrepareFrame+0x230>)
 8013888:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	b2da      	uxtb	r2, r3
 8013890:	4b13      	ldr	r3, [pc, #76]	; (80138e0 <PrepareFrame+0x21c>)
 8013892:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013896:	e01b      	b.n	80138d0 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d01a      	beq.n	80138d4 <PrepareFrame+0x210>
 801389e:	4b10      	ldr	r3, [pc, #64]	; (80138e0 <PrepareFrame+0x21c>)
 80138a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d015      	beq.n	80138d4 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80138a8:	4813      	ldr	r0, [pc, #76]	; (80138f8 <PrepareFrame+0x234>)
 80138aa:	4b0d      	ldr	r3, [pc, #52]	; (80138e0 <PrepareFrame+0x21c>)
 80138ac:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	461a      	mov	r2, r3
 80138b4:	6839      	ldr	r1, [r7, #0]
 80138b6:	f007 fdd6 	bl	801b466 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80138ba:	4b09      	ldr	r3, [pc, #36]	; (80138e0 <PrepareFrame+0x21c>)
 80138bc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80138c0:	b29b      	uxth	r3, r3
 80138c2:	3301      	adds	r3, #1
 80138c4:	b29a      	uxth	r2, r3
 80138c6:	4b06      	ldr	r3, [pc, #24]	; (80138e0 <PrepareFrame+0x21c>)
 80138c8:	801a      	strh	r2, [r3, #0]
            }
            break;
 80138ca:	e003      	b.n	80138d4 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80138cc:	2302      	movs	r3, #2
 80138ce:	e003      	b.n	80138d8 <PrepareFrame+0x214>
            break;
 80138d0:	bf00      	nop
 80138d2:	e000      	b.n	80138d6 <PrepareFrame+0x212>
            break;
 80138d4:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80138d6:	2300      	movs	r3, #0
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3720      	adds	r7, #32
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}
 80138e0:	200006d4 	.word	0x200006d4
 80138e4:	2000080c 	.word	0x2000080c
 80138e8:	200006d6 	.word	0x200006d6
 80138ec:	20000bf0 	.word	0x20000bf0
 80138f0:	200007ec 	.word	0x200007ec
 80138f4:	20000b70 	.word	0x20000b70
 80138f8:	200006d7 	.word	0x200006d7

080138fc <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b08a      	sub	sp, #40	; 0x28
 8013900:	af00      	add	r7, sp, #0
 8013902:	4603      	mov	r3, r0
 8013904:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013906:	2303      	movs	r3, #3
 8013908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 801390c:	2300      	movs	r3, #0
 801390e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013910:	79fb      	ldrb	r3, [r7, #7]
 8013912:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013914:	4b4b      	ldr	r3, [pc, #300]	; (8013a44 <SendFrameOnChannel+0x148>)
 8013916:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801391a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801391c:	4b49      	ldr	r3, [pc, #292]	; (8013a44 <SendFrameOnChannel+0x148>)
 801391e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013922:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013924:	4b47      	ldr	r3, [pc, #284]	; (8013a44 <SendFrameOnChannel+0x148>)
 8013926:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801392a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801392c:	4b45      	ldr	r3, [pc, #276]	; (8013a44 <SendFrameOnChannel+0x148>)
 801392e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013932:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013934:	4b44      	ldr	r3, [pc, #272]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013936:	881b      	ldrh	r3, [r3, #0]
 8013938:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801393a:	4b42      	ldr	r3, [pc, #264]	; (8013a44 <SendFrameOnChannel+0x148>)
 801393c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8013940:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013942:	4b40      	ldr	r3, [pc, #256]	; (8013a44 <SendFrameOnChannel+0x148>)
 8013944:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013948:	f107 020f 	add.w	r2, r7, #15
 801394c:	f107 0110 	add.w	r1, r7, #16
 8013950:	4b3e      	ldr	r3, [pc, #248]	; (8013a4c <SendFrameOnChannel+0x150>)
 8013952:	f004 f869 	bl	8017a28 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013956:	4b3c      	ldr	r3, [pc, #240]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013958:	2201      	movs	r2, #1
 801395a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801395e:	4b39      	ldr	r3, [pc, #228]	; (8013a44 <SendFrameOnChannel+0x148>)
 8013960:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013964:	b2da      	uxtb	r2, r3
 8013966:	4b38      	ldr	r3, [pc, #224]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013968:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 801396c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013970:	4b35      	ldr	r3, [pc, #212]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013972:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8013976:	79fb      	ldrb	r3, [r7, #7]
 8013978:	4a33      	ldr	r2, [pc, #204]	; (8013a48 <SendFrameOnChannel+0x14c>)
 801397a:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801397e:	4b32      	ldr	r3, [pc, #200]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013980:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013984:	4a30      	ldr	r2, [pc, #192]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013986:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801398a:	4b2f      	ldr	r3, [pc, #188]	; (8013a48 <SendFrameOnChannel+0x14c>)
 801398c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8013990:	4a2d      	ldr	r2, [pc, #180]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013992:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013996:	f001 fff6 	bl	8015986 <LoRaMacClassBIsBeaconModeActive>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	d00b      	beq.n	80139b8 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80139a0:	4b29      	ldr	r3, [pc, #164]	; (8013a48 <SendFrameOnChannel+0x14c>)
 80139a2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 80139a6:	4618      	mov	r0, r3
 80139a8:	f002 f858 	bl	8015a5c <LoRaMacClassBIsUplinkCollision>
 80139ac:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80139ae:	6a3b      	ldr	r3, [r7, #32]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d001      	beq.n	80139b8 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80139b4:	2310      	movs	r3, #16
 80139b6:	e040      	b.n	8013a3a <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80139b8:	4b22      	ldr	r3, [pc, #136]	; (8013a44 <SendFrameOnChannel+0x148>)
 80139ba:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80139be:	2b01      	cmp	r3, #1
 80139c0:	d101      	bne.n	80139c6 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80139c2:	f002 f855 	bl	8015a70 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80139c6:	f001 ffef 	bl	80159a8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80139ca:	4b1e      	ldr	r3, [pc, #120]	; (8013a44 <SendFrameOnChannel+0x148>)
 80139cc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80139d0:	b2db      	uxtb	r3, r3
 80139d2:	4a1d      	ldr	r2, [pc, #116]	; (8013a48 <SendFrameOnChannel+0x14c>)
 80139d4:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 80139d8:	4611      	mov	r1, r2
 80139da:	4618      	mov	r0, r3
 80139dc:	f7ff fc2a 	bl	8013234 <SecureFrame>
 80139e0:	4603      	mov	r3, r0
 80139e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80139e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d002      	beq.n	80139f4 <SendFrameOnChannel+0xf8>
    {
        return status;
 80139ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139f2:	e022      	b.n	8013a3a <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80139f4:	4b14      	ldr	r3, [pc, #80]	; (8013a48 <SendFrameOnChannel+0x14c>)
 80139f6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80139fa:	f043 0302 	orr.w	r3, r3, #2
 80139fe:	4a12      	ldr	r2, [pc, #72]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013a00:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8013a04:	4b10      	ldr	r3, [pc, #64]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013a06:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	b2da      	uxtb	r2, r3
 8013a0e:	4b0e      	ldr	r3, [pc, #56]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013a10:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8013a14:	4b0c      	ldr	r3, [pc, #48]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013a16:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8013a1a:	4b0b      	ldr	r3, [pc, #44]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013a1c:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8013a20:	4b09      	ldr	r3, [pc, #36]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013a22:	2200      	movs	r2, #0
 8013a24:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013a28:	4b09      	ldr	r3, [pc, #36]	; (8013a50 <SendFrameOnChannel+0x154>)
 8013a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a2c:	4a06      	ldr	r2, [pc, #24]	; (8013a48 <SendFrameOnChannel+0x14c>)
 8013a2e:	8812      	ldrh	r2, [r2, #0]
 8013a30:	b2d2      	uxtb	r2, r2
 8013a32:	4611      	mov	r1, r2
 8013a34:	4807      	ldr	r0, [pc, #28]	; (8013a54 <SendFrameOnChannel+0x158>)
 8013a36:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013a38:	2300      	movs	r3, #0
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3728      	adds	r7, #40	; 0x28
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bd80      	pop	{r7, pc}
 8013a42:	bf00      	nop
 8013a44:	20000bf0 	.word	0x20000bf0
 8013a48:	200006d4 	.word	0x200006d4
 8013a4c:	20000af0 	.word	0x20000af0
 8013a50:	08020e4c 	.word	0x08020e4c
 8013a54:	200006d6 	.word	0x200006d6

08013a58 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	4603      	mov	r3, r0
 8013a60:	6039      	str	r1, [r7, #0]
 8013a62:	80fb      	strh	r3, [r7, #6]
 8013a64:	4613      	mov	r3, r2
 8013a66:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013a68:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <SetTxContinuousWave+0x38>)
 8013a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a6c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013a70:	88fa      	ldrh	r2, [r7, #6]
 8013a72:	6838      	ldr	r0, [r7, #0]
 8013a74:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013a76:	4b07      	ldr	r3, [pc, #28]	; (8013a94 <SetTxContinuousWave+0x3c>)
 8013a78:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013a7c:	f043 0302 	orr.w	r3, r3, #2
 8013a80:	4a04      	ldr	r2, [pc, #16]	; (8013a94 <SetTxContinuousWave+0x3c>)
 8013a82:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013a86:	2300      	movs	r3, #0
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	08020e4c 	.word	0x08020e4c
 8013a94:	200006d4 	.word	0x200006d4

08013a98 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013aa2:	4b49      	ldr	r3, [pc, #292]	; (8013bc8 <RestoreNvmData+0x130>)
 8013aa4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d001      	beq.n	8013ab0 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8013aac:	2301      	movs	r3, #1
 8013aae:	e087      	b.n	8013bc0 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8013ab0:	2124      	movs	r1, #36	; 0x24
 8013ab2:	4846      	ldr	r0, [pc, #280]	; (8013bcc <RestoreNvmData+0x134>)
 8013ab4:	f007 fd2c 	bl	801b510 <Crc32>
 8013ab8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8013aba:	4b44      	ldr	r3, [pc, #272]	; (8013bcc <RestoreNvmData+0x134>)
 8013abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d001      	beq.n	8013ac8 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013ac4:	2317      	movs	r3, #23
 8013ac6:	e07b      	b.n	8013bc0 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8013ac8:	211c      	movs	r1, #28
 8013aca:	4841      	ldr	r0, [pc, #260]	; (8013bd0 <RestoreNvmData+0x138>)
 8013acc:	f007 fd20 	bl	801b510 <Crc32>
 8013ad0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8013ad2:	4b3e      	ldr	r3, [pc, #248]	; (8013bcc <RestoreNvmData+0x134>)
 8013ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ad6:	687a      	ldr	r2, [r7, #4]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d001      	beq.n	8013ae0 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013adc:	2317      	movs	r3, #23
 8013ade:	e06f      	b.n	8013bc0 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8013ae0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8013ae4:	483b      	ldr	r0, [pc, #236]	; (8013bd4 <RestoreNvmData+0x13c>)
 8013ae6:	f007 fd13 	bl	801b510 <Crc32>
 8013aea:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8013aec:	4b37      	ldr	r3, [pc, #220]	; (8013bcc <RestoreNvmData+0x134>)
 8013aee:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8013af2:	687a      	ldr	r2, [r7, #4]
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d001      	beq.n	8013afc <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013af8:	2317      	movs	r3, #23
 8013afa:	e061      	b.n	8013bc0 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8013afc:	21d4      	movs	r1, #212	; 0xd4
 8013afe:	4836      	ldr	r0, [pc, #216]	; (8013bd8 <RestoreNvmData+0x140>)
 8013b00:	f007 fd06 	bl	801b510 <Crc32>
 8013b04:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8013b06:	4b31      	ldr	r3, [pc, #196]	; (8013bcc <RestoreNvmData+0x134>)
 8013b08:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	429a      	cmp	r2, r3
 8013b10:	d001      	beq.n	8013b16 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013b12:	2317      	movs	r3, #23
 8013b14:	e054      	b.n	8013bc0 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8013b16:	2110      	movs	r1, #16
 8013b18:	4830      	ldr	r0, [pc, #192]	; (8013bdc <RestoreNvmData+0x144>)
 8013b1a:	f007 fcf9 	bl	801b510 <Crc32>
 8013b1e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8013b20:	4b2a      	ldr	r3, [pc, #168]	; (8013bcc <RestoreNvmData+0x134>)
 8013b22:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d001      	beq.n	8013b30 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013b2c:	2317      	movs	r3, #23
 8013b2e:	e047      	b.n	8013bc0 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8013b30:	f44f 715e 	mov.w	r1, #888	; 0x378
 8013b34:	482a      	ldr	r0, [pc, #168]	; (8013be0 <RestoreNvmData+0x148>)
 8013b36:	f007 fceb 	bl	801b510 <Crc32>
 8013b3a:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8013b3c:	4b23      	ldr	r3, [pc, #140]	; (8013bcc <RestoreNvmData+0x134>)
 8013b3e:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8013b42:	687a      	ldr	r2, [r7, #4]
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d001      	beq.n	8013b4c <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013b48:	2317      	movs	r3, #23
 8013b4a:	e039      	b.n	8013bc0 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8013b4c:	2114      	movs	r1, #20
 8013b4e:	4825      	ldr	r0, [pc, #148]	; (8013be4 <RestoreNvmData+0x14c>)
 8013b50:	f007 fcde 	bl	801b510 <Crc32>
 8013b54:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8013b56:	4b1d      	ldr	r3, [pc, #116]	; (8013bcc <RestoreNvmData+0x134>)
 8013b58:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8013b5c:	687a      	ldr	r2, [r7, #4]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d001      	beq.n	8013b66 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013b62:	2317      	movs	r3, #23
 8013b64:	e02c      	b.n	8013bc0 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8013b66:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013b6a:	4918      	ldr	r1, [pc, #96]	; (8013bcc <RestoreNvmData+0x134>)
 8013b6c:	481e      	ldr	r0, [pc, #120]	; (8013be8 <RestoreNvmData+0x150>)
 8013b6e:	f007 fc7a 	bl	801b466 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8013b72:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013b76:	2100      	movs	r1, #0
 8013b78:	4814      	ldr	r0, [pc, #80]	; (8013bcc <RestoreNvmData+0x134>)
 8013b7a:	f007 fcaf 	bl	801b4dc <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013b7e:	4b12      	ldr	r3, [pc, #72]	; (8013bc8 <RestoreNvmData+0x130>)
 8013b80:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013b84:	4b10      	ldr	r3, [pc, #64]	; (8013bc8 <RestoreNvmData+0x130>)
 8013b86:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8013b8a:	4b17      	ldr	r3, [pc, #92]	; (8013be8 <RestoreNvmData+0x150>)
 8013b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b8e:	4a0e      	ldr	r2, [pc, #56]	; (8013bc8 <RestoreNvmData+0x130>)
 8013b90:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013b94:	4b14      	ldr	r3, [pc, #80]	; (8013be8 <RestoreNvmData+0x150>)
 8013b96:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013b9a:	4b0b      	ldr	r3, [pc, #44]	; (8013bc8 <RestoreNvmData+0x130>)
 8013b9c:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013ba0:	4b09      	ldr	r3, [pc, #36]	; (8013bc8 <RestoreNvmData+0x130>)
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013ba8:	4b07      	ldr	r3, [pc, #28]	; (8013bc8 <RestoreNvmData+0x130>)
 8013baa:	2202      	movs	r2, #2
 8013bac:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013bb0:	4b0e      	ldr	r3, [pc, #56]	; (8013bec <RestoreNvmData+0x154>)
 8013bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013bb4:	4a0c      	ldr	r2, [pc, #48]	; (8013be8 <RestoreNvmData+0x150>)
 8013bb6:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8013bba:	4610      	mov	r0, r2
 8013bbc:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013bbe:	2300      	movs	r3, #0
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3708      	adds	r7, #8
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	200006d4 	.word	0x200006d4
 8013bcc:	200011bc 	.word	0x200011bc
 8013bd0:	200011e4 	.word	0x200011e4
 8013bd4:	20001204 	.word	0x20001204
 8013bd8:	20001308 	.word	0x20001308
 8013bdc:	200013e0 	.word	0x200013e0
 8013be0:	200013f4 	.word	0x200013f4
 8013be4:	20001770 	.word	0x20001770
 8013be8:	20000bf0 	.word	0x20000bf0
 8013bec:	08020e4c 	.word	0x08020e4c

08013bf0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013bf0:	b480      	push	{r7}
 8013bf2:	b083      	sub	sp, #12
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
 8013bf8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d002      	beq.n	8013c06 <DetermineFrameType+0x16>
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d101      	bne.n	8013c0a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013c06:	2303      	movs	r3, #3
 8013c08:	e03b      	b.n	8013c82 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	7b1b      	ldrb	r3, [r3, #12]
 8013c0e:	f003 030f 	and.w	r3, r3, #15
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d008      	beq.n	8013c2a <DetermineFrameType+0x3a>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d003      	beq.n	8013c2a <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	2200      	movs	r2, #0
 8013c26:	701a      	strb	r2, [r3, #0]
 8013c28:	e02a      	b.n	8013c80 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d103      	bne.n	8013c3c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	2201      	movs	r2, #1
 8013c38:	701a      	strb	r2, [r3, #0]
 8013c3a:	e021      	b.n	8013c80 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	7b1b      	ldrb	r3, [r3, #12]
 8013c40:	f003 030f 	and.w	r3, r3, #15
 8013c44:	b2db      	uxtb	r3, r3
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d108      	bne.n	8013c5c <DetermineFrameType+0x6c>
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d103      	bne.n	8013c5c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013c54:	683b      	ldr	r3, [r7, #0]
 8013c56:	2202      	movs	r2, #2
 8013c58:	701a      	strb	r2, [r3, #0]
 8013c5a:	e011      	b.n	8013c80 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	7b1b      	ldrb	r3, [r3, #12]
 8013c60:	f003 030f 	and.w	r3, r3, #15
 8013c64:	b2db      	uxtb	r3, r3
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d108      	bne.n	8013c7c <DetermineFrameType+0x8c>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d003      	beq.n	8013c7c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013c74:	683b      	ldr	r3, [r7, #0]
 8013c76:	2203      	movs	r2, #3
 8013c78:	701a      	strb	r2, [r3, #0]
 8013c7a:	e001      	b.n	8013c80 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013c7c:	2318      	movs	r3, #24
 8013c7e:	e000      	b.n	8013c82 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013c80:	2300      	movs	r3, #0
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	370c      	adds	r7, #12
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bc80      	pop	{r7}
 8013c8a:	4770      	bx	lr

08013c8c <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b083      	sub	sp, #12
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	4603      	mov	r3, r0
 8013c94:	460a      	mov	r2, r1
 8013c96:	71fb      	strb	r3, [r7, #7]
 8013c98:	4613      	mov	r3, r2
 8013c9a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8013c9c:	79fa      	ldrb	r2, [r7, #7]
 8013c9e:	79bb      	ldrb	r3, [r7, #6]
 8013ca0:	429a      	cmp	r2, r3
 8013ca2:	d301      	bcc.n	8013ca8 <CheckRetrans+0x1c>
    {
        return true;
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	e000      	b.n	8013caa <CheckRetrans+0x1e>
    }
    return false;
 8013ca8:	2300      	movs	r3, #0
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	370c      	adds	r7, #12
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bc80      	pop	{r7}
 8013cb2:	4770      	bx	lr

08013cb4 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8013cb8:	4b12      	ldr	r3, [pc, #72]	; (8013d04 <CheckRetransUnconfirmedUplink+0x50>)
 8013cba:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013cbe:	4a12      	ldr	r2, [pc, #72]	; (8013d08 <CheckRetransUnconfirmedUplink+0x54>)
 8013cc0:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8013cc4:	4611      	mov	r1, r2
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7ff ffe0 	bl	8013c8c <CheckRetrans>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d001      	beq.n	8013cd6 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	e014      	b.n	8013d00 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013cd6:	4b0b      	ldr	r3, [pc, #44]	; (8013d04 <CheckRetransUnconfirmedUplink+0x50>)
 8013cd8:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013cdc:	f003 0302 	and.w	r3, r3, #2
 8013ce0:	b2db      	uxtb	r3, r3
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d00b      	beq.n	8013cfe <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013ce6:	4b07      	ldr	r3, [pc, #28]	; (8013d04 <CheckRetransUnconfirmedUplink+0x50>)
 8013ce8:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d004      	beq.n	8013cfa <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8013cf0:	4b04      	ldr	r3, [pc, #16]	; (8013d04 <CheckRetransUnconfirmedUplink+0x50>)
 8013cf2:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8013cf6:	2b01      	cmp	r3, #1
 8013cf8:	d101      	bne.n	8013cfe <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	e000      	b.n	8013d00 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8013cfe:	2300      	movs	r3, #0
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	bd80      	pop	{r7, pc}
 8013d04:	200006d4 	.word	0x200006d4
 8013d08:	20000bf0 	.word	0x20000bf0

08013d0c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8013d10:	4b10      	ldr	r3, [pc, #64]	; (8013d54 <CheckRetransConfirmedUplink+0x48>)
 8013d12:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013d16:	4a10      	ldr	r2, [pc, #64]	; (8013d58 <CheckRetransConfirmedUplink+0x4c>)
 8013d18:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8013d1c:	4611      	mov	r1, r2
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7ff ffb4 	bl	8013c8c <CheckRetrans>
 8013d24:	4603      	mov	r3, r0
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d001      	beq.n	8013d2e <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8013d2a:	2301      	movs	r3, #1
 8013d2c:	e00f      	b.n	8013d4e <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d2e:	4b09      	ldr	r3, [pc, #36]	; (8013d54 <CheckRetransConfirmedUplink+0x48>)
 8013d30:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013d34:	f003 0302 	and.w	r3, r3, #2
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d006      	beq.n	8013d4c <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013d3e:	4b05      	ldr	r3, [pc, #20]	; (8013d54 <CheckRetransConfirmedUplink+0x48>)
 8013d40:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d001      	beq.n	8013d4c <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8013d48:	2301      	movs	r3, #1
 8013d4a:	e000      	b.n	8013d4e <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8013d4c:	2300      	movs	r3, #0
}
 8013d4e:	4618      	mov	r0, r3
 8013d50:	bd80      	pop	{r7, pc}
 8013d52:	bf00      	nop
 8013d54:	200006d4 	.word	0x200006d4
 8013d58:	20000bf0 	.word	0x20000bf0

08013d5c <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8013d5c:	b480      	push	{r7}
 8013d5e:	b083      	sub	sp, #12
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d6a:	d002      	beq.n	8013d72 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8013d72:	687b      	ldr	r3, [r7, #4]
}
 8013d74:	4618      	mov	r0, r3
 8013d76:	370c      	adds	r7, #12
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bc80      	pop	{r7}
 8013d7c:	4770      	bx	lr
	...

08013d80 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d84:	4b1a      	ldr	r3, [pc, #104]	; (8013df0 <StopRetransmission+0x70>)
 8013d86:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013d8a:	f003 0302 	and.w	r3, r3, #2
 8013d8e:	b2db      	uxtb	r3, r3
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d009      	beq.n	8013da8 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d94:	4b16      	ldr	r3, [pc, #88]	; (8013df0 <StopRetransmission+0x70>)
 8013d96:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d011      	beq.n	8013dc2 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013d9e:	4b14      	ldr	r3, [pc, #80]	; (8013df0 <StopRetransmission+0x70>)
 8013da0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013da4:	2b01      	cmp	r3, #1
 8013da6:	d00c      	beq.n	8013dc2 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013da8:	4b12      	ldr	r3, [pc, #72]	; (8013df4 <StopRetransmission+0x74>)
 8013daa:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d007      	beq.n	8013dc2 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8013db2:	4b10      	ldr	r3, [pc, #64]	; (8013df4 <StopRetransmission+0x74>)
 8013db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7ff ffd0 	bl	8013d5c <IncreaseAdrAckCounter>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	4a0d      	ldr	r2, [pc, #52]	; (8013df4 <StopRetransmission+0x74>)
 8013dc0:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013dc2:	4b0b      	ldr	r3, [pc, #44]	; (8013df0 <StopRetransmission+0x70>)
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8013dca:	4b09      	ldr	r3, [pc, #36]	; (8013df0 <StopRetransmission+0x70>)
 8013dcc:	2200      	movs	r2, #0
 8013dce:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8013dd2:	4b07      	ldr	r3, [pc, #28]	; (8013df0 <StopRetransmission+0x70>)
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013dda:	4b05      	ldr	r3, [pc, #20]	; (8013df0 <StopRetransmission+0x70>)
 8013ddc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013de0:	f023 0302 	bic.w	r3, r3, #2
 8013de4:	4a02      	ldr	r2, [pc, #8]	; (8013df0 <StopRetransmission+0x70>)
 8013de6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013dea:	2301      	movs	r3, #1
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	200006d4 	.word	0x200006d4
 8013df4:	20000bf0 	.word	0x20000bf0

08013df8 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013dfc:	4b08      	ldr	r3, [pc, #32]	; (8013e20 <OnMacProcessNotify+0x28>)
 8013dfe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00a      	beq.n	8013e1c <OnMacProcessNotify+0x24>
 8013e06:	4b06      	ldr	r3, [pc, #24]	; (8013e20 <OnMacProcessNotify+0x28>)
 8013e08:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e0c:	695b      	ldr	r3, [r3, #20]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d004      	beq.n	8013e1c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013e12:	4b03      	ldr	r3, [pc, #12]	; (8013e20 <OnMacProcessNotify+0x28>)
 8013e14:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e18:	695b      	ldr	r3, [r3, #20]
 8013e1a:	4798      	blx	r3
    }
}
 8013e1c:	bf00      	nop
 8013e1e:	bd80      	pop	{r7, pc}
 8013e20:	200006d4 	.word	0x200006d4

08013e24 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013e2e:	4b0b      	ldr	r3, [pc, #44]	; (8013e5c <CallNvmDataChangeCallback+0x38>)
 8013e30:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d00c      	beq.n	8013e52 <CallNvmDataChangeCallback+0x2e>
 8013e38:	4b08      	ldr	r3, [pc, #32]	; (8013e5c <CallNvmDataChangeCallback+0x38>)
 8013e3a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e3e:	691b      	ldr	r3, [r3, #16]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d006      	beq.n	8013e52 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013e44:	4b05      	ldr	r3, [pc, #20]	; (8013e5c <CallNvmDataChangeCallback+0x38>)
 8013e46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e4a:	691b      	ldr	r3, [r3, #16]
 8013e4c:	88fa      	ldrh	r2, [r7, #6]
 8013e4e:	4610      	mov	r0, r2
 8013e50:	4798      	blx	r3
    }
}
 8013e52:	bf00      	nop
 8013e54:	3708      	adds	r7, #8
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}
 8013e5a:	bf00      	nop
 8013e5c:	200006d4 	.word	0x200006d4

08013e60 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013e60:	b480      	push	{r7}
 8013e62:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013e64:	4b0b      	ldr	r3, [pc, #44]	; (8013e94 <IsRequestPending+0x34>)
 8013e66:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013e6a:	f003 0304 	and.w	r3, r3, #4
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d107      	bne.n	8013e84 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013e74:	4b07      	ldr	r3, [pc, #28]	; (8013e94 <IsRequestPending+0x34>)
 8013e76:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013e7a:	f003 0301 	and.w	r3, r3, #1
 8013e7e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d001      	beq.n	8013e88 <IsRequestPending+0x28>
    {
        return 1;
 8013e84:	2301      	movs	r3, #1
 8013e86:	e000      	b.n	8013e8a <IsRequestPending+0x2a>
    }
    return 0;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bc80      	pop	{r7}
 8013e90:	4770      	bx	lr
 8013e92:	bf00      	nop
 8013e94:	200006d4 	.word	0x200006d4

08013e98 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013e98:	b590      	push	{r4, r7, lr}
 8013e9a:	b091      	sub	sp, #68	; 0x44
 8013e9c:	af02      	add	r7, sp, #8
 8013e9e:	6178      	str	r0, [r7, #20]
 8013ea0:	6139      	str	r1, [r7, #16]
 8013ea2:	4613      	mov	r3, r2
 8013ea4:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d002      	beq.n	8013eb2 <LoRaMacInitialization+0x1a>
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d101      	bne.n	8013eb6 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013eb2:	2303      	movs	r3, #3
 8013eb4:	e27a      	b.n	80143ac <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013eb6:	697b      	ldr	r3, [r7, #20]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d00b      	beq.n	8013ed6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d007      	beq.n	8013ed6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d003      	beq.n	8013ed6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d101      	bne.n	8013eda <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ed6:	2303      	movs	r3, #3
 8013ed8:	e268      	b.n	80143ac <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013eda:	7bfb      	ldrb	r3, [r7, #15]
 8013edc:	4618      	mov	r0, r3
 8013ede:	f003 fcac 	bl	801783a <RegionIsActive>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	f083 0301 	eor.w	r3, r3, #1
 8013ee8:	b2db      	uxtb	r3, r3
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013eee:	2309      	movs	r3, #9
 8013ef0:	e25c      	b.n	80143ac <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013ef2:	6978      	ldr	r0, [r7, #20]
 8013ef4:	f002 f932 	bl	801615c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013ef8:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8013efc:	2100      	movs	r1, #0
 8013efe:	48c7      	ldr	r0, [pc, #796]	; (801421c <LoRaMacInitialization+0x384>)
 8013f00:	f007 faec 	bl	801b4dc <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013f04:	f240 521c 	movw	r2, #1308	; 0x51c
 8013f08:	2100      	movs	r1, #0
 8013f0a:	48c5      	ldr	r0, [pc, #788]	; (8014220 <LoRaMacInitialization+0x388>)
 8013f0c:	f007 fae6 	bl	801b4dc <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013f10:	4ac2      	ldr	r2, [pc, #776]	; (801421c <LoRaMacInitialization+0x384>)
 8013f12:	7bfb      	ldrb	r3, [r7, #15]
 8013f14:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013f18:	4bc0      	ldr	r3, [pc, #768]	; (801421c <LoRaMacInitialization+0x384>)
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8013f20:	4bbe      	ldr	r3, [pc, #760]	; (801421c <LoRaMacInitialization+0x384>)
 8013f22:	2200      	movs	r2, #0
 8013f24:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8013f28:	4bbc      	ldr	r3, [pc, #752]	; (801421c <LoRaMacInitialization+0x384>)
 8013f2a:	4abe      	ldr	r2, [pc, #760]	; (8014224 <LoRaMacInitialization+0x38c>)
 8013f2c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013f30:	2300      	movs	r3, #0
 8013f32:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013f36:	4bbc      	ldr	r3, [pc, #752]	; (8014228 <LoRaMacInitialization+0x390>)
 8013f38:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013f3a:	4bbc      	ldr	r3, [pc, #752]	; (801422c <LoRaMacInitialization+0x394>)
 8013f3c:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8013f3e:	4bbc      	ldr	r3, [pc, #752]	; (8014230 <LoRaMacInitialization+0x398>)
 8013f40:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013f42:	4bb6      	ldr	r3, [pc, #728]	; (801421c <LoRaMacInitialization+0x384>)
 8013f44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f48:	f107 021c 	add.w	r2, r7, #28
 8013f4c:	4611      	mov	r1, r2
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f003 fcbf 	bl	80178d2 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013f54:	230f      	movs	r3, #15
 8013f56:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013f5a:	4bb0      	ldr	r3, [pc, #704]	; (801421c <LoRaMacInitialization+0x384>)
 8013f5c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f60:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013f64:	4611      	mov	r1, r2
 8013f66:	4618      	mov	r0, r3
 8013f68:	f003 fc7c 	bl	8017864 <RegionGetPhyParam>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	bf14      	ite	ne
 8013f76:	2301      	movne	r3, #1
 8013f78:	2300      	moveq	r3, #0
 8013f7a:	b2da      	uxtb	r2, r3
 8013f7c:	4ba7      	ldr	r3, [pc, #668]	; (801421c <LoRaMacInitialization+0x384>)
 8013f7e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013f82:	230a      	movs	r3, #10
 8013f84:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013f88:	4ba4      	ldr	r3, [pc, #656]	; (801421c <LoRaMacInitialization+0x384>)
 8013f8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013f92:	4611      	mov	r1, r2
 8013f94:	4618      	mov	r0, r3
 8013f96:	f003 fc65 	bl	8017864 <RegionGetPhyParam>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8013f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fa0:	b25a      	sxtb	r2, r3
 8013fa2:	4b9e      	ldr	r3, [pc, #632]	; (801421c <LoRaMacInitialization+0x384>)
 8013fa4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8013fa8:	2306      	movs	r3, #6
 8013faa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013fae:	4b9b      	ldr	r3, [pc, #620]	; (801421c <LoRaMacInitialization+0x384>)
 8013fb0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fb4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013fb8:	4611      	mov	r1, r2
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f003 fc52 	bl	8017864 <RegionGetPhyParam>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fc6:	b25a      	sxtb	r2, r3
 8013fc8:	4b94      	ldr	r3, [pc, #592]	; (801421c <LoRaMacInitialization+0x384>)
 8013fca:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8013fce:	2310      	movs	r3, #16
 8013fd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013fd4:	4b91      	ldr	r3, [pc, #580]	; (801421c <LoRaMacInitialization+0x384>)
 8013fd6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013fda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013fde:	4611      	mov	r1, r2
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f003 fc3f 	bl	8017864 <RegionGetPhyParam>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8013fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fec:	4a8b      	ldr	r2, [pc, #556]	; (801421c <LoRaMacInitialization+0x384>)
 8013fee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8013ff2:	2311      	movs	r3, #17
 8013ff4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ff8:	4b88      	ldr	r3, [pc, #544]	; (801421c <LoRaMacInitialization+0x384>)
 8013ffa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ffe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014002:	4611      	mov	r1, r2
 8014004:	4618      	mov	r0, r3
 8014006:	f003 fc2d 	bl	8017864 <RegionGetPhyParam>
 801400a:	4603      	mov	r3, r0
 801400c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 801400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014010:	4a82      	ldr	r2, [pc, #520]	; (801421c <LoRaMacInitialization+0x384>)
 8014012:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8014016:	2312      	movs	r3, #18
 8014018:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801401c:	4b7f      	ldr	r3, [pc, #508]	; (801421c <LoRaMacInitialization+0x384>)
 801401e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014022:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014026:	4611      	mov	r1, r2
 8014028:	4618      	mov	r0, r3
 801402a:	f003 fc1b 	bl	8017864 <RegionGetPhyParam>
 801402e:	4603      	mov	r3, r0
 8014030:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014034:	4a79      	ldr	r2, [pc, #484]	; (801421c <LoRaMacInitialization+0x384>)
 8014036:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801403a:	2313      	movs	r3, #19
 801403c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014040:	4b76      	ldr	r3, [pc, #472]	; (801421c <LoRaMacInitialization+0x384>)
 8014042:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014046:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801404a:	4611      	mov	r1, r2
 801404c:	4618      	mov	r0, r3
 801404e:	f003 fc09 	bl	8017864 <RegionGetPhyParam>
 8014052:	4603      	mov	r3, r0
 8014054:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8014056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014058:	4a70      	ldr	r2, [pc, #448]	; (801421c <LoRaMacInitialization+0x384>)
 801405a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801405e:	2314      	movs	r3, #20
 8014060:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014064:	4b6d      	ldr	r3, [pc, #436]	; (801421c <LoRaMacInitialization+0x384>)
 8014066:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801406a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801406e:	4611      	mov	r1, r2
 8014070:	4618      	mov	r0, r3
 8014072:	f003 fbf7 	bl	8017864 <RegionGetPhyParam>
 8014076:	4603      	mov	r3, r0
 8014078:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407c:	4a67      	ldr	r2, [pc, #412]	; (801421c <LoRaMacInitialization+0x384>)
 801407e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8014082:	2316      	movs	r3, #22
 8014084:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014088:	4b64      	ldr	r3, [pc, #400]	; (801421c <LoRaMacInitialization+0x384>)
 801408a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801408e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014092:	4611      	mov	r1, r2
 8014094:	4618      	mov	r0, r3
 8014096:	f003 fbe5 	bl	8017864 <RegionGetPhyParam>
 801409a:	4603      	mov	r3, r0
 801409c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a0:	b2da      	uxtb	r2, r3
 80140a2:	4b5e      	ldr	r3, [pc, #376]	; (801421c <LoRaMacInitialization+0x384>)
 80140a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80140a8:	2317      	movs	r3, #23
 80140aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140ae:	4b5b      	ldr	r3, [pc, #364]	; (801421c <LoRaMacInitialization+0x384>)
 80140b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80140b8:	4611      	mov	r1, r2
 80140ba:	4618      	mov	r0, r3
 80140bc:	f003 fbd2 	bl	8017864 <RegionGetPhyParam>
 80140c0:	4603      	mov	r3, r0
 80140c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80140c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140c6:	4a55      	ldr	r2, [pc, #340]	; (801421c <LoRaMacInitialization+0x384>)
 80140c8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80140cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ce:	4a53      	ldr	r2, [pc, #332]	; (801421c <LoRaMacInitialization+0x384>)
 80140d0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80140d4:	2318      	movs	r3, #24
 80140d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140da:	4b50      	ldr	r3, [pc, #320]	; (801421c <LoRaMacInitialization+0x384>)
 80140dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80140e4:	4611      	mov	r1, r2
 80140e6:	4618      	mov	r0, r3
 80140e8:	f003 fbbc 	bl	8017864 <RegionGetPhyParam>
 80140ec:	4603      	mov	r3, r0
 80140ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80140f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f2:	b2da      	uxtb	r2, r3
 80140f4:	4b49      	ldr	r3, [pc, #292]	; (801421c <LoRaMacInitialization+0x384>)
 80140f6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80140fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140fc:	b2da      	uxtb	r2, r3
 80140fe:	4b47      	ldr	r3, [pc, #284]	; (801421c <LoRaMacInitialization+0x384>)
 8014100:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8014104:	231d      	movs	r3, #29
 8014106:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801410a:	4b44      	ldr	r3, [pc, #272]	; (801421c <LoRaMacInitialization+0x384>)
 801410c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014110:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014114:	4611      	mov	r1, r2
 8014116:	4618      	mov	r0, r3
 8014118:	f003 fba4 	bl	8017864 <RegionGetPhyParam>
 801411c:	4603      	mov	r3, r0
 801411e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014122:	b2da      	uxtb	r2, r3
 8014124:	4b3d      	ldr	r3, [pc, #244]	; (801421c <LoRaMacInitialization+0x384>)
 8014126:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801412a:	231e      	movs	r3, #30
 801412c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014130:	4b3a      	ldr	r3, [pc, #232]	; (801421c <LoRaMacInitialization+0x384>)
 8014132:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014136:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801413a:	4611      	mov	r1, r2
 801413c:	4618      	mov	r0, r3
 801413e:	f003 fb91 	bl	8017864 <RegionGetPhyParam>
 8014142:	4603      	mov	r3, r0
 8014144:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8014146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014148:	b2da      	uxtb	r2, r3
 801414a:	4b34      	ldr	r3, [pc, #208]	; (801421c <LoRaMacInitialization+0x384>)
 801414c:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014150:	231f      	movs	r3, #31
 8014152:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014156:	4b31      	ldr	r3, [pc, #196]	; (801421c <LoRaMacInitialization+0x384>)
 8014158:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801415c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014160:	4611      	mov	r1, r2
 8014162:	4618      	mov	r0, r3
 8014164:	f003 fb7e 	bl	8017864 <RegionGetPhyParam>
 8014168:	4603      	mov	r3, r0
 801416a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 801416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801416e:	4a2b      	ldr	r2, [pc, #172]	; (801421c <LoRaMacInitialization+0x384>)
 8014170:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014174:	2320      	movs	r3, #32
 8014176:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801417a:	4b28      	ldr	r3, [pc, #160]	; (801421c <LoRaMacInitialization+0x384>)
 801417c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014180:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014184:	4611      	mov	r1, r2
 8014186:	4618      	mov	r0, r3
 8014188:	f003 fb6c 	bl	8017864 <RegionGetPhyParam>
 801418c:	4603      	mov	r3, r0
 801418e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014192:	4a22      	ldr	r2, [pc, #136]	; (801421c <LoRaMacInitialization+0x384>)
 8014194:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014198:	230b      	movs	r3, #11
 801419a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801419e:	4b1f      	ldr	r3, [pc, #124]	; (801421c <LoRaMacInitialization+0x384>)
 80141a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80141a8:	4611      	mov	r1, r2
 80141aa:	4618      	mov	r0, r3
 80141ac:	f003 fb5a 	bl	8017864 <RegionGetPhyParam>
 80141b0:	4603      	mov	r3, r0
 80141b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80141b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b6:	b29a      	uxth	r2, r3
 80141b8:	4b18      	ldr	r3, [pc, #96]	; (801421c <LoRaMacInitialization+0x384>)
 80141ba:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80141be:	230c      	movs	r3, #12
 80141c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141c4:	4b15      	ldr	r3, [pc, #84]	; (801421c <LoRaMacInitialization+0x384>)
 80141c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80141ce:	4611      	mov	r1, r2
 80141d0:	4618      	mov	r0, r3
 80141d2:	f003 fb47 	bl	8017864 <RegionGetPhyParam>
 80141d6:	4603      	mov	r3, r0
 80141d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80141da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141dc:	b29a      	uxth	r2, r3
 80141de:	4b0f      	ldr	r3, [pc, #60]	; (801421c <LoRaMacInitialization+0x384>)
 80141e0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80141e4:	4b0d      	ldr	r3, [pc, #52]	; (801421c <LoRaMacInitialization+0x384>)
 80141e6:	2201      	movs	r2, #1
 80141e8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80141ec:	4b0b      	ldr	r3, [pc, #44]	; (801421c <LoRaMacInitialization+0x384>)
 80141ee:	220a      	movs	r2, #10
 80141f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80141f4:	4b09      	ldr	r3, [pc, #36]	; (801421c <LoRaMacInitialization+0x384>)
 80141f6:	2206      	movs	r2, #6
 80141f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80141fc:	4b07      	ldr	r3, [pc, #28]	; (801421c <LoRaMacInitialization+0x384>)
 80141fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014202:	4a06      	ldr	r2, [pc, #24]	; (801421c <LoRaMacInitialization+0x384>)
 8014204:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8014206:	4b05      	ldr	r3, [pc, #20]	; (801421c <LoRaMacInitialization+0x384>)
 8014208:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 801420c:	4b03      	ldr	r3, [pc, #12]	; (801421c <LoRaMacInitialization+0x384>)
 801420e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8014212:	4b02      	ldr	r3, [pc, #8]	; (801421c <LoRaMacInitialization+0x384>)
 8014214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014218:	e00c      	b.n	8014234 <LoRaMacInitialization+0x39c>
 801421a:	bf00      	nop
 801421c:	20000bf0 	.word	0x20000bf0
 8014220:	200006d4 	.word	0x200006d4
 8014224:	01000400 	.word	0x01000400
 8014228:	20000e14 	.word	0x20000e14
 801422c:	20000e28 	.word	0x20000e28
 8014230:	20001788 	.word	0x20001788
 8014234:	4a5f      	ldr	r2, [pc, #380]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014236:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8014238:	4b5e      	ldr	r3, [pc, #376]	; (80143b4 <LoRaMacInitialization+0x51c>)
 801423a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801423e:	4a5d      	ldr	r2, [pc, #372]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014240:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8014242:	4b5c      	ldr	r3, [pc, #368]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014248:	4a5a      	ldr	r2, [pc, #360]	; (80143b4 <LoRaMacInitialization+0x51c>)
 801424a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 801424c:	4b59      	ldr	r3, [pc, #356]	; (80143b4 <LoRaMacInitialization+0x51c>)
 801424e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014252:	4a58      	ldr	r2, [pc, #352]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014254:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8014256:	4b57      	ldr	r3, [pc, #348]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801425c:	4a55      	ldr	r2, [pc, #340]	; (80143b4 <LoRaMacInitialization+0x51c>)
 801425e:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014260:	4b54      	ldr	r3, [pc, #336]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014262:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8014266:	4b53      	ldr	r3, [pc, #332]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014268:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 801426c:	4b51      	ldr	r3, [pc, #324]	; (80143b4 <LoRaMacInitialization+0x51c>)
 801426e:	2201      	movs	r2, #1
 8014270:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014274:	4a50      	ldr	r2, [pc, #320]	; (80143b8 <LoRaMacInitialization+0x520>)
 8014276:	693b      	ldr	r3, [r7, #16]
 8014278:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 801427c:	2000      	movs	r0, #0
 801427e:	f7ff f869 	bl	8013354 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8014282:	4b4c      	ldr	r3, [pc, #304]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014284:	2201      	movs	r2, #1
 8014286:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 801428a:	4a4b      	ldr	r2, [pc, #300]	; (80143b8 <LoRaMacInitialization+0x520>)
 801428c:	697b      	ldr	r3, [r7, #20]
 801428e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8014292:	4b49      	ldr	r3, [pc, #292]	; (80143b8 <LoRaMacInitialization+0x520>)
 8014294:	2200      	movs	r2, #0
 8014296:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 801429a:	4b47      	ldr	r3, [pc, #284]	; (80143b8 <LoRaMacInitialization+0x520>)
 801429c:	2201      	movs	r2, #1
 801429e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80142a2:	4b44      	ldr	r3, [pc, #272]	; (80143b4 <LoRaMacInitialization+0x51c>)
 80142a4:	2200      	movs	r2, #0
 80142a6:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80142a8:	4b42      	ldr	r3, [pc, #264]	; (80143b4 <LoRaMacInitialization+0x51c>)
 80142aa:	2200      	movs	r2, #0
 80142ac:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80142ae:	2300      	movs	r3, #0
 80142b0:	9300      	str	r3, [sp, #0]
 80142b2:	4b42      	ldr	r3, [pc, #264]	; (80143bc <LoRaMacInitialization+0x524>)
 80142b4:	2200      	movs	r2, #0
 80142b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80142ba:	4841      	ldr	r0, [pc, #260]	; (80143c0 <LoRaMacInitialization+0x528>)
 80142bc:	f00b f88c 	bl	801f3d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80142c0:	2300      	movs	r3, #0
 80142c2:	9300      	str	r3, [sp, #0]
 80142c4:	4b3f      	ldr	r3, [pc, #252]	; (80143c4 <LoRaMacInitialization+0x52c>)
 80142c6:	2200      	movs	r2, #0
 80142c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80142cc:	483e      	ldr	r0, [pc, #248]	; (80143c8 <LoRaMacInitialization+0x530>)
 80142ce:	f00b f883 	bl	801f3d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80142d2:	2300      	movs	r3, #0
 80142d4:	9300      	str	r3, [sp, #0]
 80142d6:	4b3d      	ldr	r3, [pc, #244]	; (80143cc <LoRaMacInitialization+0x534>)
 80142d8:	2200      	movs	r2, #0
 80142da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80142de:	483c      	ldr	r0, [pc, #240]	; (80143d0 <LoRaMacInitialization+0x538>)
 80142e0:	f00b f87a 	bl	801f3d8 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80142e4:	2300      	movs	r3, #0
 80142e6:	9300      	str	r3, [sp, #0]
 80142e8:	4b3a      	ldr	r3, [pc, #232]	; (80143d4 <LoRaMacInitialization+0x53c>)
 80142ea:	2200      	movs	r2, #0
 80142ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80142f0:	4839      	ldr	r0, [pc, #228]	; (80143d8 <LoRaMacInitialization+0x540>)
 80142f2:	f00b f871 	bl	801f3d8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80142f6:	4c2f      	ldr	r4, [pc, #188]	; (80143b4 <LoRaMacInitialization+0x51c>)
 80142f8:	463b      	mov	r3, r7
 80142fa:	4618      	mov	r0, r3
 80142fc:	f00a fce8 	bl	801ecd0 <SysTimeGetMcuTime>
 8014300:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8014304:	463a      	mov	r2, r7
 8014306:	e892 0003 	ldmia.w	r2, {r0, r1}
 801430a:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 801430e:	4b33      	ldr	r3, [pc, #204]	; (80143dc <LoRaMacInitialization+0x544>)
 8014310:	2200      	movs	r2, #0
 8014312:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8014314:	4b28      	ldr	r3, [pc, #160]	; (80143b8 <LoRaMacInitialization+0x520>)
 8014316:	4a32      	ldr	r2, [pc, #200]	; (80143e0 <LoRaMacInitialization+0x548>)
 8014318:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801431c:	4b26      	ldr	r3, [pc, #152]	; (80143b8 <LoRaMacInitialization+0x520>)
 801431e:	4a31      	ldr	r2, [pc, #196]	; (80143e4 <LoRaMacInitialization+0x54c>)
 8014320:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8014324:	4b24      	ldr	r3, [pc, #144]	; (80143b8 <LoRaMacInitialization+0x520>)
 8014326:	4a30      	ldr	r2, [pc, #192]	; (80143e8 <LoRaMacInitialization+0x550>)
 8014328:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801432c:	4b22      	ldr	r3, [pc, #136]	; (80143b8 <LoRaMacInitialization+0x520>)
 801432e:	4a2f      	ldr	r2, [pc, #188]	; (80143ec <LoRaMacInitialization+0x554>)
 8014330:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8014334:	4b20      	ldr	r3, [pc, #128]	; (80143b8 <LoRaMacInitialization+0x520>)
 8014336:	4a2e      	ldr	r2, [pc, #184]	; (80143f0 <LoRaMacInitialization+0x558>)
 8014338:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801433c:	4b2d      	ldr	r3, [pc, #180]	; (80143f4 <LoRaMacInitialization+0x55c>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	482d      	ldr	r0, [pc, #180]	; (80143f8 <LoRaMacInitialization+0x560>)
 8014342:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8014344:	482d      	ldr	r0, [pc, #180]	; (80143fc <LoRaMacInitialization+0x564>)
 8014346:	f7fa f9f9 	bl	800e73c <SecureElementInit>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d001      	beq.n	8014354 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014350:	2311      	movs	r3, #17
 8014352:	e02b      	b.n	80143ac <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8014354:	4817      	ldr	r0, [pc, #92]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014356:	f002 fbc1 	bl	8016adc <LoRaMacCryptoInit>
 801435a:	4603      	mov	r3, r0
 801435c:	2b00      	cmp	r3, #0
 801435e:	d001      	beq.n	8014364 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014360:	2311      	movs	r3, #17
 8014362:	e023      	b.n	80143ac <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014364:	f001 fcbc 	bl	8015ce0 <LoRaMacCommandsInit>
 8014368:	4603      	mov	r3, r0
 801436a:	2b00      	cmp	r3, #0
 801436c:	d001      	beq.n	8014372 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801436e:	2313      	movs	r3, #19
 8014370:	e01c      	b.n	80143ac <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014372:	4823      	ldr	r0, [pc, #140]	; (8014400 <LoRaMacInitialization+0x568>)
 8014374:	f002 fc52 	bl	8016c1c <LoRaMacCryptoSetMulticastReference>
 8014378:	4603      	mov	r3, r0
 801437a:	2b00      	cmp	r3, #0
 801437c:	d001      	beq.n	8014382 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801437e:	2311      	movs	r3, #17
 8014380:	e014      	b.n	80143ac <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014382:	4b1c      	ldr	r3, [pc, #112]	; (80143f4 <LoRaMacInitialization+0x55c>)
 8014384:	695b      	ldr	r3, [r3, #20]
 8014386:	4798      	blx	r3
 8014388:	4603      	mov	r3, r0
 801438a:	4618      	mov	r0, r3
 801438c:	f007 f846 	bl	801b41c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014390:	4b18      	ldr	r3, [pc, #96]	; (80143f4 <LoRaMacInitialization+0x55c>)
 8014392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014394:	4a07      	ldr	r2, [pc, #28]	; (80143b4 <LoRaMacInitialization+0x51c>)
 8014396:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801439a:	4610      	mov	r0, r2
 801439c:	4798      	blx	r3
    Radio.Sleep( );
 801439e:	4b15      	ldr	r3, [pc, #84]	; (80143f4 <LoRaMacInitialization+0x55c>)
 80143a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a2:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80143a4:	2001      	movs	r0, #1
 80143a6:	f7fd fa7d 	bl	80118a4 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80143aa:	2300      	movs	r3, #0
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	373c      	adds	r7, #60	; 0x3c
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd90      	pop	{r4, r7, pc}
 80143b4:	20000bf0 	.word	0x20000bf0
 80143b8:	200006d4 	.word	0x200006d4
 80143bc:	08011e31 	.word	0x08011e31
 80143c0:	20000a3c 	.word	0x20000a3c
 80143c4:	08011ec1 	.word	0x08011ec1
 80143c8:	20000a54 	.word	0x20000a54
 80143cc:	08011f39 	.word	0x08011f39
 80143d0:	20000a6c 	.word	0x20000a6c
 80143d4:	08011fb9 	.word	0x08011fb9
 80143d8:	20000ad4 	.word	0x20000ad4
 80143dc:	20001818 	.word	0x20001818
 80143e0:	080108e1 	.word	0x080108e1
 80143e4:	0801093d 	.word	0x0801093d
 80143e8:	080109dd 	.word	0x080109dd
 80143ec:	080109b1 	.word	0x080109b1
 80143f0:	080109f9 	.word	0x080109f9
 80143f4:	08020e4c 	.word	0x08020e4c
 80143f8:	20000a20 	.word	0x20000a20
 80143fc:	20000d3c 	.word	0x20000d3c
 8014400:	20000cd8 	.word	0x20000cd8

08014404 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8014404:	b580      	push	{r7, lr}
 8014406:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014408:	4b04      	ldr	r3, [pc, #16]	; (801441c <LoRaMacStart+0x18>)
 801440a:	2200      	movs	r2, #0
 801440c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8014410:	f7fc fb08 	bl	8010a24 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8014414:	2300      	movs	r3, #0
}
 8014416:	4618      	mov	r0, r3
 8014418:	bd80      	pop	{r7, pc}
 801441a:	bf00      	nop
 801441c:	200006d4 	.word	0x200006d4

08014420 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014420:	b580      	push	{r7, lr}
 8014422:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014424:	f7fd fa06 	bl	8011834 <LoRaMacIsBusy>
 8014428:	4603      	mov	r3, r0
 801442a:	f083 0301 	eor.w	r3, r3, #1
 801442e:	b2db      	uxtb	r3, r3
 8014430:	2b00      	cmp	r3, #0
 8014432:	d00d      	beq.n	8014450 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014434:	4b0b      	ldr	r3, [pc, #44]	; (8014464 <LoRaMacStop+0x44>)
 8014436:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801443a:	2b02      	cmp	r3, #2
 801443c:	d102      	bne.n	8014444 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801443e:	4b0a      	ldr	r3, [pc, #40]	; (8014468 <LoRaMacStop+0x48>)
 8014440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014442:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8014444:	4b09      	ldr	r3, [pc, #36]	; (801446c <LoRaMacStop+0x4c>)
 8014446:	2201      	movs	r2, #1
 8014448:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 801444c:	2300      	movs	r3, #0
 801444e:	e007      	b.n	8014460 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014450:	4b06      	ldr	r3, [pc, #24]	; (801446c <LoRaMacStop+0x4c>)
 8014452:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014456:	2b01      	cmp	r3, #1
 8014458:	d101      	bne.n	801445e <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 801445a:	2300      	movs	r3, #0
 801445c:	e000      	b.n	8014460 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801445e:	2301      	movs	r3, #1
}
 8014460:	4618      	mov	r0, r3
 8014462:	bd80      	pop	{r7, pc}
 8014464:	20000bf0 	.word	0x20000bf0
 8014468:	08020e4c 	.word	0x08020e4c
 801446c:	200006d4 	.word	0x200006d4

08014470 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014470:	b580      	push	{r7, lr}
 8014472:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014474:	4812      	ldr	r0, [pc, #72]	; (80144c0 <LoRaMacHalt+0x50>)
 8014476:	f00b f853 	bl	801f520 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801447a:	4812      	ldr	r0, [pc, #72]	; (80144c4 <LoRaMacHalt+0x54>)
 801447c:	f00b f850 	bl	801f520 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014480:	4811      	ldr	r0, [pc, #68]	; (80144c8 <LoRaMacHalt+0x58>)
 8014482:	f00b f84d 	bl	801f520 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8014486:	4811      	ldr	r0, [pc, #68]	; (80144cc <LoRaMacHalt+0x5c>)
 8014488:	f00b f84a 	bl	801f520 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 801448c:	f001 fa8c 	bl	80159a8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8014490:	4b0f      	ldr	r3, [pc, #60]	; (80144d0 <LoRaMacHalt+0x60>)
 8014492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014494:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8014496:	4b0f      	ldr	r3, [pc, #60]	; (80144d4 <LoRaMacHalt+0x64>)
 8014498:	2200      	movs	r2, #0
 801449a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 801449e:	480e      	ldr	r0, [pc, #56]	; (80144d8 <LoRaMacHalt+0x68>)
 80144a0:	f7fd fba2 	bl	8011be8 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80144a4:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80144a8:	490b      	ldr	r1, [pc, #44]	; (80144d8 <LoRaMacHalt+0x68>)
 80144aa:	480c      	ldr	r0, [pc, #48]	; (80144dc <LoRaMacHalt+0x6c>)
 80144ac:	f006 ffdb 	bl	801b466 <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 80144b0:	4b08      	ldr	r3, [pc, #32]	; (80144d4 <LoRaMacHalt+0x64>)
 80144b2:	2201      	movs	r2, #1
 80144b4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 80144b8:	2300      	movs	r3, #0
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	bd80      	pop	{r7, pc}
 80144be:	bf00      	nop
 80144c0:	20000a3c 	.word	0x20000a3c
 80144c4:	20000a54 	.word	0x20000a54
 80144c8:	20000a6c 	.word	0x20000a6c
 80144cc:	20000ad4 	.word	0x20000ad4
 80144d0:	08020e4c 	.word	0x08020e4c
 80144d4:	200006d4 	.word	0x200006d4
 80144d8:	20000bf0 	.word	0x20000bf0
 80144dc:	200011bc 	.word	0x200011bc

080144e0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80144e0:	b590      	push	{r4, r7, lr}
 80144e2:	b08d      	sub	sp, #52	; 0x34
 80144e4:	af02      	add	r7, sp, #8
 80144e6:	4603      	mov	r3, r0
 80144e8:	6039      	str	r1, [r7, #0]
 80144ea:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80144ec:	4b42      	ldr	r3, [pc, #264]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 80144ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144f0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80144f2:	4b41      	ldr	r3, [pc, #260]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 80144f4:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80144f8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80144fa:	4b3f      	ldr	r3, [pc, #252]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 80144fc:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8014500:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8014502:	4b3e      	ldr	r3, [pc, #248]	; (80145fc <LoRaMacQueryTxPossible+0x11c>)
 8014504:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014508:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801450a:	2300      	movs	r3, #0
 801450c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d101      	bne.n	8014518 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014514:	2303      	movs	r3, #3
 8014516:	e06b      	b.n	80145f0 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8014518:	2300      	movs	r3, #0
 801451a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801451c:	4b36      	ldr	r3, [pc, #216]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 801451e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014522:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014524:	4b34      	ldr	r3, [pc, #208]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 8014526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014528:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801452a:	4b33      	ldr	r3, [pc, #204]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 801452c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8014530:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014532:	4b31      	ldr	r3, [pc, #196]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 8014534:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8014538:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801453a:	4b2f      	ldr	r3, [pc, #188]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 801453c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014540:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014544:	4b2c      	ldr	r3, [pc, #176]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 8014546:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801454a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 801454e:	4b2b      	ldr	r3, [pc, #172]	; (80145fc <LoRaMacQueryTxPossible+0x11c>)
 8014550:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014558:	4b27      	ldr	r3, [pc, #156]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 801455a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801455e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8014562:	4b25      	ldr	r3, [pc, #148]	; (80145f8 <LoRaMacQueryTxPossible+0x118>)
 8014564:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014568:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 801456c:	f107 040d 	add.w	r4, r7, #13
 8014570:	f107 020e 	add.w	r2, r7, #14
 8014574:	f107 010f 	add.w	r1, r7, #15
 8014578:	f107 0014 	add.w	r0, r7, #20
 801457c:	f107 0310 	add.w	r3, r7, #16
 8014580:	9300      	str	r3, [sp, #0]
 8014582:	4623      	mov	r3, r4
 8014584:	f001 f8da 	bl	801573c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801458c:	4618      	mov	r0, r3
 801458e:	f7fd fe59 	bl	8012244 <GetMaxAppPayloadWithoutFOptsLength>
 8014592:	4603      	mov	r3, r0
 8014594:	461a      	mov	r2, r3
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801459a:	f107 0308 	add.w	r3, r7, #8
 801459e:	4618      	mov	r0, r3
 80145a0:	f001 fca4 	bl	8015eec <LoRaMacCommandsGetSizeSerializedCmds>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d001      	beq.n	80145ae <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80145aa:	2313      	movs	r3, #19
 80145ac:	e020      	b.n	80145f0 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	2b0f      	cmp	r3, #15
 80145b2:	d819      	bhi.n	80145e8 <LoRaMacQueryTxPossible+0x108>
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	785b      	ldrb	r3, [r3, #1]
 80145b8:	461a      	mov	r2, r3
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d313      	bcc.n	80145e8 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	785a      	ldrb	r2, [r3, #1]
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	b2db      	uxtb	r3, r3
 80145c8:	1ad3      	subs	r3, r2, r3
 80145ca:	b2da      	uxtb	r2, r3
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	785b      	ldrb	r3, [r3, #1]
 80145d4:	4619      	mov	r1, r3
 80145d6:	79fa      	ldrb	r2, [r7, #7]
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	4413      	add	r3, r2
 80145dc:	4299      	cmp	r1, r3
 80145de:	d301      	bcc.n	80145e4 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 80145e0:	2300      	movs	r3, #0
 80145e2:	e005      	b.n	80145f0 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 80145e4:	2308      	movs	r3, #8
 80145e6:	e003      	b.n	80145f0 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	2200      	movs	r2, #0
 80145ec:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80145ee:	2308      	movs	r3, #8
    }
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	372c      	adds	r7, #44	; 0x2c
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd90      	pop	{r4, r7, pc}
 80145f8:	20000bf0 	.word	0x20000bf0
 80145fc:	200006d4 	.word	0x200006d4

08014600 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014600:	b590      	push	{r4, r7, lr}
 8014602:	b087      	sub	sp, #28
 8014604:	af00      	add	r7, sp, #0
 8014606:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014608:	2300      	movs	r3, #0
 801460a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d101      	bne.n	8014616 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014612:	2303      	movs	r3, #3
 8014614:	e1c4      	b.n	80149a0 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	2b41      	cmp	r3, #65	; 0x41
 801461c:	f200 81b9 	bhi.w	8014992 <LoRaMacMibGetRequestConfirm+0x392>
 8014620:	a201      	add	r2, pc, #4	; (adr r2, 8014628 <LoRaMacMibGetRequestConfirm+0x28>)
 8014622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014626:	bf00      	nop
 8014628:	08014731 	.word	0x08014731
 801462c:	0801473d 	.word	0x0801473d
 8014630:	08014749 	.word	0x08014749
 8014634:	08014755 	.word	0x08014755
 8014638:	08014761 	.word	0x08014761
 801463c:	0801476d 	.word	0x0801476d
 8014640:	08014779 	.word	0x08014779
 8014644:	08014993 	.word	0x08014993
 8014648:	08014993 	.word	0x08014993
 801464c:	08014993 	.word	0x08014993
 8014650:	08014993 	.word	0x08014993
 8014654:	08014993 	.word	0x08014993
 8014658:	08014993 	.word	0x08014993
 801465c:	08014993 	.word	0x08014993
 8014660:	08014993 	.word	0x08014993
 8014664:	0801478d 	.word	0x0801478d
 8014668:	08014799 	.word	0x08014799
 801466c:	080147a5 	.word	0x080147a5
 8014670:	080147c7 	.word	0x080147c7
 8014674:	080147d9 	.word	0x080147d9
 8014678:	080147eb 	.word	0x080147eb
 801467c:	080147fd 	.word	0x080147fd
 8014680:	08014831 	.word	0x08014831
 8014684:	0801480f 	.word	0x0801480f
 8014688:	08014853 	.word	0x08014853
 801468c:	0801485f 	.word	0x0801485f
 8014690:	08014869 	.word	0x08014869
 8014694:	08014873 	.word	0x08014873
 8014698:	0801487d 	.word	0x0801487d
 801469c:	08014887 	.word	0x08014887
 80146a0:	08014891 	.word	0x08014891
 80146a4:	080148bd 	.word	0x080148bd
 80146a8:	080148c9 	.word	0x080148c9
 80146ac:	080148e1 	.word	0x080148e1
 80146b0:	080148d5 	.word	0x080148d5
 80146b4:	080148ed 	.word	0x080148ed
 80146b8:	080148f7 	.word	0x080148f7
 80146bc:	08014903 	.word	0x08014903
 80146c0:	0801491f 	.word	0x0801491f
 80146c4:	0801490f 	.word	0x0801490f
 80146c8:	08014917 	.word	0x08014917
 80146cc:	08014993 	.word	0x08014993
 80146d0:	0801492b 	.word	0x0801492b
 80146d4:	08014993 	.word	0x08014993
 80146d8:	08014993 	.word	0x08014993
 80146dc:	08014993 	.word	0x08014993
 80146e0:	08014993 	.word	0x08014993
 80146e4:	08014993 	.word	0x08014993
 80146e8:	08014993 	.word	0x08014993
 80146ec:	08014993 	.word	0x08014993
 80146f0:	08014993 	.word	0x08014993
 80146f4:	08014993 	.word	0x08014993
 80146f8:	08014993 	.word	0x08014993
 80146fc:	08014993 	.word	0x08014993
 8014700:	08014993 	.word	0x08014993
 8014704:	08014993 	.word	0x08014993
 8014708:	08014993 	.word	0x08014993
 801470c:	08014993 	.word	0x08014993
 8014710:	0801493f 	.word	0x0801493f
 8014714:	0801494b 	.word	0x0801494b
 8014718:	08014957 	.word	0x08014957
 801471c:	08014963 	.word	0x08014963
 8014720:	0801496f 	.word	0x0801496f
 8014724:	0801497b 	.word	0x0801497b
 8014728:	08014987 	.word	0x08014987
 801472c:	0801498d 	.word	0x0801498d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8014730:	4b9d      	ldr	r3, [pc, #628]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014732:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	711a      	strb	r2, [r3, #4]
            break;
 801473a:	e130      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801473c:	4b9a      	ldr	r3, [pc, #616]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801473e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	711a      	strb	r2, [r3, #4]
            break;
 8014746:	e12a      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	f7fa fab5 	bl	800ecbc <SecureElementGetDevEui>
            break;
 8014752:	e124      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	685b      	ldr	r3, [r3, #4]
 8014758:	4618      	mov	r0, r3
 801475a:	f7fa fadf 	bl	800ed1c <SecureElementGetJoinEui>
            break;
 801475e:	e11e      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014760:	4b91      	ldr	r3, [pc, #580]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014762:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	711a      	strb	r2, [r3, #4]
            break;
 801476a:	e118      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801476c:	4b8e      	ldr	r3, [pc, #568]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801476e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	605a      	str	r2, [r3, #4]
            break;
 8014776:	e112      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8014778:	4b8b      	ldr	r3, [pc, #556]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801477a:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	3304      	adds	r3, #4
 8014782:	4619      	mov	r1, r3
 8014784:	4610      	mov	r0, r2
 8014786:	f7fa fafb 	bl	800ed80 <SecureElementGetDevAddr>
            break;
 801478a:	e108      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801478c:	4b86      	ldr	r3, [pc, #536]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801478e:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	711a      	strb	r2, [r3, #4]
            break;
 8014796:	e102      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014798:	4b83      	ldr	r3, [pc, #524]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801479a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	711a      	strb	r2, [r3, #4]
            break;
 80147a2:	e0fc      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80147a4:	231c      	movs	r3, #28
 80147a6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80147a8:	4b7f      	ldr	r3, [pc, #508]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80147ae:	f107 0210 	add.w	r2, r7, #16
 80147b2:	4611      	mov	r1, r2
 80147b4:	4618      	mov	r0, r3
 80147b6:	f003 f855 	bl	8017864 <RegionGetPhyParam>
 80147ba:	4603      	mov	r3, r0
 80147bc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80147be:	68fa      	ldr	r2, [r7, #12]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	605a      	str	r2, [r3, #4]
            break;
 80147c4:	e0eb      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	4a77      	ldr	r2, [pc, #476]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147ca:	3304      	adds	r3, #4
 80147cc:	326c      	adds	r2, #108	; 0x6c
 80147ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147d2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80147d6:	e0e2      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	4a73      	ldr	r2, [pc, #460]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147dc:	3304      	adds	r3, #4
 80147de:	32b4      	adds	r2, #180	; 0xb4
 80147e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147e4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80147e8:	e0d9      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	4a6e      	ldr	r2, [pc, #440]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80147ee:	3304      	adds	r3, #4
 80147f0:	3274      	adds	r2, #116	; 0x74
 80147f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147f6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80147fa:	e0d0      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	4a6a      	ldr	r2, [pc, #424]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014800:	3304      	adds	r3, #4
 8014802:	32bc      	adds	r2, #188	; 0xbc
 8014804:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014808:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801480c:	e0c7      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801480e:	231a      	movs	r3, #26
 8014810:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014812:	4b65      	ldr	r3, [pc, #404]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014814:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014818:	f107 0210 	add.w	r2, r7, #16
 801481c:	4611      	mov	r1, r2
 801481e:	4618      	mov	r0, r3
 8014820:	f003 f820 	bl	8017864 <RegionGetPhyParam>
 8014824:	4603      	mov	r3, r0
 8014826:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014828:	68fa      	ldr	r2, [r7, #12]
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	605a      	str	r2, [r3, #4]
            break;
 801482e:	e0b6      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014830:	2319      	movs	r3, #25
 8014832:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014834:	4b5c      	ldr	r3, [pc, #368]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014836:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801483a:	f107 0210 	add.w	r2, r7, #16
 801483e:	4611      	mov	r1, r2
 8014840:	4618      	mov	r0, r3
 8014842:	f003 f80f 	bl	8017864 <RegionGetPhyParam>
 8014846:	4603      	mov	r3, r0
 8014848:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801484a:	68fa      	ldr	r2, [r7, #12]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	605a      	str	r2, [r3, #4]
            break;
 8014850:	e0a5      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014852:	4b55      	ldr	r3, [pc, #340]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014854:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	711a      	strb	r2, [r3, #4]
            break;
 801485c:	e09f      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801485e:	4b52      	ldr	r3, [pc, #328]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	605a      	str	r2, [r3, #4]
            break;
 8014866:	e09a      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014868:	4b4f      	ldr	r3, [pc, #316]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801486a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	605a      	str	r2, [r3, #4]
            break;
 8014870:	e095      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014872:	4b4d      	ldr	r3, [pc, #308]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	605a      	str	r2, [r3, #4]
            break;
 801487a:	e090      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801487c:	4b4a      	ldr	r3, [pc, #296]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801487e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	605a      	str	r2, [r3, #4]
            break;
 8014884:	e08b      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8014886:	4b48      	ldr	r3, [pc, #288]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014888:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	605a      	str	r2, [r3, #4]
            break;
 801488e:	e086      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8014890:	2302      	movs	r3, #2
 8014892:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014894:	4b44      	ldr	r3, [pc, #272]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014896:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801489a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801489c:	4b42      	ldr	r3, [pc, #264]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801489e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148a2:	f107 0210 	add.w	r2, r7, #16
 80148a6:	4611      	mov	r1, r2
 80148a8:	4618      	mov	r0, r3
 80148aa:	f002 ffdb 	bl	8017864 <RegionGetPhyParam>
 80148ae:	4603      	mov	r3, r0
 80148b0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	b25a      	sxtb	r2, r3
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	711a      	strb	r2, [r3, #4]
            break;
 80148ba:	e070      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80148bc:	4b3a      	ldr	r3, [pc, #232]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148be:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	711a      	strb	r2, [r3, #4]
            break;
 80148c6:	e06a      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80148c8:	4b37      	ldr	r3, [pc, #220]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148ca:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	711a      	strb	r2, [r3, #4]
            break;
 80148d2:	e064      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80148d4:	4b34      	ldr	r3, [pc, #208]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148d6:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	711a      	strb	r2, [r3, #4]
            break;
 80148de:	e05e      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80148e0:	4b31      	ldr	r3, [pc, #196]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148e2:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	711a      	strb	r2, [r3, #4]
            break;
 80148ea:	e058      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80148ec:	4b2e      	ldr	r3, [pc, #184]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	605a      	str	r2, [r3, #4]
            break;
 80148f4:	e053      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80148f6:	4b2c      	ldr	r3, [pc, #176]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 80148f8:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	711a      	strb	r2, [r3, #4]
            break;
 8014900:	e04d      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014902:	4b29      	ldr	r3, [pc, #164]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014904:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	605a      	str	r2, [r3, #4]
            break;
 801490c:	e047      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	4a25      	ldr	r2, [pc, #148]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014912:	605a      	str	r2, [r3, #4]
            break;
 8014914:	e043      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	4a24      	ldr	r2, [pc, #144]	; (80149ac <LoRaMacMibGetRequestConfirm+0x3ac>)
 801491a:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 801491c:	e03f      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801491e:	4b22      	ldr	r3, [pc, #136]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014920:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	605a      	str	r2, [r3, #4]
            break;
 8014928:	e039      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4a1e      	ldr	r2, [pc, #120]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801492e:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8014932:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014934:	687c      	ldr	r4, [r7, #4]
 8014936:	f003 f9a3 	bl	8017c80 <RegionGetVersion>
 801493a:	60a0      	str	r0, [r4, #8]
            break;
 801493c:	e02f      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801493e:	4b1a      	ldr	r3, [pc, #104]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014940:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	605a      	str	r2, [r3, #4]
            break;
 8014948:	e029      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 801494a:	4b17      	ldr	r3, [pc, #92]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801494c:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	711a      	strb	r2, [r3, #4]
            break;
 8014954:	e023      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8014956:	4b14      	ldr	r3, [pc, #80]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014958:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	809a      	strh	r2, [r3, #4]
            break;
 8014960:	e01d      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8014962:	4b11      	ldr	r3, [pc, #68]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014964:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	809a      	strh	r2, [r3, #4]
            break;
 801496c:	e017      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801496e:	4b0e      	ldr	r3, [pc, #56]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 8014970:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	809a      	strh	r2, [r3, #4]
            break;
 8014978:	e011      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 801497a:	4b0b      	ldr	r3, [pc, #44]	; (80149a8 <LoRaMacMibGetRequestConfirm+0x3a8>)
 801497c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	809a      	strh	r2, [r3, #4]
            break;
 8014984:	e00b      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014986:	2318      	movs	r3, #24
 8014988:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801498a:	e008      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801498c:	2318      	movs	r3, #24
 801498e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014990:	e005      	b.n	801499e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f001 f81f 	bl	80159d6 <LoRaMacClassBMibGetRequestConfirm>
 8014998:	4603      	mov	r3, r0
 801499a:	75fb      	strb	r3, [r7, #23]
            break;
 801499c:	bf00      	nop
        }
    }
    return status;
 801499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	371c      	adds	r7, #28
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd90      	pop	{r4, r7, pc}
 80149a8:	20000bf0 	.word	0x20000bf0
 80149ac:	200011bc 	.word	0x200011bc

080149b0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80149b8:	2300      	movs	r3, #0
 80149ba:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d101      	bne.n	80149c6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80149c2:	2303      	movs	r3, #3
 80149c4:	e396      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80149c6:	4bbd      	ldr	r3, [pc, #756]	; (8014cbc <LoRaMacMibSetRequestConfirm+0x30c>)
 80149c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80149cc:	f003 0302 	and.w	r3, r3, #2
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d001      	beq.n	80149d8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80149d4:	2301      	movs	r3, #1
 80149d6:	e38d      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	2b41      	cmp	r3, #65	; 0x41
 80149de:	f200 835d 	bhi.w	801509c <LoRaMacMibSetRequestConfirm+0x6ec>
 80149e2:	a201      	add	r2, pc, #4	; (adr r2, 80149e8 <LoRaMacMibSetRequestConfirm+0x38>)
 80149e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149e8:	08014af1 	.word	0x08014af1
 80149ec:	08014b01 	.word	0x08014b01
 80149f0:	08014b1b 	.word	0x08014b1b
 80149f4:	08014b33 	.word	0x08014b33
 80149f8:	08014b4b 	.word	0x08014b4b
 80149fc:	08014b57 	.word	0x08014b57
 8014a00:	08014b63 	.word	0x08014b63
 8014a04:	08014b8d 	.word	0x08014b8d
 8014a08:	08014bb3 	.word	0x08014bb3
 8014a0c:	08014bd9 	.word	0x08014bd9
 8014a10:	08014bff 	.word	0x08014bff
 8014a14:	08014c25 	.word	0x08014c25
 8014a18:	08014c4b 	.word	0x08014c4b
 8014a1c:	08014c71 	.word	0x08014c71
 8014a20:	08014c97 	.word	0x08014c97
 8014a24:	08014cc5 	.word	0x08014cc5
 8014a28:	08014ce5 	.word	0x08014ce5
 8014a2c:	0801509d 	.word	0x0801509d
 8014a30:	08014cf1 	.word	0x08014cf1
 8014a34:	08014d61 	.word	0x08014d61
 8014a38:	08014da1 	.word	0x08014da1
 8014a3c:	08014e03 	.word	0x08014e03
 8014a40:	08014e73 	.word	0x08014e73
 8014a44:	08014e43 	.word	0x08014e43
 8014a48:	08014ea3 	.word	0x08014ea3
 8014a4c:	08014ec5 	.word	0x08014ec5
 8014a50:	08014ecf 	.word	0x08014ecf
 8014a54:	08014ed9 	.word	0x08014ed9
 8014a58:	08014ee3 	.word	0x08014ee3
 8014a5c:	08014eed 	.word	0x08014eed
 8014a60:	0801509d 	.word	0x0801509d
 8014a64:	08014ef7 	.word	0x08014ef7
 8014a68:	08014f29 	.word	0x08014f29
 8014a6c:	08014f9d 	.word	0x08014f9d
 8014a70:	08014f63 	.word	0x08014f63
 8014a74:	08014fcf 	.word	0x08014fcf
 8014a78:	08014fe5 	.word	0x08014fe5
 8014a7c:	08014ffd 	.word	0x08014ffd
 8014a80:	08015009 	.word	0x08015009
 8014a84:	08015015 	.word	0x08015015
 8014a88:	0801509d 	.word	0x0801509d
 8014a8c:	0801501f 	.word	0x0801501f
 8014a90:	0801509d 	.word	0x0801509d
 8014a94:	0801509d 	.word	0x0801509d
 8014a98:	0801509d 	.word	0x0801509d
 8014a9c:	0801509d 	.word	0x0801509d
 8014aa0:	0801509d 	.word	0x0801509d
 8014aa4:	0801509d 	.word	0x0801509d
 8014aa8:	0801509d 	.word	0x0801509d
 8014aac:	0801509d 	.word	0x0801509d
 8014ab0:	0801509d 	.word	0x0801509d
 8014ab4:	0801509d 	.word	0x0801509d
 8014ab8:	0801509d 	.word	0x0801509d
 8014abc:	0801509d 	.word	0x0801509d
 8014ac0:	0801509d 	.word	0x0801509d
 8014ac4:	0801509d 	.word	0x0801509d
 8014ac8:	0801509d 	.word	0x0801509d
 8014acc:	0801509d 	.word	0x0801509d
 8014ad0:	08015049 	.word	0x08015049
 8014ad4:	08015055 	.word	0x08015055
 8014ad8:	08015061 	.word	0x08015061
 8014adc:	0801506d 	.word	0x0801506d
 8014ae0:	08015079 	.word	0x08015079
 8014ae4:	08015085 	.word	0x08015085
 8014ae8:	08015091 	.word	0x08015091
 8014aec:	08015097 	.word	0x08015097
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	791b      	ldrb	r3, [r3, #4]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7fd fabb 	bl	8012070 <SwitchClass>
 8014afa:	4603      	mov	r3, r0
 8014afc:	75fb      	strb	r3, [r7, #23]
            break;
 8014afe:	e2ee      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	791b      	ldrb	r3, [r3, #4]
 8014b04:	2b02      	cmp	r3, #2
 8014b06:	d005      	beq.n	8014b14 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	791a      	ldrb	r2, [r3, #4]
 8014b0c:	4b6c      	ldr	r3, [pc, #432]	; (8014cc0 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b0e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b12:	e2e4      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b14:	2303      	movs	r3, #3
 8014b16:	75fb      	strb	r3, [r7, #23]
            break;
 8014b18:	e2e1      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	685b      	ldr	r3, [r3, #4]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7fa f8b4 	bl	800ec8c <SecureElementSetDevEui>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f000 82be 	beq.w	80150a8 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b2c:	2303      	movs	r3, #3
 8014b2e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b30:	e2ba      	b.n	80150a8 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7fa f8d8 	bl	800ecec <SecureElementSetJoinEui>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	f000 82b4 	beq.w	80150ac <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b44:	2303      	movs	r3, #3
 8014b46:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b48:	e2b0      	b.n	80150ac <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	791a      	ldrb	r2, [r3, #4]
 8014b4e:	4b5c      	ldr	r3, [pc, #368]	; (8014cc0 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b50:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014b54:	e2c3      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	4a59      	ldr	r2, [pc, #356]	; (8014cc0 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014b60:	e2bd      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014b62:	4b57      	ldr	r3, [pc, #348]	; (8014cc0 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b64:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	685b      	ldr	r3, [r3, #4]
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	4610      	mov	r0, r2
 8014b70:	f7fa f8ec 	bl	800ed4c <SecureElementSetDevAddr>
 8014b74:	4603      	mov	r3, r0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d002      	beq.n	8014b80 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b7a:	2303      	movs	r3, #3
 8014b7c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014b7e:	e2ae      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	4a4e      	ldr	r2, [pc, #312]	; (8014cc0 <LoRaMacMibSetRequestConfirm+0x310>)
 8014b86:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014b8a:	e2a8      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d00b      	beq.n	8014bac <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	4619      	mov	r1, r3
 8014b9a:	2000      	movs	r0, #0
 8014b9c:	f002 f868 	bl	8016c70 <LoRaMacCryptoSetKey>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f000 8284 	beq.w	80150b0 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ba8:	2311      	movs	r3, #17
 8014baa:	e2a3      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bac:	2303      	movs	r3, #3
 8014bae:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bb0:	e27e      	b.n	80150b0 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	685b      	ldr	r3, [r3, #4]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d00b      	beq.n	8014bd2 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	2001      	movs	r0, #1
 8014bc2:	f002 f855 	bl	8016c70 <LoRaMacCryptoSetKey>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	f000 8273 	beq.w	80150b4 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bce:	2311      	movs	r3, #17
 8014bd0:	e290      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bd2:	2303      	movs	r3, #3
 8014bd4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bd6:	e26d      	b.n	80150b4 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d00b      	beq.n	8014bf8 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	4619      	mov	r1, r3
 8014be6:	2008      	movs	r0, #8
 8014be8:	f002 f842 	bl	8016c70 <LoRaMacCryptoSetKey>
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	f000 8262 	beq.w	80150b8 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bf4:	2311      	movs	r3, #17
 8014bf6:	e27d      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bf8:	2303      	movs	r3, #3
 8014bfa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bfc:	e25c      	b.n	80150b8 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d00b      	beq.n	8014c1e <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	2009      	movs	r0, #9
 8014c0e:	f002 f82f 	bl	8016c70 <LoRaMacCryptoSetKey>
 8014c12:	4603      	mov	r3, r0
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f000 8251 	beq.w	80150bc <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c1a:	2311      	movs	r3, #17
 8014c1c:	e26a      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c1e:	2303      	movs	r3, #3
 8014c20:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c22:	e24b      	b.n	80150bc <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d00b      	beq.n	8014c44 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	685b      	ldr	r3, [r3, #4]
 8014c30:	4619      	mov	r1, r3
 8014c32:	200c      	movs	r0, #12
 8014c34:	f002 f81c 	bl	8016c70 <LoRaMacCryptoSetKey>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	f000 8240 	beq.w	80150c0 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c40:	2311      	movs	r3, #17
 8014c42:	e257      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c44:	2303      	movs	r3, #3
 8014c46:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c48:	e23a      	b.n	80150c0 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d00b      	beq.n	8014c6a <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	4619      	mov	r1, r3
 8014c58:	200d      	movs	r0, #13
 8014c5a:	f002 f809 	bl	8016c70 <LoRaMacCryptoSetKey>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f000 822f 	beq.w	80150c4 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c66:	2311      	movs	r3, #17
 8014c68:	e244      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c6a:	2303      	movs	r3, #3
 8014c6c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c6e:	e229      	b.n	80150c4 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	685b      	ldr	r3, [r3, #4]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d00b      	beq.n	8014c90 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	200e      	movs	r0, #14
 8014c80:	f001 fff6 	bl	8016c70 <LoRaMacCryptoSetKey>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	f000 821e 	beq.w	80150c8 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c8c:	2311      	movs	r3, #17
 8014c8e:	e231      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c90:	2303      	movs	r3, #3
 8014c92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c94:	e218      	b.n	80150c8 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d00b      	beq.n	8014cb6 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	200f      	movs	r0, #15
 8014ca6:	f001 ffe3 	bl	8016c70 <LoRaMacCryptoSetKey>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	f000 820d 	beq.w	80150cc <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cb2:	2311      	movs	r3, #17
 8014cb4:	e21e      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cb6:	2303      	movs	r3, #3
 8014cb8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cba:	e207      	b.n	80150cc <LoRaMacMibSetRequestConfirm+0x71c>
 8014cbc:	200006d4 	.word	0x200006d4
 8014cc0:	20000bf0 	.word	0x20000bf0
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	791a      	ldrb	r2, [r3, #4]
 8014cc8:	4bb2      	ldr	r3, [pc, #712]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014cca:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014cce:	4bb2      	ldr	r3, [pc, #712]	; (8014f98 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cd2:	4ab0      	ldr	r2, [pc, #704]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014cd4:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014cd8:	4610      	mov	r0, r2
 8014cda:	4798      	blx	r3
            Radio.Sleep( );
 8014cdc:	4bae      	ldr	r3, [pc, #696]	; (8014f98 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ce0:	4798      	blx	r3
            break;
 8014ce2:	e1fc      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	791a      	ldrb	r2, [r3, #4]
 8014ce8:	4baa      	ldr	r3, [pc, #680]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014cea:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8014cee:	e1f6      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	7a1b      	ldrb	r3, [r3, #8]
 8014cf4:	b25b      	sxtb	r3, r3
 8014cf6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014cf8:	4ba6      	ldr	r3, [pc, #664]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014cfa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014cfe:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014d00:	4ba4      	ldr	r3, [pc, #656]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d02:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d06:	f107 0108 	add.w	r1, r7, #8
 8014d0a:	2207      	movs	r2, #7
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f002 fdf7 	bl	8017900 <RegionVerify>
 8014d12:	4603      	mov	r3, r0
 8014d14:	f083 0301 	eor.w	r3, r3, #1
 8014d18:	b2db      	uxtb	r3, r3
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d002      	beq.n	8014d24 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d1e:	2303      	movs	r3, #3
 8014d20:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014d22:	e1dc      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014d2a:	4b9a      	ldr	r3, [pc, #616]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d30:	f107 0108 	add.w	r1, r7, #8
 8014d34:	2200      	movs	r2, #0
 8014d36:	4618      	mov	r0, r3
 8014d38:	f002 fde2 	bl	8017900 <RegionVerify>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	f083 0301 	eor.w	r3, r3, #1
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d002      	beq.n	8014d4e <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d48:	2303      	movs	r3, #3
 8014d4a:	75fb      	strb	r3, [r7, #23]
            break;
 8014d4c:	e1c7      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014d4e:	4b91      	ldr	r3, [pc, #580]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d50:	687a      	ldr	r2, [r7, #4]
 8014d52:	336c      	adds	r3, #108	; 0x6c
 8014d54:	3204      	adds	r2, #4
 8014d56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d5a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014d5e:	e1be      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	7a1b      	ldrb	r3, [r3, #8]
 8014d64:	b25b      	sxtb	r3, r3
 8014d66:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d68:	4b8a      	ldr	r3, [pc, #552]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d6a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d6e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014d70:	4b88      	ldr	r3, [pc, #544]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d72:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d76:	f107 0108 	add.w	r1, r7, #8
 8014d7a:	2207      	movs	r2, #7
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f002 fdbf 	bl	8017900 <RegionVerify>
 8014d82:	4603      	mov	r3, r0
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d008      	beq.n	8014d9a <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014d88:	4b82      	ldr	r3, [pc, #520]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	33b4      	adds	r3, #180	; 0xb4
 8014d8e:	3204      	adds	r2, #4
 8014d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d94:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014d98:	e1a1      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d9a:	2303      	movs	r3, #3
 8014d9c:	75fb      	strb	r3, [r7, #23]
            break;
 8014d9e:	e19e      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	7a1b      	ldrb	r3, [r3, #8]
 8014da4:	b25b      	sxtb	r3, r3
 8014da6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014da8:	4b7a      	ldr	r3, [pc, #488]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014daa:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014dae:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014db0:	4b78      	ldr	r3, [pc, #480]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014db2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014db6:	f107 0108 	add.w	r1, r7, #8
 8014dba:	2207      	movs	r2, #7
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f002 fd9f 	bl	8017900 <RegionVerify>
 8014dc2:	4603      	mov	r3, r0
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d019      	beq.n	8014dfc <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014dc8:	4b72      	ldr	r3, [pc, #456]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014dca:	687a      	ldr	r2, [r7, #4]
 8014dcc:	3374      	adds	r3, #116	; 0x74
 8014dce:	3204      	adds	r2, #4
 8014dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dd4:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014dd8:	4b6e      	ldr	r3, [pc, #440]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014dda:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	f040 8176 	bne.w	80150d0 <LoRaMacMibSetRequestConfirm+0x720>
 8014de4:	4b6b      	ldr	r3, [pc, #428]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014de6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	f000 8170 	beq.w	80150d0 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014df0:	4b69      	ldr	r3, [pc, #420]	; (8014f98 <LoRaMacMibSetRequestConfirm+0x5e8>)
 8014df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014df4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014df6:	f7fe fc1b 	bl	8013630 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014dfa:	e169      	b.n	80150d0 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014dfc:	2303      	movs	r3, #3
 8014dfe:	75fb      	strb	r3, [r7, #23]
            break;
 8014e00:	e166      	b.n	80150d0 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	7a1b      	ldrb	r3, [r3, #8]
 8014e06:	b25b      	sxtb	r3, r3
 8014e08:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e0a:	4b62      	ldr	r3, [pc, #392]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e0c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e10:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e12:	4b60      	ldr	r3, [pc, #384]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e14:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e18:	f107 0108 	add.w	r1, r7, #8
 8014e1c:	2207      	movs	r2, #7
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f002 fd6e 	bl	8017900 <RegionVerify>
 8014e24:	4603      	mov	r3, r0
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d008      	beq.n	8014e3c <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014e2a:	4b5a      	ldr	r3, [pc, #360]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e2c:	687a      	ldr	r2, [r7, #4]
 8014e2e:	33bc      	adds	r3, #188	; 0xbc
 8014e30:	3204      	adds	r2, #4
 8014e32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e36:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e3a:	e150      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e3c:	2303      	movs	r3, #3
 8014e3e:	75fb      	strb	r3, [r7, #23]
            break;
 8014e40:	e14d      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014e48:	2301      	movs	r3, #1
 8014e4a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014e4c:	4b51      	ldr	r3, [pc, #324]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e52:	f107 020c 	add.w	r2, r7, #12
 8014e56:	4611      	mov	r1, r2
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f002 fd89 	bl	8017970 <RegionChanMaskSet>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	f083 0301 	eor.w	r3, r3, #1
 8014e64:	b2db      	uxtb	r3, r3
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	f000 8134 	beq.w	80150d4 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e6c:	2303      	movs	r3, #3
 8014e6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e70:	e130      	b.n	80150d4 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	685b      	ldr	r3, [r3, #4]
 8014e76:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014e7c:	4b45      	ldr	r3, [pc, #276]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014e7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e82:	f107 020c 	add.w	r2, r7, #12
 8014e86:	4611      	mov	r1, r2
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f002 fd71 	bl	8017970 <RegionChanMaskSet>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	f083 0301 	eor.w	r3, r3, #1
 8014e94:	b2db      	uxtb	r3, r3
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	f000 811e 	beq.w	80150d8 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e9c:	2303      	movs	r3, #3
 8014e9e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ea0:	e11a      	b.n	80150d8 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	791b      	ldrb	r3, [r3, #4]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d009      	beq.n	8014ebe <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014eae:	2b0f      	cmp	r3, #15
 8014eb0:	d805      	bhi.n	8014ebe <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	791a      	ldrb	r2, [r3, #4]
 8014eb6:	4b37      	ldr	r3, [pc, #220]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014eb8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014ebc:	e10f      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ebe:	2303      	movs	r3, #3
 8014ec0:	75fb      	strb	r3, [r7, #23]
            break;
 8014ec2:	e10c      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	4a32      	ldr	r2, [pc, #200]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014eca:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014ecc:	e107      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	4a30      	ldr	r2, [pc, #192]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ed4:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014ed6:	e102      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	4a2d      	ldr	r2, [pc, #180]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ede:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014ee0:	e0fd      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	4a2b      	ldr	r2, [pc, #172]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ee8:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014eea:	e0f8      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	4a28      	ldr	r2, [pc, #160]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014ef2:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014ef4:	e0f3      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014efc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014efe:	4b25      	ldr	r3, [pc, #148]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f00:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f04:	f107 0108 	add.w	r1, r7, #8
 8014f08:	2206      	movs	r2, #6
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f002 fcf8 	bl	8017900 <RegionVerify>
 8014f10:	4603      	mov	r3, r0
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d005      	beq.n	8014f22 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014f16:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f1a:	4b1e      	ldr	r3, [pc, #120]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f1c:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f20:	e0dd      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f22:	2303      	movs	r3, #3
 8014f24:	75fb      	strb	r3, [r7, #23]
            break;
 8014f26:	e0da      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f2e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f30:	4b18      	ldr	r3, [pc, #96]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014f36:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014f38:	4b16      	ldr	r3, [pc, #88]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f3e:	f107 0108 	add.w	r1, r7, #8
 8014f42:	2205      	movs	r2, #5
 8014f44:	4618      	mov	r0, r3
 8014f46:	f002 fcdb 	bl	8017900 <RegionVerify>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d005      	beq.n	8014f5c <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014f50:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f54:	4b0f      	ldr	r3, [pc, #60]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f5a:	e0c0      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f5c:	2303      	movs	r3, #3
 8014f5e:	75fb      	strb	r3, [r7, #23]
            break;
 8014f60:	e0bd      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f68:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014f6a:	4b0a      	ldr	r3, [pc, #40]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f6c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f70:	f107 0108 	add.w	r1, r7, #8
 8014f74:	220a      	movs	r2, #10
 8014f76:	4618      	mov	r0, r3
 8014f78:	f002 fcc2 	bl	8017900 <RegionVerify>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d005      	beq.n	8014f8e <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014f82:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f86:	4b03      	ldr	r3, [pc, #12]	; (8014f94 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014f88:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f8c:	e0a7      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f8e:	2303      	movs	r3, #3
 8014f90:	75fb      	strb	r3, [r7, #23]
            break;
 8014f92:	e0a4      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
 8014f94:	20000bf0 	.word	0x20000bf0
 8014f98:	08020e4c 	.word	0x08020e4c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014fa2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014fa4:	4b55      	ldr	r3, [pc, #340]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fa6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014faa:	f107 0108 	add.w	r1, r7, #8
 8014fae:	2209      	movs	r2, #9
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f002 fca5 	bl	8017900 <RegionVerify>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d005      	beq.n	8014fc8 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014fbc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fc0:	4b4e      	ldr	r3, [pc, #312]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fc6:	e08a      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fc8:	2303      	movs	r3, #3
 8014fca:	75fb      	strb	r3, [r7, #23]
            break;
 8014fcc:	e087      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	685b      	ldr	r3, [r3, #4]
 8014fd2:	4a4a      	ldr	r2, [pc, #296]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8014fd8:	4b48      	ldr	r3, [pc, #288]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014fde:	4a47      	ldr	r2, [pc, #284]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8014fe2:	e07c      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	791a      	ldrb	r2, [r3, #4]
 8014fe8:	4b44      	ldr	r3, [pc, #272]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8014fea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8014fee:	4b43      	ldr	r3, [pc, #268]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8014ff0:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8014ff4:	4b41      	ldr	r3, [pc, #260]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8014ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8014ffa:	e070      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	685b      	ldr	r3, [r3, #4]
 8015000:	4a3e      	ldr	r2, [pc, #248]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8015002:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8015006:	e06a      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	685b      	ldr	r3, [r3, #4]
 801500c:	4a3b      	ldr	r2, [pc, #236]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 801500e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8015012:	e064      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8015014:	f7fe fd40 	bl	8013a98 <RestoreNvmData>
 8015018:	4603      	mov	r3, r0
 801501a:	75fb      	strb	r3, [r7, #23]
            break;
 801501c:	e05f      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	799b      	ldrb	r3, [r3, #6]
 8015022:	2b01      	cmp	r3, #1
 8015024:	d80d      	bhi.n	8015042 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8015026:	4a35      	ldr	r2, [pc, #212]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	6858      	ldr	r0, [r3, #4]
 8015034:	f001 fd7e 	bl	8016b34 <LoRaMacCryptoSetLrWanVersion>
 8015038:	4603      	mov	r3, r0
 801503a:	2b00      	cmp	r3, #0
 801503c:	d04e      	beq.n	80150dc <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801503e:	2311      	movs	r3, #17
 8015040:	e058      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015042:	2303      	movs	r3, #3
 8015044:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015046:	e049      	b.n	80150dc <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	4a2b      	ldr	r2, [pc, #172]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 801504e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8015052:	e044      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	791a      	ldrb	r2, [r3, #4]
 8015058:	4b28      	ldr	r3, [pc, #160]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 801505a:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 801505e:	e03e      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	889a      	ldrh	r2, [r3, #4]
 8015064:	4b25      	ldr	r3, [pc, #148]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8015066:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 801506a:	e038      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	889a      	ldrh	r2, [r3, #4]
 8015070:	4b22      	ldr	r3, [pc, #136]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 8015072:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 8015076:	e032      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	889a      	ldrh	r2, [r3, #4]
 801507c:	4b1f      	ldr	r3, [pc, #124]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 801507e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8015082:	e02c      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	889a      	ldrh	r2, [r3, #4]
 8015088:	4b1c      	ldr	r3, [pc, #112]	; (80150fc <LoRaMacMibSetRequestConfirm+0x74c>)
 801508a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 801508e:	e026      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8015090:	2318      	movs	r3, #24
 8015092:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8015094:	e023      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8015096:	2318      	movs	r3, #24
 8015098:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801509a:	e020      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f000 fca4 	bl	80159ea <LoRaMacMibClassBSetRequestConfirm>
 80150a2:	4603      	mov	r3, r0
 80150a4:	75fb      	strb	r3, [r7, #23]
            break;
 80150a6:	e01a      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150a8:	bf00      	nop
 80150aa:	e018      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150ac:	bf00      	nop
 80150ae:	e016      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150b0:	bf00      	nop
 80150b2:	e014      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150b4:	bf00      	nop
 80150b6:	e012      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150b8:	bf00      	nop
 80150ba:	e010      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150bc:	bf00      	nop
 80150be:	e00e      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150c0:	bf00      	nop
 80150c2:	e00c      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150c4:	bf00      	nop
 80150c6:	e00a      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150c8:	bf00      	nop
 80150ca:	e008      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150cc:	bf00      	nop
 80150ce:	e006      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150d0:	bf00      	nop
 80150d2:	e004      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150d4:	bf00      	nop
 80150d6:	e002      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150d8:	bf00      	nop
 80150da:	e000      	b.n	80150de <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80150dc:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 80150de:	7dfb      	ldrb	r3, [r7, #23]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d106      	bne.n	80150f2 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80150e4:	4a06      	ldr	r2, [pc, #24]	; (8015100 <LoRaMacMibSetRequestConfirm+0x750>)
 80150e6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80150ea:	f043 0320 	orr.w	r3, r3, #32
 80150ee:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 80150f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3718      	adds	r7, #24
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}
 80150fc:	20000bf0 	.word	0x20000bf0
 8015100:	200006d4 	.word	0x200006d4

08015104 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015104:	b580      	push	{r7, lr}
 8015106:	b08a      	sub	sp, #40	; 0x28
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801510c:	2302      	movs	r3, #2
 801510e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8015112:	2300      	movs	r3, #0
 8015114:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d101      	bne.n	8015120 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801511c:	2303      	movs	r3, #3
 801511e:	e17e      	b.n	801541e <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2200      	movs	r2, #0
 8015124:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8015126:	f7fc fb85 	bl	8011834 <LoRaMacIsBusy>
 801512a:	4603      	mov	r3, r0
 801512c:	2b00      	cmp	r3, #0
 801512e:	d001      	beq.n	8015134 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8015130:	2301      	movs	r3, #1
 8015132:	e174      	b.n	801541e <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8015134:	f001 f994 	bl	8016460 <LoRaMacConfirmQueueIsFull>
 8015138:	4603      	mov	r3, r0
 801513a:	2b00      	cmp	r3, #0
 801513c:	d001      	beq.n	8015142 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 801513e:	2301      	movs	r3, #1
 8015140:	e16d      	b.n	801541e <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015142:	f001 f981 	bl	8016448 <LoRaMacConfirmQueueGetCnt>
 8015146:	4603      	mov	r3, r0
 8015148:	2b00      	cmp	r3, #0
 801514a:	d104      	bne.n	8015156 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801514c:	2214      	movs	r2, #20
 801514e:	2100      	movs	r1, #0
 8015150:	48b5      	ldr	r0, [pc, #724]	; (8015428 <LoRaMacMlmeRequest+0x324>)
 8015152:	f006 f9c3 	bl	801b4dc <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015156:	4bb5      	ldr	r3, [pc, #724]	; (801542c <LoRaMacMlmeRequest+0x328>)
 8015158:	2201      	movs	r2, #1
 801515a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801515e:	4ab3      	ldr	r2, [pc, #716]	; (801542c <LoRaMacMlmeRequest+0x328>)
 8015160:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015164:	f043 0304 	orr.w	r3, r3, #4
 8015168:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015174:	2301      	movs	r3, #1
 8015176:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 801517a:	2300      	movs	r3, #0
 801517c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8015180:	2300      	movs	r3, #0
 8015182:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	3b01      	subs	r3, #1
 801518c:	2b0c      	cmp	r3, #12
 801518e:	f200 811a 	bhi.w	80153c6 <LoRaMacMlmeRequest+0x2c2>
 8015192:	a201      	add	r2, pc, #4	; (adr r2, 8015198 <LoRaMacMlmeRequest+0x94>)
 8015194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015198:	080151cd 	.word	0x080151cd
 801519c:	080153c7 	.word	0x080153c7
 80151a0:	080153c7 	.word	0x080153c7
 80151a4:	080153c7 	.word	0x080153c7
 80151a8:	080152ab 	.word	0x080152ab
 80151ac:	080152cf 	.word	0x080152cf
 80151b0:	080153c7 	.word	0x080153c7
 80151b4:	080153c7 	.word	0x080153c7
 80151b8:	080152ed 	.word	0x080152ed
 80151bc:	080153c7 	.word	0x080153c7
 80151c0:	08015395 	.word	0x08015395
 80151c4:	08015329 	.word	0x08015329
 80151c8:	08015373 	.word	0x08015373
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80151cc:	4b97      	ldr	r3, [pc, #604]	; (801542c <LoRaMacMlmeRequest+0x328>)
 80151ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80151d2:	f003 0320 	and.w	r3, r3, #32
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d001      	beq.n	80151de <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80151da:	2301      	movs	r3, #1
 80151dc:	e11f      	b.n	801541e <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	791b      	ldrb	r3, [r3, #4]
 80151e2:	2b02      	cmp	r3, #2
 80151e4:	d135      	bne.n	8015252 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 80151e6:	2000      	movs	r0, #0
 80151e8:	f7fe f8b4 	bl	8013354 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80151ec:	4b90      	ldr	r3, [pc, #576]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 80151ee:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	795b      	ldrb	r3, [r3, #5]
 80151f6:	b25b      	sxtb	r3, r3
 80151f8:	2200      	movs	r2, #0
 80151fa:	4619      	mov	r1, r3
 80151fc:	f002 fcc8 	bl	8017b90 <RegionAlternateDr>
 8015200:	4603      	mov	r3, r0
 8015202:	461a      	mov	r2, r3
 8015204:	4b8a      	ldr	r3, [pc, #552]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 8015206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015210:	4b87      	ldr	r3, [pc, #540]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 8015212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8015216:	2307      	movs	r3, #7
 8015218:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 801521c:	20ff      	movs	r0, #255	; 0xff
 801521e:	f7fd fe1d 	bl	8012e5c <SendReJoinReq>
 8015222:	4603      	mov	r3, r0
 8015224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8015228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801522c:	2b00      	cmp	r3, #0
 801522e:	f000 80cc 	beq.w	80153ca <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015232:	4b7f      	ldr	r3, [pc, #508]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 8015234:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	795b      	ldrb	r3, [r3, #5]
 801523c:	b25b      	sxtb	r3, r3
 801523e:	2201      	movs	r2, #1
 8015240:	4619      	mov	r1, r3
 8015242:	f002 fca5 	bl	8017b90 <RegionAlternateDr>
 8015246:	4603      	mov	r3, r0
 8015248:	461a      	mov	r2, r3
 801524a:	4b79      	ldr	r3, [pc, #484]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 801524c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8015250:	e0bb      	b.n	80153ca <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	791b      	ldrb	r3, [r3, #4]
 8015256:	2b01      	cmp	r3, #1
 8015258:	f040 80b7 	bne.w	80153ca <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801525c:	4b74      	ldr	r3, [pc, #464]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 801525e:	2200      	movs	r2, #0
 8015260:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015264:	2302      	movs	r3, #2
 8015266:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8015268:	4b71      	ldr	r3, [pc, #452]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 801526a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801526e:	f107 020c 	add.w	r2, r7, #12
 8015272:	4611      	mov	r1, r2
 8015274:	4618      	mov	r0, r3
 8015276:	f002 fb2c 	bl	80178d2 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	791a      	ldrb	r2, [r3, #4]
 801527e:	4b6c      	ldr	r3, [pc, #432]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 8015280:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8015284:	2300      	movs	r3, #0
 8015286:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 801528a:	2301      	movs	r3, #1
 801528c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8015290:	f7fe fdb2 	bl	8013df8 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8015294:	4a65      	ldr	r2, [pc, #404]	; (801542c <LoRaMacMlmeRequest+0x328>)
 8015296:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801529a:	f043 0310 	orr.w	r3, r3, #16
 801529e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 80152a2:	2300      	movs	r3, #0
 80152a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80152a8:	e08f      	b.n	80153ca <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152aa:	2300      	movs	r3, #0
 80152ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80152b0:	f107 031c 	add.w	r3, r7, #28
 80152b4:	2200      	movs	r2, #0
 80152b6:	4619      	mov	r1, r3
 80152b8:	2002      	movs	r0, #2
 80152ba:	f000 fd21 	bl	8015d00 <LoRaMacCommandsAddCmd>
 80152be:	4603      	mov	r3, r0
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	f000 8084 	beq.w	80153ce <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152c6:	2313      	movs	r3, #19
 80152c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80152cc:	e07f      	b.n	80153ce <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	8898      	ldrh	r0, [r3, #4]
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	6899      	ldr	r1, [r3, #8]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	461a      	mov	r2, r3
 80152e0:	f7fe fbba 	bl	8013a58 <SetTxContinuousWave>
 80152e4:	4603      	mov	r3, r0
 80152e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80152ea:	e077      	b.n	80153dc <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152ec:	2300      	movs	r3, #0
 80152ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80152f2:	f107 0308 	add.w	r3, r7, #8
 80152f6:	4619      	mov	r1, r3
 80152f8:	200d      	movs	r0, #13
 80152fa:	f000 fd81 	bl	8015e00 <LoRaMacCommandsGetCmd>
 80152fe:	4603      	mov	r3, r0
 8015300:	2b00      	cmp	r3, #0
 8015302:	d103      	bne.n	801530c <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 8015304:	2300      	movs	r3, #0
 8015306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 801530a:	e062      	b.n	80153d2 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801530c:	f107 031c 	add.w	r3, r7, #28
 8015310:	2200      	movs	r2, #0
 8015312:	4619      	mov	r1, r3
 8015314:	200d      	movs	r0, #13
 8015316:	f000 fcf3 	bl	8015d00 <LoRaMacCommandsAddCmd>
 801531a:	4603      	mov	r3, r0
 801531c:	2b00      	cmp	r3, #0
 801531e:	d058      	beq.n	80153d2 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015320:	2313      	movs	r3, #19
 8015322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8015326:	e054      	b.n	80153d2 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8015328:	4b41      	ldr	r3, [pc, #260]	; (8015430 <LoRaMacMlmeRequest+0x32c>)
 801532a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801532e:	2b00      	cmp	r3, #0
 8015330:	d151      	bne.n	80153d6 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	791b      	ldrb	r3, [r3, #4]
 8015336:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	791b      	ldrb	r3, [r3, #4]
 801533e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015342:	b2db      	uxtb	r3, r3
 8015344:	4618      	mov	r0, r3
 8015346:	f000 fb25 	bl	8015994 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801534a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801534e:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8015350:	2300      	movs	r3, #0
 8015352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015356:	f107 031c 	add.w	r3, r7, #28
 801535a:	2201      	movs	r2, #1
 801535c:	4619      	mov	r1, r3
 801535e:	2010      	movs	r0, #16
 8015360:	f000 fcce 	bl	8015d00 <LoRaMacCommandsAddCmd>
 8015364:	4603      	mov	r3, r0
 8015366:	2b00      	cmp	r3, #0
 8015368:	d035      	beq.n	80153d6 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801536a:	2313      	movs	r3, #19
 801536c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8015370:	e031      	b.n	80153d6 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015372:	2300      	movs	r3, #0
 8015374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015378:	f107 031c 	add.w	r3, r7, #28
 801537c:	2200      	movs	r2, #0
 801537e:	4619      	mov	r1, r3
 8015380:	2012      	movs	r0, #18
 8015382:	f000 fcbd 	bl	8015d00 <LoRaMacCommandsAddCmd>
 8015386:	4603      	mov	r3, r0
 8015388:	2b00      	cmp	r3, #0
 801538a:	d026      	beq.n	80153da <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801538c:	2313      	movs	r3, #19
 801538e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8015392:	e022      	b.n	80153da <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015394:	2301      	movs	r3, #1
 8015396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801539a:	f000 fab1 	bl	8015900 <LoRaMacClassBIsAcquisitionInProgress>
 801539e:	4603      	mov	r3, r0
 80153a0:	f083 0301 	eor.w	r3, r3, #1
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d009      	beq.n	80153be <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80153aa:	2000      	movs	r0, #0
 80153ac:	f000 fa8a 	bl	80158c4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80153b0:	2000      	movs	r0, #0
 80153b2:	f000 faac 	bl	801590e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80153b6:	2300      	movs	r3, #0
 80153b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 80153bc:	e00e      	b.n	80153dc <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 80153be:	2301      	movs	r3, #1
 80153c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80153c4:	e00a      	b.n	80153dc <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 80153c6:	bf00      	nop
 80153c8:	e008      	b.n	80153dc <LoRaMacMlmeRequest+0x2d8>
            break;
 80153ca:	bf00      	nop
 80153cc:	e006      	b.n	80153dc <LoRaMacMlmeRequest+0x2d8>
            break;
 80153ce:	bf00      	nop
 80153d0:	e004      	b.n	80153dc <LoRaMacMlmeRequest+0x2d8>
            break;
 80153d2:	bf00      	nop
 80153d4:	e002      	b.n	80153dc <LoRaMacMlmeRequest+0x2d8>
            break;
 80153d6:	bf00      	nop
 80153d8:	e000      	b.n	80153dc <LoRaMacMlmeRequest+0x2d8>
            break;
 80153da:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80153dc:	4b13      	ldr	r3, [pc, #76]	; (801542c <LoRaMacMlmeRequest+0x328>)
 80153de:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80153e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d010      	beq.n	8015410 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80153ee:	f001 f82b 	bl	8016448 <LoRaMacConfirmQueueGetCnt>
 80153f2:	4603      	mov	r3, r0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d110      	bne.n	801541a <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 80153f8:	4b0c      	ldr	r3, [pc, #48]	; (801542c <LoRaMacMlmeRequest+0x328>)
 80153fa:	2200      	movs	r2, #0
 80153fc:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8015400:	4a0a      	ldr	r2, [pc, #40]	; (801542c <LoRaMacMlmeRequest+0x328>)
 8015402:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8015406:	f36f 0382 	bfc	r3, #2, #1
 801540a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 801540e:	e004      	b.n	801541a <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8015410:	f107 0320 	add.w	r3, r7, #32
 8015414:	4618      	mov	r0, r3
 8015416:	f000 fec3 	bl	80161a0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801541a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801541e:	4618      	mov	r0, r3
 8015420:	3728      	adds	r7, #40	; 0x28
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}
 8015426:	bf00      	nop
 8015428:	20000b28 	.word	0x20000b28
 801542c:	200006d4 	.word	0x200006d4
 8015430:	20000bf0 	.word	0x20000bf0

08015434 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8015434:	b5b0      	push	{r4, r5, r7, lr}
 8015436:	b092      	sub	sp, #72	; 0x48
 8015438:	af02      	add	r7, sp, #8
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	460b      	mov	r3, r1
 801543e:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015440:	2302      	movs	r3, #2
 8015442:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8015446:	2300      	movs	r3, #0
 8015448:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 801544c:	2300      	movs	r3, #0
 801544e:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015450:	2300      	movs	r3, #0
 8015452:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8015456:	2300      	movs	r3, #0
 8015458:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d101      	bne.n	8015466 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015462:	2303      	movs	r3, #3
 8015464:	e113      	b.n	801568e <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2200      	movs	r2, #0
 801546a:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 801546c:	f7fc f9e2 	bl	8011834 <LoRaMacIsBusy>
 8015470:	4603      	mov	r3, r0
 8015472:	2b00      	cmp	r3, #0
 8015474:	d001      	beq.n	801547a <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8015476:	2301      	movs	r3, #1
 8015478:	e109      	b.n	801568e <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	f107 040c 	add.w	r4, r7, #12
 8015480:	461d      	mov	r5, r3
 8015482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015486:	682b      	ldr	r3, [r5, #0]
 8015488:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 801548a:	2300      	movs	r3, #0
 801548c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015490:	2214      	movs	r2, #20
 8015492:	2100      	movs	r1, #0
 8015494:	4880      	ldr	r0, [pc, #512]	; (8015698 <LoRaMacMcpsRequest+0x264>)
 8015496:	f006 f821 	bl	801b4dc <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801549a:	4b80      	ldr	r3, [pc, #512]	; (801569c <LoRaMacMcpsRequest+0x268>)
 801549c:	2201      	movs	r2, #1
 801549e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80154a2:	4b7f      	ldr	r3, [pc, #508]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80154a4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80154a8:	2b02      	cmp	r3, #2
 80154aa:	d111      	bne.n	80154d0 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80154ac:	4b7c      	ldr	r3, [pc, #496]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80154ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	d10c      	bne.n	80154d0 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80154b6:	4b7a      	ldr	r3, [pc, #488]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80154b8:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 80154bc:	f083 0301 	eor.w	r3, r3, #1
 80154c0:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d004      	beq.n	80154d0 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80154c6:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d101      	bne.n	80154d0 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 80154cc:	2301      	movs	r3, #1
 80154ce:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 80154d0:	7b3b      	ldrb	r3, [r7, #12]
 80154d2:	2b03      	cmp	r3, #3
 80154d4:	d030      	beq.n	8015538 <LoRaMacMcpsRequest+0x104>
 80154d6:	2b03      	cmp	r3, #3
 80154d8:	dc3f      	bgt.n	801555a <LoRaMacMcpsRequest+0x126>
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d002      	beq.n	80154e4 <LoRaMacMcpsRequest+0xb0>
 80154de:	2b01      	cmp	r3, #1
 80154e0:	d015      	beq.n	801550e <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80154e2:	e03a      	b.n	801555a <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 80154e4:	2301      	movs	r3, #1
 80154e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80154ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154ee:	2202      	movs	r2, #2
 80154f0:	f362 1347 	bfi	r3, r2, #5, #3
 80154f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80154f8:	7c3b      	ldrb	r3, [r7, #16]
 80154fa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8015502:	8b3b      	ldrh	r3, [r7, #24]
 8015504:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8015506:	7ebb      	ldrb	r3, [r7, #26]
 8015508:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 801550c:	e026      	b.n	801555c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801550e:	2301      	movs	r3, #1
 8015510:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015514:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015518:	2204      	movs	r2, #4
 801551a:	f362 1347 	bfi	r3, r2, #5, #3
 801551e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8015522:	7c3b      	ldrb	r3, [r7, #16]
 8015524:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8015528:	697b      	ldr	r3, [r7, #20]
 801552a:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 801552c:	8b3b      	ldrh	r3, [r7, #24]
 801552e:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8015530:	7ebb      	ldrb	r3, [r7, #26]
 8015532:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015536:	e011      	b.n	801555c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8015538:	2301      	movs	r3, #1
 801553a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801553e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015542:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8015546:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 801554e:	8abb      	ldrh	r3, [r7, #20]
 8015550:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8015552:	7dbb      	ldrb	r3, [r7, #22]
 8015554:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8015558:	e000      	b.n	801555c <LoRaMacMcpsRequest+0x128>
            break;
 801555a:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 801555c:	2302      	movs	r3, #2
 801555e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015562:	4b4f      	ldr	r3, [pc, #316]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 8015564:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015568:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801556c:	4b4c      	ldr	r3, [pc, #304]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 801556e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015572:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015576:	4611      	mov	r1, r2
 8015578:	4618      	mov	r0, r3
 801557a:	f002 f973 	bl	8017864 <RegionGetPhyParam>
 801557e:	4603      	mov	r3, r0
 8015580:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8015582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015584:	b25b      	sxtb	r3, r3
 8015586:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 801558a:	4293      	cmp	r3, r2
 801558c:	bfb8      	it	lt
 801558e:	4613      	movlt	r3, r2
 8015590:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8015594:	4b42      	ldr	r3, [pc, #264]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 8015596:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801559a:	4a41      	ldr	r2, [pc, #260]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 801559c:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80155a0:	4a3f      	ldr	r2, [pc, #252]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80155a2:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80155a6:	4618      	mov	r0, r3
 80155a8:	f7fc fae0 	bl	8011b6c <CheckForMinimumAbpDatarate>
 80155ac:	4603      	mov	r3, r0
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d002      	beq.n	80155b8 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80155b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 80155b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d05f      	beq.n	8015680 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80155c0:	4b37      	ldr	r3, [pc, #220]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80155c2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80155c6:	f083 0301 	eor.w	r3, r3, #1
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d10e      	bne.n	80155ee <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80155d0:	4b33      	ldr	r3, [pc, #204]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80155d2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80155d6:	4a32      	ldr	r2, [pc, #200]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80155d8:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 80155dc:	4a30      	ldr	r2, [pc, #192]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80155de:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 80155e2:	4618      	mov	r0, r3
 80155e4:	f7fc fac2 	bl	8011b6c <CheckForMinimumAbpDatarate>
 80155e8:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d01c      	beq.n	8015628 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 80155ee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80155f2:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80155f6:	4b2a      	ldr	r3, [pc, #168]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 80155f8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80155fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015600:	4b27      	ldr	r3, [pc, #156]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 8015602:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015606:	f107 0120 	add.w	r1, r7, #32
 801560a:	2205      	movs	r2, #5
 801560c:	4618      	mov	r0, r3
 801560e:	f002 f977 	bl	8017900 <RegionVerify>
 8015612:	4603      	mov	r3, r0
 8015614:	2b00      	cmp	r3, #0
 8015616:	d005      	beq.n	8015624 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015618:	f997 2020 	ldrsb.w	r2, [r7, #32]
 801561c:	4b20      	ldr	r3, [pc, #128]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 801561e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015622:	e001      	b.n	8015628 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015624:	2303      	movs	r3, #3
 8015626:	e032      	b.n	801568e <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8015628:	4b1d      	ldr	r3, [pc, #116]	; (80156a0 <LoRaMacMcpsRequest+0x26c>)
 801562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801562e:	4a1b      	ldr	r2, [pc, #108]	; (801569c <LoRaMacMcpsRequest+0x268>)
 8015630:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8015634:	4611      	mov	r1, r2
 8015636:	4618      	mov	r0, r3
 8015638:	f7fc fb84 	bl	8011d44 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 801563c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801563e:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8015642:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015646:	78fb      	ldrb	r3, [r7, #3]
 8015648:	9300      	str	r3, [sp, #0]
 801564a:	4613      	mov	r3, r2
 801564c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801564e:	f7fd fb23 	bl	8012c98 <Send>
 8015652:	4603      	mov	r3, r0
 8015654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8015658:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801565c:	2b00      	cmp	r3, #0
 801565e:	d10b      	bne.n	8015678 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8015660:	7b3a      	ldrb	r2, [r7, #12]
 8015662:	4b0e      	ldr	r3, [pc, #56]	; (801569c <LoRaMacMcpsRequest+0x268>)
 8015664:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015668:	4a0c      	ldr	r2, [pc, #48]	; (801569c <LoRaMacMcpsRequest+0x268>)
 801566a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801566e:	f043 0301 	orr.w	r3, r3, #1
 8015672:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8015676:	e003      	b.n	8015680 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015678:	4b08      	ldr	r3, [pc, #32]	; (801569c <LoRaMacMcpsRequest+0x268>)
 801567a:	2200      	movs	r2, #0
 801567c:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015680:	4b06      	ldr	r3, [pc, #24]	; (801569c <LoRaMacMcpsRequest+0x268>)
 8015682:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	611a      	str	r2, [r3, #16]

    return status;
 801568a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801568e:	4618      	mov	r0, r3
 8015690:	3740      	adds	r7, #64	; 0x40
 8015692:	46bd      	mov	sp, r7
 8015694:	bdb0      	pop	{r4, r5, r7, pc}
 8015696:	bf00      	nop
 8015698:	20000b14 	.word	0x20000b14
 801569c:	200006d4 	.word	0x200006d4
 80156a0:	20000bf0 	.word	0x20000bf0

080156a4 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	4603      	mov	r3, r0
 80156ac:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80156ae:	79fb      	ldrb	r3, [r7, #7]
 80156b0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80156b2:	4b0d      	ldr	r3, [pc, #52]	; (80156e8 <LoRaMacTestSetDutyCycleOn+0x44>)
 80156b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80156b8:	f107 010c 	add.w	r1, r7, #12
 80156bc:	220f      	movs	r2, #15
 80156be:	4618      	mov	r0, r3
 80156c0:	f002 f91e 	bl	8017900 <RegionVerify>
 80156c4:	4603      	mov	r3, r0
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d00a      	beq.n	80156e0 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80156ca:	4a07      	ldr	r2, [pc, #28]	; (80156e8 <LoRaMacTestSetDutyCycleOn+0x44>)
 80156cc:	79fb      	ldrb	r3, [r7, #7]
 80156ce:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80156d2:	4a06      	ldr	r2, [pc, #24]	; (80156ec <LoRaMacTestSetDutyCycleOn+0x48>)
 80156d4:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80156d8:	f043 0320 	orr.w	r3, r3, #32
 80156dc:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 80156e0:	bf00      	nop
 80156e2:	3710      	adds	r7, #16
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	20000bf0 	.word	0x20000bf0
 80156ec:	200006d4 	.word	0x200006d4

080156f0 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80156f4:	f7fe fe94 	bl	8014420 <LoRaMacStop>
 80156f8:	4603      	mov	r3, r0
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d112      	bne.n	8015724 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80156fe:	480b      	ldr	r0, [pc, #44]	; (801572c <LoRaMacDeInitialization+0x3c>)
 8015700:	f009 ff0e 	bl	801f520 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015704:	480a      	ldr	r0, [pc, #40]	; (8015730 <LoRaMacDeInitialization+0x40>)
 8015706:	f009 ff0b 	bl	801f520 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801570a:	480a      	ldr	r0, [pc, #40]	; (8015734 <LoRaMacDeInitialization+0x44>)
 801570c:	f009 ff08 	bl	801f520 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015710:	f000 f94a 	bl	80159a8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8015714:	2000      	movs	r0, #0
 8015716:	f7fd fe1d 	bl	8013354 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801571a:	4b07      	ldr	r3, [pc, #28]	; (8015738 <LoRaMacDeInitialization+0x48>)
 801571c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801571e:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015720:	2300      	movs	r3, #0
 8015722:	e000      	b.n	8015726 <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015724:	2301      	movs	r3, #1
    }
}
 8015726:	4618      	mov	r0, r3
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	20000a3c 	.word	0x20000a3c
 8015730:	20000a54 	.word	0x20000a54
 8015734:	20000a6c 	.word	0x20000a6c
 8015738:	08020e4c 	.word	0x08020e4c

0801573c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b08c      	sub	sp, #48	; 0x30
 8015740:	af00      	add	r7, sp, #0
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	60b9      	str	r1, [r7, #8]
 8015746:	607a      	str	r2, [r7, #4]
 8015748:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801574a:	2300      	movs	r3, #0
 801574c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	7b1b      	ldrb	r3, [r3, #12]
 8015754:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	7b5b      	ldrb	r3, [r3, #13]
 801575c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	7b9b      	ldrb	r3, [r3, #14]
 8015764:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	685a      	ldr	r2, [r3, #4]
 801576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801576e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	785b      	ldrb	r3, [r3, #1]
 8015774:	2b00      	cmp	r3, #0
 8015776:	f000 8088 	beq.w	801588a <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801577a:	2302      	movs	r3, #2
 801577c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	7bdb      	ldrb	r3, [r3, #15]
 8015784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	7c1b      	ldrb	r3, [r3, #16]
 801578c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015790:	4611      	mov	r1, r2
 8015792:	4618      	mov	r0, r3
 8015794:	f002 f866 	bl	8017864 <RegionGetPhyParam>
 8015798:	4603      	mov	r3, r0
 801579a:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 801579c:	6a3b      	ldr	r3, [r7, #32]
 801579e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80157a2:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80157a6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80157aa:	4293      	cmp	r3, r2
 80157ac:	bfb8      	it	lt
 80157ae:	4613      	movlt	r3, r2
 80157b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	685b      	ldr	r3, [r3, #4]
 80157b8:	68fa      	ldr	r2, [r7, #12]
 80157ba:	8912      	ldrh	r2, [r2, #8]
 80157bc:	4293      	cmp	r3, r2
 80157be:	d302      	bcc.n	80157c6 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80157c0:	2301      	movs	r3, #1
 80157c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	68fa      	ldr	r2, [r7, #12]
 80157cc:	8912      	ldrh	r2, [r2, #8]
 80157ce:	4611      	mov	r1, r2
 80157d0:	68fa      	ldr	r2, [r7, #12]
 80157d2:	8952      	ldrh	r2, [r2, #10]
 80157d4:	440a      	add	r2, r1
 80157d6:	4293      	cmp	r3, r2
 80157d8:	d30f      	bcc.n	80157fa <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80157da:	230a      	movs	r3, #10
 80157dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	7c1b      	ldrb	r3, [r3, #16]
 80157e4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80157e8:	4611      	mov	r1, r2
 80157ea:	4618      	mov	r0, r3
 80157ec:	f002 f83a 	bl	8017864 <RegionGetPhyParam>
 80157f0:	4603      	mov	r3, r0
 80157f2:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 80157f4:	6a3b      	ldr	r3, [r7, #32]
 80157f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	68fa      	ldr	r2, [r7, #12]
 8015800:	8912      	ldrh	r2, [r2, #8]
 8015802:	4611      	mov	r1, r2
 8015804:	68fa      	ldr	r2, [r7, #12]
 8015806:	8952      	ldrh	r2, [r2, #10]
 8015808:	0052      	lsls	r2, r2, #1
 801580a:	440a      	add	r2, r1
 801580c:	4293      	cmp	r3, r2
 801580e:	d33c      	bcc.n	801588a <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	68fa      	ldr	r2, [r7, #12]
 8015816:	8912      	ldrh	r2, [r2, #8]
 8015818:	1a9b      	subs	r3, r3, r2
 801581a:	68fa      	ldr	r2, [r7, #12]
 801581c:	8952      	ldrh	r2, [r2, #10]
 801581e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015822:	fb01 f202 	mul.w	r2, r1, r2
 8015826:	1a9b      	subs	r3, r3, r2
 8015828:	2b00      	cmp	r3, #0
 801582a:	d12e      	bne.n	801588a <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 801582c:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015830:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8015834:	429a      	cmp	r2, r3
 8015836:	d110      	bne.n	801585a <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d009      	beq.n	8015854 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015840:	2302      	movs	r3, #2
 8015842:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	7c1b      	ldrb	r3, [r3, #16]
 8015848:	f107 0210 	add.w	r2, r7, #16
 801584c:	4611      	mov	r1, r2
 801584e:	4618      	mov	r0, r3
 8015850:	f002 f83f 	bl	80178d2 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8015854:	2301      	movs	r3, #1
 8015856:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801585a:	2321      	movs	r3, #33	; 0x21
 801585c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8015860:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015864:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	7bdb      	ldrb	r3, [r3, #15]
 801586c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	7c1b      	ldrb	r3, [r3, #16]
 8015874:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015878:	4611      	mov	r1, r2
 801587a:	4618      	mov	r0, r3
 801587c:	f001 fff2 	bl	8017864 <RegionGetPhyParam>
 8015880:	4603      	mov	r3, r0
 8015882:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8015884:	6a3b      	ldr	r3, [r7, #32]
 8015886:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 801588a:	68bb      	ldr	r3, [r7, #8]
 801588c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8015890:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015898:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80158a0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80158a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80158a6:	4618      	mov	r0, r3
 80158a8:	3730      	adds	r7, #48	; 0x30
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}

080158ae <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80158ae:	b480      	push	{r7}
 80158b0:	b085      	sub	sp, #20
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	60f8      	str	r0, [r7, #12]
 80158b6:	60b9      	str	r1, [r7, #8]
 80158b8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ba:	bf00      	nop
 80158bc:	3714      	adds	r7, #20
 80158be:	46bd      	mov	sp, r7
 80158c0:	bc80      	pop	{r7}
 80158c2:	4770      	bx	lr

080158c4 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	4603      	mov	r3, r0
 80158cc:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ce:	bf00      	nop
 80158d0:	370c      	adds	r7, #12
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bc80      	pop	{r7}
 80158d6:	4770      	bx	lr

080158d8 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80158d8:	b480      	push	{r7}
 80158da:	b083      	sub	sp, #12
 80158dc:	af00      	add	r7, sp, #0
 80158de:	4603      	mov	r3, r0
 80158e0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158e2:	bf00      	nop
 80158e4:	370c      	adds	r7, #12
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bc80      	pop	{r7}
 80158ea:	4770      	bx	lr

080158ec <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80158ec:	b480      	push	{r7}
 80158ee:	b083      	sub	sp, #12
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	4603      	mov	r3, r0
 80158f4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158f6:	bf00      	nop
 80158f8:	370c      	adds	r7, #12
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bc80      	pop	{r7}
 80158fe:	4770      	bx	lr

08015900 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8015900:	b480      	push	{r7}
 8015902:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8015904:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015906:	4618      	mov	r0, r3
 8015908:	46bd      	mov	sp, r7
 801590a:	bc80      	pop	{r7}
 801590c:	4770      	bx	lr

0801590e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801590e:	b480      	push	{r7}
 8015910:	b083      	sub	sp, #12
 8015912:	af00      	add	r7, sp, #0
 8015914:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015916:	bf00      	nop
 8015918:	370c      	adds	r7, #12
 801591a:	46bd      	mov	sp, r7
 801591c:	bc80      	pop	{r7}
 801591e:	4770      	bx	lr

08015920 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015920:	b480      	push	{r7}
 8015922:	b083      	sub	sp, #12
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015928:	bf00      	nop
 801592a:	370c      	adds	r7, #12
 801592c:	46bd      	mov	sp, r7
 801592e:	bc80      	pop	{r7}
 8015930:	4770      	bx	lr

08015932 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015932:	b480      	push	{r7}
 8015934:	b083      	sub	sp, #12
 8015936:	af00      	add	r7, sp, #0
 8015938:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801593a:	bf00      	nop
 801593c:	370c      	adds	r7, #12
 801593e:	46bd      	mov	sp, r7
 8015940:	bc80      	pop	{r7}
 8015942:	4770      	bx	lr

08015944 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8015944:	b480      	push	{r7}
 8015946:	b083      	sub	sp, #12
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
 801594c:	460b      	mov	r3, r1
 801594e:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015950:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015952:	4618      	mov	r0, r3
 8015954:	370c      	adds	r7, #12
 8015956:	46bd      	mov	sp, r7
 8015958:	bc80      	pop	{r7}
 801595a:	4770      	bx	lr

0801595c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801595c:	b480      	push	{r7}
 801595e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015960:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015962:	4618      	mov	r0, r3
 8015964:	46bd      	mov	sp, r7
 8015966:	bc80      	pop	{r7}
 8015968:	4770      	bx	lr

0801596a <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801596a:	b480      	push	{r7}
 801596c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801596e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015970:	4618      	mov	r0, r3
 8015972:	46bd      	mov	sp, r7
 8015974:	bc80      	pop	{r7}
 8015976:	4770      	bx	lr

08015978 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8015978:	b480      	push	{r7}
 801597a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801597c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801597e:	4618      	mov	r0, r3
 8015980:	46bd      	mov	sp, r7
 8015982:	bc80      	pop	{r7}
 8015984:	4770      	bx	lr

08015986 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015986:	b480      	push	{r7}
 8015988:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801598a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801598c:	4618      	mov	r0, r3
 801598e:	46bd      	mov	sp, r7
 8015990:	bc80      	pop	{r7}
 8015992:	4770      	bx	lr

08015994 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015994:	b480      	push	{r7}
 8015996:	b083      	sub	sp, #12
 8015998:	af00      	add	r7, sp, #0
 801599a:	4603      	mov	r3, r0
 801599c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801599e:	bf00      	nop
 80159a0:	370c      	adds	r7, #12
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bc80      	pop	{r7}
 80159a6:	4770      	bx	lr

080159a8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80159a8:	b480      	push	{r7}
 80159aa:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ac:	bf00      	nop
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bc80      	pop	{r7}
 80159b2:	4770      	bx	lr

080159b4 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80159b4:	b480      	push	{r7}
 80159b6:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159b8:	bf00      	nop
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bc80      	pop	{r7}
 80159be:	4770      	bx	lr

080159c0 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80159c0:	b480      	push	{r7}
 80159c2:	b083      	sub	sp, #12
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	4603      	mov	r3, r0
 80159c8:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159ca:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	370c      	adds	r7, #12
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bc80      	pop	{r7}
 80159d4:	4770      	bx	lr

080159d6 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80159d6:	b480      	push	{r7}
 80159d8:	b083      	sub	sp, #12
 80159da:	af00      	add	r7, sp, #0
 80159dc:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159de:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	370c      	adds	r7, #12
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bc80      	pop	{r7}
 80159e8:	4770      	bx	lr

080159ea <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80159ea:	b480      	push	{r7}
 80159ec:	b083      	sub	sp, #12
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159f2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	370c      	adds	r7, #12
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bc80      	pop	{r7}
 80159fc:	4770      	bx	lr

080159fe <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80159fe:	b480      	push	{r7}
 8015a00:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a02:	bf00      	nop
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bc80      	pop	{r7}
 8015a08:	4770      	bx	lr

08015a0a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015a0a:	b480      	push	{r7}
 8015a0c:	b083      	sub	sp, #12
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	4603      	mov	r3, r0
 8015a12:	6039      	str	r1, [r7, #0]
 8015a14:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8015a16:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	370c      	adds	r7, #12
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bc80      	pop	{r7}
 8015a20:	4770      	bx	lr

08015a22 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015a22:	b480      	push	{r7}
 8015a24:	b083      	sub	sp, #12
 8015a26:	af00      	add	r7, sp, #0
 8015a28:	4603      	mov	r3, r0
 8015a2a:	603a      	str	r2, [r7, #0]
 8015a2c:	80fb      	strh	r3, [r7, #6]
 8015a2e:	460b      	mov	r3, r1
 8015a30:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a32:	bf00      	nop
 8015a34:	370c      	adds	r7, #12
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bc80      	pop	{r7}
 8015a3a:	4770      	bx	lr

08015a3c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a40:	bf00      	nop
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bc80      	pop	{r7}
 8015a46:	4770      	bx	lr

08015a48 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015a48:	b480      	push	{r7}
 8015a4a:	b083      	sub	sp, #12
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015a50:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	370c      	adds	r7, #12
 8015a56:	46bd      	mov	sp, r7
 8015a58:	bc80      	pop	{r7}
 8015a5a:	4770      	bx	lr

08015a5c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015a5c:	b480      	push	{r7}
 8015a5e:	b083      	sub	sp, #12
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015a64:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	370c      	adds	r7, #12
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bc80      	pop	{r7}
 8015a6e:	4770      	bx	lr

08015a70 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015a70:	b480      	push	{r7}
 8015a72:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a74:	bf00      	nop
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bc80      	pop	{r7}
 8015a7a:	4770      	bx	lr

08015a7c <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	b083      	sub	sp, #12
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	460b      	mov	r3, r1
 8015a86:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a88:	bf00      	nop
 8015a8a:	370c      	adds	r7, #12
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bc80      	pop	{r7}
 8015a90:	4770      	bx	lr

08015a92 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8015a92:	b480      	push	{r7}
 8015a94:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a96:	bf00      	nop
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bc80      	pop	{r7}
 8015a9c:	4770      	bx	lr

08015a9e <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015a9e:	b480      	push	{r7}
 8015aa0:	b085      	sub	sp, #20
 8015aa2:	af00      	add	r7, sp, #0
 8015aa4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015aaa:	2300      	movs	r3, #0
 8015aac:	81fb      	strh	r3, [r7, #14]
 8015aae:	e00a      	b.n	8015ac6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015ab0:	89fb      	ldrh	r3, [r7, #14]
 8015ab2:	68ba      	ldr	r2, [r7, #8]
 8015ab4:	4413      	add	r3, r2
 8015ab6:	781b      	ldrb	r3, [r3, #0]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d001      	beq.n	8015ac0 <IsSlotFree+0x22>
        {
            return false;
 8015abc:	2300      	movs	r3, #0
 8015abe:	e006      	b.n	8015ace <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015ac0:	89fb      	ldrh	r3, [r7, #14]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	81fb      	strh	r3, [r7, #14]
 8015ac6:	89fb      	ldrh	r3, [r7, #14]
 8015ac8:	2b0f      	cmp	r3, #15
 8015aca:	d9f1      	bls.n	8015ab0 <IsSlotFree+0x12>
        }
    }
    return true;
 8015acc:	2301      	movs	r3, #1
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3714      	adds	r7, #20
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bc80      	pop	{r7}
 8015ad6:	4770      	bx	lr

08015ad8 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015ae2:	e007      	b.n	8015af4 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015ae4:	79fb      	ldrb	r3, [r7, #7]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015aea:	79fb      	ldrb	r3, [r7, #7]
 8015aec:	2b20      	cmp	r3, #32
 8015aee:	d101      	bne.n	8015af4 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015af0:	2300      	movs	r3, #0
 8015af2:	e012      	b.n	8015b1a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015af4:	79fb      	ldrb	r3, [r7, #7]
 8015af6:	011b      	lsls	r3, r3, #4
 8015af8:	3308      	adds	r3, #8
 8015afa:	4a0a      	ldr	r2, [pc, #40]	; (8015b24 <MallocNewMacCommandSlot+0x4c>)
 8015afc:	4413      	add	r3, r2
 8015afe:	4618      	mov	r0, r3
 8015b00:	f7ff ffcd 	bl	8015a9e <IsSlotFree>
 8015b04:	4603      	mov	r3, r0
 8015b06:	f083 0301 	eor.w	r3, r3, #1
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d1e9      	bne.n	8015ae4 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015b10:	79fb      	ldrb	r3, [r7, #7]
 8015b12:	011b      	lsls	r3, r3, #4
 8015b14:	3308      	adds	r3, #8
 8015b16:	4a03      	ldr	r2, [pc, #12]	; (8015b24 <MallocNewMacCommandSlot+0x4c>)
 8015b18:	4413      	add	r3, r2
}
 8015b1a:	4618      	mov	r0, r3
 8015b1c:	3708      	adds	r7, #8
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	20001830 	.word	0x20001830

08015b28 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b082      	sub	sp, #8
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d101      	bne.n	8015b3a <FreeMacCommandSlot+0x12>
    {
        return false;
 8015b36:	2300      	movs	r3, #0
 8015b38:	e005      	b.n	8015b46 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015b3a:	2210      	movs	r2, #16
 8015b3c:	2100      	movs	r1, #0
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f005 fccc 	bl	801b4dc <memset1>

    return true;
 8015b44:	2301      	movs	r3, #1
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3708      	adds	r7, #8
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}

08015b4e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015b4e:	b480      	push	{r7}
 8015b50:	b083      	sub	sp, #12
 8015b52:	af00      	add	r7, sp, #0
 8015b54:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d101      	bne.n	8015b60 <LinkedListInit+0x12>
    {
        return false;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	e006      	b.n	8015b6e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2200      	movs	r2, #0
 8015b64:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	2200      	movs	r2, #0
 8015b6a:	605a      	str	r2, [r3, #4]

    return true;
 8015b6c:	2301      	movs	r3, #1
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	370c      	adds	r7, #12
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bc80      	pop	{r7}
 8015b76:	4770      	bx	lr

08015b78 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b78:	b480      	push	{r7}
 8015b7a:	b083      	sub	sp, #12
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d002      	beq.n	8015b8e <LinkedListAdd+0x16>
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d101      	bne.n	8015b92 <LinkedListAdd+0x1a>
    {
        return false;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	e015      	b.n	8015bbe <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d102      	bne.n	8015ba0 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	683a      	ldr	r2, [r7, #0]
 8015b9e:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	685b      	ldr	r3, [r3, #4]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d003      	beq.n	8015bb0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	683a      	ldr	r2, [r7, #0]
 8015bae:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	683a      	ldr	r2, [r7, #0]
 8015bba:	605a      	str	r2, [r3, #4]

    return true;
 8015bbc:	2301      	movs	r3, #1
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	370c      	adds	r7, #12
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bc80      	pop	{r7}
 8015bc6:	4770      	bx	lr

08015bc8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015bc8:	b480      	push	{r7}
 8015bca:	b085      	sub	sp, #20
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d002      	beq.n	8015bde <LinkedListGetPrevious+0x16>
 8015bd8:	683b      	ldr	r3, [r7, #0]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d101      	bne.n	8015be2 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015bde:	2300      	movs	r3, #0
 8015be0:	e016      	b.n	8015c10 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015be8:	683a      	ldr	r2, [r7, #0]
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	429a      	cmp	r2, r3
 8015bee:	d00c      	beq.n	8015c0a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015bf0:	e002      	b.n	8015bf8 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d007      	beq.n	8015c0e <LinkedListGetPrevious+0x46>
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	681b      	ldr	r3, [r3, #0]
 8015c02:	683a      	ldr	r2, [r7, #0]
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d1f4      	bne.n	8015bf2 <LinkedListGetPrevious+0x2a>
 8015c08:	e001      	b.n	8015c0e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015c0e:	68fb      	ldr	r3, [r7, #12]
}
 8015c10:	4618      	mov	r0, r3
 8015c12:	3714      	adds	r7, #20
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bc80      	pop	{r7}
 8015c18:	4770      	bx	lr

08015c1a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015c1a:	b580      	push	{r7, lr}
 8015c1c:	b084      	sub	sp, #16
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	6078      	str	r0, [r7, #4]
 8015c22:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d002      	beq.n	8015c30 <LinkedListRemove+0x16>
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d101      	bne.n	8015c34 <LinkedListRemove+0x1a>
    {
        return false;
 8015c30:	2300      	movs	r3, #0
 8015c32:	e020      	b.n	8015c76 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015c34:	6839      	ldr	r1, [r7, #0]
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	f7ff ffc6 	bl	8015bc8 <LinkedListGetPrevious>
 8015c3c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	683a      	ldr	r2, [r7, #0]
 8015c44:	429a      	cmp	r2, r3
 8015c46:	d103      	bne.n	8015c50 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	681a      	ldr	r2, [r3, #0]
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	683a      	ldr	r2, [r7, #0]
 8015c56:	429a      	cmp	r2, r3
 8015c58:	d102      	bne.n	8015c60 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	68fa      	ldr	r2, [r7, #12]
 8015c5e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d003      	beq.n	8015c6e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	681a      	ldr	r2, [r3, #0]
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015c6e:	683b      	ldr	r3, [r7, #0]
 8015c70:	2200      	movs	r2, #0
 8015c72:	601a      	str	r2, [r3, #0]

    return true;
 8015c74:	2301      	movs	r3, #1
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3710      	adds	r7, #16
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}
	...

08015c80 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015c80:	b480      	push	{r7}
 8015c82:	b083      	sub	sp, #12
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	4603      	mov	r3, r0
 8015c88:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015c8a:	79fb      	ldrb	r3, [r7, #7]
 8015c8c:	2b11      	cmp	r3, #17
 8015c8e:	bf8c      	ite	hi
 8015c90:	2201      	movhi	r2, #1
 8015c92:	2200      	movls	r2, #0
 8015c94:	b2d2      	uxtb	r2, r2
 8015c96:	2a00      	cmp	r2, #0
 8015c98:	d10d      	bne.n	8015cb6 <IsSticky+0x36>
 8015c9a:	4a0a      	ldr	r2, [pc, #40]	; (8015cc4 <IsSticky+0x44>)
 8015c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8015ca0:	f003 0301 	and.w	r3, r3, #1
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	bf14      	ite	ne
 8015ca8:	2301      	movne	r3, #1
 8015caa:	2300      	moveq	r3, #0
 8015cac:	b2db      	uxtb	r3, r3
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d001      	beq.n	8015cb6 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	e000      	b.n	8015cb8 <IsSticky+0x38>
        default:
            return false;
 8015cb6:	2300      	movs	r3, #0
    }
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	370c      	adds	r7, #12
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bc80      	pop	{r7}
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	00020720 	.word	0x00020720

08015cc8 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015cc8:	b480      	push	{r7}
 8015cca:	b083      	sub	sp, #12
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	4603      	mov	r3, r0
 8015cd0:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015cd2:	2300      	movs	r3, #0
    }
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	370c      	adds	r7, #12
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bc80      	pop	{r7}
 8015cdc:	4770      	bx	lr
	...

08015ce0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015ce4:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8015ce8:	2100      	movs	r1, #0
 8015cea:	4804      	ldr	r0, [pc, #16]	; (8015cfc <LoRaMacCommandsInit+0x1c>)
 8015cec:	f005 fbf6 	bl	801b4dc <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015cf0:	4802      	ldr	r0, [pc, #8]	; (8015cfc <LoRaMacCommandsInit+0x1c>)
 8015cf2:	f7ff ff2c 	bl	8015b4e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015cf6:	2300      	movs	r3, #0
}
 8015cf8:	4618      	mov	r0, r3
 8015cfa:	bd80      	pop	{r7, pc}
 8015cfc:	20001830 	.word	0x20001830

08015d00 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b086      	sub	sp, #24
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	4603      	mov	r3, r0
 8015d08:	60b9      	str	r1, [r7, #8]
 8015d0a:	607a      	str	r2, [r7, #4]
 8015d0c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015d0e:	68bb      	ldr	r3, [r7, #8]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d101      	bne.n	8015d18 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015d14:	2301      	movs	r3, #1
 8015d16:	e03b      	b.n	8015d90 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015d18:	f7ff fede 	bl	8015ad8 <MallocNewMacCommandSlot>
 8015d1c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015d1e:	697b      	ldr	r3, [r7, #20]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d101      	bne.n	8015d28 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015d24:	2302      	movs	r3, #2
 8015d26:	e033      	b.n	8015d90 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015d28:	6979      	ldr	r1, [r7, #20]
 8015d2a:	481b      	ldr	r0, [pc, #108]	; (8015d98 <LoRaMacCommandsAddCmd+0x98>)
 8015d2c:	f7ff ff24 	bl	8015b78 <LinkedListAdd>
 8015d30:	4603      	mov	r3, r0
 8015d32:	f083 0301 	eor.w	r3, r3, #1
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d001      	beq.n	8015d40 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015d3c:	2305      	movs	r3, #5
 8015d3e:	e027      	b.n	8015d90 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015d40:	697b      	ldr	r3, [r7, #20]
 8015d42:	7bfa      	ldrb	r2, [r7, #15]
 8015d44:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	687a      	ldr	r2, [r7, #4]
 8015d4a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015d4c:	697b      	ldr	r3, [r7, #20]
 8015d4e:	3305      	adds	r3, #5
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	b292      	uxth	r2, r2
 8015d54:	68b9      	ldr	r1, [r7, #8]
 8015d56:	4618      	mov	r0, r3
 8015d58:	f005 fb85 	bl	801b466 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015d5c:	7bfb      	ldrb	r3, [r7, #15]
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7ff ff8e 	bl	8015c80 <IsSticky>
 8015d64:	4603      	mov	r3, r0
 8015d66:	461a      	mov	r2, r3
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015d6c:	7bfb      	ldrb	r3, [r7, #15]
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f7ff ffaa 	bl	8015cc8 <IsConfirmationRequired>
 8015d74:	4603      	mov	r3, r0
 8015d76:	461a      	mov	r2, r3
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015d7c:	4b06      	ldr	r3, [pc, #24]	; (8015d98 <LoRaMacCommandsAddCmd+0x98>)
 8015d7e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	4413      	add	r3, r2
 8015d86:	3301      	adds	r3, #1
 8015d88:	4a03      	ldr	r2, [pc, #12]	; (8015d98 <LoRaMacCommandsAddCmd+0x98>)
 8015d8a:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8015d8e:	2300      	movs	r3, #0
}
 8015d90:	4618      	mov	r0, r3
 8015d92:	3718      	adds	r7, #24
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}
 8015d98:	20001830 	.word	0x20001830

08015d9c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b082      	sub	sp, #8
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d101      	bne.n	8015dae <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015daa:	2301      	movs	r3, #1
 8015dac:	e021      	b.n	8015df2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015dae:	6879      	ldr	r1, [r7, #4]
 8015db0:	4812      	ldr	r0, [pc, #72]	; (8015dfc <LoRaMacCommandsRemoveCmd+0x60>)
 8015db2:	f7ff ff32 	bl	8015c1a <LinkedListRemove>
 8015db6:	4603      	mov	r3, r0
 8015db8:	f083 0301 	eor.w	r3, r3, #1
 8015dbc:	b2db      	uxtb	r3, r3
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d001      	beq.n	8015dc6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015dc2:	2303      	movs	r3, #3
 8015dc4:	e015      	b.n	8015df2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015dc6:	4b0d      	ldr	r3, [pc, #52]	; (8015dfc <LoRaMacCommandsRemoveCmd+0x60>)
 8015dc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	689b      	ldr	r3, [r3, #8]
 8015dd0:	1ad3      	subs	r3, r2, r3
 8015dd2:	3b01      	subs	r3, #1
 8015dd4:	4a09      	ldr	r2, [pc, #36]	; (8015dfc <LoRaMacCommandsRemoveCmd+0x60>)
 8015dd6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f7ff fea4 	bl	8015b28 <FreeMacCommandSlot>
 8015de0:	4603      	mov	r3, r0
 8015de2:	f083 0301 	eor.w	r3, r3, #1
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d001      	beq.n	8015df0 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015dec:	2305      	movs	r3, #5
 8015dee:	e000      	b.n	8015df2 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015df0:	2300      	movs	r3, #0
}
 8015df2:	4618      	mov	r0, r3
 8015df4:	3708      	adds	r7, #8
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	20001830 	.word	0x20001830

08015e00 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015e00:	b480      	push	{r7}
 8015e02:	b085      	sub	sp, #20
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	4603      	mov	r3, r0
 8015e08:	6039      	str	r1, [r7, #0]
 8015e0a:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015e0c:	4b0e      	ldr	r3, [pc, #56]	; (8015e48 <LoRaMacCommandsGetCmd+0x48>)
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015e12:	e002      	b.n	8015e1a <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d004      	beq.n	8015e2a <LoRaMacCommandsGetCmd+0x2a>
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	791b      	ldrb	r3, [r3, #4]
 8015e24:	79fa      	ldrb	r2, [r7, #7]
 8015e26:	429a      	cmp	r2, r3
 8015e28:	d1f4      	bne.n	8015e14 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	68fa      	ldr	r2, [r7, #12]
 8015e2e:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d101      	bne.n	8015e3a <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015e36:	2303      	movs	r3, #3
 8015e38:	e000      	b.n	8015e3c <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015e3a:	2300      	movs	r3, #0
}
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	3714      	adds	r7, #20
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bc80      	pop	{r7}
 8015e44:	4770      	bx	lr
 8015e46:	bf00      	nop
 8015e48:	20001830 	.word	0x20001830

08015e4c <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b082      	sub	sp, #8
 8015e50:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015e52:	4b0f      	ldr	r3, [pc, #60]	; (8015e90 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015e58:	e012      	b.n	8015e80 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	7b1b      	ldrb	r3, [r3, #12]
 8015e5e:	f083 0301 	eor.w	r3, r3, #1
 8015e62:	b2db      	uxtb	r3, r3
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d008      	beq.n	8015e7a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f7ff ff94 	bl	8015d9c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	607b      	str	r3, [r7, #4]
 8015e78:	e002      	b.n	8015e80 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d1e9      	bne.n	8015e5a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3708      	adds	r7, #8
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	bd80      	pop	{r7, pc}
 8015e90:	20001830 	.word	0x20001830

08015e94 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b082      	sub	sp, #8
 8015e98:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015e9a:	4b13      	ldr	r3, [pc, #76]	; (8015ee8 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015ea0:	e01a      	b.n	8015ed8 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	791b      	ldrb	r3, [r3, #4]
 8015eac:	4618      	mov	r0, r3
 8015eae:	f7ff fee7 	bl	8015c80 <IsSticky>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d00d      	beq.n	8015ed4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	791b      	ldrb	r3, [r3, #4]
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7ff ff03 	bl	8015cc8 <IsConfirmationRequired>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	f083 0301 	eor.w	r3, r3, #1
 8015ec8:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d002      	beq.n	8015ed4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f7ff ff64 	bl	8015d9c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1e1      	bne.n	8015ea2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015ede:	2300      	movs	r3, #0
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	20001830 	.word	0x20001830

08015eec <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015eec:	b480      	push	{r7}
 8015eee:	b083      	sub	sp, #12
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d101      	bne.n	8015efe <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015efa:	2301      	movs	r3, #1
 8015efc:	e005      	b.n	8015f0a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015efe:	4b05      	ldr	r3, [pc, #20]	; (8015f14 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015f08:	2300      	movs	r3, #0
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	370c      	adds	r7, #12
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bc80      	pop	{r7}
 8015f12:	4770      	bx	lr
 8015f14:	20001830 	.word	0x20001830

08015f18 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b088      	sub	sp, #32
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	60f8      	str	r0, [r7, #12]
 8015f20:	60b9      	str	r1, [r7, #8]
 8015f22:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015f24:	4b25      	ldr	r3, [pc, #148]	; (8015fbc <LoRaMacCommandsSerializeCmds+0xa4>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d002      	beq.n	8015f3a <LoRaMacCommandsSerializeCmds+0x22>
 8015f34:	68bb      	ldr	r3, [r7, #8]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d126      	bne.n	8015f88 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	e039      	b.n	8015fb2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015f3e:	7efb      	ldrb	r3, [r7, #27]
 8015f40:	68fa      	ldr	r2, [r7, #12]
 8015f42:	1ad2      	subs	r2, r2, r3
 8015f44:	69fb      	ldr	r3, [r7, #28]
 8015f46:	689b      	ldr	r3, [r3, #8]
 8015f48:	3301      	adds	r3, #1
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	d320      	bcc.n	8015f90 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015f4e:	7efb      	ldrb	r3, [r7, #27]
 8015f50:	1c5a      	adds	r2, r3, #1
 8015f52:	76fa      	strb	r2, [r7, #27]
 8015f54:	461a      	mov	r2, r3
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	4413      	add	r3, r2
 8015f5a:	69fa      	ldr	r2, [r7, #28]
 8015f5c:	7912      	ldrb	r2, [r2, #4]
 8015f5e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015f60:	7efb      	ldrb	r3, [r7, #27]
 8015f62:	687a      	ldr	r2, [r7, #4]
 8015f64:	18d0      	adds	r0, r2, r3
 8015f66:	69fb      	ldr	r3, [r7, #28]
 8015f68:	1d59      	adds	r1, r3, #5
 8015f6a:	69fb      	ldr	r3, [r7, #28]
 8015f6c:	689b      	ldr	r3, [r3, #8]
 8015f6e:	b29b      	uxth	r3, r3
 8015f70:	461a      	mov	r2, r3
 8015f72:	f005 fa78 	bl	801b466 <memcpy1>
            itr += curElement->PayloadSize;
 8015f76:	69fb      	ldr	r3, [r7, #28]
 8015f78:	689b      	ldr	r3, [r3, #8]
 8015f7a:	b2da      	uxtb	r2, r3
 8015f7c:	7efb      	ldrb	r3, [r7, #27]
 8015f7e:	4413      	add	r3, r2
 8015f80:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015f82:	69fb      	ldr	r3, [r7, #28]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d1d7      	bne.n	8015f3e <LoRaMacCommandsSerializeCmds+0x26>
 8015f8e:	e009      	b.n	8015fa4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015f90:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015f92:	e007      	b.n	8015fa4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015f94:	69fb      	ldr	r3, [r7, #28]
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015f9a:	69f8      	ldr	r0, [r7, #28]
 8015f9c:	f7ff fefe 	bl	8015d9c <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015fa4:	69fb      	ldr	r3, [r7, #28]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d1f4      	bne.n	8015f94 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015faa:	68b8      	ldr	r0, [r7, #8]
 8015fac:	f7ff ff9e 	bl	8015eec <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015fb0:	2300      	movs	r3, #0
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3720      	adds	r7, #32
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}
 8015fba:	bf00      	nop
 8015fbc:	20001830 	.word	0x20001830

08015fc0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	b085      	sub	sp, #20
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015fce:	79fb      	ldrb	r3, [r7, #7]
 8015fd0:	3b02      	subs	r3, #2
 8015fd2:	2b11      	cmp	r3, #17
 8015fd4:	d850      	bhi.n	8016078 <LoRaMacCommandsGetCmdSize+0xb8>
 8015fd6:	a201      	add	r2, pc, #4	; (adr r2, 8015fdc <LoRaMacCommandsGetCmdSize+0x1c>)
 8015fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fdc:	08016025 	.word	0x08016025
 8015fe0:	0801602b 	.word	0x0801602b
 8015fe4:	08016031 	.word	0x08016031
 8015fe8:	08016037 	.word	0x08016037
 8015fec:	0801603d 	.word	0x0801603d
 8015ff0:	08016043 	.word	0x08016043
 8015ff4:	08016049 	.word	0x08016049
 8015ff8:	0801604f 	.word	0x0801604f
 8015ffc:	08016055 	.word	0x08016055
 8016000:	08016079 	.word	0x08016079
 8016004:	08016079 	.word	0x08016079
 8016008:	0801605b 	.word	0x0801605b
 801600c:	08016079 	.word	0x08016079
 8016010:	08016079 	.word	0x08016079
 8016014:	08016061 	.word	0x08016061
 8016018:	08016067 	.word	0x08016067
 801601c:	0801606d 	.word	0x0801606d
 8016020:	08016073 	.word	0x08016073
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8016024:	2303      	movs	r3, #3
 8016026:	73fb      	strb	r3, [r7, #15]
            break;
 8016028:	e027      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801602a:	2305      	movs	r3, #5
 801602c:	73fb      	strb	r3, [r7, #15]
            break;
 801602e:	e024      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8016030:	2302      	movs	r3, #2
 8016032:	73fb      	strb	r3, [r7, #15]
            break;
 8016034:	e021      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8016036:	2305      	movs	r3, #5
 8016038:	73fb      	strb	r3, [r7, #15]
            break;
 801603a:	e01e      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 801603c:	2301      	movs	r3, #1
 801603e:	73fb      	strb	r3, [r7, #15]
            break;
 8016040:	e01b      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8016042:	2306      	movs	r3, #6
 8016044:	73fb      	strb	r3, [r7, #15]
            break;
 8016046:	e018      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8016048:	2302      	movs	r3, #2
 801604a:	73fb      	strb	r3, [r7, #15]
            break;
 801604c:	e015      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801604e:	2302      	movs	r3, #2
 8016050:	73fb      	strb	r3, [r7, #15]
            break;
 8016052:	e012      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8016054:	2305      	movs	r3, #5
 8016056:	73fb      	strb	r3, [r7, #15]
            break;
 8016058:	e00f      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801605a:	2306      	movs	r3, #6
 801605c:	73fb      	strb	r3, [r7, #15]
            break;
 801605e:	e00c      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8016060:	2301      	movs	r3, #1
 8016062:	73fb      	strb	r3, [r7, #15]
            break;
 8016064:	e009      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8016066:	2305      	movs	r3, #5
 8016068:	73fb      	strb	r3, [r7, #15]
            break;
 801606a:	e006      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 801606c:	2304      	movs	r3, #4
 801606e:	73fb      	strb	r3, [r7, #15]
            break;
 8016070:	e003      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8016072:	2304      	movs	r3, #4
 8016074:	73fb      	strb	r3, [r7, #15]
            break;
 8016076:	e000      	b.n	801607a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8016078:	bf00      	nop
        }
    }
    return cidSize;
 801607a:	7bfb      	ldrb	r3, [r7, #15]
}
 801607c:	4618      	mov	r0, r3
 801607e:	3714      	adds	r7, #20
 8016080:	46bd      	mov	sp, r7
 8016082:	bc80      	pop	{r7}
 8016084:	4770      	bx	lr
 8016086:	bf00      	nop

08016088 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8016088:	b480      	push	{r7}
 801608a:	b083      	sub	sp, #12
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	4a07      	ldr	r2, [pc, #28]	; (80160b0 <IncreaseBufferPointer+0x28>)
 8016094:	4293      	cmp	r3, r2
 8016096:	d102      	bne.n	801609e <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016098:	4b06      	ldr	r3, [pc, #24]	; (80160b4 <IncreaseBufferPointer+0x2c>)
 801609a:	607b      	str	r3, [r7, #4]
 801609c:	e002      	b.n	80160a4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	3304      	adds	r3, #4
 80160a2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80160a4:	687b      	ldr	r3, [r7, #4]
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	370c      	adds	r7, #12
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bc80      	pop	{r7}
 80160ae:	4770      	bx	lr
 80160b0:	20001a58 	.word	0x20001a58
 80160b4:	20001a48 	.word	0x20001a48

080160b8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80160b8:	b480      	push	{r7}
 80160ba:	b083      	sub	sp, #12
 80160bc:	af00      	add	r7, sp, #0
 80160be:	4603      	mov	r3, r0
 80160c0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80160c2:	79fb      	ldrb	r3, [r7, #7]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d101      	bne.n	80160cc <IsListEmpty+0x14>
    {
        return true;
 80160c8:	2301      	movs	r3, #1
 80160ca:	e000      	b.n	80160ce <IsListEmpty+0x16>
    }
    return false;
 80160cc:	2300      	movs	r3, #0
}
 80160ce:	4618      	mov	r0, r3
 80160d0:	370c      	adds	r7, #12
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bc80      	pop	{r7}
 80160d6:	4770      	bx	lr

080160d8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80160d8:	b480      	push	{r7}
 80160da:	b083      	sub	sp, #12
 80160dc:	af00      	add	r7, sp, #0
 80160de:	4603      	mov	r3, r0
 80160e0:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80160e2:	79fb      	ldrb	r3, [r7, #7]
 80160e4:	2b04      	cmp	r3, #4
 80160e6:	d901      	bls.n	80160ec <IsListFull+0x14>
    {
        return true;
 80160e8:	2301      	movs	r3, #1
 80160ea:	e000      	b.n	80160ee <IsListFull+0x16>
    }
    return false;
 80160ec:	2300      	movs	r3, #0
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	370c      	adds	r7, #12
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bc80      	pop	{r7}
 80160f6:	4770      	bx	lr

080160f8 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b086      	sub	sp, #24
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	4603      	mov	r3, r0
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	607a      	str	r2, [r7, #4]
 8016104:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801610a:	4b13      	ldr	r3, [pc, #76]	; (8016158 <GetElement+0x60>)
 801610c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016110:	4618      	mov	r0, r3
 8016112:	f7ff ffd1 	bl	80160b8 <IsListEmpty>
 8016116:	4603      	mov	r3, r0
 8016118:	2b00      	cmp	r3, #0
 801611a:	d001      	beq.n	8016120 <GetElement+0x28>
    {
        return NULL;
 801611c:	2300      	movs	r3, #0
 801611e:	e017      	b.n	8016150 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016120:	2300      	movs	r3, #0
 8016122:	74fb      	strb	r3, [r7, #19]
 8016124:	e00d      	b.n	8016142 <GetElement+0x4a>
    {
        if( element->Request == request )
 8016126:	697b      	ldr	r3, [r7, #20]
 8016128:	781b      	ldrb	r3, [r3, #0]
 801612a:	7bfa      	ldrb	r2, [r7, #15]
 801612c:	429a      	cmp	r2, r3
 801612e:	d101      	bne.n	8016134 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	e00d      	b.n	8016150 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016134:	6978      	ldr	r0, [r7, #20]
 8016136:	f7ff ffa7 	bl	8016088 <IncreaseBufferPointer>
 801613a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801613c:	7cfb      	ldrb	r3, [r7, #19]
 801613e:	3301      	adds	r3, #1
 8016140:	74fb      	strb	r3, [r7, #19]
 8016142:	4b05      	ldr	r3, [pc, #20]	; (8016158 <GetElement+0x60>)
 8016144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016148:	7cfa      	ldrb	r2, [r7, #19]
 801614a:	429a      	cmp	r2, r3
 801614c:	d3eb      	bcc.n	8016126 <GetElement+0x2e>
    }

    return NULL;
 801614e:	2300      	movs	r3, #0
}
 8016150:	4618      	mov	r0, r3
 8016152:	3718      	adds	r7, #24
 8016154:	46bd      	mov	sp, r7
 8016156:	bd80      	pop	{r7, pc}
 8016158:	20001a3c 	.word	0x20001a3c

0801615c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b082      	sub	sp, #8
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8016164:	4a0c      	ldr	r2, [pc, #48]	; (8016198 <LoRaMacConfirmQueueInit+0x3c>)
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801616a:	4b0b      	ldr	r3, [pc, #44]	; (8016198 <LoRaMacConfirmQueueInit+0x3c>)
 801616c:	2200      	movs	r2, #0
 801616e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016172:	4b09      	ldr	r3, [pc, #36]	; (8016198 <LoRaMacConfirmQueueInit+0x3c>)
 8016174:	4a09      	ldr	r2, [pc, #36]	; (801619c <LoRaMacConfirmQueueInit+0x40>)
 8016176:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016178:	4b07      	ldr	r3, [pc, #28]	; (8016198 <LoRaMacConfirmQueueInit+0x3c>)
 801617a:	4a08      	ldr	r2, [pc, #32]	; (801619c <LoRaMacConfirmQueueInit+0x40>)
 801617c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801617e:	2214      	movs	r2, #20
 8016180:	21ff      	movs	r1, #255	; 0xff
 8016182:	4806      	ldr	r0, [pc, #24]	; (801619c <LoRaMacConfirmQueueInit+0x40>)
 8016184:	f005 f9aa 	bl	801b4dc <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016188:	4b03      	ldr	r3, [pc, #12]	; (8016198 <LoRaMacConfirmQueueInit+0x3c>)
 801618a:	2201      	movs	r2, #1
 801618c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8016190:	bf00      	nop
 8016192:	3708      	adds	r7, #8
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}
 8016198:	20001a3c 	.word	0x20001a3c
 801619c:	20001a48 	.word	0x20001a48

080161a0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b082      	sub	sp, #8
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80161a8:	4b19      	ldr	r3, [pc, #100]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 80161aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7ff ff92 	bl	80160d8 <IsListFull>
 80161b4:	4603      	mov	r3, r0
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d001      	beq.n	80161be <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80161ba:	2300      	movs	r3, #0
 80161bc:	e024      	b.n	8016208 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80161be:	4b14      	ldr	r3, [pc, #80]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 80161c0:	689b      	ldr	r3, [r3, #8]
 80161c2:	687a      	ldr	r2, [r7, #4]
 80161c4:	7812      	ldrb	r2, [r2, #0]
 80161c6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80161c8:	4b11      	ldr	r3, [pc, #68]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 80161ca:	689b      	ldr	r3, [r3, #8]
 80161cc:	687a      	ldr	r2, [r7, #4]
 80161ce:	7852      	ldrb	r2, [r2, #1]
 80161d0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80161d2:	4b0f      	ldr	r3, [pc, #60]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 80161d4:	689b      	ldr	r3, [r3, #8]
 80161d6:	687a      	ldr	r2, [r7, #4]
 80161d8:	78d2      	ldrb	r2, [r2, #3]
 80161da:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80161dc:	4b0c      	ldr	r3, [pc, #48]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 80161de:	689b      	ldr	r3, [r3, #8]
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	7892      	ldrb	r2, [r2, #2]
 80161e4:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80161e6:	4b0a      	ldr	r3, [pc, #40]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 80161e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161ec:	3301      	adds	r3, #1
 80161ee:	b2da      	uxtb	r2, r3
 80161f0:	4b07      	ldr	r3, [pc, #28]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 80161f2:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80161f6:	4b06      	ldr	r3, [pc, #24]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 80161f8:	689b      	ldr	r3, [r3, #8]
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7ff ff44 	bl	8016088 <IncreaseBufferPointer>
 8016200:	4603      	mov	r3, r0
 8016202:	4a03      	ldr	r2, [pc, #12]	; (8016210 <LoRaMacConfirmQueueAdd+0x70>)
 8016204:	6093      	str	r3, [r2, #8]

    return true;
 8016206:	2301      	movs	r3, #1
}
 8016208:	4618      	mov	r0, r3
 801620a:	3708      	adds	r7, #8
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}
 8016210:	20001a3c 	.word	0x20001a3c

08016214 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016214:	b580      	push	{r7, lr}
 8016216:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016218:	4b0e      	ldr	r3, [pc, #56]	; (8016254 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801621a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801621e:	4618      	mov	r0, r3
 8016220:	f7ff ff4a 	bl	80160b8 <IsListEmpty>
 8016224:	4603      	mov	r3, r0
 8016226:	2b00      	cmp	r3, #0
 8016228:	d001      	beq.n	801622e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801622a:	2300      	movs	r3, #0
 801622c:	e010      	b.n	8016250 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801622e:	4b09      	ldr	r3, [pc, #36]	; (8016254 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016234:	3b01      	subs	r3, #1
 8016236:	b2da      	uxtb	r2, r3
 8016238:	4b06      	ldr	r3, [pc, #24]	; (8016254 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801623a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801623e:	4b05      	ldr	r3, [pc, #20]	; (8016254 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016240:	685b      	ldr	r3, [r3, #4]
 8016242:	4618      	mov	r0, r3
 8016244:	f7ff ff20 	bl	8016088 <IncreaseBufferPointer>
 8016248:	4603      	mov	r3, r0
 801624a:	4a02      	ldr	r2, [pc, #8]	; (8016254 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801624c:	6053      	str	r3, [r2, #4]

    return true;
 801624e:	2301      	movs	r3, #1
}
 8016250:	4618      	mov	r0, r3
 8016252:	bd80      	pop	{r7, pc}
 8016254:	20001a3c 	.word	0x20001a3c

08016258 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b084      	sub	sp, #16
 801625c:	af00      	add	r7, sp, #0
 801625e:	4603      	mov	r3, r0
 8016260:	460a      	mov	r2, r1
 8016262:	71fb      	strb	r3, [r7, #7]
 8016264:	4613      	mov	r3, r2
 8016266:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8016268:	2300      	movs	r3, #0
 801626a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801626c:	4b10      	ldr	r3, [pc, #64]	; (80162b0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801626e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016272:	4618      	mov	r0, r3
 8016274:	f7ff ff20 	bl	80160b8 <IsListEmpty>
 8016278:	4603      	mov	r3, r0
 801627a:	f083 0301 	eor.w	r3, r3, #1
 801627e:	b2db      	uxtb	r3, r3
 8016280:	2b00      	cmp	r3, #0
 8016282:	d011      	beq.n	80162a8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016284:	4b0a      	ldr	r3, [pc, #40]	; (80162b0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016286:	6859      	ldr	r1, [r3, #4]
 8016288:	4b09      	ldr	r3, [pc, #36]	; (80162b0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801628a:	689a      	ldr	r2, [r3, #8]
 801628c:	79bb      	ldrb	r3, [r7, #6]
 801628e:	4618      	mov	r0, r3
 8016290:	f7ff ff32 	bl	80160f8 <GetElement>
 8016294:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d005      	beq.n	80162a8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	79fa      	ldrb	r2, [r7, #7]
 80162a0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2201      	movs	r2, #1
 80162a6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80162a8:	bf00      	nop
 80162aa:	3710      	adds	r7, #16
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}
 80162b0:	20001a3c 	.word	0x20001a3c

080162b4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b084      	sub	sp, #16
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	4603      	mov	r3, r0
 80162bc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80162be:	2300      	movs	r3, #0
 80162c0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80162c2:	4b10      	ldr	r3, [pc, #64]	; (8016304 <LoRaMacConfirmQueueGetStatus+0x50>)
 80162c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7ff fef5 	bl	80160b8 <IsListEmpty>
 80162ce:	4603      	mov	r3, r0
 80162d0:	f083 0301 	eor.w	r3, r3, #1
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d00e      	beq.n	80162f8 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80162da:	4b0a      	ldr	r3, [pc, #40]	; (8016304 <LoRaMacConfirmQueueGetStatus+0x50>)
 80162dc:	6859      	ldr	r1, [r3, #4]
 80162de:	4b09      	ldr	r3, [pc, #36]	; (8016304 <LoRaMacConfirmQueueGetStatus+0x50>)
 80162e0:	689a      	ldr	r2, [r3, #8]
 80162e2:	79fb      	ldrb	r3, [r7, #7]
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7ff ff07 	bl	80160f8 <GetElement>
 80162ea:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d002      	beq.n	80162f8 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	785b      	ldrb	r3, [r3, #1]
 80162f6:	e000      	b.n	80162fa <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80162f8:	2301      	movs	r3, #1
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	3710      	adds	r7, #16
 80162fe:	46bd      	mov	sp, r7
 8016300:	bd80      	pop	{r7, pc}
 8016302:	bf00      	nop
 8016304:	20001a3c 	.word	0x20001a3c

08016308 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8016308:	b580      	push	{r7, lr}
 801630a:	b084      	sub	sp, #16
 801630c:	af00      	add	r7, sp, #0
 801630e:	4603      	mov	r3, r0
 8016310:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016312:	4b16      	ldr	r3, [pc, #88]	; (801636c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8016318:	4a14      	ldr	r2, [pc, #80]	; (801636c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801631a:	79fb      	ldrb	r3, [r7, #7]
 801631c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016320:	4b12      	ldr	r3, [pc, #72]	; (801636c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016322:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016326:	4618      	mov	r0, r3
 8016328:	f7ff fec6 	bl	80160b8 <IsListEmpty>
 801632c:	4603      	mov	r3, r0
 801632e:	f083 0301 	eor.w	r3, r3, #1
 8016332:	b2db      	uxtb	r3, r3
 8016334:	2b00      	cmp	r3, #0
 8016336:	d015      	beq.n	8016364 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	79fa      	ldrb	r2, [r7, #7]
 801633c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	78db      	ldrb	r3, [r3, #3]
 8016342:	f083 0301 	eor.w	r3, r3, #1
 8016346:	b2db      	uxtb	r3, r3
 8016348:	2b00      	cmp	r3, #0
 801634a:	d002      	beq.n	8016352 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	2201      	movs	r2, #1
 8016350:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8016352:	68f8      	ldr	r0, [r7, #12]
 8016354:	f7ff fe98 	bl	8016088 <IncreaseBufferPointer>
 8016358:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801635a:	4b04      	ldr	r3, [pc, #16]	; (801636c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801635c:	689b      	ldr	r3, [r3, #8]
 801635e:	68fa      	ldr	r2, [r7, #12]
 8016360:	429a      	cmp	r2, r3
 8016362:	d1e9      	bne.n	8016338 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8016364:	bf00      	nop
 8016366:	3710      	adds	r7, #16
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	20001a3c 	.word	0x20001a3c

08016370 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0
 8016376:	4603      	mov	r3, r0
 8016378:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801637a:	4b09      	ldr	r3, [pc, #36]	; (80163a0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801637c:	6859      	ldr	r1, [r3, #4]
 801637e:	4b08      	ldr	r3, [pc, #32]	; (80163a0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016380:	689a      	ldr	r2, [r3, #8]
 8016382:	79fb      	ldrb	r3, [r7, #7]
 8016384:	4618      	mov	r0, r3
 8016386:	f7ff feb7 	bl	80160f8 <GetElement>
 801638a:	4603      	mov	r3, r0
 801638c:	2b00      	cmp	r3, #0
 801638e:	d001      	beq.n	8016394 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8016390:	2301      	movs	r3, #1
 8016392:	e000      	b.n	8016396 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8016394:	2300      	movs	r3, #0
}
 8016396:	4618      	mov	r0, r3
 8016398:	3708      	adds	r7, #8
 801639a:	46bd      	mov	sp, r7
 801639c:	bd80      	pop	{r7, pc}
 801639e:	bf00      	nop
 80163a0:	20001a3c 	.word	0x20001a3c

080163a4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80163a4:	b580      	push	{r7, lr}
 80163a6:	b084      	sub	sp, #16
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80163ac:	4b25      	ldr	r3, [pc, #148]	; (8016444 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80163b2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80163b4:	2300      	movs	r3, #0
 80163b6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80163b8:	f107 0308 	add.w	r3, r7, #8
 80163bc:	2204      	movs	r2, #4
 80163be:	2100      	movs	r1, #0
 80163c0:	4618      	mov	r0, r3
 80163c2:	f005 f88b 	bl	801b4dc <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80163c6:	2300      	movs	r3, #0
 80163c8:	73fb      	strb	r3, [r7, #15]
 80163ca:	e032      	b.n	8016432 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80163cc:	4b1d      	ldr	r3, [pc, #116]	; (8016444 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	781a      	ldrb	r2, [r3, #0]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80163d6:	4b1b      	ldr	r3, [pc, #108]	; (8016444 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	785a      	ldrb	r2, [r3, #1]
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80163e0:	4b18      	ldr	r3, [pc, #96]	; (8016444 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	789b      	ldrb	r3, [r3, #2]
 80163e6:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80163e8:	7b7b      	ldrb	r3, [r7, #13]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d005      	beq.n	80163fa <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80163ee:	4b15      	ldr	r3, [pc, #84]	; (8016444 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	689b      	ldr	r3, [r3, #8]
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	4798      	blx	r3
 80163f8:	e00b      	b.n	8016412 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80163fa:	4b12      	ldr	r3, [pc, #72]	; (8016444 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80163fc:	685b      	ldr	r3, [r3, #4]
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016402:	4b10      	ldr	r3, [pc, #64]	; (8016444 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	785b      	ldrb	r3, [r3, #1]
 8016408:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801640a:	4b0e      	ldr	r3, [pc, #56]	; (8016444 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801640c:	685b      	ldr	r3, [r3, #4]
 801640e:	78db      	ldrb	r3, [r3, #3]
 8016410:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016412:	f7ff feff 	bl	8016214 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8016416:	7b7b      	ldrb	r3, [r7, #13]
 8016418:	f083 0301 	eor.w	r3, r3, #1
 801641c:	b2db      	uxtb	r3, r3
 801641e:	2b00      	cmp	r3, #0
 8016420:	d004      	beq.n	801642c <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016422:	f107 0308 	add.w	r3, r7, #8
 8016426:	4618      	mov	r0, r3
 8016428:	f7ff feba 	bl	80161a0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801642c:	7bfb      	ldrb	r3, [r7, #15]
 801642e:	3301      	adds	r3, #1
 8016430:	73fb      	strb	r3, [r7, #15]
 8016432:	7bfa      	ldrb	r2, [r7, #15]
 8016434:	7bbb      	ldrb	r3, [r7, #14]
 8016436:	429a      	cmp	r2, r3
 8016438:	d3c8      	bcc.n	80163cc <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801643a:	bf00      	nop
 801643c:	bf00      	nop
 801643e:	3710      	adds	r7, #16
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}
 8016444:	20001a3c 	.word	0x20001a3c

08016448 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8016448:	b480      	push	{r7}
 801644a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801644c:	4b03      	ldr	r3, [pc, #12]	; (801645c <LoRaMacConfirmQueueGetCnt+0x14>)
 801644e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8016452:	4618      	mov	r0, r3
 8016454:	46bd      	mov	sp, r7
 8016456:	bc80      	pop	{r7}
 8016458:	4770      	bx	lr
 801645a:	bf00      	nop
 801645c:	20001a3c 	.word	0x20001a3c

08016460 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016460:	b580      	push	{r7, lr}
 8016462:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016464:	4b06      	ldr	r3, [pc, #24]	; (8016480 <LoRaMacConfirmQueueIsFull+0x20>)
 8016466:	f893 3020 	ldrb.w	r3, [r3, #32]
 801646a:	4618      	mov	r0, r3
 801646c:	f7ff fe34 	bl	80160d8 <IsListFull>
 8016470:	4603      	mov	r3, r0
 8016472:	2b00      	cmp	r3, #0
 8016474:	d001      	beq.n	801647a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8016476:	2301      	movs	r3, #1
 8016478:	e000      	b.n	801647c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801647a:	2300      	movs	r3, #0
    }
}
 801647c:	4618      	mov	r0, r3
 801647e:	bd80      	pop	{r7, pc}
 8016480:	20001a3c 	.word	0x20001a3c

08016484 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b08e      	sub	sp, #56	; 0x38
 8016488:	af00      	add	r7, sp, #0
 801648a:	60f8      	str	r0, [r7, #12]
 801648c:	607b      	str	r3, [r7, #4]
 801648e:	460b      	mov	r3, r1
 8016490:	817b      	strh	r3, [r7, #10]
 8016492:	4613      	mov	r3, r2
 8016494:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d101      	bne.n	80164a0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801649c:	2309      	movs	r3, #9
 801649e:	e086      	b.n	80165ae <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80164a0:	2300      	movs	r3, #0
 80164a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80164a6:	2301      	movs	r3, #1
 80164a8:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80164aa:	2300      	movs	r3, #0
 80164ac:	623b      	str	r3, [r7, #32]
 80164ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80164b2:	2200      	movs	r2, #0
 80164b4:	601a      	str	r2, [r3, #0]
 80164b6:	605a      	str	r2, [r3, #4]
 80164b8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80164ba:	2300      	movs	r3, #0
 80164bc:	613b      	str	r3, [r7, #16]
 80164be:	f107 0314 	add.w	r3, r7, #20
 80164c2:	2200      	movs	r2, #0
 80164c4:	601a      	str	r2, [r3, #0]
 80164c6:	605a      	str	r2, [r3, #4]
 80164c8:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80164ca:	2301      	movs	r3, #1
 80164cc:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80164ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80164d2:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	b2db      	uxtb	r3, r3
 80164d8:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	0a1b      	lsrs	r3, r3, #8
 80164de:	b2db      	uxtb	r3, r3
 80164e0:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	0c1b      	lsrs	r3, r3, #16
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	0e1b      	lsrs	r3, r3, #24
 80164ee:	b2db      	uxtb	r3, r3
 80164f0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80164f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164f4:	b2db      	uxtb	r3, r3
 80164f6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80164f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164fa:	0a1b      	lsrs	r3, r3, #8
 80164fc:	b2db      	uxtb	r3, r3
 80164fe:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016502:	0c1b      	lsrs	r3, r3, #16
 8016504:	b2db      	uxtb	r3, r3
 8016506:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8016508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801650a:	0e1b      	lsrs	r3, r3, #24
 801650c:	b2db      	uxtb	r3, r3
 801650e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016510:	e048      	b.n	80165a4 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8016512:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016514:	b2db      	uxtb	r3, r3
 8016516:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8016518:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801651a:	3301      	adds	r3, #1
 801651c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801651e:	f107 0320 	add.w	r3, r7, #32
 8016522:	7a7a      	ldrb	r2, [r7, #9]
 8016524:	f107 0010 	add.w	r0, r7, #16
 8016528:	2110      	movs	r1, #16
 801652a:	f7f8 fa79 	bl	800ea20 <SecureElementAesEncrypt>
 801652e:	4603      	mov	r3, r0
 8016530:	2b00      	cmp	r3, #0
 8016532:	d001      	beq.n	8016538 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016534:	230e      	movs	r3, #14
 8016536:	e03a      	b.n	80165ae <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016538:	2300      	movs	r3, #0
 801653a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801653e:	e01e      	b.n	801657e <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016540:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016544:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016548:	4413      	add	r3, r2
 801654a:	461a      	mov	r2, r3
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	4413      	add	r3, r2
 8016550:	7819      	ldrb	r1, [r3, #0]
 8016552:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016556:	3338      	adds	r3, #56	; 0x38
 8016558:	443b      	add	r3, r7
 801655a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801655e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016562:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016566:	4403      	add	r3, r0
 8016568:	4618      	mov	r0, r3
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	4403      	add	r3, r0
 801656e:	404a      	eors	r2, r1
 8016570:	b2d2      	uxtb	r2, r2
 8016572:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016574:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016578:	3301      	adds	r3, #1
 801657a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801657e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016582:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8016586:	2a10      	cmp	r2, #16
 8016588:	bfa8      	it	ge
 801658a:	2210      	movge	r2, #16
 801658c:	b212      	sxth	r2, r2
 801658e:	4293      	cmp	r3, r2
 8016590:	dbd6      	blt.n	8016540 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8016592:	897b      	ldrh	r3, [r7, #10]
 8016594:	3b10      	subs	r3, #16
 8016596:	b29b      	uxth	r3, r3
 8016598:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801659a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801659e:	3310      	adds	r3, #16
 80165a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80165a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	dcb2      	bgt.n	8016512 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80165ac:	2300      	movs	r3, #0
}
 80165ae:	4618      	mov	r0, r3
 80165b0:	3738      	adds	r7, #56	; 0x38
 80165b2:	46bd      	mov	sp, r7
 80165b4:	bd80      	pop	{r7, pc}

080165b6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80165b6:	b490      	push	{r4, r7}
 80165b8:	b082      	sub	sp, #8
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	4604      	mov	r4, r0
 80165be:	4608      	mov	r0, r1
 80165c0:	4611      	mov	r1, r2
 80165c2:	461a      	mov	r2, r3
 80165c4:	4623      	mov	r3, r4
 80165c6:	80fb      	strh	r3, [r7, #6]
 80165c8:	4603      	mov	r3, r0
 80165ca:	717b      	strb	r3, [r7, #5]
 80165cc:	460b      	mov	r3, r1
 80165ce:	713b      	strb	r3, [r7, #4]
 80165d0:	4613      	mov	r3, r2
 80165d2:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80165d4:	69bb      	ldr	r3, [r7, #24]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d101      	bne.n	80165de <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165da:	2309      	movs	r3, #9
 80165dc:	e04e      	b.n	801667c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80165de:	69bb      	ldr	r3, [r7, #24]
 80165e0:	2249      	movs	r2, #73	; 0x49
 80165e2:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80165e4:	69bb      	ldr	r3, [r7, #24]
 80165e6:	3301      	adds	r3, #1
 80165e8:	2200      	movs	r2, #0
 80165ea:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80165ec:	69bb      	ldr	r3, [r7, #24]
 80165ee:	3302      	adds	r3, #2
 80165f0:	2200      	movs	r2, #0
 80165f2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80165f4:	69bb      	ldr	r3, [r7, #24]
 80165f6:	3303      	adds	r3, #3
 80165f8:	2200      	movs	r2, #0
 80165fa:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80165fc:	69bb      	ldr	r3, [r7, #24]
 80165fe:	3304      	adds	r3, #4
 8016600:	2200      	movs	r2, #0
 8016602:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016604:	69bb      	ldr	r3, [r7, #24]
 8016606:	3305      	adds	r3, #5
 8016608:	78fa      	ldrb	r2, [r7, #3]
 801660a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801660c:	69bb      	ldr	r3, [r7, #24]
 801660e:	3306      	adds	r3, #6
 8016610:	693a      	ldr	r2, [r7, #16]
 8016612:	b2d2      	uxtb	r2, r2
 8016614:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8016616:	693b      	ldr	r3, [r7, #16]
 8016618:	0a1a      	lsrs	r2, r3, #8
 801661a:	69bb      	ldr	r3, [r7, #24]
 801661c:	3307      	adds	r3, #7
 801661e:	b2d2      	uxtb	r2, r2
 8016620:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	0c1a      	lsrs	r2, r3, #16
 8016626:	69bb      	ldr	r3, [r7, #24]
 8016628:	3308      	adds	r3, #8
 801662a:	b2d2      	uxtb	r2, r2
 801662c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801662e:	693b      	ldr	r3, [r7, #16]
 8016630:	0e1a      	lsrs	r2, r3, #24
 8016632:	69bb      	ldr	r3, [r7, #24]
 8016634:	3309      	adds	r3, #9
 8016636:	b2d2      	uxtb	r2, r2
 8016638:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801663a:	69bb      	ldr	r3, [r7, #24]
 801663c:	330a      	adds	r3, #10
 801663e:	697a      	ldr	r2, [r7, #20]
 8016640:	b2d2      	uxtb	r2, r2
 8016642:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016644:	697b      	ldr	r3, [r7, #20]
 8016646:	0a1a      	lsrs	r2, r3, #8
 8016648:	69bb      	ldr	r3, [r7, #24]
 801664a:	330b      	adds	r3, #11
 801664c:	b2d2      	uxtb	r2, r2
 801664e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016650:	697b      	ldr	r3, [r7, #20]
 8016652:	0c1a      	lsrs	r2, r3, #16
 8016654:	69bb      	ldr	r3, [r7, #24]
 8016656:	330c      	adds	r3, #12
 8016658:	b2d2      	uxtb	r2, r2
 801665a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801665c:	697b      	ldr	r3, [r7, #20]
 801665e:	0e1a      	lsrs	r2, r3, #24
 8016660:	69bb      	ldr	r3, [r7, #24]
 8016662:	330d      	adds	r3, #13
 8016664:	b2d2      	uxtb	r2, r2
 8016666:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016668:	69bb      	ldr	r3, [r7, #24]
 801666a:	330e      	adds	r3, #14
 801666c:	2200      	movs	r2, #0
 801666e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	330f      	adds	r3, #15
 8016674:	88fa      	ldrh	r2, [r7, #6]
 8016676:	b2d2      	uxtb	r2, r2
 8016678:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801667a:	2300      	movs	r3, #0
}
 801667c:	4618      	mov	r0, r3
 801667e:	3708      	adds	r7, #8
 8016680:	46bd      	mov	sp, r7
 8016682:	bc90      	pop	{r4, r7}
 8016684:	4770      	bx	lr

08016686 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8016686:	b590      	push	{r4, r7, lr}
 8016688:	b08b      	sub	sp, #44	; 0x2c
 801668a:	af04      	add	r7, sp, #16
 801668c:	6078      	str	r0, [r7, #4]
 801668e:	4608      	mov	r0, r1
 8016690:	4611      	mov	r1, r2
 8016692:	461a      	mov	r2, r3
 8016694:	4603      	mov	r3, r0
 8016696:	807b      	strh	r3, [r7, #2]
 8016698:	460b      	mov	r3, r1
 801669a:	707b      	strb	r3, [r7, #1]
 801669c:	4613      	mov	r3, r2
 801669e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d002      	beq.n	80166ac <ComputeCmacB0+0x26>
 80166a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d101      	bne.n	80166b0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80166ac:	2309      	movs	r3, #9
 80166ae:	e024      	b.n	80166fa <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80166b0:	887b      	ldrh	r3, [r7, #2]
 80166b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166b6:	d901      	bls.n	80166bc <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80166b8:	230d      	movs	r3, #13
 80166ba:	e01e      	b.n	80166fa <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80166bc:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80166c0:	783a      	ldrb	r2, [r7, #0]
 80166c2:	7879      	ldrb	r1, [r7, #1]
 80166c4:	8878      	ldrh	r0, [r7, #2]
 80166c6:	f107 0308 	add.w	r3, r7, #8
 80166ca:	9302      	str	r3, [sp, #8]
 80166cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ce:	9301      	str	r3, [sp, #4]
 80166d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166d2:	9300      	str	r3, [sp, #0]
 80166d4:	4623      	mov	r3, r4
 80166d6:	f7ff ff6e 	bl	80165b6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80166da:	887a      	ldrh	r2, [r7, #2]
 80166dc:	7879      	ldrb	r1, [r7, #1]
 80166de:	f107 0008 	add.w	r0, r7, #8
 80166e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80166e4:	9300      	str	r3, [sp, #0]
 80166e6:	460b      	mov	r3, r1
 80166e8:	6879      	ldr	r1, [r7, #4]
 80166ea:	f7f8 f953 	bl	800e994 <SecureElementComputeAesCmac>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d001      	beq.n	80166f8 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80166f4:	230e      	movs	r3, #14
 80166f6:	e000      	b.n	80166fa <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80166f8:	2300      	movs	r3, #0
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	371c      	adds	r7, #28
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd90      	pop	{r4, r7, pc}

08016702 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016702:	b590      	push	{r4, r7, lr}
 8016704:	b0cd      	sub	sp, #308	; 0x134
 8016706:	af04      	add	r7, sp, #16
 8016708:	f507 7490 	add.w	r4, r7, #288	; 0x120
 801670c:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016710:	6020      	str	r0, [r4, #0]
 8016712:	460c      	mov	r4, r1
 8016714:	4610      	mov	r0, r2
 8016716:	4619      	mov	r1, r3
 8016718:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801671c:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016720:	4622      	mov	r2, r4
 8016722:	801a      	strh	r2, [r3, #0]
 8016724:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016728:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801672c:	4602      	mov	r2, r0
 801672e:	701a      	strb	r2, [r3, #0]
 8016730:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016734:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016738:	460a      	mov	r2, r1
 801673a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801673c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016740:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d101      	bne.n	801674e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801674a:	2309      	movs	r3, #9
 801674c:	e063      	b.n	8016816 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801674e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016752:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016756:	881b      	ldrh	r3, [r3, #0]
 8016758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801675c:	d901      	bls.n	8016762 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801675e:	230d      	movs	r3, #13
 8016760:	e059      	b.n	8016816 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016762:	f107 030c 	add.w	r3, r7, #12
 8016766:	f44f 7288 	mov.w	r2, #272	; 0x110
 801676a:	2100      	movs	r1, #0
 801676c:	4618      	mov	r0, r3
 801676e:	f004 feb5 	bl	801b4dc <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016772:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016776:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801677a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801677e:	781a      	ldrb	r2, [r3, #0]
 8016780:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016784:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016788:	7819      	ldrb	r1, [r3, #0]
 801678a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801678e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016792:	8818      	ldrh	r0, [r3, #0]
 8016794:	f107 030c 	add.w	r3, r7, #12
 8016798:	9302      	str	r3, [sp, #8]
 801679a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801679e:	9301      	str	r3, [sp, #4]
 80167a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80167a4:	9300      	str	r3, [sp, #0]
 80167a6:	4623      	mov	r3, r4
 80167a8:	f7ff ff05 	bl	80165b6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80167ac:	f107 030c 	add.w	r3, r7, #12
 80167b0:	3310      	adds	r3, #16
 80167b2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80167b6:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80167ba:	8812      	ldrh	r2, [r2, #0]
 80167bc:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80167c0:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80167c4:	6809      	ldr	r1, [r1, #0]
 80167c6:	4618      	mov	r0, r3
 80167c8:	f004 fe4d 	bl	801b466 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80167cc:	2306      	movs	r3, #6
 80167ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80167d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80167d6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80167da:	881b      	ldrh	r3, [r3, #0]
 80167dc:	3310      	adds	r3, #16
 80167de:	4619      	mov	r1, r3
 80167e0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80167e4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80167e8:	781b      	ldrb	r3, [r3, #0]
 80167ea:	f107 000c 	add.w	r0, r7, #12
 80167ee:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80167f2:	f7f8 f8e9 	bl	800e9c8 <SecureElementVerifyAesCmac>
 80167f6:	4603      	mov	r3, r0
 80167f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80167fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016800:	2b00      	cmp	r3, #0
 8016802:	d101      	bne.n	8016808 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016804:	2300      	movs	r3, #0
 8016806:	e006      	b.n	8016816 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801680c:	2b01      	cmp	r3, #1
 801680e:	d101      	bne.n	8016814 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016810:	2301      	movs	r3, #1
 8016812:	e000      	b.n	8016816 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016814:	230e      	movs	r3, #14
}
 8016816:	4618      	mov	r0, r3
 8016818:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801681c:	46bd      	mov	sp, r7
 801681e:	bd90      	pop	{r4, r7, pc}

08016820 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016820:	b480      	push	{r7}
 8016822:	b085      	sub	sp, #20
 8016824:	af00      	add	r7, sp, #0
 8016826:	4603      	mov	r3, r0
 8016828:	6039      	str	r1, [r7, #0]
 801682a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801682c:	2300      	movs	r3, #0
 801682e:	73fb      	strb	r3, [r7, #15]
 8016830:	e011      	b.n	8016856 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016832:	7bfb      	ldrb	r3, [r7, #15]
 8016834:	4a0c      	ldr	r2, [pc, #48]	; (8016868 <GetKeyAddrItem+0x48>)
 8016836:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801683a:	79fa      	ldrb	r2, [r7, #7]
 801683c:	429a      	cmp	r2, r3
 801683e:	d107      	bne.n	8016850 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016840:	7bfb      	ldrb	r3, [r7, #15]
 8016842:	009b      	lsls	r3, r3, #2
 8016844:	4a08      	ldr	r2, [pc, #32]	; (8016868 <GetKeyAddrItem+0x48>)
 8016846:	441a      	add	r2, r3
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801684c:	2300      	movs	r3, #0
 801684e:	e006      	b.n	801685e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016850:	7bfb      	ldrb	r3, [r7, #15]
 8016852:	3301      	adds	r3, #1
 8016854:	73fb      	strb	r3, [r7, #15]
 8016856:	7bfb      	ldrb	r3, [r7, #15]
 8016858:	2b01      	cmp	r3, #1
 801685a:	d9ea      	bls.n	8016832 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801685c:	230b      	movs	r3, #11
}
 801685e:	4618      	mov	r0, r3
 8016860:	3714      	adds	r7, #20
 8016862:	46bd      	mov	sp, r7
 8016864:	bc80      	pop	{r7}
 8016866:	4770      	bx	lr
 8016868:	20000110 	.word	0x20000110

0801686c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b088      	sub	sp, #32
 8016870:	af00      	add	r7, sp, #0
 8016872:	60b9      	str	r1, [r7, #8]
 8016874:	607a      	str	r2, [r7, #4]
 8016876:	461a      	mov	r2, r3
 8016878:	4603      	mov	r3, r0
 801687a:	73fb      	strb	r3, [r7, #15]
 801687c:	4613      	mov	r3, r2
 801687e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016880:	2300      	movs	r3, #0
 8016882:	613b      	str	r3, [r7, #16]
 8016884:	f107 0314 	add.w	r3, r7, #20
 8016888:	2200      	movs	r2, #0
 801688a:	601a      	str	r2, [r3, #0]
 801688c:	605a      	str	r2, [r3, #4]
 801688e:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8016890:	7bfb      	ldrb	r3, [r7, #15]
 8016892:	2b08      	cmp	r3, #8
 8016894:	d002      	beq.n	801689c <DeriveSessionKey10x+0x30>
 8016896:	2b09      	cmp	r3, #9
 8016898:	d003      	beq.n	80168a2 <DeriveSessionKey10x+0x36>
 801689a:	e005      	b.n	80168a8 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801689c:	2301      	movs	r3, #1
 801689e:	743b      	strb	r3, [r7, #16]
            break;
 80168a0:	e004      	b.n	80168ac <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80168a2:	2302      	movs	r3, #2
 80168a4:	743b      	strb	r3, [r7, #16]
            break;
 80168a6:	e001      	b.n	80168ac <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80168a8:	230a      	movs	r3, #10
 80168aa:	e02a      	b.n	8016902 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	b2db      	uxtb	r3, r3
 80168b0:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80168b2:	68bb      	ldr	r3, [r7, #8]
 80168b4:	0a1b      	lsrs	r3, r3, #8
 80168b6:	b2db      	uxtb	r3, r3
 80168b8:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80168ba:	68bb      	ldr	r3, [r7, #8]
 80168bc:	0c1b      	lsrs	r3, r3, #16
 80168be:	b2db      	uxtb	r3, r3
 80168c0:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	b2db      	uxtb	r3, r3
 80168c6:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	0a1b      	lsrs	r3, r3, #8
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	0c1b      	lsrs	r3, r3, #16
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80168d8:	89bb      	ldrh	r3, [r7, #12]
 80168da:	b2db      	uxtb	r3, r3
 80168dc:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80168de:	89bb      	ldrh	r3, [r7, #12]
 80168e0:	0a1b      	lsrs	r3, r3, #8
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	b2db      	uxtb	r3, r3
 80168e6:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80168e8:	7bfa      	ldrb	r2, [r7, #15]
 80168ea:	f107 0310 	add.w	r3, r7, #16
 80168ee:	2101      	movs	r1, #1
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7f8 f915 	bl	800eb20 <SecureElementDeriveAndStoreKey>
 80168f6:	4603      	mov	r3, r0
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d001      	beq.n	8016900 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80168fc:	230e      	movs	r3, #14
 80168fe:	e000      	b.n	8016902 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016900:	2300      	movs	r3, #0
}
 8016902:	4618      	mov	r0, r3
 8016904:	3720      	adds	r7, #32
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}
	...

0801690c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801690c:	b480      	push	{r7}
 801690e:	b083      	sub	sp, #12
 8016910:	af00      	add	r7, sp, #0
 8016912:	4603      	mov	r3, r0
 8016914:	6039      	str	r1, [r7, #0]
 8016916:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d101      	bne.n	8016922 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801691e:	2309      	movs	r3, #9
 8016920:	e029      	b.n	8016976 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8016922:	79fb      	ldrb	r3, [r7, #7]
 8016924:	3b01      	subs	r3, #1
 8016926:	2b03      	cmp	r3, #3
 8016928:	d822      	bhi.n	8016970 <GetLastFcntDown+0x64>
 801692a:	a201      	add	r2, pc, #4	; (adr r2, 8016930 <GetLastFcntDown+0x24>)
 801692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016930:	08016941 	.word	0x08016941
 8016934:	0801694d 	.word	0x0801694d
 8016938:	08016959 	.word	0x08016959
 801693c:	08016965 	.word	0x08016965
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016940:	4b0f      	ldr	r3, [pc, #60]	; (8016980 <GetLastFcntDown+0x74>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	691a      	ldr	r2, [r3, #16]
 8016946:	683b      	ldr	r3, [r7, #0]
 8016948:	601a      	str	r2, [r3, #0]
            break;
 801694a:	e013      	b.n	8016974 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801694c:	4b0c      	ldr	r3, [pc, #48]	; (8016980 <GetLastFcntDown+0x74>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	695a      	ldr	r2, [r3, #20]
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	601a      	str	r2, [r3, #0]
            break;
 8016956:	e00d      	b.n	8016974 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016958:	4b09      	ldr	r3, [pc, #36]	; (8016980 <GetLastFcntDown+0x74>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	699a      	ldr	r2, [r3, #24]
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	601a      	str	r2, [r3, #0]
            break;
 8016962:	e007      	b.n	8016974 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016964:	4b06      	ldr	r3, [pc, #24]	; (8016980 <GetLastFcntDown+0x74>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	69da      	ldr	r2, [r3, #28]
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	601a      	str	r2, [r3, #0]
            break;
 801696e:	e001      	b.n	8016974 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016970:	2305      	movs	r3, #5
 8016972:	e000      	b.n	8016976 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016974:	2300      	movs	r3, #0
}
 8016976:	4618      	mov	r0, r3
 8016978:	370c      	adds	r7, #12
 801697a:	46bd      	mov	sp, r7
 801697c:	bc80      	pop	{r7}
 801697e:	4770      	bx	lr
 8016980:	20001a60 	.word	0x20001a60

08016984 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016984:	b580      	push	{r7, lr}
 8016986:	b084      	sub	sp, #16
 8016988:	af00      	add	r7, sp, #0
 801698a:	4603      	mov	r3, r0
 801698c:	6039      	str	r1, [r7, #0]
 801698e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8016990:	2300      	movs	r3, #0
 8016992:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016994:	f107 020c 	add.w	r2, r7, #12
 8016998:	79fb      	ldrb	r3, [r7, #7]
 801699a:	4611      	mov	r1, r2
 801699c:	4618      	mov	r0, r3
 801699e:	f7ff ffb5 	bl	801690c <GetLastFcntDown>
 80169a2:	4603      	mov	r3, r0
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d001      	beq.n	80169ac <CheckFCntDown+0x28>
    {
        return false;
 80169a8:	2300      	movs	r3, #0
 80169aa:	e00a      	b.n	80169c2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	683a      	ldr	r2, [r7, #0]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d803      	bhi.n	80169bc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80169b4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80169b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80169ba:	d101      	bne.n	80169c0 <CheckFCntDown+0x3c>
    {
        return true;
 80169bc:	2301      	movs	r3, #1
 80169be:	e000      	b.n	80169c2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80169c0:	2300      	movs	r3, #0
    }
}
 80169c2:	4618      	mov	r0, r3
 80169c4:	3710      	adds	r7, #16
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}
	...

080169cc <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80169cc:	b480      	push	{r7}
 80169ce:	b083      	sub	sp, #12
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	4603      	mov	r3, r0
 80169d4:	6039      	str	r1, [r7, #0]
 80169d6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80169d8:	79fb      	ldrb	r3, [r7, #7]
 80169da:	3b01      	subs	r3, #1
 80169dc:	2b03      	cmp	r3, #3
 80169de:	d82b      	bhi.n	8016a38 <UpdateFCntDown+0x6c>
 80169e0:	a201      	add	r2, pc, #4	; (adr r2, 80169e8 <UpdateFCntDown+0x1c>)
 80169e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169e6:	bf00      	nop
 80169e8:	080169f9 	.word	0x080169f9
 80169ec:	08016a0b 	.word	0x08016a0b
 80169f0:	08016a1d 	.word	0x08016a1d
 80169f4:	08016a2f 	.word	0x08016a2f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80169f8:	4b12      	ldr	r3, [pc, #72]	; (8016a44 <UpdateFCntDown+0x78>)
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	683a      	ldr	r2, [r7, #0]
 80169fe:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016a00:	4b10      	ldr	r3, [pc, #64]	; (8016a44 <UpdateFCntDown+0x78>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	683a      	ldr	r2, [r7, #0]
 8016a06:	621a      	str	r2, [r3, #32]
            break;
 8016a08:	e017      	b.n	8016a3a <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8016a0a:	4b0e      	ldr	r3, [pc, #56]	; (8016a44 <UpdateFCntDown+0x78>)
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	683a      	ldr	r2, [r7, #0]
 8016a10:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8016a12:	4b0c      	ldr	r3, [pc, #48]	; (8016a44 <UpdateFCntDown+0x78>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	683a      	ldr	r2, [r7, #0]
 8016a18:	621a      	str	r2, [r3, #32]
            break;
 8016a1a:	e00e      	b.n	8016a3a <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016a1c:	4b09      	ldr	r3, [pc, #36]	; (8016a44 <UpdateFCntDown+0x78>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	683a      	ldr	r2, [r7, #0]
 8016a22:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8016a24:	4b07      	ldr	r3, [pc, #28]	; (8016a44 <UpdateFCntDown+0x78>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	683a      	ldr	r2, [r7, #0]
 8016a2a:	621a      	str	r2, [r3, #32]
            break;
 8016a2c:	e005      	b.n	8016a3a <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016a2e:	4b05      	ldr	r3, [pc, #20]	; (8016a44 <UpdateFCntDown+0x78>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	683a      	ldr	r2, [r7, #0]
 8016a34:	61da      	str	r2, [r3, #28]
            break;
 8016a36:	e000      	b.n	8016a3a <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016a38:	bf00      	nop
    }
}
 8016a3a:	bf00      	nop
 8016a3c:	370c      	adds	r7, #12
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bc80      	pop	{r7}
 8016a42:	4770      	bx	lr
 8016a44:	20001a60 	.word	0x20001a60

08016a48 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b083      	sub	sp, #12
 8016a4c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016a4e:	4b18      	ldr	r3, [pc, #96]	; (8016ab0 <ResetFCnts+0x68>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2200      	movs	r2, #0
 8016a54:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a56:	4b16      	ldr	r3, [pc, #88]	; (8016ab0 <ResetFCnts+0x68>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a5e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a60:	4b13      	ldr	r3, [pc, #76]	; (8016ab0 <ResetFCnts+0x68>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a68:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016a6a:	4b11      	ldr	r3, [pc, #68]	; (8016ab0 <ResetFCnts+0x68>)
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a72:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016a74:	4b0e      	ldr	r3, [pc, #56]	; (8016ab0 <ResetFCnts+0x68>)
 8016a76:	681a      	ldr	r2, [r3, #0]
 8016a78:	4b0d      	ldr	r3, [pc, #52]	; (8016ab0 <ResetFCnts+0x68>)
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	6992      	ldr	r2, [r2, #24]
 8016a7e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016a80:	2300      	movs	r3, #0
 8016a82:	607b      	str	r3, [r7, #4]
 8016a84:	e00b      	b.n	8016a9e <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8016a86:	4b0a      	ldr	r3, [pc, #40]	; (8016ab0 <ResetFCnts+0x68>)
 8016a88:	681a      	ldr	r2, [r3, #0]
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	3306      	adds	r3, #6
 8016a8e:	009b      	lsls	r3, r3, #2
 8016a90:	4413      	add	r3, r2
 8016a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a96:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	3301      	adds	r3, #1
 8016a9c:	607b      	str	r3, [r7, #4]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	ddf0      	ble.n	8016a86 <ResetFCnts+0x3e>
    }
}
 8016aa4:	bf00      	nop
 8016aa6:	bf00      	nop
 8016aa8:	370c      	adds	r7, #12
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bc80      	pop	{r7}
 8016aae:	4770      	bx	lr
 8016ab0:	20001a60 	.word	0x20001a60

08016ab4 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8016ab4:	b480      	push	{r7}
 8016ab6:	b083      	sub	sp, #12
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8016abc:	4b06      	ldr	r3, [pc, #24]	; (8016ad8 <IsJoinNonce10xOk+0x24>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	689b      	ldr	r3, [r3, #8]
 8016ac2:	687a      	ldr	r2, [r7, #4]
 8016ac4:	429a      	cmp	r2, r3
 8016ac6:	bf8c      	ite	hi
 8016ac8:	2301      	movhi	r3, #1
 8016aca:	2300      	movls	r3, #0
 8016acc:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8016ace:	4618      	mov	r0, r3
 8016ad0:	370c      	adds	r7, #12
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bc80      	pop	{r7}
 8016ad6:	4770      	bx	lr
 8016ad8:	20001a60 	.word	0x20001a60

08016adc <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d101      	bne.n	8016aee <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016aea:	2308      	movs	r3, #8
 8016aec:	e01c      	b.n	8016b28 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016aee:	4a10      	ldr	r2, [pc, #64]	; (8016b30 <LoRaMacCryptoInit+0x54>)
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016af4:	4b0e      	ldr	r3, [pc, #56]	; (8016b30 <LoRaMacCryptoInit+0x54>)
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	2228      	movs	r2, #40	; 0x28
 8016afa:	2100      	movs	r1, #0
 8016afc:	4618      	mov	r0, r3
 8016afe:	f004 fced 	bl	801b4dc <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016b02:	4b0b      	ldr	r3, [pc, #44]	; (8016b30 <LoRaMacCryptoInit+0x54>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	2201      	movs	r2, #1
 8016b08:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016b0a:	4b09      	ldr	r3, [pc, #36]	; (8016b30 <LoRaMacCryptoInit+0x54>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	2201      	movs	r2, #1
 8016b10:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016b12:	4b07      	ldr	r3, [pc, #28]	; (8016b30 <LoRaMacCryptoInit+0x54>)
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	2201      	movs	r2, #1
 8016b18:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016b1a:	4b05      	ldr	r3, [pc, #20]	; (8016b30 <LoRaMacCryptoInit+0x54>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	2200      	movs	r2, #0
 8016b20:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016b22:	f7ff ff91 	bl	8016a48 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016b26:	2300      	movs	r3, #0
}
 8016b28:	4618      	mov	r0, r3
 8016b2a:	3708      	adds	r7, #8
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}
 8016b30:	20001a60 	.word	0x20001a60

08016b34 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016b34:	b480      	push	{r7}
 8016b36:	b083      	sub	sp, #12
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016b3c:	4b04      	ldr	r3, [pc, #16]	; (8016b50 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	687a      	ldr	r2, [r7, #4]
 8016b42:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016b44:	2300      	movs	r3, #0
}
 8016b46:	4618      	mov	r0, r3
 8016b48:	370c      	adds	r7, #12
 8016b4a:	46bd      	mov	sp, r7
 8016b4c:	bc80      	pop	{r7}
 8016b4e:	4770      	bx	lr
 8016b50:	20001a60 	.word	0x20001a60

08016b54 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016b54:	b480      	push	{r7}
 8016b56:	b083      	sub	sp, #12
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d101      	bne.n	8016b66 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b62:	2309      	movs	r3, #9
 8016b64:	e006      	b.n	8016b74 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016b66:	4b06      	ldr	r3, [pc, #24]	; (8016b80 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	68db      	ldr	r3, [r3, #12]
 8016b6c:	1c5a      	adds	r2, r3, #1
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016b72:	2300      	movs	r3, #0
}
 8016b74:	4618      	mov	r0, r3
 8016b76:	370c      	adds	r7, #12
 8016b78:	46bd      	mov	sp, r7
 8016b7a:	bc80      	pop	{r7}
 8016b7c:	4770      	bx	lr
 8016b7e:	bf00      	nop
 8016b80:	20001a60 	.word	0x20001a60

08016b84 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b088      	sub	sp, #32
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	60b9      	str	r1, [r7, #8]
 8016b8e:	607a      	str	r2, [r7, #4]
 8016b90:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8016b92:	2300      	movs	r3, #0
 8016b94:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8016b96:	2300      	movs	r3, #0
 8016b98:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016b9a:	2312      	movs	r3, #18
 8016b9c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d101      	bne.n	8016ba8 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ba4:	2309      	movs	r3, #9
 8016ba6:	e035      	b.n	8016c14 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016ba8:	f107 0214 	add.w	r2, r7, #20
 8016bac:	7bfb      	ldrb	r3, [r7, #15]
 8016bae:	4611      	mov	r1, r2
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7ff feab 	bl	801690c <GetLastFcntDown>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016bba:	7efb      	ldrb	r3, [r7, #27]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d001      	beq.n	8016bc4 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8016bc0:	7efb      	ldrb	r3, [r7, #27]
 8016bc2:	e027      	b.n	8016c14 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016bc4:	697b      	ldr	r3, [r7, #20]
 8016bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016bca:	d103      	bne.n	8016bd4 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	68ba      	ldr	r2, [r7, #8]
 8016bd0:	601a      	str	r2, [r3, #0]
 8016bd2:	e01e      	b.n	8016c12 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016bd4:	697b      	ldr	r3, [r7, #20]
 8016bd6:	b29b      	uxth	r3, r3
 8016bd8:	68ba      	ldr	r2, [r7, #8]
 8016bda:	1ad3      	subs	r3, r2, r3
 8016bdc:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8016bde:	69fb      	ldr	r3, [r7, #28]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	dd05      	ble.n	8016bf0 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016be4:	697a      	ldr	r2, [r7, #20]
 8016be6:	69fb      	ldr	r3, [r7, #28]
 8016be8:	441a      	add	r2, r3
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	601a      	str	r2, [r3, #0]
 8016bee:	e010      	b.n	8016c12 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d104      	bne.n	8016c00 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016bf6:	697a      	ldr	r2, [r7, #20]
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016bfc:	2307      	movs	r3, #7
 8016bfe:	e009      	b.n	8016c14 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	0c1b      	lsrs	r3, r3, #16
 8016c04:	041b      	lsls	r3, r3, #16
 8016c06:	68ba      	ldr	r2, [r7, #8]
 8016c08:	4413      	add	r3, r2
 8016c0a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c12:	2300      	movs	r3, #0
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	3720      	adds	r7, #32
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016c1c:	b480      	push	{r7}
 8016c1e:	b085      	sub	sp, #20
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d101      	bne.n	8016c2e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c2a:	2309      	movs	r3, #9
 8016c2c:	e019      	b.n	8016c62 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016c2e:	2300      	movs	r3, #0
 8016c30:	60fb      	str	r3, [r7, #12]
 8016c32:	e012      	b.n	8016c5a <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016c34:	4b0d      	ldr	r3, [pc, #52]	; (8016c6c <LoRaMacCryptoSetMulticastReference+0x50>)
 8016c36:	6819      	ldr	r1, [r3, #0]
 8016c38:	68fa      	ldr	r2, [r7, #12]
 8016c3a:	4613      	mov	r3, r2
 8016c3c:	005b      	lsls	r3, r3, #1
 8016c3e:	4413      	add	r3, r2
 8016c40:	011b      	lsls	r3, r3, #4
 8016c42:	461a      	mov	r2, r3
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	4413      	add	r3, r2
 8016c48:	68fa      	ldr	r2, [r7, #12]
 8016c4a:	3206      	adds	r2, #6
 8016c4c:	0092      	lsls	r2, r2, #2
 8016c4e:	440a      	add	r2, r1
 8016c50:	3204      	adds	r2, #4
 8016c52:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	3301      	adds	r3, #1
 8016c58:	60fb      	str	r3, [r7, #12]
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	dde9      	ble.n	8016c34 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c60:	2300      	movs	r3, #0
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	3714      	adds	r7, #20
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bc80      	pop	{r7}
 8016c6a:	4770      	bx	lr
 8016c6c:	20001a60 	.word	0x20001a60

08016c70 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b082      	sub	sp, #8
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	4603      	mov	r3, r0
 8016c78:	6039      	str	r1, [r7, #0]
 8016c7a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016c7c:	79fb      	ldrb	r3, [r7, #7]
 8016c7e:	6839      	ldr	r1, [r7, #0]
 8016c80:	4618      	mov	r0, r3
 8016c82:	f7f7 fe29 	bl	800e8d8 <SecureElementSetKey>
 8016c86:	4603      	mov	r3, r0
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d001      	beq.n	8016c90 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c8c:	230e      	movs	r3, #14
 8016c8e:	e021      	b.n	8016cd4 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016c90:	79fb      	ldrb	r3, [r7, #7]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d11d      	bne.n	8016cd2 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c96:	4b11      	ldr	r3, [pc, #68]	; (8016cdc <LoRaMacCryptoSetKey+0x6c>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	789b      	ldrb	r3, [r3, #2]
 8016c9c:	210b      	movs	r1, #11
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	f000 fa58 	bl	8017154 <LoRaMacCryptoDeriveLifeTimeKey>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d001      	beq.n	8016cae <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016caa:	230e      	movs	r3, #14
 8016cac:	e012      	b.n	8016cd4 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016cae:	210c      	movs	r1, #12
 8016cb0:	2000      	movs	r0, #0
 8016cb2:	f000 fa4f 	bl	8017154 <LoRaMacCryptoDeriveLifeTimeKey>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d001      	beq.n	8016cc0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cbc:	230e      	movs	r3, #14
 8016cbe:	e009      	b.n	8016cd4 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016cc0:	210a      	movs	r1, #10
 8016cc2:	2000      	movs	r0, #0
 8016cc4:	f000 fa46 	bl	8017154 <LoRaMacCryptoDeriveLifeTimeKey>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d001      	beq.n	8016cd2 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cce:	230e      	movs	r3, #14
 8016cd0:	e000      	b.n	8016cd4 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016cd2:	2300      	movs	r3, #0
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	20001a60 	.word	0x20001a60

08016ce0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b086      	sub	sp, #24
 8016ce4:	af02      	add	r7, sp, #8
 8016ce6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d101      	bne.n	8016cf2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016cee:	2309      	movs	r3, #9
 8016cf0:	e02d      	b.n	8016d4e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016cf2:	2301      	movs	r3, #1
 8016cf4:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8016cf6:	4b18      	ldr	r3, [pc, #96]	; (8016d58 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	889a      	ldrh	r2, [r3, #4]
 8016cfc:	3201      	adds	r2, #1
 8016cfe:	b292      	uxth	r2, r2
 8016d00:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016d02:	4b15      	ldr	r3, [pc, #84]	; (8016d58 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	889a      	ldrh	r2, [r3, #4]
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f000 fc1b 	bl	8017548 <LoRaMacSerializerJoinRequest>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d001      	beq.n	8016d1c <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016d18:	2310      	movs	r3, #16
 8016d1a:	e018      	b.n	8016d4e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6819      	ldr	r1, [r3, #0]
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	3318      	adds	r3, #24
 8016d24:	7bfa      	ldrb	r2, [r7, #15]
 8016d26:	9300      	str	r3, [sp, #0]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	2213      	movs	r2, #19
 8016d2c:	2000      	movs	r0, #0
 8016d2e:	f7f7 fe31 	bl	800e994 <SecureElementComputeAesCmac>
 8016d32:	4603      	mov	r3, r0
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d001      	beq.n	8016d3c <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d38:	230e      	movs	r3, #14
 8016d3a:	e008      	b.n	8016d4e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016d3c:	6878      	ldr	r0, [r7, #4]
 8016d3e:	f000 fc03 	bl	8017548 <LoRaMacSerializerJoinRequest>
 8016d42:	4603      	mov	r3, r0
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d001      	beq.n	8016d4c <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016d48:	2310      	movs	r3, #16
 8016d4a:	e000      	b.n	8016d4e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016d4c:	2300      	movs	r3, #0
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3710      	adds	r7, #16
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}
 8016d56:	bf00      	nop
 8016d58:	20001a60 	.word	0x20001a60

08016d5c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016d5c:	b590      	push	{r4, r7, lr}
 8016d5e:	b097      	sub	sp, #92	; 0x5c
 8016d60:	af04      	add	r7, sp, #16
 8016d62:	4603      	mov	r3, r0
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	607a      	str	r2, [r7, #4]
 8016d68:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d002      	beq.n	8016d76 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016d70:	68bb      	ldr	r3, [r7, #8]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d101      	bne.n	8016d7a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016d76:	2309      	movs	r3, #9
 8016d78:	e0d3      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016d7a:	2312      	movs	r3, #18
 8016d7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016d80:	2300      	movs	r3, #0
 8016d82:	617b      	str	r3, [r7, #20]
 8016d84:	f107 0318 	add.w	r3, r7, #24
 8016d88:	221d      	movs	r2, #29
 8016d8a:	2100      	movs	r1, #0
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f009 f8cb 	bl	801ff28 <memset>
    uint8_t versionMinor         = 0;
 8016d92:	2300      	movs	r3, #0
 8016d94:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d96:	4b65      	ldr	r3, [pc, #404]	; (8016f2c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	889b      	ldrh	r3, [r3, #4]
 8016d9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681c      	ldr	r4, [r3, #0]
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	791b      	ldrb	r3, [r3, #4]
 8016da8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016dac:	7bf8      	ldrb	r0, [r7, #15]
 8016dae:	f107 0213 	add.w	r2, r7, #19
 8016db2:	9202      	str	r2, [sp, #8]
 8016db4:	f107 0214 	add.w	r2, r7, #20
 8016db8:	9201      	str	r2, [sp, #4]
 8016dba:	9300      	str	r3, [sp, #0]
 8016dbc:	4623      	mov	r3, r4
 8016dbe:	460a      	mov	r2, r1
 8016dc0:	68b9      	ldr	r1, [r7, #8]
 8016dc2:	f7f7 feed 	bl	800eba0 <SecureElementProcessJoinAccept>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d001      	beq.n	8016dd0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016dcc:	230e      	movs	r3, #14
 8016dce:	e0a8      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	6818      	ldr	r0, [r3, #0]
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	791b      	ldrb	r3, [r3, #4]
 8016dd8:	b29a      	uxth	r2, r3
 8016dda:	f107 0314 	add.w	r3, r7, #20
 8016dde:	4619      	mov	r1, r3
 8016de0:	f004 fb41 	bl	801b466 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f000 f9f0 	bl	80171ca <LoRaMacParserJoinAccept>
 8016dea:	4603      	mov	r3, r0
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d001      	beq.n	8016df4 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016df0:	230f      	movs	r3, #15
 8016df2:	e096      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016df4:	2300      	movs	r3, #0
 8016df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	799b      	ldrb	r3, [r3, #6]
 8016dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	79db      	ldrb	r3, [r3, #7]
 8016e04:	021b      	lsls	r3, r3, #8
 8016e06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e08:	4313      	orrs	r3, r2
 8016e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	7a1b      	ldrb	r3, [r3, #8]
 8016e10:	041b      	lsls	r3, r3, #16
 8016e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e14:	4313      	orrs	r3, r2
 8016e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016e18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016e1a:	f7ff fe4b 	bl	8016ab4 <IsJoinNonce10xOk>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016e24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d010      	beq.n	8016e4e <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016e2c:	4b3f      	ldr	r3, [pc, #252]	; (8016f2c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e32:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016e34:	7cfb      	ldrb	r3, [r7, #19]
 8016e36:	210b      	movs	r1, #11
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f000 f98b 	bl	8017154 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d005      	beq.n	8016e58 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016e4c:	e001      	b.n	8016e52 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016e4e:	2303      	movs	r3, #3
 8016e50:	e067      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016e52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e56:	e064      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016e58:	210c      	movs	r1, #12
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	f000 f97a 	bl	8017154 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e60:	4603      	mov	r3, r0
 8016e62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e66:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d002      	beq.n	8016e74 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016e6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e72:	e056      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016e74:	210a      	movs	r1, #10
 8016e76:	2000      	movs	r0, #0
 8016e78:	f000 f96c 	bl	8017154 <LoRaMacCryptoDeriveLifeTimeKey>
 8016e7c:	4603      	mov	r3, r0
 8016e7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d002      	beq.n	8016e90 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016e8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e8e:	e048      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	7a5b      	ldrb	r3, [r3, #9]
 8016e94:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	7a9b      	ldrb	r3, [r3, #10]
 8016e9a:	021b      	lsls	r3, r3, #8
 8016e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e9e:	4313      	orrs	r3, r2
 8016ea0:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	7adb      	ldrb	r3, [r3, #11]
 8016ea6:	041b      	lsls	r3, r3, #16
 8016ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016eaa:	4313      	orrs	r3, r2
 8016eac:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016eae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016eb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016eb6:	2009      	movs	r0, #9
 8016eb8:	f7ff fcd8 	bl	801686c <DeriveSessionKey10x>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ec2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d002      	beq.n	8016ed0 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016eca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ece:	e028      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016ed0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ed4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016ed8:	2008      	movs	r0, #8
 8016eda:	f7ff fcc7 	bl	801686c <DeriveSessionKey10x>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ee4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d002      	beq.n	8016ef2 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016eec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016ef0:	e017      	b.n	8016f22 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016ef2:	4b0e      	ldr	r3, [pc, #56]	; (8016f2c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	7cfa      	ldrb	r2, [r7, #19]
 8016ef8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016efa:	4b0c      	ldr	r3, [pc, #48]	; (8016f2c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	2200      	movs	r2, #0
 8016f00:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016f02:	4b0a      	ldr	r3, [pc, #40]	; (8016f2c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f0a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016f0c:	4b07      	ldr	r3, [pc, #28]	; (8016f2c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f14:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016f16:	4b05      	ldr	r3, [pc, #20]	; (8016f2c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016f1e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f20:	2300      	movs	r3, #0
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	374c      	adds	r7, #76	; 0x4c
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd90      	pop	{r4, r7, pc}
 8016f2a:	bf00      	nop
 8016f2c:	20001a60 	.word	0x20001a60

08016f30 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016f30:	b590      	push	{r4, r7, lr}
 8016f32:	b08b      	sub	sp, #44	; 0x2c
 8016f34:	af04      	add	r7, sp, #16
 8016f36:	60f8      	str	r0, [r7, #12]
 8016f38:	607b      	str	r3, [r7, #4]
 8016f3a:	460b      	mov	r3, r1
 8016f3c:	72fb      	strb	r3, [r7, #11]
 8016f3e:	4613      	mov	r3, r2
 8016f40:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016f42:	2312      	movs	r3, #18
 8016f44:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016f46:	2309      	movs	r3, #9
 8016f48:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d101      	bne.n	8016f54 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016f50:	2309      	movs	r3, #9
 8016f52:	e05f      	b.n	8017014 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016f54:	4b31      	ldr	r3, [pc, #196]	; (801701c <LoRaMacCryptoSecureMessage+0xec>)
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	68db      	ldr	r3, [r3, #12]
 8016f5a:	68fa      	ldr	r2, [r7, #12]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d201      	bcs.n	8016f64 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016f60:	2306      	movs	r3, #6
 8016f62:	e057      	b.n	8017014 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d101      	bne.n	8016f72 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f6e:	2308      	movs	r3, #8
 8016f70:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016f72:	4b2a      	ldr	r3, [pc, #168]	; (801701c <LoRaMacCryptoSecureMessage+0xec>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	68db      	ldr	r3, [r3, #12]
 8016f78:	68fa      	ldr	r2, [r7, #12]
 8016f7a:	429a      	cmp	r2, r3
 8016f7c:	d916      	bls.n	8016fac <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f88:	b219      	sxth	r1, r3
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	689c      	ldr	r4, [r3, #8]
 8016f8e:	7dfa      	ldrb	r2, [r7, #23]
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	9301      	str	r3, [sp, #4]
 8016f94:	2300      	movs	r3, #0
 8016f96:	9300      	str	r3, [sp, #0]
 8016f98:	4623      	mov	r3, r4
 8016f9a:	f7ff fa73 	bl	8016484 <PayloadEncrypt>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016fa2:	7dbb      	ldrb	r3, [r7, #22]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d001      	beq.n	8016fac <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016fa8:	7dbb      	ldrb	r3, [r7, #22]
 8016faa:	e033      	b.n	8017014 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f000 fb4d 	bl	801764c <LoRaMacSerializerData>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d001      	beq.n	8016fbc <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016fb8:	2310      	movs	r3, #16
 8016fba:	e02b      	b.n	8017014 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016fbc:	2308      	movs	r3, #8
 8016fbe:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6818      	ldr	r0, [r3, #0]
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	791b      	ldrb	r3, [r3, #4]
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	3b04      	subs	r3, #4
 8016fcc:	b299      	uxth	r1, r3
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	689b      	ldr	r3, [r3, #8]
 8016fd2:	687a      	ldr	r2, [r7, #4]
 8016fd4:	322c      	adds	r2, #44	; 0x2c
 8016fd6:	7dfc      	ldrb	r4, [r7, #23]
 8016fd8:	9203      	str	r2, [sp, #12]
 8016fda:	68fa      	ldr	r2, [r7, #12]
 8016fdc:	9202      	str	r2, [sp, #8]
 8016fde:	9301      	str	r3, [sp, #4]
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	9300      	str	r3, [sp, #0]
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	4622      	mov	r2, r4
 8016fe8:	f7ff fb4d 	bl	8016686 <ComputeCmacB0>
 8016fec:	4603      	mov	r3, r0
 8016fee:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ff0:	7dbb      	ldrb	r3, [r7, #22]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d001      	beq.n	8016ffa <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016ff6:	7dbb      	ldrb	r3, [r7, #22]
 8016ff8:	e00c      	b.n	8017014 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f000 fb26 	bl	801764c <LoRaMacSerializerData>
 8017000:	4603      	mov	r3, r0
 8017002:	2b00      	cmp	r3, #0
 8017004:	d001      	beq.n	801700a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8017006:	2310      	movs	r3, #16
 8017008:	e004      	b.n	8017014 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 801700a:	4b04      	ldr	r3, [pc, #16]	; (801701c <LoRaMacCryptoSecureMessage+0xec>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	68fa      	ldr	r2, [r7, #12]
 8017010:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8017012:	2300      	movs	r3, #0
}
 8017014:	4618      	mov	r0, r3
 8017016:	371c      	adds	r7, #28
 8017018:	46bd      	mov	sp, r7
 801701a:	bd90      	pop	{r4, r7, pc}
 801701c:	20001a60 	.word	0x20001a60

08017020 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8017020:	b590      	push	{r4, r7, lr}
 8017022:	b08b      	sub	sp, #44	; 0x2c
 8017024:	af04      	add	r7, sp, #16
 8017026:	60b9      	str	r1, [r7, #8]
 8017028:	607b      	str	r3, [r7, #4]
 801702a:	4603      	mov	r3, r0
 801702c:	73fb      	strb	r3, [r7, #15]
 801702e:	4613      	mov	r3, r2
 8017030:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8017032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017034:	2b00      	cmp	r3, #0
 8017036:	d101      	bne.n	801703c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8017038:	2309      	movs	r3, #9
 801703a:	e084      	b.n	8017146 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801703c:	7bbb      	ldrb	r3, [r7, #14]
 801703e:	6879      	ldr	r1, [r7, #4]
 8017040:	4618      	mov	r0, r3
 8017042:	f7ff fc9f 	bl	8016984 <CheckFCntDown>
 8017046:	4603      	mov	r3, r0
 8017048:	f083 0301 	eor.w	r3, r3, #1
 801704c:	b2db      	uxtb	r3, r3
 801704e:	2b00      	cmp	r3, #0
 8017050:	d001      	beq.n	8017056 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8017052:	2306      	movs	r3, #6
 8017054:	e077      	b.n	8017146 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8017056:	2312      	movs	r3, #18
 8017058:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801705a:	2309      	movs	r3, #9
 801705c:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801705e:	2308      	movs	r3, #8
 8017060:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8017062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017064:	f000 f97c 	bl	8017360 <LoRaMacParserData>
 8017068:	4603      	mov	r3, r0
 801706a:	2b00      	cmp	r3, #0
 801706c:	d001      	beq.n	8017072 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801706e:	230f      	movs	r3, #15
 8017070:	e069      	b.n	8017146 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8017072:	f107 0210 	add.w	r2, r7, #16
 8017076:	7bfb      	ldrb	r3, [r7, #15]
 8017078:	4611      	mov	r1, r2
 801707a:	4618      	mov	r0, r3
 801707c:	f7ff fbd0 	bl	8016820 <GetKeyAddrItem>
 8017080:	4603      	mov	r3, r0
 8017082:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017084:	7d7b      	ldrb	r3, [r7, #21]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d001      	beq.n	801708e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801708a:	7d7b      	ldrb	r3, [r7, #21]
 801708c:	e05b      	b.n	8017146 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801708e:	693b      	ldr	r3, [r7, #16]
 8017090:	785b      	ldrb	r3, [r3, #1]
 8017092:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017094:	693b      	ldr	r3, [r7, #16]
 8017096:	789b      	ldrb	r3, [r3, #2]
 8017098:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801709c:	689b      	ldr	r3, [r3, #8]
 801709e:	68ba      	ldr	r2, [r7, #8]
 80170a0:	429a      	cmp	r2, r3
 80170a2:	d001      	beq.n	80170a8 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80170a4:	2302      	movs	r3, #2
 80170a6:	e04e      	b.n	8017146 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80170a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170aa:	7b1b      	ldrb	r3, [r3, #12]
 80170ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80170b0:	b2db      	uxtb	r3, r3
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	bf14      	ite	ne
 80170b6:	2301      	movne	r3, #1
 80170b8:	2300      	moveq	r3, #0
 80170ba:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80170bc:	4b24      	ldr	r3, [pc, #144]	; (8017150 <LoRaMacCryptoUnsecureMessage+0x130>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	789b      	ldrb	r3, [r3, #2]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d101      	bne.n	80170ca <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80170c6:	2300      	movs	r3, #0
 80170c8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80170ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170cc:	6818      	ldr	r0, [r3, #0]
 80170ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d0:	791b      	ldrb	r3, [r3, #4]
 80170d2:	b29b      	uxth	r3, r3
 80170d4:	3b04      	subs	r3, #4
 80170d6:	b299      	uxth	r1, r3
 80170d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170dc:	7dbc      	ldrb	r4, [r7, #22]
 80170de:	7d3a      	ldrb	r2, [r7, #20]
 80170e0:	9303      	str	r3, [sp, #12]
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	9302      	str	r3, [sp, #8]
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	9301      	str	r3, [sp, #4]
 80170ea:	2301      	movs	r3, #1
 80170ec:	9300      	str	r3, [sp, #0]
 80170ee:	4623      	mov	r3, r4
 80170f0:	f7ff fb07 	bl	8016702 <VerifyCmacB0>
 80170f4:	4603      	mov	r3, r0
 80170f6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170f8:	7d7b      	ldrb	r3, [r7, #21]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d001      	beq.n	8017102 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80170fe:	7d7b      	ldrb	r3, [r7, #21]
 8017100:	e021      	b.n	8017146 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8017102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d101      	bne.n	8017110 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801710c:	2308      	movs	r3, #8
 801710e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8017110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017112:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801711a:	b219      	sxth	r1, r3
 801711c:	7dfa      	ldrb	r2, [r7, #23]
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	9301      	str	r3, [sp, #4]
 8017122:	2301      	movs	r3, #1
 8017124:	9300      	str	r3, [sp, #0]
 8017126:	68bb      	ldr	r3, [r7, #8]
 8017128:	f7ff f9ac 	bl	8016484 <PayloadEncrypt>
 801712c:	4603      	mov	r3, r0
 801712e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017130:	7d7b      	ldrb	r3, [r7, #21]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d001      	beq.n	801713a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8017136:	7d7b      	ldrb	r3, [r7, #21]
 8017138:	e005      	b.n	8017146 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801713a:	7bbb      	ldrb	r3, [r7, #14]
 801713c:	6879      	ldr	r1, [r7, #4]
 801713e:	4618      	mov	r0, r3
 8017140:	f7ff fc44 	bl	80169cc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8017144:	2300      	movs	r3, #0
}
 8017146:	4618      	mov	r0, r3
 8017148:	371c      	adds	r7, #28
 801714a:	46bd      	mov	sp, r7
 801714c:	bd90      	pop	{r4, r7, pc}
 801714e:	bf00      	nop
 8017150:	20001a60 	.word	0x20001a60

08017154 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b088      	sub	sp, #32
 8017158:	af00      	add	r7, sp, #0
 801715a:	4603      	mov	r3, r0
 801715c:	460a      	mov	r2, r1
 801715e:	71fb      	strb	r3, [r7, #7]
 8017160:	4613      	mov	r3, r2
 8017162:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8017164:	2300      	movs	r3, #0
 8017166:	60fb      	str	r3, [r7, #12]
 8017168:	f107 0310 	add.w	r3, r7, #16
 801716c:	2200      	movs	r2, #0
 801716e:	601a      	str	r2, [r3, #0]
 8017170:	605a      	str	r2, [r3, #4]
 8017172:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8017174:	2300      	movs	r3, #0
 8017176:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8017178:	79bb      	ldrb	r3, [r7, #6]
 801717a:	2b0c      	cmp	r3, #12
 801717c:	d00b      	beq.n	8017196 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 801717e:	2b0c      	cmp	r3, #12
 8017180:	dc0f      	bgt.n	80171a2 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8017182:	2b0a      	cmp	r3, #10
 8017184:	d00a      	beq.n	801719c <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 8017186:	2b0b      	cmp	r3, #11
 8017188:	d10b      	bne.n	80171a2 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801718a:	79fb      	ldrb	r3, [r7, #7]
 801718c:	2b01      	cmp	r3, #1
 801718e:	d10a      	bne.n	80171a6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017190:	2320      	movs	r3, #32
 8017192:	733b      	strb	r3, [r7, #12]
            }
            break;
 8017194:	e007      	b.n	80171a6 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8017196:	230b      	movs	r3, #11
 8017198:	77fb      	strb	r3, [r7, #31]
            break;
 801719a:	e005      	b.n	80171a8 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 801719c:	2330      	movs	r3, #48	; 0x30
 801719e:	733b      	strb	r3, [r7, #12]
            break;
 80171a0:	e002      	b.n	80171a8 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80171a2:	230a      	movs	r3, #10
 80171a4:	e00d      	b.n	80171c2 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 80171a6:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80171a8:	79ba      	ldrb	r2, [r7, #6]
 80171aa:	7ff9      	ldrb	r1, [r7, #31]
 80171ac:	f107 030c 	add.w	r3, r7, #12
 80171b0:	4618      	mov	r0, r3
 80171b2:	f7f7 fcb5 	bl	800eb20 <SecureElementDeriveAndStoreKey>
 80171b6:	4603      	mov	r3, r0
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d001      	beq.n	80171c0 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80171bc:	230e      	movs	r3, #14
 80171be:	e000      	b.n	80171c2 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80171c0:	2300      	movs	r3, #0
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	3720      	adds	r7, #32
 80171c6:	46bd      	mov	sp, r7
 80171c8:	bd80      	pop	{r7, pc}

080171ca <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80171ca:	b580      	push	{r7, lr}
 80171cc:	b084      	sub	sp, #16
 80171ce:	af00      	add	r7, sp, #0
 80171d0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d003      	beq.n	80171e0 <LoRaMacParserJoinAccept+0x16>
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d101      	bne.n	80171e4 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80171e0:	2302      	movs	r3, #2
 80171e2:	e0b9      	b.n	8017358 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80171e4:	2300      	movs	r3, #0
 80171e6:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681a      	ldr	r2, [r3, #0]
 80171ec:	89fb      	ldrh	r3, [r7, #14]
 80171ee:	1c59      	adds	r1, r3, #1
 80171f0:	81f9      	strh	r1, [r7, #14]
 80171f2:	4413      	add	r3, r2
 80171f4:	781a      	ldrb	r2, [r3, #0]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	1d98      	adds	r0, r3, #6
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	681a      	ldr	r2, [r3, #0]
 8017202:	89fb      	ldrh	r3, [r7, #14]
 8017204:	4413      	add	r3, r2
 8017206:	2203      	movs	r2, #3
 8017208:	4619      	mov	r1, r3
 801720a:	f004 f92c 	bl	801b466 <memcpy1>
    bufItr = bufItr + 3;
 801720e:	89fb      	ldrh	r3, [r7, #14]
 8017210:	3303      	adds	r3, #3
 8017212:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f103 0009 	add.w	r0, r3, #9
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	89fb      	ldrh	r3, [r7, #14]
 8017220:	4413      	add	r3, r2
 8017222:	2203      	movs	r2, #3
 8017224:	4619      	mov	r1, r3
 8017226:	f004 f91e 	bl	801b466 <memcpy1>
    bufItr = bufItr + 3;
 801722a:	89fb      	ldrh	r3, [r7, #14]
 801722c:	3303      	adds	r3, #3
 801722e:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	89fb      	ldrh	r3, [r7, #14]
 8017236:	1c59      	adds	r1, r3, #1
 8017238:	81f9      	strh	r1, [r7, #14]
 801723a:	4413      	add	r3, r2
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	461a      	mov	r2, r3
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	681a      	ldr	r2, [r3, #0]
 8017248:	89fb      	ldrh	r3, [r7, #14]
 801724a:	1c59      	adds	r1, r3, #1
 801724c:	81f9      	strh	r1, [r7, #14]
 801724e:	4413      	add	r3, r2
 8017250:	781b      	ldrb	r3, [r3, #0]
 8017252:	021a      	lsls	r2, r3, #8
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	68db      	ldr	r3, [r3, #12]
 8017258:	431a      	orrs	r2, r3
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	681a      	ldr	r2, [r3, #0]
 8017262:	89fb      	ldrh	r3, [r7, #14]
 8017264:	1c59      	adds	r1, r3, #1
 8017266:	81f9      	strh	r1, [r7, #14]
 8017268:	4413      	add	r3, r2
 801726a:	781b      	ldrb	r3, [r3, #0]
 801726c:	041a      	lsls	r2, r3, #16
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	68db      	ldr	r3, [r3, #12]
 8017272:	431a      	orrs	r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681a      	ldr	r2, [r3, #0]
 801727c:	89fb      	ldrh	r3, [r7, #14]
 801727e:	1c59      	adds	r1, r3, #1
 8017280:	81f9      	strh	r1, [r7, #14]
 8017282:	4413      	add	r3, r2
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	061a      	lsls	r2, r3, #24
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	431a      	orrs	r2, r3
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	681a      	ldr	r2, [r3, #0]
 8017296:	89fb      	ldrh	r3, [r7, #14]
 8017298:	1c59      	adds	r1, r3, #1
 801729a:	81f9      	strh	r1, [r7, #14]
 801729c:	4413      	add	r3, r2
 801729e:	781a      	ldrb	r2, [r3, #0]
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	681a      	ldr	r2, [r3, #0]
 80172a8:	89fb      	ldrh	r3, [r7, #14]
 80172aa:	1c59      	adds	r1, r3, #1
 80172ac:	81f9      	strh	r1, [r7, #14]
 80172ae:	4413      	add	r3, r2
 80172b0:	781a      	ldrb	r2, [r3, #0]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	791b      	ldrb	r3, [r3, #4]
 80172ba:	1f1a      	subs	r2, r3, #4
 80172bc:	89fb      	ldrh	r3, [r7, #14]
 80172be:	1ad3      	subs	r3, r2, r3
 80172c0:	2b10      	cmp	r3, #16
 80172c2:	d10e      	bne.n	80172e2 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f103 0012 	add.w	r0, r3, #18
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	681a      	ldr	r2, [r3, #0]
 80172ce:	89fb      	ldrh	r3, [r7, #14]
 80172d0:	4413      	add	r3, r2
 80172d2:	2210      	movs	r2, #16
 80172d4:	4619      	mov	r1, r3
 80172d6:	f004 f8c6 	bl	801b466 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80172da:	89fb      	ldrh	r3, [r7, #14]
 80172dc:	3310      	adds	r3, #16
 80172de:	81fb      	strh	r3, [r7, #14]
 80172e0:	e008      	b.n	80172f4 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	791b      	ldrb	r3, [r3, #4]
 80172e6:	1f1a      	subs	r2, r3, #4
 80172e8:	89fb      	ldrh	r3, [r7, #14]
 80172ea:	1ad3      	subs	r3, r2, r3
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	dd01      	ble.n	80172f4 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80172f0:	2301      	movs	r3, #1
 80172f2:	e031      	b.n	8017358 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	681a      	ldr	r2, [r3, #0]
 80172f8:	89fb      	ldrh	r3, [r7, #14]
 80172fa:	1c59      	adds	r1, r3, #1
 80172fc:	81f9      	strh	r1, [r7, #14]
 80172fe:	4413      	add	r3, r2
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	461a      	mov	r2, r3
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	681a      	ldr	r2, [r3, #0]
 801730c:	89fb      	ldrh	r3, [r7, #14]
 801730e:	1c59      	adds	r1, r3, #1
 8017310:	81f9      	strh	r1, [r7, #14]
 8017312:	4413      	add	r3, r2
 8017314:	781b      	ldrb	r3, [r3, #0]
 8017316:	021a      	lsls	r2, r3, #8
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801731c:	431a      	orrs	r2, r3
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	681a      	ldr	r2, [r3, #0]
 8017326:	89fb      	ldrh	r3, [r7, #14]
 8017328:	1c59      	adds	r1, r3, #1
 801732a:	81f9      	strh	r1, [r7, #14]
 801732c:	4413      	add	r3, r2
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	041a      	lsls	r2, r3, #16
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017336:	431a      	orrs	r2, r3
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	89fb      	ldrh	r3, [r7, #14]
 8017342:	1c59      	adds	r1, r3, #1
 8017344:	81f9      	strh	r1, [r7, #14]
 8017346:	4413      	add	r3, r2
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	061a      	lsls	r2, r3, #24
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017350:	431a      	orrs	r2, r3
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8017356:	2300      	movs	r3, #0
}
 8017358:	4618      	mov	r0, r3
 801735a:	3710      	adds	r7, #16
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}

08017360 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8017360:	b580      	push	{r7, lr}
 8017362:	b084      	sub	sp, #16
 8017364:	af00      	add	r7, sp, #0
 8017366:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d003      	beq.n	8017376 <LoRaMacParserData+0x16>
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d101      	bne.n	801737a <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017376:	2302      	movs	r3, #2
 8017378:	e0e2      	b.n	8017540 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801737a:	2300      	movs	r3, #0
 801737c:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	681a      	ldr	r2, [r3, #0]
 8017382:	89fb      	ldrh	r3, [r7, #14]
 8017384:	1c59      	adds	r1, r3, #1
 8017386:	81f9      	strh	r1, [r7, #14]
 8017388:	4413      	add	r3, r2
 801738a:	781a      	ldrb	r2, [r3, #0]
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681a      	ldr	r2, [r3, #0]
 8017394:	89fb      	ldrh	r3, [r7, #14]
 8017396:	1c59      	adds	r1, r3, #1
 8017398:	81f9      	strh	r1, [r7, #14]
 801739a:	4413      	add	r3, r2
 801739c:	781b      	ldrb	r3, [r3, #0]
 801739e:	461a      	mov	r2, r3
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681a      	ldr	r2, [r3, #0]
 80173a8:	89fb      	ldrh	r3, [r7, #14]
 80173aa:	1c59      	adds	r1, r3, #1
 80173ac:	81f9      	strh	r1, [r7, #14]
 80173ae:	4413      	add	r3, r2
 80173b0:	781b      	ldrb	r3, [r3, #0]
 80173b2:	021a      	lsls	r2, r3, #8
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	689b      	ldr	r3, [r3, #8]
 80173b8:	431a      	orrs	r2, r3
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	89fb      	ldrh	r3, [r7, #14]
 80173c4:	1c59      	adds	r1, r3, #1
 80173c6:	81f9      	strh	r1, [r7, #14]
 80173c8:	4413      	add	r3, r2
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	041a      	lsls	r2, r3, #16
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	689b      	ldr	r3, [r3, #8]
 80173d2:	431a      	orrs	r2, r3
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	681a      	ldr	r2, [r3, #0]
 80173dc:	89fb      	ldrh	r3, [r7, #14]
 80173de:	1c59      	adds	r1, r3, #1
 80173e0:	81f9      	strh	r1, [r7, #14]
 80173e2:	4413      	add	r3, r2
 80173e4:	781b      	ldrb	r3, [r3, #0]
 80173e6:	061a      	lsls	r2, r3, #24
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	689b      	ldr	r3, [r3, #8]
 80173ec:	431a      	orrs	r2, r3
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	681a      	ldr	r2, [r3, #0]
 80173f6:	89fb      	ldrh	r3, [r7, #14]
 80173f8:	1c59      	adds	r1, r3, #1
 80173fa:	81f9      	strh	r1, [r7, #14]
 80173fc:	4413      	add	r3, r2
 80173fe:	781a      	ldrb	r2, [r3, #0]
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	681a      	ldr	r2, [r3, #0]
 8017408:	89fb      	ldrh	r3, [r7, #14]
 801740a:	1c59      	adds	r1, r3, #1
 801740c:	81f9      	strh	r1, [r7, #14]
 801740e:	4413      	add	r3, r2
 8017410:	781b      	ldrb	r3, [r3, #0]
 8017412:	b29a      	uxth	r2, r3
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681a      	ldr	r2, [r3, #0]
 801741c:	89fb      	ldrh	r3, [r7, #14]
 801741e:	1c59      	adds	r1, r3, #1
 8017420:	81f9      	strh	r1, [r7, #14]
 8017422:	4413      	add	r3, r2
 8017424:	781b      	ldrb	r3, [r3, #0]
 8017426:	0219      	lsls	r1, r3, #8
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	89db      	ldrh	r3, [r3, #14]
 801742c:	b21a      	sxth	r2, r3
 801742e:	b20b      	sxth	r3, r1
 8017430:	4313      	orrs	r3, r2
 8017432:	b21b      	sxth	r3, r3
 8017434:	b29a      	uxth	r2, r3
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f103 0010 	add.w	r0, r3, #16
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	681a      	ldr	r2, [r3, #0]
 8017444:	89fb      	ldrh	r3, [r7, #14]
 8017446:	18d1      	adds	r1, r2, r3
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	7b1b      	ldrb	r3, [r3, #12]
 801744c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017450:	b2db      	uxtb	r3, r3
 8017452:	b29b      	uxth	r3, r3
 8017454:	461a      	mov	r2, r3
 8017456:	f004 f806 	bl	801b466 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	7b1b      	ldrb	r3, [r3, #12]
 801745e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017462:	b2db      	uxtb	r3, r3
 8017464:	b29a      	uxth	r2, r3
 8017466:	89fb      	ldrh	r3, [r7, #14]
 8017468:	4413      	add	r3, r2
 801746a:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	2200      	movs	r2, #0
 8017470:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	2200      	movs	r2, #0
 8017478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	791b      	ldrb	r3, [r3, #4]
 8017480:	461a      	mov	r2, r3
 8017482:	89fb      	ldrh	r3, [r7, #14]
 8017484:	1ad3      	subs	r3, r2, r3
 8017486:	2b04      	cmp	r3, #4
 8017488:	dd28      	ble.n	80174dc <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681a      	ldr	r2, [r3, #0]
 801748e:	89fb      	ldrh	r3, [r7, #14]
 8017490:	1c59      	adds	r1, r3, #1
 8017492:	81f9      	strh	r1, [r7, #14]
 8017494:	4413      	add	r3, r2
 8017496:	781a      	ldrb	r2, [r3, #0]
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	791a      	ldrb	r2, [r3, #4]
 80174a2:	89fb      	ldrh	r3, [r7, #14]
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	1ad3      	subs	r3, r2, r3
 80174a8:	b2db      	uxtb	r3, r3
 80174aa:	3b04      	subs	r3, #4
 80174ac:	b2da      	uxtb	r2, r3
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	681a      	ldr	r2, [r3, #0]
 80174bc:	89fb      	ldrh	r3, [r7, #14]
 80174be:	18d1      	adds	r1, r2, r3
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174c6:	b29b      	uxth	r3, r3
 80174c8:	461a      	mov	r2, r3
 80174ca:	f003 ffcc 	bl	801b466 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174d4:	b29a      	uxth	r2, r3
 80174d6:	89fb      	ldrh	r3, [r7, #14]
 80174d8:	4413      	add	r3, r2
 80174da:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681a      	ldr	r2, [r3, #0]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	791b      	ldrb	r3, [r3, #4]
 80174e4:	3b04      	subs	r3, #4
 80174e6:	4413      	add	r3, r2
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	461a      	mov	r2, r3
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	6819      	ldr	r1, [r3, #0]
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	791b      	ldrb	r3, [r3, #4]
 80174fc:	3b03      	subs	r3, #3
 80174fe:	440b      	add	r3, r1
 8017500:	781b      	ldrb	r3, [r3, #0]
 8017502:	021b      	lsls	r3, r3, #8
 8017504:	431a      	orrs	r2, r3
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6819      	ldr	r1, [r3, #0]
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	791b      	ldrb	r3, [r3, #4]
 8017516:	3b02      	subs	r3, #2
 8017518:	440b      	add	r3, r1
 801751a:	781b      	ldrb	r3, [r3, #0]
 801751c:	041b      	lsls	r3, r3, #16
 801751e:	431a      	orrs	r2, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	6819      	ldr	r1, [r3, #0]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	791b      	ldrb	r3, [r3, #4]
 8017530:	3b01      	subs	r3, #1
 8017532:	440b      	add	r3, r1
 8017534:	781b      	ldrb	r3, [r3, #0]
 8017536:	061b      	lsls	r3, r3, #24
 8017538:	431a      	orrs	r2, r3
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801753e:	2300      	movs	r3, #0
}
 8017540:	4618      	mov	r0, r3
 8017542:	3710      	adds	r7, #16
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}

08017548 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b084      	sub	sp, #16
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d003      	beq.n	801755e <LoRaMacSerializerJoinRequest+0x16>
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	2b00      	cmp	r3, #0
 801755c:	d101      	bne.n	8017562 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801755e:	2301      	movs	r3, #1
 8017560:	e070      	b.n	8017644 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8017562:	2300      	movs	r3, #0
 8017564:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	791b      	ldrb	r3, [r3, #4]
 801756a:	2b16      	cmp	r3, #22
 801756c:	d801      	bhi.n	8017572 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801756e:	2302      	movs	r3, #2
 8017570:	e068      	b.n	8017644 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681a      	ldr	r2, [r3, #0]
 8017576:	89fb      	ldrh	r3, [r7, #14]
 8017578:	1c59      	adds	r1, r3, #1
 801757a:	81f9      	strh	r1, [r7, #14]
 801757c:	4413      	add	r3, r2
 801757e:	687a      	ldr	r2, [r7, #4]
 8017580:	7952      	ldrb	r2, [r2, #5]
 8017582:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681a      	ldr	r2, [r3, #0]
 8017588:	89fb      	ldrh	r3, [r7, #14]
 801758a:	18d0      	adds	r0, r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	3306      	adds	r3, #6
 8017590:	2208      	movs	r2, #8
 8017592:	4619      	mov	r1, r3
 8017594:	f003 ff82 	bl	801b49c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8017598:	89fb      	ldrh	r3, [r7, #14]
 801759a:	3308      	adds	r3, #8
 801759c:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681a      	ldr	r2, [r3, #0]
 80175a2:	89fb      	ldrh	r3, [r7, #14]
 80175a4:	18d0      	adds	r0, r2, r3
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	330e      	adds	r3, #14
 80175aa:	2208      	movs	r2, #8
 80175ac:	4619      	mov	r1, r3
 80175ae:	f003 ff75 	bl	801b49c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80175b2:	89fb      	ldrh	r3, [r7, #14]
 80175b4:	3308      	adds	r3, #8
 80175b6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	8ad9      	ldrh	r1, [r3, #22]
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	681a      	ldr	r2, [r3, #0]
 80175c0:	89fb      	ldrh	r3, [r7, #14]
 80175c2:	1c58      	adds	r0, r3, #1
 80175c4:	81f8      	strh	r0, [r7, #14]
 80175c6:	4413      	add	r3, r2
 80175c8:	b2ca      	uxtb	r2, r1
 80175ca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	8adb      	ldrh	r3, [r3, #22]
 80175d0:	0a1b      	lsrs	r3, r3, #8
 80175d2:	b299      	uxth	r1, r3
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	681a      	ldr	r2, [r3, #0]
 80175d8:	89fb      	ldrh	r3, [r7, #14]
 80175da:	1c58      	adds	r0, r3, #1
 80175dc:	81f8      	strh	r0, [r7, #14]
 80175de:	4413      	add	r3, r2
 80175e0:	b2ca      	uxtb	r2, r1
 80175e2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	6999      	ldr	r1, [r3, #24]
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681a      	ldr	r2, [r3, #0]
 80175ec:	89fb      	ldrh	r3, [r7, #14]
 80175ee:	1c58      	adds	r0, r3, #1
 80175f0:	81f8      	strh	r0, [r7, #14]
 80175f2:	4413      	add	r3, r2
 80175f4:	b2ca      	uxtb	r2, r1
 80175f6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	699b      	ldr	r3, [r3, #24]
 80175fc:	0a19      	lsrs	r1, r3, #8
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	681a      	ldr	r2, [r3, #0]
 8017602:	89fb      	ldrh	r3, [r7, #14]
 8017604:	1c58      	adds	r0, r3, #1
 8017606:	81f8      	strh	r0, [r7, #14]
 8017608:	4413      	add	r3, r2
 801760a:	b2ca      	uxtb	r2, r1
 801760c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	699b      	ldr	r3, [r3, #24]
 8017612:	0c19      	lsrs	r1, r3, #16
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681a      	ldr	r2, [r3, #0]
 8017618:	89fb      	ldrh	r3, [r7, #14]
 801761a:	1c58      	adds	r0, r3, #1
 801761c:	81f8      	strh	r0, [r7, #14]
 801761e:	4413      	add	r3, r2
 8017620:	b2ca      	uxtb	r2, r1
 8017622:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	699b      	ldr	r3, [r3, #24]
 8017628:	0e19      	lsrs	r1, r3, #24
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	681a      	ldr	r2, [r3, #0]
 801762e:	89fb      	ldrh	r3, [r7, #14]
 8017630:	1c58      	adds	r0, r3, #1
 8017632:	81f8      	strh	r0, [r7, #14]
 8017634:	4413      	add	r3, r2
 8017636:	b2ca      	uxtb	r2, r1
 8017638:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801763a:	89fb      	ldrh	r3, [r7, #14]
 801763c:	b2da      	uxtb	r2, r3
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017642:	2300      	movs	r3, #0
}
 8017644:	4618      	mov	r0, r3
 8017646:	3710      	adds	r7, #16
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}

0801764c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b084      	sub	sp, #16
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d003      	beq.n	8017662 <LoRaMacSerializerData+0x16>
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d101      	bne.n	8017666 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017662:	2301      	movs	r3, #1
 8017664:	e0e5      	b.n	8017832 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8017666:	2300      	movs	r3, #0
 8017668:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801766a:	2308      	movs	r3, #8
 801766c:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	7b1b      	ldrb	r3, [r3, #12]
 8017672:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017676:	b2db      	uxtb	r3, r3
 8017678:	b29a      	uxth	r2, r3
 801767a:	89bb      	ldrh	r3, [r7, #12]
 801767c:	4413      	add	r3, r2
 801767e:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017686:	2b00      	cmp	r3, #0
 8017688:	d002      	beq.n	8017690 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801768a:	89bb      	ldrh	r3, [r7, #12]
 801768c:	3301      	adds	r3, #1
 801768e:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017696:	b29a      	uxth	r2, r3
 8017698:	89bb      	ldrh	r3, [r7, #12]
 801769a:	4413      	add	r3, r2
 801769c:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801769e:	89bb      	ldrh	r3, [r7, #12]
 80176a0:	3304      	adds	r3, #4
 80176a2:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	791b      	ldrb	r3, [r3, #4]
 80176a8:	b29b      	uxth	r3, r3
 80176aa:	89ba      	ldrh	r2, [r7, #12]
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d901      	bls.n	80176b4 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80176b0:	2302      	movs	r3, #2
 80176b2:	e0be      	b.n	8017832 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	681a      	ldr	r2, [r3, #0]
 80176b8:	89fb      	ldrh	r3, [r7, #14]
 80176ba:	1c59      	adds	r1, r3, #1
 80176bc:	81f9      	strh	r1, [r7, #14]
 80176be:	4413      	add	r3, r2
 80176c0:	687a      	ldr	r2, [r7, #4]
 80176c2:	7952      	ldrb	r2, [r2, #5]
 80176c4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	6899      	ldr	r1, [r3, #8]
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	89fb      	ldrh	r3, [r7, #14]
 80176d0:	1c58      	adds	r0, r3, #1
 80176d2:	81f8      	strh	r0, [r7, #14]
 80176d4:	4413      	add	r3, r2
 80176d6:	b2ca      	uxtb	r2, r1
 80176d8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	689b      	ldr	r3, [r3, #8]
 80176de:	0a19      	lsrs	r1, r3, #8
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	681a      	ldr	r2, [r3, #0]
 80176e4:	89fb      	ldrh	r3, [r7, #14]
 80176e6:	1c58      	adds	r0, r3, #1
 80176e8:	81f8      	strh	r0, [r7, #14]
 80176ea:	4413      	add	r3, r2
 80176ec:	b2ca      	uxtb	r2, r1
 80176ee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	689b      	ldr	r3, [r3, #8]
 80176f4:	0c19      	lsrs	r1, r3, #16
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	681a      	ldr	r2, [r3, #0]
 80176fa:	89fb      	ldrh	r3, [r7, #14]
 80176fc:	1c58      	adds	r0, r3, #1
 80176fe:	81f8      	strh	r0, [r7, #14]
 8017700:	4413      	add	r3, r2
 8017702:	b2ca      	uxtb	r2, r1
 8017704:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	689b      	ldr	r3, [r3, #8]
 801770a:	0e19      	lsrs	r1, r3, #24
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	681a      	ldr	r2, [r3, #0]
 8017710:	89fb      	ldrh	r3, [r7, #14]
 8017712:	1c58      	adds	r0, r3, #1
 8017714:	81f8      	strh	r0, [r7, #14]
 8017716:	4413      	add	r3, r2
 8017718:	b2ca      	uxtb	r2, r1
 801771a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681a      	ldr	r2, [r3, #0]
 8017720:	89fb      	ldrh	r3, [r7, #14]
 8017722:	1c59      	adds	r1, r3, #1
 8017724:	81f9      	strh	r1, [r7, #14]
 8017726:	4413      	add	r3, r2
 8017728:	687a      	ldr	r2, [r7, #4]
 801772a:	7b12      	ldrb	r2, [r2, #12]
 801772c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	89d9      	ldrh	r1, [r3, #14]
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681a      	ldr	r2, [r3, #0]
 8017736:	89fb      	ldrh	r3, [r7, #14]
 8017738:	1c58      	adds	r0, r3, #1
 801773a:	81f8      	strh	r0, [r7, #14]
 801773c:	4413      	add	r3, r2
 801773e:	b2ca      	uxtb	r2, r1
 8017740:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	89db      	ldrh	r3, [r3, #14]
 8017746:	0a1b      	lsrs	r3, r3, #8
 8017748:	b299      	uxth	r1, r3
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681a      	ldr	r2, [r3, #0]
 801774e:	89fb      	ldrh	r3, [r7, #14]
 8017750:	1c58      	adds	r0, r3, #1
 8017752:	81f8      	strh	r0, [r7, #14]
 8017754:	4413      	add	r3, r2
 8017756:	b2ca      	uxtb	r2, r1
 8017758:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	681a      	ldr	r2, [r3, #0]
 801775e:	89fb      	ldrh	r3, [r7, #14]
 8017760:	18d0      	adds	r0, r2, r3
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	f103 0110 	add.w	r1, r3, #16
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	7b1b      	ldrb	r3, [r3, #12]
 801776c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017770:	b2db      	uxtb	r3, r3
 8017772:	b29b      	uxth	r3, r3
 8017774:	461a      	mov	r2, r3
 8017776:	f003 fe76 	bl	801b466 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	7b1b      	ldrb	r3, [r3, #12]
 801777e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017782:	b2db      	uxtb	r3, r3
 8017784:	b29a      	uxth	r2, r3
 8017786:	89fb      	ldrh	r3, [r7, #14]
 8017788:	4413      	add	r3, r2
 801778a:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017792:	2b00      	cmp	r3, #0
 8017794:	d009      	beq.n	80177aa <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	89fb      	ldrh	r3, [r7, #14]
 801779c:	1c59      	adds	r1, r3, #1
 801779e:	81f9      	strh	r1, [r7, #14]
 80177a0:	4413      	add	r3, r2
 80177a2:	687a      	ldr	r2, [r7, #4]
 80177a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80177a8:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681a      	ldr	r2, [r3, #0]
 80177ae:	89fb      	ldrh	r3, [r7, #14]
 80177b0:	18d0      	adds	r0, r2, r3
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177bc:	b29b      	uxth	r3, r3
 80177be:	461a      	mov	r2, r3
 80177c0:	f003 fe51 	bl	801b466 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	89fb      	ldrh	r3, [r7, #14]
 80177ce:	4413      	add	r3, r2
 80177d0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	89fb      	ldrh	r3, [r7, #14]
 80177dc:	1c58      	adds	r0, r3, #1
 80177de:	81f8      	strh	r0, [r7, #14]
 80177e0:	4413      	add	r3, r2
 80177e2:	b2ca      	uxtb	r2, r1
 80177e4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177ea:	0a19      	lsrs	r1, r3, #8
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	681a      	ldr	r2, [r3, #0]
 80177f0:	89fb      	ldrh	r3, [r7, #14]
 80177f2:	1c58      	adds	r0, r3, #1
 80177f4:	81f8      	strh	r0, [r7, #14]
 80177f6:	4413      	add	r3, r2
 80177f8:	b2ca      	uxtb	r2, r1
 80177fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017800:	0c19      	lsrs	r1, r3, #16
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	681a      	ldr	r2, [r3, #0]
 8017806:	89fb      	ldrh	r3, [r7, #14]
 8017808:	1c58      	adds	r0, r3, #1
 801780a:	81f8      	strh	r0, [r7, #14]
 801780c:	4413      	add	r3, r2
 801780e:	b2ca      	uxtb	r2, r1
 8017810:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017816:	0e19      	lsrs	r1, r3, #24
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681a      	ldr	r2, [r3, #0]
 801781c:	89fb      	ldrh	r3, [r7, #14]
 801781e:	1c58      	adds	r0, r3, #1
 8017820:	81f8      	strh	r0, [r7, #14]
 8017822:	4413      	add	r3, r2
 8017824:	b2ca      	uxtb	r2, r1
 8017826:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017828:	89fb      	ldrh	r3, [r7, #14]
 801782a:	b2da      	uxtb	r2, r3
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8017830:	2300      	movs	r3, #0
}
 8017832:	4618      	mov	r0, r3
 8017834:	3710      	adds	r7, #16
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}

0801783a <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801783a:	b480      	push	{r7}
 801783c:	b083      	sub	sp, #12
 801783e:	af00      	add	r7, sp, #0
 8017840:	4603      	mov	r3, r0
 8017842:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017844:	79fb      	ldrb	r3, [r7, #7]
 8017846:	2b05      	cmp	r3, #5
 8017848:	d002      	beq.n	8017850 <RegionIsActive+0x16>
 801784a:	2b08      	cmp	r3, #8
 801784c:	d002      	beq.n	8017854 <RegionIsActive+0x1a>
 801784e:	e003      	b.n	8017858 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8017850:	2301      	movs	r3, #1
 8017852:	e002      	b.n	801785a <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8017854:	2301      	movs	r3, #1
 8017856:	e000      	b.n	801785a <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8017858:	2300      	movs	r3, #0
        }
    }
}
 801785a:	4618      	mov	r0, r3
 801785c:	370c      	adds	r7, #12
 801785e:	46bd      	mov	sp, r7
 8017860:	bc80      	pop	{r7}
 8017862:	4770      	bx	lr

08017864 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b084      	sub	sp, #16
 8017868:	af00      	add	r7, sp, #0
 801786a:	4603      	mov	r3, r0
 801786c:	6039      	str	r1, [r7, #0]
 801786e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017870:	2300      	movs	r3, #0
 8017872:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017874:	79fb      	ldrb	r3, [r7, #7]
 8017876:	2b05      	cmp	r3, #5
 8017878:	d002      	beq.n	8017880 <RegionGetPhyParam+0x1c>
 801787a:	2b08      	cmp	r3, #8
 801787c:	d006      	beq.n	801788c <RegionGetPhyParam+0x28>
 801787e:	e00b      	b.n	8017898 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017880:	6838      	ldr	r0, [r7, #0]
 8017882:	f001 fad1 	bl	8018e28 <RegionEU868GetPhyParam>
 8017886:	4603      	mov	r3, r0
 8017888:	60fb      	str	r3, [r7, #12]
 801788a:	e007      	b.n	801789c <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 801788c:	6838      	ldr	r0, [r7, #0]
 801788e:	f002 fc51 	bl	801a134 <RegionUS915GetPhyParam>
 8017892:	4603      	mov	r3, r0
 8017894:	60fb      	str	r3, [r7, #12]
 8017896:	e001      	b.n	801789c <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017898:	68bb      	ldr	r3, [r7, #8]
 801789a:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	4618      	mov	r0, r3
 80178a0:	3710      	adds	r7, #16
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}

080178a6 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b082      	sub	sp, #8
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	4603      	mov	r3, r0
 80178ae:	6039      	str	r1, [r7, #0]
 80178b0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178b2:	79fb      	ldrb	r3, [r7, #7]
 80178b4:	2b05      	cmp	r3, #5
 80178b6:	d002      	beq.n	80178be <RegionSetBandTxDone+0x18>
 80178b8:	2b08      	cmp	r3, #8
 80178ba:	d004      	beq.n	80178c6 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80178bc:	e006      	b.n	80178cc <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 80178be:	6838      	ldr	r0, [r7, #0]
 80178c0:	f001 fbf8 	bl	80190b4 <RegionEU868SetBandTxDone>
 80178c4:	e002      	b.n	80178cc <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 80178c6:	6838      	ldr	r0, [r7, #0]
 80178c8:	f002 fd90 	bl	801a3ec <RegionUS915SetBandTxDone>
        }
    }
}
 80178cc:	3708      	adds	r7, #8
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}

080178d2 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80178d2:	b580      	push	{r7, lr}
 80178d4:	b082      	sub	sp, #8
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	4603      	mov	r3, r0
 80178da:	6039      	str	r1, [r7, #0]
 80178dc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178de:	79fb      	ldrb	r3, [r7, #7]
 80178e0:	2b05      	cmp	r3, #5
 80178e2:	d002      	beq.n	80178ea <RegionInitDefaults+0x18>
 80178e4:	2b08      	cmp	r3, #8
 80178e6:	d004      	beq.n	80178f2 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80178e8:	e006      	b.n	80178f8 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 80178ea:	6838      	ldr	r0, [r7, #0]
 80178ec:	f001 fc0e 	bl	801910c <RegionEU868InitDefaults>
 80178f0:	e002      	b.n	80178f8 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 80178f2:	6838      	ldr	r0, [r7, #0]
 80178f4:	f002 fda6 	bl	801a444 <RegionUS915InitDefaults>
        }
    }
}
 80178f8:	bf00      	nop
 80178fa:	3708      	adds	r7, #8
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}

08017900 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	4603      	mov	r3, r0
 8017908:	6039      	str	r1, [r7, #0]
 801790a:	71fb      	strb	r3, [r7, #7]
 801790c:	4613      	mov	r3, r2
 801790e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017910:	79fb      	ldrb	r3, [r7, #7]
 8017912:	2b05      	cmp	r3, #5
 8017914:	d002      	beq.n	801791c <RegionVerify+0x1c>
 8017916:	2b08      	cmp	r3, #8
 8017918:	d007      	beq.n	801792a <RegionVerify+0x2a>
 801791a:	e00d      	b.n	8017938 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801791c:	79bb      	ldrb	r3, [r7, #6]
 801791e:	4619      	mov	r1, r3
 8017920:	6838      	ldr	r0, [r7, #0]
 8017922:	f001 fc91 	bl	8019248 <RegionEU868Verify>
 8017926:	4603      	mov	r3, r0
 8017928:	e007      	b.n	801793a <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 801792a:	79bb      	ldrb	r3, [r7, #6]
 801792c:	4619      	mov	r1, r3
 801792e:	6838      	ldr	r0, [r7, #0]
 8017930:	f002 feba 	bl	801a6a8 <RegionUS915Verify>
 8017934:	4603      	mov	r3, r0
 8017936:	e000      	b.n	801793a <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8017938:	2300      	movs	r3, #0
        }
    }
}
 801793a:	4618      	mov	r0, r3
 801793c:	3708      	adds	r7, #8
 801793e:	46bd      	mov	sp, r7
 8017940:	bd80      	pop	{r7, pc}

08017942 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017942:	b580      	push	{r7, lr}
 8017944:	b082      	sub	sp, #8
 8017946:	af00      	add	r7, sp, #0
 8017948:	4603      	mov	r3, r0
 801794a:	6039      	str	r1, [r7, #0]
 801794c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801794e:	79fb      	ldrb	r3, [r7, #7]
 8017950:	2b05      	cmp	r3, #5
 8017952:	d002      	beq.n	801795a <RegionApplyCFList+0x18>
 8017954:	2b08      	cmp	r3, #8
 8017956:	d004      	beq.n	8017962 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017958:	e006      	b.n	8017968 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 801795a:	6838      	ldr	r0, [r7, #0]
 801795c:	f001 fcf0 	bl	8019340 <RegionEU868ApplyCFList>
 8017960:	e002      	b.n	8017968 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8017962:	6838      	ldr	r0, [r7, #0]
 8017964:	f002 ff16 	bl	801a794 <RegionUS915ApplyCFList>
        }
    }
}
 8017968:	bf00      	nop
 801796a:	3708      	adds	r7, #8
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}

08017970 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b082      	sub	sp, #8
 8017974:	af00      	add	r7, sp, #0
 8017976:	4603      	mov	r3, r0
 8017978:	6039      	str	r1, [r7, #0]
 801797a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801797c:	79fb      	ldrb	r3, [r7, #7]
 801797e:	2b05      	cmp	r3, #5
 8017980:	d002      	beq.n	8017988 <RegionChanMaskSet+0x18>
 8017982:	2b08      	cmp	r3, #8
 8017984:	d005      	beq.n	8017992 <RegionChanMaskSet+0x22>
 8017986:	e009      	b.n	801799c <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8017988:	6838      	ldr	r0, [r7, #0]
 801798a:	f001 fd4d 	bl	8019428 <RegionEU868ChanMaskSet>
 801798e:	4603      	mov	r3, r0
 8017990:	e005      	b.n	801799e <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8017992:	6838      	ldr	r0, [r7, #0]
 8017994:	f002 ff72 	bl	801a87c <RegionUS915ChanMaskSet>
 8017998:	4603      	mov	r3, r0
 801799a:	e000      	b.n	801799e <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801799c:	2300      	movs	r3, #0
        }
    }
}
 801799e:	4618      	mov	r0, r3
 80179a0:	3708      	adds	r7, #8
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}

080179a6 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80179a6:	b580      	push	{r7, lr}
 80179a8:	b082      	sub	sp, #8
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	603b      	str	r3, [r7, #0]
 80179ae:	4603      	mov	r3, r0
 80179b0:	71fb      	strb	r3, [r7, #7]
 80179b2:	460b      	mov	r3, r1
 80179b4:	71bb      	strb	r3, [r7, #6]
 80179b6:	4613      	mov	r3, r2
 80179b8:	717b      	strb	r3, [r7, #5]
    switch( region )
 80179ba:	79fb      	ldrb	r3, [r7, #7]
 80179bc:	2b05      	cmp	r3, #5
 80179be:	d002      	beq.n	80179c6 <RegionComputeRxWindowParameters+0x20>
 80179c0:	2b08      	cmp	r3, #8
 80179c2:	d008      	beq.n	80179d6 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80179c4:	e00e      	b.n	80179e4 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80179c6:	7979      	ldrb	r1, [r7, #5]
 80179c8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	683a      	ldr	r2, [r7, #0]
 80179d0:	f001 fd54 	bl	801947c <RegionEU868ComputeRxWindowParameters>
 80179d4:	e006      	b.n	80179e4 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80179d6:	7979      	ldrb	r1, [r7, #5]
 80179d8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80179dc:	693b      	ldr	r3, [r7, #16]
 80179de:	683a      	ldr	r2, [r7, #0]
 80179e0:	f002 ffb4 	bl	801a94c <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 80179e4:	bf00      	nop
 80179e6:	3708      	adds	r7, #8
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}

080179ec <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b084      	sub	sp, #16
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	4603      	mov	r3, r0
 80179f4:	60b9      	str	r1, [r7, #8]
 80179f6:	607a      	str	r2, [r7, #4]
 80179f8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80179fa:	7bfb      	ldrb	r3, [r7, #15]
 80179fc:	2b05      	cmp	r3, #5
 80179fe:	d002      	beq.n	8017a06 <RegionRxConfig+0x1a>
 8017a00:	2b08      	cmp	r3, #8
 8017a02:	d006      	beq.n	8017a12 <RegionRxConfig+0x26>
 8017a04:	e00b      	b.n	8017a1e <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017a06:	6879      	ldr	r1, [r7, #4]
 8017a08:	68b8      	ldr	r0, [r7, #8]
 8017a0a:	f001 fd91 	bl	8019530 <RegionEU868RxConfig>
 8017a0e:	4603      	mov	r3, r0
 8017a10:	e006      	b.n	8017a20 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8017a12:	6879      	ldr	r1, [r7, #4]
 8017a14:	68b8      	ldr	r0, [r7, #8]
 8017a16:	f002 ffe3 	bl	801a9e0 <RegionUS915RxConfig>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	e000      	b.n	8017a20 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017a1e:	2300      	movs	r3, #0
        }
    }
}
 8017a20:	4618      	mov	r0, r3
 8017a22:	3710      	adds	r7, #16
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}

08017a28 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b084      	sub	sp, #16
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	60b9      	str	r1, [r7, #8]
 8017a30:	607a      	str	r2, [r7, #4]
 8017a32:	603b      	str	r3, [r7, #0]
 8017a34:	4603      	mov	r3, r0
 8017a36:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a38:	7bfb      	ldrb	r3, [r7, #15]
 8017a3a:	2b05      	cmp	r3, #5
 8017a3c:	d002      	beq.n	8017a44 <RegionTxConfig+0x1c>
 8017a3e:	2b08      	cmp	r3, #8
 8017a40:	d007      	beq.n	8017a52 <RegionTxConfig+0x2a>
 8017a42:	e00d      	b.n	8017a60 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017a44:	683a      	ldr	r2, [r7, #0]
 8017a46:	6879      	ldr	r1, [r7, #4]
 8017a48:	68b8      	ldr	r0, [r7, #8]
 8017a4a:	f001 fe41 	bl	80196d0 <RegionEU868TxConfig>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	e007      	b.n	8017a62 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8017a52:	683a      	ldr	r2, [r7, #0]
 8017a54:	6879      	ldr	r1, [r7, #4]
 8017a56:	68b8      	ldr	r0, [r7, #8]
 8017a58:	f003 f846 	bl	801aae8 <RegionUS915TxConfig>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	e000      	b.n	8017a62 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017a60:	2300      	movs	r3, #0
        }
    }
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	3710      	adds	r7, #16
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}

08017a6a <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017a6a:	b580      	push	{r7, lr}
 8017a6c:	b086      	sub	sp, #24
 8017a6e:	af02      	add	r7, sp, #8
 8017a70:	60b9      	str	r1, [r7, #8]
 8017a72:	607a      	str	r2, [r7, #4]
 8017a74:	603b      	str	r3, [r7, #0]
 8017a76:	4603      	mov	r3, r0
 8017a78:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a7a:	7bfb      	ldrb	r3, [r7, #15]
 8017a7c:	2b05      	cmp	r3, #5
 8017a7e:	d002      	beq.n	8017a86 <RegionLinkAdrReq+0x1c>
 8017a80:	2b08      	cmp	r3, #8
 8017a82:	d00a      	beq.n	8017a9a <RegionLinkAdrReq+0x30>
 8017a84:	e013      	b.n	8017aae <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017a86:	69fb      	ldr	r3, [r7, #28]
 8017a88:	9300      	str	r3, [sp, #0]
 8017a8a:	69bb      	ldr	r3, [r7, #24]
 8017a8c:	683a      	ldr	r2, [r7, #0]
 8017a8e:	6879      	ldr	r1, [r7, #4]
 8017a90:	68b8      	ldr	r0, [r7, #8]
 8017a92:	f001 feed 	bl	8019870 <RegionEU868LinkAdrReq>
 8017a96:	4603      	mov	r3, r0
 8017a98:	e00a      	b.n	8017ab0 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8017a9a:	69fb      	ldr	r3, [r7, #28]
 8017a9c:	9300      	str	r3, [sp, #0]
 8017a9e:	69bb      	ldr	r3, [r7, #24]
 8017aa0:	683a      	ldr	r2, [r7, #0]
 8017aa2:	6879      	ldr	r1, [r7, #4]
 8017aa4:	68b8      	ldr	r0, [r7, #8]
 8017aa6:	f003 f8c9 	bl	801ac3c <RegionUS915LinkAdrReq>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	e000      	b.n	8017ab0 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017aae:	2300      	movs	r3, #0
        }
    }
}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3710      	adds	r7, #16
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b082      	sub	sp, #8
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	4603      	mov	r3, r0
 8017ac0:	6039      	str	r1, [r7, #0]
 8017ac2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017ac4:	79fb      	ldrb	r3, [r7, #7]
 8017ac6:	2b05      	cmp	r3, #5
 8017ac8:	d002      	beq.n	8017ad0 <RegionRxParamSetupReq+0x18>
 8017aca:	2b08      	cmp	r3, #8
 8017acc:	d005      	beq.n	8017ada <RegionRxParamSetupReq+0x22>
 8017ace:	e009      	b.n	8017ae4 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017ad0:	6838      	ldr	r0, [r7, #0]
 8017ad2:	f001 ffef 	bl	8019ab4 <RegionEU868RxParamSetupReq>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	e005      	b.n	8017ae6 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8017ada:	6838      	ldr	r0, [r7, #0]
 8017adc:	f003 fac8 	bl	801b070 <RegionUS915RxParamSetupReq>
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	e000      	b.n	8017ae6 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017ae4:	2300      	movs	r3, #0
        }
    }
}
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	3708      	adds	r7, #8
 8017aea:	46bd      	mov	sp, r7
 8017aec:	bd80      	pop	{r7, pc}

08017aee <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017aee:	b580      	push	{r7, lr}
 8017af0:	b082      	sub	sp, #8
 8017af2:	af00      	add	r7, sp, #0
 8017af4:	4603      	mov	r3, r0
 8017af6:	6039      	str	r1, [r7, #0]
 8017af8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017afa:	79fb      	ldrb	r3, [r7, #7]
 8017afc:	2b05      	cmp	r3, #5
 8017afe:	d002      	beq.n	8017b06 <RegionNewChannelReq+0x18>
 8017b00:	2b08      	cmp	r3, #8
 8017b02:	d005      	beq.n	8017b10 <RegionNewChannelReq+0x22>
 8017b04:	e009      	b.n	8017b1a <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017b06:	6838      	ldr	r0, [r7, #0]
 8017b08:	f002 f812 	bl	8019b30 <RegionEU868NewChannelReq>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	e005      	b.n	8017b1c <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8017b10:	6838      	ldr	r0, [r7, #0]
 8017b12:	f003 faf9 	bl	801b108 <RegionUS915NewChannelReq>
 8017b16:	4603      	mov	r3, r0
 8017b18:	e000      	b.n	8017b1c <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017b1a:	2300      	movs	r3, #0
        }
    }
}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3708      	adds	r7, #8
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}

08017b24 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b082      	sub	sp, #8
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	6039      	str	r1, [r7, #0]
 8017b2e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b30:	79fb      	ldrb	r3, [r7, #7]
 8017b32:	2b05      	cmp	r3, #5
 8017b34:	d002      	beq.n	8017b3c <RegionTxParamSetupReq+0x18>
 8017b36:	2b08      	cmp	r3, #8
 8017b38:	d005      	beq.n	8017b46 <RegionTxParamSetupReq+0x22>
 8017b3a:	e009      	b.n	8017b50 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017b3c:	6838      	ldr	r0, [r7, #0]
 8017b3e:	f002 f855 	bl	8019bec <RegionEU868TxParamSetupReq>
 8017b42:	4603      	mov	r3, r0
 8017b44:	e005      	b.n	8017b52 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8017b46:	6838      	ldr	r0, [r7, #0]
 8017b48:	f003 fae9 	bl	801b11e <RegionUS915TxParamSetupReq>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	e000      	b.n	8017b52 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017b50:	2300      	movs	r3, #0
        }
    }
}
 8017b52:	4618      	mov	r0, r3
 8017b54:	3708      	adds	r7, #8
 8017b56:	46bd      	mov	sp, r7
 8017b58:	bd80      	pop	{r7, pc}

08017b5a <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017b5a:	b580      	push	{r7, lr}
 8017b5c:	b082      	sub	sp, #8
 8017b5e:	af00      	add	r7, sp, #0
 8017b60:	4603      	mov	r3, r0
 8017b62:	6039      	str	r1, [r7, #0]
 8017b64:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b66:	79fb      	ldrb	r3, [r7, #7]
 8017b68:	2b05      	cmp	r3, #5
 8017b6a:	d002      	beq.n	8017b72 <RegionDlChannelReq+0x18>
 8017b6c:	2b08      	cmp	r3, #8
 8017b6e:	d005      	beq.n	8017b7c <RegionDlChannelReq+0x22>
 8017b70:	e009      	b.n	8017b86 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017b72:	6838      	ldr	r0, [r7, #0]
 8017b74:	f002 f846 	bl	8019c04 <RegionEU868DlChannelReq>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	e005      	b.n	8017b88 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8017b7c:	6838      	ldr	r0, [r7, #0]
 8017b7e:	f003 fad9 	bl	801b134 <RegionUS915DlChannelReq>
 8017b82:	4603      	mov	r3, r0
 8017b84:	e000      	b.n	8017b88 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017b86:	2300      	movs	r3, #0
        }
    }
}
 8017b88:	4618      	mov	r0, r3
 8017b8a:	3708      	adds	r7, #8
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}

08017b90 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b082      	sub	sp, #8
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	4603      	mov	r3, r0
 8017b98:	71fb      	strb	r3, [r7, #7]
 8017b9a:	460b      	mov	r3, r1
 8017b9c:	71bb      	strb	r3, [r7, #6]
 8017b9e:	4613      	mov	r3, r2
 8017ba0:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017ba2:	79fb      	ldrb	r3, [r7, #7]
 8017ba4:	2b05      	cmp	r3, #5
 8017ba6:	d002      	beq.n	8017bae <RegionAlternateDr+0x1e>
 8017ba8:	2b08      	cmp	r3, #8
 8017baa:	d009      	beq.n	8017bc0 <RegionAlternateDr+0x30>
 8017bac:	e011      	b.n	8017bd2 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017bae:	797a      	ldrb	r2, [r7, #5]
 8017bb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017bb4:	4611      	mov	r1, r2
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f002 f86e 	bl	8019c98 <RegionEU868AlternateDr>
 8017bbc:	4603      	mov	r3, r0
 8017bbe:	e009      	b.n	8017bd4 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8017bc0:	797a      	ldrb	r2, [r7, #5]
 8017bc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017bc6:	4611      	mov	r1, r2
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f003 fabf 	bl	801b14c <RegionUS915AlternateDr>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	e000      	b.n	8017bd4 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017bd2:	2300      	movs	r3, #0
        }
    }
}
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}

08017bdc <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017bdc:	b580      	push	{r7, lr}
 8017bde:	b084      	sub	sp, #16
 8017be0:	af00      	add	r7, sp, #0
 8017be2:	60b9      	str	r1, [r7, #8]
 8017be4:	607a      	str	r2, [r7, #4]
 8017be6:	603b      	str	r3, [r7, #0]
 8017be8:	4603      	mov	r3, r0
 8017bea:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017bec:	7bfb      	ldrb	r3, [r7, #15]
 8017bee:	2b05      	cmp	r3, #5
 8017bf0:	d002      	beq.n	8017bf8 <RegionNextChannel+0x1c>
 8017bf2:	2b08      	cmp	r3, #8
 8017bf4:	d008      	beq.n	8017c08 <RegionNextChannel+0x2c>
 8017bf6:	e00f      	b.n	8017c18 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017bf8:	69bb      	ldr	r3, [r7, #24]
 8017bfa:	683a      	ldr	r2, [r7, #0]
 8017bfc:	6879      	ldr	r1, [r7, #4]
 8017bfe:	68b8      	ldr	r0, [r7, #8]
 8017c00:	f002 f85a 	bl	8019cb8 <RegionEU868NextChannel>
 8017c04:	4603      	mov	r3, r0
 8017c06:	e008      	b.n	8017c1a <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8017c08:	69bb      	ldr	r3, [r7, #24]
 8017c0a:	683a      	ldr	r2, [r7, #0]
 8017c0c:	6879      	ldr	r1, [r7, #4]
 8017c0e:	68b8      	ldr	r0, [r7, #8]
 8017c10:	f003 fad2 	bl	801b1b8 <RegionUS915NextChannel>
 8017c14:	4603      	mov	r3, r0
 8017c16:	e000      	b.n	8017c1a <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017c18:	2309      	movs	r3, #9
        }
    }
}
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	3710      	adds	r7, #16
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	bd80      	pop	{r7, pc}

08017c22 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017c22:	b590      	push	{r4, r7, lr}
 8017c24:	b083      	sub	sp, #12
 8017c26:	af00      	add	r7, sp, #0
 8017c28:	4604      	mov	r4, r0
 8017c2a:	4608      	mov	r0, r1
 8017c2c:	4611      	mov	r1, r2
 8017c2e:	461a      	mov	r2, r3
 8017c30:	4623      	mov	r3, r4
 8017c32:	71fb      	strb	r3, [r7, #7]
 8017c34:	4603      	mov	r3, r0
 8017c36:	71bb      	strb	r3, [r7, #6]
 8017c38:	460b      	mov	r3, r1
 8017c3a:	717b      	strb	r3, [r7, #5]
 8017c3c:	4613      	mov	r3, r2
 8017c3e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017c40:	79fb      	ldrb	r3, [r7, #7]
 8017c42:	2b05      	cmp	r3, #5
 8017c44:	d002      	beq.n	8017c4c <RegionApplyDrOffset+0x2a>
 8017c46:	2b08      	cmp	r3, #8
 8017c48:	d00a      	beq.n	8017c60 <RegionApplyDrOffset+0x3e>
 8017c4a:	e013      	b.n	8017c74 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017c4c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017c50:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017c54:	79bb      	ldrb	r3, [r7, #6]
 8017c56:	4618      	mov	r0, r3
 8017c58:	f002 f9a8 	bl	8019fac <RegionEU868ApplyDrOffset>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	e00a      	b.n	8017c76 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8017c60:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017c64:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017c68:	79bb      	ldrb	r3, [r7, #6]
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	f003 fb92 	bl	801b394 <RegionUS915ApplyDrOffset>
 8017c70:	4603      	mov	r3, r0
 8017c72:	e000      	b.n	8017c76 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017c74:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017c76:	4618      	mov	r0, r3
 8017c78:	370c      	adds	r7, #12
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	bd90      	pop	{r4, r7, pc}
	...

08017c80 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017c80:	b480      	push	{r7}
 8017c82:	b083      	sub	sp, #12
 8017c84:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017c86:	4b04      	ldr	r3, [pc, #16]	; (8017c98 <RegionGetVersion+0x18>)
 8017c88:	607b      	str	r3, [r7, #4]

    return version;
 8017c8a:	687b      	ldr	r3, [r7, #4]
}
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	370c      	adds	r7, #12
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bc80      	pop	{r7}
 8017c94:	4770      	bx	lr
 8017c96:	bf00      	nop
 8017c98:	02010001 	.word	0x02010001

08017c9c <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017c9c:	b480      	push	{r7}
 8017c9e:	b087      	sub	sp, #28
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	607a      	str	r2, [r7, #4]
 8017ca8:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8017caa:	68bb      	ldr	r3, [r7, #8]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d002      	beq.n	8017cb6 <FindAvailable125kHzChannels+0x1a>
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d101      	bne.n	8017cba <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017cb6:	2303      	movs	r3, #3
 8017cb8:	e021      	b.n	8017cfe <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	75fb      	strb	r3, [r7, #23]
 8017cc4:	e017      	b.n	8017cf6 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8017cc6:	89fa      	ldrh	r2, [r7, #14]
 8017cc8:	7dfb      	ldrb	r3, [r7, #23]
 8017cca:	fa42 f303 	asr.w	r3, r2, r3
 8017cce:	f003 0301 	and.w	r3, r3, #1
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d00c      	beq.n	8017cf0 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	781b      	ldrb	r3, [r3, #0]
 8017cda:	461a      	mov	r2, r3
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	4413      	add	r3, r2
 8017ce0:	7dfa      	ldrb	r2, [r7, #23]
 8017ce2:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	781b      	ldrb	r3, [r3, #0]
 8017ce8:	3301      	adds	r3, #1
 8017cea:	b2da      	uxtb	r2, r3
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017cf0:	7dfb      	ldrb	r3, [r7, #23]
 8017cf2:	3301      	adds	r3, #1
 8017cf4:	75fb      	strb	r3, [r7, #23]
 8017cf6:	7dfb      	ldrb	r3, [r7, #23]
 8017cf8:	2b07      	cmp	r3, #7
 8017cfa:	d9e4      	bls.n	8017cc6 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8017cfc:	2300      	movs	r3, #0
}
 8017cfe:	4618      	mov	r0, r3
 8017d00:	371c      	adds	r7, #28
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bc80      	pop	{r7}
 8017d06:	4770      	bx	lr

08017d08 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8017d08:	b590      	push	{r4, r7, lr}
 8017d0a:	b089      	sub	sp, #36	; 0x24
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	60f8      	str	r0, [r7, #12]
 8017d10:	60b9      	str	r1, [r7, #8]
 8017d12:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8017d14:	2300      	movs	r3, #0
 8017d16:	617b      	str	r3, [r7, #20]
 8017d18:	2300      	movs	r3, #0
 8017d1a:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8017d20:	68fb      	ldr	r3, [r7, #12]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d005      	beq.n	8017d32 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d002      	beq.n	8017d32 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d101      	bne.n	8017d36 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017d32:	2303      	movs	r3, #3
 8017d34:	e055      	b.n	8017de2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	781b      	ldrb	r3, [r3, #0]
 8017d3a:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8017d3c:	7f7b      	ldrb	r3, [r7, #29]
 8017d3e:	085b      	lsrs	r3, r3, #1
 8017d40:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8017d42:	7f7b      	ldrb	r3, [r7, #29]
 8017d44:	f003 0301 	and.w	r3, r3, #1
 8017d48:	b2db      	uxtb	r3, r3
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d107      	bne.n	8017d5e <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8017d4e:	7f3b      	ldrb	r3, [r7, #28]
 8017d50:	005b      	lsls	r3, r3, #1
 8017d52:	68fa      	ldr	r2, [r7, #12]
 8017d54:	4413      	add	r3, r2
 8017d56:	881b      	ldrh	r3, [r3, #0]
 8017d58:	b2db      	uxtb	r3, r3
 8017d5a:	83fb      	strh	r3, [r7, #30]
 8017d5c:	e006      	b.n	8017d6c <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8017d5e:	7f3b      	ldrb	r3, [r7, #28]
 8017d60:	005b      	lsls	r3, r3, #1
 8017d62:	68fa      	ldr	r2, [r7, #12]
 8017d64:	4413      	add	r3, r2
 8017d66:	881b      	ldrh	r3, [r3, #0]
 8017d68:	0a1b      	lsrs	r3, r3, #8
 8017d6a:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017d6c:	f107 0213 	add.w	r2, r7, #19
 8017d70:	f107 0114 	add.w	r1, r7, #20
 8017d74:	8bfb      	ldrh	r3, [r7, #30]
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7ff ff90 	bl	8017c9c <FindAvailable125kHzChannels>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	2b03      	cmp	r3, #3
 8017d80:	d101      	bne.n	8017d86 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8017d82:	2303      	movs	r3, #3
 8017d84:	e02d      	b.n	8017de2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8017d86:	7cfb      	ldrb	r3, [r7, #19]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d011      	beq.n	8017db0 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8017d8c:	7f7b      	ldrb	r3, [r7, #29]
 8017d8e:	00db      	lsls	r3, r3, #3
 8017d90:	b2dc      	uxtb	r4, r3
 8017d92:	7cfb      	ldrb	r3, [r7, #19]
 8017d94:	3b01      	subs	r3, #1
 8017d96:	4619      	mov	r1, r3
 8017d98:	2000      	movs	r0, #0
 8017d9a:	f003 fb4d 	bl	801b438 <randr>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	3320      	adds	r3, #32
 8017da2:	443b      	add	r3, r7
 8017da4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8017da8:	4423      	add	r3, r4
 8017daa:	b2da      	uxtb	r2, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8017db0:	7f7b      	ldrb	r3, [r7, #29]
 8017db2:	3301      	adds	r3, #1
 8017db4:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8017db6:	7f7b      	ldrb	r3, [r7, #29]
 8017db8:	2b07      	cmp	r3, #7
 8017dba:	d901      	bls.n	8017dc0 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8017dc0:	7cfb      	ldrb	r3, [r7, #19]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d104      	bne.n	8017dd0 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	781b      	ldrb	r3, [r3, #0]
 8017dca:	7f7a      	ldrb	r2, [r7, #29]
 8017dcc:	429a      	cmp	r2, r3
 8017dce:	d1b5      	bne.n	8017d3c <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8017dd0:	7cfb      	ldrb	r3, [r7, #19]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d004      	beq.n	8017de0 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8017dd6:	68bb      	ldr	r3, [r7, #8]
 8017dd8:	7f7a      	ldrb	r2, [r7, #29]
 8017dda:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017ddc:	2300      	movs	r3, #0
 8017dde:	e000      	b.n	8017de2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8017de0:	2303      	movs	r3, #3
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	3724      	adds	r7, #36	; 0x24
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd90      	pop	{r4, r7, pc}

08017dea <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8017dea:	b480      	push	{r7}
 8017dec:	b085      	sub	sp, #20
 8017dee:	af00      	add	r7, sp, #0
 8017df0:	4603      	mov	r3, r0
 8017df2:	60b9      	str	r1, [r7, #8]
 8017df4:	607a      	str	r2, [r7, #4]
 8017df6:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8017df8:	7bfb      	ldrb	r3, [r7, #15]
 8017dfa:	687a      	ldr	r2, [r7, #4]
 8017dfc:	fb03 f202 	mul.w	r2, r3, r2
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	4413      	add	r3, r2
}
 8017e04:	4618      	mov	r0, r3
 8017e06:	3714      	adds	r7, #20
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bc80      	pop	{r7}
 8017e0c:	4770      	bx	lr

08017e0e <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017e0e:	b480      	push	{r7}
 8017e10:	b087      	sub	sp, #28
 8017e12:	af00      	add	r7, sp, #0
 8017e14:	60f8      	str	r0, [r7, #12]
 8017e16:	4608      	mov	r0, r1
 8017e18:	4639      	mov	r1, r7
 8017e1a:	e881 000c 	stmia.w	r1, {r2, r3}
 8017e1e:	4603      	mov	r3, r0
 8017e20:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	881b      	ldrh	r3, [r3, #0]
 8017e26:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017e28:	7afb      	ldrb	r3, [r7, #11]
 8017e2a:	f083 0301 	eor.w	r3, r3, #1
 8017e2e:	b2db      	uxtb	r3, r3
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d01b      	beq.n	8017e6c <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017e34:	f242 7310 	movw	r3, #10000	; 0x2710
 8017e38:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017e3a:	683b      	ldr	r3, [r7, #0]
 8017e3c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017e40:	d202      	bcs.n	8017e48 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017e42:	2364      	movs	r3, #100	; 0x64
 8017e44:	82bb      	strh	r3, [r7, #20]
 8017e46:	e00b      	b.n	8017e60 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017e48:	683b      	ldr	r3, [r7, #0]
 8017e4a:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017e4e:	4293      	cmp	r3, r2
 8017e50:	d803      	bhi.n	8017e5a <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e56:	82bb      	strh	r3, [r7, #20]
 8017e58:	e002      	b.n	8017e60 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017e5a:	f242 7310 	movw	r3, #10000	; 0x2710
 8017e5e:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017e60:	8aba      	ldrh	r2, [r7, #20]
 8017e62:	8afb      	ldrh	r3, [r7, #22]
 8017e64:	4293      	cmp	r3, r2
 8017e66:	bf38      	it	cc
 8017e68:	4613      	movcc	r3, r2
 8017e6a:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017e6c:	8afb      	ldrh	r3, [r7, #22]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d101      	bne.n	8017e76 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017e72:	2301      	movs	r3, #1
 8017e74:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017e76:	8afb      	ldrh	r3, [r7, #22]
}
 8017e78:	4618      	mov	r0, r3
 8017e7a:	371c      	adds	r7, #28
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bc80      	pop	{r7}
 8017e80:	4770      	bx	lr
	...

08017e84 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b08e      	sub	sp, #56	; 0x38
 8017e88:	af02      	add	r7, sp, #8
 8017e8a:	60f8      	str	r0, [r7, #12]
 8017e8c:	4608      	mov	r0, r1
 8017e8e:	4639      	mov	r1, r7
 8017e90:	e881 000c 	stmia.w	r1, {r2, r3}
 8017e94:	4603      	mov	r3, r0
 8017e96:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017e98:	68fb      	ldr	r3, [r7, #12]
 8017e9a:	881b      	ldrh	r3, [r3, #0]
 8017e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017e9e:	4b4b      	ldr	r3, [pc, #300]	; (8017fcc <SetMaxTimeCredits+0x148>)
 8017ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017ea2:	463b      	mov	r3, r7
 8017ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ea8:	f006 ff32 	bl	801ed10 <SysTimeToMs>
 8017eac:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017eae:	f107 0314 	add.w	r3, r7, #20
 8017eb2:	2200      	movs	r2, #0
 8017eb4:	601a      	str	r2, [r3, #0]
 8017eb6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017eb8:	7af9      	ldrb	r1, [r7, #11]
 8017eba:	463b      	mov	r3, r7
 8017ebc:	cb0c      	ldmia	r3, {r2, r3}
 8017ebe:	68f8      	ldr	r0, [r7, #12]
 8017ec0:	f7ff ffa5 	bl	8017e0e <GetDutyCycle>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017ec8:	7afb      	ldrb	r3, [r7, #11]
 8017eca:	f083 0301 	eor.w	r3, r3, #1
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d062      	beq.n	8017f9a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017ed4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ed6:	2b64      	cmp	r3, #100	; 0x64
 8017ed8:	d105      	bne.n	8017ee6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017eda:	4b3c      	ldr	r3, [pc, #240]	; (8017fcc <SetMaxTimeCredits+0x148>)
 8017edc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ee2:	609a      	str	r2, [r3, #8]
 8017ee4:	e00b      	b.n	8017efe <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017ee6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ee8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017eec:	d105      	bne.n	8017efa <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017eee:	4b38      	ldr	r3, [pc, #224]	; (8017fd0 <SetMaxTimeCredits+0x14c>)
 8017ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ef6:	609a      	str	r2, [r3, #8]
 8017ef8:	e001      	b.n	8017efe <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017efa:	4b36      	ldr	r3, [pc, #216]	; (8017fd4 <SetMaxTimeCredits+0x150>)
 8017efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	689a      	ldr	r2, [r3, #8]
 8017f02:	f107 031c 	add.w	r3, r7, #28
 8017f06:	4611      	mov	r1, r2
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f006 ff29 	bl	801ed60 <SysTimeFromMs>
 8017f0e:	f107 0014 	add.w	r0, r7, #20
 8017f12:	6a3b      	ldr	r3, [r7, #32]
 8017f14:	9300      	str	r3, [sp, #0]
 8017f16:	69fb      	ldr	r3, [r7, #28]
 8017f18:	463a      	mov	r2, r7
 8017f1a:	ca06      	ldmia	r2, {r1, r2}
 8017f1c:	f006 fe39 	bl	801eb92 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017f20:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017f24:	f083 0301 	eor.w	r3, r3, #1
 8017f28:	b2db      	uxtb	r3, r3
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d006      	beq.n	8017f3c <SetMaxTimeCredits+0xb8>
 8017f2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017f32:	f083 0301 	eor.w	r3, r3, #1
 8017f36:	b2db      	uxtb	r3, r3
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d108      	bne.n	8017f4e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d103      	bne.n	8017f4e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017f46:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017f48:	4a23      	ldr	r2, [pc, #140]	; (8017fd8 <SetMaxTimeCredits+0x154>)
 8017f4a:	4293      	cmp	r3, r2
 8017f4c:	d92f      	bls.n	8017fae <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017f4e:	68fb      	ldr	r3, [r7, #12]
 8017f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f52:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017f54:	683b      	ldr	r3, [r7, #0]
 8017f56:	4a21      	ldr	r2, [pc, #132]	; (8017fdc <SetMaxTimeCredits+0x158>)
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d928      	bls.n	8017fae <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017f5c:	683b      	ldr	r3, [r7, #0]
 8017f5e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017f62:	3b30      	subs	r3, #48	; 0x30
 8017f64:	4a1e      	ldr	r2, [pc, #120]	; (8017fe0 <SetMaxTimeCredits+0x15c>)
 8017f66:	fba2 2303 	umull	r2, r3, r2, r3
 8017f6a:	0c1b      	lsrs	r3, r3, #16
 8017f6c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017f6e:	697b      	ldr	r3, [r7, #20]
 8017f70:	4a1c      	ldr	r2, [pc, #112]	; (8017fe4 <SetMaxTimeCredits+0x160>)
 8017f72:	fb02 f303 	mul.w	r3, r2, r3
 8017f76:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017f78:	697b      	ldr	r3, [r7, #20]
 8017f7a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017f7e:	3330      	adds	r3, #48	; 0x30
 8017f80:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017f82:	2300      	movs	r3, #0
 8017f84:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017f86:	f107 0314 	add.w	r3, r7, #20
 8017f8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f8e:	f006 febf 	bl	801ed10 <SysTimeToMs>
 8017f92:	4602      	mov	r2, r0
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	609a      	str	r2, [r3, #8]
 8017f98:	e009      	b.n	8017fae <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017f9a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017f9e:	f083 0301 	eor.w	r3, r3, #1
 8017fa2:	b2db      	uxtb	r3, r3
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d002      	beq.n	8017fae <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fac:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017fae:	68fb      	ldr	r3, [r7, #12]
 8017fb0:	685b      	ldr	r3, [r3, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d102      	bne.n	8017fbc <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fba:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fc0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017fc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017fc4:	4618      	mov	r0, r3
 8017fc6:	3730      	adds	r7, #48	; 0x30
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}
 8017fcc:	001b7740 	.word	0x001b7740
 8017fd0:	0112a880 	.word	0x0112a880
 8017fd4:	02932e00 	.word	0x02932e00
 8017fd8:	0001517f 	.word	0x0001517f
 8017fdc:	0001ec2f 	.word	0x0001ec2f
 8017fe0:	c22e4507 	.word	0xc22e4507
 8017fe4:	00015180 	.word	0x00015180

08017fe8 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b086      	sub	sp, #24
 8017fec:	af02      	add	r7, sp, #8
 8017fee:	6078      	str	r0, [r7, #4]
 8017ff0:	4608      	mov	r0, r1
 8017ff2:	4611      	mov	r1, r2
 8017ff4:	461a      	mov	r2, r3
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	70fb      	strb	r3, [r7, #3]
 8017ffa:	460b      	mov	r3, r1
 8017ffc:	70bb      	strb	r3, [r7, #2]
 8017ffe:	4613      	mov	r3, r2
 8018000:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8018002:	78f9      	ldrb	r1, [r7, #3]
 8018004:	787b      	ldrb	r3, [r7, #1]
 8018006:	9301      	str	r3, [sp, #4]
 8018008:	78bb      	ldrb	r3, [r7, #2]
 801800a:	9300      	str	r3, [sp, #0]
 801800c:	f107 0318 	add.w	r3, r7, #24
 8018010:	cb0c      	ldmia	r3, {r2, r3}
 8018012:	6878      	ldr	r0, [r7, #4]
 8018014:	f7ff ff36 	bl	8017e84 <SetMaxTimeCredits>
 8018018:	4603      	mov	r3, r0
 801801a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801801c:	78fb      	ldrb	r3, [r7, #3]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d00a      	beq.n	8018038 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	685b      	ldr	r3, [r3, #4]
 8018026:	4618      	mov	r0, r3
 8018028:	f007 fba6 	bl	801f778 <UTIL_TIMER_GetElapsedTime>
 801802c:	4602      	mov	r2, r0
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	68db      	ldr	r3, [r3, #12]
 8018032:	441a      	add	r2, r3
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	68da      	ldr	r2, [r3, #12]
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	691b      	ldr	r3, [r3, #16]
 8018040:	429a      	cmp	r2, r3
 8018042:	d903      	bls.n	801804c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	691a      	ldr	r2, [r3, #16]
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6a3a      	ldr	r2, [r7, #32]
 8018050:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8018052:	89fb      	ldrh	r3, [r7, #14]
}
 8018054:	4618      	mov	r0, r3
 8018056:	3710      	adds	r7, #16
 8018058:	46bd      	mov	sp, r7
 801805a:	bd80      	pop	{r7, pc}

0801805c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801805c:	b480      	push	{r7}
 801805e:	b085      	sub	sp, #20
 8018060:	af00      	add	r7, sp, #0
 8018062:	4603      	mov	r3, r0
 8018064:	460a      	mov	r2, r1
 8018066:	80fb      	strh	r3, [r7, #6]
 8018068:	4613      	mov	r3, r2
 801806a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801806c:	2300      	movs	r3, #0
 801806e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8018070:	2300      	movs	r3, #0
 8018072:	73bb      	strb	r3, [r7, #14]
 8018074:	e011      	b.n	801809a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8018076:	88fa      	ldrh	r2, [r7, #6]
 8018078:	7bbb      	ldrb	r3, [r7, #14]
 801807a:	2101      	movs	r1, #1
 801807c:	fa01 f303 	lsl.w	r3, r1, r3
 8018080:	401a      	ands	r2, r3
 8018082:	7bbb      	ldrb	r3, [r7, #14]
 8018084:	2101      	movs	r1, #1
 8018086:	fa01 f303 	lsl.w	r3, r1, r3
 801808a:	429a      	cmp	r2, r3
 801808c:	d102      	bne.n	8018094 <CountChannels+0x38>
        {
            nbActiveBits++;
 801808e:	7bfb      	ldrb	r3, [r7, #15]
 8018090:	3301      	adds	r3, #1
 8018092:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8018094:	7bbb      	ldrb	r3, [r7, #14]
 8018096:	3301      	adds	r3, #1
 8018098:	73bb      	strb	r3, [r7, #14]
 801809a:	7bba      	ldrb	r2, [r7, #14]
 801809c:	797b      	ldrb	r3, [r7, #5]
 801809e:	429a      	cmp	r2, r3
 80180a0:	d3e9      	bcc.n	8018076 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80180a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80180a4:	4618      	mov	r0, r3
 80180a6:	3714      	adds	r7, #20
 80180a8:	46bd      	mov	sp, r7
 80180aa:	bc80      	pop	{r7}
 80180ac:	4770      	bx	lr

080180ae <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80180ae:	b580      	push	{r7, lr}
 80180b0:	b084      	sub	sp, #16
 80180b2:	af00      	add	r7, sp, #0
 80180b4:	6039      	str	r1, [r7, #0]
 80180b6:	4611      	mov	r1, r2
 80180b8:	461a      	mov	r2, r3
 80180ba:	4603      	mov	r3, r0
 80180bc:	71fb      	strb	r3, [r7, #7]
 80180be:	460b      	mov	r3, r1
 80180c0:	71bb      	strb	r3, [r7, #6]
 80180c2:	4613      	mov	r3, r2
 80180c4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80180c6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80180ca:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80180ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80180d2:	4618      	mov	r0, r3
 80180d4:	f000 f85d 	bl	8018192 <RegionCommonValueInRange>
 80180d8:	4603      	mov	r3, r0
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d101      	bne.n	80180e2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80180de:	2300      	movs	r3, #0
 80180e0:	e053      	b.n	801818a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80180e2:	2300      	movs	r3, #0
 80180e4:	73fb      	strb	r3, [r7, #15]
 80180e6:	2300      	movs	r3, #0
 80180e8:	73bb      	strb	r3, [r7, #14]
 80180ea:	e049      	b.n	8018180 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80180ec:	2300      	movs	r3, #0
 80180ee:	737b      	strb	r3, [r7, #13]
 80180f0:	e03d      	b.n	801816e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80180f2:	7bbb      	ldrb	r3, [r7, #14]
 80180f4:	005b      	lsls	r3, r3, #1
 80180f6:	683a      	ldr	r2, [r7, #0]
 80180f8:	4413      	add	r3, r2
 80180fa:	881b      	ldrh	r3, [r3, #0]
 80180fc:	461a      	mov	r2, r3
 80180fe:	7b7b      	ldrb	r3, [r7, #13]
 8018100:	fa42 f303 	asr.w	r3, r2, r3
 8018104:	f003 0301 	and.w	r3, r3, #1
 8018108:	2b00      	cmp	r3, #0
 801810a:	d02d      	beq.n	8018168 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801810c:	7bfa      	ldrb	r2, [r7, #15]
 801810e:	7b7b      	ldrb	r3, [r7, #13]
 8018110:	4413      	add	r3, r2
 8018112:	461a      	mov	r2, r3
 8018114:	4613      	mov	r3, r2
 8018116:	005b      	lsls	r3, r3, #1
 8018118:	4413      	add	r3, r2
 801811a:	009b      	lsls	r3, r3, #2
 801811c:	461a      	mov	r2, r3
 801811e:	69fb      	ldr	r3, [r7, #28]
 8018120:	4413      	add	r3, r2
 8018122:	7a1b      	ldrb	r3, [r3, #8]
 8018124:	f343 0303 	sbfx	r3, r3, #0, #4
 8018128:	b25b      	sxtb	r3, r3
 801812a:	f003 030f 	and.w	r3, r3, #15
 801812e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8018130:	7bfa      	ldrb	r2, [r7, #15]
 8018132:	7b7b      	ldrb	r3, [r7, #13]
 8018134:	4413      	add	r3, r2
 8018136:	461a      	mov	r2, r3
 8018138:	4613      	mov	r3, r2
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	4413      	add	r3, r2
 801813e:	009b      	lsls	r3, r3, #2
 8018140:	461a      	mov	r2, r3
 8018142:	69fb      	ldr	r3, [r7, #28]
 8018144:	4413      	add	r3, r2
 8018146:	7a1b      	ldrb	r3, [r3, #8]
 8018148:	f343 1303 	sbfx	r3, r3, #4, #4
 801814c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801814e:	f003 030f 	and.w	r3, r3, #15
 8018152:	b25a      	sxtb	r2, r3
 8018154:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018158:	4618      	mov	r0, r3
 801815a:	f000 f81a 	bl	8018192 <RegionCommonValueInRange>
 801815e:	4603      	mov	r3, r0
 8018160:	2b01      	cmp	r3, #1
 8018162:	d101      	bne.n	8018168 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8018164:	2301      	movs	r3, #1
 8018166:	e010      	b.n	801818a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8018168:	7b7b      	ldrb	r3, [r7, #13]
 801816a:	3301      	adds	r3, #1
 801816c:	737b      	strb	r3, [r7, #13]
 801816e:	7b7b      	ldrb	r3, [r7, #13]
 8018170:	2b0f      	cmp	r3, #15
 8018172:	d9be      	bls.n	80180f2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8018174:	7bfb      	ldrb	r3, [r7, #15]
 8018176:	3310      	adds	r3, #16
 8018178:	73fb      	strb	r3, [r7, #15]
 801817a:	7bbb      	ldrb	r3, [r7, #14]
 801817c:	3301      	adds	r3, #1
 801817e:	73bb      	strb	r3, [r7, #14]
 8018180:	7bfa      	ldrb	r2, [r7, #15]
 8018182:	79fb      	ldrb	r3, [r7, #7]
 8018184:	429a      	cmp	r2, r3
 8018186:	d3b1      	bcc.n	80180ec <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8018188:	2300      	movs	r3, #0
}
 801818a:	4618      	mov	r0, r3
 801818c:	3710      	adds	r7, #16
 801818e:	46bd      	mov	sp, r7
 8018190:	bd80      	pop	{r7, pc}

08018192 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8018192:	b480      	push	{r7}
 8018194:	b083      	sub	sp, #12
 8018196:	af00      	add	r7, sp, #0
 8018198:	4603      	mov	r3, r0
 801819a:	71fb      	strb	r3, [r7, #7]
 801819c:	460b      	mov	r3, r1
 801819e:	71bb      	strb	r3, [r7, #6]
 80181a0:	4613      	mov	r3, r2
 80181a2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80181a4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80181a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80181ac:	429a      	cmp	r2, r3
 80181ae:	db07      	blt.n	80181c0 <RegionCommonValueInRange+0x2e>
 80181b0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80181b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80181b8:	429a      	cmp	r2, r3
 80181ba:	dc01      	bgt.n	80181c0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80181bc:	2301      	movs	r3, #1
 80181be:	e000      	b.n	80181c2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80181c0:	2300      	movs	r3, #0
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	370c      	adds	r7, #12
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bc80      	pop	{r7}
 80181ca:	4770      	bx	lr

080181cc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80181cc:	b480      	push	{r7}
 80181ce:	b085      	sub	sp, #20
 80181d0:	af00      	add	r7, sp, #0
 80181d2:	6078      	str	r0, [r7, #4]
 80181d4:	460b      	mov	r3, r1
 80181d6:	70fb      	strb	r3, [r7, #3]
 80181d8:	4613      	mov	r3, r2
 80181da:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80181dc:	78fb      	ldrb	r3, [r7, #3]
 80181de:	091b      	lsrs	r3, r3, #4
 80181e0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80181e2:	78bb      	ldrb	r3, [r7, #2]
 80181e4:	091b      	lsrs	r3, r3, #4
 80181e6:	b2db      	uxtb	r3, r3
 80181e8:	7bfa      	ldrb	r2, [r7, #15]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d803      	bhi.n	80181f6 <RegionCommonChanDisable+0x2a>
 80181ee:	78fa      	ldrb	r2, [r7, #3]
 80181f0:	78bb      	ldrb	r3, [r7, #2]
 80181f2:	429a      	cmp	r2, r3
 80181f4:	d301      	bcc.n	80181fa <RegionCommonChanDisable+0x2e>
    {
        return false;
 80181f6:	2300      	movs	r3, #0
 80181f8:	e017      	b.n	801822a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80181fa:	7bfb      	ldrb	r3, [r7, #15]
 80181fc:	005b      	lsls	r3, r3, #1
 80181fe:	687a      	ldr	r2, [r7, #4]
 8018200:	4413      	add	r3, r2
 8018202:	881b      	ldrh	r3, [r3, #0]
 8018204:	b21a      	sxth	r2, r3
 8018206:	78fb      	ldrb	r3, [r7, #3]
 8018208:	f003 030f 	and.w	r3, r3, #15
 801820c:	2101      	movs	r1, #1
 801820e:	fa01 f303 	lsl.w	r3, r1, r3
 8018212:	b21b      	sxth	r3, r3
 8018214:	43db      	mvns	r3, r3
 8018216:	b21b      	sxth	r3, r3
 8018218:	4013      	ands	r3, r2
 801821a:	b219      	sxth	r1, r3
 801821c:	7bfb      	ldrb	r3, [r7, #15]
 801821e:	005b      	lsls	r3, r3, #1
 8018220:	687a      	ldr	r2, [r7, #4]
 8018222:	4413      	add	r3, r2
 8018224:	b28a      	uxth	r2, r1
 8018226:	801a      	strh	r2, [r3, #0]

    return true;
 8018228:	2301      	movs	r3, #1
}
 801822a:	4618      	mov	r0, r3
 801822c:	3714      	adds	r7, #20
 801822e:	46bd      	mov	sp, r7
 8018230:	bc80      	pop	{r7}
 8018232:	4770      	bx	lr

08018234 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b084      	sub	sp, #16
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
 801823c:	460b      	mov	r3, r1
 801823e:	70fb      	strb	r3, [r7, #3]
 8018240:	4613      	mov	r3, r2
 8018242:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8018244:	2300      	movs	r3, #0
 8018246:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d101      	bne.n	8018252 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801824e:	2300      	movs	r3, #0
 8018250:	e018      	b.n	8018284 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8018252:	78fb      	ldrb	r3, [r7, #3]
 8018254:	73bb      	strb	r3, [r7, #14]
 8018256:	e010      	b.n	801827a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8018258:	7bbb      	ldrb	r3, [r7, #14]
 801825a:	005b      	lsls	r3, r3, #1
 801825c:	687a      	ldr	r2, [r7, #4]
 801825e:	4413      	add	r3, r2
 8018260:	881b      	ldrh	r3, [r3, #0]
 8018262:	2110      	movs	r1, #16
 8018264:	4618      	mov	r0, r3
 8018266:	f7ff fef9 	bl	801805c <CountChannels>
 801826a:	4603      	mov	r3, r0
 801826c:	461a      	mov	r2, r3
 801826e:	7bfb      	ldrb	r3, [r7, #15]
 8018270:	4413      	add	r3, r2
 8018272:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8018274:	7bbb      	ldrb	r3, [r7, #14]
 8018276:	3301      	adds	r3, #1
 8018278:	73bb      	strb	r3, [r7, #14]
 801827a:	7bba      	ldrb	r2, [r7, #14]
 801827c:	78bb      	ldrb	r3, [r7, #2]
 801827e:	429a      	cmp	r2, r3
 8018280:	d3ea      	bcc.n	8018258 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8018282:	7bfb      	ldrb	r3, [r7, #15]
}
 8018284:	4618      	mov	r0, r3
 8018286:	3710      	adds	r7, #16
 8018288:	46bd      	mov	sp, r7
 801828a:	bd80      	pop	{r7, pc}

0801828c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801828c:	b480      	push	{r7}
 801828e:	b087      	sub	sp, #28
 8018290:	af00      	add	r7, sp, #0
 8018292:	60f8      	str	r0, [r7, #12]
 8018294:	60b9      	str	r1, [r7, #8]
 8018296:	4613      	mov	r3, r2
 8018298:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d016      	beq.n	80182ce <RegionCommonChanMaskCopy+0x42>
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d013      	beq.n	80182ce <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80182a6:	2300      	movs	r3, #0
 80182a8:	75fb      	strb	r3, [r7, #23]
 80182aa:	e00c      	b.n	80182c6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80182ac:	7dfb      	ldrb	r3, [r7, #23]
 80182ae:	005b      	lsls	r3, r3, #1
 80182b0:	68ba      	ldr	r2, [r7, #8]
 80182b2:	441a      	add	r2, r3
 80182b4:	7dfb      	ldrb	r3, [r7, #23]
 80182b6:	005b      	lsls	r3, r3, #1
 80182b8:	68f9      	ldr	r1, [r7, #12]
 80182ba:	440b      	add	r3, r1
 80182bc:	8812      	ldrh	r2, [r2, #0]
 80182be:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80182c0:	7dfb      	ldrb	r3, [r7, #23]
 80182c2:	3301      	adds	r3, #1
 80182c4:	75fb      	strb	r3, [r7, #23]
 80182c6:	7dfa      	ldrb	r2, [r7, #23]
 80182c8:	79fb      	ldrb	r3, [r7, #7]
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d3ee      	bcc.n	80182ac <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80182ce:	bf00      	nop
 80182d0:	371c      	adds	r7, #28
 80182d2:	46bd      	mov	sp, r7
 80182d4:	bc80      	pop	{r7}
 80182d6:	4770      	bx	lr

080182d8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80182d8:	b082      	sub	sp, #8
 80182da:	b580      	push	{r7, lr}
 80182dc:	b086      	sub	sp, #24
 80182de:	af00      	add	r7, sp, #0
 80182e0:	60f8      	str	r0, [r7, #12]
 80182e2:	60b9      	str	r1, [r7, #8]
 80182e4:	627b      	str	r3, [r7, #36]	; 0x24
 80182e6:	4613      	mov	r3, r2
 80182e8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80182ea:	79f9      	ldrb	r1, [r7, #7]
 80182ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80182f0:	cb0c      	ldmia	r3, {r2, r3}
 80182f2:	68f8      	ldr	r0, [r7, #12]
 80182f4:	f7ff fd8b 	bl	8017e0e <GetDutyCycle>
 80182f8:	4603      	mov	r3, r0
 80182fa:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	68da      	ldr	r2, [r3, #12]
 8018300:	8afb      	ldrh	r3, [r7, #22]
 8018302:	68b9      	ldr	r1, [r7, #8]
 8018304:	fb01 f303 	mul.w	r3, r1, r3
 8018308:	429a      	cmp	r2, r3
 801830a:	d909      	bls.n	8018320 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	68da      	ldr	r2, [r3, #12]
 8018310:	8afb      	ldrh	r3, [r7, #22]
 8018312:	68b9      	ldr	r1, [r7, #8]
 8018314:	fb01 f303 	mul.w	r3, r1, r3
 8018318:	1ad2      	subs	r2, r2, r3
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801831e:	e002      	b.n	8018326 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	2200      	movs	r2, #0
 8018324:	60da      	str	r2, [r3, #12]
}
 8018326:	bf00      	nop
 8018328:	3718      	adds	r7, #24
 801832a:	46bd      	mov	sp, r7
 801832c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018330:	b002      	add	sp, #8
 8018332:	4770      	bx	lr

08018334 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018336:	b08f      	sub	sp, #60	; 0x3c
 8018338:	af04      	add	r7, sp, #16
 801833a:	6039      	str	r1, [r7, #0]
 801833c:	4611      	mov	r1, r2
 801833e:	461a      	mov	r2, r3
 8018340:	4603      	mov	r3, r0
 8018342:	71fb      	strb	r3, [r7, #7]
 8018344:	460b      	mov	r3, r1
 8018346:	71bb      	strb	r3, [r7, #6]
 8018348:	4613      	mov	r3, r2
 801834a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801834c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018350:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8018352:	f007 f9ff 	bl	801f754 <UTIL_TIMER_GetCurrentTime>
 8018356:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801835c:	2301      	movs	r3, #1
 801835e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8018360:	2300      	movs	r3, #0
 8018362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8018366:	2300      	movs	r3, #0
 8018368:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801836c:	e0ba      	b.n	80184e4 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801836e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018372:	4613      	mov	r3, r2
 8018374:	005b      	lsls	r3, r3, #1
 8018376:	4413      	add	r3, r2
 8018378:	00db      	lsls	r3, r3, #3
 801837a:	461a      	mov	r2, r3
 801837c:	683b      	ldr	r3, [r7, #0]
 801837e:	189c      	adds	r4, r3, r2
 8018380:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8018384:	797a      	ldrb	r2, [r7, #5]
 8018386:	79fd      	ldrb	r5, [r7, #7]
 8018388:	69fb      	ldr	r3, [r7, #28]
 801838a:	9302      	str	r3, [sp, #8]
 801838c:	46ec      	mov	ip, sp
 801838e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018392:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018396:	e88c 0003 	stmia.w	ip, {r0, r1}
 801839a:	4633      	mov	r3, r6
 801839c:	4629      	mov	r1, r5
 801839e:	4620      	mov	r0, r4
 80183a0:	f7ff fe22 	bl	8017fe8 <UpdateTimeCredits>
 80183a4:	4603      	mov	r3, r0
 80183a6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80183a8:	8afa      	ldrh	r2, [r7, #22]
 80183aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80183ac:	fb02 f303 	mul.w	r3, r2, r3
 80183b0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80183b2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183b6:	4613      	mov	r3, r2
 80183b8:	005b      	lsls	r3, r3, #1
 80183ba:	4413      	add	r3, r2
 80183bc:	00db      	lsls	r3, r3, #3
 80183be:	461a      	mov	r2, r3
 80183c0:	683b      	ldr	r3, [r7, #0]
 80183c2:	4413      	add	r3, r2
 80183c4:	68db      	ldr	r3, [r3, #12]
 80183c6:	69ba      	ldr	r2, [r7, #24]
 80183c8:	429a      	cmp	r2, r3
 80183ca:	d908      	bls.n	80183de <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80183cc:	797b      	ldrb	r3, [r7, #5]
 80183ce:	f083 0301 	eor.w	r3, r3, #1
 80183d2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d013      	beq.n	8018400 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80183d8:	79fb      	ldrb	r3, [r7, #7]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d010      	beq.n	8018400 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80183de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183e2:	4613      	mov	r3, r2
 80183e4:	005b      	lsls	r3, r3, #1
 80183e6:	4413      	add	r3, r2
 80183e8:	00db      	lsls	r3, r3, #3
 80183ea:	461a      	mov	r2, r3
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	4413      	add	r3, r2
 80183f0:	2201      	movs	r2, #1
 80183f2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80183f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80183f8:	3301      	adds	r3, #1
 80183fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80183fe:	e06c      	b.n	80184da <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8018400:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018404:	4613      	mov	r3, r2
 8018406:	005b      	lsls	r3, r3, #1
 8018408:	4413      	add	r3, r2
 801840a:	00db      	lsls	r3, r3, #3
 801840c:	461a      	mov	r2, r3
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	4413      	add	r3, r2
 8018412:	2200      	movs	r2, #0
 8018414:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8018416:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801841a:	4613      	mov	r3, r2
 801841c:	005b      	lsls	r3, r3, #1
 801841e:	4413      	add	r3, r2
 8018420:	00db      	lsls	r3, r3, #3
 8018422:	461a      	mov	r2, r3
 8018424:	683b      	ldr	r3, [r7, #0]
 8018426:	4413      	add	r3, r2
 8018428:	691b      	ldr	r3, [r3, #16]
 801842a:	69ba      	ldr	r2, [r7, #24]
 801842c:	429a      	cmp	r2, r3
 801842e:	d815      	bhi.n	801845c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8018430:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018434:	4613      	mov	r3, r2
 8018436:	005b      	lsls	r3, r3, #1
 8018438:	4413      	add	r3, r2
 801843a:	00db      	lsls	r3, r3, #3
 801843c:	461a      	mov	r2, r3
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	4413      	add	r3, r2
 8018442:	68db      	ldr	r3, [r3, #12]
 8018444:	69ba      	ldr	r2, [r7, #24]
 8018446:	1ad3      	subs	r3, r2, r3
 8018448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801844a:	4293      	cmp	r3, r2
 801844c:	bf28      	it	cs
 801844e:	4613      	movcs	r3, r2
 8018450:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8018452:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018456:	3301      	adds	r3, #1
 8018458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801845c:	79fb      	ldrb	r3, [r7, #7]
 801845e:	f083 0301 	eor.w	r3, r3, #1
 8018462:	b2db      	uxtb	r3, r3
 8018464:	2b00      	cmp	r3, #0
 8018466:	d038      	beq.n	80184da <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018468:	2300      	movs	r3, #0
 801846a:	60fb      	str	r3, [r7, #12]
 801846c:	2300      	movs	r3, #0
 801846e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018470:	8afb      	ldrh	r3, [r7, #22]
 8018472:	2b64      	cmp	r3, #100	; 0x64
 8018474:	d103      	bne.n	801847e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8018476:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801847a:	60fb      	str	r3, [r7, #12]
 801847c:	e009      	b.n	8018492 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801847e:	8afb      	ldrh	r3, [r7, #22]
 8018480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018484:	d103      	bne.n	801848e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8018486:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801848a:	60fb      	str	r3, [r7, #12]
 801848c:	e001      	b.n	8018492 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801848e:	4b1e      	ldr	r3, [pc, #120]	; (8018508 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018490:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8018492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018494:	4a1c      	ldr	r2, [pc, #112]	; (8018508 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018496:	4293      	cmp	r3, r2
 8018498:	d90e      	bls.n	80184b8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801849a:	68fa      	ldr	r2, [r7, #12]
 801849c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801849e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80184a2:	3b30      	subs	r3, #48	; 0x30
 80184a4:	4919      	ldr	r1, [pc, #100]	; (801850c <RegionCommonUpdateBandTimeOff+0x1d8>)
 80184a6:	fba1 1303 	umull	r1, r3, r1, r3
 80184aa:	0c1b      	lsrs	r3, r3, #16
 80184ac:	3301      	adds	r3, #1
 80184ae:	4918      	ldr	r1, [pc, #96]	; (8018510 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80184b0:	fb01 f303 	mul.w	r3, r1, r3
 80184b4:	4413      	add	r3, r2
 80184b6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80184b8:	f107 000c 	add.w	r0, r7, #12
 80184bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80184be:	9300      	str	r3, [sp, #0]
 80184c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80184c2:	f107 020c 	add.w	r2, r7, #12
 80184c6:	ca06      	ldmia	r2, {r1, r2}
 80184c8:	f006 fb63 	bl	801eb92 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80184cc:	f107 030c 	add.w	r3, r7, #12
 80184d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80184d4:	f006 fc1c 	bl	801ed10 <SysTimeToMs>
 80184d8:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80184da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80184de:	3301      	adds	r3, #1
 80184e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80184e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80184e8:	79bb      	ldrb	r3, [r7, #6]
 80184ea:	429a      	cmp	r2, r3
 80184ec:	f4ff af3f 	bcc.w	801836e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80184f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d102      	bne.n	80184fe <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80184f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80184fc:	e000      	b.n	8018500 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80184fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018500:	4618      	mov	r0, r3
 8018502:	372c      	adds	r7, #44	; 0x2c
 8018504:	46bd      	mov	sp, r7
 8018506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018508:	0001ec30 	.word	0x0001ec30
 801850c:	c22e4507 	.word	0xc22e4507
 8018510:	00015180 	.word	0x00015180

08018514 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018514:	b480      	push	{r7}
 8018516:	b085      	sub	sp, #20
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
 801851c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801851e:	2300      	movs	r3, #0
 8018520:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	781b      	ldrb	r3, [r3, #0]
 8018526:	2b03      	cmp	r3, #3
 8018528:	d13f      	bne.n	80185aa <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	3301      	adds	r3, #1
 801852e:	781b      	ldrb	r3, [r3, #0]
 8018530:	b25a      	sxtb	r2, r3
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8018536:	683b      	ldr	r3, [r7, #0]
 8018538:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801853c:	f003 030f 	and.w	r3, r3, #15
 8018540:	b25a      	sxtb	r2, r3
 8018542:	683b      	ldr	r3, [r7, #0]
 8018544:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8018546:	683b      	ldr	r3, [r7, #0]
 8018548:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801854c:	b2db      	uxtb	r3, r3
 801854e:	091b      	lsrs	r3, r3, #4
 8018550:	b2db      	uxtb	r3, r3
 8018552:	b25a      	sxtb	r2, r3
 8018554:	683b      	ldr	r3, [r7, #0]
 8018556:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	3302      	adds	r3, #2
 801855c:	781b      	ldrb	r3, [r3, #0]
 801855e:	b29a      	uxth	r2, r3
 8018560:	683b      	ldr	r3, [r7, #0]
 8018562:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018564:	683b      	ldr	r3, [r7, #0]
 8018566:	889b      	ldrh	r3, [r3, #4]
 8018568:	b21a      	sxth	r2, r3
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	3303      	adds	r3, #3
 801856e:	781b      	ldrb	r3, [r3, #0]
 8018570:	021b      	lsls	r3, r3, #8
 8018572:	b21b      	sxth	r3, r3
 8018574:	4313      	orrs	r3, r2
 8018576:	b21b      	sxth	r3, r3
 8018578:	b29a      	uxth	r2, r3
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	791a      	ldrb	r2, [r3, #4]
 8018582:	683b      	ldr	r3, [r7, #0]
 8018584:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	781b      	ldrb	r3, [r3, #0]
 801858a:	091b      	lsrs	r3, r3, #4
 801858c:	b2db      	uxtb	r3, r3
 801858e:	f003 0307 	and.w	r3, r3, #7
 8018592:	b2da      	uxtb	r2, r3
 8018594:	683b      	ldr	r3, [r7, #0]
 8018596:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	781b      	ldrb	r3, [r3, #0]
 801859c:	f003 030f 	and.w	r3, r3, #15
 80185a0:	b2da      	uxtb	r2, r3
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80185a6:	2305      	movs	r3, #5
 80185a8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80185aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80185ac:	4618      	mov	r0, r3
 80185ae:	3714      	adds	r7, #20
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bc80      	pop	{r7}
 80185b4:	4770      	bx	lr

080185b6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80185b6:	b5b0      	push	{r4, r5, r7, lr}
 80185b8:	b088      	sub	sp, #32
 80185ba:	af02      	add	r7, sp, #8
 80185bc:	60f8      	str	r0, [r7, #12]
 80185be:	60b9      	str	r1, [r7, #8]
 80185c0:	607a      	str	r2, [r7, #4]
 80185c2:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	791b      	ldrb	r3, [r3, #4]
 80185c8:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	799b      	ldrb	r3, [r3, #6]
 80185ce:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	79db      	ldrb	r3, [r3, #7]
 80185d4:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	7a1b      	ldrb	r3, [r3, #8]
 80185da:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	795b      	ldrb	r3, [r3, #5]
 80185e0:	f083 0301 	eor.w	r3, r3, #1
 80185e4:	b2db      	uxtb	r3, r3
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d008      	beq.n	80185fc <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	7adb      	ldrb	r3, [r3, #11]
 80185ee:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	7a5b      	ldrb	r3, [r3, #9]
 80185f4:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	7a9b      	ldrb	r3, [r3, #10]
 80185fa:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80185fc:	7dfb      	ldrb	r3, [r7, #23]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d04a      	beq.n	8018698 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8018602:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018606:	2b0f      	cmp	r3, #15
 8018608:	d103      	bne.n	8018612 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	7a5b      	ldrb	r3, [r3, #9]
 801860e:	75bb      	strb	r3, [r7, #22]
 8018610:	e01d      	b.n	801864e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	7b18      	ldrb	r0, [r3, #12]
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	6919      	ldr	r1, [r3, #16]
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8018626:	68fa      	ldr	r2, [r7, #12]
 8018628:	6992      	ldr	r2, [r2, #24]
 801862a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801862e:	9201      	str	r2, [sp, #4]
 8018630:	9300      	str	r3, [sp, #0]
 8018632:	462b      	mov	r3, r5
 8018634:	4622      	mov	r2, r4
 8018636:	f7ff fd3a 	bl	80180ae <RegionCommonChanVerifyDr>
 801863a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801863c:	f083 0301 	eor.w	r3, r3, #1
 8018640:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018642:	2b00      	cmp	r3, #0
 8018644:	d003      	beq.n	801864e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8018646:	7dfb      	ldrb	r3, [r7, #23]
 8018648:	f023 0302 	bic.w	r3, r3, #2
 801864c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801864e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018652:	2b0f      	cmp	r3, #15
 8018654:	d103      	bne.n	801865e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	7a9b      	ldrb	r3, [r3, #10]
 801865a:	757b      	strb	r3, [r7, #21]
 801865c:	e01c      	b.n	8018698 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801866a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801866e:	4618      	mov	r0, r3
 8018670:	f7ff fd8f 	bl	8018192 <RegionCommonValueInRange>
 8018674:	4603      	mov	r3, r0
 8018676:	2b00      	cmp	r3, #0
 8018678:	d10e      	bne.n	8018698 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018680:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8018684:	429a      	cmp	r2, r3
 8018686:	da03      	bge.n	8018690 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	7f5b      	ldrb	r3, [r3, #29]
 801868c:	757b      	strb	r3, [r7, #21]
 801868e:	e003      	b.n	8018698 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018690:	7dfb      	ldrb	r3, [r7, #23]
 8018692:	f023 0304 	bic.w	r3, r3, #4
 8018696:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018698:	7dfb      	ldrb	r3, [r7, #23]
 801869a:	2b07      	cmp	r3, #7
 801869c:	d105      	bne.n	80186aa <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801869e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d101      	bne.n	80186aa <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80186a6:	2301      	movs	r3, #1
 80186a8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	7dba      	ldrb	r2, [r7, #22]
 80186ae:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	7d7a      	ldrb	r2, [r7, #21]
 80186b4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80186b6:	7d3a      	ldrb	r2, [r7, #20]
 80186b8:	683b      	ldr	r3, [r7, #0]
 80186ba:	701a      	strb	r2, [r3, #0]

    return status;
 80186bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80186be:	4618      	mov	r0, r3
 80186c0:	3718      	adds	r7, #24
 80186c2:	46bd      	mov	sp, r7
 80186c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080186c8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80186c8:	b480      	push	{r7}
 80186ca:	b083      	sub	sp, #12
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	4603      	mov	r3, r0
 80186d0:	6039      	str	r1, [r7, #0]
 80186d2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80186d4:	79fb      	ldrb	r3, [r7, #7]
 80186d6:	4a06      	ldr	r2, [pc, #24]	; (80186f0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80186d8:	fa02 f303 	lsl.w	r3, r2, r3
 80186dc:	461a      	mov	r2, r3
 80186de:	683b      	ldr	r3, [r7, #0]
 80186e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80186e4:	4618      	mov	r0, r3
 80186e6:	370c      	adds	r7, #12
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bc80      	pop	{r7}
 80186ec:	4770      	bx	lr
 80186ee:	bf00      	nop
 80186f0:	000f4240 	.word	0x000f4240

080186f4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80186f4:	b480      	push	{r7}
 80186f6:	b083      	sub	sp, #12
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	4603      	mov	r3, r0
 80186fc:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80186fe:	79fb      	ldrb	r3, [r7, #7]
 8018700:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018704:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018708:	4618      	mov	r0, r3
 801870a:	370c      	adds	r7, #12
 801870c:	46bd      	mov	sp, r7
 801870e:	bc80      	pop	{r7}
 8018710:	4770      	bx	lr
	...

08018714 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018714:	b480      	push	{r7}
 8018716:	b085      	sub	sp, #20
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	607a      	str	r2, [r7, #4]
 801871e:	603b      	str	r3, [r7, #0]
 8018720:	460b      	mov	r3, r1
 8018722:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018724:	7afa      	ldrb	r2, [r7, #11]
 8018726:	7afb      	ldrb	r3, [r7, #11]
 8018728:	3b04      	subs	r3, #4
 801872a:	4619      	mov	r1, r3
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	fb03 f101 	mul.w	r1, r3, r1
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018738:	fb00 f303 	mul.w	r3, r0, r3
 801873c:	440b      	add	r3, r1
 801873e:	005b      	lsls	r3, r3, #1
 8018740:	2b00      	cmp	r3, #0
 8018742:	d013      	beq.n	801876c <RegionCommonComputeRxWindowParameters+0x58>
 8018744:	7afb      	ldrb	r3, [r7, #11]
 8018746:	3b04      	subs	r3, #4
 8018748:	4619      	mov	r1, r3
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	fb03 f101 	mul.w	r1, r3, r1
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018756:	fb00 f303 	mul.w	r3, r0, r3
 801875a:	440b      	add	r3, r1
 801875c:	0059      	lsls	r1, r3, #1
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	440b      	add	r3, r1
 8018762:	1e59      	subs	r1, r3, #1
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	fbb1 f3f3 	udiv	r3, r1, r3
 801876a:	e00f      	b.n	801878c <RegionCommonComputeRxWindowParameters+0x78>
 801876c:	7afb      	ldrb	r3, [r7, #11]
 801876e:	3b04      	subs	r3, #4
 8018770:	4619      	mov	r1, r3
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	fb03 f101 	mul.w	r1, r3, r1
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801877e:	fb00 f303 	mul.w	r3, r0, r3
 8018782:	440b      	add	r3, r1
 8018784:	0059      	lsls	r1, r3, #1
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	fbb1 f3f3 	udiv	r3, r1, r3
 801878c:	429a      	cmp	r2, r3
 801878e:	bf38      	it	cc
 8018790:	461a      	movcc	r2, r3
 8018792:	69bb      	ldr	r3, [r7, #24]
 8018794:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	009b      	lsls	r3, r3, #2
 801879a:	4619      	mov	r1, r3
 801879c:	69bb      	ldr	r3, [r7, #24]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	68fa      	ldr	r2, [r7, #12]
 80187a2:	fb02 f303 	mul.w	r3, r2, r3
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d007      	beq.n	80187ba <RegionCommonComputeRxWindowParameters+0xa6>
 80187aa:	69bb      	ldr	r3, [r7, #24]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	68fa      	ldr	r2, [r7, #12]
 80187b0:	fb02 f303 	mul.w	r3, r2, r3
 80187b4:	3301      	adds	r3, #1
 80187b6:	085b      	lsrs	r3, r3, #1
 80187b8:	e005      	b.n	80187c6 <RegionCommonComputeRxWindowParameters+0xb2>
 80187ba:	69bb      	ldr	r3, [r7, #24]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	68fa      	ldr	r2, [r7, #12]
 80187c0:	fb02 f303 	mul.w	r3, r2, r3
 80187c4:	085b      	lsrs	r3, r3, #1
 80187c6:	1acb      	subs	r3, r1, r3
 80187c8:	683a      	ldr	r2, [r7, #0]
 80187ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80187ce:	fb01 f202 	mul.w	r2, r1, r2
 80187d2:	1a9b      	subs	r3, r3, r2
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	dd27      	ble.n	8018828 <RegionCommonComputeRxWindowParameters+0x114>
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	009b      	lsls	r3, r3, #2
 80187dc:	4619      	mov	r1, r3
 80187de:	69bb      	ldr	r3, [r7, #24]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	68fa      	ldr	r2, [r7, #12]
 80187e4:	fb02 f303 	mul.w	r3, r2, r3
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d007      	beq.n	80187fc <RegionCommonComputeRxWindowParameters+0xe8>
 80187ec:	69bb      	ldr	r3, [r7, #24]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	68fa      	ldr	r2, [r7, #12]
 80187f2:	fb02 f303 	mul.w	r3, r2, r3
 80187f6:	3301      	adds	r3, #1
 80187f8:	085b      	lsrs	r3, r3, #1
 80187fa:	e005      	b.n	8018808 <RegionCommonComputeRxWindowParameters+0xf4>
 80187fc:	69bb      	ldr	r3, [r7, #24]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	68fa      	ldr	r2, [r7, #12]
 8018802:	fb02 f303 	mul.w	r3, r2, r3
 8018806:	085b      	lsrs	r3, r3, #1
 8018808:	1acb      	subs	r3, r1, r3
 801880a:	683a      	ldr	r2, [r7, #0]
 801880c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018810:	fb01 f202 	mul.w	r2, r1, r2
 8018814:	1a9b      	subs	r3, r3, r2
 8018816:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801881a:	4a19      	ldr	r2, [pc, #100]	; (8018880 <RegionCommonComputeRxWindowParameters+0x16c>)
 801881c:	fb82 1203 	smull	r1, r2, r2, r3
 8018820:	1192      	asrs	r2, r2, #6
 8018822:	17db      	asrs	r3, r3, #31
 8018824:	1ad3      	subs	r3, r2, r3
 8018826:	e024      	b.n	8018872 <RegionCommonComputeRxWindowParameters+0x15e>
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	009b      	lsls	r3, r3, #2
 801882c:	4619      	mov	r1, r3
 801882e:	69bb      	ldr	r3, [r7, #24]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	68fa      	ldr	r2, [r7, #12]
 8018834:	fb02 f303 	mul.w	r3, r2, r3
 8018838:	2b00      	cmp	r3, #0
 801883a:	d007      	beq.n	801884c <RegionCommonComputeRxWindowParameters+0x138>
 801883c:	69bb      	ldr	r3, [r7, #24]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	68fa      	ldr	r2, [r7, #12]
 8018842:	fb02 f303 	mul.w	r3, r2, r3
 8018846:	3301      	adds	r3, #1
 8018848:	085b      	lsrs	r3, r3, #1
 801884a:	e005      	b.n	8018858 <RegionCommonComputeRxWindowParameters+0x144>
 801884c:	69bb      	ldr	r3, [r7, #24]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	68fa      	ldr	r2, [r7, #12]
 8018852:	fb02 f303 	mul.w	r3, r2, r3
 8018856:	085b      	lsrs	r3, r3, #1
 8018858:	1acb      	subs	r3, r1, r3
 801885a:	683a      	ldr	r2, [r7, #0]
 801885c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018860:	fb01 f202 	mul.w	r2, r1, r2
 8018864:	1a9b      	subs	r3, r3, r2
 8018866:	4a06      	ldr	r2, [pc, #24]	; (8018880 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018868:	fb82 1203 	smull	r1, r2, r2, r3
 801886c:	1192      	asrs	r2, r2, #6
 801886e:	17db      	asrs	r3, r3, #31
 8018870:	1ad3      	subs	r3, r2, r3
 8018872:	69fa      	ldr	r2, [r7, #28]
 8018874:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8018876:	bf00      	nop
 8018878:	3714      	adds	r7, #20
 801887a:	46bd      	mov	sp, r7
 801887c:	bc80      	pop	{r7}
 801887e:	4770      	bx	lr
 8018880:	10624dd3 	.word	0x10624dd3

08018884 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018884:	b580      	push	{r7, lr}
 8018886:	b086      	sub	sp, #24
 8018888:	af00      	add	r7, sp, #0
 801888a:	4603      	mov	r3, r0
 801888c:	60b9      	str	r1, [r7, #8]
 801888e:	607a      	str	r2, [r7, #4]
 8018890:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018892:	2300      	movs	r3, #0
 8018894:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801889a:	005b      	lsls	r3, r3, #1
 801889c:	4618      	mov	r0, r3
 801889e:	f7e8 f9f7 	bl	8000c90 <__aeabi_ui2f>
 80188a2:	4603      	mov	r3, r0
 80188a4:	4619      	mov	r1, r3
 80188a6:	68b8      	ldr	r0, [r7, #8]
 80188a8:	f7e8 f940 	bl	8000b2c <__aeabi_fsub>
 80188ac:	4603      	mov	r3, r0
 80188ae:	6879      	ldr	r1, [r7, #4]
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7e8 f93b 	bl	8000b2c <__aeabi_fsub>
 80188b6:	4603      	mov	r3, r0
 80188b8:	4618      	mov	r0, r3
 80188ba:	f7e7 fdc9 	bl	8000450 <__aeabi_f2d>
 80188be:	4602      	mov	r2, r0
 80188c0:	460b      	mov	r3, r1
 80188c2:	4610      	mov	r0, r2
 80188c4:	4619      	mov	r1, r3
 80188c6:	f007 faaf 	bl	801fe28 <floor>
 80188ca:	4602      	mov	r2, r0
 80188cc:	460b      	mov	r3, r1
 80188ce:	4610      	mov	r0, r2
 80188d0:	4619      	mov	r1, r3
 80188d2:	f7e8 f8af 	bl	8000a34 <__aeabi_d2iz>
 80188d6:	4603      	mov	r3, r0
 80188d8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80188da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80188de:	4618      	mov	r0, r3
 80188e0:	3718      	adds	r7, #24
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bd80      	pop	{r7, pc}

080188e6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80188e6:	b590      	push	{r4, r7, lr}
 80188e8:	b087      	sub	sp, #28
 80188ea:	af00      	add	r7, sp, #0
 80188ec:	60f8      	str	r0, [r7, #12]
 80188ee:	60b9      	str	r1, [r7, #8]
 80188f0:	607a      	str	r2, [r7, #4]
 80188f2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80188f4:	2300      	movs	r3, #0
 80188f6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80188f8:	2300      	movs	r3, #0
 80188fa:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80188fc:	2300      	movs	r3, #0
 80188fe:	757b      	strb	r3, [r7, #21]
 8018900:	2300      	movs	r3, #0
 8018902:	753b      	strb	r3, [r7, #20]
 8018904:	e09c      	b.n	8018a40 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018906:	2300      	movs	r3, #0
 8018908:	74fb      	strb	r3, [r7, #19]
 801890a:	e08f      	b.n	8018a2c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801890c:	68fb      	ldr	r3, [r7, #12]
 801890e:	685a      	ldr	r2, [r3, #4]
 8018910:	7d3b      	ldrb	r3, [r7, #20]
 8018912:	005b      	lsls	r3, r3, #1
 8018914:	4413      	add	r3, r2
 8018916:	881b      	ldrh	r3, [r3, #0]
 8018918:	461a      	mov	r2, r3
 801891a:	7cfb      	ldrb	r3, [r7, #19]
 801891c:	fa42 f303 	asr.w	r3, r2, r3
 8018920:	f003 0301 	and.w	r3, r3, #1
 8018924:	2b00      	cmp	r3, #0
 8018926:	d07e      	beq.n	8018a26 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	689a      	ldr	r2, [r3, #8]
 801892c:	7d79      	ldrb	r1, [r7, #21]
 801892e:	7cfb      	ldrb	r3, [r7, #19]
 8018930:	440b      	add	r3, r1
 8018932:	4619      	mov	r1, r3
 8018934:	460b      	mov	r3, r1
 8018936:	005b      	lsls	r3, r3, #1
 8018938:	440b      	add	r3, r1
 801893a:	009b      	lsls	r3, r3, #2
 801893c:	4413      	add	r3, r2
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d06b      	beq.n	8018a1c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	781b      	ldrb	r3, [r3, #0]
 8018948:	f083 0301 	eor.w	r3, r3, #1
 801894c:	b2db      	uxtb	r3, r3
 801894e:	2b00      	cmp	r3, #0
 8018950:	d011      	beq.n	8018976 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018956:	2b00      	cmp	r3, #0
 8018958:	d00d      	beq.n	8018976 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801895a:	68fb      	ldr	r3, [r7, #12]
 801895c:	695a      	ldr	r2, [r3, #20]
 801895e:	7d3b      	ldrb	r3, [r7, #20]
 8018960:	005b      	lsls	r3, r3, #1
 8018962:	4413      	add	r3, r2
 8018964:	881b      	ldrh	r3, [r3, #0]
 8018966:	461a      	mov	r2, r3
 8018968:	7cfb      	ldrb	r3, [r7, #19]
 801896a:	fa42 f303 	asr.w	r3, r2, r3
 801896e:	f003 0301 	and.w	r3, r3, #1
 8018972:	2b00      	cmp	r3, #0
 8018974:	d054      	beq.n	8018a20 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	785b      	ldrb	r3, [r3, #1]
 801897a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801897c:	68fb      	ldr	r3, [r7, #12]
 801897e:	689a      	ldr	r2, [r3, #8]
 8018980:	7d79      	ldrb	r1, [r7, #21]
 8018982:	7cfb      	ldrb	r3, [r7, #19]
 8018984:	440b      	add	r3, r1
 8018986:	4619      	mov	r1, r3
 8018988:	460b      	mov	r3, r1
 801898a:	005b      	lsls	r3, r3, #1
 801898c:	440b      	add	r3, r1
 801898e:	009b      	lsls	r3, r3, #2
 8018990:	4413      	add	r3, r2
 8018992:	7a1b      	ldrb	r3, [r3, #8]
 8018994:	f343 0303 	sbfx	r3, r3, #0, #4
 8018998:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801899a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	689a      	ldr	r2, [r3, #8]
 80189a0:	7d79      	ldrb	r1, [r7, #21]
 80189a2:	7cfb      	ldrb	r3, [r7, #19]
 80189a4:	440b      	add	r3, r1
 80189a6:	4619      	mov	r1, r3
 80189a8:	460b      	mov	r3, r1
 80189aa:	005b      	lsls	r3, r3, #1
 80189ac:	440b      	add	r3, r1
 80189ae:	009b      	lsls	r3, r3, #2
 80189b0:	4413      	add	r3, r2
 80189b2:	7a1b      	ldrb	r3, [r3, #8]
 80189b4:	f343 1303 	sbfx	r3, r3, #4, #4
 80189b8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80189ba:	461a      	mov	r2, r3
 80189bc:	4621      	mov	r1, r4
 80189be:	f7ff fbe8 	bl	8018192 <RegionCommonValueInRange>
 80189c2:	4603      	mov	r3, r0
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d02d      	beq.n	8018a24 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	68da      	ldr	r2, [r3, #12]
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	6899      	ldr	r1, [r3, #8]
 80189d0:	7d78      	ldrb	r0, [r7, #21]
 80189d2:	7cfb      	ldrb	r3, [r7, #19]
 80189d4:	4403      	add	r3, r0
 80189d6:	4618      	mov	r0, r3
 80189d8:	4603      	mov	r3, r0
 80189da:	005b      	lsls	r3, r3, #1
 80189dc:	4403      	add	r3, r0
 80189de:	009b      	lsls	r3, r3, #2
 80189e0:	440b      	add	r3, r1
 80189e2:	7a5b      	ldrb	r3, [r3, #9]
 80189e4:	4619      	mov	r1, r3
 80189e6:	460b      	mov	r3, r1
 80189e8:	005b      	lsls	r3, r3, #1
 80189ea:	440b      	add	r3, r1
 80189ec:	00db      	lsls	r3, r3, #3
 80189ee:	4413      	add	r3, r2
 80189f0:	7d1b      	ldrb	r3, [r3, #20]
 80189f2:	f083 0301 	eor.w	r3, r3, #1
 80189f6:	b2db      	uxtb	r3, r3
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d003      	beq.n	8018a04 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80189fc:	7dbb      	ldrb	r3, [r7, #22]
 80189fe:	3301      	adds	r3, #1
 8018a00:	75bb      	strb	r3, [r7, #22]
                    continue;
 8018a02:	e010      	b.n	8018a26 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018a04:	7dfb      	ldrb	r3, [r7, #23]
 8018a06:	1c5a      	adds	r2, r3, #1
 8018a08:	75fa      	strb	r2, [r7, #23]
 8018a0a:	461a      	mov	r2, r3
 8018a0c:	68bb      	ldr	r3, [r7, #8]
 8018a0e:	4413      	add	r3, r2
 8018a10:	7d79      	ldrb	r1, [r7, #21]
 8018a12:	7cfa      	ldrb	r2, [r7, #19]
 8018a14:	440a      	add	r2, r1
 8018a16:	b2d2      	uxtb	r2, r2
 8018a18:	701a      	strb	r2, [r3, #0]
 8018a1a:	e004      	b.n	8018a26 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018a1c:	bf00      	nop
 8018a1e:	e002      	b.n	8018a26 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018a20:	bf00      	nop
 8018a22:	e000      	b.n	8018a26 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018a24:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018a26:	7cfb      	ldrb	r3, [r7, #19]
 8018a28:	3301      	adds	r3, #1
 8018a2a:	74fb      	strb	r3, [r7, #19]
 8018a2c:	7cfb      	ldrb	r3, [r7, #19]
 8018a2e:	2b0f      	cmp	r3, #15
 8018a30:	f67f af6c 	bls.w	801890c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018a34:	7d7b      	ldrb	r3, [r7, #21]
 8018a36:	3310      	adds	r3, #16
 8018a38:	757b      	strb	r3, [r7, #21]
 8018a3a:	7d3b      	ldrb	r3, [r7, #20]
 8018a3c:	3301      	adds	r3, #1
 8018a3e:	753b      	strb	r3, [r7, #20]
 8018a40:	7d7b      	ldrb	r3, [r7, #21]
 8018a42:	b29a      	uxth	r2, r3
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	8a1b      	ldrh	r3, [r3, #16]
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	f4ff af5c 	bcc.w	8018906 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	7dfa      	ldrb	r2, [r7, #23]
 8018a52:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018a54:	683b      	ldr	r3, [r7, #0]
 8018a56:	7dba      	ldrb	r2, [r7, #22]
 8018a58:	701a      	strb	r2, [r3, #0]
}
 8018a5a:	bf00      	nop
 8018a5c:	371c      	adds	r7, #28
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd90      	pop	{r4, r7, pc}

08018a62 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8018a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a64:	b08b      	sub	sp, #44	; 0x2c
 8018a66:	af04      	add	r7, sp, #16
 8018a68:	60f8      	str	r0, [r7, #12]
 8018a6a:	60b9      	str	r1, [r7, #8]
 8018a6c:	607a      	str	r2, [r7, #4]
 8018a6e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	685b      	ldr	r3, [r3, #4]
 8018a74:	4618      	mov	r0, r3
 8018a76:	f006 fe7f 	bl	801f778 <UTIL_TIMER_GetElapsedTime>
 8018a7a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	681a      	ldr	r2, [r3, #0]
 8018a80:	697b      	ldr	r3, [r7, #20]
 8018a82:	1ad2      	subs	r2, r2, r3
 8018a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a86:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a8a:	2201      	movs	r2, #1
 8018a8c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018a8e:	683b      	ldr	r3, [r7, #0]
 8018a90:	2200      	movs	r2, #0
 8018a92:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	685b      	ldr	r3, [r3, #4]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d004      	beq.n	8018aa6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018aa0:	697a      	ldr	r2, [r7, #20]
 8018aa2:	429a      	cmp	r2, r3
 8018aa4:	d32b      	bcc.n	8018afe <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018aa6:	68bb      	ldr	r3, [r7, #8]
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018aac:	68fb      	ldr	r3, [r7, #12]
 8018aae:	69db      	ldr	r3, [r3, #28]
 8018ab0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018ab6:	68dd      	ldr	r5, [r3, #12]
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	7a5e      	ldrb	r6, [r3, #9]
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	7d1b      	ldrb	r3, [r3, #20]
 8018ac6:	68fa      	ldr	r2, [r7, #12]
 8018ac8:	6992      	ldr	r2, [r2, #24]
 8018aca:	9203      	str	r2, [sp, #12]
 8018acc:	68fa      	ldr	r2, [r7, #12]
 8018ace:	f10d 0e04 	add.w	lr, sp, #4
 8018ad2:	320c      	adds	r2, #12
 8018ad4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ad8:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018adc:	9300      	str	r3, [sp, #0]
 8018ade:	4663      	mov	r3, ip
 8018ae0:	4632      	mov	r2, r6
 8018ae2:	4629      	mov	r1, r5
 8018ae4:	4620      	mov	r0, r4
 8018ae6:	f7ff fc25 	bl	8018334 <RegionCommonUpdateBandTimeOff>
 8018aea:	4602      	mov	r2, r0
 8018aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aee:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018af0:	68fb      	ldr	r3, [r7, #12]
 8018af2:	69d8      	ldr	r0, [r3, #28]
 8018af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018af6:	683a      	ldr	r2, [r7, #0]
 8018af8:	6879      	ldr	r1, [r7, #4]
 8018afa:	f7ff fef4 	bl	80188e6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	781b      	ldrb	r3, [r3, #0]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d004      	beq.n	8018b10 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b08:	2200      	movs	r2, #0
 8018b0a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	e006      	b.n	8018b1e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b12:	781b      	ldrb	r3, [r3, #0]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d001      	beq.n	8018b1c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018b18:	230b      	movs	r3, #11
 8018b1a:	e000      	b.n	8018b1e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018b1c:	230c      	movs	r3, #12
    }
}
 8018b1e:	4618      	mov	r0, r3
 8018b20:	371c      	adds	r7, #28
 8018b22:	46bd      	mov	sp, r7
 8018b24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b26 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018b26:	b5b0      	push	{r4, r5, r7, lr}
 8018b28:	b086      	sub	sp, #24
 8018b2a:	af02      	add	r7, sp, #8
 8018b2c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	781b      	ldrb	r3, [r3, #0]
 8018b32:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f993 2000 	ldrsb.w	r2, [r3]
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018b40:	429a      	cmp	r2, r3
 8018b42:	d103      	bne.n	8018b4c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018b4a:	e026      	b.n	8018b9a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018b4c:	7bfb      	ldrb	r3, [r7, #15]
 8018b4e:	3b01      	subs	r3, #1
 8018b50:	b2db      	uxtb	r3, r3
 8018b52:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018b5a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018b5e:	429a      	cmp	r2, r3
 8018b60:	d019      	beq.n	8018b96 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	78d8      	ldrb	r0, [r3, #3]
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	6859      	ldr	r1, [r3, #4]
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018b76:	687a      	ldr	r2, [r7, #4]
 8018b78:	6892      	ldr	r2, [r2, #8]
 8018b7a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018b7e:	9201      	str	r2, [sp, #4]
 8018b80:	9300      	str	r3, [sp, #0]
 8018b82:	462b      	mov	r3, r5
 8018b84:	4622      	mov	r2, r4
 8018b86:	f7ff fa92 	bl	80180ae <RegionCommonChanVerifyDr>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	f083 0301 	eor.w	r3, r3, #1
 8018b90:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d1da      	bne.n	8018b4c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	3710      	adds	r7, #16
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bdb0      	pop	{r4, r5, r7, pc}

08018ba2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018ba2:	b480      	push	{r7}
 8018ba4:	b083      	sub	sp, #12
 8018ba6:	af00      	add	r7, sp, #0
 8018ba8:	4603      	mov	r3, r0
 8018baa:	460a      	mov	r2, r1
 8018bac:	71fb      	strb	r3, [r7, #7]
 8018bae:	4613      	mov	r3, r2
 8018bb0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018bb2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018bba:	4293      	cmp	r3, r2
 8018bbc:	bfb8      	it	lt
 8018bbe:	4613      	movlt	r3, r2
 8018bc0:	b25b      	sxtb	r3, r3
}
 8018bc2:	4618      	mov	r0, r3
 8018bc4:	370c      	adds	r7, #12
 8018bc6:	46bd      	mov	sp, r7
 8018bc8:	bc80      	pop	{r7}
 8018bca:	4770      	bx	lr

08018bcc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018bcc:	b480      	push	{r7}
 8018bce:	b083      	sub	sp, #12
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
 8018bd4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	009b      	lsls	r3, r3, #2
 8018bda:	683a      	ldr	r2, [r7, #0]
 8018bdc:	4413      	add	r3, r2
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	4a07      	ldr	r2, [pc, #28]	; (8018c00 <RegionCommonGetBandwidth+0x34>)
 8018be2:	4293      	cmp	r3, r2
 8018be4:	d004      	beq.n	8018bf0 <RegionCommonGetBandwidth+0x24>
 8018be6:	4a07      	ldr	r2, [pc, #28]	; (8018c04 <RegionCommonGetBandwidth+0x38>)
 8018be8:	4293      	cmp	r3, r2
 8018bea:	d003      	beq.n	8018bf4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018bec:	2300      	movs	r3, #0
 8018bee:	e002      	b.n	8018bf6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018bf0:	2301      	movs	r3, #1
 8018bf2:	e000      	b.n	8018bf6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018bf4:	2302      	movs	r3, #2
    }
}
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	370c      	adds	r7, #12
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bc80      	pop	{r7}
 8018bfe:	4770      	bx	lr
 8018c00:	0003d090 	.word	0x0003d090
 8018c04:	0007a120 	.word	0x0007a120

08018c08 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018c08:	b580      	push	{r7, lr}
 8018c0a:	b086      	sub	sp, #24
 8018c0c:	af04      	add	r7, sp, #16
 8018c0e:	4603      	mov	r3, r0
 8018c10:	6039      	str	r1, [r7, #0]
 8018c12:	71fb      	strb	r3, [r7, #7]
 8018c14:	4613      	mov	r3, r2
 8018c16:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018c18:	79fb      	ldrb	r3, [r7, #7]
 8018c1a:	2b05      	cmp	r3, #5
 8018c1c:	d810      	bhi.n	8018c40 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8018c1e:	79fb      	ldrb	r3, [r7, #7]
 8018c20:	4a0f      	ldr	r2, [pc, #60]	; (8018c60 <RegionCommonRxConfigPrint+0x58>)
 8018c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018c26:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018c2a:	9202      	str	r2, [sp, #8]
 8018c2c:	683a      	ldr	r2, [r7, #0]
 8018c2e:	9201      	str	r2, [sp, #4]
 8018c30:	9300      	str	r3, [sp, #0]
 8018c32:	4b0c      	ldr	r3, [pc, #48]	; (8018c64 <RegionCommonRxConfigPrint+0x5c>)
 8018c34:	2201      	movs	r2, #1
 8018c36:	2100      	movs	r1, #0
 8018c38:	2002      	movs	r0, #2
 8018c3a:	f006 fe7b 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018c3e:	e00a      	b.n	8018c56 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018c40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c44:	9301      	str	r3, [sp, #4]
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	9300      	str	r3, [sp, #0]
 8018c4a:	4b07      	ldr	r3, [pc, #28]	; (8018c68 <RegionCommonRxConfigPrint+0x60>)
 8018c4c:	2201      	movs	r2, #1
 8018c4e:	2100      	movs	r1, #0
 8018c50:	2002      	movs	r0, #2
 8018c52:	f006 fe6f 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 8018c56:	bf00      	nop
 8018c58:	3708      	adds	r7, #8
 8018c5a:	46bd      	mov	sp, r7
 8018c5c:	bd80      	pop	{r7, pc}
 8018c5e:	bf00      	nop
 8018c60:	20000118 	.word	0x20000118
 8018c64:	08020780 	.word	0x08020780
 8018c68:	080207a0 	.word	0x080207a0

08018c6c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b084      	sub	sp, #16
 8018c70:	af02      	add	r7, sp, #8
 8018c72:	6078      	str	r0, [r7, #4]
 8018c74:	460b      	mov	r3, r1
 8018c76:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c7c:	9301      	str	r3, [sp, #4]
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	9300      	str	r3, [sp, #0]
 8018c82:	4b05      	ldr	r3, [pc, #20]	; (8018c98 <RegionCommonTxConfigPrint+0x2c>)
 8018c84:	2201      	movs	r2, #1
 8018c86:	2100      	movs	r1, #0
 8018c88:	2002      	movs	r0, #2
 8018c8a:	f006 fe53 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
}
 8018c8e:	bf00      	nop
 8018c90:	3708      	adds	r7, #8
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}
 8018c96:	bf00      	nop
 8018c98:	080207bc 	.word	0x080207bc

08018c9c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018c9c:	b580      	push	{r7, lr}
 8018c9e:	b082      	sub	sp, #8
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
 8018ca4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018ca6:	4b2d      	ldr	r3, [pc, #180]	; (8018d5c <VerifyRfFreq+0xc0>)
 8018ca8:	6a1b      	ldr	r3, [r3, #32]
 8018caa:	6878      	ldr	r0, [r7, #4]
 8018cac:	4798      	blx	r3
 8018cae:	4603      	mov	r3, r0
 8018cb0:	f083 0301 	eor.w	r3, r3, #1
 8018cb4:	b2db      	uxtb	r3, r3
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d001      	beq.n	8018cbe <VerifyRfFreq+0x22>
    {
        return false;
 8018cba:	2300      	movs	r3, #0
 8018cbc:	e04a      	b.n	8018d54 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	4a27      	ldr	r2, [pc, #156]	; (8018d60 <VerifyRfFreq+0xc4>)
 8018cc2:	4293      	cmp	r3, r2
 8018cc4:	d307      	bcc.n	8018cd6 <VerifyRfFreq+0x3a>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	4a26      	ldr	r2, [pc, #152]	; (8018d64 <VerifyRfFreq+0xc8>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d803      	bhi.n	8018cd6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8018cce:	683b      	ldr	r3, [r7, #0]
 8018cd0:	2202      	movs	r2, #2
 8018cd2:	701a      	strb	r2, [r3, #0]
 8018cd4:	e03d      	b.n	8018d52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	4a22      	ldr	r2, [pc, #136]	; (8018d64 <VerifyRfFreq+0xc8>)
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	d907      	bls.n	8018cee <VerifyRfFreq+0x52>
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	4a21      	ldr	r2, [pc, #132]	; (8018d68 <VerifyRfFreq+0xcc>)
 8018ce2:	4293      	cmp	r3, r2
 8018ce4:	d803      	bhi.n	8018cee <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	2200      	movs	r2, #0
 8018cea:	701a      	strb	r2, [r3, #0]
 8018cec:	e031      	b.n	8018d52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	4a1d      	ldr	r2, [pc, #116]	; (8018d68 <VerifyRfFreq+0xcc>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d907      	bls.n	8018d06 <VerifyRfFreq+0x6a>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	4a1c      	ldr	r2, [pc, #112]	; (8018d6c <VerifyRfFreq+0xd0>)
 8018cfa:	4293      	cmp	r3, r2
 8018cfc:	d803      	bhi.n	8018d06 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	2201      	movs	r2, #1
 8018d02:	701a      	strb	r2, [r3, #0]
 8018d04:	e025      	b.n	8018d52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	4a19      	ldr	r2, [pc, #100]	; (8018d70 <VerifyRfFreq+0xd4>)
 8018d0a:	4293      	cmp	r3, r2
 8018d0c:	d907      	bls.n	8018d1e <VerifyRfFreq+0x82>
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	4a18      	ldr	r2, [pc, #96]	; (8018d74 <VerifyRfFreq+0xd8>)
 8018d12:	4293      	cmp	r3, r2
 8018d14:	d803      	bhi.n	8018d1e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	2205      	movs	r2, #5
 8018d1a:	701a      	strb	r2, [r3, #0]
 8018d1c:	e019      	b.n	8018d52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	4a15      	ldr	r2, [pc, #84]	; (8018d78 <VerifyRfFreq+0xdc>)
 8018d22:	4293      	cmp	r3, r2
 8018d24:	d907      	bls.n	8018d36 <VerifyRfFreq+0x9a>
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	4a14      	ldr	r2, [pc, #80]	; (8018d7c <VerifyRfFreq+0xe0>)
 8018d2a:	4293      	cmp	r3, r2
 8018d2c:	d803      	bhi.n	8018d36 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	2203      	movs	r2, #3
 8018d32:	701a      	strb	r2, [r3, #0]
 8018d34:	e00d      	b.n	8018d52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	4a11      	ldr	r2, [pc, #68]	; (8018d80 <VerifyRfFreq+0xe4>)
 8018d3a:	4293      	cmp	r3, r2
 8018d3c:	d307      	bcc.n	8018d4e <VerifyRfFreq+0xb2>
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	4a10      	ldr	r2, [pc, #64]	; (8018d84 <VerifyRfFreq+0xe8>)
 8018d42:	4293      	cmp	r3, r2
 8018d44:	d803      	bhi.n	8018d4e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018d46:	683b      	ldr	r3, [r7, #0]
 8018d48:	2204      	movs	r2, #4
 8018d4a:	701a      	strb	r2, [r3, #0]
 8018d4c:	e001      	b.n	8018d52 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	e000      	b.n	8018d54 <VerifyRfFreq+0xb8>
    }
    return true;
 8018d52:	2301      	movs	r3, #1
}
 8018d54:	4618      	mov	r0, r3
 8018d56:	3708      	adds	r7, #8
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	bd80      	pop	{r7, pc}
 8018d5c:	08020e4c 	.word	0x08020e4c
 8018d60:	337055c0 	.word	0x337055c0
 8018d64:	338eda3f 	.word	0x338eda3f
 8018d68:	33bca100 	.word	0x33bca100
 8018d6c:	33c5c8c0 	.word	0x33c5c8c0
 8018d70:	33c74f5f 	.word	0x33c74f5f
 8018d74:	33cef080 	.word	0x33cef080
 8018d78:	33d1fdbf 	.word	0x33d1fdbf
 8018d7c:	33d5ce50 	.word	0x33d5ce50
 8018d80:	33d691a0 	.word	0x33d691a0
 8018d84:	33db2580 	.word	0x33db2580

08018d88 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018d88:	b590      	push	{r4, r7, lr}
 8018d8a:	b08b      	sub	sp, #44	; 0x2c
 8018d8c:	af04      	add	r7, sp, #16
 8018d8e:	4603      	mov	r3, r0
 8018d90:	460a      	mov	r2, r1
 8018d92:	71fb      	strb	r3, [r7, #7]
 8018d94:	4613      	mov	r3, r2
 8018d96:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d9c:	4a1f      	ldr	r2, [pc, #124]	; (8018e1c <GetTimeOnAir+0x94>)
 8018d9e:	5cd3      	ldrb	r3, [r2, r3]
 8018da0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018da6:	491e      	ldr	r1, [pc, #120]	; (8018e20 <GetTimeOnAir+0x98>)
 8018da8:	4618      	mov	r0, r3
 8018daa:	f7ff ff0f 	bl	8018bcc <RegionCommonGetBandwidth>
 8018dae:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018db0:	2300      	movs	r3, #0
 8018db2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018db8:	2b07      	cmp	r3, #7
 8018dba:	d118      	bne.n	8018dee <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018dbc:	4b19      	ldr	r3, [pc, #100]	; (8018e24 <GetTimeOnAir+0x9c>)
 8018dbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018dc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018dc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018dc8:	fb02 f303 	mul.w	r3, r2, r3
 8018dcc:	4619      	mov	r1, r3
 8018dce:	88bb      	ldrh	r3, [r7, #4]
 8018dd0:	b2db      	uxtb	r3, r3
 8018dd2:	2201      	movs	r2, #1
 8018dd4:	9203      	str	r2, [sp, #12]
 8018dd6:	9302      	str	r3, [sp, #8]
 8018dd8:	2300      	movs	r3, #0
 8018dda:	9301      	str	r3, [sp, #4]
 8018ddc:	2305      	movs	r3, #5
 8018dde:	9300      	str	r3, [sp, #0]
 8018de0:	2300      	movs	r3, #0
 8018de2:	460a      	mov	r2, r1
 8018de4:	68f9      	ldr	r1, [r7, #12]
 8018de6:	2000      	movs	r0, #0
 8018de8:	47a0      	blx	r4
 8018dea:	6178      	str	r0, [r7, #20]
 8018dec:	e011      	b.n	8018e12 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018dee:	4b0d      	ldr	r3, [pc, #52]	; (8018e24 <GetTimeOnAir+0x9c>)
 8018df0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018df2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018df6:	88bb      	ldrh	r3, [r7, #4]
 8018df8:	b2db      	uxtb	r3, r3
 8018dfa:	2101      	movs	r1, #1
 8018dfc:	9103      	str	r1, [sp, #12]
 8018dfe:	9302      	str	r3, [sp, #8]
 8018e00:	2300      	movs	r3, #0
 8018e02:	9301      	str	r3, [sp, #4]
 8018e04:	2308      	movs	r3, #8
 8018e06:	9300      	str	r3, [sp, #0]
 8018e08:	2301      	movs	r3, #1
 8018e0a:	68f9      	ldr	r1, [r7, #12]
 8018e0c:	2001      	movs	r0, #1
 8018e0e:	47a0      	blx	r4
 8018e10:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018e12:	697b      	ldr	r3, [r7, #20]
}
 8018e14:	4618      	mov	r0, r3
 8018e16:	371c      	adds	r7, #28
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd90      	pop	{r4, r7, pc}
 8018e1c:	08020d90 	.word	0x08020d90
 8018e20:	08020d98 	.word	0x08020d98
 8018e24:	08020e4c 	.word	0x08020e4c

08018e28 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b088      	sub	sp, #32
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018e30:	2300      	movs	r3, #0
 8018e32:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	781b      	ldrb	r3, [r3, #0]
 8018e38:	3b01      	subs	r3, #1
 8018e3a:	2b37      	cmp	r3, #55	; 0x37
 8018e3c:	f200 8122 	bhi.w	8019084 <RegionEU868GetPhyParam+0x25c>
 8018e40:	a201      	add	r2, pc, #4	; (adr r2, 8018e48 <RegionEU868GetPhyParam+0x20>)
 8018e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e46:	bf00      	nop
 8018e48:	08018f29 	.word	0x08018f29
 8018e4c:	08018f2f 	.word	0x08018f2f
 8018e50:	08019085 	.word	0x08019085
 8018e54:	08019085 	.word	0x08019085
 8018e58:	08019085 	.word	0x08019085
 8018e5c:	08018f35 	.word	0x08018f35
 8018e60:	08019085 	.word	0x08019085
 8018e64:	08018f6f 	.word	0x08018f6f
 8018e68:	08019085 	.word	0x08019085
 8018e6c:	08018f75 	.word	0x08018f75
 8018e70:	08018f7b 	.word	0x08018f7b
 8018e74:	08018f81 	.word	0x08018f81
 8018e78:	08018f87 	.word	0x08018f87
 8018e7c:	08018f97 	.word	0x08018f97
 8018e80:	08018fa7 	.word	0x08018fa7
 8018e84:	08018fad 	.word	0x08018fad
 8018e88:	08018fb5 	.word	0x08018fb5
 8018e8c:	08018fbd 	.word	0x08018fbd
 8018e90:	08018fc5 	.word	0x08018fc5
 8018e94:	08018fcd 	.word	0x08018fcd
 8018e98:	08018fd5 	.word	0x08018fd5
 8018e9c:	08018fe9 	.word	0x08018fe9
 8018ea0:	08018fef 	.word	0x08018fef
 8018ea4:	08018ff5 	.word	0x08018ff5
 8018ea8:	08018ffb 	.word	0x08018ffb
 8018eac:	08019007 	.word	0x08019007
 8018eb0:	08019013 	.word	0x08019013
 8018eb4:	08019019 	.word	0x08019019
 8018eb8:	08019021 	.word	0x08019021
 8018ebc:	08019027 	.word	0x08019027
 8018ec0:	0801902d 	.word	0x0801902d
 8018ec4:	08019035 	.word	0x08019035
 8018ec8:	08018f3b 	.word	0x08018f3b
 8018ecc:	08019085 	.word	0x08019085
 8018ed0:	08019085 	.word	0x08019085
 8018ed4:	08019085 	.word	0x08019085
 8018ed8:	08019085 	.word	0x08019085
 8018edc:	08019085 	.word	0x08019085
 8018ee0:	08019085 	.word	0x08019085
 8018ee4:	08019085 	.word	0x08019085
 8018ee8:	08019085 	.word	0x08019085
 8018eec:	08019085 	.word	0x08019085
 8018ef0:	08019085 	.word	0x08019085
 8018ef4:	08019085 	.word	0x08019085
 8018ef8:	08019085 	.word	0x08019085
 8018efc:	08019085 	.word	0x08019085
 8018f00:	0801903b 	.word	0x0801903b
 8018f04:	08019041 	.word	0x08019041
 8018f08:	0801904f 	.word	0x0801904f
 8018f0c:	08019085 	.word	0x08019085
 8018f10:	08019085 	.word	0x08019085
 8018f14:	08019055 	.word	0x08019055
 8018f18:	0801905b 	.word	0x0801905b
 8018f1c:	08019085 	.word	0x08019085
 8018f20:	08019061 	.word	0x08019061
 8018f24:	08019071 	.word	0x08019071
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	61bb      	str	r3, [r7, #24]
            break;
 8018f2c:	e0ab      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018f2e:	2300      	movs	r3, #0
 8018f30:	61bb      	str	r3, [r7, #24]
            break;
 8018f32:	e0a8      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018f34:	2300      	movs	r3, #0
 8018f36:	61bb      	str	r3, [r7, #24]
            break;
 8018f38:	e0a5      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f40:	733b      	strb	r3, [r7, #12]
 8018f42:	2307      	movs	r3, #7
 8018f44:	737b      	strb	r3, [r7, #13]
 8018f46:	2300      	movs	r3, #0
 8018f48:	73bb      	strb	r3, [r7, #14]
 8018f4a:	2310      	movs	r3, #16
 8018f4c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018f4e:	4b51      	ldr	r3, [pc, #324]	; (8019094 <RegionEU868GetPhyParam+0x26c>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f56:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018f58:	4b4e      	ldr	r3, [pc, #312]	; (8019094 <RegionEU868GetPhyParam+0x26c>)
 8018f5a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f5c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018f5e:	f107 030c 	add.w	r3, r7, #12
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7ff fddf 	bl	8018b26 <RegionCommonGetNextLowerTxDr>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	61bb      	str	r3, [r7, #24]
            break;
 8018f6c:	e08b      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	61bb      	str	r3, [r7, #24]
            break;
 8018f72:	e088      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018f74:	2300      	movs	r3, #0
 8018f76:	61bb      	str	r3, [r7, #24]
            break;
 8018f78:	e085      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018f7a:	2340      	movs	r3, #64	; 0x40
 8018f7c:	61bb      	str	r3, [r7, #24]
            break;
 8018f7e:	e082      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018f80:	2320      	movs	r3, #32
 8018f82:	61bb      	str	r3, [r7, #24]
            break;
 8018f84:	e07f      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f8c:	461a      	mov	r2, r3
 8018f8e:	4b42      	ldr	r3, [pc, #264]	; (8019098 <RegionEU868GetPhyParam+0x270>)
 8018f90:	5c9b      	ldrb	r3, [r3, r2]
 8018f92:	61bb      	str	r3, [r7, #24]
            break;
 8018f94:	e077      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f9c:	461a      	mov	r2, r3
 8018f9e:	4b3f      	ldr	r3, [pc, #252]	; (801909c <RegionEU868GetPhyParam+0x274>)
 8018fa0:	5c9b      	ldrb	r3, [r3, r2]
 8018fa2:	61bb      	str	r3, [r7, #24]
            break;
 8018fa4:	e06f      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018fa6:	2301      	movs	r3, #1
 8018fa8:	61bb      	str	r3, [r7, #24]
            break;
 8018faa:	e06c      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018fac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018fb0:	61bb      	str	r3, [r7, #24]
            break;
 8018fb2:	e068      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018fb8:	61bb      	str	r3, [r7, #24]
            break;
 8018fba:	e064      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018fbc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018fc0:	61bb      	str	r3, [r7, #24]
            break;
 8018fc2:	e060      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018fc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8018fc8:	61bb      	str	r3, [r7, #24]
            break;
 8018fca:	e05c      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018fcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8018fd0:	61bb      	str	r3, [r7, #24]
            break;
 8018fd2:	e058      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8018fd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018fd8:	4831      	ldr	r0, [pc, #196]	; (80190a0 <RegionEU868GetPhyParam+0x278>)
 8018fda:	f002 fa2d 	bl	801b438 <randr>
 8018fde:	4603      	mov	r3, r0
 8018fe0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018fe4:	61bb      	str	r3, [r7, #24]
            break;
 8018fe6:	e04e      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018fe8:	2300      	movs	r3, #0
 8018fea:	61bb      	str	r3, [r7, #24]
            break;
 8018fec:	e04b      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018fee:	4b2d      	ldr	r3, [pc, #180]	; (80190a4 <RegionEU868GetPhyParam+0x27c>)
 8018ff0:	61bb      	str	r3, [r7, #24]
            break;
 8018ff2:	e048      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	61bb      	str	r3, [r7, #24]
            break;
 8018ff8:	e045      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018ffa:	4b26      	ldr	r3, [pc, #152]	; (8019094 <RegionEU868GetPhyParam+0x26c>)
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019002:	61bb      	str	r3, [r7, #24]
            break;
 8019004:	e03f      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8019006:	4b23      	ldr	r3, [pc, #140]	; (8019094 <RegionEU868GetPhyParam+0x26c>)
 8019008:	681b      	ldr	r3, [r3, #0]
 801900a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801900e:	61bb      	str	r3, [r7, #24]
            break;
 8019010:	e039      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8019012:	2310      	movs	r3, #16
 8019014:	61bb      	str	r3, [r7, #24]
            break;
 8019016:	e036      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8019018:	4b1e      	ldr	r3, [pc, #120]	; (8019094 <RegionEU868GetPhyParam+0x26c>)
 801901a:	681b      	ldr	r3, [r3, #0]
 801901c:	61bb      	str	r3, [r7, #24]
            break;
 801901e:	e032      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8019020:	2300      	movs	r3, #0
 8019022:	61bb      	str	r3, [r7, #24]
            break;
 8019024:	e02f      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8019026:	2300      	movs	r3, #0
 8019028:	61bb      	str	r3, [r7, #24]
            break;
 801902a:	e02c      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801902c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8019030:	61bb      	str	r3, [r7, #24]
            break;
 8019032:	e028      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8019034:	4b1c      	ldr	r3, [pc, #112]	; (80190a8 <RegionEU868GetPhyParam+0x280>)
 8019036:	61bb      	str	r3, [r7, #24]
            break;
 8019038:	e025      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801903a:	4b1a      	ldr	r3, [pc, #104]	; (80190a4 <RegionEU868GetPhyParam+0x27c>)
 801903c:	61bb      	str	r3, [r7, #24]
            break;
 801903e:	e022      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8019040:	2311      	movs	r3, #17
 8019042:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8019044:	2301      	movs	r3, #1
 8019046:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8019048:	2300      	movs	r3, #0
 801904a:	76bb      	strb	r3, [r7, #26]
            break;
 801904c:	e01b      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801904e:	2303      	movs	r3, #3
 8019050:	61bb      	str	r3, [r7, #24]
            break;
 8019052:	e018      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8019054:	4b13      	ldr	r3, [pc, #76]	; (80190a4 <RegionEU868GetPhyParam+0x27c>)
 8019056:	61bb      	str	r3, [r7, #24]
            break;
 8019058:	e015      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801905a:	2303      	movs	r3, #3
 801905c:	61bb      	str	r3, [r7, #24]
            break;
 801905e:	e012      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019066:	461a      	mov	r2, r3
 8019068:	4b10      	ldr	r3, [pc, #64]	; (80190ac <RegionEU868GetPhyParam+0x284>)
 801906a:	5c9b      	ldrb	r3, [r3, r2]
 801906c:	61bb      	str	r3, [r7, #24]
            break;
 801906e:	e00a      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019076:	490e      	ldr	r1, [pc, #56]	; (80190b0 <RegionEU868GetPhyParam+0x288>)
 8019078:	4618      	mov	r0, r3
 801907a:	f7ff fda7 	bl	8018bcc <RegionCommonGetBandwidth>
 801907e:	4603      	mov	r3, r0
 8019080:	61bb      	str	r3, [r7, #24]
            break;
 8019082:	e000      	b.n	8019086 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8019084:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8019086:	69bb      	ldr	r3, [r7, #24]
 8019088:	61fb      	str	r3, [r7, #28]
 801908a:	69fb      	ldr	r3, [r7, #28]
}
 801908c:	4618      	mov	r0, r3
 801908e:	3720      	adds	r7, #32
 8019090:	46bd      	mov	sp, r7
 8019092:	bd80      	pop	{r7, pc}
 8019094:	20001a64 	.word	0x20001a64
 8019098:	08020db8 	.word	0x08020db8
 801909c:	08020dc0 	.word	0x08020dc0
 80190a0:	fffffc18 	.word	0xfffffc18
 80190a4:	33d3e608 	.word	0x33d3e608
 80190a8:	4009999a 	.word	0x4009999a
 80190ac:	08020d90 	.word	0x08020d90
 80190b0:	08020d98 	.word	0x08020d98

080190b4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80190b4:	b590      	push	{r4, r7, lr}
 80190b6:	b085      	sub	sp, #20
 80190b8:	af02      	add	r7, sp, #8
 80190ba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80190bc:	4b11      	ldr	r3, [pc, #68]	; (8019104 <RegionEU868SetBandTxDone+0x50>)
 80190be:	681a      	ldr	r2, [r3, #0]
 80190c0:	4b11      	ldr	r3, [pc, #68]	; (8019108 <RegionEU868SetBandTxDone+0x54>)
 80190c2:	6819      	ldr	r1, [r3, #0]
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	4618      	mov	r0, r3
 80190ca:	4603      	mov	r3, r0
 80190cc:	005b      	lsls	r3, r3, #1
 80190ce:	4403      	add	r3, r0
 80190d0:	009b      	lsls	r3, r3, #2
 80190d2:	440b      	add	r3, r1
 80190d4:	3309      	adds	r3, #9
 80190d6:	781b      	ldrb	r3, [r3, #0]
 80190d8:	4619      	mov	r1, r3
 80190da:	460b      	mov	r3, r1
 80190dc:	005b      	lsls	r3, r3, #1
 80190de:	440b      	add	r3, r1
 80190e0:	00db      	lsls	r3, r3, #3
 80190e2:	18d0      	adds	r0, r2, r3
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	6899      	ldr	r1, [r3, #8]
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	785c      	ldrb	r4, [r3, #1]
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	691a      	ldr	r2, [r3, #16]
 80190f0:	9200      	str	r2, [sp, #0]
 80190f2:	68db      	ldr	r3, [r3, #12]
 80190f4:	4622      	mov	r2, r4
 80190f6:	f7ff f8ef 	bl	80182d8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80190fa:	bf00      	nop
 80190fc:	370c      	adds	r7, #12
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd90      	pop	{r4, r7, pc}
 8019102:	bf00      	nop
 8019104:	20001a68 	.word	0x20001a68
 8019108:	20001a64 	.word	0x20001a64

0801910c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b0b0      	sub	sp, #192	; 0xc0
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8019114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019118:	2290      	movs	r2, #144	; 0x90
 801911a:	2100      	movs	r1, #0
 801911c:	4618      	mov	r0, r3
 801911e:	f006 ff03 	bl	801ff28 <memset>
 8019122:	2364      	movs	r3, #100	; 0x64
 8019124:	863b      	strh	r3, [r7, #48]	; 0x30
 8019126:	2364      	movs	r3, #100	; 0x64
 8019128:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801912c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019130:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8019134:	230a      	movs	r3, #10
 8019136:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801913a:	2364      	movs	r3, #100	; 0x64
 801913c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8019140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019144:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	7b1b      	ldrb	r3, [r3, #12]
 801914c:	2b02      	cmp	r3, #2
 801914e:	d05d      	beq.n	801920c <RegionEU868InitDefaults+0x100>
 8019150:	2b02      	cmp	r3, #2
 8019152:	dc6a      	bgt.n	801922a <RegionEU868InitDefaults+0x11e>
 8019154:	2b00      	cmp	r3, #0
 8019156:	d002      	beq.n	801915e <RegionEU868InitDefaults+0x52>
 8019158:	2b01      	cmp	r3, #1
 801915a:	d03e      	beq.n	80191da <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 801915c:	e065      	b.n	801922a <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	2b00      	cmp	r3, #0
 8019164:	d062      	beq.n	801922c <RegionEU868InitDefaults+0x120>
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d05e      	beq.n	801922c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	4a30      	ldr	r2, [pc, #192]	; (8019234 <RegionEU868InitDefaults+0x128>)
 8019174:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	689b      	ldr	r3, [r3, #8]
 801917a:	4a2f      	ldr	r2, [pc, #188]	; (8019238 <RegionEU868InitDefaults+0x12c>)
 801917c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801917e:	4b2e      	ldr	r3, [pc, #184]	; (8019238 <RegionEU868InitDefaults+0x12c>)
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8019186:	2290      	movs	r2, #144	; 0x90
 8019188:	4618      	mov	r0, r3
 801918a:	f002 f96c 	bl	801b466 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801918e:	4b29      	ldr	r3, [pc, #164]	; (8019234 <RegionEU868InitDefaults+0x128>)
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	4a2a      	ldr	r2, [pc, #168]	; (801923c <RegionEU868InitDefaults+0x130>)
 8019194:	ca07      	ldmia	r2, {r0, r1, r2}
 8019196:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 801919a:	4b26      	ldr	r3, [pc, #152]	; (8019234 <RegionEU868InitDefaults+0x128>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	4a28      	ldr	r2, [pc, #160]	; (8019240 <RegionEU868InitDefaults+0x134>)
 80191a0:	330c      	adds	r3, #12
 80191a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80191a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80191a8:	4b22      	ldr	r3, [pc, #136]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	4a25      	ldr	r2, [pc, #148]	; (8019244 <RegionEU868InitDefaults+0x138>)
 80191ae:	3318      	adds	r3, #24
 80191b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80191b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80191b6:	4b1f      	ldr	r3, [pc, #124]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	2207      	movs	r2, #7
 80191bc:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80191c0:	4b1c      	ldr	r3, [pc, #112]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80191c8:	4b1a      	ldr	r3, [pc, #104]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80191d0:	2201      	movs	r2, #1
 80191d2:	4619      	mov	r1, r3
 80191d4:	f7ff f85a 	bl	801828c <RegionCommonChanMaskCopy>
 80191d8:	e028      	b.n	801922c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80191da:	4b16      	ldr	r3, [pc, #88]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	2200      	movs	r2, #0
 80191e0:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80191e2:	4b14      	ldr	r3, [pc, #80]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	2200      	movs	r2, #0
 80191e8:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80191ea:	4b12      	ldr	r3, [pc, #72]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	2200      	movs	r2, #0
 80191f0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80191f2:	4b10      	ldr	r3, [pc, #64]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80191fa:	4b0e      	ldr	r3, [pc, #56]	; (8019234 <RegionEU868InitDefaults+0x128>)
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8019202:	2201      	movs	r2, #1
 8019204:	4619      	mov	r1, r3
 8019206:	f7ff f841 	bl	801828c <RegionCommonChanMaskCopy>
            break;
 801920a:	e00f      	b.n	801922c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801920c:	4b09      	ldr	r3, [pc, #36]	; (8019234 <RegionEU868InitDefaults+0x128>)
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8019214:	4b07      	ldr	r3, [pc, #28]	; (8019234 <RegionEU868InitDefaults+0x128>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 801921c:	4b05      	ldr	r3, [pc, #20]	; (8019234 <RegionEU868InitDefaults+0x128>)
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	430a      	orrs	r2, r1
 8019222:	b292      	uxth	r2, r2
 8019224:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8019228:	e000      	b.n	801922c <RegionEU868InitDefaults+0x120>
            break;
 801922a:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801922c:	37c0      	adds	r7, #192	; 0xc0
 801922e:	46bd      	mov	sp, r7
 8019230:	bd80      	pop	{r7, pc}
 8019232:	bf00      	nop
 8019234:	20001a64 	.word	0x20001a64
 8019238:	20001a68 	.word	0x20001a68
 801923c:	080207d8 	.word	0x080207d8
 8019240:	080207e4 	.word	0x080207e4
 8019244:	080207f0 	.word	0x080207f0

08019248 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b084      	sub	sp, #16
 801924c:	af00      	add	r7, sp, #0
 801924e:	6078      	str	r0, [r7, #4]
 8019250:	460b      	mov	r3, r1
 8019252:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8019254:	78fb      	ldrb	r3, [r7, #3]
 8019256:	2b0f      	cmp	r3, #15
 8019258:	d86c      	bhi.n	8019334 <RegionEU868Verify+0xec>
 801925a:	a201      	add	r2, pc, #4	; (adr r2, 8019260 <RegionEU868Verify+0x18>)
 801925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019260:	080192a1 	.word	0x080192a1
 8019264:	08019335 	.word	0x08019335
 8019268:	08019335 	.word	0x08019335
 801926c:	08019335 	.word	0x08019335
 8019270:	08019335 	.word	0x08019335
 8019274:	080192b9 	.word	0x080192b9
 8019278:	080192d7 	.word	0x080192d7
 801927c:	080192f5 	.word	0x080192f5
 8019280:	08019335 	.word	0x08019335
 8019284:	08019313 	.word	0x08019313
 8019288:	08019313 	.word	0x08019313
 801928c:	08019335 	.word	0x08019335
 8019290:	08019335 	.word	0x08019335
 8019294:	08019335 	.word	0x08019335
 8019298:	08019335 	.word	0x08019335
 801929c:	08019331 	.word	0x08019331
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80192a0:	2300      	movs	r3, #0
 80192a2:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	f107 020f 	add.w	r2, r7, #15
 80192ac:	4611      	mov	r1, r2
 80192ae:	4618      	mov	r0, r3
 80192b0:	f7ff fcf4 	bl	8018c9c <VerifyRfFreq>
 80192b4:	4603      	mov	r3, r0
 80192b6:	e03e      	b.n	8019336 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	f993 3000 	ldrsb.w	r3, [r3]
 80192be:	2207      	movs	r2, #7
 80192c0:	2100      	movs	r1, #0
 80192c2:	4618      	mov	r0, r3
 80192c4:	f7fe ff65 	bl	8018192 <RegionCommonValueInRange>
 80192c8:	4603      	mov	r3, r0
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	bf14      	ite	ne
 80192ce:	2301      	movne	r3, #1
 80192d0:	2300      	moveq	r3, #0
 80192d2:	b2db      	uxtb	r3, r3
 80192d4:	e02f      	b.n	8019336 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	f993 3000 	ldrsb.w	r3, [r3]
 80192dc:	2205      	movs	r2, #5
 80192de:	2100      	movs	r1, #0
 80192e0:	4618      	mov	r0, r3
 80192e2:	f7fe ff56 	bl	8018192 <RegionCommonValueInRange>
 80192e6:	4603      	mov	r3, r0
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	bf14      	ite	ne
 80192ec:	2301      	movne	r3, #1
 80192ee:	2300      	moveq	r3, #0
 80192f0:	b2db      	uxtb	r3, r3
 80192f2:	e020      	b.n	8019336 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	f993 3000 	ldrsb.w	r3, [r3]
 80192fa:	2207      	movs	r2, #7
 80192fc:	2100      	movs	r1, #0
 80192fe:	4618      	mov	r0, r3
 8019300:	f7fe ff47 	bl	8018192 <RegionCommonValueInRange>
 8019304:	4603      	mov	r3, r0
 8019306:	2b00      	cmp	r3, #0
 8019308:	bf14      	ite	ne
 801930a:	2301      	movne	r3, #1
 801930c:	2300      	moveq	r3, #0
 801930e:	b2db      	uxtb	r3, r3
 8019310:	e011      	b.n	8019336 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	f993 3000 	ldrsb.w	r3, [r3]
 8019318:	2207      	movs	r2, #7
 801931a:	2100      	movs	r1, #0
 801931c:	4618      	mov	r0, r3
 801931e:	f7fe ff38 	bl	8018192 <RegionCommonValueInRange>
 8019322:	4603      	mov	r3, r0
 8019324:	2b00      	cmp	r3, #0
 8019326:	bf14      	ite	ne
 8019328:	2301      	movne	r3, #1
 801932a:	2300      	moveq	r3, #0
 801932c:	b2db      	uxtb	r3, r3
 801932e:	e002      	b.n	8019336 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8019330:	2301      	movs	r3, #1
 8019332:	e000      	b.n	8019336 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8019334:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8019336:	4618      	mov	r0, r3
 8019338:	3710      	adds	r7, #16
 801933a:	46bd      	mov	sp, r7
 801933c:	bd80      	pop	{r7, pc}
 801933e:	bf00      	nop

08019340 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019340:	b580      	push	{r7, lr}
 8019342:	b08a      	sub	sp, #40	; 0x28
 8019344:	af00      	add	r7, sp, #0
 8019346:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8019348:	2350      	movs	r3, #80	; 0x50
 801934a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	7a1b      	ldrb	r3, [r3, #8]
 8019352:	2b10      	cmp	r3, #16
 8019354:	d162      	bne.n	801941c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	685b      	ldr	r3, [r3, #4]
 801935a:	330f      	adds	r3, #15
 801935c:	781b      	ldrb	r3, [r3, #0]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d15e      	bne.n	8019420 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019362:	2300      	movs	r3, #0
 8019364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019368:	2303      	movs	r3, #3
 801936a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801936e:	e050      	b.n	8019412 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8019370:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019374:	2b07      	cmp	r3, #7
 8019376:	d824      	bhi.n	80193c2 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	685a      	ldr	r2, [r3, #4]
 801937c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019380:	4413      	add	r3, r2
 8019382:	781b      	ldrb	r3, [r3, #0]
 8019384:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8019386:	69ba      	ldr	r2, [r7, #24]
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	6859      	ldr	r1, [r3, #4]
 801938c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019390:	3301      	adds	r3, #1
 8019392:	440b      	add	r3, r1
 8019394:	781b      	ldrb	r3, [r3, #0]
 8019396:	021b      	lsls	r3, r3, #8
 8019398:	4313      	orrs	r3, r2
 801939a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801939c:	69ba      	ldr	r2, [r7, #24]
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	6859      	ldr	r1, [r3, #4]
 80193a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193a6:	3302      	adds	r3, #2
 80193a8:	440b      	add	r3, r1
 80193aa:	781b      	ldrb	r3, [r3, #0]
 80193ac:	041b      	lsls	r3, r3, #16
 80193ae:	4313      	orrs	r3, r2
 80193b0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80193b2:	69bb      	ldr	r3, [r7, #24]
 80193b4:	2264      	movs	r2, #100	; 0x64
 80193b6:	fb02 f303 	mul.w	r3, r2, r3
 80193ba:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80193bc:	2300      	movs	r3, #0
 80193be:	61fb      	str	r3, [r7, #28]
 80193c0:	e006      	b.n	80193d0 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80193c2:	2300      	movs	r3, #0
 80193c4:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80193c6:	2300      	movs	r3, #0
 80193c8:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80193cc:	2300      	movs	r3, #0
 80193ce:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80193d0:	69bb      	ldr	r3, [r7, #24]
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d00b      	beq.n	80193ee <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80193d6:	f107 0318 	add.w	r3, r7, #24
 80193da:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80193dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193e0:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80193e2:	f107 0310 	add.w	r3, r7, #16
 80193e6:	4618      	mov	r0, r3
 80193e8:	f000 fd14 	bl	8019e14 <RegionEU868ChannelAdd>
 80193ec:	e007      	b.n	80193fe <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80193ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193f2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80193f4:	f107 030c 	add.w	r3, r7, #12
 80193f8:	4618      	mov	r0, r3
 80193fa:	f000 fdad 	bl	8019f58 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80193fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019402:	3303      	adds	r3, #3
 8019404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019408:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801940c:	3301      	adds	r3, #1
 801940e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019416:	2b0f      	cmp	r3, #15
 8019418:	d9aa      	bls.n	8019370 <RegionEU868ApplyCFList+0x30>
 801941a:	e002      	b.n	8019422 <RegionEU868ApplyCFList+0xe2>
        return;
 801941c:	bf00      	nop
 801941e:	e000      	b.n	8019422 <RegionEU868ApplyCFList+0xe2>
        return;
 8019420:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019422:	3728      	adds	r7, #40	; 0x28
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}

08019428 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b082      	sub	sp, #8
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	791b      	ldrb	r3, [r3, #4]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d002      	beq.n	801943e <RegionEU868ChanMaskSet+0x16>
 8019438:	2b01      	cmp	r3, #1
 801943a:	d00b      	beq.n	8019454 <RegionEU868ChanMaskSet+0x2c>
 801943c:	e015      	b.n	801946a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801943e:	4b0e      	ldr	r3, [pc, #56]	; (8019478 <RegionEU868ChanMaskSet+0x50>)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	2201      	movs	r2, #1
 801944c:	4619      	mov	r1, r3
 801944e:	f7fe ff1d 	bl	801828c <RegionCommonChanMaskCopy>
            break;
 8019452:	e00c      	b.n	801946e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019454:	4b08      	ldr	r3, [pc, #32]	; (8019478 <RegionEU868ChanMaskSet+0x50>)
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	2201      	movs	r2, #1
 8019462:	4619      	mov	r1, r3
 8019464:	f7fe ff12 	bl	801828c <RegionCommonChanMaskCopy>
            break;
 8019468:	e001      	b.n	801946e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801946a:	2300      	movs	r3, #0
 801946c:	e000      	b.n	8019470 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801946e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019470:	4618      	mov	r0, r3
 8019472:	3708      	adds	r7, #8
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}
 8019478:	20001a64 	.word	0x20001a64

0801947c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b088      	sub	sp, #32
 8019480:	af02      	add	r7, sp, #8
 8019482:	60ba      	str	r2, [r7, #8]
 8019484:	607b      	str	r3, [r7, #4]
 8019486:	4603      	mov	r3, r0
 8019488:	73fb      	strb	r3, [r7, #15]
 801948a:	460b      	mov	r3, r1
 801948c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801948e:	2300      	movs	r3, #0
 8019490:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8019492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019496:	2b07      	cmp	r3, #7
 8019498:	bfa8      	it	ge
 801949a:	2307      	movge	r3, #7
 801949c:	b25a      	sxtb	r2, r3
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194a8:	491e      	ldr	r1, [pc, #120]	; (8019524 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80194aa:	4618      	mov	r0, r3
 80194ac:	f7ff fb8e 	bl	8018bcc <RegionCommonGetBandwidth>
 80194b0:	4603      	mov	r3, r0
 80194b2:	b2da      	uxtb	r2, r3
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194be:	2b07      	cmp	r3, #7
 80194c0:	d10a      	bne.n	80194d8 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194c8:	461a      	mov	r2, r3
 80194ca:	4b17      	ldr	r3, [pc, #92]	; (8019528 <RegionEU868ComputeRxWindowParameters+0xac>)
 80194cc:	5c9b      	ldrb	r3, [r3, r2]
 80194ce:	4618      	mov	r0, r3
 80194d0:	f7ff f910 	bl	80186f4 <RegionCommonComputeSymbolTimeFsk>
 80194d4:	6178      	str	r0, [r7, #20]
 80194d6:	e011      	b.n	80194fc <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194de:	461a      	mov	r2, r3
 80194e0:	4b11      	ldr	r3, [pc, #68]	; (8019528 <RegionEU868ComputeRxWindowParameters+0xac>)
 80194e2:	5c9a      	ldrb	r2, [r3, r2]
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194ea:	4619      	mov	r1, r3
 80194ec:	4b0d      	ldr	r3, [pc, #52]	; (8019524 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80194ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80194f2:	4619      	mov	r1, r3
 80194f4:	4610      	mov	r0, r2
 80194f6:	f7ff f8e7 	bl	80186c8 <RegionCommonComputeSymbolTimeLoRa>
 80194fa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80194fc:	4b0b      	ldr	r3, [pc, #44]	; (801952c <RegionEU868ComputeRxWindowParameters+0xb0>)
 80194fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019500:	4798      	blx	r3
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	3308      	adds	r3, #8
 8019506:	687a      	ldr	r2, [r7, #4]
 8019508:	320c      	adds	r2, #12
 801950a:	7bb9      	ldrb	r1, [r7, #14]
 801950c:	9201      	str	r2, [sp, #4]
 801950e:	9300      	str	r3, [sp, #0]
 8019510:	4603      	mov	r3, r0
 8019512:	68ba      	ldr	r2, [r7, #8]
 8019514:	6978      	ldr	r0, [r7, #20]
 8019516:	f7ff f8fd 	bl	8018714 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801951a:	bf00      	nop
 801951c:	3718      	adds	r7, #24
 801951e:	46bd      	mov	sp, r7
 8019520:	bd80      	pop	{r7, pc}
 8019522:	bf00      	nop
 8019524:	08020d98 	.word	0x08020d98
 8019528:	08020d90 	.word	0x08020d90
 801952c:	08020e4c 	.word	0x08020e4c

08019530 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019530:	b5b0      	push	{r4, r5, r7, lr}
 8019532:	b090      	sub	sp, #64	; 0x40
 8019534:	af0a      	add	r7, sp, #40	; 0x28
 8019536:	6078      	str	r0, [r7, #4]
 8019538:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	785b      	ldrb	r3, [r3, #1]
 801953e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019540:	2300      	movs	r3, #0
 8019542:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8019544:	2300      	movs	r3, #0
 8019546:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801954e:	4b5a      	ldr	r3, [pc, #360]	; (80196b8 <RegionEU868RxConfig+0x188>)
 8019550:	685b      	ldr	r3, [r3, #4]
 8019552:	4798      	blx	r3
 8019554:	4603      	mov	r3, r0
 8019556:	2b00      	cmp	r3, #0
 8019558:	d001      	beq.n	801955e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801955a:	2300      	movs	r3, #0
 801955c:	e0a8      	b.n	80196b0 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	7cdb      	ldrb	r3, [r3, #19]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d126      	bne.n	80195b4 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8019566:	4b55      	ldr	r3, [pc, #340]	; (80196bc <RegionEU868RxConfig+0x18c>)
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	781b      	ldrb	r3, [r3, #0]
 801956e:	4619      	mov	r1, r3
 8019570:	460b      	mov	r3, r1
 8019572:	005b      	lsls	r3, r3, #1
 8019574:	440b      	add	r3, r1
 8019576:	009b      	lsls	r3, r3, #2
 8019578:	4413      	add	r3, r2
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801957e:	4b4f      	ldr	r3, [pc, #316]	; (80196bc <RegionEU868RxConfig+0x18c>)
 8019580:	681a      	ldr	r2, [r3, #0]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	781b      	ldrb	r3, [r3, #0]
 8019586:	4619      	mov	r1, r3
 8019588:	460b      	mov	r3, r1
 801958a:	005b      	lsls	r3, r3, #1
 801958c:	440b      	add	r3, r1
 801958e:	009b      	lsls	r3, r3, #2
 8019590:	4413      	add	r3, r2
 8019592:	3304      	adds	r3, #4
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d00c      	beq.n	80195b4 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801959a:	4b48      	ldr	r3, [pc, #288]	; (80196bc <RegionEU868RxConfig+0x18c>)
 801959c:	681a      	ldr	r2, [r3, #0]
 801959e:	687b      	ldr	r3, [r7, #4]
 80195a0:	781b      	ldrb	r3, [r3, #0]
 80195a2:	4619      	mov	r1, r3
 80195a4:	460b      	mov	r3, r1
 80195a6:	005b      	lsls	r3, r3, #1
 80195a8:	440b      	add	r3, r1
 80195aa:	009b      	lsls	r3, r3, #2
 80195ac:	4413      	add	r3, r2
 80195ae:	3304      	adds	r3, #4
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80195b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195b8:	4a41      	ldr	r2, [pc, #260]	; (80196c0 <RegionEU868RxConfig+0x190>)
 80195ba:	5cd3      	ldrb	r3, [r2, r3]
 80195bc:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80195be:	4b3e      	ldr	r3, [pc, #248]	; (80196b8 <RegionEU868RxConfig+0x188>)
 80195c0:	68db      	ldr	r3, [r3, #12]
 80195c2:	6938      	ldr	r0, [r7, #16]
 80195c4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80195c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195ca:	2b07      	cmp	r3, #7
 80195cc:	d128      	bne.n	8019620 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80195ce:	2300      	movs	r3, #0
 80195d0:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80195d2:	4b39      	ldr	r3, [pc, #228]	; (80196b8 <RegionEU868RxConfig+0x188>)
 80195d4:	699c      	ldr	r4, [r3, #24]
 80195d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80195da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80195de:	fb02 f303 	mul.w	r3, r2, r3
 80195e2:	4619      	mov	r1, r3
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	689b      	ldr	r3, [r3, #8]
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	687a      	ldr	r2, [r7, #4]
 80195ec:	7c92      	ldrb	r2, [r2, #18]
 80195ee:	7df8      	ldrb	r0, [r7, #23]
 80195f0:	9209      	str	r2, [sp, #36]	; 0x24
 80195f2:	2200      	movs	r2, #0
 80195f4:	9208      	str	r2, [sp, #32]
 80195f6:	2200      	movs	r2, #0
 80195f8:	9207      	str	r2, [sp, #28]
 80195fa:	2200      	movs	r2, #0
 80195fc:	9206      	str	r2, [sp, #24]
 80195fe:	2201      	movs	r2, #1
 8019600:	9205      	str	r2, [sp, #20]
 8019602:	2200      	movs	r2, #0
 8019604:	9204      	str	r2, [sp, #16]
 8019606:	2200      	movs	r2, #0
 8019608:	9203      	str	r2, [sp, #12]
 801960a:	9302      	str	r3, [sp, #8]
 801960c:	2305      	movs	r3, #5
 801960e:	9301      	str	r3, [sp, #4]
 8019610:	4b2c      	ldr	r3, [pc, #176]	; (80196c4 <RegionEU868RxConfig+0x194>)
 8019612:	9300      	str	r3, [sp, #0]
 8019614:	2300      	movs	r3, #0
 8019616:	460a      	mov	r2, r1
 8019618:	f24c 3150 	movw	r1, #50000	; 0xc350
 801961c:	47a0      	blx	r4
 801961e:	e024      	b.n	801966a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019620:	2301      	movs	r3, #1
 8019622:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019624:	4b24      	ldr	r3, [pc, #144]	; (80196b8 <RegionEU868RxConfig+0x188>)
 8019626:	699c      	ldr	r4, [r3, #24]
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	789b      	ldrb	r3, [r3, #2]
 801962c:	461d      	mov	r5, r3
 801962e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	689b      	ldr	r3, [r3, #8]
 8019636:	b29b      	uxth	r3, r3
 8019638:	687a      	ldr	r2, [r7, #4]
 801963a:	7c92      	ldrb	r2, [r2, #18]
 801963c:	7df8      	ldrb	r0, [r7, #23]
 801963e:	9209      	str	r2, [sp, #36]	; 0x24
 8019640:	2201      	movs	r2, #1
 8019642:	9208      	str	r2, [sp, #32]
 8019644:	2200      	movs	r2, #0
 8019646:	9207      	str	r2, [sp, #28]
 8019648:	2200      	movs	r2, #0
 801964a:	9206      	str	r2, [sp, #24]
 801964c:	2200      	movs	r2, #0
 801964e:	9205      	str	r2, [sp, #20]
 8019650:	2200      	movs	r2, #0
 8019652:	9204      	str	r2, [sp, #16]
 8019654:	2200      	movs	r2, #0
 8019656:	9203      	str	r2, [sp, #12]
 8019658:	9302      	str	r3, [sp, #8]
 801965a:	2308      	movs	r3, #8
 801965c:	9301      	str	r3, [sp, #4]
 801965e:	2300      	movs	r3, #0
 8019660:	9300      	str	r3, [sp, #0]
 8019662:	2301      	movs	r3, #1
 8019664:	460a      	mov	r2, r1
 8019666:	4629      	mov	r1, r5
 8019668:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	7c5b      	ldrb	r3, [r3, #17]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d005      	beq.n	801967e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8019672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019676:	4a14      	ldr	r2, [pc, #80]	; (80196c8 <RegionEU868RxConfig+0x198>)
 8019678:	5cd3      	ldrb	r3, [r2, r3]
 801967a:	75bb      	strb	r3, [r7, #22]
 801967c:	e004      	b.n	8019688 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801967e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019682:	4a12      	ldr	r2, [pc, #72]	; (80196cc <RegionEU868RxConfig+0x19c>)
 8019684:	5cd3      	ldrb	r3, [r2, r3]
 8019686:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019688:	4b0b      	ldr	r3, [pc, #44]	; (80196b8 <RegionEU868RxConfig+0x188>)
 801968a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801968c:	7dba      	ldrb	r2, [r7, #22]
 801968e:	320d      	adds	r2, #13
 8019690:	b2d1      	uxtb	r1, r2
 8019692:	7dfa      	ldrb	r2, [r7, #23]
 8019694:	4610      	mov	r0, r2
 8019696:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	7cdb      	ldrb	r3, [r3, #19]
 801969c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80196a0:	6939      	ldr	r1, [r7, #16]
 80196a2:	4618      	mov	r0, r3
 80196a4:	f7ff fab0 	bl	8018c08 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	7bfa      	ldrb	r2, [r7, #15]
 80196ac:	701a      	strb	r2, [r3, #0]
    return true;
 80196ae:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80196b0:	4618      	mov	r0, r3
 80196b2:	3718      	adds	r7, #24
 80196b4:	46bd      	mov	sp, r7
 80196b6:	bdb0      	pop	{r4, r5, r7, pc}
 80196b8:	08020e4c 	.word	0x08020e4c
 80196bc:	20001a64 	.word	0x20001a64
 80196c0:	08020d90 	.word	0x08020d90
 80196c4:	00014585 	.word	0x00014585
 80196c8:	08020dc0 	.word	0x08020dc0
 80196cc:	08020db8 	.word	0x08020db8

080196d0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80196d0:	b590      	push	{r4, r7, lr}
 80196d2:	b093      	sub	sp, #76	; 0x4c
 80196d4:	af0a      	add	r7, sp, #40	; 0x28
 80196d6:	60f8      	str	r0, [r7, #12]
 80196d8:	60b9      	str	r1, [r7, #8]
 80196da:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80196e2:	461a      	mov	r2, r3
 80196e4:	4b5d      	ldr	r3, [pc, #372]	; (801985c <RegionEU868TxConfig+0x18c>)
 80196e6:	5c9b      	ldrb	r3, [r3, r2]
 80196e8:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80196f0:	4b5b      	ldr	r3, [pc, #364]	; (8019860 <RegionEU868TxConfig+0x190>)
 80196f2:	681a      	ldr	r2, [r3, #0]
 80196f4:	4b5b      	ldr	r3, [pc, #364]	; (8019864 <RegionEU868TxConfig+0x194>)
 80196f6:	6819      	ldr	r1, [r3, #0]
 80196f8:	68fb      	ldr	r3, [r7, #12]
 80196fa:	781b      	ldrb	r3, [r3, #0]
 80196fc:	461c      	mov	r4, r3
 80196fe:	4623      	mov	r3, r4
 8019700:	005b      	lsls	r3, r3, #1
 8019702:	4423      	add	r3, r4
 8019704:	009b      	lsls	r3, r3, #2
 8019706:	440b      	add	r3, r1
 8019708:	3309      	adds	r3, #9
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	4619      	mov	r1, r3
 801970e:	460b      	mov	r3, r1
 8019710:	005b      	lsls	r3, r3, #1
 8019712:	440b      	add	r3, r1
 8019714:	00db      	lsls	r3, r3, #3
 8019716:	4413      	add	r3, r2
 8019718:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801971c:	4619      	mov	r1, r3
 801971e:	f7ff fa40 	bl	8018ba2 <RegionCommonLimitTxPower>
 8019722:	4603      	mov	r3, r0
 8019724:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801972c:	494e      	ldr	r1, [pc, #312]	; (8019868 <RegionEU868TxConfig+0x198>)
 801972e:	4618      	mov	r0, r3
 8019730:	f7ff fa4c 	bl	8018bcc <RegionCommonGetBandwidth>
 8019734:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019736:	2300      	movs	r3, #0
 8019738:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801973a:	68fb      	ldr	r3, [r7, #12]
 801973c:	6859      	ldr	r1, [r3, #4]
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	689a      	ldr	r2, [r3, #8]
 8019742:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019746:	4618      	mov	r0, r3
 8019748:	f7ff f89c 	bl	8018884 <RegionCommonComputeTxPower>
 801974c:	4603      	mov	r3, r0
 801974e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019750:	4b46      	ldr	r3, [pc, #280]	; (801986c <RegionEU868TxConfig+0x19c>)
 8019752:	68da      	ldr	r2, [r3, #12]
 8019754:	4b43      	ldr	r3, [pc, #268]	; (8019864 <RegionEU868TxConfig+0x194>)
 8019756:	6819      	ldr	r1, [r3, #0]
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	781b      	ldrb	r3, [r3, #0]
 801975c:	4618      	mov	r0, r3
 801975e:	4603      	mov	r3, r0
 8019760:	005b      	lsls	r3, r3, #1
 8019762:	4403      	add	r3, r0
 8019764:	009b      	lsls	r3, r3, #2
 8019766:	440b      	add	r3, r1
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	4618      	mov	r0, r3
 801976c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801976e:	68fb      	ldr	r3, [r7, #12]
 8019770:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019774:	2b07      	cmp	r3, #7
 8019776:	d124      	bne.n	80197c2 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019778:	2300      	movs	r3, #0
 801977a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801977c:	4b3b      	ldr	r3, [pc, #236]	; (801986c <RegionEU868TxConfig+0x19c>)
 801977e:	69dc      	ldr	r4, [r3, #28]
 8019780:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019788:	fb02 f303 	mul.w	r3, r2, r3
 801978c:	461a      	mov	r2, r3
 801978e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019792:	7ff8      	ldrb	r0, [r7, #31]
 8019794:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8019798:	9308      	str	r3, [sp, #32]
 801979a:	2300      	movs	r3, #0
 801979c:	9307      	str	r3, [sp, #28]
 801979e:	2300      	movs	r3, #0
 80197a0:	9306      	str	r3, [sp, #24]
 80197a2:	2300      	movs	r3, #0
 80197a4:	9305      	str	r3, [sp, #20]
 80197a6:	2301      	movs	r3, #1
 80197a8:	9304      	str	r3, [sp, #16]
 80197aa:	2300      	movs	r3, #0
 80197ac:	9303      	str	r3, [sp, #12]
 80197ae:	2305      	movs	r3, #5
 80197b0:	9302      	str	r3, [sp, #8]
 80197b2:	2300      	movs	r3, #0
 80197b4:	9301      	str	r3, [sp, #4]
 80197b6:	9200      	str	r2, [sp, #0]
 80197b8:	69bb      	ldr	r3, [r7, #24]
 80197ba:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80197be:	47a0      	blx	r4
 80197c0:	e01d      	b.n	80197fe <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80197c2:	2301      	movs	r3, #1
 80197c4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80197c6:	4b29      	ldr	r3, [pc, #164]	; (801986c <RegionEU868TxConfig+0x19c>)
 80197c8:	69dc      	ldr	r4, [r3, #28]
 80197ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80197ce:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80197d2:	7ff8      	ldrb	r0, [r7, #31]
 80197d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80197d8:	9208      	str	r2, [sp, #32]
 80197da:	2200      	movs	r2, #0
 80197dc:	9207      	str	r2, [sp, #28]
 80197de:	2200      	movs	r2, #0
 80197e0:	9206      	str	r2, [sp, #24]
 80197e2:	2200      	movs	r2, #0
 80197e4:	9205      	str	r2, [sp, #20]
 80197e6:	2201      	movs	r2, #1
 80197e8:	9204      	str	r2, [sp, #16]
 80197ea:	2200      	movs	r2, #0
 80197ec:	9203      	str	r2, [sp, #12]
 80197ee:	2208      	movs	r2, #8
 80197f0:	9202      	str	r2, [sp, #8]
 80197f2:	2201      	movs	r2, #1
 80197f4:	9201      	str	r2, [sp, #4]
 80197f6:	9300      	str	r3, [sp, #0]
 80197f8:	69bb      	ldr	r3, [r7, #24]
 80197fa:	2200      	movs	r2, #0
 80197fc:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80197fe:	4b19      	ldr	r3, [pc, #100]	; (8019864 <RegionEU868TxConfig+0x194>)
 8019800:	681a      	ldr	r2, [r3, #0]
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	781b      	ldrb	r3, [r3, #0]
 8019806:	4619      	mov	r1, r3
 8019808:	460b      	mov	r3, r1
 801980a:	005b      	lsls	r3, r3, #1
 801980c:	440b      	add	r3, r1
 801980e:	009b      	lsls	r3, r3, #2
 8019810:	4413      	add	r3, r2
 8019812:	681a      	ldr	r2, [r3, #0]
 8019814:	68fb      	ldr	r3, [r7, #12]
 8019816:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801981a:	4619      	mov	r1, r3
 801981c:	4610      	mov	r0, r2
 801981e:	f7ff fa25 	bl	8018c6c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	899b      	ldrh	r3, [r3, #12]
 801982c:	4619      	mov	r1, r3
 801982e:	4610      	mov	r0, r2
 8019830:	f7ff faaa 	bl	8018d88 <GetTimeOnAir>
 8019834:	4602      	mov	r2, r0
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801983a:	4b0c      	ldr	r3, [pc, #48]	; (801986c <RegionEU868TxConfig+0x19c>)
 801983c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801983e:	68fa      	ldr	r2, [r7, #12]
 8019840:	8992      	ldrh	r2, [r2, #12]
 8019842:	b2d1      	uxtb	r1, r2
 8019844:	7ffa      	ldrb	r2, [r7, #31]
 8019846:	4610      	mov	r0, r2
 8019848:	4798      	blx	r3

    *txPower = txPowerLimited;
 801984a:	68bb      	ldr	r3, [r7, #8]
 801984c:	7f7a      	ldrb	r2, [r7, #29]
 801984e:	701a      	strb	r2, [r3, #0]
    return true;
 8019850:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019852:	4618      	mov	r0, r3
 8019854:	3724      	adds	r7, #36	; 0x24
 8019856:	46bd      	mov	sp, r7
 8019858:	bd90      	pop	{r4, r7, pc}
 801985a:	bf00      	nop
 801985c:	08020d90 	.word	0x08020d90
 8019860:	20001a68 	.word	0x20001a68
 8019864:	20001a64 	.word	0x20001a64
 8019868:	08020d98 	.word	0x08020d98
 801986c:	08020e4c 	.word	0x08020e4c

08019870 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019870:	b590      	push	{r4, r7, lr}
 8019872:	b093      	sub	sp, #76	; 0x4c
 8019874:	af00      	add	r7, sp, #0
 8019876:	60f8      	str	r0, [r7, #12]
 8019878:	60b9      	str	r1, [r7, #8]
 801987a:	607a      	str	r2, [r7, #4]
 801987c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801987e:	2307      	movs	r3, #7
 8019880:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019884:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019888:	2200      	movs	r2, #0
 801988a:	601a      	str	r2, [r3, #0]
 801988c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801988e:	2300      	movs	r3, #0
 8019890:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019894:	2300      	movs	r3, #0
 8019896:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801989a:	2300      	movs	r3, #0
 801989c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801989e:	e085      	b.n	80199ac <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	685a      	ldr	r2, [r3, #4]
 80198a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80198a8:	4413      	add	r3, r2
 80198aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80198ae:	4611      	mov	r1, r2
 80198b0:	4618      	mov	r0, r3
 80198b2:	f7fe fe2f 	bl	8018514 <RegionCommonParseLinkAdrReq>
 80198b6:	4603      	mov	r3, r0
 80198b8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80198bc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d07b      	beq.n	80199bc <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80198c4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80198c8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80198cc:	4413      	add	r3, r2
 80198ce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80198d2:	2307      	movs	r3, #7
 80198d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80198d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80198dc:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80198de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	d109      	bne.n	80198fa <RegionEU868LinkAdrReq+0x8a>
 80198e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d106      	bne.n	80198fa <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80198ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80198f0:	f023 0301 	bic.w	r3, r3, #1
 80198f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80198f8:	e058      	b.n	80199ac <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80198fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d003      	beq.n	801990a <RegionEU868LinkAdrReq+0x9a>
 8019902:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019906:	2b05      	cmp	r3, #5
 8019908:	d903      	bls.n	8019912 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801990a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801990e:	2b06      	cmp	r3, #6
 8019910:	d906      	bls.n	8019920 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8019912:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019916:	f023 0301 	bic.w	r3, r3, #1
 801991a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801991e:	e045      	b.n	80199ac <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019920:	2300      	movs	r3, #0
 8019922:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019926:	e03d      	b.n	80199a4 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019928:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801992c:	2b06      	cmp	r3, #6
 801992e:	d118      	bne.n	8019962 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019930:	4b5f      	ldr	r3, [pc, #380]	; (8019ab0 <RegionEU868LinkAdrReq+0x240>)
 8019932:	6819      	ldr	r1, [r3, #0]
 8019934:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019938:	4613      	mov	r3, r2
 801993a:	005b      	lsls	r3, r3, #1
 801993c:	4413      	add	r3, r2
 801993e:	009b      	lsls	r3, r3, #2
 8019940:	440b      	add	r3, r1
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d028      	beq.n	801999a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019948:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801994c:	2201      	movs	r2, #1
 801994e:	fa02 f303 	lsl.w	r3, r2, r3
 8019952:	b21a      	sxth	r2, r3
 8019954:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019956:	b21b      	sxth	r3, r3
 8019958:	4313      	orrs	r3, r2
 801995a:	b21b      	sxth	r3, r3
 801995c:	b29b      	uxth	r3, r3
 801995e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019960:	e01b      	b.n	801999a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019962:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019964:	461a      	mov	r2, r3
 8019966:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801996a:	fa42 f303 	asr.w	r3, r2, r3
 801996e:	f003 0301 	and.w	r3, r3, #1
 8019972:	2b00      	cmp	r3, #0
 8019974:	d011      	beq.n	801999a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8019976:	4b4e      	ldr	r3, [pc, #312]	; (8019ab0 <RegionEU868LinkAdrReq+0x240>)
 8019978:	6819      	ldr	r1, [r3, #0]
 801997a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801997e:	4613      	mov	r3, r2
 8019980:	005b      	lsls	r3, r3, #1
 8019982:	4413      	add	r3, r2
 8019984:	009b      	lsls	r3, r3, #2
 8019986:	440b      	add	r3, r1
 8019988:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801998a:	2b00      	cmp	r3, #0
 801998c:	d105      	bne.n	801999a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801998e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019992:	f023 0301 	bic.w	r3, r3, #1
 8019996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801999a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801999e:	3301      	adds	r3, #1
 80199a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80199a4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80199a8:	2b0f      	cmp	r3, #15
 80199aa:	d9bd      	bls.n	8019928 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	7a1b      	ldrb	r3, [r3, #8]
 80199b0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80199b4:	429a      	cmp	r2, r3
 80199b6:	f4ff af73 	bcc.w	80198a0 <RegionEU868LinkAdrReq+0x30>
 80199ba:	e000      	b.n	80199be <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80199bc:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80199be:	2302      	movs	r3, #2
 80199c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	7a5b      	ldrb	r3, [r3, #9]
 80199c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80199cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80199d0:	4618      	mov	r0, r3
 80199d2:	f7ff fa29 	bl	8018e28 <RegionEU868GetPhyParam>
 80199d6:	4603      	mov	r3, r0
 80199d8:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80199da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80199de:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	7a9b      	ldrb	r3, [r3, #10]
 80199e4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80199e6:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80199ea:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80199ec:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80199f0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80199f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80199f6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80199fe:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019a06:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	7b5b      	ldrb	r3, [r3, #13]
 8019a0c:	b25b      	sxtb	r3, r3
 8019a0e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019a10:	2310      	movs	r3, #16
 8019a12:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019a14:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019a18:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a1c:	b25b      	sxtb	r3, r3
 8019a1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8019a22:	2307      	movs	r3, #7
 8019a24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019a28:	4b21      	ldr	r3, [pc, #132]	; (8019ab0 <RegionEU868LinkAdrReq+0x240>)
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019a2e:	2307      	movs	r3, #7
 8019a30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019a34:	2300      	movs	r3, #0
 8019a36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019a40:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019a44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019a48:	1c9a      	adds	r2, r3, #2
 8019a4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019a4e:	1c59      	adds	r1, r3, #1
 8019a50:	f107 0010 	add.w	r0, r7, #16
 8019a54:	4623      	mov	r3, r4
 8019a56:	f7fe fdae 	bl	80185b6 <RegionCommonLinkAdrReqVerifyParams>
 8019a5a:	4603      	mov	r3, r0
 8019a5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019a60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019a64:	2b07      	cmp	r3, #7
 8019a66:	d10d      	bne.n	8019a84 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019a68:	4b11      	ldr	r3, [pc, #68]	; (8019ab0 <RegionEU868LinkAdrReq+0x240>)
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019a70:	220c      	movs	r2, #12
 8019a72:	2100      	movs	r1, #0
 8019a74:	4618      	mov	r0, r3
 8019a76:	f001 fd31 	bl	801b4dc <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019a7a:	4b0d      	ldr	r3, [pc, #52]	; (8019ab0 <RegionEU868LinkAdrReq+0x240>)
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019a80:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019a84:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019a8c:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019a94:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019a98:	683b      	ldr	r3, [r7, #0]
 8019a9a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019a9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019a9e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019aa2:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019aa4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	374c      	adds	r7, #76	; 0x4c
 8019aac:	46bd      	mov	sp, r7
 8019aae:	bd90      	pop	{r4, r7, pc}
 8019ab0:	20001a64 	.word	0x20001a64

08019ab4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b084      	sub	sp, #16
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019abc:	2307      	movs	r3, #7
 8019abe:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019ac0:	2300      	movs	r3, #0
 8019ac2:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	685b      	ldr	r3, [r3, #4]
 8019ac8:	f107 020e 	add.w	r2, r7, #14
 8019acc:	4611      	mov	r1, r2
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7ff f8e4 	bl	8018c9c <VerifyRfFreq>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	f083 0301 	eor.w	r3, r3, #1
 8019ada:	b2db      	uxtb	r3, r3
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d003      	beq.n	8019ae8 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019ae0:	7bfb      	ldrb	r3, [r7, #15]
 8019ae2:	f023 0301 	bic.w	r3, r3, #1
 8019ae6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	f993 3000 	ldrsb.w	r3, [r3]
 8019aee:	2207      	movs	r2, #7
 8019af0:	2100      	movs	r1, #0
 8019af2:	4618      	mov	r0, r3
 8019af4:	f7fe fb4d 	bl	8018192 <RegionCommonValueInRange>
 8019af8:	4603      	mov	r3, r0
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d103      	bne.n	8019b06 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
 8019b00:	f023 0302 	bic.w	r3, r3, #2
 8019b04:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019b0c:	2205      	movs	r2, #5
 8019b0e:	2100      	movs	r1, #0
 8019b10:	4618      	mov	r0, r3
 8019b12:	f7fe fb3e 	bl	8018192 <RegionCommonValueInRange>
 8019b16:	4603      	mov	r3, r0
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d103      	bne.n	8019b24 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019b1c:	7bfb      	ldrb	r3, [r7, #15]
 8019b1e:	f023 0304 	bic.w	r3, r3, #4
 8019b22:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b26:	4618      	mov	r0, r3
 8019b28:	3710      	adds	r7, #16
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	bd80      	pop	{r7, pc}
	...

08019b30 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019b30:	b580      	push	{r7, lr}
 8019b32:	b086      	sub	sp, #24
 8019b34:	af00      	add	r7, sp, #0
 8019b36:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019b38:	2303      	movs	r3, #3
 8019b3a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d114      	bne.n	8019b70 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019b4c:	b2db      	uxtb	r3, r3
 8019b4e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019b50:	f107 0308 	add.w	r3, r7, #8
 8019b54:	4618      	mov	r0, r3
 8019b56:	f000 f9ff 	bl	8019f58 <RegionEU868ChannelsRemove>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	f083 0301 	eor.w	r3, r3, #1
 8019b60:	b2db      	uxtb	r3, r3
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d03b      	beq.n	8019bde <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8019b66:	7dfb      	ldrb	r3, [r7, #23]
 8019b68:	f023 0303 	bic.w	r3, r3, #3
 8019b6c:	75fb      	strb	r3, [r7, #23]
 8019b6e:	e036      	b.n	8019bde <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019b7c:	b2db      	uxtb	r3, r3
 8019b7e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019b80:	f107 030c 	add.w	r3, r7, #12
 8019b84:	4618      	mov	r0, r3
 8019b86:	f000 f945 	bl	8019e14 <RegionEU868ChannelAdd>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	2b06      	cmp	r3, #6
 8019b8e:	d820      	bhi.n	8019bd2 <RegionEU868NewChannelReq+0xa2>
 8019b90:	a201      	add	r2, pc, #4	; (adr r2, 8019b98 <RegionEU868NewChannelReq+0x68>)
 8019b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b96:	bf00      	nop
 8019b98:	08019bdd 	.word	0x08019bdd
 8019b9c:	08019bd3 	.word	0x08019bd3
 8019ba0:	08019bd3 	.word	0x08019bd3
 8019ba4:	08019bd3 	.word	0x08019bd3
 8019ba8:	08019bb5 	.word	0x08019bb5
 8019bac:	08019bbf 	.word	0x08019bbf
 8019bb0:	08019bc9 	.word	0x08019bc9
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019bb4:	7dfb      	ldrb	r3, [r7, #23]
 8019bb6:	f023 0301 	bic.w	r3, r3, #1
 8019bba:	75fb      	strb	r3, [r7, #23]
                break;
 8019bbc:	e00f      	b.n	8019bde <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019bbe:	7dfb      	ldrb	r3, [r7, #23]
 8019bc0:	f023 0302 	bic.w	r3, r3, #2
 8019bc4:	75fb      	strb	r3, [r7, #23]
                break;
 8019bc6:	e00a      	b.n	8019bde <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019bc8:	7dfb      	ldrb	r3, [r7, #23]
 8019bca:	f023 0303 	bic.w	r3, r3, #3
 8019bce:	75fb      	strb	r3, [r7, #23]
                break;
 8019bd0:	e005      	b.n	8019bde <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8019bd2:	7dfb      	ldrb	r3, [r7, #23]
 8019bd4:	f023 0303 	bic.w	r3, r3, #3
 8019bd8:	75fb      	strb	r3, [r7, #23]
                break;
 8019bda:	e000      	b.n	8019bde <RegionEU868NewChannelReq+0xae>
                break;
 8019bdc:	bf00      	nop
            }
        }
    }

    return status;
 8019bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019be2:	4618      	mov	r0, r3
 8019be4:	3718      	adds	r7, #24
 8019be6:	46bd      	mov	sp, r7
 8019be8:	bd80      	pop	{r7, pc}
 8019bea:	bf00      	nop

08019bec <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019bec:	b480      	push	{r7}
 8019bee:	b083      	sub	sp, #12
 8019bf0:	af00      	add	r7, sp, #0
 8019bf2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	370c      	adds	r7, #12
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	bc80      	pop	{r7}
 8019c00:	4770      	bx	lr
	...

08019c04 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b084      	sub	sp, #16
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019c0c:	2303      	movs	r3, #3
 8019c0e:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019c10:	2300      	movs	r3, #0
 8019c12:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	781b      	ldrb	r3, [r3, #0]
 8019c18:	2b0f      	cmp	r3, #15
 8019c1a:	d901      	bls.n	8019c20 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019c1c:	2300      	movs	r3, #0
 8019c1e:	e035      	b.n	8019c8c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	685b      	ldr	r3, [r3, #4]
 8019c24:	f107 020e 	add.w	r2, r7, #14
 8019c28:	4611      	mov	r1, r2
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f7ff f836 	bl	8018c9c <VerifyRfFreq>
 8019c30:	4603      	mov	r3, r0
 8019c32:	f083 0301 	eor.w	r3, r3, #1
 8019c36:	b2db      	uxtb	r3, r3
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d003      	beq.n	8019c44 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019c3c:	7bfb      	ldrb	r3, [r7, #15]
 8019c3e:	f023 0301 	bic.w	r3, r3, #1
 8019c42:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019c44:	4b13      	ldr	r3, [pc, #76]	; (8019c94 <RegionEU868DlChannelReq+0x90>)
 8019c46:	681a      	ldr	r2, [r3, #0]
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	781b      	ldrb	r3, [r3, #0]
 8019c4c:	4619      	mov	r1, r3
 8019c4e:	460b      	mov	r3, r1
 8019c50:	005b      	lsls	r3, r3, #1
 8019c52:	440b      	add	r3, r1
 8019c54:	009b      	lsls	r3, r3, #2
 8019c56:	4413      	add	r3, r2
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d103      	bne.n	8019c66 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8019c5e:	7bfb      	ldrb	r3, [r7, #15]
 8019c60:	f023 0302 	bic.w	r3, r3, #2
 8019c64:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019c66:	7bfb      	ldrb	r3, [r7, #15]
 8019c68:	2b03      	cmp	r3, #3
 8019c6a:	d10d      	bne.n	8019c88 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019c6c:	4b09      	ldr	r3, [pc, #36]	; (8019c94 <RegionEU868DlChannelReq+0x90>)
 8019c6e:	6819      	ldr	r1, [r3, #0]
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	781b      	ldrb	r3, [r3, #0]
 8019c74:	4618      	mov	r0, r3
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	685a      	ldr	r2, [r3, #4]
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	005b      	lsls	r3, r3, #1
 8019c7e:	4403      	add	r3, r0
 8019c80:	009b      	lsls	r3, r3, #2
 8019c82:	440b      	add	r3, r1
 8019c84:	3304      	adds	r3, #4
 8019c86:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	3710      	adds	r7, #16
 8019c90:	46bd      	mov	sp, r7
 8019c92:	bd80      	pop	{r7, pc}
 8019c94:	20001a64 	.word	0x20001a64

08019c98 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019c98:	b480      	push	{r7}
 8019c9a:	b083      	sub	sp, #12
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	4603      	mov	r3, r0
 8019ca0:	460a      	mov	r2, r1
 8019ca2:	71fb      	strb	r3, [r7, #7]
 8019ca4:	4613      	mov	r3, r2
 8019ca6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019cac:	4618      	mov	r0, r3
 8019cae:	370c      	adds	r7, #12
 8019cb0:	46bd      	mov	sp, r7
 8019cb2:	bc80      	pop	{r7}
 8019cb4:	4770      	bx	lr
	...

08019cb8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b09a      	sub	sp, #104	; 0x68
 8019cbc:	af02      	add	r7, sp, #8
 8019cbe:	60f8      	str	r0, [r7, #12]
 8019cc0:	60b9      	str	r1, [r7, #8]
 8019cc2:	607a      	str	r2, [r7, #4]
 8019cc4:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019ccc:	2300      	movs	r3, #0
 8019cce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019cd2:	2300      	movs	r3, #0
 8019cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019cd6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019cda:	2200      	movs	r2, #0
 8019cdc:	601a      	str	r2, [r3, #0]
 8019cde:	605a      	str	r2, [r3, #4]
 8019ce0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019ce2:	230c      	movs	r3, #12
 8019ce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019ce8:	2307      	movs	r3, #7
 8019cea:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019cec:	4b47      	ldr	r3, [pc, #284]	; (8019e0c <RegionEU868NextChannel+0x154>)
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019cf4:	2201      	movs	r2, #1
 8019cf6:	2100      	movs	r1, #0
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	f7fe fa9b 	bl	8018234 <RegionCommonCountChannels>
 8019cfe:	4603      	mov	r3, r0
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d10a      	bne.n	8019d1a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019d04:	4b41      	ldr	r3, [pc, #260]	; (8019e0c <RegionEU868NextChannel+0x154>)
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019d0c:	4b3f      	ldr	r3, [pc, #252]	; (8019e0c <RegionEU868NextChannel+0x154>)
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	f042 0207 	orr.w	r2, r2, #7
 8019d14:	b292      	uxth	r2, r2
 8019d16:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	7a5b      	ldrb	r3, [r3, #9]
 8019d1e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019d26:	b2db      	uxtb	r3, r3
 8019d28:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019d2a:	4b38      	ldr	r3, [pc, #224]	; (8019e0c <RegionEU868NextChannel+0x154>)
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019d32:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019d34:	4b35      	ldr	r3, [pc, #212]	; (8019e0c <RegionEU868NextChannel+0x154>)
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8019d3a:	4b35      	ldr	r3, [pc, #212]	; (8019e10 <RegionEU868NextChannel+0x158>)
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019d40:	2310      	movs	r3, #16
 8019d42:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019d44:	f107 0312 	add.w	r3, r7, #18
 8019d48:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	685b      	ldr	r3, [r3, #4]
 8019d54:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	7a9b      	ldrb	r3, [r3, #10]
 8019d5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019d5e:	2306      	movs	r3, #6
 8019d60:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019d64:	68fa      	ldr	r2, [r7, #12]
 8019d66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019d6a:	320c      	adds	r2, #12
 8019d6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d70:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	7d1b      	ldrb	r3, [r3, #20]
 8019d78:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	8adb      	ldrh	r3, [r3, #22]
 8019d86:	4619      	mov	r1, r3
 8019d88:	4610      	mov	r0, r2
 8019d8a:	f7fe fffd 	bl	8018d88 <GetTimeOnAir>
 8019d8e:	4603      	mov	r3, r0
 8019d90:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019d92:	f107 0314 	add.w	r3, r7, #20
 8019d96:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019d98:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019d9c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019da0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	9301      	str	r3, [sp, #4]
 8019da8:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019dac:	9300      	str	r3, [sp, #0]
 8019dae:	460b      	mov	r3, r1
 8019db0:	6839      	ldr	r1, [r7, #0]
 8019db2:	f7fe fe56 	bl	8018a62 <RegionCommonIdentifyChannels>
 8019db6:	4603      	mov	r3, r0
 8019db8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d10e      	bne.n	8019de2 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019dc4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019dc8:	3b01      	subs	r3, #1
 8019dca:	4619      	mov	r1, r3
 8019dcc:	2000      	movs	r0, #0
 8019dce:	f001 fb33 	bl	801b438 <randr>
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	3360      	adds	r3, #96	; 0x60
 8019dd6:	443b      	add	r3, r7
 8019dd8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	701a      	strb	r2, [r3, #0]
 8019de0:	e00e      	b.n	8019e00 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019de6:	2b0c      	cmp	r3, #12
 8019de8:	d10a      	bne.n	8019e00 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019dea:	4b08      	ldr	r3, [pc, #32]	; (8019e0c <RegionEU868NextChannel+0x154>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019df2:	4b06      	ldr	r3, [pc, #24]	; (8019e0c <RegionEU868NextChannel+0x154>)
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	f042 0207 	orr.w	r2, r2, #7
 8019dfa:	b292      	uxth	r2, r2
 8019dfc:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8019e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019e04:	4618      	mov	r0, r3
 8019e06:	3760      	adds	r7, #96	; 0x60
 8019e08:	46bd      	mov	sp, r7
 8019e0a:	bd80      	pop	{r7, pc}
 8019e0c:	20001a64 	.word	0x20001a64
 8019e10:	20001a68 	.word	0x20001a68

08019e14 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b084      	sub	sp, #16
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019e20:	2300      	movs	r3, #0
 8019e22:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019e24:	2300      	movs	r3, #0
 8019e26:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	791b      	ldrb	r3, [r3, #4]
 8019e2c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019e2e:	7b7b      	ldrb	r3, [r7, #13]
 8019e30:	2b02      	cmp	r3, #2
 8019e32:	d801      	bhi.n	8019e38 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019e34:	2306      	movs	r3, #6
 8019e36:	e089      	b.n	8019f4c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019e38:	7b7b      	ldrb	r3, [r7, #13]
 8019e3a:	2b0f      	cmp	r3, #15
 8019e3c:	d901      	bls.n	8019e42 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019e3e:	2303      	movs	r3, #3
 8019e40:	e084      	b.n	8019f4c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	7a1b      	ldrb	r3, [r3, #8]
 8019e48:	f343 0303 	sbfx	r3, r3, #0, #4
 8019e4c:	b25b      	sxtb	r3, r3
 8019e4e:	2207      	movs	r2, #7
 8019e50:	2100      	movs	r1, #0
 8019e52:	4618      	mov	r0, r3
 8019e54:	f7fe f99d 	bl	8018192 <RegionCommonValueInRange>
 8019e58:	4603      	mov	r3, r0
 8019e5a:	2b00      	cmp	r3, #0
 8019e5c:	d101      	bne.n	8019e62 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019e5e:	2301      	movs	r3, #1
 8019e60:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	7a1b      	ldrb	r3, [r3, #8]
 8019e68:	f343 1303 	sbfx	r3, r3, #4, #4
 8019e6c:	b25b      	sxtb	r3, r3
 8019e6e:	2207      	movs	r2, #7
 8019e70:	2100      	movs	r1, #0
 8019e72:	4618      	mov	r0, r3
 8019e74:	f7fe f98d 	bl	8018192 <RegionCommonValueInRange>
 8019e78:	4603      	mov	r3, r0
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d101      	bne.n	8019e82 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019e7e:	2301      	movs	r3, #1
 8019e80:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	7a1b      	ldrb	r3, [r3, #8]
 8019e88:	f343 0303 	sbfx	r3, r3, #0, #4
 8019e8c:	b25a      	sxtb	r2, r3
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	7a1b      	ldrb	r3, [r3, #8]
 8019e94:	f343 1303 	sbfx	r3, r3, #4, #4
 8019e98:	b25b      	sxtb	r3, r3
 8019e9a:	429a      	cmp	r2, r3
 8019e9c:	dd01      	ble.n	8019ea2 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019e9e:	2301      	movs	r3, #1
 8019ea0:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019ea2:	7bbb      	ldrb	r3, [r7, #14]
 8019ea4:	f083 0301 	eor.w	r3, r3, #1
 8019ea8:	b2db      	uxtb	r3, r3
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d010      	beq.n	8019ed0 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	f107 020c 	add.w	r2, r7, #12
 8019eb8:	4611      	mov	r1, r2
 8019eba:	4618      	mov	r0, r3
 8019ebc:	f7fe feee 	bl	8018c9c <VerifyRfFreq>
 8019ec0:	4603      	mov	r3, r0
 8019ec2:	f083 0301 	eor.w	r3, r3, #1
 8019ec6:	b2db      	uxtb	r3, r3
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d001      	beq.n	8019ed0 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019ecc:	2301      	movs	r3, #1
 8019ece:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019ed0:	7bfb      	ldrb	r3, [r7, #15]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d004      	beq.n	8019ee0 <RegionEU868ChannelAdd+0xcc>
 8019ed6:	7bbb      	ldrb	r3, [r7, #14]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d001      	beq.n	8019ee0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019edc:	2306      	movs	r3, #6
 8019ede:	e035      	b.n	8019f4c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019ee0:	7bfb      	ldrb	r3, [r7, #15]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d001      	beq.n	8019eea <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019ee6:	2305      	movs	r3, #5
 8019ee8:	e030      	b.n	8019f4c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019eea:	7bbb      	ldrb	r3, [r7, #14]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d001      	beq.n	8019ef4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019ef0:	2304      	movs	r3, #4
 8019ef2:	e02b      	b.n	8019f4c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019ef4:	4b17      	ldr	r3, [pc, #92]	; (8019f54 <RegionEU868ChannelAdd+0x140>)
 8019ef6:	6819      	ldr	r1, [r3, #0]
 8019ef8:	7b7a      	ldrb	r2, [r7, #13]
 8019efa:	4613      	mov	r3, r2
 8019efc:	005b      	lsls	r3, r3, #1
 8019efe:	4413      	add	r3, r2
 8019f00:	009b      	lsls	r3, r3, #2
 8019f02:	18c8      	adds	r0, r1, r3
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	220c      	movs	r2, #12
 8019f0a:	4619      	mov	r1, r3
 8019f0c:	f001 faab 	bl	801b466 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019f10:	4b10      	ldr	r3, [pc, #64]	; (8019f54 <RegionEU868ChannelAdd+0x140>)
 8019f12:	6819      	ldr	r1, [r3, #0]
 8019f14:	7b7a      	ldrb	r2, [r7, #13]
 8019f16:	7b38      	ldrb	r0, [r7, #12]
 8019f18:	4613      	mov	r3, r2
 8019f1a:	005b      	lsls	r3, r3, #1
 8019f1c:	4413      	add	r3, r2
 8019f1e:	009b      	lsls	r3, r3, #2
 8019f20:	440b      	add	r3, r1
 8019f22:	3309      	adds	r3, #9
 8019f24:	4602      	mov	r2, r0
 8019f26:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019f28:	4b0a      	ldr	r3, [pc, #40]	; (8019f54 <RegionEU868ChannelAdd+0x140>)
 8019f2a:	681b      	ldr	r3, [r3, #0]
 8019f2c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8019f30:	b21a      	sxth	r2, r3
 8019f32:	7b7b      	ldrb	r3, [r7, #13]
 8019f34:	2101      	movs	r1, #1
 8019f36:	fa01 f303 	lsl.w	r3, r1, r3
 8019f3a:	b21b      	sxth	r3, r3
 8019f3c:	4313      	orrs	r3, r2
 8019f3e:	b21a      	sxth	r2, r3
 8019f40:	4b04      	ldr	r3, [pc, #16]	; (8019f54 <RegionEU868ChannelAdd+0x140>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	b292      	uxth	r2, r2
 8019f46:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8019f4a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	3710      	adds	r7, #16
 8019f50:	46bd      	mov	sp, r7
 8019f52:	bd80      	pop	{r7, pc}
 8019f54:	20001a64 	.word	0x20001a64

08019f58 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b086      	sub	sp, #24
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	781b      	ldrb	r3, [r3, #0]
 8019f64:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019f66:	7dfb      	ldrb	r3, [r7, #23]
 8019f68:	2b02      	cmp	r3, #2
 8019f6a:	d801      	bhi.n	8019f70 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	e016      	b.n	8019f9e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019f70:	4b0d      	ldr	r3, [pc, #52]	; (8019fa8 <RegionEU868ChannelsRemove+0x50>)
 8019f72:	6819      	ldr	r1, [r3, #0]
 8019f74:	7dfa      	ldrb	r2, [r7, #23]
 8019f76:	4613      	mov	r3, r2
 8019f78:	005b      	lsls	r3, r3, #1
 8019f7a:	4413      	add	r3, r2
 8019f7c:	009b      	lsls	r3, r3, #2
 8019f7e:	440b      	add	r3, r1
 8019f80:	461a      	mov	r2, r3
 8019f82:	2300      	movs	r3, #0
 8019f84:	6013      	str	r3, [r2, #0]
 8019f86:	6053      	str	r3, [r2, #4]
 8019f88:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019f8a:	4b07      	ldr	r3, [pc, #28]	; (8019fa8 <RegionEU868ChannelsRemove+0x50>)
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019f92:	7df9      	ldrb	r1, [r7, #23]
 8019f94:	2210      	movs	r2, #16
 8019f96:	4618      	mov	r0, r3
 8019f98:	f7fe f918 	bl	80181cc <RegionCommonChanDisable>
 8019f9c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	3718      	adds	r7, #24
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	bd80      	pop	{r7, pc}
 8019fa6:	bf00      	nop
 8019fa8:	20001a64 	.word	0x20001a64

08019fac <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019fac:	b480      	push	{r7}
 8019fae:	b085      	sub	sp, #20
 8019fb0:	af00      	add	r7, sp, #0
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	71fb      	strb	r3, [r7, #7]
 8019fb6:	460b      	mov	r3, r1
 8019fb8:	71bb      	strb	r3, [r7, #6]
 8019fba:	4613      	mov	r3, r2
 8019fbc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019fbe:	79ba      	ldrb	r2, [r7, #6]
 8019fc0:	797b      	ldrb	r3, [r7, #5]
 8019fc2:	1ad3      	subs	r3, r2, r3
 8019fc4:	b2db      	uxtb	r3, r3
 8019fc6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	da01      	bge.n	8019fd4 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019fd0:	2300      	movs	r3, #0
 8019fd2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019fd4:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	3714      	adds	r7, #20
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bc80      	pop	{r7}
 8019fde:	4770      	bx	lr

08019fe0 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b084      	sub	sp, #16
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	603b      	str	r3, [r7, #0]
 8019fe8:	4603      	mov	r3, r0
 8019fea:	71fb      	strb	r3, [r7, #7]
 8019fec:	460b      	mov	r3, r1
 8019fee:	71bb      	strb	r3, [r7, #6]
 8019ff0:	4613      	mov	r3, r2
 8019ff2:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8019ff4:	79fb      	ldrb	r3, [r7, #7]
 8019ff6:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8019ff8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8019ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a000:	4611      	mov	r1, r2
 801a002:	4618      	mov	r0, r3
 801a004:	f7fe fdcd 	bl	8018ba2 <RegionCommonLimitTxPower>
 801a008:	4603      	mov	r3, r0
 801a00a:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801a00c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a010:	2b04      	cmp	r3, #4
 801a012:	d106      	bne.n	801a022 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801a014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a018:	2b02      	cmp	r3, #2
 801a01a:	bfb8      	it	lt
 801a01c:	2302      	movlt	r3, #2
 801a01e:	73fb      	strb	r3, [r7, #15]
 801a020:	e00d      	b.n	801a03e <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a022:	2204      	movs	r2, #4
 801a024:	2100      	movs	r1, #0
 801a026:	6838      	ldr	r0, [r7, #0]
 801a028:	f7fe f904 	bl	8018234 <RegionCommonCountChannels>
 801a02c:	4603      	mov	r3, r0
 801a02e:	2b31      	cmp	r3, #49	; 0x31
 801a030:	d805      	bhi.n	801a03e <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a036:	2b05      	cmp	r3, #5
 801a038:	bfb8      	it	lt
 801a03a:	2305      	movlt	r3, #5
 801a03c:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a042:	4618      	mov	r0, r3
 801a044:	3710      	adds	r7, #16
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}
	...

0801a04c <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b082      	sub	sp, #8
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a054:	4b18      	ldr	r3, [pc, #96]	; (801a0b8 <VerifyRfFreq+0x6c>)
 801a056:	6a1b      	ldr	r3, [r3, #32]
 801a058:	6878      	ldr	r0, [r7, #4]
 801a05a:	4798      	blx	r3
 801a05c:	4603      	mov	r3, r0
 801a05e:	f083 0301 	eor.w	r3, r3, #1
 801a062:	b2db      	uxtb	r3, r3
 801a064:	2b00      	cmp	r3, #0
 801a066:	d001      	beq.n	801a06c <VerifyRfFreq+0x20>
    {
        return false;
 801a068:	2300      	movs	r3, #0
 801a06a:	e021      	b.n	801a0b0 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	4a13      	ldr	r2, [pc, #76]	; (801a0bc <VerifyRfFreq+0x70>)
 801a070:	4293      	cmp	r3, r2
 801a072:	d910      	bls.n	801a096 <VerifyRfFreq+0x4a>
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	4a12      	ldr	r2, [pc, #72]	; (801a0c0 <VerifyRfFreq+0x74>)
 801a078:	4293      	cmp	r3, r2
 801a07a:	d80c      	bhi.n	801a096 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a07c:	687a      	ldr	r2, [r7, #4]
 801a07e:	4b11      	ldr	r3, [pc, #68]	; (801a0c4 <VerifyRfFreq+0x78>)
 801a080:	4413      	add	r3, r2
 801a082:	4a11      	ldr	r2, [pc, #68]	; (801a0c8 <VerifyRfFreq+0x7c>)
 801a084:	fba2 1203 	umull	r1, r2, r2, r3
 801a088:	0c92      	lsrs	r2, r2, #18
 801a08a:	4910      	ldr	r1, [pc, #64]	; (801a0cc <VerifyRfFreq+0x80>)
 801a08c:	fb01 f202 	mul.w	r2, r1, r2
 801a090:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a092:	2a00      	cmp	r2, #0
 801a094:	d001      	beq.n	801a09a <VerifyRfFreq+0x4e>
    {
        return false;
 801a096:	2300      	movs	r3, #0
 801a098:	e00a      	b.n	801a0b0 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	4a0c      	ldr	r2, [pc, #48]	; (801a0d0 <VerifyRfFreq+0x84>)
 801a09e:	4293      	cmp	r3, r2
 801a0a0:	d903      	bls.n	801a0aa <VerifyRfFreq+0x5e>
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	4a06      	ldr	r2, [pc, #24]	; (801a0c0 <VerifyRfFreq+0x74>)
 801a0a6:	4293      	cmp	r3, r2
 801a0a8:	d901      	bls.n	801a0ae <VerifyRfFreq+0x62>
    {
        return false;
 801a0aa:	2300      	movs	r3, #0
 801a0ac:	e000      	b.n	801a0b0 <VerifyRfFreq+0x64>
    }
    return true;
 801a0ae:	2301      	movs	r3, #1
}
 801a0b0:	4618      	mov	r0, r3
 801a0b2:	3708      	adds	r7, #8
 801a0b4:	46bd      	mov	sp, r7
 801a0b6:	bd80      	pop	{r7, pc}
 801a0b8:	08020e4c 	.word	0x08020e4c
 801a0bc:	3708709f 	.word	0x3708709f
 801a0c0:	374886e0 	.word	0x374886e0
 801a0c4:	c8f78f60 	.word	0xc8f78f60
 801a0c8:	6fd91d85 	.word	0x6fd91d85
 801a0cc:	000927c0 	.word	0x000927c0
 801a0d0:	35c8015f 	.word	0x35c8015f

0801a0d4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a0d4:	b590      	push	{r4, r7, lr}
 801a0d6:	b089      	sub	sp, #36	; 0x24
 801a0d8:	af04      	add	r7, sp, #16
 801a0da:	4603      	mov	r3, r0
 801a0dc:	460a      	mov	r2, r1
 801a0de:	71fb      	strb	r3, [r7, #7]
 801a0e0:	4613      	mov	r3, r2
 801a0e2:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a0e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0e8:	4a0f      	ldr	r2, [pc, #60]	; (801a128 <GetTimeOnAir+0x54>)
 801a0ea:	5cd3      	ldrb	r3, [r2, r3]
 801a0ec:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a0ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0f2:	490e      	ldr	r1, [pc, #56]	; (801a12c <GetTimeOnAir+0x58>)
 801a0f4:	4618      	mov	r0, r3
 801a0f6:	f7fe fd69 	bl	8018bcc <RegionCommonGetBandwidth>
 801a0fa:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a0fc:	4b0c      	ldr	r3, [pc, #48]	; (801a130 <GetTimeOnAir+0x5c>)
 801a0fe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a100:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a104:	88bb      	ldrh	r3, [r7, #4]
 801a106:	b2db      	uxtb	r3, r3
 801a108:	2101      	movs	r1, #1
 801a10a:	9103      	str	r1, [sp, #12]
 801a10c:	9302      	str	r3, [sp, #8]
 801a10e:	2300      	movs	r3, #0
 801a110:	9301      	str	r3, [sp, #4]
 801a112:	2308      	movs	r3, #8
 801a114:	9300      	str	r3, [sp, #0]
 801a116:	2301      	movs	r3, #1
 801a118:	68b9      	ldr	r1, [r7, #8]
 801a11a:	2001      	movs	r0, #1
 801a11c:	47a0      	blx	r4
 801a11e:	4603      	mov	r3, r0
}
 801a120:	4618      	mov	r0, r3
 801a122:	3714      	adds	r7, #20
 801a124:	46bd      	mov	sp, r7
 801a126:	bd90      	pop	{r4, r7, pc}
 801a128:	08020dc8 	.word	0x08020dc8
 801a12c:	08020dd8 	.word	0x08020dd8
 801a130:	08020e4c 	.word	0x08020e4c

0801a134 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a134:	b580      	push	{r7, lr}
 801a136:	b088      	sub	sp, #32
 801a138:	af00      	add	r7, sp, #0
 801a13a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a13c:	2300      	movs	r3, #0
 801a13e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	781b      	ldrb	r3, [r3, #0]
 801a144:	3b01      	subs	r3, #1
 801a146:	2b37      	cmp	r3, #55	; 0x37
 801a148:	f200 8136 	bhi.w	801a3b8 <RegionUS915GetPhyParam+0x284>
 801a14c:	a201      	add	r2, pc, #4	; (adr r2, 801a154 <RegionUS915GetPhyParam+0x20>)
 801a14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a152:	bf00      	nop
 801a154:	0801a235 	.word	0x0801a235
 801a158:	0801a23b 	.word	0x0801a23b
 801a15c:	0801a3b9 	.word	0x0801a3b9
 801a160:	0801a3b9 	.word	0x0801a3b9
 801a164:	0801a3b9 	.word	0x0801a3b9
 801a168:	0801a241 	.word	0x0801a241
 801a16c:	0801a3b9 	.word	0x0801a3b9
 801a170:	0801a27b 	.word	0x0801a27b
 801a174:	0801a3b9 	.word	0x0801a3b9
 801a178:	0801a281 	.word	0x0801a281
 801a17c:	0801a287 	.word	0x0801a287
 801a180:	0801a28d 	.word	0x0801a28d
 801a184:	0801a293 	.word	0x0801a293
 801a188:	0801a2a3 	.word	0x0801a2a3
 801a18c:	0801a2b3 	.word	0x0801a2b3
 801a190:	0801a2b9 	.word	0x0801a2b9
 801a194:	0801a2c1 	.word	0x0801a2c1
 801a198:	0801a2c9 	.word	0x0801a2c9
 801a19c:	0801a2d1 	.word	0x0801a2d1
 801a1a0:	0801a2d9 	.word	0x0801a2d9
 801a1a4:	0801a2e1 	.word	0x0801a2e1
 801a1a8:	0801a2f5 	.word	0x0801a2f5
 801a1ac:	0801a2fb 	.word	0x0801a2fb
 801a1b0:	0801a301 	.word	0x0801a301
 801a1b4:	0801a307 	.word	0x0801a307
 801a1b8:	0801a313 	.word	0x0801a313
 801a1bc:	0801a31f 	.word	0x0801a31f
 801a1c0:	0801a325 	.word	0x0801a325
 801a1c4:	0801a32d 	.word	0x0801a32d
 801a1c8:	0801a333 	.word	0x0801a333
 801a1cc:	0801a339 	.word	0x0801a339
 801a1d0:	0801a33f 	.word	0x0801a33f
 801a1d4:	0801a247 	.word	0x0801a247
 801a1d8:	0801a3b9 	.word	0x0801a3b9
 801a1dc:	0801a3b9 	.word	0x0801a3b9
 801a1e0:	0801a3b9 	.word	0x0801a3b9
 801a1e4:	0801a3b9 	.word	0x0801a3b9
 801a1e8:	0801a3b9 	.word	0x0801a3b9
 801a1ec:	0801a3b9 	.word	0x0801a3b9
 801a1f0:	0801a3b9 	.word	0x0801a3b9
 801a1f4:	0801a3b9 	.word	0x0801a3b9
 801a1f8:	0801a3b9 	.word	0x0801a3b9
 801a1fc:	0801a3b9 	.word	0x0801a3b9
 801a200:	0801a3b9 	.word	0x0801a3b9
 801a204:	0801a3b9 	.word	0x0801a3b9
 801a208:	0801a3b9 	.word	0x0801a3b9
 801a20c:	0801a347 	.word	0x0801a347
 801a210:	0801a35b 	.word	0x0801a35b
 801a214:	0801a369 	.word	0x0801a369
 801a218:	0801a36f 	.word	0x0801a36f
 801a21c:	0801a3b9 	.word	0x0801a3b9
 801a220:	0801a375 	.word	0x0801a375
 801a224:	0801a389 	.word	0x0801a389
 801a228:	0801a38f 	.word	0x0801a38f
 801a22c:	0801a395 	.word	0x0801a395
 801a230:	0801a3a5 	.word	0x0801a3a5
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a234:	2308      	movs	r3, #8
 801a236:	61bb      	str	r3, [r7, #24]
            break;
 801a238:	e0bf      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a23a:	2300      	movs	r3, #0
 801a23c:	61bb      	str	r3, [r7, #24]
            break;
 801a23e:	e0bc      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a240:	2300      	movs	r3, #0
 801a242:	61bb      	str	r3, [r7, #24]
            break;
 801a244:	e0b9      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a24c:	733b      	strb	r3, [r7, #12]
 801a24e:	2304      	movs	r3, #4
 801a250:	737b      	strb	r3, [r7, #13]
 801a252:	2300      	movs	r3, #0
 801a254:	73bb      	strb	r3, [r7, #14]
 801a256:	2348      	movs	r3, #72	; 0x48
 801a258:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a25a:	4b5b      	ldr	r3, [pc, #364]	; (801a3c8 <RegionUS915GetPhyParam+0x294>)
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a262:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a264:	4b58      	ldr	r3, [pc, #352]	; (801a3c8 <RegionUS915GetPhyParam+0x294>)
 801a266:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a268:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a26a:	f107 030c 	add.w	r3, r7, #12
 801a26e:	4618      	mov	r0, r3
 801a270:	f7fe fc59 	bl	8018b26 <RegionCommonGetNextLowerTxDr>
 801a274:	4603      	mov	r3, r0
 801a276:	61bb      	str	r3, [r7, #24]
            break;
 801a278:	e09f      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a27a:	2300      	movs	r3, #0
 801a27c:	61bb      	str	r3, [r7, #24]
            break;
 801a27e:	e09c      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a280:	2300      	movs	r3, #0
 801a282:	61bb      	str	r3, [r7, #24]
            break;
 801a284:	e099      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a286:	2340      	movs	r3, #64	; 0x40
 801a288:	61bb      	str	r3, [r7, #24]
            break;
 801a28a:	e096      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a28c:	2320      	movs	r3, #32
 801a28e:	61bb      	str	r3, [r7, #24]
            break;
 801a290:	e093      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a298:	461a      	mov	r2, r3
 801a29a:	4b4c      	ldr	r3, [pc, #304]	; (801a3cc <RegionUS915GetPhyParam+0x298>)
 801a29c:	5c9b      	ldrb	r3, [r3, r2]
 801a29e:	61bb      	str	r3, [r7, #24]
            break;
 801a2a0:	e08b      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a2a8:	461a      	mov	r2, r3
 801a2aa:	4b49      	ldr	r3, [pc, #292]	; (801a3d0 <RegionUS915GetPhyParam+0x29c>)
 801a2ac:	5c9b      	ldrb	r3, [r3, r2]
 801a2ae:	61bb      	str	r3, [r7, #24]
            break;
 801a2b0:	e083      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	61bb      	str	r3, [r7, #24]
            break;
 801a2b6:	e080      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a2b8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a2bc:	61bb      	str	r3, [r7, #24]
            break;
 801a2be:	e07c      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a2c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a2c4:	61bb      	str	r3, [r7, #24]
            break;
 801a2c6:	e078      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a2c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a2cc:	61bb      	str	r3, [r7, #24]
            break;
 801a2ce:	e074      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a2d0:	f241 3388 	movw	r3, #5000	; 0x1388
 801a2d4:	61bb      	str	r3, [r7, #24]
            break;
 801a2d6:	e070      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a2d8:	f241 7370 	movw	r3, #6000	; 0x1770
 801a2dc:	61bb      	str	r3, [r7, #24]
            break;
 801a2de:	e06c      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801a2e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a2e4:	483b      	ldr	r0, [pc, #236]	; (801a3d4 <RegionUS915GetPhyParam+0x2a0>)
 801a2e6:	f001 f8a7 	bl	801b438 <randr>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a2f0:	61bb      	str	r3, [r7, #24]
            break;
 801a2f2:	e062      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a2f4:	2300      	movs	r3, #0
 801a2f6:	61bb      	str	r3, [r7, #24]
            break;
 801a2f8:	e05f      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a2fa:	4b37      	ldr	r3, [pc, #220]	; (801a3d8 <RegionUS915GetPhyParam+0x2a4>)
 801a2fc:	61bb      	str	r3, [r7, #24]
            break;
 801a2fe:	e05c      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a300:	2308      	movs	r3, #8
 801a302:	61bb      	str	r3, [r7, #24]
            break;
 801a304:	e059      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a306:	4b30      	ldr	r3, [pc, #192]	; (801a3c8 <RegionUS915GetPhyParam+0x294>)
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a30e:	61bb      	str	r3, [r7, #24]
            break;
 801a310:	e053      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a312:	4b2d      	ldr	r3, [pc, #180]	; (801a3c8 <RegionUS915GetPhyParam+0x294>)
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a31a:	61bb      	str	r3, [r7, #24]
            break;
 801a31c:	e04d      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a31e:	2348      	movs	r3, #72	; 0x48
 801a320:	61bb      	str	r3, [r7, #24]
            break;
 801a322:	e04a      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a324:	4b28      	ldr	r3, [pc, #160]	; (801a3c8 <RegionUS915GetPhyParam+0x294>)
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	61bb      	str	r3, [r7, #24]
            break;
 801a32a:	e046      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a32c:	2300      	movs	r3, #0
 801a32e:	61bb      	str	r3, [r7, #24]
            break;
 801a330:	e043      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a332:	2300      	movs	r3, #0
 801a334:	61bb      	str	r3, [r7, #24]
            break;
 801a336:	e040      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a338:	4b28      	ldr	r3, [pc, #160]	; (801a3dc <RegionUS915GetPhyParam+0x2a8>)
 801a33a:	61bb      	str	r3, [r7, #24]
            break;
 801a33c:	e03d      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a33e:	f04f 0300 	mov.w	r3, #0
 801a342:	61bb      	str	r3, [r7, #24]
            break;
 801a344:	e039      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	791b      	ldrb	r3, [r3, #4]
 801a34a:	4a25      	ldr	r2, [pc, #148]	; (801a3e0 <RegionUS915GetPhyParam+0x2ac>)
 801a34c:	4922      	ldr	r1, [pc, #136]	; (801a3d8 <RegionUS915GetPhyParam+0x2a4>)
 801a34e:	4618      	mov	r0, r3
 801a350:	f7fd fd4b 	bl	8017dea <RegionBaseUSCalcDownlinkFrequency>
 801a354:	4603      	mov	r3, r0
 801a356:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a358:	e02f      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a35a:	2317      	movs	r3, #23
 801a35c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a35e:	2304      	movs	r3, #4
 801a360:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a362:	2303      	movs	r3, #3
 801a364:	76bb      	strb	r3, [r7, #26]
            break;
 801a366:	e028      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a368:	2308      	movs	r3, #8
 801a36a:	61bb      	str	r3, [r7, #24]
            break;
 801a36c:	e025      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a36e:	2308      	movs	r3, #8
 801a370:	61bb      	str	r3, [r7, #24]
            break;
 801a372:	e022      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	791b      	ldrb	r3, [r3, #4]
 801a378:	4a19      	ldr	r2, [pc, #100]	; (801a3e0 <RegionUS915GetPhyParam+0x2ac>)
 801a37a:	4917      	ldr	r1, [pc, #92]	; (801a3d8 <RegionUS915GetPhyParam+0x2a4>)
 801a37c:	4618      	mov	r0, r3
 801a37e:	f7fd fd34 	bl	8017dea <RegionBaseUSCalcDownlinkFrequency>
 801a382:	4603      	mov	r3, r0
 801a384:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a386:	e018      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a388:	2308      	movs	r3, #8
 801a38a:	61bb      	str	r3, [r7, #24]
            break;
 801a38c:	e015      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a38e:	2308      	movs	r3, #8
 801a390:	61bb      	str	r3, [r7, #24]
            break;
 801a392:	e012      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a39a:	461a      	mov	r2, r3
 801a39c:	4b11      	ldr	r3, [pc, #68]	; (801a3e4 <RegionUS915GetPhyParam+0x2b0>)
 801a39e:	5c9b      	ldrb	r3, [r3, r2]
 801a3a0:	61bb      	str	r3, [r7, #24]
            break;
 801a3a2:	e00a      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a3aa:	490f      	ldr	r1, [pc, #60]	; (801a3e8 <RegionUS915GetPhyParam+0x2b4>)
 801a3ac:	4618      	mov	r0, r3
 801a3ae:	f7fe fc0d 	bl	8018bcc <RegionCommonGetBandwidth>
 801a3b2:	4603      	mov	r3, r0
 801a3b4:	61bb      	str	r3, [r7, #24]
            break;
 801a3b6:	e000      	b.n	801a3ba <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801a3b8:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a3ba:	69bb      	ldr	r3, [r7, #24]
 801a3bc:	61fb      	str	r3, [r7, #28]
 801a3be:	69fb      	ldr	r3, [r7, #28]
}
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	3720      	adds	r7, #32
 801a3c4:	46bd      	mov	sp, r7
 801a3c6:	bd80      	pop	{r7, pc}
 801a3c8:	20001a70 	.word	0x20001a70
 801a3cc:	08020e2c 	.word	0x08020e2c
 801a3d0:	08020e3c 	.word	0x08020e3c
 801a3d4:	fffffc18 	.word	0xfffffc18
 801a3d8:	370870a0 	.word	0x370870a0
 801a3dc:	4200999a 	.word	0x4200999a
 801a3e0:	000927c0 	.word	0x000927c0
 801a3e4:	08020dc8 	.word	0x08020dc8
 801a3e8:	08020dd8 	.word	0x08020dd8

0801a3ec <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a3ec:	b590      	push	{r4, r7, lr}
 801a3ee:	b085      	sub	sp, #20
 801a3f0:	af02      	add	r7, sp, #8
 801a3f2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a3f4:	4b11      	ldr	r3, [pc, #68]	; (801a43c <RegionUS915SetBandTxDone+0x50>)
 801a3f6:	681a      	ldr	r2, [r3, #0]
 801a3f8:	4b11      	ldr	r3, [pc, #68]	; (801a440 <RegionUS915SetBandTxDone+0x54>)
 801a3fa:	6819      	ldr	r1, [r3, #0]
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	781b      	ldrb	r3, [r3, #0]
 801a400:	4618      	mov	r0, r3
 801a402:	4603      	mov	r3, r0
 801a404:	005b      	lsls	r3, r3, #1
 801a406:	4403      	add	r3, r0
 801a408:	009b      	lsls	r3, r3, #2
 801a40a:	440b      	add	r3, r1
 801a40c:	3309      	adds	r3, #9
 801a40e:	781b      	ldrb	r3, [r3, #0]
 801a410:	4619      	mov	r1, r3
 801a412:	460b      	mov	r3, r1
 801a414:	005b      	lsls	r3, r3, #1
 801a416:	440b      	add	r3, r1
 801a418:	00db      	lsls	r3, r3, #3
 801a41a:	18d0      	adds	r0, r2, r3
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	6899      	ldr	r1, [r3, #8]
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	785c      	ldrb	r4, [r3, #1]
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	691a      	ldr	r2, [r3, #16]
 801a428:	9200      	str	r2, [sp, #0]
 801a42a:	68db      	ldr	r3, [r3, #12]
 801a42c:	4622      	mov	r2, r4
 801a42e:	f7fd ff53 	bl	80182d8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801a432:	bf00      	nop
 801a434:	370c      	adds	r7, #12
 801a436:	46bd      	mov	sp, r7
 801a438:	bd90      	pop	{r4, r7, pc}
 801a43a:	bf00      	nop
 801a43c:	20001a74 	.word	0x20001a74
 801a440:	20001a70 	.word	0x20001a70

0801a444 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b08a      	sub	sp, #40	; 0x28
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a44c:	2301      	movs	r3, #1
 801a44e:	81bb      	strh	r3, [r7, #12]
 801a450:	2300      	movs	r3, #0
 801a452:	73bb      	strb	r3, [r7, #14]
 801a454:	2300      	movs	r3, #0
 801a456:	613b      	str	r3, [r7, #16]
 801a458:	2300      	movs	r3, #0
 801a45a:	617b      	str	r3, [r7, #20]
 801a45c:	2300      	movs	r3, #0
 801a45e:	61bb      	str	r3, [r7, #24]
 801a460:	2300      	movs	r3, #0
 801a462:	61fb      	str	r3, [r7, #28]
 801a464:	2300      	movs	r3, #0
 801a466:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	7b1b      	ldrb	r3, [r3, #12]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d007      	beq.n	801a482 <RegionUS915InitDefaults+0x3e>
 801a472:	2b00      	cmp	r3, #0
 801a474:	f2c0 8104 	blt.w	801a680 <RegionUS915InitDefaults+0x23c>
 801a478:	3b01      	subs	r3, #1
 801a47a:	2b01      	cmp	r3, #1
 801a47c:	f200 8100 	bhi.w	801a680 <RegionUS915InitDefaults+0x23c>
 801a480:	e0ce      	b.n	801a620 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	2b00      	cmp	r3, #0
 801a488:	f000 80fc 	beq.w	801a684 <RegionUS915InitDefaults+0x240>
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	685b      	ldr	r3, [r3, #4]
 801a490:	2b00      	cmp	r3, #0
 801a492:	f000 80f7 	beq.w	801a684 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	4a7c      	ldr	r2, [pc, #496]	; (801a68c <RegionUS915InitDefaults+0x248>)
 801a49c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	685b      	ldr	r3, [r3, #4]
 801a4a2:	4a7b      	ldr	r2, [pc, #492]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a4a4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	689b      	ldr	r3, [r3, #8]
 801a4aa:	4a7a      	ldr	r2, [pc, #488]	; (801a694 <RegionUS915InitDefaults+0x250>)
 801a4ac:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a4ae:	4b77      	ldr	r3, [pc, #476]	; (801a68c <RegionUS915InitDefaults+0x248>)
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	2200      	movs	r2, #0
 801a4b4:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a4b6:	4b75      	ldr	r3, [pc, #468]	; (801a68c <RegionUS915InitDefaults+0x248>)
 801a4b8:	681b      	ldr	r3, [r3, #0]
 801a4ba:	2200      	movs	r2, #0
 801a4bc:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a4be:	4b75      	ldr	r3, [pc, #468]	; (801a694 <RegionUS915InitDefaults+0x250>)
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	f107 010c 	add.w	r1, r7, #12
 801a4c6:	2218      	movs	r2, #24
 801a4c8:	4618      	mov	r0, r3
 801a4ca:	f000 ffcc 	bl	801b466 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a4ce:	2300      	movs	r3, #0
 801a4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a4d4:	e02e      	b.n	801a534 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a4d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a4da:	4a6f      	ldr	r2, [pc, #444]	; (801a698 <RegionUS915InitDefaults+0x254>)
 801a4dc:	fb03 f202 	mul.w	r2, r3, r2
 801a4e0:	4b6e      	ldr	r3, [pc, #440]	; (801a69c <RegionUS915InitDefaults+0x258>)
 801a4e2:	4413      	add	r3, r2
 801a4e4:	4a6a      	ldr	r2, [pc, #424]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a4e6:	6811      	ldr	r1, [r2, #0]
 801a4e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	4613      	mov	r3, r2
 801a4f0:	005b      	lsls	r3, r3, #1
 801a4f2:	4413      	add	r3, r2
 801a4f4:	009b      	lsls	r3, r3, #2
 801a4f6:	440b      	add	r3, r1
 801a4f8:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a4fa:	4b65      	ldr	r3, [pc, #404]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a4fc:	6819      	ldr	r1, [r3, #0]
 801a4fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a502:	4613      	mov	r3, r2
 801a504:	005b      	lsls	r3, r3, #1
 801a506:	4413      	add	r3, r2
 801a508:	009b      	lsls	r3, r3, #2
 801a50a:	440b      	add	r3, r1
 801a50c:	3308      	adds	r3, #8
 801a50e:	2230      	movs	r2, #48	; 0x30
 801a510:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a512:	4b5f      	ldr	r3, [pc, #380]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a514:	6819      	ldr	r1, [r3, #0]
 801a516:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a51a:	4613      	mov	r3, r2
 801a51c:	005b      	lsls	r3, r3, #1
 801a51e:	4413      	add	r3, r2
 801a520:	009b      	lsls	r3, r3, #2
 801a522:	440b      	add	r3, r1
 801a524:	3309      	adds	r3, #9
 801a526:	2200      	movs	r2, #0
 801a528:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a52a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a52e:	3301      	adds	r3, #1
 801a530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a538:	2b3f      	cmp	r3, #63	; 0x3f
 801a53a:	d9cc      	bls.n	801a4d6 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a53c:	2340      	movs	r3, #64	; 0x40
 801a53e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a542:	e02f      	b.n	801a5a4 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801a544:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a548:	3b40      	subs	r3, #64	; 0x40
 801a54a:	4a55      	ldr	r2, [pc, #340]	; (801a6a0 <RegionUS915InitDefaults+0x25c>)
 801a54c:	fb03 f202 	mul.w	r2, r3, r2
 801a550:	4b54      	ldr	r3, [pc, #336]	; (801a6a4 <RegionUS915InitDefaults+0x260>)
 801a552:	4413      	add	r3, r2
 801a554:	4a4e      	ldr	r2, [pc, #312]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a556:	6811      	ldr	r1, [r2, #0]
 801a558:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a55c:	4618      	mov	r0, r3
 801a55e:	4613      	mov	r3, r2
 801a560:	005b      	lsls	r3, r3, #1
 801a562:	4413      	add	r3, r2
 801a564:	009b      	lsls	r3, r3, #2
 801a566:	440b      	add	r3, r1
 801a568:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801a56a:	4b49      	ldr	r3, [pc, #292]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a56c:	6819      	ldr	r1, [r3, #0]
 801a56e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a572:	4613      	mov	r3, r2
 801a574:	005b      	lsls	r3, r3, #1
 801a576:	4413      	add	r3, r2
 801a578:	009b      	lsls	r3, r3, #2
 801a57a:	440b      	add	r3, r1
 801a57c:	3308      	adds	r3, #8
 801a57e:	2244      	movs	r2, #68	; 0x44
 801a580:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a582:	4b43      	ldr	r3, [pc, #268]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a584:	6819      	ldr	r1, [r3, #0]
 801a586:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a58a:	4613      	mov	r3, r2
 801a58c:	005b      	lsls	r3, r3, #1
 801a58e:	4413      	add	r3, r2
 801a590:	009b      	lsls	r3, r3, #2
 801a592:	440b      	add	r3, r1
 801a594:	3309      	adds	r3, #9
 801a596:	2200      	movs	r2, #0
 801a598:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a59a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a59e:	3301      	adds	r3, #1
 801a5a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a5a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a5a8:	2b47      	cmp	r3, #71	; 0x47
 801a5aa:	d9cb      	bls.n	801a544 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801a5ac:	4b38      	ldr	r3, [pc, #224]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5b4:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801a5b8:	4b35      	ldr	r3, [pc, #212]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5c0:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801a5c4:	4b32      	ldr	r3, [pc, #200]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5cc:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801a5d0:	4b2f      	ldr	r3, [pc, #188]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5d8:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801a5dc:	4b2c      	ldr	r3, [pc, #176]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	22ff      	movs	r2, #255	; 0xff
 801a5e2:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a5e6:	4b2a      	ldr	r3, [pc, #168]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a5e8:	681b      	ldr	r3, [r3, #0]
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a5f0:	4b27      	ldr	r3, [pc, #156]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a5f8:	4b25      	ldr	r3, [pc, #148]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a600:	2206      	movs	r2, #6
 801a602:	4619      	mov	r1, r3
 801a604:	f7fd fe42 	bl	801828c <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801a608:	4b20      	ldr	r3, [pc, #128]	; (801a68c <RegionUS915InitDefaults+0x248>)
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	4618      	mov	r0, r3
 801a60e:	4b20      	ldr	r3, [pc, #128]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a616:	2206      	movs	r2, #6
 801a618:	4619      	mov	r1, r3
 801a61a:	f7fd fe37 	bl	801828c <RegionCommonChanMaskCopy>
            break;
 801a61e:	e032      	b.n	801a686 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a620:	4b1b      	ldr	r3, [pc, #108]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a622:	681b      	ldr	r3, [r3, #0]
 801a624:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a628:	4b19      	ldr	r3, [pc, #100]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a630:	2206      	movs	r2, #6
 801a632:	4619      	mov	r1, r3
 801a634:	f7fd fe2a 	bl	801828c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 801a638:	2300      	movs	r3, #0
 801a63a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a63e:	e01a      	b.n	801a676 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a640:	4b12      	ldr	r3, [pc, #72]	; (801a68c <RegionUS915InitDefaults+0x248>)
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a648:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a64c:	4b10      	ldr	r3, [pc, #64]	; (801a690 <RegionUS915InitDefaults+0x24c>)
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a654:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a658:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a65c:	4b0b      	ldr	r3, [pc, #44]	; (801a68c <RegionUS915InitDefaults+0x248>)
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a664:	4001      	ands	r1, r0
 801a666:	b289      	uxth	r1, r1
 801a668:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801a66c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a670:	3301      	adds	r3, #1
 801a672:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a676:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a67a:	2b05      	cmp	r3, #5
 801a67c:	d9e0      	bls.n	801a640 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801a67e:	e002      	b.n	801a686 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 801a680:	bf00      	nop
 801a682:	e000      	b.n	801a686 <RegionUS915InitDefaults+0x242>
                return;
 801a684:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801a686:	3728      	adds	r7, #40	; 0x28
 801a688:	46bd      	mov	sp, r7
 801a68a:	bd80      	pop	{r7, pc}
 801a68c:	20001a6c 	.word	0x20001a6c
 801a690:	20001a70 	.word	0x20001a70
 801a694:	20001a74 	.word	0x20001a74
 801a698:	00030d40 	.word	0x00030d40
 801a69c:	35c80160 	.word	0x35c80160
 801a6a0:	00186a00 	.word	0x00186a00
 801a6a4:	35d2afc0 	.word	0x35d2afc0

0801a6a8 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801a6a8:	b580      	push	{r7, lr}
 801a6aa:	b082      	sub	sp, #8
 801a6ac:	af00      	add	r7, sp, #0
 801a6ae:	6078      	str	r0, [r7, #4]
 801a6b0:	460b      	mov	r3, r1
 801a6b2:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801a6b4:	78fb      	ldrb	r3, [r7, #3]
 801a6b6:	2b0f      	cmp	r3, #15
 801a6b8:	d867      	bhi.n	801a78a <RegionUS915Verify+0xe2>
 801a6ba:	a201      	add	r2, pc, #4	; (adr r2, 801a6c0 <RegionUS915Verify+0x18>)
 801a6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a6c0:	0801a701 	.word	0x0801a701
 801a6c4:	0801a78b 	.word	0x0801a78b
 801a6c8:	0801a78b 	.word	0x0801a78b
 801a6cc:	0801a78b 	.word	0x0801a78b
 801a6d0:	0801a78b 	.word	0x0801a78b
 801a6d4:	0801a70f 	.word	0x0801a70f
 801a6d8:	0801a72d 	.word	0x0801a72d
 801a6dc:	0801a74b 	.word	0x0801a74b
 801a6e0:	0801a78b 	.word	0x0801a78b
 801a6e4:	0801a769 	.word	0x0801a769
 801a6e8:	0801a769 	.word	0x0801a769
 801a6ec:	0801a78b 	.word	0x0801a78b
 801a6f0:	0801a78b 	.word	0x0801a78b
 801a6f4:	0801a78b 	.word	0x0801a78b
 801a6f8:	0801a78b 	.word	0x0801a78b
 801a6fc:	0801a787 	.word	0x0801a787
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	4618      	mov	r0, r3
 801a706:	f7ff fca1 	bl	801a04c <VerifyRfFreq>
 801a70a:	4603      	mov	r3, r0
 801a70c:	e03e      	b.n	801a78c <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	f993 3000 	ldrsb.w	r3, [r3]
 801a714:	2204      	movs	r2, #4
 801a716:	2100      	movs	r1, #0
 801a718:	4618      	mov	r0, r3
 801a71a:	f7fd fd3a 	bl	8018192 <RegionCommonValueInRange>
 801a71e:	4603      	mov	r3, r0
 801a720:	2b00      	cmp	r3, #0
 801a722:	bf14      	ite	ne
 801a724:	2301      	movne	r3, #1
 801a726:	2300      	moveq	r3, #0
 801a728:	b2db      	uxtb	r3, r3
 801a72a:	e02f      	b.n	801a78c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	f993 3000 	ldrsb.w	r3, [r3]
 801a732:	2205      	movs	r2, #5
 801a734:	2100      	movs	r1, #0
 801a736:	4618      	mov	r0, r3
 801a738:	f7fd fd2b 	bl	8018192 <RegionCommonValueInRange>
 801a73c:	4603      	mov	r3, r0
 801a73e:	2b00      	cmp	r3, #0
 801a740:	bf14      	ite	ne
 801a742:	2301      	movne	r3, #1
 801a744:	2300      	moveq	r3, #0
 801a746:	b2db      	uxtb	r3, r3
 801a748:	e020      	b.n	801a78c <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	f993 3000 	ldrsb.w	r3, [r3]
 801a750:	220d      	movs	r2, #13
 801a752:	2108      	movs	r1, #8
 801a754:	4618      	mov	r0, r3
 801a756:	f7fd fd1c 	bl	8018192 <RegionCommonValueInRange>
 801a75a:	4603      	mov	r3, r0
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	bf14      	ite	ne
 801a760:	2301      	movne	r3, #1
 801a762:	2300      	moveq	r3, #0
 801a764:	b2db      	uxtb	r3, r3
 801a766:	e011      	b.n	801a78c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	f993 3000 	ldrsb.w	r3, [r3]
 801a76e:	220e      	movs	r2, #14
 801a770:	2100      	movs	r1, #0
 801a772:	4618      	mov	r0, r3
 801a774:	f7fd fd0d 	bl	8018192 <RegionCommonValueInRange>
 801a778:	4603      	mov	r3, r0
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	bf14      	ite	ne
 801a77e:	2301      	movne	r3, #1
 801a780:	2300      	moveq	r3, #0
 801a782:	b2db      	uxtb	r3, r3
 801a784:	e002      	b.n	801a78c <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801a786:	2300      	movs	r3, #0
 801a788:	e000      	b.n	801a78c <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801a78a:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	3708      	adds	r7, #8
 801a790:	46bd      	mov	sp, r7
 801a792:	bd80      	pop	{r7, pc}

0801a794 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801a794:	b480      	push	{r7}
 801a796:	b085      	sub	sp, #20
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	7a1b      	ldrb	r3, [r3, #8]
 801a7a0:	2b10      	cmp	r3, #16
 801a7a2:	d160      	bne.n	801a866 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	685b      	ldr	r3, [r3, #4]
 801a7a8:	330f      	adds	r3, #15
 801a7aa:	781b      	ldrb	r3, [r3, #0]
 801a7ac:	2b01      	cmp	r3, #1
 801a7ae:	d15c      	bne.n	801a86a <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	73fb      	strb	r3, [r7, #15]
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	73bb      	strb	r3, [r7, #14]
 801a7b8:	e051      	b.n	801a85e <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	685a      	ldr	r2, [r3, #4]
 801a7be:	7bbb      	ldrb	r3, [r7, #14]
 801a7c0:	4413      	add	r3, r2
 801a7c2:	7819      	ldrb	r1, [r3, #0]
 801a7c4:	4b2b      	ldr	r3, [pc, #172]	; (801a874 <RegionUS915ApplyCFList+0xe0>)
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	7bfa      	ldrb	r2, [r7, #15]
 801a7ca:	b289      	uxth	r1, r1
 801a7cc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a7d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801a7d4:	4b27      	ldr	r3, [pc, #156]	; (801a874 <RegionUS915ApplyCFList+0xe0>)
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	7bfa      	ldrb	r2, [r7, #15]
 801a7da:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a7de:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	685a      	ldr	r2, [r3, #4]
 801a7e6:	7bbb      	ldrb	r3, [r7, #14]
 801a7e8:	3301      	adds	r3, #1
 801a7ea:	4413      	add	r3, r2
 801a7ec:	781b      	ldrb	r3, [r3, #0]
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	021b      	lsls	r3, r3, #8
 801a7f2:	b299      	uxth	r1, r3
 801a7f4:	4b1f      	ldr	r3, [pc, #124]	; (801a874 <RegionUS915ApplyCFList+0xe0>)
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	7bfa      	ldrb	r2, [r7, #15]
 801a7fa:	4301      	orrs	r1, r0
 801a7fc:	b289      	uxth	r1, r1
 801a7fe:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a802:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801a806:	7bfb      	ldrb	r3, [r7, #15]
 801a808:	2b04      	cmp	r3, #4
 801a80a:	d10f      	bne.n	801a82c <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801a80c:	4b19      	ldr	r3, [pc, #100]	; (801a874 <RegionUS915ApplyCFList+0xe0>)
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	7bfa      	ldrb	r2, [r7, #15]
 801a812:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a816:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a81a:	4b16      	ldr	r3, [pc, #88]	; (801a874 <RegionUS915ApplyCFList+0xe0>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	7bfa      	ldrb	r2, [r7, #15]
 801a820:	b2c9      	uxtb	r1, r1
 801a822:	b289      	uxth	r1, r1
 801a824:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a828:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801a82c:	4b12      	ldr	r3, [pc, #72]	; (801a878 <RegionUS915ApplyCFList+0xe4>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	7bfa      	ldrb	r2, [r7, #15]
 801a832:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a836:	4b0f      	ldr	r3, [pc, #60]	; (801a874 <RegionUS915ApplyCFList+0xe0>)
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	7bfa      	ldrb	r2, [r7, #15]
 801a83c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a840:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a844:	4b0c      	ldr	r3, [pc, #48]	; (801a878 <RegionUS915ApplyCFList+0xe4>)
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	7bfa      	ldrb	r2, [r7, #15]
 801a84a:	4001      	ands	r1, r0
 801a84c:	b289      	uxth	r1, r1
 801a84e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801a852:	7bfb      	ldrb	r3, [r7, #15]
 801a854:	3301      	adds	r3, #1
 801a856:	73fb      	strb	r3, [r7, #15]
 801a858:	7bbb      	ldrb	r3, [r7, #14]
 801a85a:	3302      	adds	r3, #2
 801a85c:	73bb      	strb	r3, [r7, #14]
 801a85e:	7bfb      	ldrb	r3, [r7, #15]
 801a860:	2b04      	cmp	r3, #4
 801a862:	d9aa      	bls.n	801a7ba <RegionUS915ApplyCFList+0x26>
 801a864:	e002      	b.n	801a86c <RegionUS915ApplyCFList+0xd8>
        return;
 801a866:	bf00      	nop
 801a868:	e000      	b.n	801a86c <RegionUS915ApplyCFList+0xd8>
        return;
 801a86a:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801a86c:	3714      	adds	r7, #20
 801a86e:	46bd      	mov	sp, r7
 801a870:	bc80      	pop	{r7}
 801a872:	4770      	bx	lr
 801a874:	20001a70 	.word	0x20001a70
 801a878:	20001a6c 	.word	0x20001a6c

0801a87c <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801a87c:	b580      	push	{r7, lr}
 801a87e:	b084      	sub	sp, #16
 801a880:	af00      	add	r7, sp, #0
 801a882:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	2204      	movs	r2, #4
 801a88a:	2100      	movs	r1, #0
 801a88c:	4618      	mov	r0, r3
 801a88e:	f7fd fcd1 	bl	8018234 <RegionCommonCountChannels>
 801a892:	4603      	mov	r3, r0
 801a894:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801a896:	7bbb      	ldrb	r3, [r7, #14]
 801a898:	2b01      	cmp	r3, #1
 801a89a:	d804      	bhi.n	801a8a6 <RegionUS915ChanMaskSet+0x2a>
 801a89c:	7bbb      	ldrb	r3, [r7, #14]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d001      	beq.n	801a8a6 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	e04a      	b.n	801a93c <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	791b      	ldrb	r3, [r3, #4]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d002      	beq.n	801a8b4 <RegionUS915ChanMaskSet+0x38>
 801a8ae:	2b01      	cmp	r3, #1
 801a8b0:	d036      	beq.n	801a920 <RegionUS915ChanMaskSet+0xa4>
 801a8b2:	e040      	b.n	801a936 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801a8b4:	4b23      	ldr	r3, [pc, #140]	; (801a944 <RegionUS915ChanMaskSet+0xc8>)
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	2206      	movs	r2, #6
 801a8c2:	4619      	mov	r1, r3
 801a8c4:	f7fd fce2 	bl	801828c <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801a8c8:	4b1e      	ldr	r3, [pc, #120]	; (801a944 <RegionUS915ChanMaskSet+0xc8>)
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801a8d0:	4b1c      	ldr	r3, [pc, #112]	; (801a944 <RegionUS915ChanMaskSet+0xc8>)
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	b2d2      	uxtb	r2, r2
 801a8d6:	b292      	uxth	r2, r2
 801a8d8:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a8dc:	4b19      	ldr	r3, [pc, #100]	; (801a944 <RegionUS915ChanMaskSet+0xc8>)
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	2200      	movs	r2, #0
 801a8e2:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	73fb      	strb	r3, [r7, #15]
 801a8ea:	e015      	b.n	801a918 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a8ec:	4b16      	ldr	r3, [pc, #88]	; (801a948 <RegionUS915ChanMaskSet+0xcc>)
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	7bfa      	ldrb	r2, [r7, #15]
 801a8f2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a8f6:	4b13      	ldr	r3, [pc, #76]	; (801a944 <RegionUS915ChanMaskSet+0xc8>)
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	7bfa      	ldrb	r2, [r7, #15]
 801a8fc:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a900:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a904:	4b10      	ldr	r3, [pc, #64]	; (801a948 <RegionUS915ChanMaskSet+0xcc>)
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	7bfa      	ldrb	r2, [r7, #15]
 801a90a:	4001      	ands	r1, r0
 801a90c:	b289      	uxth	r1, r1
 801a90e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a912:	7bfb      	ldrb	r3, [r7, #15]
 801a914:	3301      	adds	r3, #1
 801a916:	73fb      	strb	r3, [r7, #15]
 801a918:	7bfb      	ldrb	r3, [r7, #15]
 801a91a:	2b05      	cmp	r3, #5
 801a91c:	d9e6      	bls.n	801a8ec <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801a91e:	e00c      	b.n	801a93a <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801a920:	4b08      	ldr	r3, [pc, #32]	; (801a944 <RegionUS915ChanMaskSet+0xc8>)
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	2206      	movs	r2, #6
 801a92e:	4619      	mov	r1, r3
 801a930:	f7fd fcac 	bl	801828c <RegionCommonChanMaskCopy>
            break;
 801a934:	e001      	b.n	801a93a <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801a936:	2300      	movs	r3, #0
 801a938:	e000      	b.n	801a93c <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801a93a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801a93c:	4618      	mov	r0, r3
 801a93e:	3710      	adds	r7, #16
 801a940:	46bd      	mov	sp, r7
 801a942:	bd80      	pop	{r7, pc}
 801a944:	20001a70 	.word	0x20001a70
 801a948:	20001a6c 	.word	0x20001a6c

0801a94c <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b088      	sub	sp, #32
 801a950:	af02      	add	r7, sp, #8
 801a952:	60ba      	str	r2, [r7, #8]
 801a954:	607b      	str	r3, [r7, #4]
 801a956:	4603      	mov	r3, r0
 801a958:	73fb      	strb	r3, [r7, #15]
 801a95a:	460b      	mov	r3, r1
 801a95c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801a95e:	2300      	movs	r3, #0
 801a960:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801a962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a966:	2b0d      	cmp	r3, #13
 801a968:	bfa8      	it	ge
 801a96a:	230d      	movge	r3, #13
 801a96c:	b25a      	sxtb	r2, r3
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a978:	4916      	ldr	r1, [pc, #88]	; (801a9d4 <RegionUS915ComputeRxWindowParameters+0x88>)
 801a97a:	4618      	mov	r0, r3
 801a97c:	f7fe f926 	bl	8018bcc <RegionCommonGetBandwidth>
 801a980:	4603      	mov	r3, r0
 801a982:	b2da      	uxtb	r2, r3
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801a988:	687b      	ldr	r3, [r7, #4]
 801a98a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a98e:	461a      	mov	r2, r3
 801a990:	4b11      	ldr	r3, [pc, #68]	; (801a9d8 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801a992:	5c9a      	ldrb	r2, [r3, r2]
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a99a:	4619      	mov	r1, r3
 801a99c:	4b0d      	ldr	r3, [pc, #52]	; (801a9d4 <RegionUS915ComputeRxWindowParameters+0x88>)
 801a99e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a9a2:	4619      	mov	r1, r3
 801a9a4:	4610      	mov	r0, r2
 801a9a6:	f7fd fe8f 	bl	80186c8 <RegionCommonComputeSymbolTimeLoRa>
 801a9aa:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801a9ac:	4b0b      	ldr	r3, [pc, #44]	; (801a9dc <RegionUS915ComputeRxWindowParameters+0x90>)
 801a9ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9b0:	4798      	blx	r3
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	3308      	adds	r3, #8
 801a9b6:	687a      	ldr	r2, [r7, #4]
 801a9b8:	320c      	adds	r2, #12
 801a9ba:	7bb9      	ldrb	r1, [r7, #14]
 801a9bc:	9201      	str	r2, [sp, #4]
 801a9be:	9300      	str	r3, [sp, #0]
 801a9c0:	4603      	mov	r3, r0
 801a9c2:	68ba      	ldr	r2, [r7, #8]
 801a9c4:	6978      	ldr	r0, [r7, #20]
 801a9c6:	f7fd fea5 	bl	8018714 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801a9ca:	bf00      	nop
 801a9cc:	3718      	adds	r7, #24
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	bd80      	pop	{r7, pc}
 801a9d2:	bf00      	nop
 801a9d4:	08020dd8 	.word	0x08020dd8
 801a9d8:	08020dc8 	.word	0x08020dc8
 801a9dc:	08020e4c 	.word	0x08020e4c

0801a9e0 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801a9e0:	b590      	push	{r4, r7, lr}
 801a9e2:	b091      	sub	sp, #68	; 0x44
 801a9e4:	af0a      	add	r7, sp, #40	; 0x28
 801a9e6:	6078      	str	r0, [r7, #4]
 801a9e8:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	785b      	ldrb	r3, [r3, #1]
 801a9ee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	685b      	ldr	r3, [r3, #4]
 801a9fc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801a9fe:	4b34      	ldr	r3, [pc, #208]	; (801aad0 <RegionUS915RxConfig+0xf0>)
 801aa00:	685b      	ldr	r3, [r3, #4]
 801aa02:	4798      	blx	r3
 801aa04:	4603      	mov	r3, r0
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d001      	beq.n	801aa0e <RegionUS915RxConfig+0x2e>
    {
        return false;
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	e05c      	b.n	801aac8 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	7cdb      	ldrb	r3, [r3, #19]
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d109      	bne.n	801aa2a <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	781b      	ldrb	r3, [r3, #0]
 801aa1a:	f003 0307 	and.w	r3, r3, #7
 801aa1e:	4a2d      	ldr	r2, [pc, #180]	; (801aad4 <RegionUS915RxConfig+0xf4>)
 801aa20:	fb03 f202 	mul.w	r2, r3, r2
 801aa24:	4b2c      	ldr	r3, [pc, #176]	; (801aad8 <RegionUS915RxConfig+0xf8>)
 801aa26:	4413      	add	r3, r2
 801aa28:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801aa2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa2e:	4a2b      	ldr	r2, [pc, #172]	; (801aadc <RegionUS915RxConfig+0xfc>)
 801aa30:	5cd3      	ldrb	r3, [r2, r3]
 801aa32:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801aa34:	4b26      	ldr	r3, [pc, #152]	; (801aad0 <RegionUS915RxConfig+0xf0>)
 801aa36:	68db      	ldr	r3, [r3, #12]
 801aa38:	6938      	ldr	r0, [r7, #16]
 801aa3a:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801aa3c:	4b24      	ldr	r3, [pc, #144]	; (801aad0 <RegionUS915RxConfig+0xf0>)
 801aa3e:	699c      	ldr	r4, [r3, #24]
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	789b      	ldrb	r3, [r3, #2]
 801aa44:	4618      	mov	r0, r3
 801aa46:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	689b      	ldr	r3, [r3, #8]
 801aa4e:	b29b      	uxth	r3, r3
 801aa50:	687a      	ldr	r2, [r7, #4]
 801aa52:	7c92      	ldrb	r2, [r2, #18]
 801aa54:	9209      	str	r2, [sp, #36]	; 0x24
 801aa56:	2201      	movs	r2, #1
 801aa58:	9208      	str	r2, [sp, #32]
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	9207      	str	r2, [sp, #28]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	9206      	str	r2, [sp, #24]
 801aa62:	2200      	movs	r2, #0
 801aa64:	9205      	str	r2, [sp, #20]
 801aa66:	2200      	movs	r2, #0
 801aa68:	9204      	str	r2, [sp, #16]
 801aa6a:	2200      	movs	r2, #0
 801aa6c:	9203      	str	r2, [sp, #12]
 801aa6e:	9302      	str	r3, [sp, #8]
 801aa70:	2308      	movs	r3, #8
 801aa72:	9301      	str	r3, [sp, #4]
 801aa74:	2300      	movs	r3, #0
 801aa76:	9300      	str	r3, [sp, #0]
 801aa78:	2301      	movs	r3, #1
 801aa7a:	460a      	mov	r2, r1
 801aa7c:	4601      	mov	r1, r0
 801aa7e:	2001      	movs	r0, #1
 801aa80:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	7c5b      	ldrb	r3, [r3, #17]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d005      	beq.n	801aa96 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801aa8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa8e:	4a14      	ldr	r2, [pc, #80]	; (801aae0 <RegionUS915RxConfig+0x100>)
 801aa90:	5cd3      	ldrb	r3, [r2, r3]
 801aa92:	75fb      	strb	r3, [r7, #23]
 801aa94:	e004      	b.n	801aaa0 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801aa96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa9a:	4a12      	ldr	r2, [pc, #72]	; (801aae4 <RegionUS915RxConfig+0x104>)
 801aa9c:	5cd3      	ldrb	r3, [r2, r3]
 801aa9e:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801aaa0:	4b0b      	ldr	r3, [pc, #44]	; (801aad0 <RegionUS915RxConfig+0xf0>)
 801aaa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801aaa4:	7dfa      	ldrb	r2, [r7, #23]
 801aaa6:	320d      	adds	r2, #13
 801aaa8:	b2d2      	uxtb	r2, r2
 801aaaa:	4611      	mov	r1, r2
 801aaac:	2001      	movs	r0, #1
 801aaae:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	7cdb      	ldrb	r3, [r3, #19]
 801aab4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801aab8:	6939      	ldr	r1, [r7, #16]
 801aaba:	4618      	mov	r0, r3
 801aabc:	f7fe f8a4 	bl	8018c08 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801aac0:	683b      	ldr	r3, [r7, #0]
 801aac2:	7bfa      	ldrb	r2, [r7, #15]
 801aac4:	701a      	strb	r2, [r3, #0]
    return true;
 801aac6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801aac8:	4618      	mov	r0, r3
 801aaca:	371c      	adds	r7, #28
 801aacc:	46bd      	mov	sp, r7
 801aace:	bd90      	pop	{r4, r7, pc}
 801aad0:	08020e4c 	.word	0x08020e4c
 801aad4:	000927c0 	.word	0x000927c0
 801aad8:	370870a0 	.word	0x370870a0
 801aadc:	08020dc8 	.word	0x08020dc8
 801aae0:	08020e3c 	.word	0x08020e3c
 801aae4:	08020e2c 	.word	0x08020e2c

0801aae8 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801aae8:	b590      	push	{r4, r7, lr}
 801aaea:	b093      	sub	sp, #76	; 0x4c
 801aaec:	af0a      	add	r7, sp, #40	; 0x28
 801aaee:	60f8      	str	r0, [r7, #12]
 801aaf0:	60b9      	str	r1, [r7, #8]
 801aaf2:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801aafa:	461a      	mov	r2, r3
 801aafc:	4b49      	ldr	r3, [pc, #292]	; (801ac24 <RegionUS915TxConfig+0x13c>)
 801aafe:	5c9b      	ldrb	r3, [r3, r2]
 801ab00:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801ab08:	4b47      	ldr	r3, [pc, #284]	; (801ac28 <RegionUS915TxConfig+0x140>)
 801ab0a:	681a      	ldr	r2, [r3, #0]
 801ab0c:	4b47      	ldr	r3, [pc, #284]	; (801ac2c <RegionUS915TxConfig+0x144>)
 801ab0e:	6819      	ldr	r1, [r3, #0]
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	781b      	ldrb	r3, [r3, #0]
 801ab14:	461c      	mov	r4, r3
 801ab16:	4623      	mov	r3, r4
 801ab18:	005b      	lsls	r3, r3, #1
 801ab1a:	4423      	add	r3, r4
 801ab1c:	009b      	lsls	r3, r3, #2
 801ab1e:	440b      	add	r3, r1
 801ab20:	3309      	adds	r3, #9
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	4619      	mov	r1, r3
 801ab26:	460b      	mov	r3, r1
 801ab28:	005b      	lsls	r3, r3, #1
 801ab2a:	440b      	add	r3, r1
 801ab2c:	00db      	lsls	r3, r3, #3
 801ab2e:	4413      	add	r3, r2
 801ab30:	f993 1002 	ldrsb.w	r1, [r3, #2]
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ab3a:	4b3c      	ldr	r3, [pc, #240]	; (801ac2c <RegionUS915TxConfig+0x144>)
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801ab42:	f7ff fa4d 	bl	8019fe0 <LimitTxPower>
 801ab46:	4603      	mov	r3, r0
 801ab48:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801ab4a:	68fb      	ldr	r3, [r7, #12]
 801ab4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ab50:	4937      	ldr	r1, [pc, #220]	; (801ac30 <RegionUS915TxConfig+0x148>)
 801ab52:	4618      	mov	r0, r3
 801ab54:	f7fe f83a 	bl	8018bcc <RegionCommonGetBandwidth>
 801ab58:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801ab5e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801ab62:	f04f 0200 	mov.w	r2, #0
 801ab66:	4933      	ldr	r1, [pc, #204]	; (801ac34 <RegionUS915TxConfig+0x14c>)
 801ab68:	4618      	mov	r0, r3
 801ab6a:	f7fd fe8b 	bl	8018884 <RegionCommonComputeTxPower>
 801ab6e:	4603      	mov	r3, r0
 801ab70:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801ab72:	4b31      	ldr	r3, [pc, #196]	; (801ac38 <RegionUS915TxConfig+0x150>)
 801ab74:	68da      	ldr	r2, [r3, #12]
 801ab76:	4b2d      	ldr	r3, [pc, #180]	; (801ac2c <RegionUS915TxConfig+0x144>)
 801ab78:	6819      	ldr	r1, [r3, #0]
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	781b      	ldrb	r3, [r3, #0]
 801ab7e:	4618      	mov	r0, r3
 801ab80:	4603      	mov	r3, r0
 801ab82:	005b      	lsls	r3, r3, #1
 801ab84:	4403      	add	r3, r0
 801ab86:	009b      	lsls	r3, r3, #2
 801ab88:	440b      	add	r3, r1
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801ab90:	4b29      	ldr	r3, [pc, #164]	; (801ac38 <RegionUS915TxConfig+0x150>)
 801ab92:	69dc      	ldr	r4, [r3, #28]
 801ab94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801ab98:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801ab9c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801aba0:	9208      	str	r2, [sp, #32]
 801aba2:	2200      	movs	r2, #0
 801aba4:	9207      	str	r2, [sp, #28]
 801aba6:	2200      	movs	r2, #0
 801aba8:	9206      	str	r2, [sp, #24]
 801abaa:	2200      	movs	r2, #0
 801abac:	9205      	str	r2, [sp, #20]
 801abae:	2201      	movs	r2, #1
 801abb0:	9204      	str	r2, [sp, #16]
 801abb2:	2200      	movs	r2, #0
 801abb4:	9203      	str	r2, [sp, #12]
 801abb6:	2208      	movs	r2, #8
 801abb8:	9202      	str	r2, [sp, #8]
 801abba:	2201      	movs	r2, #1
 801abbc:	9201      	str	r2, [sp, #4]
 801abbe:	9300      	str	r3, [sp, #0]
 801abc0:	69bb      	ldr	r3, [r7, #24]
 801abc2:	2200      	movs	r2, #0
 801abc4:	2001      	movs	r0, #1
 801abc6:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801abc8:	4b18      	ldr	r3, [pc, #96]	; (801ac2c <RegionUS915TxConfig+0x144>)
 801abca:	681a      	ldr	r2, [r3, #0]
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	781b      	ldrb	r3, [r3, #0]
 801abd0:	4619      	mov	r1, r3
 801abd2:	460b      	mov	r3, r1
 801abd4:	005b      	lsls	r3, r3, #1
 801abd6:	440b      	add	r3, r1
 801abd8:	009b      	lsls	r3, r3, #2
 801abda:	4413      	add	r3, r2
 801abdc:	681a      	ldr	r2, [r3, #0]
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801abe4:	4619      	mov	r1, r3
 801abe6:	4610      	mov	r0, r2
 801abe8:	f7fe f840 	bl	8018c6c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801abec:	4b12      	ldr	r3, [pc, #72]	; (801ac38 <RegionUS915TxConfig+0x150>)
 801abee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801abf0:	68fa      	ldr	r2, [r7, #12]
 801abf2:	8992      	ldrh	r2, [r2, #12]
 801abf4:	b2d2      	uxtb	r2, r2
 801abf6:	4611      	mov	r1, r2
 801abf8:	2001      	movs	r0, #1
 801abfa:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	899b      	ldrh	r3, [r3, #12]
 801ac06:	4619      	mov	r1, r3
 801ac08:	4610      	mov	r0, r2
 801ac0a:	f7ff fa63 	bl	801a0d4 <GetTimeOnAir>
 801ac0e:	4602      	mov	r2, r0
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	7fba      	ldrb	r2, [r7, #30]
 801ac18:	701a      	strb	r2, [r3, #0]
    return true;
 801ac1a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	3724      	adds	r7, #36	; 0x24
 801ac20:	46bd      	mov	sp, r7
 801ac22:	bd90      	pop	{r4, r7, pc}
 801ac24:	08020dc8 	.word	0x08020dc8
 801ac28:	20001a74 	.word	0x20001a74
 801ac2c:	20001a70 	.word	0x20001a70
 801ac30:	08020dd8 	.word	0x08020dd8
 801ac34:	41f00000 	.word	0x41f00000
 801ac38:	08020e4c 	.word	0x08020e4c

0801ac3c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801ac3c:	b590      	push	{r4, r7, lr}
 801ac3e:	b097      	sub	sp, #92	; 0x5c
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	60f8      	str	r0, [r7, #12]
 801ac44:	60b9      	str	r1, [r7, #8]
 801ac46:	607a      	str	r2, [r7, #4]
 801ac48:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801ac4a:	2307      	movs	r3, #7
 801ac4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801ac50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801ac54:	2200      	movs	r2, #0
 801ac56:	601a      	str	r2, [r3, #0]
 801ac58:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801ac60:	2300      	movs	r3, #0
 801ac62:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801ac66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	601a      	str	r2, [r3, #0]
 801ac6e:	605a      	str	r2, [r3, #4]
 801ac70:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801ac72:	4b97      	ldr	r3, [pc, #604]	; (801aed0 <RegionUS915LinkAdrReq+0x294>)
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801ac7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ac7e:	2206      	movs	r2, #6
 801ac80:	4618      	mov	r0, r3
 801ac82:	f7fd fb03 	bl	801828c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801ac86:	e11b      	b.n	801aec0 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801ac88:	68fb      	ldr	r3, [r7, #12]
 801ac8a:	685a      	ldr	r2, [r3, #4]
 801ac8c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801ac90:	4413      	add	r3, r2
 801ac92:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801ac96:	4611      	mov	r1, r2
 801ac98:	4618      	mov	r0, r3
 801ac9a:	f7fd fc3b 	bl	8018514 <RegionCommonParseLinkAdrReq>
 801ac9e:	4603      	mov	r3, r0
 801aca0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801aca4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	f000 8113 	beq.w	801aed4 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801acae:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801acb2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801acb6:	4413      	add	r3, r2
 801acb8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801acbc:	2307      	movs	r3, #7
 801acbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801acc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801acc6:	2b06      	cmp	r3, #6
 801acc8:	d116      	bne.n	801acf8 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801acca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801acd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801acda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801acde:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801ace2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ace6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801acea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801acee:	b2db      	uxtb	r3, r3
 801acf0:	b29b      	uxth	r3, r3
 801acf2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801acf6:	e0e3      	b.n	801aec0 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801acf8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801acfc:	2b07      	cmp	r3, #7
 801acfe:	d112      	bne.n	801ad26 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801ad00:	2300      	movs	r3, #0
 801ad02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801ad06:	2300      	movs	r3, #0
 801ad08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801ad0c:	2300      	movs	r3, #0
 801ad0e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801ad12:	2300      	movs	r3, #0
 801ad14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801ad18:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad1c:	b2db      	uxtb	r3, r3
 801ad1e:	b29b      	uxth	r3, r3
 801ad20:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ad24:	e0cc      	b.n	801aec0 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801ad26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ad2a:	2b05      	cmp	r3, #5
 801ad2c:	f040 80bf 	bne.w	801aeae <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801ad30:	2301      	movs	r3, #1
 801ad32:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801ad36:	2300      	movs	r3, #0
 801ad38:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801ad42:	e0ae      	b.n	801aea2 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801ad44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad48:	b2da      	uxtb	r2, r3
 801ad4a:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ad4e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ad52:	fa01 f303 	lsl.w	r3, r1, r3
 801ad56:	4013      	ands	r3, r2
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d04d      	beq.n	801adf8 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801ad5c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ad60:	f003 0301 	and.w	r3, r3, #1
 801ad64:	b2db      	uxtb	r3, r3
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d120      	bne.n	801adac <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801ad6a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ad6e:	005b      	lsls	r3, r3, #1
 801ad70:	3358      	adds	r3, #88	; 0x58
 801ad72:	443b      	add	r3, r7
 801ad74:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ad78:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ad7c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801ad80:	b292      	uxth	r2, r2
 801ad82:	005b      	lsls	r3, r3, #1
 801ad84:	3358      	adds	r3, #88	; 0x58
 801ad86:	443b      	add	r3, r7
 801ad88:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801ad8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ad90:	b21a      	sxth	r2, r3
 801ad92:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ad96:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ad9a:	fa01 f303 	lsl.w	r3, r1, r3
 801ad9e:	b21b      	sxth	r3, r3
 801ada0:	4313      	orrs	r3, r2
 801ada2:	b21b      	sxth	r3, r3
 801ada4:	b29b      	uxth	r3, r3
 801ada6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801adaa:	e075      	b.n	801ae98 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801adac:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801adb0:	005b      	lsls	r3, r3, #1
 801adb2:	3358      	adds	r3, #88	; 0x58
 801adb4:	443b      	add	r3, r7
 801adb6:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801adba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801adbe:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801adc2:	b292      	uxth	r2, r2
 801adc4:	005b      	lsls	r3, r3, #1
 801adc6:	3358      	adds	r3, #88	; 0x58
 801adc8:	443b      	add	r3, r7
 801adca:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801adce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801add2:	b21a      	sxth	r2, r3
 801add4:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801add8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801addc:	fa01 f303 	lsl.w	r3, r1, r3
 801ade0:	b21b      	sxth	r3, r3
 801ade2:	4313      	orrs	r3, r2
 801ade4:	b21b      	sxth	r3, r3
 801ade6:	b29b      	uxth	r3, r3
 801ade8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801adec:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801adf0:	3301      	adds	r3, #1
 801adf2:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801adf6:	e04f      	b.n	801ae98 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801adf8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801adfc:	f003 0301 	and.w	r3, r3, #1
 801ae00:	b2db      	uxtb	r3, r3
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d122      	bne.n	801ae4c <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801ae06:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae0a:	005b      	lsls	r3, r3, #1
 801ae0c:	3358      	adds	r3, #88	; 0x58
 801ae0e:	443b      	add	r3, r7
 801ae10:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ae14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae18:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801ae1c:	b292      	uxth	r2, r2
 801ae1e:	005b      	lsls	r3, r3, #1
 801ae20:	3358      	adds	r3, #88	; 0x58
 801ae22:	443b      	add	r3, r7
 801ae24:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801ae28:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ae2c:	b21a      	sxth	r2, r3
 801ae2e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ae32:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae36:	fa01 f303 	lsl.w	r3, r1, r3
 801ae3a:	b21b      	sxth	r3, r3
 801ae3c:	43db      	mvns	r3, r3
 801ae3e:	b21b      	sxth	r3, r3
 801ae40:	4013      	ands	r3, r2
 801ae42:	b21b      	sxth	r3, r3
 801ae44:	b29b      	uxth	r3, r3
 801ae46:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ae4a:	e025      	b.n	801ae98 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801ae4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae50:	005b      	lsls	r3, r3, #1
 801ae52:	3358      	adds	r3, #88	; 0x58
 801ae54:	443b      	add	r3, r7
 801ae56:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ae5a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae5e:	b2d2      	uxtb	r2, r2
 801ae60:	b292      	uxth	r2, r2
 801ae62:	005b      	lsls	r3, r3, #1
 801ae64:	3358      	adds	r3, #88	; 0x58
 801ae66:	443b      	add	r3, r7
 801ae68:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801ae6c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ae70:	b21a      	sxth	r2, r3
 801ae72:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ae76:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae7a:	fa01 f303 	lsl.w	r3, r1, r3
 801ae7e:	b21b      	sxth	r3, r3
 801ae80:	43db      	mvns	r3, r3
 801ae82:	b21b      	sxth	r3, r3
 801ae84:	4013      	ands	r3, r2
 801ae86:	b21b      	sxth	r3, r3
 801ae88:	b29b      	uxth	r3, r3
 801ae8a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801ae8e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae92:	3301      	adds	r3, #1
 801ae94:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801ae98:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae9c:	3301      	adds	r3, #1
 801ae9e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801aea2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801aea6:	2b07      	cmp	r3, #7
 801aea8:	f67f af4c 	bls.w	801ad44 <RegionUS915LinkAdrReq+0x108>
 801aeac:	e008      	b.n	801aec0 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801aeae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801aeb2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801aeb6:	005b      	lsls	r3, r3, #1
 801aeb8:	3358      	adds	r3, #88	; 0x58
 801aeba:	443b      	add	r3, r7
 801aebc:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	7a1b      	ldrb	r3, [r3, #8]
 801aec4:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801aec8:	429a      	cmp	r2, r3
 801aeca:	f4ff aedd 	bcc.w	801ac88 <RegionUS915LinkAdrReq+0x4c>
 801aece:	e002      	b.n	801aed6 <RegionUS915LinkAdrReq+0x29a>
 801aed0:	20001a70 	.word	0x20001a70
            break; // break loop, since no more request has been found
 801aed4:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801aed6:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801aeda:	2b03      	cmp	r3, #3
 801aedc:	dc0f      	bgt.n	801aefe <RegionUS915LinkAdrReq+0x2c2>
 801aede:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801aee2:	2204      	movs	r2, #4
 801aee4:	2100      	movs	r1, #0
 801aee6:	4618      	mov	r0, r3
 801aee8:	f7fd f9a4 	bl	8018234 <RegionCommonCountChannels>
 801aeec:	4603      	mov	r3, r0
 801aeee:	2b01      	cmp	r3, #1
 801aef0:	d805      	bhi.n	801aefe <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801aef2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801aef6:	f023 0301 	bic.w	r3, r3, #1
 801aefa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801aefe:	2302      	movs	r3, #2
 801af00:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801af04:	68fb      	ldr	r3, [r7, #12]
 801af06:	7a5b      	ldrb	r3, [r3, #9]
 801af08:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801af0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801af10:	4618      	mov	r0, r3
 801af12:	f7ff f90f 	bl	801a134 <RegionUS915GetPhyParam>
 801af16:	4603      	mov	r3, r0
 801af18:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801af1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801af1e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801af20:	68fb      	ldr	r3, [r7, #12]
 801af22:	7a9b      	ldrb	r3, [r3, #10]
 801af24:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801af26:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801af2a:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801af2c:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801af30:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801af32:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801af36:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801af3e:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801af46:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	7b5b      	ldrb	r3, [r3, #13]
 801af4c:	b25b      	sxtb	r3, r3
 801af4e:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801af50:	2348      	movs	r3, #72	; 0x48
 801af52:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801af56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af5a:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801af5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801af5e:	b25b      	sxtb	r3, r3
 801af60:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801af64:	2304      	movs	r3, #4
 801af66:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801af6a:	4b3f      	ldr	r3, [pc, #252]	; (801b068 <RegionUS915LinkAdrReq+0x42c>)
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801af70:	230e      	movs	r3, #14
 801af72:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801af76:	2300      	movs	r3, #0
 801af78:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801af82:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801af86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801af8a:	1c9a      	adds	r2, r3, #2
 801af8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801af90:	1c59      	adds	r1, r3, #1
 801af92:	f107 0014 	add.w	r0, r7, #20
 801af96:	4623      	mov	r3, r4
 801af98:	f7fd fb0d 	bl	80185b6 <RegionCommonLinkAdrReqVerifyParams>
 801af9c:	4603      	mov	r3, r0
 801af9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801afa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801afa6:	2b07      	cmp	r3, #7
 801afa8:	d147      	bne.n	801b03a <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801afaa:	4b2f      	ldr	r3, [pc, #188]	; (801b068 <RegionUS915LinkAdrReq+0x42c>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801afb2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801afb6:	2206      	movs	r2, #6
 801afb8:	4618      	mov	r0, r3
 801afba:	f7fd f967 	bl	801828c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801afbe:	4b2b      	ldr	r3, [pc, #172]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	8819      	ldrh	r1, [r3, #0]
 801afc4:	4b28      	ldr	r3, [pc, #160]	; (801b068 <RegionUS915LinkAdrReq+0x42c>)
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801afcc:	4b27      	ldr	r3, [pc, #156]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	400a      	ands	r2, r1
 801afd2:	b292      	uxth	r2, r2
 801afd4:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801afd6:	4b25      	ldr	r3, [pc, #148]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	8859      	ldrh	r1, [r3, #2]
 801afdc:	4b22      	ldr	r3, [pc, #136]	; (801b068 <RegionUS915LinkAdrReq+0x42c>)
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801afe4:	4b21      	ldr	r3, [pc, #132]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	400a      	ands	r2, r1
 801afea:	b292      	uxth	r2, r2
 801afec:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801afee:	4b1f      	ldr	r3, [pc, #124]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	8899      	ldrh	r1, [r3, #4]
 801aff4:	4b1c      	ldr	r3, [pc, #112]	; (801b068 <RegionUS915LinkAdrReq+0x42c>)
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801affc:	4b1b      	ldr	r3, [pc, #108]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	400a      	ands	r2, r1
 801b002:	b292      	uxth	r2, r2
 801b004:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801b006:	4b19      	ldr	r3, [pc, #100]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	88d9      	ldrh	r1, [r3, #6]
 801b00c:	4b16      	ldr	r3, [pc, #88]	; (801b068 <RegionUS915LinkAdrReq+0x42c>)
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801b014:	4b15      	ldr	r3, [pc, #84]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	400a      	ands	r2, r1
 801b01a:	b292      	uxth	r2, r2
 801b01c:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b01e:	4b12      	ldr	r3, [pc, #72]	; (801b068 <RegionUS915LinkAdrReq+0x42c>)
 801b020:	681a      	ldr	r2, [r3, #0]
 801b022:	4b12      	ldr	r3, [pc, #72]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b02a:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b02c:	4b0e      	ldr	r3, [pc, #56]	; (801b068 <RegionUS915LinkAdrReq+0x42c>)
 801b02e:	681a      	ldr	r2, [r3, #0]
 801b030:	4b0e      	ldr	r3, [pc, #56]	; (801b06c <RegionUS915LinkAdrReq+0x430>)
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b038:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b03a:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b03e:	68bb      	ldr	r3, [r7, #8]
 801b040:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b042:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b04a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b04e:	683b      	ldr	r3, [r7, #0]
 801b050:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b054:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b058:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b05a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b05e:	4618      	mov	r0, r3
 801b060:	375c      	adds	r7, #92	; 0x5c
 801b062:	46bd      	mov	sp, r7
 801b064:	bd90      	pop	{r4, r7, pc}
 801b066:	bf00      	nop
 801b068:	20001a70 	.word	0x20001a70
 801b06c:	20001a6c 	.word	0x20001a6c

0801b070 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b084      	sub	sp, #16
 801b074:	af00      	add	r7, sp, #0
 801b076:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b078:	2307      	movs	r3, #7
 801b07a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	685b      	ldr	r3, [r3, #4]
 801b080:	4618      	mov	r0, r3
 801b082:	f7fe ffe3 	bl	801a04c <VerifyRfFreq>
 801b086:	4603      	mov	r3, r0
 801b088:	f083 0301 	eor.w	r3, r3, #1
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d003      	beq.n	801b09a <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b092:	7bfb      	ldrb	r3, [r7, #15]
 801b094:	f023 0301 	bic.w	r3, r3, #1
 801b098:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	f993 3000 	ldrsb.w	r3, [r3]
 801b0a0:	220d      	movs	r2, #13
 801b0a2:	2108      	movs	r1, #8
 801b0a4:	4618      	mov	r0, r3
 801b0a6:	f7fd f874 	bl	8018192 <RegionCommonValueInRange>
 801b0aa:	4603      	mov	r3, r0
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	d103      	bne.n	801b0b8 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b0b0:	7bfb      	ldrb	r3, [r7, #15]
 801b0b2:	f023 0302 	bic.w	r3, r3, #2
 801b0b6:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	f993 3000 	ldrsb.w	r3, [r3]
 801b0be:	2207      	movs	r2, #7
 801b0c0:	2105      	movs	r1, #5
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	f7fd f865 	bl	8018192 <RegionCommonValueInRange>
 801b0c8:	4603      	mov	r3, r0
 801b0ca:	2b01      	cmp	r3, #1
 801b0cc:	d004      	beq.n	801b0d8 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b0d4:	2b0d      	cmp	r3, #13
 801b0d6:	dd03      	ble.n	801b0e0 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b0d8:	7bfb      	ldrb	r3, [r7, #15]
 801b0da:	f023 0302 	bic.w	r3, r3, #2
 801b0de:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b0e6:	2203      	movs	r2, #3
 801b0e8:	2100      	movs	r1, #0
 801b0ea:	4618      	mov	r0, r3
 801b0ec:	f7fd f851 	bl	8018192 <RegionCommonValueInRange>
 801b0f0:	4603      	mov	r3, r0
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d103      	bne.n	801b0fe <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b0f6:	7bfb      	ldrb	r3, [r7, #15]
 801b0f8:	f023 0304 	bic.w	r3, r3, #4
 801b0fc:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 801b100:	4618      	mov	r0, r3
 801b102:	3710      	adds	r7, #16
 801b104:	46bd      	mov	sp, r7
 801b106:	bd80      	pop	{r7, pc}

0801b108 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b108:	b480      	push	{r7}
 801b10a:	b083      	sub	sp, #12
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b114:	4618      	mov	r0, r3
 801b116:	370c      	adds	r7, #12
 801b118:	46bd      	mov	sp, r7
 801b11a:	bc80      	pop	{r7}
 801b11c:	4770      	bx	lr

0801b11e <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b11e:	b480      	push	{r7}
 801b120:	b083      	sub	sp, #12
 801b122:	af00      	add	r7, sp, #0
 801b124:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b12a:	4618      	mov	r0, r3
 801b12c:	370c      	adds	r7, #12
 801b12e:	46bd      	mov	sp, r7
 801b130:	bc80      	pop	{r7}
 801b132:	4770      	bx	lr

0801b134 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b134:	b480      	push	{r7}
 801b136:	b083      	sub	sp, #12
 801b138:	af00      	add	r7, sp, #0
 801b13a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b13c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801b140:	4618      	mov	r0, r3
 801b142:	370c      	adds	r7, #12
 801b144:	46bd      	mov	sp, r7
 801b146:	bc80      	pop	{r7}
 801b148:	4770      	bx	lr
	...

0801b14c <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b14c:	b480      	push	{r7}
 801b14e:	b083      	sub	sp, #12
 801b150:	af00      	add	r7, sp, #0
 801b152:	4603      	mov	r3, r0
 801b154:	460a      	mov	r2, r1
 801b156:	71fb      	strb	r3, [r7, #7]
 801b158:	4613      	mov	r3, r2
 801b15a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b15c:	79bb      	ldrb	r3, [r7, #6]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d106      	bne.n	801b170 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b162:	4b13      	ldr	r3, [pc, #76]	; (801b1b0 <RegionUS915AlternateDr+0x64>)
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	7b5a      	ldrb	r2, [r3, #13]
 801b168:	3201      	adds	r2, #1
 801b16a:	b2d2      	uxtb	r2, r2
 801b16c:	735a      	strb	r2, [r3, #13]
 801b16e:	e005      	b.n	801b17c <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b170:	4b0f      	ldr	r3, [pc, #60]	; (801b1b0 <RegionUS915AlternateDr+0x64>)
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	7b5a      	ldrb	r2, [r3, #13]
 801b176:	3a01      	subs	r2, #1
 801b178:	b2d2      	uxtb	r2, r2
 801b17a:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b17c:	4b0c      	ldr	r3, [pc, #48]	; (801b1b0 <RegionUS915AlternateDr+0x64>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	7b5a      	ldrb	r2, [r3, #13]
 801b182:	4b0c      	ldr	r3, [pc, #48]	; (801b1b4 <RegionUS915AlternateDr+0x68>)
 801b184:	fba3 1302 	umull	r1, r3, r3, r2
 801b188:	0859      	lsrs	r1, r3, #1
 801b18a:	460b      	mov	r3, r1
 801b18c:	00db      	lsls	r3, r3, #3
 801b18e:	440b      	add	r3, r1
 801b190:	1ad3      	subs	r3, r2, r3
 801b192:	b2db      	uxtb	r3, r3
 801b194:	2b00      	cmp	r3, #0
 801b196:	d102      	bne.n	801b19e <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b198:	2304      	movs	r3, #4
 801b19a:	71fb      	strb	r3, [r7, #7]
 801b19c:	e001      	b.n	801b1a2 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 801b19e:	2300      	movs	r3, #0
 801b1a0:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b1a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	370c      	adds	r7, #12
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bc80      	pop	{r7}
 801b1ae:	4770      	bx	lr
 801b1b0:	20001a6c 	.word	0x20001a6c
 801b1b4:	38e38e39 	.word	0x38e38e39

0801b1b8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b1b8:	b580      	push	{r7, lr}
 801b1ba:	b0a8      	sub	sp, #160	; 0xa0
 801b1bc:	af02      	add	r7, sp, #8
 801b1be:	60f8      	str	r0, [r7, #12]
 801b1c0:	60b9      	str	r1, [r7, #8]
 801b1c2:	607a      	str	r2, [r7, #4]
 801b1c4:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b1c6:	2300      	movs	r3, #0
 801b1c8:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b1cc:	2300      	movs	r3, #0
 801b1ce:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b1d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b1da:	2244      	movs	r2, #68	; 0x44
 801b1dc:	2100      	movs	r1, #0
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f004 fea2 	bl	801ff28 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b1e4:	230c      	movs	r3, #12
 801b1e6:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b1ea:	4b67      	ldr	r3, [pc, #412]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	2204      	movs	r2, #4
 801b1f0:	2100      	movs	r1, #0
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	f7fd f81e 	bl	8018234 <RegionCommonCountChannels>
 801b1f8:	4603      	mov	r3, r0
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d10e      	bne.n	801b21c <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b1fe:	4b62      	ldr	r3, [pc, #392]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	4618      	mov	r0, r3
 801b204:	4b61      	ldr	r3, [pc, #388]	; (801b38c <RegionUS915NextChannel+0x1d4>)
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b20c:	2204      	movs	r2, #4
 801b20e:	4619      	mov	r1, r3
 801b210:	f7fd f83c 	bl	801828c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b214:	4b5c      	ldr	r3, [pc, #368]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	2200      	movs	r2, #0
 801b21a:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b21c:	68fb      	ldr	r3, [r7, #12]
 801b21e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b222:	2b03      	cmp	r3, #3
 801b224:	dd0c      	ble.n	801b240 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b226:	4b58      	ldr	r3, [pc, #352]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	891b      	ldrh	r3, [r3, #8]
 801b22c:	b2db      	uxtb	r3, r3
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d106      	bne.n	801b240 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b232:	4b56      	ldr	r3, [pc, #344]	; (801b38c <RegionUS915NextChannel+0x1d4>)
 801b234:	681a      	ldr	r2, [r3, #0]
 801b236:	4b54      	ldr	r3, [pc, #336]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b23e:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	7a5b      	ldrb	r3, [r3, #9]
 801b244:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b246:	68fb      	ldr	r3, [r7, #12]
 801b248:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b24c:	b2db      	uxtb	r3, r3
 801b24e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b250:	4b4d      	ldr	r3, [pc, #308]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b256:	4b4d      	ldr	r3, [pc, #308]	; (801b38c <RegionUS915NextChannel+0x1d4>)
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801b25c:	4b4c      	ldr	r3, [pc, #304]	; (801b390 <RegionUS915NextChannel+0x1d8>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b262:	2348      	movs	r3, #72	; 0x48
 801b264:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b266:	2300      	movs	r3, #0
 801b268:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b26a:	68fb      	ldr	r3, [r7, #12]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	685b      	ldr	r3, [r3, #4]
 801b274:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	7a9b      	ldrb	r3, [r3, #10]
 801b27a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b27e:	2301      	movs	r3, #1
 801b280:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b284:	f107 0314 	add.w	r3, r7, #20
 801b288:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b28a:	68fa      	ldr	r2, [r7, #12]
 801b28c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b290:	320c      	adds	r2, #12
 801b292:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b296:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b29a:	68fb      	ldr	r3, [r7, #12]
 801b29c:	7d1b      	ldrb	r3, [r3, #20]
 801b29e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	8adb      	ldrh	r3, [r3, #22]
 801b2ac:	4619      	mov	r1, r3
 801b2ae:	4610      	mov	r0, r2
 801b2b0:	f7fe ff10 	bl	801a0d4 <GetTimeOnAir>
 801b2b4:	4603      	mov	r3, r0
 801b2b6:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b2b8:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b2bc:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b2c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	9301      	str	r3, [sp, #4]
 801b2c8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b2cc:	9300      	str	r3, [sp, #0]
 801b2ce:	460b      	mov	r3, r1
 801b2d0:	6839      	ldr	r1, [r7, #0]
 801b2d2:	f7fd fbc6 	bl	8018a62 <RegionCommonIdentifyChannels>
 801b2d6:	4603      	mov	r3, r0
 801b2d8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b2dc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d14a      	bne.n	801b37a <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	7a5b      	ldrb	r3, [r3, #9]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d00e      	beq.n	801b30a <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b2ec:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b2f0:	3b01      	subs	r3, #1
 801b2f2:	4619      	mov	r1, r3
 801b2f4:	2000      	movs	r0, #0
 801b2f6:	f000 f89f 	bl	801b438 <randr>
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	3398      	adds	r3, #152	; 0x98
 801b2fe:	443b      	add	r3, r7
 801b300:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b304:	68bb      	ldr	r3, [r7, #8]
 801b306:	701a      	strb	r2, [r3, #0]
 801b308:	e02e      	b.n	801b368 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b310:	2b00      	cmp	r3, #0
 801b312:	d10e      	bne.n	801b332 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b314:	4b1c      	ldr	r3, [pc, #112]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b31a:	4b1b      	ldr	r3, [pc, #108]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b31c:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b31e:	330c      	adds	r3, #12
 801b320:	68ba      	ldr	r2, [r7, #8]
 801b322:	4619      	mov	r1, r3
 801b324:	f7fc fcf0 	bl	8017d08 <RegionBaseUSComputeNext125kHzJoinChannel>
 801b328:	4603      	mov	r3, r0
 801b32a:	2b03      	cmp	r3, #3
 801b32c:	d11c      	bne.n	801b368 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b32e:	2303      	movs	r3, #3
 801b330:	e025      	b.n	801b37e <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b332:	2300      	movs	r3, #0
 801b334:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b338:	e004      	b.n	801b344 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 801b33a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b33e:	3301      	adds	r3, #1
 801b340:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b344:	4b10      	ldr	r3, [pc, #64]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	891b      	ldrh	r3, [r3, #8]
 801b34a:	b2da      	uxtb	r2, r3
 801b34c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b350:	fa42 f303 	asr.w	r3, r2, r3
 801b354:	f003 0301 	and.w	r3, r3, #1
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d0ee      	beq.n	801b33a <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 801b35c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b360:	3340      	adds	r3, #64	; 0x40
 801b362:	b2da      	uxtb	r2, r3
 801b364:	68bb      	ldr	r3, [r7, #8]
 801b366:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b368:	4b07      	ldr	r3, [pc, #28]	; (801b388 <RegionUS915NextChannel+0x1d0>)
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	4618      	mov	r0, r3
 801b36e:	68bb      	ldr	r3, [r7, #8]
 801b370:	781b      	ldrb	r3, [r3, #0]
 801b372:	2248      	movs	r2, #72	; 0x48
 801b374:	4619      	mov	r1, r3
 801b376:	f7fc ff29 	bl	80181cc <RegionCommonChanDisable>
    }
    return status;
 801b37a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b37e:	4618      	mov	r0, r3
 801b380:	3798      	adds	r7, #152	; 0x98
 801b382:	46bd      	mov	sp, r7
 801b384:	bd80      	pop	{r7, pc}
 801b386:	bf00      	nop
 801b388:	20001a6c 	.word	0x20001a6c
 801b38c:	20001a70 	.word	0x20001a70
 801b390:	20001a74 	.word	0x20001a74

0801b394 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b394:	b480      	push	{r7}
 801b396:	b085      	sub	sp, #20
 801b398:	af00      	add	r7, sp, #0
 801b39a:	4603      	mov	r3, r0
 801b39c:	71fb      	strb	r3, [r7, #7]
 801b39e:	460b      	mov	r3, r1
 801b3a0:	71bb      	strb	r3, [r7, #6]
 801b3a2:	4613      	mov	r3, r2
 801b3a4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b3a6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b3aa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b3ae:	4909      	ldr	r1, [pc, #36]	; (801b3d4 <RegionUS915ApplyDrOffset+0x40>)
 801b3b0:	0092      	lsls	r2, r2, #2
 801b3b2:	440a      	add	r2, r1
 801b3b4:	4413      	add	r3, r2
 801b3b6:	781b      	ldrb	r3, [r3, #0]
 801b3b8:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	da01      	bge.n	801b3c6 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b3c6:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	3714      	adds	r7, #20
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bc80      	pop	{r7}
 801b3d0:	4770      	bx	lr
 801b3d2:	bf00      	nop
 801b3d4:	08020e18 	.word	0x08020e18

0801b3d8 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b3d8:	b480      	push	{r7}
 801b3da:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b3dc:	4b0d      	ldr	r3, [pc, #52]	; (801b414 <rand1+0x3c>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	4a0d      	ldr	r2, [pc, #52]	; (801b418 <rand1+0x40>)
 801b3e2:	fb02 f303 	mul.w	r3, r2, r3
 801b3e6:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b3ea:	3339      	adds	r3, #57	; 0x39
 801b3ec:	4a09      	ldr	r2, [pc, #36]	; (801b414 <rand1+0x3c>)
 801b3ee:	6013      	str	r3, [r2, #0]
 801b3f0:	4b08      	ldr	r3, [pc, #32]	; (801b414 <rand1+0x3c>)
 801b3f2:	681a      	ldr	r2, [r3, #0]
 801b3f4:	2303      	movs	r3, #3
 801b3f6:	fba3 1302 	umull	r1, r3, r3, r2
 801b3fa:	1ad1      	subs	r1, r2, r3
 801b3fc:	0849      	lsrs	r1, r1, #1
 801b3fe:	440b      	add	r3, r1
 801b400:	0f99      	lsrs	r1, r3, #30
 801b402:	460b      	mov	r3, r1
 801b404:	07db      	lsls	r3, r3, #31
 801b406:	1a5b      	subs	r3, r3, r1
 801b408:	1ad1      	subs	r1, r2, r3
 801b40a:	460b      	mov	r3, r1
}
 801b40c:	4618      	mov	r0, r3
 801b40e:	46bd      	mov	sp, r7
 801b410:	bc80      	pop	{r7}
 801b412:	4770      	bx	lr
 801b414:	20000130 	.word	0x20000130
 801b418:	41c64e6d 	.word	0x41c64e6d

0801b41c <srand1>:

void srand1( uint32_t seed )
{
 801b41c:	b480      	push	{r7}
 801b41e:	b083      	sub	sp, #12
 801b420:	af00      	add	r7, sp, #0
 801b422:	6078      	str	r0, [r7, #4]
    next = seed;
 801b424:	4a03      	ldr	r2, [pc, #12]	; (801b434 <srand1+0x18>)
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	6013      	str	r3, [r2, #0]
}
 801b42a:	bf00      	nop
 801b42c:	370c      	adds	r7, #12
 801b42e:	46bd      	mov	sp, r7
 801b430:	bc80      	pop	{r7}
 801b432:	4770      	bx	lr
 801b434:	20000130 	.word	0x20000130

0801b438 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
 801b43e:	6078      	str	r0, [r7, #4]
 801b440:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b442:	f7ff ffc9 	bl	801b3d8 <rand1>
 801b446:	4602      	mov	r2, r0
 801b448:	6839      	ldr	r1, [r7, #0]
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	1acb      	subs	r3, r1, r3
 801b44e:	3301      	adds	r3, #1
 801b450:	fb92 f1f3 	sdiv	r1, r2, r3
 801b454:	fb01 f303 	mul.w	r3, r1, r3
 801b458:	1ad2      	subs	r2, r2, r3
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	4413      	add	r3, r2
}
 801b45e:	4618      	mov	r0, r3
 801b460:	3708      	adds	r7, #8
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}

0801b466 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b466:	b480      	push	{r7}
 801b468:	b085      	sub	sp, #20
 801b46a:	af00      	add	r7, sp, #0
 801b46c:	60f8      	str	r0, [r7, #12]
 801b46e:	60b9      	str	r1, [r7, #8]
 801b470:	4613      	mov	r3, r2
 801b472:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b474:	e007      	b.n	801b486 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b476:	68ba      	ldr	r2, [r7, #8]
 801b478:	1c53      	adds	r3, r2, #1
 801b47a:	60bb      	str	r3, [r7, #8]
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	1c59      	adds	r1, r3, #1
 801b480:	60f9      	str	r1, [r7, #12]
 801b482:	7812      	ldrb	r2, [r2, #0]
 801b484:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b486:	88fb      	ldrh	r3, [r7, #6]
 801b488:	1e5a      	subs	r2, r3, #1
 801b48a:	80fa      	strh	r2, [r7, #6]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d1f2      	bne.n	801b476 <memcpy1+0x10>
    }
}
 801b490:	bf00      	nop
 801b492:	bf00      	nop
 801b494:	3714      	adds	r7, #20
 801b496:	46bd      	mov	sp, r7
 801b498:	bc80      	pop	{r7}
 801b49a:	4770      	bx	lr

0801b49c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b49c:	b480      	push	{r7}
 801b49e:	b085      	sub	sp, #20
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	60f8      	str	r0, [r7, #12]
 801b4a4:	60b9      	str	r1, [r7, #8]
 801b4a6:	4613      	mov	r3, r2
 801b4a8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b4aa:	88fb      	ldrh	r3, [r7, #6]
 801b4ac:	3b01      	subs	r3, #1
 801b4ae:	68fa      	ldr	r2, [r7, #12]
 801b4b0:	4413      	add	r3, r2
 801b4b2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b4b4:	e007      	b.n	801b4c6 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b4b6:	68ba      	ldr	r2, [r7, #8]
 801b4b8:	1c53      	adds	r3, r2, #1
 801b4ba:	60bb      	str	r3, [r7, #8]
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	1e59      	subs	r1, r3, #1
 801b4c0:	60f9      	str	r1, [r7, #12]
 801b4c2:	7812      	ldrb	r2, [r2, #0]
 801b4c4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b4c6:	88fb      	ldrh	r3, [r7, #6]
 801b4c8:	1e5a      	subs	r2, r3, #1
 801b4ca:	80fa      	strh	r2, [r7, #6]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d1f2      	bne.n	801b4b6 <memcpyr+0x1a>
    }
}
 801b4d0:	bf00      	nop
 801b4d2:	bf00      	nop
 801b4d4:	3714      	adds	r7, #20
 801b4d6:	46bd      	mov	sp, r7
 801b4d8:	bc80      	pop	{r7}
 801b4da:	4770      	bx	lr

0801b4dc <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b4dc:	b480      	push	{r7}
 801b4de:	b083      	sub	sp, #12
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	6078      	str	r0, [r7, #4]
 801b4e4:	460b      	mov	r3, r1
 801b4e6:	70fb      	strb	r3, [r7, #3]
 801b4e8:	4613      	mov	r3, r2
 801b4ea:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b4ec:	e004      	b.n	801b4f8 <memset1+0x1c>
    {
        *dst++ = value;
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	1c5a      	adds	r2, r3, #1
 801b4f2:	607a      	str	r2, [r7, #4]
 801b4f4:	78fa      	ldrb	r2, [r7, #3]
 801b4f6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b4f8:	883b      	ldrh	r3, [r7, #0]
 801b4fa:	1e5a      	subs	r2, r3, #1
 801b4fc:	803a      	strh	r2, [r7, #0]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d1f5      	bne.n	801b4ee <memset1+0x12>
    }
}
 801b502:	bf00      	nop
 801b504:	bf00      	nop
 801b506:	370c      	adds	r7, #12
 801b508:	46bd      	mov	sp, r7
 801b50a:	bc80      	pop	{r7}
 801b50c:	4770      	bx	lr
	...

0801b510 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b510:	b480      	push	{r7}
 801b512:	b085      	sub	sp, #20
 801b514:	af00      	add	r7, sp, #0
 801b516:	6078      	str	r0, [r7, #4]
 801b518:	460b      	mov	r3, r1
 801b51a:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b520:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	2b00      	cmp	r3, #0
 801b526:	d101      	bne.n	801b52c <Crc32+0x1c>
    {
        return 0;
 801b528:	2300      	movs	r3, #0
 801b52a:	e026      	b.n	801b57a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b52c:	2300      	movs	r3, #0
 801b52e:	817b      	strh	r3, [r7, #10]
 801b530:	e01d      	b.n	801b56e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801b532:	897b      	ldrh	r3, [r7, #10]
 801b534:	687a      	ldr	r2, [r7, #4]
 801b536:	4413      	add	r3, r2
 801b538:	781b      	ldrb	r3, [r3, #0]
 801b53a:	461a      	mov	r2, r3
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	4053      	eors	r3, r2
 801b540:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b542:	2300      	movs	r3, #0
 801b544:	813b      	strh	r3, [r7, #8]
 801b546:	e00c      	b.n	801b562 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801b548:	68fb      	ldr	r3, [r7, #12]
 801b54a:	085a      	lsrs	r2, r3, #1
 801b54c:	68fb      	ldr	r3, [r7, #12]
 801b54e:	f003 0301 	and.w	r3, r3, #1
 801b552:	425b      	negs	r3, r3
 801b554:	490b      	ldr	r1, [pc, #44]	; (801b584 <Crc32+0x74>)
 801b556:	400b      	ands	r3, r1
 801b558:	4053      	eors	r3, r2
 801b55a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801b55c:	893b      	ldrh	r3, [r7, #8]
 801b55e:	3301      	adds	r3, #1
 801b560:	813b      	strh	r3, [r7, #8]
 801b562:	893b      	ldrh	r3, [r7, #8]
 801b564:	2b07      	cmp	r3, #7
 801b566:	d9ef      	bls.n	801b548 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801b568:	897b      	ldrh	r3, [r7, #10]
 801b56a:	3301      	adds	r3, #1
 801b56c:	817b      	strh	r3, [r7, #10]
 801b56e:	897a      	ldrh	r2, [r7, #10]
 801b570:	887b      	ldrh	r3, [r7, #2]
 801b572:	429a      	cmp	r2, r3
 801b574:	d3dd      	bcc.n	801b532 <Crc32+0x22>
        }
    }

    return ~crc;
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	43db      	mvns	r3, r3
}
 801b57a:	4618      	mov	r0, r3
 801b57c:	3714      	adds	r7, #20
 801b57e:	46bd      	mov	sp, r7
 801b580:	bc80      	pop	{r7}
 801b582:	4770      	bx	lr
 801b584:	edb88320 	.word	0xedb88320

0801b588 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801b588:	b580      	push	{r7, lr}
 801b58a:	b084      	sub	sp, #16
 801b58c:	af02      	add	r7, sp, #8
 801b58e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801b590:	4a24      	ldr	r2, [pc, #144]	; (801b624 <RadioInit+0x9c>)
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801b596:	4b24      	ldr	r3, [pc, #144]	; (801b628 <RadioInit+0xa0>)
 801b598:	2200      	movs	r2, #0
 801b59a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801b59c:	4b22      	ldr	r3, [pc, #136]	; (801b628 <RadioInit+0xa0>)
 801b59e:	2200      	movs	r2, #0
 801b5a0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801b5a2:	4b21      	ldr	r3, [pc, #132]	; (801b628 <RadioInit+0xa0>)
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801b5a8:	4b1f      	ldr	r3, [pc, #124]	; (801b628 <RadioInit+0xa0>)
 801b5aa:	2200      	movs	r2, #0
 801b5ac:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 801b5ae:	481f      	ldr	r0, [pc, #124]	; (801b62c <RadioInit+0xa4>)
 801b5b0:	f001 ffc2 	bl	801d538 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 801b5b4:	4b1c      	ldr	r3, [pc, #112]	; (801b628 <RadioInit+0xa0>)
 801b5b6:	2200      	movs	r2, #0
 801b5b8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801b5ba:	4b1b      	ldr	r3, [pc, #108]	; (801b628 <RadioInit+0xa0>)
 801b5bc:	2200      	movs	r2, #0
 801b5be:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 801b5c0:	f002 fa56 	bl	801da70 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801b5c4:	2100      	movs	r1, #0
 801b5c6:	2000      	movs	r0, #0
 801b5c8:	f002 fe22 	bl	801e210 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 801b5cc:	2204      	movs	r2, #4
 801b5ce:	2100      	movs	r1, #0
 801b5d0:	2001      	movs	r0, #1
 801b5d2:	f002 fbdf 	bl	801dd94 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b5d6:	2300      	movs	r3, #0
 801b5d8:	2200      	movs	r2, #0
 801b5da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b5de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b5e2:	f002 fb0f 	bl	801dc04 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801b5e6:	f000 fe99 	bl	801c31c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	9300      	str	r3, [sp, #0]
 801b5ee:	4b10      	ldr	r3, [pc, #64]	; (801b630 <RadioInit+0xa8>)
 801b5f0:	2200      	movs	r2, #0
 801b5f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b5f6:	480f      	ldr	r0, [pc, #60]	; (801b634 <RadioInit+0xac>)
 801b5f8:	f003 feee 	bl	801f3d8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	9300      	str	r3, [sp, #0]
 801b600:	4b0d      	ldr	r3, [pc, #52]	; (801b638 <RadioInit+0xb0>)
 801b602:	2200      	movs	r2, #0
 801b604:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b608:	480c      	ldr	r0, [pc, #48]	; (801b63c <RadioInit+0xb4>)
 801b60a:	f003 fee5 	bl	801f3d8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801b60e:	4809      	ldr	r0, [pc, #36]	; (801b634 <RadioInit+0xac>)
 801b610:	f003 ff86 	bl	801f520 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801b614:	4809      	ldr	r0, [pc, #36]	; (801b63c <RadioInit+0xb4>)
 801b616:	f003 ff83 	bl	801f520 <UTIL_TIMER_Stop>
}
 801b61a:	bf00      	nop
 801b61c:	3708      	adds	r7, #8
 801b61e:	46bd      	mov	sp, r7
 801b620:	bd80      	pop	{r7, pc}
 801b622:	bf00      	nop
 801b624:	20001b78 	.word	0x20001b78
 801b628:	20001b7c 	.word	0x20001b7c
 801b62c:	0801c715 	.word	0x0801c715
 801b630:	0801c69d 	.word	0x0801c69d
 801b634:	20001bd8 	.word	0x20001bd8
 801b638:	0801c6b1 	.word	0x0801c6b1
 801b63c:	20001bf0 	.word	0x20001bf0

0801b640 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801b640:	b580      	push	{r7, lr}
 801b642:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801b644:	f001 ffc0 	bl	801d5c8 <SUBGRF_GetOperatingMode>
 801b648:	4603      	mov	r3, r0
 801b64a:	2b07      	cmp	r3, #7
 801b64c:	d00a      	beq.n	801b664 <RadioGetStatus+0x24>
 801b64e:	2b07      	cmp	r3, #7
 801b650:	dc0a      	bgt.n	801b668 <RadioGetStatus+0x28>
 801b652:	2b04      	cmp	r3, #4
 801b654:	d002      	beq.n	801b65c <RadioGetStatus+0x1c>
 801b656:	2b05      	cmp	r3, #5
 801b658:	d002      	beq.n	801b660 <RadioGetStatus+0x20>
 801b65a:	e005      	b.n	801b668 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801b65c:	2302      	movs	r3, #2
 801b65e:	e004      	b.n	801b66a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801b660:	2301      	movs	r3, #1
 801b662:	e002      	b.n	801b66a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801b664:	2303      	movs	r3, #3
 801b666:	e000      	b.n	801b66a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801b668:	2300      	movs	r3, #0
    }
}
 801b66a:	4618      	mov	r0, r3
 801b66c:	bd80      	pop	{r7, pc}
	...

0801b670 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801b670:	b580      	push	{r7, lr}
 801b672:	b082      	sub	sp, #8
 801b674:	af00      	add	r7, sp, #0
 801b676:	4603      	mov	r3, r0
 801b678:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801b67a:	4a2a      	ldr	r2, [pc, #168]	; (801b724 <RadioSetModem+0xb4>)
 801b67c:	79fb      	ldrb	r3, [r7, #7]
 801b67e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801b680:	79fb      	ldrb	r3, [r7, #7]
 801b682:	4618      	mov	r0, r3
 801b684:	f003 f997 	bl	801e9b6 <RFW_SetRadioModem>
    switch( modem )
 801b688:	79fb      	ldrb	r3, [r7, #7]
 801b68a:	2b05      	cmp	r3, #5
 801b68c:	d80e      	bhi.n	801b6ac <RadioSetModem+0x3c>
 801b68e:	a201      	add	r2, pc, #4	; (adr r2, 801b694 <RadioSetModem+0x24>)
 801b690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b694:	0801b6bb 	.word	0x0801b6bb
 801b698:	0801b6c9 	.word	0x0801b6c9
 801b69c:	0801b6ad 	.word	0x0801b6ad
 801b6a0:	0801b6ef 	.word	0x0801b6ef
 801b6a4:	0801b6fd 	.word	0x0801b6fd
 801b6a8:	0801b70b 	.word	0x0801b70b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801b6ac:	2003      	movs	r0, #3
 801b6ae:	f002 fb4b 	bl	801dd48 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b6b2:	4b1c      	ldr	r3, [pc, #112]	; (801b724 <RadioSetModem+0xb4>)
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	735a      	strb	r2, [r3, #13]
        break;
 801b6b8:	e02f      	b.n	801b71a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b6ba:	2000      	movs	r0, #0
 801b6bc:	f002 fb44 	bl	801dd48 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b6c0:	4b18      	ldr	r3, [pc, #96]	; (801b724 <RadioSetModem+0xb4>)
 801b6c2:	2200      	movs	r2, #0
 801b6c4:	735a      	strb	r2, [r3, #13]
        break;
 801b6c6:	e028      	b.n	801b71a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801b6c8:	2001      	movs	r0, #1
 801b6ca:	f002 fb3d 	bl	801dd48 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801b6ce:	4b15      	ldr	r3, [pc, #84]	; (801b724 <RadioSetModem+0xb4>)
 801b6d0:	7b5a      	ldrb	r2, [r3, #13]
 801b6d2:	4b14      	ldr	r3, [pc, #80]	; (801b724 <RadioSetModem+0xb4>)
 801b6d4:	7b1b      	ldrb	r3, [r3, #12]
 801b6d6:	429a      	cmp	r2, r3
 801b6d8:	d01e      	beq.n	801b718 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801b6da:	4b12      	ldr	r3, [pc, #72]	; (801b724 <RadioSetModem+0xb4>)
 801b6dc:	7b1a      	ldrb	r2, [r3, #12]
 801b6de:	4b11      	ldr	r3, [pc, #68]	; (801b724 <RadioSetModem+0xb4>)
 801b6e0:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801b6e2:	4b10      	ldr	r3, [pc, #64]	; (801b724 <RadioSetModem+0xb4>)
 801b6e4:	7b5b      	ldrb	r3, [r3, #13]
 801b6e6:	4618      	mov	r0, r3
 801b6e8:	f000 ffa2 	bl	801c630 <RadioSetPublicNetwork>
        }
        break;
 801b6ec:	e014      	b.n	801b718 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801b6ee:	2002      	movs	r0, #2
 801b6f0:	f002 fb2a 	bl	801dd48 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b6f4:	4b0b      	ldr	r3, [pc, #44]	; (801b724 <RadioSetModem+0xb4>)
 801b6f6:	2200      	movs	r2, #0
 801b6f8:	735a      	strb	r2, [r3, #13]
        break;
 801b6fa:	e00e      	b.n	801b71a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801b6fc:	2002      	movs	r0, #2
 801b6fe:	f002 fb23 	bl	801dd48 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b702:	4b08      	ldr	r3, [pc, #32]	; (801b724 <RadioSetModem+0xb4>)
 801b704:	2200      	movs	r2, #0
 801b706:	735a      	strb	r2, [r3, #13]
        break;
 801b708:	e007      	b.n	801b71a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b70a:	2000      	movs	r0, #0
 801b70c:	f002 fb1c 	bl	801dd48 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b710:	4b04      	ldr	r3, [pc, #16]	; (801b724 <RadioSetModem+0xb4>)
 801b712:	2200      	movs	r2, #0
 801b714:	735a      	strb	r2, [r3, #13]
        break;
 801b716:	e000      	b.n	801b71a <RadioSetModem+0xaa>
        break;
 801b718:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801b71a:	bf00      	nop
 801b71c:	3708      	adds	r7, #8
 801b71e:	46bd      	mov	sp, r7
 801b720:	bd80      	pop	{r7, pc}
 801b722:	bf00      	nop
 801b724:	20001b7c 	.word	0x20001b7c

0801b728 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801b728:	b580      	push	{r7, lr}
 801b72a:	b082      	sub	sp, #8
 801b72c:	af00      	add	r7, sp, #0
 801b72e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801b730:	6878      	ldr	r0, [r7, #4]
 801b732:	f002 fac3 	bl	801dcbc <SUBGRF_SetRfFrequency>
}
 801b736:	bf00      	nop
 801b738:	3708      	adds	r7, #8
 801b73a:	46bd      	mov	sp, r7
 801b73c:	bd80      	pop	{r7, pc}

0801b73e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801b73e:	b580      	push	{r7, lr}
 801b740:	b090      	sub	sp, #64	; 0x40
 801b742:	af0a      	add	r7, sp, #40	; 0x28
 801b744:	60f8      	str	r0, [r7, #12]
 801b746:	60b9      	str	r1, [r7, #8]
 801b748:	603b      	str	r3, [r7, #0]
 801b74a:	4613      	mov	r3, r2
 801b74c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801b74e:	2301      	movs	r3, #1
 801b750:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801b752:	2300      	movs	r3, #0
 801b754:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801b756:	2300      	movs	r3, #0
 801b758:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801b75a:	f000 fdf2 	bl	801c342 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801b75e:	2000      	movs	r0, #0
 801b760:	f7ff ff86 	bl	801b670 <RadioSetModem>

    RadioSetChannel( freq );
 801b764:	68f8      	ldr	r0, [r7, #12]
 801b766:	f7ff ffdf 	bl	801b728 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801b76a:	2301      	movs	r3, #1
 801b76c:	9309      	str	r3, [sp, #36]	; 0x24
 801b76e:	2300      	movs	r3, #0
 801b770:	9308      	str	r3, [sp, #32]
 801b772:	2300      	movs	r3, #0
 801b774:	9307      	str	r3, [sp, #28]
 801b776:	2300      	movs	r3, #0
 801b778:	9306      	str	r3, [sp, #24]
 801b77a:	2300      	movs	r3, #0
 801b77c:	9305      	str	r3, [sp, #20]
 801b77e:	2300      	movs	r3, #0
 801b780:	9304      	str	r3, [sp, #16]
 801b782:	2300      	movs	r3, #0
 801b784:	9303      	str	r3, [sp, #12]
 801b786:	2300      	movs	r3, #0
 801b788:	9302      	str	r3, [sp, #8]
 801b78a:	2303      	movs	r3, #3
 801b78c:	9301      	str	r3, [sp, #4]
 801b78e:	68bb      	ldr	r3, [r7, #8]
 801b790:	9300      	str	r3, [sp, #0]
 801b792:	2300      	movs	r3, #0
 801b794:	f44f 7216 	mov.w	r2, #600	; 0x258
 801b798:	68b9      	ldr	r1, [r7, #8]
 801b79a:	2000      	movs	r0, #0
 801b79c:	f000 f83c 	bl	801b818 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801b7a0:	2000      	movs	r0, #0
 801b7a2:	f000 fdd5 	bl	801c350 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801b7a6:	f000 ff71 	bl	801c68c <RadioGetWakeupTime>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	4618      	mov	r0, r3
 801b7ae:	f7e6 fe91 	bl	80024d4 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801b7b2:	f003 ffcf 	bl	801f754 <UTIL_TIMER_GetCurrentTime>
 801b7b6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801b7b8:	e00d      	b.n	801b7d6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801b7ba:	2000      	movs	r0, #0
 801b7bc:	f000 feb6 	bl	801c52c <RadioRssi>
 801b7c0:	4603      	mov	r3, r0
 801b7c2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801b7c4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b7c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b7cc:	429a      	cmp	r2, r3
 801b7ce:	dd02      	ble.n	801b7d6 <RadioIsChannelFree+0x98>
        {
            status = false;
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	75fb      	strb	r3, [r7, #23]
            break;
 801b7d4:	e006      	b.n	801b7e4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801b7d6:	6938      	ldr	r0, [r7, #16]
 801b7d8:	f003 ffce 	bl	801f778 <UTIL_TIMER_GetElapsedTime>
 801b7dc:	4602      	mov	r2, r0
 801b7de:	683b      	ldr	r3, [r7, #0]
 801b7e0:	4293      	cmp	r3, r2
 801b7e2:	d8ea      	bhi.n	801b7ba <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801b7e4:	f000 fdad 	bl	801c342 <RadioStandby>

    return status;
 801b7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 801b7ea:	4618      	mov	r0, r3
 801b7ec:	3718      	adds	r7, #24
 801b7ee:	46bd      	mov	sp, r7
 801b7f0:	bd80      	pop	{r7, pc}

0801b7f2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801b7f2:	b580      	push	{r7, lr}
 801b7f4:	b082      	sub	sp, #8
 801b7f6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	2200      	movs	r2, #0
 801b800:	2100      	movs	r1, #0
 801b802:	2000      	movs	r0, #0
 801b804:	f002 f9fe 	bl	801dc04 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801b808:	f001 ffaf 	bl	801d76a <SUBGRF_GetRandom>
 801b80c:	6078      	str	r0, [r7, #4]

    return rnd;
 801b80e:	687b      	ldr	r3, [r7, #4]
}
 801b810:	4618      	mov	r0, r3
 801b812:	3708      	adds	r7, #8
 801b814:	46bd      	mov	sp, r7
 801b816:	bd80      	pop	{r7, pc}

0801b818 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801b818:	b580      	push	{r7, lr}
 801b81a:	b08a      	sub	sp, #40	; 0x28
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	60b9      	str	r1, [r7, #8]
 801b820:	607a      	str	r2, [r7, #4]
 801b822:	461a      	mov	r2, r3
 801b824:	4603      	mov	r3, r0
 801b826:	73fb      	strb	r3, [r7, #15]
 801b828:	4613      	mov	r3, r2
 801b82a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801b82c:	4ab9      	ldr	r2, [pc, #740]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b82e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b832:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801b834:	f003 f87d 	bl	801e932 <RFW_DeInit>
    if( rxContinuous == true )
 801b838:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d001      	beq.n	801b844 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801b840:	2300      	movs	r3, #0
 801b842:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801b844:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d004      	beq.n	801b856 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801b84c:	4ab2      	ldr	r2, [pc, #712]	; (801bb18 <RadioSetRxConfig+0x300>)
 801b84e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801b852:	7013      	strb	r3, [r2, #0]
 801b854:	e002      	b.n	801b85c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801b856:	4bb0      	ldr	r3, [pc, #704]	; (801bb18 <RadioSetRxConfig+0x300>)
 801b858:	22ff      	movs	r2, #255	; 0xff
 801b85a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801b85c:	7bfb      	ldrb	r3, [r7, #15]
 801b85e:	2b05      	cmp	r3, #5
 801b860:	d009      	beq.n	801b876 <RadioSetRxConfig+0x5e>
 801b862:	2b05      	cmp	r3, #5
 801b864:	f300 81d7 	bgt.w	801bc16 <RadioSetRxConfig+0x3fe>
 801b868:	2b00      	cmp	r3, #0
 801b86a:	f000 80bf 	beq.w	801b9ec <RadioSetRxConfig+0x1d4>
 801b86e:	2b01      	cmp	r3, #1
 801b870:	f000 8124 	beq.w	801babc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801b874:	e1cf      	b.n	801bc16 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801b876:	2001      	movs	r0, #1
 801b878:	f002 f8bc 	bl	801d9f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b87c:	4ba5      	ldr	r3, [pc, #660]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b87e:	2200      	movs	r2, #0
 801b880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801b884:	4aa3      	ldr	r2, [pc, #652]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801b88a:	4ba2      	ldr	r3, [pc, #648]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b88c:	2209      	movs	r2, #9
 801b88e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801b892:	4ba0      	ldr	r3, [pc, #640]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b894:	f44f 7248 	mov.w	r2, #800	; 0x320
 801b898:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801b89a:	68b8      	ldr	r0, [r7, #8]
 801b89c:	f002 ff7c 	bl	801e798 <SUBGRF_GetFskBandwidthRegValue>
 801b8a0:	4603      	mov	r3, r0
 801b8a2:	461a      	mov	r2, r3
 801b8a4:	4b9b      	ldr	r3, [pc, #620]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b8aa:	4b9a      	ldr	r3, [pc, #616]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8ac:	2200      	movs	r2, #0
 801b8ae:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801b8b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b8b2:	00db      	lsls	r3, r3, #3
 801b8b4:	b29a      	uxth	r2, r3
 801b8b6:	4b97      	ldr	r3, [pc, #604]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8b8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801b8ba:	4b96      	ldr	r3, [pc, #600]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8bc:	2200      	movs	r2, #0
 801b8be:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801b8c0:	4b94      	ldr	r3, [pc, #592]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8c2:	2210      	movs	r2, #16
 801b8c4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801b8c6:	4b93      	ldr	r3, [pc, #588]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8c8:	2200      	movs	r2, #0
 801b8ca:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801b8cc:	4b91      	ldr	r3, [pc, #580]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801b8d2:	4b91      	ldr	r3, [pc, #580]	; (801bb18 <RadioSetRxConfig+0x300>)
 801b8d4:	781a      	ldrb	r2, [r3, #0]
 801b8d6:	4b8f      	ldr	r3, [pc, #572]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8d8:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801b8da:	4b8e      	ldr	r3, [pc, #568]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8dc:	2201      	movs	r2, #1
 801b8de:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801b8e0:	4b8c      	ldr	r3, [pc, #560]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b8e2:	2200      	movs	r2, #0
 801b8e4:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801b8e6:	2005      	movs	r0, #5
 801b8e8:	f7ff fec2 	bl	801b670 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b8ec:	488b      	ldr	r0, [pc, #556]	; (801bb1c <RadioSetRxConfig+0x304>)
 801b8ee:	f002 fb1f 	bl	801df30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b8f2:	488b      	ldr	r0, [pc, #556]	; (801bb20 <RadioSetRxConfig+0x308>)
 801b8f4:	f002 fbee 	bl	801e0d4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801b8f8:	4a8a      	ldr	r2, [pc, #552]	; (801bb24 <RadioSetRxConfig+0x30c>)
 801b8fa:	f107 031c 	add.w	r3, r7, #28
 801b8fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b902:	e883 0003 	stmia.w	r3, {r0, r1}
 801b906:	f107 031c 	add.w	r3, r7, #28
 801b90a:	4618      	mov	r0, r3
 801b90c:	f001 feab 	bl	801d666 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801b910:	f240 10ff 	movw	r0, #511	; 0x1ff
 801b914:	f001 fef6 	bl	801d704 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801b918:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801b91c:	f000 fe25 	bl	801c56a <RadioRead>
 801b920:	4603      	mov	r3, r0
 801b922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801b926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b92a:	f023 0310 	bic.w	r3, r3, #16
 801b92e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801b932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b936:	4619      	mov	r1, r3
 801b938:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801b93c:	f000 fe03 	bl	801c546 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801b940:	2104      	movs	r1, #4
 801b942:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801b946:	f000 fdfe 	bl	801c546 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801b94a:	f640 009b 	movw	r0, #2203	; 0x89b
 801b94e:	f000 fe0c 	bl	801c56a <RadioRead>
 801b952:	4603      	mov	r3, r0
 801b954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801b958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b95c:	f023 031c 	bic.w	r3, r3, #28
 801b960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801b964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b968:	f043 0308 	orr.w	r3, r3, #8
 801b96c:	b2db      	uxtb	r3, r3
 801b96e:	4619      	mov	r1, r3
 801b970:	f640 009b 	movw	r0, #2203	; 0x89b
 801b974:	f000 fde7 	bl	801c546 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801b978:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801b97c:	f000 fdf5 	bl	801c56a <RadioRead>
 801b980:	4603      	mov	r3, r0
 801b982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801b986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b98a:	f023 0318 	bic.w	r3, r3, #24
 801b98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801b992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b996:	f043 0318 	orr.w	r3, r3, #24
 801b99a:	b2db      	uxtb	r3, r3
 801b99c:	4619      	mov	r1, r3
 801b99e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801b9a2:	f000 fdd0 	bl	801c546 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801b9a6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b9aa:	f000 fdde 	bl	801c56a <RadioRead>
 801b9ae:	4603      	mov	r3, r0
 801b9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801b9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b9b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801b9c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b9c4:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801b9c8:	b2db      	uxtb	r3, r3
 801b9ca:	4619      	mov	r1, r3
 801b9cc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b9d0:	f000 fdb9 	bl	801c546 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801b9d4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b9d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b9da:	fb02 f303 	mul.w	r3, r2, r3
 801b9de:	461a      	mov	r2, r3
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 801b9e6:	4a4b      	ldr	r2, [pc, #300]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b9e8:	6093      	str	r3, [r2, #8]
            break;
 801b9ea:	e115      	b.n	801bc18 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801b9ec:	2000      	movs	r0, #0
 801b9ee:	f002 f801 	bl	801d9f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b9f2:	4b48      	ldr	r3, [pc, #288]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b9f4:	2200      	movs	r2, #0
 801b9f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801b9fa:	4a46      	ldr	r2, [pc, #280]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801ba00:	4b44      	ldr	r3, [pc, #272]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba02:	220b      	movs	r2, #11
 801ba04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801ba08:	68b8      	ldr	r0, [r7, #8]
 801ba0a:	f002 fec5 	bl	801e798 <SUBGRF_GetFskBandwidthRegValue>
 801ba0e:	4603      	mov	r3, r0
 801ba10:	461a      	mov	r2, r3
 801ba12:	4b40      	ldr	r3, [pc, #256]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ba18:	4b3e      	ldr	r3, [pc, #248]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba1a:	2200      	movs	r2, #0
 801ba1c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801ba1e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ba20:	00db      	lsls	r3, r3, #3
 801ba22:	b29a      	uxth	r2, r3
 801ba24:	4b3b      	ldr	r3, [pc, #236]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba26:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801ba28:	4b3a      	ldr	r3, [pc, #232]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba2a:	2204      	movs	r2, #4
 801ba2c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801ba2e:	4b39      	ldr	r3, [pc, #228]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba30:	2218      	movs	r2, #24
 801ba32:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801ba34:	4b37      	ldr	r3, [pc, #220]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba36:	2200      	movs	r2, #0
 801ba38:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801ba3a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801ba3e:	f083 0301 	eor.w	r3, r3, #1
 801ba42:	b2db      	uxtb	r3, r3
 801ba44:	461a      	mov	r2, r3
 801ba46:	4b33      	ldr	r3, [pc, #204]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba48:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801ba4a:	4b33      	ldr	r3, [pc, #204]	; (801bb18 <RadioSetRxConfig+0x300>)
 801ba4c:	781a      	ldrb	r2, [r3, #0]
 801ba4e:	4b31      	ldr	r3, [pc, #196]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba50:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801ba52:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d003      	beq.n	801ba62 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801ba5a:	4b2e      	ldr	r3, [pc, #184]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba5c:	22f2      	movs	r2, #242	; 0xf2
 801ba5e:	75da      	strb	r2, [r3, #23]
 801ba60:	e002      	b.n	801ba68 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801ba62:	4b2c      	ldr	r3, [pc, #176]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba64:	2201      	movs	r2, #1
 801ba66:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801ba68:	4b2a      	ldr	r3, [pc, #168]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801ba6a:	2201      	movs	r2, #1
 801ba6c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801ba6e:	f000 fc68 	bl	801c342 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801ba72:	2000      	movs	r0, #0
 801ba74:	f7ff fdfc 	bl	801b670 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ba78:	4828      	ldr	r0, [pc, #160]	; (801bb1c <RadioSetRxConfig+0x304>)
 801ba7a:	f002 fa59 	bl	801df30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ba7e:	4828      	ldr	r0, [pc, #160]	; (801bb20 <RadioSetRxConfig+0x308>)
 801ba80:	f002 fb28 	bl	801e0d4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801ba84:	4a28      	ldr	r2, [pc, #160]	; (801bb28 <RadioSetRxConfig+0x310>)
 801ba86:	f107 0314 	add.w	r3, r7, #20
 801ba8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ba8e:	e883 0003 	stmia.w	r3, {r0, r1}
 801ba92:	f107 0314 	add.w	r3, r7, #20
 801ba96:	4618      	mov	r0, r3
 801ba98:	f001 fde5 	bl	801d666 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801ba9c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801baa0:	f001 fe30 	bl	801d704 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801baa4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801baa6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801baaa:	fb02 f303 	mul.w	r3, r2, r3
 801baae:	461a      	mov	r2, r3
 801bab0:	687b      	ldr	r3, [r7, #4]
 801bab2:	fbb2 f3f3 	udiv	r3, r2, r3
 801bab6:	4a17      	ldr	r2, [pc, #92]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801bab8:	6093      	str	r3, [r2, #8]
            break;
 801baba:	e0ad      	b.n	801bc18 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801babc:	2000      	movs	r0, #0
 801babe:	f001 ff99 	bl	801d9f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bac2:	4b14      	ldr	r3, [pc, #80]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801bac4:	2201      	movs	r2, #1
 801bac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	b2da      	uxtb	r2, r3
 801bace:	4b11      	ldr	r3, [pc, #68]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801bad0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801bad4:	4a15      	ldr	r2, [pc, #84]	; (801bb2c <RadioSetRxConfig+0x314>)
 801bad6:	68bb      	ldr	r3, [r7, #8]
 801bad8:	4413      	add	r3, r2
 801bada:	781a      	ldrb	r2, [r3, #0]
 801badc:	4b0d      	ldr	r3, [pc, #52]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801bade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801bae2:	4a0c      	ldr	r2, [pc, #48]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801bae4:	7bbb      	ldrb	r3, [r7, #14]
 801bae6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801baea:	68bb      	ldr	r3, [r7, #8]
 801baec:	2b00      	cmp	r3, #0
 801baee:	d105      	bne.n	801bafc <RadioSetRxConfig+0x2e4>
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	2b0b      	cmp	r3, #11
 801baf4:	d008      	beq.n	801bb08 <RadioSetRxConfig+0x2f0>
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	2b0c      	cmp	r3, #12
 801bafa:	d005      	beq.n	801bb08 <RadioSetRxConfig+0x2f0>
 801bafc:	68bb      	ldr	r3, [r7, #8]
 801bafe:	2b01      	cmp	r3, #1
 801bb00:	d116      	bne.n	801bb30 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	2b0c      	cmp	r3, #12
 801bb06:	d113      	bne.n	801bb30 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801bb08:	4b02      	ldr	r3, [pc, #8]	; (801bb14 <RadioSetRxConfig+0x2fc>)
 801bb0a:	2201      	movs	r2, #1
 801bb0c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801bb10:	e012      	b.n	801bb38 <RadioSetRxConfig+0x320>
 801bb12:	bf00      	nop
 801bb14:	20001b7c 	.word	0x20001b7c
 801bb18:	20000134 	.word	0x20000134
 801bb1c:	20001bb4 	.word	0x20001bb4
 801bb20:	20001b8a 	.word	0x20001b8a
 801bb24:	080207fc 	.word	0x080207fc
 801bb28:	08020804 	.word	0x08020804
 801bb2c:	08020ed8 	.word	0x08020ed8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bb30:	4b3b      	ldr	r3, [pc, #236]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb32:	2200      	movs	r2, #0
 801bb34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bb38:	4b39      	ldr	r3, [pc, #228]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb3a:	2201      	movs	r2, #1
 801bb3c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bb3e:	4b38      	ldr	r3, [pc, #224]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bb44:	2b05      	cmp	r3, #5
 801bb46:	d004      	beq.n	801bb52 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bb48:	4b35      	ldr	r3, [pc, #212]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bb4e:	2b06      	cmp	r3, #6
 801bb50:	d10a      	bne.n	801bb68 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801bb52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bb54:	2b0b      	cmp	r3, #11
 801bb56:	d803      	bhi.n	801bb60 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bb58:	4b31      	ldr	r3, [pc, #196]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb5a:	220c      	movs	r2, #12
 801bb5c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bb5e:	e006      	b.n	801bb6e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bb60:	4a2f      	ldr	r2, [pc, #188]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bb64:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bb66:	e002      	b.n	801bb6e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bb68:	4a2d      	ldr	r2, [pc, #180]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bb6c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bb6e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bb72:	4b2b      	ldr	r3, [pc, #172]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb74:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bb76:	4b2b      	ldr	r3, [pc, #172]	; (801bc24 <RadioSetRxConfig+0x40c>)
 801bb78:	781a      	ldrb	r2, [r3, #0]
 801bb7a:	4b29      	ldr	r3, [pc, #164]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb7c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bb7e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801bb82:	4b27      	ldr	r3, [pc, #156]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb84:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bb88:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801bb8c:	4b24      	ldr	r3, [pc, #144]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bb8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bb92:	f000 fbd6 	bl	801c342 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801bb96:	2001      	movs	r0, #1
 801bb98:	f7ff fd6a 	bl	801b670 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bb9c:	4822      	ldr	r0, [pc, #136]	; (801bc28 <RadioSetRxConfig+0x410>)
 801bb9e:	f002 f9c7 	bl	801df30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bba2:	4822      	ldr	r0, [pc, #136]	; (801bc2c <RadioSetRxConfig+0x414>)
 801bba4:	f002 fa96 	bl	801e0d4 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bba8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bbaa:	b2db      	uxtb	r3, r3
 801bbac:	4618      	mov	r0, r3
 801bbae:	f001 ff30 	bl	801da12 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801bbb2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bbb6:	f002 fbe9 	bl	801e38c <SUBGRF_ReadRegister>
 801bbba:	4603      	mov	r3, r0
 801bbbc:	f003 0301 	and.w	r3, r3, #1
 801bbc0:	b2db      	uxtb	r3, r3
 801bbc2:	4619      	mov	r1, r3
 801bbc4:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801bbc8:	f002 fbcc 	bl	801e364 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bbcc:	4b14      	ldr	r3, [pc, #80]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bbce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bbd2:	2b01      	cmp	r3, #1
 801bbd4:	d10d      	bne.n	801bbf2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801bbd6:	f240 7036 	movw	r0, #1846	; 0x736
 801bbda:	f002 fbd7 	bl	801e38c <SUBGRF_ReadRegister>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	f023 0304 	bic.w	r3, r3, #4
 801bbe4:	b2db      	uxtb	r3, r3
 801bbe6:	4619      	mov	r1, r3
 801bbe8:	f240 7036 	movw	r0, #1846	; 0x736
 801bbec:	f002 fbba 	bl	801e364 <SUBGRF_WriteRegister>
 801bbf0:	e00c      	b.n	801bc0c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801bbf2:	f240 7036 	movw	r0, #1846	; 0x736
 801bbf6:	f002 fbc9 	bl	801e38c <SUBGRF_ReadRegister>
 801bbfa:	4603      	mov	r3, r0
 801bbfc:	f043 0304 	orr.w	r3, r3, #4
 801bc00:	b2db      	uxtb	r3, r3
 801bc02:	4619      	mov	r1, r3
 801bc04:	f240 7036 	movw	r0, #1846	; 0x736
 801bc08:	f002 fbac 	bl	801e364 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801bc0c:	4b04      	ldr	r3, [pc, #16]	; (801bc20 <RadioSetRxConfig+0x408>)
 801bc0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc12:	609a      	str	r2, [r3, #8]
            break;
 801bc14:	e000      	b.n	801bc18 <RadioSetRxConfig+0x400>
            break;
 801bc16:	bf00      	nop
    }
}
 801bc18:	bf00      	nop
 801bc1a:	3728      	adds	r7, #40	; 0x28
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	bd80      	pop	{r7, pc}
 801bc20:	20001b7c 	.word	0x20001b7c
 801bc24:	20000134 	.word	0x20000134
 801bc28:	20001bb4 	.word	0x20001bb4
 801bc2c:	20001b8a 	.word	0x20001b8a

0801bc30 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801bc30:	b580      	push	{r7, lr}
 801bc32:	b086      	sub	sp, #24
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	60ba      	str	r2, [r7, #8]
 801bc38:	607b      	str	r3, [r7, #4]
 801bc3a:	4603      	mov	r3, r0
 801bc3c:	73fb      	strb	r3, [r7, #15]
 801bc3e:	460b      	mov	r3, r1
 801bc40:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801bc42:	f002 fe76 	bl	801e932 <RFW_DeInit>
    switch( modem )
 801bc46:	7bfb      	ldrb	r3, [r7, #15]
 801bc48:	2b04      	cmp	r3, #4
 801bc4a:	f000 80c7 	beq.w	801bddc <RadioSetTxConfig+0x1ac>
 801bc4e:	2b04      	cmp	r3, #4
 801bc50:	f300 80d6 	bgt.w	801be00 <RadioSetTxConfig+0x1d0>
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d002      	beq.n	801bc5e <RadioSetTxConfig+0x2e>
 801bc58:	2b01      	cmp	r3, #1
 801bc5a:	d059      	beq.n	801bd10 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801bc5c:	e0d0      	b.n	801be00 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc5e:	4b77      	ldr	r3, [pc, #476]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bc60:	2200      	movs	r2, #0
 801bc62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bc66:	4a75      	ldr	r2, [pc, #468]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bc68:	6a3b      	ldr	r3, [r7, #32]
 801bc6a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bc6c:	4b73      	ldr	r3, [pc, #460]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bc6e:	220b      	movs	r2, #11
 801bc70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bc74:	6878      	ldr	r0, [r7, #4]
 801bc76:	f002 fd8f 	bl	801e798 <SUBGRF_GetFskBandwidthRegValue>
 801bc7a:	4603      	mov	r3, r0
 801bc7c:	461a      	mov	r2, r3
 801bc7e:	4b6f      	ldr	r3, [pc, #444]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bc80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801bc84:	4a6d      	ldr	r2, [pc, #436]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc8a:	4b6c      	ldr	r3, [pc, #432]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bc8c:	2200      	movs	r2, #0
 801bc8e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bc90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bc92:	00db      	lsls	r3, r3, #3
 801bc94:	b29a      	uxth	r2, r3
 801bc96:	4b69      	ldr	r3, [pc, #420]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bc98:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bc9a:	4b68      	ldr	r3, [pc, #416]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bc9c:	2204      	movs	r2, #4
 801bc9e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801bca0:	4b66      	ldr	r3, [pc, #408]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bca2:	2218      	movs	r2, #24
 801bca4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bca6:	4b65      	ldr	r3, [pc, #404]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bca8:	2200      	movs	r2, #0
 801bcaa:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bcac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801bcb0:	f083 0301 	eor.w	r3, r3, #1
 801bcb4:	b2db      	uxtb	r3, r3
 801bcb6:	461a      	mov	r2, r3
 801bcb8:	4b60      	ldr	r3, [pc, #384]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bcba:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801bcbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bcc0:	2b00      	cmp	r3, #0
 801bcc2:	d003      	beq.n	801bccc <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bcc4:	4b5d      	ldr	r3, [pc, #372]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bcc6:	22f2      	movs	r2, #242	; 0xf2
 801bcc8:	75da      	strb	r2, [r3, #23]
 801bcca:	e002      	b.n	801bcd2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bccc:	4b5b      	ldr	r3, [pc, #364]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bcce:	2201      	movs	r2, #1
 801bcd0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bcd2:	4b5a      	ldr	r3, [pc, #360]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bcd4:	2201      	movs	r2, #1
 801bcd6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bcd8:	f000 fb33 	bl	801c342 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801bcdc:	2000      	movs	r0, #0
 801bcde:	f7ff fcc7 	bl	801b670 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bce2:	4857      	ldr	r0, [pc, #348]	; (801be40 <RadioSetTxConfig+0x210>)
 801bce4:	f002 f924 	bl	801df30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bce8:	4856      	ldr	r0, [pc, #344]	; (801be44 <RadioSetTxConfig+0x214>)
 801bcea:	f002 f9f3 	bl	801e0d4 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bcee:	4a56      	ldr	r2, [pc, #344]	; (801be48 <RadioSetTxConfig+0x218>)
 801bcf0:	f107 0310 	add.w	r3, r7, #16
 801bcf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bcf8:	e883 0003 	stmia.w	r3, {r0, r1}
 801bcfc:	f107 0310 	add.w	r3, r7, #16
 801bd00:	4618      	mov	r0, r3
 801bd02:	f001 fcb0 	bl	801d666 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bd06:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bd0a:	f001 fcfb 	bl	801d704 <SUBGRF_SetWhiteningSeed>
            break;
 801bd0e:	e078      	b.n	801be02 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bd10:	4b4a      	ldr	r3, [pc, #296]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd12:	2201      	movs	r2, #1
 801bd14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801bd18:	6a3b      	ldr	r3, [r7, #32]
 801bd1a:	b2da      	uxtb	r2, r3
 801bd1c:	4b47      	ldr	r3, [pc, #284]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801bd22:	4a4a      	ldr	r2, [pc, #296]	; (801be4c <RadioSetTxConfig+0x21c>)
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	4413      	add	r3, r2
 801bd28:	781a      	ldrb	r2, [r3, #0]
 801bd2a:	4b44      	ldr	r3, [pc, #272]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801bd30:	4a42      	ldr	r2, [pc, #264]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801bd36:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d105      	bne.n	801bd4c <RadioSetTxConfig+0x11c>
 801bd40:	6a3b      	ldr	r3, [r7, #32]
 801bd42:	2b0b      	cmp	r3, #11
 801bd44:	d008      	beq.n	801bd58 <RadioSetTxConfig+0x128>
 801bd46:	6a3b      	ldr	r3, [r7, #32]
 801bd48:	2b0c      	cmp	r3, #12
 801bd4a:	d005      	beq.n	801bd58 <RadioSetTxConfig+0x128>
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	2b01      	cmp	r3, #1
 801bd50:	d107      	bne.n	801bd62 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bd52:	6a3b      	ldr	r3, [r7, #32]
 801bd54:	2b0c      	cmp	r3, #12
 801bd56:	d104      	bne.n	801bd62 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801bd58:	4b38      	ldr	r3, [pc, #224]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd5a:	2201      	movs	r2, #1
 801bd5c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801bd60:	e003      	b.n	801bd6a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bd62:	4b36      	ldr	r3, [pc, #216]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd64:	2200      	movs	r2, #0
 801bd66:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bd6a:	4b34      	ldr	r3, [pc, #208]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd6c:	2201      	movs	r2, #1
 801bd6e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bd70:	4b32      	ldr	r3, [pc, #200]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bd76:	2b05      	cmp	r3, #5
 801bd78:	d004      	beq.n	801bd84 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bd7a:	4b30      	ldr	r3, [pc, #192]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bd80:	2b06      	cmp	r3, #6
 801bd82:	d10a      	bne.n	801bd9a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801bd84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bd86:	2b0b      	cmp	r3, #11
 801bd88:	d803      	bhi.n	801bd92 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bd8a:	4b2c      	ldr	r3, [pc, #176]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd8c:	220c      	movs	r2, #12
 801bd8e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bd90:	e006      	b.n	801bda0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bd92:	4a2a      	ldr	r2, [pc, #168]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bd96:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bd98:	e002      	b.n	801bda0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bd9a:	4a28      	ldr	r2, [pc, #160]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bd9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bd9e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bda0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801bda4:	4b25      	ldr	r3, [pc, #148]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bda6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bda8:	4b29      	ldr	r3, [pc, #164]	; (801be50 <RadioSetTxConfig+0x220>)
 801bdaa:	781a      	ldrb	r2, [r3, #0]
 801bdac:	4b23      	ldr	r3, [pc, #140]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bdae:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bdb0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801bdb4:	4b21      	ldr	r3, [pc, #132]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bdb6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bdba:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bdbe:	4b1f      	ldr	r3, [pc, #124]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bdc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bdc4:	f000 fabd 	bl	801c342 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801bdc8:	2001      	movs	r0, #1
 801bdca:	f7ff fc51 	bl	801b670 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdce:	481c      	ldr	r0, [pc, #112]	; (801be40 <RadioSetTxConfig+0x210>)
 801bdd0:	f002 f8ae 	bl	801df30 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bdd4:	481b      	ldr	r0, [pc, #108]	; (801be44 <RadioSetTxConfig+0x214>)
 801bdd6:	f002 f97d 	bl	801e0d4 <SUBGRF_SetPacketParams>
            break;
 801bdda:	e012      	b.n	801be02 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801bddc:	2004      	movs	r0, #4
 801bdde:	f7ff fc47 	bl	801b670 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801bde2:	4b16      	ldr	r3, [pc, #88]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bde4:	2202      	movs	r2, #2
 801bde6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801bdea:	4a14      	ldr	r2, [pc, #80]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bdec:	6a3b      	ldr	r3, [r7, #32]
 801bdee:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801bdf0:	4b12      	ldr	r3, [pc, #72]	; (801be3c <RadioSetTxConfig+0x20c>)
 801bdf2:	2216      	movs	r2, #22
 801bdf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdf8:	4811      	ldr	r0, [pc, #68]	; (801be40 <RadioSetTxConfig+0x210>)
 801bdfa:	f002 f899 	bl	801df30 <SUBGRF_SetModulationParams>
            break;
 801bdfe:	e000      	b.n	801be02 <RadioSetTxConfig+0x1d2>
            break;
 801be00:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801be02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801be06:	4618      	mov	r0, r3
 801be08:	f002 fbc8 	bl	801e59c <SUBGRF_SetRfTxPower>
 801be0c:	4603      	mov	r3, r0
 801be0e:	461a      	mov	r2, r3
 801be10:	4b0a      	ldr	r3, [pc, #40]	; (801be3c <RadioSetTxConfig+0x20c>)
 801be12:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801be16:	210e      	movs	r1, #14
 801be18:	f640 101f 	movw	r0, #2335	; 0x91f
 801be1c:	f002 faa2 	bl	801e364 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801be20:	4b06      	ldr	r3, [pc, #24]	; (801be3c <RadioSetTxConfig+0x20c>)
 801be22:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801be26:	4618      	mov	r0, r3
 801be28:	f002 fd97 	bl	801e95a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801be2c:	4a03      	ldr	r2, [pc, #12]	; (801be3c <RadioSetTxConfig+0x20c>)
 801be2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801be30:	6053      	str	r3, [r2, #4]
}
 801be32:	bf00      	nop
 801be34:	3718      	adds	r7, #24
 801be36:	46bd      	mov	sp, r7
 801be38:	bd80      	pop	{r7, pc}
 801be3a:	bf00      	nop
 801be3c:	20001b7c 	.word	0x20001b7c
 801be40:	20001bb4 	.word	0x20001bb4
 801be44:	20001b8a 	.word	0x20001b8a
 801be48:	08020804 	.word	0x08020804
 801be4c:	08020ed8 	.word	0x08020ed8
 801be50:	20000134 	.word	0x20000134

0801be54 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801be54:	b480      	push	{r7}
 801be56:	b083      	sub	sp, #12
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
    return true;
 801be5c:	2301      	movs	r3, #1
}
 801be5e:	4618      	mov	r0, r3
 801be60:	370c      	adds	r7, #12
 801be62:	46bd      	mov	sp, r7
 801be64:	bc80      	pop	{r7}
 801be66:	4770      	bx	lr

0801be68 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801be68:	b480      	push	{r7}
 801be6a:	b085      	sub	sp, #20
 801be6c:	af00      	add	r7, sp, #0
 801be6e:	4603      	mov	r3, r0
 801be70:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801be72:	2300      	movs	r3, #0
 801be74:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801be76:	79fb      	ldrb	r3, [r7, #7]
 801be78:	2b0a      	cmp	r3, #10
 801be7a:	d83e      	bhi.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
 801be7c:	a201      	add	r2, pc, #4	; (adr r2, 801be84 <RadioGetLoRaBandwidthInHz+0x1c>)
 801be7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be82:	bf00      	nop
 801be84:	0801beb1 	.word	0x0801beb1
 801be88:	0801bec1 	.word	0x0801bec1
 801be8c:	0801bed1 	.word	0x0801bed1
 801be90:	0801bee1 	.word	0x0801bee1
 801be94:	0801bee9 	.word	0x0801bee9
 801be98:	0801beef 	.word	0x0801beef
 801be9c:	0801bef5 	.word	0x0801bef5
 801bea0:	0801befb 	.word	0x0801befb
 801bea4:	0801beb9 	.word	0x0801beb9
 801bea8:	0801bec9 	.word	0x0801bec9
 801beac:	0801bed9 	.word	0x0801bed9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801beb0:	f641 6384 	movw	r3, #7812	; 0x1e84
 801beb4:	60fb      	str	r3, [r7, #12]
        break;
 801beb6:	e020      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801beb8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801bebc:	60fb      	str	r3, [r7, #12]
        break;
 801bebe:	e01c      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801bec0:	f643 5309 	movw	r3, #15625	; 0x3d09
 801bec4:	60fb      	str	r3, [r7, #12]
        break;
 801bec6:	e018      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801bec8:	f245 1361 	movw	r3, #20833	; 0x5161
 801becc:	60fb      	str	r3, [r7, #12]
        break;
 801bece:	e014      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801bed0:	f647 2312 	movw	r3, #31250	; 0x7a12
 801bed4:	60fb      	str	r3, [r7, #12]
        break;
 801bed6:	e010      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801bed8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801bedc:	60fb      	str	r3, [r7, #12]
        break;
 801bede:	e00c      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801bee0:	f24f 4324 	movw	r3, #62500	; 0xf424
 801bee4:	60fb      	str	r3, [r7, #12]
        break;
 801bee6:	e008      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801bee8:	4b07      	ldr	r3, [pc, #28]	; (801bf08 <RadioGetLoRaBandwidthInHz+0xa0>)
 801beea:	60fb      	str	r3, [r7, #12]
        break;
 801beec:	e005      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801beee:	4b07      	ldr	r3, [pc, #28]	; (801bf0c <RadioGetLoRaBandwidthInHz+0xa4>)
 801bef0:	60fb      	str	r3, [r7, #12]
        break;
 801bef2:	e002      	b.n	801befa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801bef4:	4b06      	ldr	r3, [pc, #24]	; (801bf10 <RadioGetLoRaBandwidthInHz+0xa8>)
 801bef6:	60fb      	str	r3, [r7, #12]
        break;
 801bef8:	bf00      	nop
    }

    return bandwidthInHz;
 801befa:	68fb      	ldr	r3, [r7, #12]
}
 801befc:	4618      	mov	r0, r3
 801befe:	3714      	adds	r7, #20
 801bf00:	46bd      	mov	sp, r7
 801bf02:	bc80      	pop	{r7}
 801bf04:	4770      	bx	lr
 801bf06:	bf00      	nop
 801bf08:	0001e848 	.word	0x0001e848
 801bf0c:	0003d090 	.word	0x0003d090
 801bf10:	0007a120 	.word	0x0007a120

0801bf14 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801bf14:	b480      	push	{r7}
 801bf16:	b083      	sub	sp, #12
 801bf18:	af00      	add	r7, sp, #0
 801bf1a:	6078      	str	r0, [r7, #4]
 801bf1c:	4608      	mov	r0, r1
 801bf1e:	4611      	mov	r1, r2
 801bf20:	461a      	mov	r2, r3
 801bf22:	4603      	mov	r3, r0
 801bf24:	70fb      	strb	r3, [r7, #3]
 801bf26:	460b      	mov	r3, r1
 801bf28:	803b      	strh	r3, [r7, #0]
 801bf2a:	4613      	mov	r3, r2
 801bf2c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801bf2e:	883b      	ldrh	r3, [r7, #0]
 801bf30:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801bf32:	78ba      	ldrb	r2, [r7, #2]
 801bf34:	f082 0201 	eor.w	r2, r2, #1
 801bf38:	b2d2      	uxtb	r2, r2
 801bf3a:	2a00      	cmp	r2, #0
 801bf3c:	d001      	beq.n	801bf42 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801bf3e:	2208      	movs	r2, #8
 801bf40:	e000      	b.n	801bf44 <RadioGetGfskTimeOnAirNumerator+0x30>
 801bf42:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801bf44:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801bf46:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801bf4a:	7c3b      	ldrb	r3, [r7, #16]
 801bf4c:	7d39      	ldrb	r1, [r7, #20]
 801bf4e:	2900      	cmp	r1, #0
 801bf50:	d001      	beq.n	801bf56 <RadioGetGfskTimeOnAirNumerator+0x42>
 801bf52:	2102      	movs	r1, #2
 801bf54:	e000      	b.n	801bf58 <RadioGetGfskTimeOnAirNumerator+0x44>
 801bf56:	2100      	movs	r1, #0
 801bf58:	440b      	add	r3, r1
 801bf5a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801bf5c:	4413      	add	r3, r2
}
 801bf5e:	4618      	mov	r0, r3
 801bf60:	370c      	adds	r7, #12
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bc80      	pop	{r7}
 801bf66:	4770      	bx	lr

0801bf68 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801bf68:	b480      	push	{r7}
 801bf6a:	b08b      	sub	sp, #44	; 0x2c
 801bf6c:	af00      	add	r7, sp, #0
 801bf6e:	60f8      	str	r0, [r7, #12]
 801bf70:	60b9      	str	r1, [r7, #8]
 801bf72:	4611      	mov	r1, r2
 801bf74:	461a      	mov	r2, r3
 801bf76:	460b      	mov	r3, r1
 801bf78:	71fb      	strb	r3, [r7, #7]
 801bf7a:	4613      	mov	r3, r2
 801bf7c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801bf7e:	79fb      	ldrb	r3, [r7, #7]
 801bf80:	3304      	adds	r3, #4
 801bf82:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801bf84:	2300      	movs	r3, #0
 801bf86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801bf8a:	68bb      	ldr	r3, [r7, #8]
 801bf8c:	2b05      	cmp	r3, #5
 801bf8e:	d002      	beq.n	801bf96 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801bf90:	68bb      	ldr	r3, [r7, #8]
 801bf92:	2b06      	cmp	r3, #6
 801bf94:	d104      	bne.n	801bfa0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801bf96:	88bb      	ldrh	r3, [r7, #4]
 801bf98:	2b0b      	cmp	r3, #11
 801bf9a:	d801      	bhi.n	801bfa0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801bf9c:	230c      	movs	r3, #12
 801bf9e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d105      	bne.n	801bfb2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801bfa6:	68bb      	ldr	r3, [r7, #8]
 801bfa8:	2b0b      	cmp	r3, #11
 801bfaa:	d008      	beq.n	801bfbe <RadioGetLoRaTimeOnAirNumerator+0x56>
 801bfac:	68bb      	ldr	r3, [r7, #8]
 801bfae:	2b0c      	cmp	r3, #12
 801bfb0:	d005      	beq.n	801bfbe <RadioGetLoRaTimeOnAirNumerator+0x56>
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	2b01      	cmp	r3, #1
 801bfb6:	d105      	bne.n	801bfc4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bfb8:	68bb      	ldr	r3, [r7, #8]
 801bfba:	2b0c      	cmp	r3, #12
 801bfbc:	d102      	bne.n	801bfc4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801bfbe:	2301      	movs	r3, #1
 801bfc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bfc4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801bfc8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801bfca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801bfce:	2a00      	cmp	r2, #0
 801bfd0:	d001      	beq.n	801bfd6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801bfd2:	2210      	movs	r2, #16
 801bfd4:	e000      	b.n	801bfd8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801bfd6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bfd8:	4413      	add	r3, r2
 801bfda:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801bfdc:	68bb      	ldr	r3, [r7, #8]
 801bfde:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801bfe0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801bfe2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801bfe6:	2a00      	cmp	r2, #0
 801bfe8:	d001      	beq.n	801bfee <RadioGetLoRaTimeOnAirNumerator+0x86>
 801bfea:	2200      	movs	r2, #0
 801bfec:	e000      	b.n	801bff0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801bfee:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801bff0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801bff2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801bff4:	68bb      	ldr	r3, [r7, #8]
 801bff6:	2b06      	cmp	r3, #6
 801bff8:	d803      	bhi.n	801c002 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801bffa:	68bb      	ldr	r3, [r7, #8]
 801bffc:	009b      	lsls	r3, r3, #2
 801bffe:	623b      	str	r3, [r7, #32]
 801c000:	e00e      	b.n	801c020 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801c002:	69fb      	ldr	r3, [r7, #28]
 801c004:	3308      	adds	r3, #8
 801c006:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801c008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d004      	beq.n	801c01a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801c010:	68bb      	ldr	r3, [r7, #8]
 801c012:	3b02      	subs	r3, #2
 801c014:	009b      	lsls	r3, r3, #2
 801c016:	623b      	str	r3, [r7, #32]
 801c018:	e002      	b.n	801c020 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801c01a:	68bb      	ldr	r3, [r7, #8]
 801c01c:	009b      	lsls	r3, r3, #2
 801c01e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c020:	69fb      	ldr	r3, [r7, #28]
 801c022:	2b00      	cmp	r3, #0
 801c024:	da01      	bge.n	801c02a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c026:	2300      	movs	r3, #0
 801c028:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c02a:	69fa      	ldr	r2, [r7, #28]
 801c02c:	6a3b      	ldr	r3, [r7, #32]
 801c02e:	4413      	add	r3, r2
 801c030:	1e5a      	subs	r2, r3, #1
 801c032:	6a3b      	ldr	r3, [r7, #32]
 801c034:	fb92 f3f3 	sdiv	r3, r2, r3
 801c038:	697a      	ldr	r2, [r7, #20]
 801c03a:	fb03 f202 	mul.w	r2, r3, r2
 801c03e:	88bb      	ldrh	r3, [r7, #4]
 801c040:	4413      	add	r3, r2
    int32_t intermediate =
 801c042:	330c      	adds	r3, #12
 801c044:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c046:	68bb      	ldr	r3, [r7, #8]
 801c048:	2b06      	cmp	r3, #6
 801c04a:	d802      	bhi.n	801c052 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c04c:	69bb      	ldr	r3, [r7, #24]
 801c04e:	3302      	adds	r3, #2
 801c050:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c052:	69bb      	ldr	r3, [r7, #24]
 801c054:	009b      	lsls	r3, r3, #2
 801c056:	1c5a      	adds	r2, r3, #1
 801c058:	68bb      	ldr	r3, [r7, #8]
 801c05a:	3b02      	subs	r3, #2
 801c05c:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c060:	4618      	mov	r0, r3
 801c062:	372c      	adds	r7, #44	; 0x2c
 801c064:	46bd      	mov	sp, r7
 801c066:	bc80      	pop	{r7}
 801c068:	4770      	bx	lr
	...

0801c06c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c06c:	b580      	push	{r7, lr}
 801c06e:	b08a      	sub	sp, #40	; 0x28
 801c070:	af04      	add	r7, sp, #16
 801c072:	60b9      	str	r1, [r7, #8]
 801c074:	607a      	str	r2, [r7, #4]
 801c076:	461a      	mov	r2, r3
 801c078:	4603      	mov	r3, r0
 801c07a:	73fb      	strb	r3, [r7, #15]
 801c07c:	4613      	mov	r3, r2
 801c07e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c080:	2300      	movs	r3, #0
 801c082:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c084:	2301      	movs	r3, #1
 801c086:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c088:	7bfb      	ldrb	r3, [r7, #15]
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d002      	beq.n	801c094 <RadioTimeOnAir+0x28>
 801c08e:	2b01      	cmp	r3, #1
 801c090:	d017      	beq.n	801c0c2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c092:	e035      	b.n	801c100 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c094:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c098:	8c3a      	ldrh	r2, [r7, #32]
 801c09a:	7bb9      	ldrb	r1, [r7, #14]
 801c09c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c0a0:	9301      	str	r3, [sp, #4]
 801c0a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c0a6:	9300      	str	r3, [sp, #0]
 801c0a8:	4603      	mov	r3, r0
 801c0aa:	6878      	ldr	r0, [r7, #4]
 801c0ac:	f7ff ff32 	bl	801bf14 <RadioGetGfskTimeOnAirNumerator>
 801c0b0:	4603      	mov	r3, r0
 801c0b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c0b6:	fb02 f303 	mul.w	r3, r2, r3
 801c0ba:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	613b      	str	r3, [r7, #16]
        break;
 801c0c0:	e01e      	b.n	801c100 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c0c2:	8c39      	ldrh	r1, [r7, #32]
 801c0c4:	7bba      	ldrb	r2, [r7, #14]
 801c0c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c0ca:	9302      	str	r3, [sp, #8]
 801c0cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c0d0:	9301      	str	r3, [sp, #4]
 801c0d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c0d6:	9300      	str	r3, [sp, #0]
 801c0d8:	460b      	mov	r3, r1
 801c0da:	6879      	ldr	r1, [r7, #4]
 801c0dc:	68b8      	ldr	r0, [r7, #8]
 801c0de:	f7ff ff43 	bl	801bf68 <RadioGetLoRaTimeOnAirNumerator>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c0e8:	fb02 f303 	mul.w	r3, r2, r3
 801c0ec:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c0ee:	4a0a      	ldr	r2, [pc, #40]	; (801c118 <RadioTimeOnAir+0xac>)
 801c0f0:	68bb      	ldr	r3, [r7, #8]
 801c0f2:	4413      	add	r3, r2
 801c0f4:	781b      	ldrb	r3, [r3, #0]
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	f7ff feb6 	bl	801be68 <RadioGetLoRaBandwidthInHz>
 801c0fc:	6138      	str	r0, [r7, #16]
        break;
 801c0fe:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801c100:	697a      	ldr	r2, [r7, #20]
 801c102:	693b      	ldr	r3, [r7, #16]
 801c104:	4413      	add	r3, r2
 801c106:	1e5a      	subs	r2, r3, #1
 801c108:	693b      	ldr	r3, [r7, #16]
 801c10a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c10e:	4618      	mov	r0, r3
 801c110:	3718      	adds	r7, #24
 801c112:	46bd      	mov	sp, r7
 801c114:	bd80      	pop	{r7, pc}
 801c116:	bf00      	nop
 801c118:	08020ed8 	.word	0x08020ed8

0801c11c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801c11c:	b580      	push	{r7, lr}
 801c11e:	b084      	sub	sp, #16
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
 801c124:	460b      	mov	r3, r1
 801c126:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c128:	2300      	movs	r3, #0
 801c12a:	2200      	movs	r2, #0
 801c12c:	f240 2101 	movw	r1, #513	; 0x201
 801c130:	f240 2001 	movw	r0, #513	; 0x201
 801c134:	f001 fd66 	bl	801dc04 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801c138:	4b73      	ldr	r3, [pc, #460]	; (801c308 <RadioSend+0x1ec>)
 801c13a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c13e:	2101      	movs	r1, #1
 801c140:	4618      	mov	r0, r3
 801c142:	f002 fa03 	bl	801e54c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801c146:	4b70      	ldr	r3, [pc, #448]	; (801c308 <RadioSend+0x1ec>)
 801c148:	781b      	ldrb	r3, [r3, #0]
 801c14a:	2b01      	cmp	r3, #1
 801c14c:	d112      	bne.n	801c174 <RadioSend+0x58>
 801c14e:	4b6e      	ldr	r3, [pc, #440]	; (801c308 <RadioSend+0x1ec>)
 801c150:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c154:	2b06      	cmp	r3, #6
 801c156:	d10d      	bne.n	801c174 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801c158:	f640 0089 	movw	r0, #2185	; 0x889
 801c15c:	f002 f916 	bl	801e38c <SUBGRF_ReadRegister>
 801c160:	4603      	mov	r3, r0
 801c162:	f023 0304 	bic.w	r3, r3, #4
 801c166:	b2db      	uxtb	r3, r3
 801c168:	4619      	mov	r1, r3
 801c16a:	f640 0089 	movw	r0, #2185	; 0x889
 801c16e:	f002 f8f9 	bl	801e364 <SUBGRF_WriteRegister>
 801c172:	e00c      	b.n	801c18e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801c174:	f640 0089 	movw	r0, #2185	; 0x889
 801c178:	f002 f908 	bl	801e38c <SUBGRF_ReadRegister>
 801c17c:	4603      	mov	r3, r0
 801c17e:	f043 0304 	orr.w	r3, r3, #4
 801c182:	b2db      	uxtb	r3, r3
 801c184:	4619      	mov	r1, r3
 801c186:	f640 0089 	movw	r0, #2185	; 0x889
 801c18a:	f002 f8eb 	bl	801e364 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801c18e:	4b5e      	ldr	r3, [pc, #376]	; (801c308 <RadioSend+0x1ec>)
 801c190:	781b      	ldrb	r3, [r3, #0]
 801c192:	2b04      	cmp	r3, #4
 801c194:	f200 80a8 	bhi.w	801c2e8 <RadioSend+0x1cc>
 801c198:	a201      	add	r2, pc, #4	; (adr r2, 801c1a0 <RadioSend+0x84>)
 801c19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c19e:	bf00      	nop
 801c1a0:	0801c1cf 	.word	0x0801c1cf
 801c1a4:	0801c1b5 	.word	0x0801c1b5
 801c1a8:	0801c1cf 	.word	0x0801c1cf
 801c1ac:	0801c231 	.word	0x0801c231
 801c1b0:	0801c251 	.word	0x0801c251
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c1b4:	4a54      	ldr	r2, [pc, #336]	; (801c308 <RadioSend+0x1ec>)
 801c1b6:	78fb      	ldrb	r3, [r7, #3]
 801c1b8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c1ba:	4854      	ldr	r0, [pc, #336]	; (801c30c <RadioSend+0x1f0>)
 801c1bc:	f001 ff8a 	bl	801e0d4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c1c0:	78fb      	ldrb	r3, [r7, #3]
 801c1c2:	2200      	movs	r2, #0
 801c1c4:	4619      	mov	r1, r3
 801c1c6:	6878      	ldr	r0, [r7, #4]
 801c1c8:	f001 fa3a 	bl	801d640 <SUBGRF_SendPayload>
            break;
 801c1cc:	e08d      	b.n	801c2ea <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c1ce:	f002 fbb6 	bl	801e93e <RFW_Is_Init>
 801c1d2:	4603      	mov	r3, r0
 801c1d4:	2b01      	cmp	r3, #1
 801c1d6:	d11e      	bne.n	801c216 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c1d8:	f107 020d 	add.w	r2, r7, #13
 801c1dc:	78fb      	ldrb	r3, [r7, #3]
 801c1de:	4619      	mov	r1, r3
 801c1e0:	6878      	ldr	r0, [r7, #4]
 801c1e2:	f002 fbc4 	bl	801e96e <RFW_TransmitInit>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d10c      	bne.n	801c206 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c1ec:	7b7a      	ldrb	r2, [r7, #13]
 801c1ee:	4b46      	ldr	r3, [pc, #280]	; (801c308 <RadioSend+0x1ec>)
 801c1f0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c1f2:	4846      	ldr	r0, [pc, #280]	; (801c30c <RadioSend+0x1f0>)
 801c1f4:	f001 ff6e 	bl	801e0d4 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801c1f8:	7b7b      	ldrb	r3, [r7, #13]
 801c1fa:	2200      	movs	r2, #0
 801c1fc:	4619      	mov	r1, r3
 801c1fe:	6878      	ldr	r0, [r7, #4]
 801c200:	f001 fa1e 	bl	801d640 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c204:	e071      	b.n	801c2ea <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801c206:	4b42      	ldr	r3, [pc, #264]	; (801c310 <RadioSend+0x1f4>)
 801c208:	2201      	movs	r2, #1
 801c20a:	2100      	movs	r1, #0
 801c20c:	2002      	movs	r0, #2
 801c20e:	f003 fb91 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801c212:	2303      	movs	r3, #3
 801c214:	e073      	b.n	801c2fe <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c216:	4a3c      	ldr	r2, [pc, #240]	; (801c308 <RadioSend+0x1ec>)
 801c218:	78fb      	ldrb	r3, [r7, #3]
 801c21a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c21c:	483b      	ldr	r0, [pc, #236]	; (801c30c <RadioSend+0x1f0>)
 801c21e:	f001 ff59 	bl	801e0d4 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801c222:	78fb      	ldrb	r3, [r7, #3]
 801c224:	2200      	movs	r2, #0
 801c226:	4619      	mov	r1, r3
 801c228:	6878      	ldr	r0, [r7, #4]
 801c22a:	f001 fa09 	bl	801d640 <SUBGRF_SendPayload>
            break;
 801c22e:	e05c      	b.n	801c2ea <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c230:	4b35      	ldr	r3, [pc, #212]	; (801c308 <RadioSend+0x1ec>)
 801c232:	2202      	movs	r2, #2
 801c234:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c236:	4a34      	ldr	r2, [pc, #208]	; (801c308 <RadioSend+0x1ec>)
 801c238:	78fb      	ldrb	r3, [r7, #3]
 801c23a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c23c:	4833      	ldr	r0, [pc, #204]	; (801c30c <RadioSend+0x1f0>)
 801c23e:	f001 ff49 	bl	801e0d4 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c242:	78fb      	ldrb	r3, [r7, #3]
 801c244:	2200      	movs	r2, #0
 801c246:	4619      	mov	r1, r3
 801c248:	6878      	ldr	r0, [r7, #4]
 801c24a:	f001 f9f9 	bl	801d640 <SUBGRF_SendPayload>
            break;
 801c24e:	e04c      	b.n	801c2ea <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c250:	78fb      	ldrb	r3, [r7, #3]
 801c252:	461a      	mov	r2, r3
 801c254:	6879      	ldr	r1, [r7, #4]
 801c256:	482f      	ldr	r0, [pc, #188]	; (801c314 <RadioSend+0x1f8>)
 801c258:	f000 fccc 	bl	801cbf4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c25c:	4b2a      	ldr	r3, [pc, #168]	; (801c308 <RadioSend+0x1ec>)
 801c25e:	2202      	movs	r2, #2
 801c260:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c262:	78fb      	ldrb	r3, [r7, #3]
 801c264:	3301      	adds	r3, #1
 801c266:	b2da      	uxtb	r2, r3
 801c268:	4b27      	ldr	r3, [pc, #156]	; (801c308 <RadioSend+0x1ec>)
 801c26a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c26c:	4827      	ldr	r0, [pc, #156]	; (801c30c <RadioSend+0x1f0>)
 801c26e:	f001 ff31 	bl	801e0d4 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801c272:	2100      	movs	r1, #0
 801c274:	20f1      	movs	r0, #241	; 0xf1
 801c276:	f000 f966 	bl	801c546 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801c27a:	2100      	movs	r1, #0
 801c27c:	20f0      	movs	r0, #240	; 0xf0
 801c27e:	f000 f962 	bl	801c546 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c282:	4b21      	ldr	r3, [pc, #132]	; (801c308 <RadioSend+0x1ec>)
 801c284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c286:	2b64      	cmp	r3, #100	; 0x64
 801c288:	d108      	bne.n	801c29c <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801c28a:	2170      	movs	r1, #112	; 0x70
 801c28c:	20f3      	movs	r0, #243	; 0xf3
 801c28e:	f000 f95a 	bl	801c546 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801c292:	211d      	movs	r1, #29
 801c294:	20f2      	movs	r0, #242	; 0xf2
 801c296:	f000 f956 	bl	801c546 <RadioWrite>
 801c29a:	e007      	b.n	801c2ac <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801c29c:	21e1      	movs	r1, #225	; 0xe1
 801c29e:	20f3      	movs	r0, #243	; 0xf3
 801c2a0:	f000 f951 	bl	801c546 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801c2a4:	2104      	movs	r1, #4
 801c2a6:	20f2      	movs	r0, #242	; 0xf2
 801c2a8:	f000 f94d 	bl	801c546 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c2ac:	78fb      	ldrb	r3, [r7, #3]
 801c2ae:	b29b      	uxth	r3, r3
 801c2b0:	00db      	lsls	r3, r3, #3
 801c2b2:	b29b      	uxth	r3, r3
 801c2b4:	3302      	adds	r3, #2
 801c2b6:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c2b8:	89fb      	ldrh	r3, [r7, #14]
 801c2ba:	0a1b      	lsrs	r3, r3, #8
 801c2bc:	b29b      	uxth	r3, r3
 801c2be:	b2db      	uxtb	r3, r3
 801c2c0:	4619      	mov	r1, r3
 801c2c2:	20f4      	movs	r0, #244	; 0xf4
 801c2c4:	f000 f93f 	bl	801c546 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801c2c8:	89fb      	ldrh	r3, [r7, #14]
 801c2ca:	b2db      	uxtb	r3, r3
 801c2cc:	4619      	mov	r1, r3
 801c2ce:	20f5      	movs	r0, #245	; 0xf5
 801c2d0:	f000 f939 	bl	801c546 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801c2d4:	78fb      	ldrb	r3, [r7, #3]
 801c2d6:	3301      	adds	r3, #1
 801c2d8:	b2db      	uxtb	r3, r3
 801c2da:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c2de:	4619      	mov	r1, r3
 801c2e0:	480c      	ldr	r0, [pc, #48]	; (801c314 <RadioSend+0x1f8>)
 801c2e2:	f001 f9ad 	bl	801d640 <SUBGRF_SendPayload>
            break;
 801c2e6:	e000      	b.n	801c2ea <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801c2e8:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c2ea:	4b07      	ldr	r3, [pc, #28]	; (801c308 <RadioSend+0x1ec>)
 801c2ec:	685b      	ldr	r3, [r3, #4]
 801c2ee:	4619      	mov	r1, r3
 801c2f0:	4809      	ldr	r0, [pc, #36]	; (801c318 <RadioSend+0x1fc>)
 801c2f2:	f003 f985 	bl	801f600 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801c2f6:	4808      	ldr	r0, [pc, #32]	; (801c318 <RadioSend+0x1fc>)
 801c2f8:	f003 f8a4 	bl	801f444 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801c2fc:	2300      	movs	r3, #0
}
 801c2fe:	4618      	mov	r0, r3
 801c300:	3710      	adds	r7, #16
 801c302:	46bd      	mov	sp, r7
 801c304:	bd80      	pop	{r7, pc}
 801c306:	bf00      	nop
 801c308:	20001b7c 	.word	0x20001b7c
 801c30c:	20001b8a 	.word	0x20001b8a
 801c310:	0802080c 	.word	0x0802080c
 801c314:	20001a78 	.word	0x20001a78
 801c318:	20001bd8 	.word	0x20001bd8

0801c31c <RadioSleep>:

static void RadioSleep( void )
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b082      	sub	sp, #8
 801c320:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c322:	2300      	movs	r3, #0
 801c324:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c326:	793b      	ldrb	r3, [r7, #4]
 801c328:	f043 0304 	orr.w	r3, r3, #4
 801c32c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c32e:	7938      	ldrb	r0, [r7, #4]
 801c330:	f001 fa62 	bl	801d7f8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c334:	2002      	movs	r0, #2
 801c336:	f7e6 f8cd 	bl	80024d4 <HAL_Delay>
}
 801c33a:	bf00      	nop
 801c33c:	3708      	adds	r7, #8
 801c33e:	46bd      	mov	sp, r7
 801c340:	bd80      	pop	{r7, pc}

0801c342 <RadioStandby>:

static void RadioStandby( void )
{
 801c342:	b580      	push	{r7, lr}
 801c344:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c346:	2000      	movs	r0, #0
 801c348:	f001 fa88 	bl	801d85c <SUBGRF_SetStandby>
}
 801c34c:	bf00      	nop
 801c34e:	bd80      	pop	{r7, pc}

0801c350 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c350:	b580      	push	{r7, lr}
 801c352:	b082      	sub	sp, #8
 801c354:	af00      	add	r7, sp, #0
 801c356:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801c358:	f002 faf1 	bl	801e93e <RFW_Is_Init>
 801c35c:	4603      	mov	r3, r0
 801c35e:	2b01      	cmp	r3, #1
 801c360:	d102      	bne.n	801c368 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801c362:	f002 fb14 	bl	801e98e <RFW_ReceiveInit>
 801c366:	e007      	b.n	801c378 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c368:	2300      	movs	r3, #0
 801c36a:	2200      	movs	r2, #0
 801c36c:	f240 2162 	movw	r1, #610	; 0x262
 801c370:	f240 2062 	movw	r0, #610	; 0x262
 801c374:	f001 fc46 	bl	801dc04 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d006      	beq.n	801c38c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c37e:	6879      	ldr	r1, [r7, #4]
 801c380:	4811      	ldr	r0, [pc, #68]	; (801c3c8 <RadioRx+0x78>)
 801c382:	f003 f93d 	bl	801f600 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c386:	4810      	ldr	r0, [pc, #64]	; (801c3c8 <RadioRx+0x78>)
 801c388:	f003 f85c 	bl	801f444 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c38c:	4b0f      	ldr	r3, [pc, #60]	; (801c3cc <RadioRx+0x7c>)
 801c38e:	2200      	movs	r2, #0
 801c390:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c392:	4b0e      	ldr	r3, [pc, #56]	; (801c3cc <RadioRx+0x7c>)
 801c394:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c398:	2100      	movs	r1, #0
 801c39a:	4618      	mov	r0, r3
 801c39c:	f002 f8d6 	bl	801e54c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c3a0:	4b0a      	ldr	r3, [pc, #40]	; (801c3cc <RadioRx+0x7c>)
 801c3a2:	785b      	ldrb	r3, [r3, #1]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d004      	beq.n	801c3b2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c3a8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c3ac:	f001 fa92 	bl	801d8d4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c3b0:	e005      	b.n	801c3be <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c3b2:	4b06      	ldr	r3, [pc, #24]	; (801c3cc <RadioRx+0x7c>)
 801c3b4:	689b      	ldr	r3, [r3, #8]
 801c3b6:	019b      	lsls	r3, r3, #6
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	f001 fa8b 	bl	801d8d4 <SUBGRF_SetRx>
}
 801c3be:	bf00      	nop
 801c3c0:	3708      	adds	r7, #8
 801c3c2:	46bd      	mov	sp, r7
 801c3c4:	bd80      	pop	{r7, pc}
 801c3c6:	bf00      	nop
 801c3c8:	20001bf0 	.word	0x20001bf0
 801c3cc:	20001b7c 	.word	0x20001b7c

0801c3d0 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c3d0:	b580      	push	{r7, lr}
 801c3d2:	b082      	sub	sp, #8
 801c3d4:	af00      	add	r7, sp, #0
 801c3d6:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801c3d8:	f002 fab1 	bl	801e93e <RFW_Is_Init>
 801c3dc:	4603      	mov	r3, r0
 801c3de:	2b01      	cmp	r3, #1
 801c3e0:	d102      	bne.n	801c3e8 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801c3e2:	f002 fad4 	bl	801e98e <RFW_ReceiveInit>
 801c3e6:	e007      	b.n	801c3f8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	f240 2162 	movw	r1, #610	; 0x262
 801c3f0:	f240 2062 	movw	r0, #610	; 0x262
 801c3f4:	f001 fc06 	bl	801dc04 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	2b00      	cmp	r3, #0
 801c3fc:	d006      	beq.n	801c40c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c3fe:	6879      	ldr	r1, [r7, #4]
 801c400:	4811      	ldr	r0, [pc, #68]	; (801c448 <RadioRxBoosted+0x78>)
 801c402:	f003 f8fd 	bl	801f600 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c406:	4810      	ldr	r0, [pc, #64]	; (801c448 <RadioRxBoosted+0x78>)
 801c408:	f003 f81c 	bl	801f444 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801c40c:	4b0f      	ldr	r3, [pc, #60]	; (801c44c <RadioRxBoosted+0x7c>)
 801c40e:	2200      	movs	r2, #0
 801c410:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c412:	4b0e      	ldr	r3, [pc, #56]	; (801c44c <RadioRxBoosted+0x7c>)
 801c414:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c418:	2100      	movs	r1, #0
 801c41a:	4618      	mov	r0, r3
 801c41c:	f002 f896 	bl	801e54c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c420:	4b0a      	ldr	r3, [pc, #40]	; (801c44c <RadioRxBoosted+0x7c>)
 801c422:	785b      	ldrb	r3, [r3, #1]
 801c424:	2b00      	cmp	r3, #0
 801c426:	d004      	beq.n	801c432 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c428:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c42c:	f001 fa72 	bl	801d914 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c430:	e005      	b.n	801c43e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c432:	4b06      	ldr	r3, [pc, #24]	; (801c44c <RadioRxBoosted+0x7c>)
 801c434:	689b      	ldr	r3, [r3, #8]
 801c436:	019b      	lsls	r3, r3, #6
 801c438:	4618      	mov	r0, r3
 801c43a:	f001 fa6b 	bl	801d914 <SUBGRF_SetRxBoosted>
}
 801c43e:	bf00      	nop
 801c440:	3708      	adds	r7, #8
 801c442:	46bd      	mov	sp, r7
 801c444:	bd80      	pop	{r7, pc}
 801c446:	bf00      	nop
 801c448:	20001bf0 	.word	0x20001bf0
 801c44c:	20001b7c 	.word	0x20001b7c

0801c450 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c450:	b580      	push	{r7, lr}
 801c452:	b082      	sub	sp, #8
 801c454:	af00      	add	r7, sp, #0
 801c456:	6078      	str	r0, [r7, #4]
 801c458:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	005a      	lsls	r2, r3, #1
 801c45e:	683b      	ldr	r3, [r7, #0]
 801c460:	4413      	add	r3, r2
 801c462:	4a0c      	ldr	r2, [pc, #48]	; (801c494 <RadioSetRxDutyCycle+0x44>)
 801c464:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801c466:	2300      	movs	r3, #0
 801c468:	2200      	movs	r2, #0
 801c46a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c46e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c472:	f001 fbc7 	bl	801dc04 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c476:	4b07      	ldr	r3, [pc, #28]	; (801c494 <RadioSetRxDutyCycle+0x44>)
 801c478:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c47c:	2100      	movs	r1, #0
 801c47e:	4618      	mov	r0, r3
 801c480:	f002 f864 	bl	801e54c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c484:	6839      	ldr	r1, [r7, #0]
 801c486:	6878      	ldr	r0, [r7, #4]
 801c488:	f001 fa68 	bl	801d95c <SUBGRF_SetRxDutyCycle>
}
 801c48c:	bf00      	nop
 801c48e:	3708      	adds	r7, #8
 801c490:	46bd      	mov	sp, r7
 801c492:	bd80      	pop	{r7, pc}
 801c494:	20001b7c 	.word	0x20001b7c

0801c498 <RadioStartCad>:

static void RadioStartCad( void )
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801c49c:	4b09      	ldr	r3, [pc, #36]	; (801c4c4 <RadioStartCad+0x2c>)
 801c49e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c4a2:	2100      	movs	r1, #0
 801c4a4:	4618      	mov	r0, r3
 801c4a6:	f002 f851 	bl	801e54c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	2200      	movs	r2, #0
 801c4ae:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c4b2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c4b6:	f001 fba5 	bl	801dc04 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c4ba:	f001 fa7b 	bl	801d9b4 <SUBGRF_SetCad>
}
 801c4be:	bf00      	nop
 801c4c0:	bd80      	pop	{r7, pc}
 801c4c2:	bf00      	nop
 801c4c4:	20001b7c 	.word	0x20001b7c

0801c4c8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c4c8:	b580      	push	{r7, lr}
 801c4ca:	b084      	sub	sp, #16
 801c4cc:	af00      	add	r7, sp, #0
 801c4ce:	6078      	str	r0, [r7, #4]
 801c4d0:	460b      	mov	r3, r1
 801c4d2:	70fb      	strb	r3, [r7, #3]
 801c4d4:	4613      	mov	r3, r2
 801c4d6:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801c4d8:	883b      	ldrh	r3, [r7, #0]
 801c4da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c4de:	fb02 f303 	mul.w	r3, r2, r3
 801c4e2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c4e4:	6878      	ldr	r0, [r7, #4]
 801c4e6:	f001 fbe9 	bl	801dcbc <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c4ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	f002 f854 	bl	801e59c <SUBGRF_SetRfTxPower>
 801c4f4:	4603      	mov	r3, r0
 801c4f6:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801c4f8:	210e      	movs	r1, #14
 801c4fa:	f640 101f 	movw	r0, #2335	; 0x91f
 801c4fe:	f001 ff31 	bl	801e364 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801c502:	7afb      	ldrb	r3, [r7, #11]
 801c504:	2101      	movs	r1, #1
 801c506:	4618      	mov	r0, r3
 801c508:	f002 f820 	bl	801e54c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c50c:	f001 fa60 	bl	801d9d0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c510:	68f9      	ldr	r1, [r7, #12]
 801c512:	4805      	ldr	r0, [pc, #20]	; (801c528 <RadioSetTxContinuousWave+0x60>)
 801c514:	f003 f874 	bl	801f600 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c518:	4803      	ldr	r0, [pc, #12]	; (801c528 <RadioSetTxContinuousWave+0x60>)
 801c51a:	f002 ff93 	bl	801f444 <UTIL_TIMER_Start>
}
 801c51e:	bf00      	nop
 801c520:	3710      	adds	r7, #16
 801c522:	46bd      	mov	sp, r7
 801c524:	bd80      	pop	{r7, pc}
 801c526:	bf00      	nop
 801c528:	20001bd8 	.word	0x20001bd8

0801c52c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c52c:	b580      	push	{r7, lr}
 801c52e:	b082      	sub	sp, #8
 801c530:	af00      	add	r7, sp, #0
 801c532:	4603      	mov	r3, r0
 801c534:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801c536:	f001 fe82 	bl	801e23e <SUBGRF_GetRssiInst>
 801c53a:	4603      	mov	r3, r0
 801c53c:	b21b      	sxth	r3, r3
}
 801c53e:	4618      	mov	r0, r3
 801c540:	3708      	adds	r7, #8
 801c542:	46bd      	mov	sp, r7
 801c544:	bd80      	pop	{r7, pc}

0801c546 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801c546:	b580      	push	{r7, lr}
 801c548:	b082      	sub	sp, #8
 801c54a:	af00      	add	r7, sp, #0
 801c54c:	4603      	mov	r3, r0
 801c54e:	460a      	mov	r2, r1
 801c550:	80fb      	strh	r3, [r7, #6]
 801c552:	4613      	mov	r3, r2
 801c554:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801c556:	797a      	ldrb	r2, [r7, #5]
 801c558:	88fb      	ldrh	r3, [r7, #6]
 801c55a:	4611      	mov	r1, r2
 801c55c:	4618      	mov	r0, r3
 801c55e:	f001 ff01 	bl	801e364 <SUBGRF_WriteRegister>
}
 801c562:	bf00      	nop
 801c564:	3708      	adds	r7, #8
 801c566:	46bd      	mov	sp, r7
 801c568:	bd80      	pop	{r7, pc}

0801c56a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801c56a:	b580      	push	{r7, lr}
 801c56c:	b082      	sub	sp, #8
 801c56e:	af00      	add	r7, sp, #0
 801c570:	4603      	mov	r3, r0
 801c572:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801c574:	88fb      	ldrh	r3, [r7, #6]
 801c576:	4618      	mov	r0, r3
 801c578:	f001 ff08 	bl	801e38c <SUBGRF_ReadRegister>
 801c57c:	4603      	mov	r3, r0
}
 801c57e:	4618      	mov	r0, r3
 801c580:	3708      	adds	r7, #8
 801c582:	46bd      	mov	sp, r7
 801c584:	bd80      	pop	{r7, pc}

0801c586 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c586:	b580      	push	{r7, lr}
 801c588:	b082      	sub	sp, #8
 801c58a:	af00      	add	r7, sp, #0
 801c58c:	4603      	mov	r3, r0
 801c58e:	6039      	str	r1, [r7, #0]
 801c590:	80fb      	strh	r3, [r7, #6]
 801c592:	4613      	mov	r3, r2
 801c594:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801c596:	797b      	ldrb	r3, [r7, #5]
 801c598:	b29a      	uxth	r2, r3
 801c59a:	88fb      	ldrh	r3, [r7, #6]
 801c59c:	6839      	ldr	r1, [r7, #0]
 801c59e:	4618      	mov	r0, r3
 801c5a0:	f001 ff08 	bl	801e3b4 <SUBGRF_WriteRegisters>
}
 801c5a4:	bf00      	nop
 801c5a6:	3708      	adds	r7, #8
 801c5a8:	46bd      	mov	sp, r7
 801c5aa:	bd80      	pop	{r7, pc}

0801c5ac <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c5ac:	b580      	push	{r7, lr}
 801c5ae:	b082      	sub	sp, #8
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	4603      	mov	r3, r0
 801c5b4:	6039      	str	r1, [r7, #0]
 801c5b6:	80fb      	strh	r3, [r7, #6]
 801c5b8:	4613      	mov	r3, r2
 801c5ba:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801c5bc:	797b      	ldrb	r3, [r7, #5]
 801c5be:	b29a      	uxth	r2, r3
 801c5c0:	88fb      	ldrh	r3, [r7, #6]
 801c5c2:	6839      	ldr	r1, [r7, #0]
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	f001 ff17 	bl	801e3f8 <SUBGRF_ReadRegisters>
}
 801c5ca:	bf00      	nop
 801c5cc:	3708      	adds	r7, #8
 801c5ce:	46bd      	mov	sp, r7
 801c5d0:	bd80      	pop	{r7, pc}
	...

0801c5d4 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b082      	sub	sp, #8
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	4603      	mov	r3, r0
 801c5dc:	460a      	mov	r2, r1
 801c5de:	71fb      	strb	r3, [r7, #7]
 801c5e0:	4613      	mov	r3, r2
 801c5e2:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801c5e4:	79fb      	ldrb	r3, [r7, #7]
 801c5e6:	2b01      	cmp	r3, #1
 801c5e8:	d10a      	bne.n	801c600 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801c5ea:	4a0e      	ldr	r2, [pc, #56]	; (801c624 <RadioSetMaxPayloadLength+0x50>)
 801c5ec:	79bb      	ldrb	r3, [r7, #6]
 801c5ee:	7013      	strb	r3, [r2, #0]
 801c5f0:	4b0c      	ldr	r3, [pc, #48]	; (801c624 <RadioSetMaxPayloadLength+0x50>)
 801c5f2:	781a      	ldrb	r2, [r3, #0]
 801c5f4:	4b0c      	ldr	r3, [pc, #48]	; (801c628 <RadioSetMaxPayloadLength+0x54>)
 801c5f6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c5f8:	480c      	ldr	r0, [pc, #48]	; (801c62c <RadioSetMaxPayloadLength+0x58>)
 801c5fa:	f001 fd6b 	bl	801e0d4 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801c5fe:	e00d      	b.n	801c61c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801c600:	4b09      	ldr	r3, [pc, #36]	; (801c628 <RadioSetMaxPayloadLength+0x54>)
 801c602:	7d5b      	ldrb	r3, [r3, #21]
 801c604:	2b01      	cmp	r3, #1
 801c606:	d109      	bne.n	801c61c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801c608:	4a06      	ldr	r2, [pc, #24]	; (801c624 <RadioSetMaxPayloadLength+0x50>)
 801c60a:	79bb      	ldrb	r3, [r7, #6]
 801c60c:	7013      	strb	r3, [r2, #0]
 801c60e:	4b05      	ldr	r3, [pc, #20]	; (801c624 <RadioSetMaxPayloadLength+0x50>)
 801c610:	781a      	ldrb	r2, [r3, #0]
 801c612:	4b05      	ldr	r3, [pc, #20]	; (801c628 <RadioSetMaxPayloadLength+0x54>)
 801c614:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c616:	4805      	ldr	r0, [pc, #20]	; (801c62c <RadioSetMaxPayloadLength+0x58>)
 801c618:	f001 fd5c 	bl	801e0d4 <SUBGRF_SetPacketParams>
}
 801c61c:	bf00      	nop
 801c61e:	3708      	adds	r7, #8
 801c620:	46bd      	mov	sp, r7
 801c622:	bd80      	pop	{r7, pc}
 801c624:	20000134 	.word	0x20000134
 801c628:	20001b7c 	.word	0x20001b7c
 801c62c:	20001b8a 	.word	0x20001b8a

0801c630 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801c630:	b580      	push	{r7, lr}
 801c632:	b082      	sub	sp, #8
 801c634:	af00      	add	r7, sp, #0
 801c636:	4603      	mov	r3, r0
 801c638:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801c63a:	4a13      	ldr	r2, [pc, #76]	; (801c688 <RadioSetPublicNetwork+0x58>)
 801c63c:	79fb      	ldrb	r3, [r7, #7]
 801c63e:	7313      	strb	r3, [r2, #12]
 801c640:	4b11      	ldr	r3, [pc, #68]	; (801c688 <RadioSetPublicNetwork+0x58>)
 801c642:	7b1a      	ldrb	r2, [r3, #12]
 801c644:	4b10      	ldr	r3, [pc, #64]	; (801c688 <RadioSetPublicNetwork+0x58>)
 801c646:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801c648:	2001      	movs	r0, #1
 801c64a:	f7ff f811 	bl	801b670 <RadioSetModem>
    if( enable == true )
 801c64e:	79fb      	ldrb	r3, [r7, #7]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d00a      	beq.n	801c66a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801c654:	2134      	movs	r1, #52	; 0x34
 801c656:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c65a:	f001 fe83 	bl	801e364 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801c65e:	2144      	movs	r1, #68	; 0x44
 801c660:	f240 7041 	movw	r0, #1857	; 0x741
 801c664:	f001 fe7e 	bl	801e364 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801c668:	e009      	b.n	801c67e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801c66a:	2114      	movs	r1, #20
 801c66c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c670:	f001 fe78 	bl	801e364 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801c674:	2124      	movs	r1, #36	; 0x24
 801c676:	f240 7041 	movw	r0, #1857	; 0x741
 801c67a:	f001 fe73 	bl	801e364 <SUBGRF_WriteRegister>
}
 801c67e:	bf00      	nop
 801c680:	3708      	adds	r7, #8
 801c682:	46bd      	mov	sp, r7
 801c684:	bd80      	pop	{r7, pc}
 801c686:	bf00      	nop
 801c688:	20001b7c 	.word	0x20001b7c

0801c68c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801c68c:	b580      	push	{r7, lr}
 801c68e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801c690:	f001 ffb8 	bl	801e604 <SUBGRF_GetRadioWakeUpTime>
 801c694:	4603      	mov	r3, r0
 801c696:	3303      	adds	r3, #3
}
 801c698:	4618      	mov	r0, r3
 801c69a:	bd80      	pop	{r7, pc}

0801c69c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801c69c:	b580      	push	{r7, lr}
 801c69e:	b082      	sub	sp, #8
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801c6a4:	f000 f80e 	bl	801c6c4 <RadioOnTxTimeoutProcess>
}
 801c6a8:	bf00      	nop
 801c6aa:	3708      	adds	r7, #8
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	bd80      	pop	{r7, pc}

0801c6b0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b082      	sub	sp, #8
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801c6b8:	f000 f818 	bl	801c6ec <RadioOnRxTimeoutProcess>
}
 801c6bc:	bf00      	nop
 801c6be:	3708      	adds	r7, #8
 801c6c0:	46bd      	mov	sp, r7
 801c6c2:	bd80      	pop	{r7, pc}

0801c6c4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801c6c8:	4b07      	ldr	r3, [pc, #28]	; (801c6e8 <RadioOnTxTimeoutProcess+0x24>)
 801c6ca:	681b      	ldr	r3, [r3, #0]
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d008      	beq.n	801c6e2 <RadioOnTxTimeoutProcess+0x1e>
 801c6d0:	4b05      	ldr	r3, [pc, #20]	; (801c6e8 <RadioOnTxTimeoutProcess+0x24>)
 801c6d2:	681b      	ldr	r3, [r3, #0]
 801c6d4:	685b      	ldr	r3, [r3, #4]
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	d003      	beq.n	801c6e2 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801c6da:	4b03      	ldr	r3, [pc, #12]	; (801c6e8 <RadioOnTxTimeoutProcess+0x24>)
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	685b      	ldr	r3, [r3, #4]
 801c6e0:	4798      	blx	r3
    }
}
 801c6e2:	bf00      	nop
 801c6e4:	bd80      	pop	{r7, pc}
 801c6e6:	bf00      	nop
 801c6e8:	20001b78 	.word	0x20001b78

0801c6ec <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801c6ec:	b580      	push	{r7, lr}
 801c6ee:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801c6f0:	4b07      	ldr	r3, [pc, #28]	; (801c710 <RadioOnRxTimeoutProcess+0x24>)
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d008      	beq.n	801c70a <RadioOnRxTimeoutProcess+0x1e>
 801c6f8:	4b05      	ldr	r3, [pc, #20]	; (801c710 <RadioOnRxTimeoutProcess+0x24>)
 801c6fa:	681b      	ldr	r3, [r3, #0]
 801c6fc:	68db      	ldr	r3, [r3, #12]
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d003      	beq.n	801c70a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801c702:	4b03      	ldr	r3, [pc, #12]	; (801c710 <RadioOnRxTimeoutProcess+0x24>)
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	68db      	ldr	r3, [r3, #12]
 801c708:	4798      	blx	r3
    }
}
 801c70a:	bf00      	nop
 801c70c:	bd80      	pop	{r7, pc}
 801c70e:	bf00      	nop
 801c710:	20001b78 	.word	0x20001b78

0801c714 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801c714:	b580      	push	{r7, lr}
 801c716:	b082      	sub	sp, #8
 801c718:	af00      	add	r7, sp, #0
 801c71a:	4603      	mov	r3, r0
 801c71c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801c71e:	4a05      	ldr	r2, [pc, #20]	; (801c734 <RadioOnDioIrq+0x20>)
 801c720:	88fb      	ldrh	r3, [r7, #6]
 801c722:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801c726:	f000 f807 	bl	801c738 <RadioIrqProcess>
}
 801c72a:	bf00      	nop
 801c72c:	3708      	adds	r7, #8
 801c72e:	46bd      	mov	sp, r7
 801c730:	bd80      	pop	{r7, pc}
 801c732:	bf00      	nop
 801c734:	20001b7c 	.word	0x20001b7c

0801c738 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801c738:	b5b0      	push	{r4, r5, r7, lr}
 801c73a:	b082      	sub	sp, #8
 801c73c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801c73e:	2300      	movs	r3, #0
 801c740:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801c742:	2300      	movs	r3, #0
 801c744:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801c746:	4ba8      	ldr	r3, [pc, #672]	; (801c9e8 <RadioIrqProcess+0x2b0>)
 801c748:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801c74c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c750:	f000 810d 	beq.w	801c96e <RadioIrqProcess+0x236>
 801c754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c758:	f300 81e8 	bgt.w	801cb2c <RadioIrqProcess+0x3f4>
 801c75c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c760:	f000 80f1 	beq.w	801c946 <RadioIrqProcess+0x20e>
 801c764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c768:	f300 81e0 	bgt.w	801cb2c <RadioIrqProcess+0x3f4>
 801c76c:	2b80      	cmp	r3, #128	; 0x80
 801c76e:	f000 80d6 	beq.w	801c91e <RadioIrqProcess+0x1e6>
 801c772:	2b80      	cmp	r3, #128	; 0x80
 801c774:	f300 81da 	bgt.w	801cb2c <RadioIrqProcess+0x3f4>
 801c778:	2b20      	cmp	r3, #32
 801c77a:	dc49      	bgt.n	801c810 <RadioIrqProcess+0xd8>
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	f340 81d5 	ble.w	801cb2c <RadioIrqProcess+0x3f4>
 801c782:	3b01      	subs	r3, #1
 801c784:	2b1f      	cmp	r3, #31
 801c786:	f200 81d1 	bhi.w	801cb2c <RadioIrqProcess+0x3f4>
 801c78a:	a201      	add	r2, pc, #4	; (adr r2, 801c790 <RadioIrqProcess+0x58>)
 801c78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c790:	0801c819 	.word	0x0801c819
 801c794:	0801c853 	.word	0x0801c853
 801c798:	0801cb2d 	.word	0x0801cb2d
 801c79c:	0801ca09 	.word	0x0801ca09
 801c7a0:	0801cb2d 	.word	0x0801cb2d
 801c7a4:	0801cb2d 	.word	0x0801cb2d
 801c7a8:	0801cb2d 	.word	0x0801cb2d
 801c7ac:	0801ca85 	.word	0x0801ca85
 801c7b0:	0801cb2d 	.word	0x0801cb2d
 801c7b4:	0801cb2d 	.word	0x0801cb2d
 801c7b8:	0801cb2d 	.word	0x0801cb2d
 801c7bc:	0801cb2d 	.word	0x0801cb2d
 801c7c0:	0801cb2d 	.word	0x0801cb2d
 801c7c4:	0801cb2d 	.word	0x0801cb2d
 801c7c8:	0801cb2d 	.word	0x0801cb2d
 801c7cc:	0801caa1 	.word	0x0801caa1
 801c7d0:	0801cb2d 	.word	0x0801cb2d
 801c7d4:	0801cb2d 	.word	0x0801cb2d
 801c7d8:	0801cb2d 	.word	0x0801cb2d
 801c7dc:	0801cb2d 	.word	0x0801cb2d
 801c7e0:	0801cb2d 	.word	0x0801cb2d
 801c7e4:	0801cb2d 	.word	0x0801cb2d
 801c7e8:	0801cb2d 	.word	0x0801cb2d
 801c7ec:	0801cb2d 	.word	0x0801cb2d
 801c7f0:	0801cb2d 	.word	0x0801cb2d
 801c7f4:	0801cb2d 	.word	0x0801cb2d
 801c7f8:	0801cb2d 	.word	0x0801cb2d
 801c7fc:	0801cb2d 	.word	0x0801cb2d
 801c800:	0801cb2d 	.word	0x0801cb2d
 801c804:	0801cb2d 	.word	0x0801cb2d
 801c808:	0801cb2d 	.word	0x0801cb2d
 801c80c:	0801caaf 	.word	0x0801caaf
 801c810:	2b40      	cmp	r3, #64	; 0x40
 801c812:	f000 816d 	beq.w	801caf0 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801c816:	e189      	b.n	801cb2c <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801c818:	4874      	ldr	r0, [pc, #464]	; (801c9ec <RadioIrqProcess+0x2b4>)
 801c81a:	f002 fe81 	bl	801f520 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801c81e:	2000      	movs	r0, #0
 801c820:	f001 f81c 	bl	801d85c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801c824:	f002 f892 	bl	801e94c <RFW_Is_LongPacketModeEnabled>
 801c828:	4603      	mov	r3, r0
 801c82a:	2b01      	cmp	r3, #1
 801c82c:	d101      	bne.n	801c832 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801c82e:	f002 f8b6 	bl	801e99e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801c832:	4b6f      	ldr	r3, [pc, #444]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	2b00      	cmp	r3, #0
 801c838:	f000 817a 	beq.w	801cb30 <RadioIrqProcess+0x3f8>
 801c83c:	4b6c      	ldr	r3, [pc, #432]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	2b00      	cmp	r3, #0
 801c844:	f000 8174 	beq.w	801cb30 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801c848:	4b69      	ldr	r3, [pc, #420]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c84a:	681b      	ldr	r3, [r3, #0]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	4798      	blx	r3
        break;
 801c850:	e16e      	b.n	801cb30 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801c852:	4868      	ldr	r0, [pc, #416]	; (801c9f4 <RadioIrqProcess+0x2bc>)
 801c854:	f002 fe64 	bl	801f520 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801c858:	4b63      	ldr	r3, [pc, #396]	; (801c9e8 <RadioIrqProcess+0x2b0>)
 801c85a:	785b      	ldrb	r3, [r3, #1]
 801c85c:	f083 0301 	eor.w	r3, r3, #1
 801c860:	b2db      	uxtb	r3, r3
 801c862:	2b00      	cmp	r3, #0
 801c864:	d014      	beq.n	801c890 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801c866:	2000      	movs	r0, #0
 801c868:	f000 fff8 	bl	801d85c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801c86c:	2100      	movs	r1, #0
 801c86e:	f640 1002 	movw	r0, #2306	; 0x902
 801c872:	f001 fd77 	bl	801e364 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801c876:	f640 1044 	movw	r0, #2372	; 0x944
 801c87a:	f001 fd87 	bl	801e38c <SUBGRF_ReadRegister>
 801c87e:	4603      	mov	r3, r0
 801c880:	f043 0302 	orr.w	r3, r3, #2
 801c884:	b2db      	uxtb	r3, r3
 801c886:	4619      	mov	r1, r3
 801c888:	f640 1044 	movw	r0, #2372	; 0x944
 801c88c:	f001 fd6a 	bl	801e364 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801c890:	1dfb      	adds	r3, r7, #7
 801c892:	22ff      	movs	r2, #255	; 0xff
 801c894:	4619      	mov	r1, r3
 801c896:	4858      	ldr	r0, [pc, #352]	; (801c9f8 <RadioIrqProcess+0x2c0>)
 801c898:	f000 feb0 	bl	801d5fc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801c89c:	4857      	ldr	r0, [pc, #348]	; (801c9fc <RadioIrqProcess+0x2c4>)
 801c89e:	f001 fd0f 	bl	801e2c0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801c8a2:	4b53      	ldr	r3, [pc, #332]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	f000 8144 	beq.w	801cb34 <RadioIrqProcess+0x3fc>
 801c8ac:	4b50      	ldr	r3, [pc, #320]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	689b      	ldr	r3, [r3, #8]
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	f000 813e 	beq.w	801cb34 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801c8b8:	4b4b      	ldr	r3, [pc, #300]	; (801c9e8 <RadioIrqProcess+0x2b0>)
 801c8ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c8be:	2b01      	cmp	r3, #1
 801c8c0:	d10e      	bne.n	801c8e0 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801c8c2:	4b4b      	ldr	r3, [pc, #300]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	689c      	ldr	r4, [r3, #8]
 801c8c8:	79fb      	ldrb	r3, [r7, #7]
 801c8ca:	b299      	uxth	r1, r3
 801c8cc:	4b46      	ldr	r3, [pc, #280]	; (801c9e8 <RadioIrqProcess+0x2b0>)
 801c8ce:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801c8d2:	b21a      	sxth	r2, r3
 801c8d4:	4b44      	ldr	r3, [pc, #272]	; (801c9e8 <RadioIrqProcess+0x2b0>)
 801c8d6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801c8da:	4847      	ldr	r0, [pc, #284]	; (801c9f8 <RadioIrqProcess+0x2c0>)
 801c8dc:	47a0      	blx	r4
                break;
 801c8de:	e01d      	b.n	801c91c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801c8e0:	4b41      	ldr	r3, [pc, #260]	; (801c9e8 <RadioIrqProcess+0x2b0>)
 801c8e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c8e4:	463a      	mov	r2, r7
 801c8e6:	4611      	mov	r1, r2
 801c8e8:	4618      	mov	r0, r3
 801c8ea:	f001 ff7d 	bl	801e7e8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801c8ee:	4b40      	ldr	r3, [pc, #256]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c8f0:	681b      	ldr	r3, [r3, #0]
 801c8f2:	689c      	ldr	r4, [r3, #8]
 801c8f4:	79fb      	ldrb	r3, [r7, #7]
 801c8f6:	b299      	uxth	r1, r3
 801c8f8:	4b3b      	ldr	r3, [pc, #236]	; (801c9e8 <RadioIrqProcess+0x2b0>)
 801c8fa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801c8fe:	b218      	sxth	r0, r3
 801c900:	683b      	ldr	r3, [r7, #0]
 801c902:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801c906:	4a3e      	ldr	r2, [pc, #248]	; (801ca00 <RadioIrqProcess+0x2c8>)
 801c908:	fb82 5203 	smull	r5, r2, r2, r3
 801c90c:	1192      	asrs	r2, r2, #6
 801c90e:	17db      	asrs	r3, r3, #31
 801c910:	1ad3      	subs	r3, r2, r3
 801c912:	b25b      	sxtb	r3, r3
 801c914:	4602      	mov	r2, r0
 801c916:	4838      	ldr	r0, [pc, #224]	; (801c9f8 <RadioIrqProcess+0x2c0>)
 801c918:	47a0      	blx	r4
                break;
 801c91a:	bf00      	nop
        break;
 801c91c:	e10a      	b.n	801cb34 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801c91e:	2000      	movs	r0, #0
 801c920:	f000 ff9c 	bl	801d85c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801c924:	4b32      	ldr	r3, [pc, #200]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c926:	681b      	ldr	r3, [r3, #0]
 801c928:	2b00      	cmp	r3, #0
 801c92a:	f000 8105 	beq.w	801cb38 <RadioIrqProcess+0x400>
 801c92e:	4b30      	ldr	r3, [pc, #192]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	699b      	ldr	r3, [r3, #24]
 801c934:	2b00      	cmp	r3, #0
 801c936:	f000 80ff 	beq.w	801cb38 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801c93a:	4b2d      	ldr	r3, [pc, #180]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	699b      	ldr	r3, [r3, #24]
 801c940:	2000      	movs	r0, #0
 801c942:	4798      	blx	r3
        break;
 801c944:	e0f8      	b.n	801cb38 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801c946:	2000      	movs	r0, #0
 801c948:	f000 ff88 	bl	801d85c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801c94c:	4b28      	ldr	r3, [pc, #160]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	2b00      	cmp	r3, #0
 801c952:	f000 80f3 	beq.w	801cb3c <RadioIrqProcess+0x404>
 801c956:	4b26      	ldr	r3, [pc, #152]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	699b      	ldr	r3, [r3, #24]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	f000 80ed 	beq.w	801cb3c <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801c962:	4b23      	ldr	r3, [pc, #140]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c964:	681b      	ldr	r3, [r3, #0]
 801c966:	699b      	ldr	r3, [r3, #24]
 801c968:	2001      	movs	r0, #1
 801c96a:	4798      	blx	r3
        break;
 801c96c:	e0e6      	b.n	801cb3c <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801c96e:	4b25      	ldr	r3, [pc, #148]	; (801ca04 <RadioIrqProcess+0x2cc>)
 801c970:	2201      	movs	r2, #1
 801c972:	2100      	movs	r1, #0
 801c974:	2002      	movs	r0, #2
 801c976:	f002 ffdd 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801c97a:	f000 fe25 	bl	801d5c8 <SUBGRF_GetOperatingMode>
 801c97e:	4603      	mov	r3, r0
 801c980:	2b04      	cmp	r3, #4
 801c982:	d115      	bne.n	801c9b0 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801c984:	4819      	ldr	r0, [pc, #100]	; (801c9ec <RadioIrqProcess+0x2b4>)
 801c986:	f002 fdcb 	bl	801f520 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801c98a:	2000      	movs	r0, #0
 801c98c:	f000 ff66 	bl	801d85c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801c990:	4b17      	ldr	r3, [pc, #92]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	2b00      	cmp	r3, #0
 801c996:	f000 80d3 	beq.w	801cb40 <RadioIrqProcess+0x408>
 801c99a:	4b15      	ldr	r3, [pc, #84]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c99c:	681b      	ldr	r3, [r3, #0]
 801c99e:	685b      	ldr	r3, [r3, #4]
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	f000 80cd 	beq.w	801cb40 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801c9a6:	4b12      	ldr	r3, [pc, #72]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	685b      	ldr	r3, [r3, #4]
 801c9ac:	4798      	blx	r3
        break;
 801c9ae:	e0c7      	b.n	801cb40 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801c9b0:	f000 fe0a 	bl	801d5c8 <SUBGRF_GetOperatingMode>
 801c9b4:	4603      	mov	r3, r0
 801c9b6:	2b05      	cmp	r3, #5
 801c9b8:	f040 80c2 	bne.w	801cb40 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801c9bc:	480d      	ldr	r0, [pc, #52]	; (801c9f4 <RadioIrqProcess+0x2bc>)
 801c9be:	f002 fdaf 	bl	801f520 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801c9c2:	2000      	movs	r0, #0
 801c9c4:	f000 ff4a 	bl	801d85c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801c9c8:	4b09      	ldr	r3, [pc, #36]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	f000 80b7 	beq.w	801cb40 <RadioIrqProcess+0x408>
 801c9d2:	4b07      	ldr	r3, [pc, #28]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	68db      	ldr	r3, [r3, #12]
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	f000 80b1 	beq.w	801cb40 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801c9de:	4b04      	ldr	r3, [pc, #16]	; (801c9f0 <RadioIrqProcess+0x2b8>)
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	68db      	ldr	r3, [r3, #12]
 801c9e4:	4798      	blx	r3
        break;
 801c9e6:	e0ab      	b.n	801cb40 <RadioIrqProcess+0x408>
 801c9e8:	20001b7c 	.word	0x20001b7c
 801c9ec:	20001bd8 	.word	0x20001bd8
 801c9f0:	20001b78 	.word	0x20001b78
 801c9f4:	20001bf0 	.word	0x20001bf0
 801c9f8:	20001a78 	.word	0x20001a78
 801c9fc:	20001ba0 	.word	0x20001ba0
 801ca00:	10624dd3 	.word	0x10624dd3
 801ca04:	08020824 	.word	0x08020824
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801ca08:	4b54      	ldr	r3, [pc, #336]	; (801cb5c <RadioIrqProcess+0x424>)
 801ca0a:	2201      	movs	r2, #1
 801ca0c:	2100      	movs	r1, #0
 801ca0e:	2002      	movs	r0, #2
 801ca10:	f002 ff90 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801ca14:	4b52      	ldr	r3, [pc, #328]	; (801cb60 <RadioIrqProcess+0x428>)
 801ca16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	f000 8093 	beq.w	801cb44 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801ca1e:	4a51      	ldr	r2, [pc, #324]	; (801cb64 <RadioIrqProcess+0x42c>)
 801ca20:	4b4f      	ldr	r3, [pc, #316]	; (801cb60 <RadioIrqProcess+0x428>)
 801ca22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca24:	0c1b      	lsrs	r3, r3, #16
 801ca26:	b2db      	uxtb	r3, r3
 801ca28:	4619      	mov	r1, r3
 801ca2a:	f640 1003 	movw	r0, #2307	; 0x903
 801ca2e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801ca30:	4a4c      	ldr	r2, [pc, #304]	; (801cb64 <RadioIrqProcess+0x42c>)
 801ca32:	4b4b      	ldr	r3, [pc, #300]	; (801cb60 <RadioIrqProcess+0x428>)
 801ca34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca36:	0a1b      	lsrs	r3, r3, #8
 801ca38:	b2db      	uxtb	r3, r3
 801ca3a:	4619      	mov	r1, r3
 801ca3c:	f640 1004 	movw	r0, #2308	; 0x904
 801ca40:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801ca42:	4a48      	ldr	r2, [pc, #288]	; (801cb64 <RadioIrqProcess+0x42c>)
 801ca44:	4b46      	ldr	r3, [pc, #280]	; (801cb60 <RadioIrqProcess+0x428>)
 801ca46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca48:	b2db      	uxtb	r3, r3
 801ca4a:	4619      	mov	r1, r3
 801ca4c:	f640 1005 	movw	r0, #2309	; 0x905
 801ca50:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801ca52:	4c44      	ldr	r4, [pc, #272]	; (801cb64 <RadioIrqProcess+0x42c>)
 801ca54:	4b44      	ldr	r3, [pc, #272]	; (801cb68 <RadioIrqProcess+0x430>)
 801ca56:	f640 1002 	movw	r0, #2306	; 0x902
 801ca5a:	4798      	blx	r3
 801ca5c:	4603      	mov	r3, r0
 801ca5e:	f043 0301 	orr.w	r3, r3, #1
 801ca62:	b2db      	uxtb	r3, r3
 801ca64:	4619      	mov	r1, r3
 801ca66:	f640 1002 	movw	r0, #2306	; 0x902
 801ca6a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801ca6c:	4b3c      	ldr	r3, [pc, #240]	; (801cb60 <RadioIrqProcess+0x428>)
 801ca6e:	2200      	movs	r2, #0
 801ca70:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ca72:	2300      	movs	r3, #0
 801ca74:	2200      	movs	r2, #0
 801ca76:	f240 2162 	movw	r1, #610	; 0x262
 801ca7a:	f240 2062 	movw	r0, #610	; 0x262
 801ca7e:	f001 f8c1 	bl	801dc04 <SUBGRF_SetDioIrqParams>
        break;
 801ca82:	e05f      	b.n	801cb44 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801ca84:	4b39      	ldr	r3, [pc, #228]	; (801cb6c <RadioIrqProcess+0x434>)
 801ca86:	2201      	movs	r2, #1
 801ca88:	2100      	movs	r1, #0
 801ca8a:	2002      	movs	r0, #2
 801ca8c:	f002 ff52 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801ca90:	f001 ff55 	bl	801e93e <RFW_Is_Init>
 801ca94:	4603      	mov	r3, r0
 801ca96:	2b01      	cmp	r3, #1
 801ca98:	d156      	bne.n	801cb48 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801ca9a:	f001 ff86 	bl	801e9aa <RFW_ReceivePayload>
        break;
 801ca9e:	e053      	b.n	801cb48 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801caa0:	4b33      	ldr	r3, [pc, #204]	; (801cb70 <RadioIrqProcess+0x438>)
 801caa2:	2201      	movs	r2, #1
 801caa4:	2100      	movs	r1, #0
 801caa6:	2002      	movs	r0, #2
 801caa8:	f002 ff44 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801caac:	e051      	b.n	801cb52 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801caae:	4831      	ldr	r0, [pc, #196]	; (801cb74 <RadioIrqProcess+0x43c>)
 801cab0:	f002 fd36 	bl	801f520 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cab4:	4b2a      	ldr	r3, [pc, #168]	; (801cb60 <RadioIrqProcess+0x428>)
 801cab6:	785b      	ldrb	r3, [r3, #1]
 801cab8:	f083 0301 	eor.w	r3, r3, #1
 801cabc:	b2db      	uxtb	r3, r3
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d002      	beq.n	801cac8 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801cac2:	2000      	movs	r0, #0
 801cac4:	f000 feca 	bl	801d85c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cac8:	4b2b      	ldr	r3, [pc, #172]	; (801cb78 <RadioIrqProcess+0x440>)
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d03d      	beq.n	801cb4c <RadioIrqProcess+0x414>
 801cad0:	4b29      	ldr	r3, [pc, #164]	; (801cb78 <RadioIrqProcess+0x440>)
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	68db      	ldr	r3, [r3, #12]
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d038      	beq.n	801cb4c <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801cada:	4b27      	ldr	r3, [pc, #156]	; (801cb78 <RadioIrqProcess+0x440>)
 801cadc:	681b      	ldr	r3, [r3, #0]
 801cade:	68db      	ldr	r3, [r3, #12]
 801cae0:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801cae2:	4b26      	ldr	r3, [pc, #152]	; (801cb7c <RadioIrqProcess+0x444>)
 801cae4:	2201      	movs	r2, #1
 801cae6:	2100      	movs	r1, #0
 801cae8:	2002      	movs	r0, #2
 801caea:	f002 ff23 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801caee:	e02d      	b.n	801cb4c <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801caf0:	4b23      	ldr	r3, [pc, #140]	; (801cb80 <RadioIrqProcess+0x448>)
 801caf2:	2201      	movs	r2, #1
 801caf4:	2100      	movs	r1, #0
 801caf6:	2002      	movs	r0, #2
 801caf8:	f002 ff1c 	bl	801f934 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801cafc:	4b18      	ldr	r3, [pc, #96]	; (801cb60 <RadioIrqProcess+0x428>)
 801cafe:	785b      	ldrb	r3, [r3, #1]
 801cb00:	f083 0301 	eor.w	r3, r3, #1
 801cb04:	b2db      	uxtb	r3, r3
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d002      	beq.n	801cb10 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801cb0a:	2000      	movs	r0, #0
 801cb0c:	f000 fea6 	bl	801d85c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801cb10:	4b19      	ldr	r3, [pc, #100]	; (801cb78 <RadioIrqProcess+0x440>)
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d01b      	beq.n	801cb50 <RadioIrqProcess+0x418>
 801cb18:	4b17      	ldr	r3, [pc, #92]	; (801cb78 <RadioIrqProcess+0x440>)
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	691b      	ldr	r3, [r3, #16]
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d016      	beq.n	801cb50 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801cb22:	4b15      	ldr	r3, [pc, #84]	; (801cb78 <RadioIrqProcess+0x440>)
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	691b      	ldr	r3, [r3, #16]
 801cb28:	4798      	blx	r3
        break;
 801cb2a:	e011      	b.n	801cb50 <RadioIrqProcess+0x418>
        break;
 801cb2c:	bf00      	nop
 801cb2e:	e010      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb30:	bf00      	nop
 801cb32:	e00e      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb34:	bf00      	nop
 801cb36:	e00c      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb38:	bf00      	nop
 801cb3a:	e00a      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb3c:	bf00      	nop
 801cb3e:	e008      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb40:	bf00      	nop
 801cb42:	e006      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb44:	bf00      	nop
 801cb46:	e004      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb48:	bf00      	nop
 801cb4a:	e002      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb4c:	bf00      	nop
 801cb4e:	e000      	b.n	801cb52 <RadioIrqProcess+0x41a>
        break;
 801cb50:	bf00      	nop
    }
}
 801cb52:	bf00      	nop
 801cb54:	3708      	adds	r7, #8
 801cb56:	46bd      	mov	sp, r7
 801cb58:	bdb0      	pop	{r4, r5, r7, pc}
 801cb5a:	bf00      	nop
 801cb5c:	08020838 	.word	0x08020838
 801cb60:	20001b7c 	.word	0x20001b7c
 801cb64:	0801c547 	.word	0x0801c547
 801cb68:	0801c56b 	.word	0x0801c56b
 801cb6c:	08020844 	.word	0x08020844
 801cb70:	08020850 	.word	0x08020850
 801cb74:	20001bf0 	.word	0x20001bf0
 801cb78:	20001b78 	.word	0x20001b78
 801cb7c:	0802085c 	.word	0x0802085c
 801cb80:	08020868 	.word	0x08020868

0801cb84 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801cb84:	b580      	push	{r7, lr}
 801cb86:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801cb88:	4b09      	ldr	r3, [pc, #36]	; (801cbb0 <RadioTxPrbs+0x2c>)
 801cb8a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cb8e:	2101      	movs	r1, #1
 801cb90:	4618      	mov	r0, r3
 801cb92:	f001 fcdb 	bl	801e54c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801cb96:	4b07      	ldr	r3, [pc, #28]	; (801cbb4 <RadioTxPrbs+0x30>)
 801cb98:	212d      	movs	r1, #45	; 0x2d
 801cb9a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801cb9e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801cba0:	f000 ff1f 	bl	801d9e2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801cba4:	4804      	ldr	r0, [pc, #16]	; (801cbb8 <RadioTxPrbs+0x34>)
 801cba6:	f000 fe75 	bl	801d894 <SUBGRF_SetTx>
}
 801cbaa:	bf00      	nop
 801cbac:	bd80      	pop	{r7, pc}
 801cbae:	bf00      	nop
 801cbb0:	20001b7c 	.word	0x20001b7c
 801cbb4:	0801c547 	.word	0x0801c547
 801cbb8:	000fffff 	.word	0x000fffff

0801cbbc <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801cbbc:	b580      	push	{r7, lr}
 801cbbe:	b084      	sub	sp, #16
 801cbc0:	af00      	add	r7, sp, #0
 801cbc2:	4603      	mov	r3, r0
 801cbc4:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801cbc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cbca:	4618      	mov	r0, r3
 801cbcc:	f001 fce6 	bl	801e59c <SUBGRF_SetRfTxPower>
 801cbd0:	4603      	mov	r3, r0
 801cbd2:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801cbd4:	210e      	movs	r1, #14
 801cbd6:	f640 101f 	movw	r0, #2335	; 0x91f
 801cbda:	f001 fbc3 	bl	801e364 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801cbde:	7bfb      	ldrb	r3, [r7, #15]
 801cbe0:	2101      	movs	r1, #1
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	f001 fcb2 	bl	801e54c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801cbe8:	f000 fef2 	bl	801d9d0 <SUBGRF_SetTxContinuousWave>
}
 801cbec:	bf00      	nop
 801cbee:	3710      	adds	r7, #16
 801cbf0:	46bd      	mov	sp, r7
 801cbf2:	bd80      	pop	{r7, pc}

0801cbf4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801cbf4:	b480      	push	{r7}
 801cbf6:	b089      	sub	sp, #36	; 0x24
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	60f8      	str	r0, [r7, #12]
 801cbfc:	60b9      	str	r1, [r7, #8]
 801cbfe:	4613      	mov	r3, r2
 801cc00:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801cc02:	2300      	movs	r3, #0
 801cc04:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801cc06:	2300      	movs	r3, #0
 801cc08:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801cc0a:	2300      	movs	r3, #0
 801cc0c:	61bb      	str	r3, [r7, #24]
 801cc0e:	e011      	b.n	801cc34 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801cc10:	69bb      	ldr	r3, [r7, #24]
 801cc12:	68ba      	ldr	r2, [r7, #8]
 801cc14:	4413      	add	r3, r2
 801cc16:	781a      	ldrb	r2, [r3, #0]
 801cc18:	69bb      	ldr	r3, [r7, #24]
 801cc1a:	68b9      	ldr	r1, [r7, #8]
 801cc1c:	440b      	add	r3, r1
 801cc1e:	43d2      	mvns	r2, r2
 801cc20:	b2d2      	uxtb	r2, r2
 801cc22:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801cc24:	69bb      	ldr	r3, [r7, #24]
 801cc26:	68fa      	ldr	r2, [r7, #12]
 801cc28:	4413      	add	r3, r2
 801cc2a:	2200      	movs	r2, #0
 801cc2c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801cc2e:	69bb      	ldr	r3, [r7, #24]
 801cc30:	3301      	adds	r3, #1
 801cc32:	61bb      	str	r3, [r7, #24]
 801cc34:	79fb      	ldrb	r3, [r7, #7]
 801cc36:	69ba      	ldr	r2, [r7, #24]
 801cc38:	429a      	cmp	r2, r3
 801cc3a:	dbe9      	blt.n	801cc10 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801cc3c:	2300      	movs	r3, #0
 801cc3e:	61bb      	str	r3, [r7, #24]
 801cc40:	e049      	b.n	801ccd6 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801cc42:	69bb      	ldr	r3, [r7, #24]
 801cc44:	425a      	negs	r2, r3
 801cc46:	f003 0307 	and.w	r3, r3, #7
 801cc4a:	f002 0207 	and.w	r2, r2, #7
 801cc4e:	bf58      	it	pl
 801cc50:	4253      	negpl	r3, r2
 801cc52:	b2db      	uxtb	r3, r3
 801cc54:	f1c3 0307 	rsb	r3, r3, #7
 801cc58:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801cc5a:	69bb      	ldr	r3, [r7, #24]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	da00      	bge.n	801cc62 <payload_integration+0x6e>
 801cc60:	3307      	adds	r3, #7
 801cc62:	10db      	asrs	r3, r3, #3
 801cc64:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801cc66:	69bb      	ldr	r3, [r7, #24]
 801cc68:	3301      	adds	r3, #1
 801cc6a:	425a      	negs	r2, r3
 801cc6c:	f003 0307 	and.w	r3, r3, #7
 801cc70:	f002 0207 	and.w	r2, r2, #7
 801cc74:	bf58      	it	pl
 801cc76:	4253      	negpl	r3, r2
 801cc78:	b2db      	uxtb	r3, r3
 801cc7a:	f1c3 0307 	rsb	r3, r3, #7
 801cc7e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801cc80:	69bb      	ldr	r3, [r7, #24]
 801cc82:	3301      	adds	r3, #1
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	da00      	bge.n	801cc8a <payload_integration+0x96>
 801cc88:	3307      	adds	r3, #7
 801cc8a:	10db      	asrs	r3, r3, #3
 801cc8c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801cc8e:	7dbb      	ldrb	r3, [r7, #22]
 801cc90:	68ba      	ldr	r2, [r7, #8]
 801cc92:	4413      	add	r3, r2
 801cc94:	781b      	ldrb	r3, [r3, #0]
 801cc96:	461a      	mov	r2, r3
 801cc98:	7dfb      	ldrb	r3, [r7, #23]
 801cc9a:	fa42 f303 	asr.w	r3, r2, r3
 801cc9e:	b2db      	uxtb	r3, r3
 801cca0:	f003 0301 	and.w	r3, r3, #1
 801cca4:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801cca6:	7ffa      	ldrb	r2, [r7, #31]
 801cca8:	7cfb      	ldrb	r3, [r7, #19]
 801ccaa:	4053      	eors	r3, r2
 801ccac:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801ccae:	7d3b      	ldrb	r3, [r7, #20]
 801ccb0:	68fa      	ldr	r2, [r7, #12]
 801ccb2:	4413      	add	r3, r2
 801ccb4:	781b      	ldrb	r3, [r3, #0]
 801ccb6:	b25a      	sxtb	r2, r3
 801ccb8:	7ff9      	ldrb	r1, [r7, #31]
 801ccba:	7d7b      	ldrb	r3, [r7, #21]
 801ccbc:	fa01 f303 	lsl.w	r3, r1, r3
 801ccc0:	b25b      	sxtb	r3, r3
 801ccc2:	4313      	orrs	r3, r2
 801ccc4:	b259      	sxtb	r1, r3
 801ccc6:	7d3b      	ldrb	r3, [r7, #20]
 801ccc8:	68fa      	ldr	r2, [r7, #12]
 801ccca:	4413      	add	r3, r2
 801cccc:	b2ca      	uxtb	r2, r1
 801ccce:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801ccd0:	69bb      	ldr	r3, [r7, #24]
 801ccd2:	3301      	adds	r3, #1
 801ccd4:	61bb      	str	r3, [r7, #24]
 801ccd6:	79fb      	ldrb	r3, [r7, #7]
 801ccd8:	00db      	lsls	r3, r3, #3
 801ccda:	69ba      	ldr	r2, [r7, #24]
 801ccdc:	429a      	cmp	r2, r3
 801ccde:	dbb0      	blt.n	801cc42 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801cce0:	7ffb      	ldrb	r3, [r7, #31]
 801cce2:	01db      	lsls	r3, r3, #7
 801cce4:	b25a      	sxtb	r2, r3
 801cce6:	7ffb      	ldrb	r3, [r7, #31]
 801cce8:	019b      	lsls	r3, r3, #6
 801ccea:	b25b      	sxtb	r3, r3
 801ccec:	4313      	orrs	r3, r2
 801ccee:	b25b      	sxtb	r3, r3
 801ccf0:	7ffa      	ldrb	r2, [r7, #31]
 801ccf2:	2a00      	cmp	r2, #0
 801ccf4:	d101      	bne.n	801ccfa <payload_integration+0x106>
 801ccf6:	2220      	movs	r2, #32
 801ccf8:	e000      	b.n	801ccfc <payload_integration+0x108>
 801ccfa:	2200      	movs	r2, #0
 801ccfc:	4313      	orrs	r3, r2
 801ccfe:	b259      	sxtb	r1, r3
 801cd00:	79fb      	ldrb	r3, [r7, #7]
 801cd02:	68fa      	ldr	r2, [r7, #12]
 801cd04:	4413      	add	r3, r2
 801cd06:	b2ca      	uxtb	r2, r1
 801cd08:	701a      	strb	r2, [r3, #0]
}
 801cd0a:	bf00      	nop
 801cd0c:	3724      	adds	r7, #36	; 0x24
 801cd0e:	46bd      	mov	sp, r7
 801cd10:	bc80      	pop	{r7}
 801cd12:	4770      	bx	lr

0801cd14 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801cd14:	b580      	push	{r7, lr}
 801cd16:	b08c      	sub	sp, #48	; 0x30
 801cd18:	af00      	add	r7, sp, #0
 801cd1a:	60b9      	str	r1, [r7, #8]
 801cd1c:	607a      	str	r2, [r7, #4]
 801cd1e:	603b      	str	r3, [r7, #0]
 801cd20:	4603      	mov	r3, r0
 801cd22:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801cd24:	2300      	movs	r3, #0
 801cd26:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801cd28:	2300      	movs	r3, #0
 801cd2a:	623b      	str	r3, [r7, #32]
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801cd30:	f001 fdff 	bl	801e932 <RFW_DeInit>

    if( rxContinuous != 0 )
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d001      	beq.n	801cd3e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	bf14      	ite	ne
 801cd44:	2301      	movne	r3, #1
 801cd46:	2300      	moveq	r3, #0
 801cd48:	b2da      	uxtb	r2, r3
 801cd4a:	4ba3      	ldr	r3, [pc, #652]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cd4c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801cd4e:	7bfb      	ldrb	r3, [r7, #15]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d003      	beq.n	801cd5c <RadioSetRxGenericConfig+0x48>
 801cd54:	2b01      	cmp	r3, #1
 801cd56:	f000 80dc 	beq.w	801cf12 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801cd5a:	e194      	b.n	801d086 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801cd5c:	68bb      	ldr	r3, [r7, #8]
 801cd5e:	689b      	ldr	r3, [r3, #8]
 801cd60:	2b00      	cmp	r3, #0
 801cd62:	d003      	beq.n	801cd6c <RadioSetRxGenericConfig+0x58>
 801cd64:	68bb      	ldr	r3, [r7, #8]
 801cd66:	68db      	ldr	r3, [r3, #12]
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d102      	bne.n	801cd72 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801cd6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd70:	e18a      	b.n	801d088 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801cd72:	68bb      	ldr	r3, [r7, #8]
 801cd74:	7f9b      	ldrb	r3, [r3, #30]
 801cd76:	2b08      	cmp	r3, #8
 801cd78:	d902      	bls.n	801cd80 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801cd7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cd7e:	e183      	b.n	801d088 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801cd80:	68bb      	ldr	r3, [r7, #8]
 801cd82:	6919      	ldr	r1, [r3, #16]
 801cd84:	68bb      	ldr	r3, [r7, #8]
 801cd86:	7f9b      	ldrb	r3, [r3, #30]
 801cd88:	b29a      	uxth	r2, r3
 801cd8a:	f107 0320 	add.w	r3, r7, #32
 801cd8e:	4618      	mov	r0, r3
 801cd90:	f001 fe8c 	bl	801eaac <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801cd94:	68bb      	ldr	r3, [r7, #8]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	bf14      	ite	ne
 801cd9c:	2301      	movne	r3, #1
 801cd9e:	2300      	moveq	r3, #0
 801cda0:	b2db      	uxtb	r3, r3
 801cda2:	4618      	mov	r0, r3
 801cda4:	f000 fe26 	bl	801d9f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801cda8:	4b8b      	ldr	r3, [pc, #556]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cdaa:	2200      	movs	r2, #0
 801cdac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801cdb0:	68bb      	ldr	r3, [r7, #8]
 801cdb2:	689b      	ldr	r3, [r3, #8]
 801cdb4:	4a88      	ldr	r2, [pc, #544]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cdb6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801cdb8:	68bb      	ldr	r3, [r7, #8]
 801cdba:	f893 2020 	ldrb.w	r2, [r3, #32]
 801cdbe:	4b86      	ldr	r3, [pc, #536]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cdc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801cdc4:	68bb      	ldr	r3, [r7, #8]
 801cdc6:	685b      	ldr	r3, [r3, #4]
 801cdc8:	4618      	mov	r0, r3
 801cdca:	f001 fce5 	bl	801e798 <SUBGRF_GetFskBandwidthRegValue>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	461a      	mov	r2, r3
 801cdd2:	4b81      	ldr	r3, [pc, #516]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cdd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801cdd8:	4b7f      	ldr	r3, [pc, #508]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cdda:	2200      	movs	r2, #0
 801cddc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801cdde:	68bb      	ldr	r3, [r7, #8]
 801cde0:	68db      	ldr	r3, [r3, #12]
 801cde2:	b29b      	uxth	r3, r3
 801cde4:	00db      	lsls	r3, r3, #3
 801cde6:	b29a      	uxth	r2, r3
 801cde8:	4b7b      	ldr	r3, [pc, #492]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cdea:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801cdec:	68bb      	ldr	r3, [r7, #8]
 801cdee:	7fda      	ldrb	r2, [r3, #31]
 801cdf0:	4b79      	ldr	r3, [pc, #484]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cdf2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801cdf4:	68bb      	ldr	r3, [r7, #8]
 801cdf6:	7f9b      	ldrb	r3, [r3, #30]
 801cdf8:	00db      	lsls	r3, r3, #3
 801cdfa:	b2da      	uxtb	r2, r3
 801cdfc:	4b76      	ldr	r3, [pc, #472]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cdfe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801ce00:	68bb      	ldr	r3, [r7, #8]
 801ce02:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801ce06:	4b74      	ldr	r3, [pc, #464]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801ce08:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801ce0a:	68bb      	ldr	r3, [r7, #8]
 801ce0c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d105      	bne.n	801ce20 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801ce14:	68bb      	ldr	r3, [r7, #8]
 801ce16:	695b      	ldr	r3, [r3, #20]
 801ce18:	b2da      	uxtb	r2, r3
 801ce1a:	4b6f      	ldr	r3, [pc, #444]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801ce1c:	759a      	strb	r2, [r3, #22]
 801ce1e:	e00b      	b.n	801ce38 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801ce20:	68bb      	ldr	r3, [r7, #8]
 801ce22:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ce26:	2b02      	cmp	r3, #2
 801ce28:	d103      	bne.n	801ce32 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ce2a:	4b6b      	ldr	r3, [pc, #428]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801ce2c:	22ff      	movs	r2, #255	; 0xff
 801ce2e:	759a      	strb	r2, [r3, #22]
 801ce30:	e002      	b.n	801ce38 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ce32:	4b69      	ldr	r3, [pc, #420]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801ce34:	22ff      	movs	r2, #255	; 0xff
 801ce36:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ce38:	68bb      	ldr	r3, [r7, #8]
 801ce3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ce3e:	2b02      	cmp	r3, #2
 801ce40:	d004      	beq.n	801ce4c <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ce42:	68bb      	ldr	r3, [r7, #8]
 801ce44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ce48:	2b02      	cmp	r3, #2
 801ce4a:	d12d      	bne.n	801cea8 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ce4c:	68bb      	ldr	r3, [r7, #8]
 801ce4e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce52:	2bf1      	cmp	r3, #241	; 0xf1
 801ce54:	d00c      	beq.n	801ce70 <RadioSetRxGenericConfig+0x15c>
 801ce56:	68bb      	ldr	r3, [r7, #8]
 801ce58:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce5c:	2bf2      	cmp	r3, #242	; 0xf2
 801ce5e:	d007      	beq.n	801ce70 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ce60:	68bb      	ldr	r3, [r7, #8]
 801ce62:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ce66:	2b01      	cmp	r3, #1
 801ce68:	d002      	beq.n	801ce70 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801ce6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ce6e:	e10b      	b.n	801d088 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801ce70:	2300      	movs	r3, #0
 801ce72:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801ce74:	68bb      	ldr	r3, [r7, #8]
 801ce76:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801ce78:	4b58      	ldr	r3, [pc, #352]	; (801cfdc <RadioSetRxGenericConfig+0x2c8>)
 801ce7a:	6819      	ldr	r1, [r3, #0]
 801ce7c:	f107 0314 	add.w	r3, r7, #20
 801ce80:	4a57      	ldr	r2, [pc, #348]	; (801cfe0 <RadioSetRxGenericConfig+0x2cc>)
 801ce82:	4618      	mov	r0, r3
 801ce84:	f001 fd48 	bl	801e918 <RFW_Init>
 801ce88:	4603      	mov	r3, r0
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d002      	beq.n	801ce94 <RadioSetRxGenericConfig+0x180>
                return -1;
 801ce8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ce92:	e0f9      	b.n	801d088 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801ce94:	4b50      	ldr	r3, [pc, #320]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801ce96:	2200      	movs	r2, #0
 801ce98:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801ce9a:	4b4f      	ldr	r3, [pc, #316]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801ce9c:	2201      	movs	r2, #1
 801ce9e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801cea0:	4b4d      	ldr	r3, [pc, #308]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cea2:	2200      	movs	r2, #0
 801cea4:	755a      	strb	r2, [r3, #21]
        {
 801cea6:	e00e      	b.n	801cec6 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801cea8:	68bb      	ldr	r3, [r7, #8]
 801ceaa:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801ceae:	4b4a      	ldr	r3, [pc, #296]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801ceb0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801ceb2:	68bb      	ldr	r3, [r7, #8]
 801ceb4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801ceb8:	4b47      	ldr	r3, [pc, #284]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801ceba:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801cebc:	68bb      	ldr	r3, [r7, #8]
 801cebe:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801cec2:	4b45      	ldr	r3, [pc, #276]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cec4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801cec6:	f7ff fa3c 	bl	801c342 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801ceca:	2000      	movs	r0, #0
 801cecc:	f7fe fbd0 	bl	801b670 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ced0:	4844      	ldr	r0, [pc, #272]	; (801cfe4 <RadioSetRxGenericConfig+0x2d0>)
 801ced2:	f001 f82d 	bl	801df30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ced6:	4844      	ldr	r0, [pc, #272]	; (801cfe8 <RadioSetRxGenericConfig+0x2d4>)
 801ced8:	f001 f8fc 	bl	801e0d4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801cedc:	f107 0320 	add.w	r3, r7, #32
 801cee0:	4618      	mov	r0, r3
 801cee2:	f000 fbc0 	bl	801d666 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801cee6:	68bb      	ldr	r3, [r7, #8]
 801cee8:	8b9b      	ldrh	r3, [r3, #28]
 801ceea:	4618      	mov	r0, r3
 801ceec:	f000 fc0a 	bl	801d704 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801cef0:	68bb      	ldr	r3, [r7, #8]
 801cef2:	8b1b      	ldrh	r3, [r3, #24]
 801cef4:	4618      	mov	r0, r3
 801cef6:	f000 fbe5 	bl	801d6c4 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801cefa:	683b      	ldr	r3, [r7, #0]
 801cefc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801cf00:	fb03 f202 	mul.w	r2, r3, r2
 801cf04:	68bb      	ldr	r3, [r7, #8]
 801cf06:	689b      	ldr	r3, [r3, #8]
 801cf08:	fbb2 f3f3 	udiv	r3, r2, r3
 801cf0c:	4a32      	ldr	r2, [pc, #200]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cf0e:	6093      	str	r3, [r2, #8]
        break;
 801cf10:	e0b9      	b.n	801d086 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801cf12:	68bb      	ldr	r3, [r7, #8]
 801cf14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d102      	bne.n	801cf20 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801cf1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cf1e:	e0b3      	b.n	801d088 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801cf20:	68bb      	ldr	r3, [r7, #8]
 801cf22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801cf26:	2b01      	cmp	r3, #1
 801cf28:	d104      	bne.n	801cf34 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801cf2a:	68bb      	ldr	r3, [r7, #8]
 801cf2c:	695b      	ldr	r3, [r3, #20]
 801cf2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801cf32:	e002      	b.n	801cf3a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801cf34:	23ff      	movs	r3, #255	; 0xff
 801cf36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801cf3a:	68bb      	ldr	r3, [r7, #8]
 801cf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	bf14      	ite	ne
 801cf42:	2301      	movne	r3, #1
 801cf44:	2300      	moveq	r3, #0
 801cf46:	b2db      	uxtb	r3, r3
 801cf48:	4618      	mov	r0, r3
 801cf4a:	f000 fd53 	bl	801d9f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801cf4e:	683b      	ldr	r3, [r7, #0]
 801cf50:	b2db      	uxtb	r3, r3
 801cf52:	4618      	mov	r0, r3
 801cf54:	f000 fd5d 	bl	801da12 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801cf58:	4b1f      	ldr	r3, [pc, #124]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cf5a:	2201      	movs	r2, #1
 801cf5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801cf60:	68bb      	ldr	r3, [r7, #8]
 801cf62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801cf66:	4b1c      	ldr	r3, [pc, #112]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cf68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801cf6c:	68bb      	ldr	r3, [r7, #8]
 801cf6e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801cf72:	4b19      	ldr	r3, [pc, #100]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cf74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801cf78:	68bb      	ldr	r3, [r7, #8]
 801cf7a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801cf7e:	4b16      	ldr	r3, [pc, #88]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cf80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801cf84:	68bb      	ldr	r3, [r7, #8]
 801cf86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801cf8a:	2b02      	cmp	r3, #2
 801cf8c:	d010      	beq.n	801cfb0 <RadioSetRxGenericConfig+0x29c>
 801cf8e:	2b02      	cmp	r3, #2
 801cf90:	dc2c      	bgt.n	801cfec <RadioSetRxGenericConfig+0x2d8>
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d002      	beq.n	801cf9c <RadioSetRxGenericConfig+0x288>
 801cf96:	2b01      	cmp	r3, #1
 801cf98:	d005      	beq.n	801cfa6 <RadioSetRxGenericConfig+0x292>
            break;
 801cf9a:	e027      	b.n	801cfec <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801cf9c:	4b0e      	ldr	r3, [pc, #56]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cf9e:	2200      	movs	r2, #0
 801cfa0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cfa4:	e023      	b.n	801cfee <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801cfa6:	4b0c      	ldr	r3, [pc, #48]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cfa8:	2201      	movs	r2, #1
 801cfaa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cfae:	e01e      	b.n	801cfee <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cfb6:	2b0b      	cmp	r3, #11
 801cfb8:	d004      	beq.n	801cfc4 <RadioSetRxGenericConfig+0x2b0>
 801cfba:	68bb      	ldr	r3, [r7, #8]
 801cfbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801cfc0:	2b0c      	cmp	r3, #12
 801cfc2:	d104      	bne.n	801cfce <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801cfc4:	4b04      	ldr	r3, [pc, #16]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cfc6:	2201      	movs	r2, #1
 801cfc8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cfcc:	e00f      	b.n	801cfee <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801cfce:	4b02      	ldr	r3, [pc, #8]	; (801cfd8 <RadioSetRxGenericConfig+0x2c4>)
 801cfd0:	2200      	movs	r2, #0
 801cfd2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801cfd6:	e00a      	b.n	801cfee <RadioSetRxGenericConfig+0x2da>
 801cfd8:	20001b7c 	.word	0x20001b7c
 801cfdc:	20001b78 	.word	0x20001b78
 801cfe0:	20001bf0 	.word	0x20001bf0
 801cfe4:	20001bb4 	.word	0x20001bb4
 801cfe8:	20001b8a 	.word	0x20001b8a
            break;
 801cfec:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801cfee:	4b28      	ldr	r3, [pc, #160]	; (801d090 <RadioSetRxGenericConfig+0x37c>)
 801cff0:	2201      	movs	r2, #1
 801cff2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801cff4:	68bb      	ldr	r3, [r7, #8]
 801cff6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801cff8:	4b25      	ldr	r3, [pc, #148]	; (801d090 <RadioSetRxGenericConfig+0x37c>)
 801cffa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801cffc:	68bb      	ldr	r3, [r7, #8]
 801cffe:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801d002:	4b23      	ldr	r3, [pc, #140]	; (801d090 <RadioSetRxGenericConfig+0x37c>)
 801d004:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801d006:	4a22      	ldr	r2, [pc, #136]	; (801d090 <RadioSetRxGenericConfig+0x37c>)
 801d008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d00c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d00e:	68bb      	ldr	r3, [r7, #8]
 801d010:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801d014:	4b1e      	ldr	r3, [pc, #120]	; (801d090 <RadioSetRxGenericConfig+0x37c>)
 801d016:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d01a:	68bb      	ldr	r3, [r7, #8]
 801d01c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801d020:	4b1b      	ldr	r3, [pc, #108]	; (801d090 <RadioSetRxGenericConfig+0x37c>)
 801d022:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d026:	f7ff f98c 	bl	801c342 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d02a:	2001      	movs	r0, #1
 801d02c:	f7fe fb20 	bl	801b670 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d030:	4818      	ldr	r0, [pc, #96]	; (801d094 <RadioSetRxGenericConfig+0x380>)
 801d032:	f000 ff7d 	bl	801df30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d036:	4818      	ldr	r0, [pc, #96]	; (801d098 <RadioSetRxGenericConfig+0x384>)
 801d038:	f001 f84c 	bl	801e0d4 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d03c:	4b14      	ldr	r3, [pc, #80]	; (801d090 <RadioSetRxGenericConfig+0x37c>)
 801d03e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d042:	2b01      	cmp	r3, #1
 801d044:	d10d      	bne.n	801d062 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801d046:	f240 7036 	movw	r0, #1846	; 0x736
 801d04a:	f001 f99f 	bl	801e38c <SUBGRF_ReadRegister>
 801d04e:	4603      	mov	r3, r0
 801d050:	f023 0304 	bic.w	r3, r3, #4
 801d054:	b2db      	uxtb	r3, r3
 801d056:	4619      	mov	r1, r3
 801d058:	f240 7036 	movw	r0, #1846	; 0x736
 801d05c:	f001 f982 	bl	801e364 <SUBGRF_WriteRegister>
 801d060:	e00c      	b.n	801d07c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801d062:	f240 7036 	movw	r0, #1846	; 0x736
 801d066:	f001 f991 	bl	801e38c <SUBGRF_ReadRegister>
 801d06a:	4603      	mov	r3, r0
 801d06c:	f043 0304 	orr.w	r3, r3, #4
 801d070:	b2db      	uxtb	r3, r3
 801d072:	4619      	mov	r1, r3
 801d074:	f240 7036 	movw	r0, #1846	; 0x736
 801d078:	f001 f974 	bl	801e364 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d07c:	4b04      	ldr	r3, [pc, #16]	; (801d090 <RadioSetRxGenericConfig+0x37c>)
 801d07e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d082:	609a      	str	r2, [r3, #8]
        break;
 801d084:	bf00      	nop
    }
    return status;
 801d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d088:	4618      	mov	r0, r3
 801d08a:	3730      	adds	r7, #48	; 0x30
 801d08c:	46bd      	mov	sp, r7
 801d08e:	bd80      	pop	{r7, pc}
 801d090:	20001b7c 	.word	0x20001b7c
 801d094:	20001bb4 	.word	0x20001bb4
 801d098:	20001b8a 	.word	0x20001b8a

0801d09c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801d09c:	b580      	push	{r7, lr}
 801d09e:	b08e      	sub	sp, #56	; 0x38
 801d0a0:	af00      	add	r7, sp, #0
 801d0a2:	60b9      	str	r1, [r7, #8]
 801d0a4:	607b      	str	r3, [r7, #4]
 801d0a6:	4603      	mov	r3, r0
 801d0a8:	73fb      	strb	r3, [r7, #15]
 801d0aa:	4613      	mov	r3, r2
 801d0ac:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d0b2:	2300      	movs	r3, #0
 801d0b4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d0b6:	f001 fc3c 	bl	801e932 <RFW_DeInit>
    switch( modem )
 801d0ba:	7bfb      	ldrb	r3, [r7, #15]
 801d0bc:	2b03      	cmp	r3, #3
 801d0be:	f200 8204 	bhi.w	801d4ca <RadioSetTxGenericConfig+0x42e>
 801d0c2:	a201      	add	r2, pc, #4	; (adr r2, 801d0c8 <RadioSetTxGenericConfig+0x2c>)
 801d0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0c8:	0801d24d 	.word	0x0801d24d
 801d0cc:	0801d395 	.word	0x0801d395
 801d0d0:	0801d48d 	.word	0x0801d48d
 801d0d4:	0801d0d9 	.word	0x0801d0d9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801d0d8:	68bb      	ldr	r3, [r7, #8]
 801d0da:	7c9b      	ldrb	r3, [r3, #18]
 801d0dc:	2b08      	cmp	r3, #8
 801d0de:	d902      	bls.n	801d0e6 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801d0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d0e4:	e206      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801d0e6:	68bb      	ldr	r3, [r7, #8]
 801d0e8:	6899      	ldr	r1, [r3, #8]
 801d0ea:	68bb      	ldr	r3, [r7, #8]
 801d0ec:	7c9b      	ldrb	r3, [r3, #18]
 801d0ee:	b29a      	uxth	r2, r3
 801d0f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	f001 fcd9 	bl	801eaac <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801d0fa:	68bb      	ldr	r3, [r7, #8]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d102      	bne.n	801d108 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801d102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d106:	e1f5      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801d108:	68bb      	ldr	r3, [r7, #8]
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	f242 7210 	movw	r2, #10000	; 0x2710
 801d110:	4293      	cmp	r3, r2
 801d112:	d813      	bhi.n	801d13c <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801d114:	2302      	movs	r3, #2
 801d116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801d11a:	4b99      	ldr	r3, [pc, #612]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d11c:	2203      	movs	r2, #3
 801d11e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801d120:	4b97      	ldr	r3, [pc, #604]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d122:	2203      	movs	r2, #3
 801d124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d128:	68bb      	ldr	r3, [r7, #8]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	4a94      	ldr	r2, [pc, #592]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d12e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d130:	68bb      	ldr	r3, [r7, #8]
 801d132:	7cda      	ldrb	r2, [r3, #19]
 801d134:	4b92      	ldr	r3, [pc, #584]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801d13a:	e017      	b.n	801d16c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801d13c:	2300      	movs	r3, #0
 801d13e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d142:	4b8f      	ldr	r3, [pc, #572]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d144:	2200      	movs	r2, #0
 801d146:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d148:	4b8d      	ldr	r3, [pc, #564]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d14a:	2200      	movs	r2, #0
 801d14c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801d150:	68bb      	ldr	r3, [r7, #8]
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	4a8a      	ldr	r2, [pc, #552]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d156:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801d158:	68bb      	ldr	r3, [r7, #8]
 801d15a:	7cda      	ldrb	r2, [r3, #19]
 801d15c:	4b88      	ldr	r3, [pc, #544]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d15e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801d162:	68bb      	ldr	r3, [r7, #8]
 801d164:	681b      	ldr	r3, [r3, #0]
 801d166:	089b      	lsrs	r3, r3, #2
 801d168:	4a85      	ldr	r2, [pc, #532]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d16a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801d16c:	68bb      	ldr	r3, [r7, #8]
 801d16e:	685b      	ldr	r3, [r3, #4]
 801d170:	b29b      	uxth	r3, r3
 801d172:	00db      	lsls	r3, r3, #3
 801d174:	b29a      	uxth	r2, r3
 801d176:	4b82      	ldr	r3, [pc, #520]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d178:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d17a:	4b81      	ldr	r3, [pc, #516]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d17c:	2204      	movs	r2, #4
 801d17e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801d180:	68bb      	ldr	r3, [r7, #8]
 801d182:	7c9b      	ldrb	r3, [r3, #18]
 801d184:	00db      	lsls	r3, r3, #3
 801d186:	b2da      	uxtb	r2, r3
 801d188:	4b7d      	ldr	r3, [pc, #500]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d18a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d18c:	4b7c      	ldr	r3, [pc, #496]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d18e:	2200      	movs	r2, #0
 801d190:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d192:	68bb      	ldr	r3, [r7, #8]
 801d194:	7d9b      	ldrb	r3, [r3, #22]
 801d196:	2b02      	cmp	r3, #2
 801d198:	d003      	beq.n	801d1a2 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d19a:	68bb      	ldr	r3, [r7, #8]
 801d19c:	7d1b      	ldrb	r3, [r3, #20]
 801d19e:	2b02      	cmp	r3, #2
 801d1a0:	d12b      	bne.n	801d1fa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d1a2:	68bb      	ldr	r3, [r7, #8]
 801d1a4:	7d5b      	ldrb	r3, [r3, #21]
 801d1a6:	2bf1      	cmp	r3, #241	; 0xf1
 801d1a8:	d00a      	beq.n	801d1c0 <RadioSetTxGenericConfig+0x124>
 801d1aa:	68bb      	ldr	r3, [r7, #8]
 801d1ac:	7d5b      	ldrb	r3, [r3, #21]
 801d1ae:	2bf2      	cmp	r3, #242	; 0xf2
 801d1b0:	d006      	beq.n	801d1c0 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d1b2:	68bb      	ldr	r3, [r7, #8]
 801d1b4:	7d5b      	ldrb	r3, [r3, #21]
 801d1b6:	2b01      	cmp	r3, #1
 801d1b8:	d002      	beq.n	801d1c0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801d1ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d1be:	e199      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801d1c0:	68bb      	ldr	r3, [r7, #8]
 801d1c2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d1ca:	4b6e      	ldr	r3, [pc, #440]	; (801d384 <RadioSetTxGenericConfig+0x2e8>)
 801d1cc:	6819      	ldr	r1, [r3, #0]
 801d1ce:	f107 0320 	add.w	r3, r7, #32
 801d1d2:	4a6d      	ldr	r2, [pc, #436]	; (801d388 <RadioSetTxGenericConfig+0x2ec>)
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	f001 fb9f 	bl	801e918 <RFW_Init>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d002      	beq.n	801d1e6 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801d1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d1e4:	e186      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d1e6:	4b66      	ldr	r3, [pc, #408]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d1e8:	2200      	movs	r2, #0
 801d1ea:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d1ec:	4b64      	ldr	r3, [pc, #400]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d1ee:	2201      	movs	r2, #1
 801d1f0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d1f2:	4b63      	ldr	r3, [pc, #396]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	755a      	strb	r2, [r3, #21]
        {
 801d1f8:	e00b      	b.n	801d212 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801d1fa:	68bb      	ldr	r3, [r7, #8]
 801d1fc:	7d5a      	ldrb	r2, [r3, #21]
 801d1fe:	4b60      	ldr	r3, [pc, #384]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d200:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801d202:	68bb      	ldr	r3, [r7, #8]
 801d204:	7d9a      	ldrb	r2, [r3, #22]
 801d206:	4b5e      	ldr	r3, [pc, #376]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d208:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801d20a:	68bb      	ldr	r3, [r7, #8]
 801d20c:	7d1a      	ldrb	r2, [r3, #20]
 801d20e:	4b5c      	ldr	r3, [pc, #368]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d210:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d212:	f7ff f896 	bl	801c342 <RadioStandby>
        RadioSetModem( radio_modem );
 801d216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801d21a:	4618      	mov	r0, r3
 801d21c:	f7fe fa28 	bl	801b670 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d220:	485a      	ldr	r0, [pc, #360]	; (801d38c <RadioSetTxGenericConfig+0x2f0>)
 801d222:	f000 fe85 	bl	801df30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d226:	485a      	ldr	r0, [pc, #360]	; (801d390 <RadioSetTxGenericConfig+0x2f4>)
 801d228:	f000 ff54 	bl	801e0d4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d22c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d230:	4618      	mov	r0, r3
 801d232:	f000 fa18 	bl	801d666 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801d236:	68bb      	ldr	r3, [r7, #8]
 801d238:	8a1b      	ldrh	r3, [r3, #16]
 801d23a:	4618      	mov	r0, r3
 801d23c:	f000 fa62 	bl	801d704 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801d240:	68bb      	ldr	r3, [r7, #8]
 801d242:	899b      	ldrh	r3, [r3, #12]
 801d244:	4618      	mov	r0, r3
 801d246:	f000 fa3d 	bl	801d6c4 <SUBGRF_SetCrcPolynomial>
        break;
 801d24a:	e13f      	b.n	801d4cc <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801d24c:	68bb      	ldr	r3, [r7, #8]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	2b00      	cmp	r3, #0
 801d252:	d102      	bne.n	801d25a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801d254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d258:	e14c      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801d25a:	68bb      	ldr	r3, [r7, #8]
 801d25c:	7c9b      	ldrb	r3, [r3, #18]
 801d25e:	2b08      	cmp	r3, #8
 801d260:	d902      	bls.n	801d268 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801d262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d266:	e145      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801d268:	68bb      	ldr	r3, [r7, #8]
 801d26a:	6899      	ldr	r1, [r3, #8]
 801d26c:	68bb      	ldr	r3, [r7, #8]
 801d26e:	7c9b      	ldrb	r3, [r3, #18]
 801d270:	b29a      	uxth	r2, r3
 801d272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d276:	4618      	mov	r0, r3
 801d278:	f001 fc18 	bl	801eaac <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d27c:	4b40      	ldr	r3, [pc, #256]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d27e:	2200      	movs	r2, #0
 801d280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d284:	68bb      	ldr	r3, [r7, #8]
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	4a3d      	ldr	r2, [pc, #244]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d28a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d28c:	68bb      	ldr	r3, [r7, #8]
 801d28e:	7cda      	ldrb	r2, [r3, #19]
 801d290:	4b3b      	ldr	r3, [pc, #236]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d296:	68bb      	ldr	r3, [r7, #8]
 801d298:	699b      	ldr	r3, [r3, #24]
 801d29a:	4a39      	ldr	r2, [pc, #228]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d29c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d29e:	4b38      	ldr	r3, [pc, #224]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d2a0:	2200      	movs	r2, #0
 801d2a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d2a4:	68bb      	ldr	r3, [r7, #8]
 801d2a6:	685b      	ldr	r3, [r3, #4]
 801d2a8:	b29b      	uxth	r3, r3
 801d2aa:	00db      	lsls	r3, r3, #3
 801d2ac:	b29a      	uxth	r2, r3
 801d2ae:	4b34      	ldr	r3, [pc, #208]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d2b0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d2b2:	4b33      	ldr	r3, [pc, #204]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d2b4:	2204      	movs	r2, #4
 801d2b6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d2b8:	68bb      	ldr	r3, [r7, #8]
 801d2ba:	7c9b      	ldrb	r3, [r3, #18]
 801d2bc:	00db      	lsls	r3, r3, #3
 801d2be:	b2da      	uxtb	r2, r3
 801d2c0:	4b2f      	ldr	r3, [pc, #188]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d2c2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d2c4:	4b2e      	ldr	r3, [pc, #184]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d2c6:	2200      	movs	r2, #0
 801d2c8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801d2ca:	68bb      	ldr	r3, [r7, #8]
 801d2cc:	7d9b      	ldrb	r3, [r3, #22]
 801d2ce:	2b02      	cmp	r3, #2
 801d2d0:	d003      	beq.n	801d2da <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d2d2:	68bb      	ldr	r3, [r7, #8]
 801d2d4:	7d1b      	ldrb	r3, [r3, #20]
 801d2d6:	2b02      	cmp	r3, #2
 801d2d8:	d12a      	bne.n	801d330 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801d2da:	68bb      	ldr	r3, [r7, #8]
 801d2dc:	7d5b      	ldrb	r3, [r3, #21]
 801d2de:	2bf1      	cmp	r3, #241	; 0xf1
 801d2e0:	d00a      	beq.n	801d2f8 <RadioSetTxGenericConfig+0x25c>
 801d2e2:	68bb      	ldr	r3, [r7, #8]
 801d2e4:	7d5b      	ldrb	r3, [r3, #21]
 801d2e6:	2bf2      	cmp	r3, #242	; 0xf2
 801d2e8:	d006      	beq.n	801d2f8 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d2ea:	68bb      	ldr	r3, [r7, #8]
 801d2ec:	7d5b      	ldrb	r3, [r3, #21]
 801d2ee:	2b01      	cmp	r3, #1
 801d2f0:	d002      	beq.n	801d2f8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801d2f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d2f6:	e0fd      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801d2f8:	2301      	movs	r3, #1
 801d2fa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801d2fc:	68bb      	ldr	r3, [r7, #8]
 801d2fe:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d300:	4b20      	ldr	r3, [pc, #128]	; (801d384 <RadioSetTxGenericConfig+0x2e8>)
 801d302:	6819      	ldr	r1, [r3, #0]
 801d304:	f107 0314 	add.w	r3, r7, #20
 801d308:	4a1f      	ldr	r2, [pc, #124]	; (801d388 <RadioSetTxGenericConfig+0x2ec>)
 801d30a:	4618      	mov	r0, r3
 801d30c:	f001 fb04 	bl	801e918 <RFW_Init>
 801d310:	4603      	mov	r3, r0
 801d312:	2b00      	cmp	r3, #0
 801d314:	d002      	beq.n	801d31c <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801d316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d31a:	e0eb      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d31c:	4b18      	ldr	r3, [pc, #96]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d31e:	2200      	movs	r2, #0
 801d320:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801d322:	4b17      	ldr	r3, [pc, #92]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d324:	2201      	movs	r2, #1
 801d326:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d328:	4b15      	ldr	r3, [pc, #84]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d32a:	2200      	movs	r2, #0
 801d32c:	755a      	strb	r2, [r3, #21]
        {
 801d32e:	e00b      	b.n	801d348 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d330:	68bb      	ldr	r3, [r7, #8]
 801d332:	7d5a      	ldrb	r2, [r3, #21]
 801d334:	4b12      	ldr	r3, [pc, #72]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d336:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d338:	68bb      	ldr	r3, [r7, #8]
 801d33a:	7d9a      	ldrb	r2, [r3, #22]
 801d33c:	4b10      	ldr	r3, [pc, #64]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d33e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d340:	68bb      	ldr	r3, [r7, #8]
 801d342:	7d1a      	ldrb	r2, [r3, #20]
 801d344:	4b0e      	ldr	r3, [pc, #56]	; (801d380 <RadioSetTxGenericConfig+0x2e4>)
 801d346:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801d348:	f7fe fffb 	bl	801c342 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d34c:	2000      	movs	r0, #0
 801d34e:	f7fe f98f 	bl	801b670 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d352:	480e      	ldr	r0, [pc, #56]	; (801d38c <RadioSetTxGenericConfig+0x2f0>)
 801d354:	f000 fdec 	bl	801df30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d358:	480d      	ldr	r0, [pc, #52]	; (801d390 <RadioSetTxGenericConfig+0x2f4>)
 801d35a:	f000 febb 	bl	801e0d4 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d35e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801d362:	4618      	mov	r0, r3
 801d364:	f000 f97f 	bl	801d666 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d368:	68bb      	ldr	r3, [r7, #8]
 801d36a:	8a1b      	ldrh	r3, [r3, #16]
 801d36c:	4618      	mov	r0, r3
 801d36e:	f000 f9c9 	bl	801d704 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801d372:	68bb      	ldr	r3, [r7, #8]
 801d374:	899b      	ldrh	r3, [r3, #12]
 801d376:	4618      	mov	r0, r3
 801d378:	f000 f9a4 	bl	801d6c4 <SUBGRF_SetCrcPolynomial>
        break;
 801d37c:	e0a6      	b.n	801d4cc <RadioSetTxGenericConfig+0x430>
 801d37e:	bf00      	nop
 801d380:	20001b7c 	.word	0x20001b7c
 801d384:	20001b78 	.word	0x20001b78
 801d388:	20001bd8 	.word	0x20001bd8
 801d38c:	20001bb4 	.word	0x20001bb4
 801d390:	20001b8a 	.word	0x20001b8a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d394:	4b59      	ldr	r3, [pc, #356]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d396:	2201      	movs	r2, #1
 801d398:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d39c:	68bb      	ldr	r3, [r7, #8]
 801d39e:	781a      	ldrb	r2, [r3, #0]
 801d3a0:	4b56      	ldr	r3, [pc, #344]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d3a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d3a6:	68bb      	ldr	r3, [r7, #8]
 801d3a8:	785a      	ldrb	r2, [r3, #1]
 801d3aa:	4b54      	ldr	r3, [pc, #336]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d3ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	789a      	ldrb	r2, [r3, #2]
 801d3b4:	4b51      	ldr	r3, [pc, #324]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d3b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d3ba:	68bb      	ldr	r3, [r7, #8]
 801d3bc:	78db      	ldrb	r3, [r3, #3]
 801d3be:	2b02      	cmp	r3, #2
 801d3c0:	d010      	beq.n	801d3e4 <RadioSetTxGenericConfig+0x348>
 801d3c2:	2b02      	cmp	r3, #2
 801d3c4:	dc20      	bgt.n	801d408 <RadioSetTxGenericConfig+0x36c>
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d002      	beq.n	801d3d0 <RadioSetTxGenericConfig+0x334>
 801d3ca:	2b01      	cmp	r3, #1
 801d3cc:	d005      	beq.n	801d3da <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801d3ce:	e01b      	b.n	801d408 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d3d0:	4b4a      	ldr	r3, [pc, #296]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d3d2:	2200      	movs	r2, #0
 801d3d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d3d8:	e017      	b.n	801d40a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d3da:	4b48      	ldr	r3, [pc, #288]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d3dc:	2201      	movs	r2, #1
 801d3de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d3e2:	e012      	b.n	801d40a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d3e4:	68bb      	ldr	r3, [r7, #8]
 801d3e6:	781b      	ldrb	r3, [r3, #0]
 801d3e8:	2b0b      	cmp	r3, #11
 801d3ea:	d003      	beq.n	801d3f4 <RadioSetTxGenericConfig+0x358>
 801d3ec:	68bb      	ldr	r3, [r7, #8]
 801d3ee:	781b      	ldrb	r3, [r3, #0]
 801d3f0:	2b0c      	cmp	r3, #12
 801d3f2:	d104      	bne.n	801d3fe <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d3f4:	4b41      	ldr	r3, [pc, #260]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d3f6:	2201      	movs	r2, #1
 801d3f8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d3fc:	e005      	b.n	801d40a <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d3fe:	4b3f      	ldr	r3, [pc, #252]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d400:	2200      	movs	r2, #0
 801d402:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d406:	e000      	b.n	801d40a <RadioSetTxGenericConfig+0x36e>
            break;
 801d408:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d40a:	4b3c      	ldr	r3, [pc, #240]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d40c:	2201      	movs	r2, #1
 801d40e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d410:	68bb      	ldr	r3, [r7, #8]
 801d412:	889a      	ldrh	r2, [r3, #4]
 801d414:	4b39      	ldr	r3, [pc, #228]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d416:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d418:	68bb      	ldr	r3, [r7, #8]
 801d41a:	799a      	ldrb	r2, [r3, #6]
 801d41c:	4b37      	ldr	r3, [pc, #220]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d41e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d420:	68bb      	ldr	r3, [r7, #8]
 801d422:	79da      	ldrb	r2, [r3, #7]
 801d424:	4b35      	ldr	r3, [pc, #212]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d426:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d42a:	68bb      	ldr	r3, [r7, #8]
 801d42c:	7a1a      	ldrb	r2, [r3, #8]
 801d42e:	4b33      	ldr	r3, [pc, #204]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d430:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801d434:	f7fe ff85 	bl	801c342 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d438:	2001      	movs	r0, #1
 801d43a:	f7fe f919 	bl	801b670 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d43e:	4830      	ldr	r0, [pc, #192]	; (801d500 <RadioSetTxGenericConfig+0x464>)
 801d440:	f000 fd76 	bl	801df30 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d444:	482f      	ldr	r0, [pc, #188]	; (801d504 <RadioSetTxGenericConfig+0x468>)
 801d446:	f000 fe45 	bl	801e0d4 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d44a:	4b2c      	ldr	r3, [pc, #176]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d44c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d450:	2b06      	cmp	r3, #6
 801d452:	d10d      	bne.n	801d470 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801d454:	f640 0089 	movw	r0, #2185	; 0x889
 801d458:	f000 ff98 	bl	801e38c <SUBGRF_ReadRegister>
 801d45c:	4603      	mov	r3, r0
 801d45e:	f023 0304 	bic.w	r3, r3, #4
 801d462:	b2db      	uxtb	r3, r3
 801d464:	4619      	mov	r1, r3
 801d466:	f640 0089 	movw	r0, #2185	; 0x889
 801d46a:	f000 ff7b 	bl	801e364 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801d46e:	e02d      	b.n	801d4cc <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801d470:	f640 0089 	movw	r0, #2185	; 0x889
 801d474:	f000 ff8a 	bl	801e38c <SUBGRF_ReadRegister>
 801d478:	4603      	mov	r3, r0
 801d47a:	f043 0304 	orr.w	r3, r3, #4
 801d47e:	b2db      	uxtb	r3, r3
 801d480:	4619      	mov	r1, r3
 801d482:	f640 0089 	movw	r0, #2185	; 0x889
 801d486:	f000 ff6d 	bl	801e364 <SUBGRF_WriteRegister>
        break;
 801d48a:	e01f      	b.n	801d4cc <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d48c:	68bb      	ldr	r3, [r7, #8]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	2b00      	cmp	r3, #0
 801d492:	d004      	beq.n	801d49e <RadioSetTxGenericConfig+0x402>
 801d494:	68bb      	ldr	r3, [r7, #8]
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d49c:	d902      	bls.n	801d4a4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801d49e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4a2:	e027      	b.n	801d4f4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801d4a4:	2003      	movs	r0, #3
 801d4a6:	f7fe f8e3 	bl	801b670 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d4aa:	4b14      	ldr	r3, [pc, #80]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d4ac:	2202      	movs	r2, #2
 801d4ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	4a11      	ldr	r2, [pc, #68]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d4b8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d4ba:	4b10      	ldr	r3, [pc, #64]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d4bc:	2216      	movs	r2, #22
 801d4be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d4c2:	480f      	ldr	r0, [pc, #60]	; (801d500 <RadioSetTxGenericConfig+0x464>)
 801d4c4:	f000 fd34 	bl	801df30 <SUBGRF_SetModulationParams>
        break;
 801d4c8:	e000      	b.n	801d4cc <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801d4ca:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d4cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d4d0:	4618      	mov	r0, r3
 801d4d2:	f001 f863 	bl	801e59c <SUBGRF_SetRfTxPower>
 801d4d6:	4603      	mov	r3, r0
 801d4d8:	461a      	mov	r2, r3
 801d4da:	4b08      	ldr	r3, [pc, #32]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d4dc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d4e0:	4b06      	ldr	r3, [pc, #24]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d4e2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d4e6:	4618      	mov	r0, r3
 801d4e8:	f001 fa37 	bl	801e95a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d4ec:	4a03      	ldr	r2, [pc, #12]	; (801d4fc <RadioSetTxGenericConfig+0x460>)
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	6053      	str	r3, [r2, #4]
    return 0;
 801d4f2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	3738      	adds	r7, #56	; 0x38
 801d4f8:	46bd      	mov	sp, r7
 801d4fa:	bd80      	pop	{r7, pc}
 801d4fc:	20001b7c 	.word	0x20001b7c
 801d500:	20001bb4 	.word	0x20001bb4
 801d504:	20001b8a 	.word	0x20001b8a

0801d508 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801d508:	b480      	push	{r7}
 801d50a:	b085      	sub	sp, #20
 801d50c:	af00      	add	r7, sp, #0
 801d50e:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d510:	2301      	movs	r3, #1
 801d512:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801d514:	7bfb      	ldrb	r3, [r7, #15]
}
 801d516:	4618      	mov	r0, r3
 801d518:	3714      	adds	r7, #20
 801d51a:	46bd      	mov	sp, r7
 801d51c:	bc80      	pop	{r7}
 801d51e:	4770      	bx	lr

0801d520 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801d520:	b480      	push	{r7}
 801d522:	b083      	sub	sp, #12
 801d524:	af00      	add	r7, sp, #0
 801d526:	6078      	str	r0, [r7, #4]
 801d528:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801d52a:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801d52c:	4618      	mov	r0, r3
 801d52e:	370c      	adds	r7, #12
 801d530:	46bd      	mov	sp, r7
 801d532:	bc80      	pop	{r7}
 801d534:	4770      	bx	lr
	...

0801d538 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801d538:	b580      	push	{r7, lr}
 801d53a:	b084      	sub	sp, #16
 801d53c:	af00      	add	r7, sp, #0
 801d53e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801d540:	687b      	ldr	r3, [r7, #4]
 801d542:	2b00      	cmp	r3, #0
 801d544:	d002      	beq.n	801d54c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801d546:	4a1d      	ldr	r2, [pc, #116]	; (801d5bc <SUBGRF_Init+0x84>)
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801d54c:	f7e4 fdfa 	bl	8002144 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d550:	2002      	movs	r0, #2
 801d552:	f001 f8ff 	bl	801e754 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801d556:	4b1a      	ldr	r3, [pc, #104]	; (801d5c0 <SUBGRF_Init+0x88>)
 801d558:	2200      	movs	r2, #0
 801d55a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801d55c:	2000      	movs	r0, #0
 801d55e:	f000 f97d 	bl	801d85c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801d562:	f7ef ff73 	bl	800d44c <RBI_IsTCXO>
 801d566:	4603      	mov	r3, r0
 801d568:	2b01      	cmp	r3, #1
 801d56a:	d10e      	bne.n	801d58a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801d56c:	2140      	movs	r1, #64	; 0x40
 801d56e:	2001      	movs	r0, #1
 801d570:	f000 fb82 	bl	801dc78 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801d574:	2100      	movs	r1, #0
 801d576:	f640 1011 	movw	r0, #2321	; 0x911
 801d57a:	f000 fef3 	bl	801e364 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801d57e:	237f      	movs	r3, #127	; 0x7f
 801d580:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801d582:	7b38      	ldrb	r0, [r7, #12]
 801d584:	f000 fa8b 	bl	801da9e <SUBGRF_Calibrate>
 801d588:	e009      	b.n	801d59e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d58a:	2120      	movs	r1, #32
 801d58c:	f640 1011 	movw	r0, #2321	; 0x911
 801d590:	f000 fee8 	bl	801e364 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d594:	2120      	movs	r1, #32
 801d596:	f640 1012 	movw	r0, #2322	; 0x912
 801d59a:	f000 fee3 	bl	801e364 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801d59e:	210e      	movs	r1, #14
 801d5a0:	f640 101f 	movw	r0, #2335	; 0x91f
 801d5a4:	f000 fede 	bl	801e364 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801d5a8:	f7ef ff34 	bl	800d414 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801d5ac:	4b05      	ldr	r3, [pc, #20]	; (801d5c4 <SUBGRF_Init+0x8c>)
 801d5ae:	2201      	movs	r2, #1
 801d5b0:	701a      	strb	r2, [r3, #0]
}
 801d5b2:	bf00      	nop
 801d5b4:	3710      	adds	r7, #16
 801d5b6:	46bd      	mov	sp, r7
 801d5b8:	bd80      	pop	{r7, pc}
 801d5ba:	bf00      	nop
 801d5bc:	20001c14 	.word	0x20001c14
 801d5c0:	20001c10 	.word	0x20001c10
 801d5c4:	20001c08 	.word	0x20001c08

0801d5c8 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801d5c8:	b480      	push	{r7}
 801d5ca:	af00      	add	r7, sp, #0
    return OperatingMode;
 801d5cc:	4b02      	ldr	r3, [pc, #8]	; (801d5d8 <SUBGRF_GetOperatingMode+0x10>)
 801d5ce:	781b      	ldrb	r3, [r3, #0]
}
 801d5d0:	4618      	mov	r0, r3
 801d5d2:	46bd      	mov	sp, r7
 801d5d4:	bc80      	pop	{r7}
 801d5d6:	4770      	bx	lr
 801d5d8:	20001c08 	.word	0x20001c08

0801d5dc <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801d5dc:	b580      	push	{r7, lr}
 801d5de:	b082      	sub	sp, #8
 801d5e0:	af00      	add	r7, sp, #0
 801d5e2:	6078      	str	r0, [r7, #4]
 801d5e4:	460b      	mov	r3, r1
 801d5e6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801d5e8:	78fb      	ldrb	r3, [r7, #3]
 801d5ea:	461a      	mov	r2, r3
 801d5ec:	6879      	ldr	r1, [r7, #4]
 801d5ee:	2000      	movs	r0, #0
 801d5f0:	f000 ff24 	bl	801e43c <SUBGRF_WriteBuffer>
}
 801d5f4:	bf00      	nop
 801d5f6:	3708      	adds	r7, #8
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bd80      	pop	{r7, pc}

0801d5fc <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801d5fc:	b580      	push	{r7, lr}
 801d5fe:	b086      	sub	sp, #24
 801d600:	af00      	add	r7, sp, #0
 801d602:	60f8      	str	r0, [r7, #12]
 801d604:	60b9      	str	r1, [r7, #8]
 801d606:	4613      	mov	r3, r2
 801d608:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801d60a:	2300      	movs	r3, #0
 801d60c:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801d60e:	f107 0317 	add.w	r3, r7, #23
 801d612:	4619      	mov	r1, r3
 801d614:	68b8      	ldr	r0, [r7, #8]
 801d616:	f000 fe27 	bl	801e268 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801d61a:	68bb      	ldr	r3, [r7, #8]
 801d61c:	781b      	ldrb	r3, [r3, #0]
 801d61e:	79fa      	ldrb	r2, [r7, #7]
 801d620:	429a      	cmp	r2, r3
 801d622:	d201      	bcs.n	801d628 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801d624:	2301      	movs	r3, #1
 801d626:	e007      	b.n	801d638 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801d628:	7df8      	ldrb	r0, [r7, #23]
 801d62a:	68bb      	ldr	r3, [r7, #8]
 801d62c:	781b      	ldrb	r3, [r3, #0]
 801d62e:	461a      	mov	r2, r3
 801d630:	68f9      	ldr	r1, [r7, #12]
 801d632:	f000 ff25 	bl	801e480 <SUBGRF_ReadBuffer>

    return 0;
 801d636:	2300      	movs	r3, #0
}
 801d638:	4618      	mov	r0, r3
 801d63a:	3718      	adds	r7, #24
 801d63c:	46bd      	mov	sp, r7
 801d63e:	bd80      	pop	{r7, pc}

0801d640 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801d640:	b580      	push	{r7, lr}
 801d642:	b084      	sub	sp, #16
 801d644:	af00      	add	r7, sp, #0
 801d646:	60f8      	str	r0, [r7, #12]
 801d648:	460b      	mov	r3, r1
 801d64a:	607a      	str	r2, [r7, #4]
 801d64c:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801d64e:	7afb      	ldrb	r3, [r7, #11]
 801d650:	4619      	mov	r1, r3
 801d652:	68f8      	ldr	r0, [r7, #12]
 801d654:	f7ff ffc2 	bl	801d5dc <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801d658:	6878      	ldr	r0, [r7, #4]
 801d65a:	f000 f91b 	bl	801d894 <SUBGRF_SetTx>
}
 801d65e:	bf00      	nop
 801d660:	3710      	adds	r7, #16
 801d662:	46bd      	mov	sp, r7
 801d664:	bd80      	pop	{r7, pc}

0801d666 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801d666:	b580      	push	{r7, lr}
 801d668:	b082      	sub	sp, #8
 801d66a:	af00      	add	r7, sp, #0
 801d66c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801d66e:	2208      	movs	r2, #8
 801d670:	6879      	ldr	r1, [r7, #4]
 801d672:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801d676:	f000 fe9d 	bl	801e3b4 <SUBGRF_WriteRegisters>
    return 0;
 801d67a:	2300      	movs	r3, #0
}
 801d67c:	4618      	mov	r0, r3
 801d67e:	3708      	adds	r7, #8
 801d680:	46bd      	mov	sp, r7
 801d682:	bd80      	pop	{r7, pc}

0801d684 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801d684:	b580      	push	{r7, lr}
 801d686:	b084      	sub	sp, #16
 801d688:	af00      	add	r7, sp, #0
 801d68a:	4603      	mov	r3, r0
 801d68c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801d68e:	88fb      	ldrh	r3, [r7, #6]
 801d690:	0a1b      	lsrs	r3, r3, #8
 801d692:	b29b      	uxth	r3, r3
 801d694:	b2db      	uxtb	r3, r3
 801d696:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801d698:	88fb      	ldrh	r3, [r7, #6]
 801d69a:	b2db      	uxtb	r3, r3
 801d69c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d69e:	f000 fb6f 	bl	801dd80 <SUBGRF_GetPacketType>
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	d108      	bne.n	801d6ba <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801d6a8:	f107 030c 	add.w	r3, r7, #12
 801d6ac:	2202      	movs	r2, #2
 801d6ae:	4619      	mov	r1, r3
 801d6b0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801d6b4:	f000 fe7e 	bl	801e3b4 <SUBGRF_WriteRegisters>
            break;
 801d6b8:	e000      	b.n	801d6bc <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801d6ba:	bf00      	nop
    }
}
 801d6bc:	bf00      	nop
 801d6be:	3710      	adds	r7, #16
 801d6c0:	46bd      	mov	sp, r7
 801d6c2:	bd80      	pop	{r7, pc}

0801d6c4 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801d6c4:	b580      	push	{r7, lr}
 801d6c6:	b084      	sub	sp, #16
 801d6c8:	af00      	add	r7, sp, #0
 801d6ca:	4603      	mov	r3, r0
 801d6cc:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801d6ce:	88fb      	ldrh	r3, [r7, #6]
 801d6d0:	0a1b      	lsrs	r3, r3, #8
 801d6d2:	b29b      	uxth	r3, r3
 801d6d4:	b2db      	uxtb	r3, r3
 801d6d6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801d6d8:	88fb      	ldrh	r3, [r7, #6]
 801d6da:	b2db      	uxtb	r3, r3
 801d6dc:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d6de:	f000 fb4f 	bl	801dd80 <SUBGRF_GetPacketType>
 801d6e2:	4603      	mov	r3, r0
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d108      	bne.n	801d6fa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801d6e8:	f107 030c 	add.w	r3, r7, #12
 801d6ec:	2202      	movs	r2, #2
 801d6ee:	4619      	mov	r1, r3
 801d6f0:	f240 60be 	movw	r0, #1726	; 0x6be
 801d6f4:	f000 fe5e 	bl	801e3b4 <SUBGRF_WriteRegisters>
            break;
 801d6f8:	e000      	b.n	801d6fc <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801d6fa:	bf00      	nop
    }
}
 801d6fc:	bf00      	nop
 801d6fe:	3710      	adds	r7, #16
 801d700:	46bd      	mov	sp, r7
 801d702:	bd80      	pop	{r7, pc}

0801d704 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801d704:	b580      	push	{r7, lr}
 801d706:	b084      	sub	sp, #16
 801d708:	af00      	add	r7, sp, #0
 801d70a:	4603      	mov	r3, r0
 801d70c:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801d70e:	2300      	movs	r3, #0
 801d710:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801d712:	f000 fb35 	bl	801dd80 <SUBGRF_GetPacketType>
 801d716:	4603      	mov	r3, r0
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d121      	bne.n	801d760 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801d71c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d720:	f000 fe34 	bl	801e38c <SUBGRF_ReadRegister>
 801d724:	4603      	mov	r3, r0
 801d726:	f023 0301 	bic.w	r3, r3, #1
 801d72a:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801d72c:	88fb      	ldrh	r3, [r7, #6]
 801d72e:	0a1b      	lsrs	r3, r3, #8
 801d730:	b29b      	uxth	r3, r3
 801d732:	b25b      	sxtb	r3, r3
 801d734:	f003 0301 	and.w	r3, r3, #1
 801d738:	b25a      	sxtb	r2, r3
 801d73a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d73e:	4313      	orrs	r3, r2
 801d740:	b25b      	sxtb	r3, r3
 801d742:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801d744:	7bfb      	ldrb	r3, [r7, #15]
 801d746:	4619      	mov	r1, r3
 801d748:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d74c:	f000 fe0a 	bl	801e364 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801d750:	88fb      	ldrh	r3, [r7, #6]
 801d752:	b2db      	uxtb	r3, r3
 801d754:	4619      	mov	r1, r3
 801d756:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801d75a:	f000 fe03 	bl	801e364 <SUBGRF_WriteRegister>
            break;
 801d75e:	e000      	b.n	801d762 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801d760:	bf00      	nop
    }
}
 801d762:	bf00      	nop
 801d764:	3710      	adds	r7, #16
 801d766:	46bd      	mov	sp, r7
 801d768:	bd80      	pop	{r7, pc}

0801d76a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801d76a:	b580      	push	{r7, lr}
 801d76c:	b082      	sub	sp, #8
 801d76e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801d770:	2300      	movs	r3, #0
 801d772:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801d774:	2300      	movs	r3, #0
 801d776:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801d778:	2300      	movs	r3, #0
 801d77a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801d77c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d780:	f000 fe04 	bl	801e38c <SUBGRF_ReadRegister>
 801d784:	4603      	mov	r3, r0
 801d786:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801d788:	79fb      	ldrb	r3, [r7, #7]
 801d78a:	f023 0301 	bic.w	r3, r3, #1
 801d78e:	b2db      	uxtb	r3, r3
 801d790:	4619      	mov	r1, r3
 801d792:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d796:	f000 fde5 	bl	801e364 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801d79a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d79e:	f000 fdf5 	bl	801e38c <SUBGRF_ReadRegister>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801d7a6:	79bb      	ldrb	r3, [r7, #6]
 801d7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d7ac:	b2db      	uxtb	r3, r3
 801d7ae:	4619      	mov	r1, r3
 801d7b0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d7b4:	f000 fdd6 	bl	801e364 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801d7b8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801d7bc:	f000 f88a 	bl	801d8d4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801d7c0:	463b      	mov	r3, r7
 801d7c2:	2204      	movs	r2, #4
 801d7c4:	4619      	mov	r1, r3
 801d7c6:	f640 0019 	movw	r0, #2073	; 0x819
 801d7ca:	f000 fe15 	bl	801e3f8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801d7ce:	2000      	movs	r0, #0
 801d7d0:	f000 f844 	bl	801d85c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801d7d4:	79fb      	ldrb	r3, [r7, #7]
 801d7d6:	4619      	mov	r1, r3
 801d7d8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d7dc:	f000 fdc2 	bl	801e364 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801d7e0:	79bb      	ldrb	r3, [r7, #6]
 801d7e2:	4619      	mov	r1, r3
 801d7e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d7e8:	f000 fdbc 	bl	801e364 <SUBGRF_WriteRegister>

    return number;
 801d7ec:	683b      	ldr	r3, [r7, #0]
}
 801d7ee:	4618      	mov	r0, r3
 801d7f0:	3708      	adds	r7, #8
 801d7f2:	46bd      	mov	sp, r7
 801d7f4:	bd80      	pop	{r7, pc}
	...

0801d7f8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	b084      	sub	sp, #16
 801d7fc:	af00      	add	r7, sp, #0
 801d7fe:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801d800:	2000      	movs	r0, #0
 801d802:	f7ef fe0e 	bl	800d422 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d806:	2002      	movs	r0, #2
 801d808:	f000 ffa4 	bl	801e754 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d80c:	793b      	ldrb	r3, [r7, #4]
 801d80e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801d812:	b2db      	uxtb	r3, r3
 801d814:	009b      	lsls	r3, r3, #2
 801d816:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801d818:	793b      	ldrb	r3, [r7, #4]
 801d81a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801d81e:	b2db      	uxtb	r3, r3
 801d820:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d822:	b25b      	sxtb	r3, r3
 801d824:	4313      	orrs	r3, r2
 801d826:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801d828:	793b      	ldrb	r3, [r7, #4]
 801d82a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d82e:	b2db      	uxtb	r3, r3
 801d830:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801d832:	4313      	orrs	r3, r2
 801d834:	b25b      	sxtb	r3, r3
 801d836:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d838:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801d83a:	f107 030f 	add.w	r3, r7, #15
 801d83e:	2201      	movs	r2, #1
 801d840:	4619      	mov	r1, r3
 801d842:	2084      	movs	r0, #132	; 0x84
 801d844:	f000 fe3e 	bl	801e4c4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801d848:	4b03      	ldr	r3, [pc, #12]	; (801d858 <SUBGRF_SetSleep+0x60>)
 801d84a:	2200      	movs	r2, #0
 801d84c:	701a      	strb	r2, [r3, #0]
}
 801d84e:	bf00      	nop
 801d850:	3710      	adds	r7, #16
 801d852:	46bd      	mov	sp, r7
 801d854:	bd80      	pop	{r7, pc}
 801d856:	bf00      	nop
 801d858:	20001c08 	.word	0x20001c08

0801d85c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801d85c:	b580      	push	{r7, lr}
 801d85e:	b082      	sub	sp, #8
 801d860:	af00      	add	r7, sp, #0
 801d862:	4603      	mov	r3, r0
 801d864:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801d866:	1dfb      	adds	r3, r7, #7
 801d868:	2201      	movs	r2, #1
 801d86a:	4619      	mov	r1, r3
 801d86c:	2080      	movs	r0, #128	; 0x80
 801d86e:	f000 fe29 	bl	801e4c4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801d872:	79fb      	ldrb	r3, [r7, #7]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d103      	bne.n	801d880 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801d878:	4b05      	ldr	r3, [pc, #20]	; (801d890 <SUBGRF_SetStandby+0x34>)
 801d87a:	2201      	movs	r2, #1
 801d87c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801d87e:	e002      	b.n	801d886 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801d880:	4b03      	ldr	r3, [pc, #12]	; (801d890 <SUBGRF_SetStandby+0x34>)
 801d882:	2202      	movs	r2, #2
 801d884:	701a      	strb	r2, [r3, #0]
}
 801d886:	bf00      	nop
 801d888:	3708      	adds	r7, #8
 801d88a:	46bd      	mov	sp, r7
 801d88c:	bd80      	pop	{r7, pc}
 801d88e:	bf00      	nop
 801d890:	20001c08 	.word	0x20001c08

0801d894 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b084      	sub	sp, #16
 801d898:	af00      	add	r7, sp, #0
 801d89a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801d89c:	4b0c      	ldr	r3, [pc, #48]	; (801d8d0 <SUBGRF_SetTx+0x3c>)
 801d89e:	2204      	movs	r2, #4
 801d8a0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	0c1b      	lsrs	r3, r3, #16
 801d8a6:	b2db      	uxtb	r3, r3
 801d8a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	0a1b      	lsrs	r3, r3, #8
 801d8ae:	b2db      	uxtb	r3, r3
 801d8b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d8b2:	687b      	ldr	r3, [r7, #4]
 801d8b4:	b2db      	uxtb	r3, r3
 801d8b6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801d8b8:	f107 030c 	add.w	r3, r7, #12
 801d8bc:	2203      	movs	r2, #3
 801d8be:	4619      	mov	r1, r3
 801d8c0:	2083      	movs	r0, #131	; 0x83
 801d8c2:	f000 fdff 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801d8c6:	bf00      	nop
 801d8c8:	3710      	adds	r7, #16
 801d8ca:	46bd      	mov	sp, r7
 801d8cc:	bd80      	pop	{r7, pc}
 801d8ce:	bf00      	nop
 801d8d0:	20001c08 	.word	0x20001c08

0801d8d4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b084      	sub	sp, #16
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801d8dc:	4b0c      	ldr	r3, [pc, #48]	; (801d910 <SUBGRF_SetRx+0x3c>)
 801d8de:	2205      	movs	r2, #5
 801d8e0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	0c1b      	lsrs	r3, r3, #16
 801d8e6:	b2db      	uxtb	r3, r3
 801d8e8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	0a1b      	lsrs	r3, r3, #8
 801d8ee:	b2db      	uxtb	r3, r3
 801d8f0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	b2db      	uxtb	r3, r3
 801d8f6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801d8f8:	f107 030c 	add.w	r3, r7, #12
 801d8fc:	2203      	movs	r2, #3
 801d8fe:	4619      	mov	r1, r3
 801d900:	2082      	movs	r0, #130	; 0x82
 801d902:	f000 fddf 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801d906:	bf00      	nop
 801d908:	3710      	adds	r7, #16
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bd80      	pop	{r7, pc}
 801d90e:	bf00      	nop
 801d910:	20001c08 	.word	0x20001c08

0801d914 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b084      	sub	sp, #16
 801d918:	af00      	add	r7, sp, #0
 801d91a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801d91c:	4b0e      	ldr	r3, [pc, #56]	; (801d958 <SUBGRF_SetRxBoosted+0x44>)
 801d91e:	2205      	movs	r2, #5
 801d920:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801d922:	2197      	movs	r1, #151	; 0x97
 801d924:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801d928:	f000 fd1c 	bl	801e364 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d92c:	687b      	ldr	r3, [r7, #4]
 801d92e:	0c1b      	lsrs	r3, r3, #16
 801d930:	b2db      	uxtb	r3, r3
 801d932:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	0a1b      	lsrs	r3, r3, #8
 801d938:	b2db      	uxtb	r3, r3
 801d93a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	b2db      	uxtb	r3, r3
 801d940:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801d942:	f107 030c 	add.w	r3, r7, #12
 801d946:	2203      	movs	r2, #3
 801d948:	4619      	mov	r1, r3
 801d94a:	2082      	movs	r0, #130	; 0x82
 801d94c:	f000 fdba 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801d950:	bf00      	nop
 801d952:	3710      	adds	r7, #16
 801d954:	46bd      	mov	sp, r7
 801d956:	bd80      	pop	{r7, pc}
 801d958:	20001c08 	.word	0x20001c08

0801d95c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801d95c:	b580      	push	{r7, lr}
 801d95e:	b084      	sub	sp, #16
 801d960:	af00      	add	r7, sp, #0
 801d962:	6078      	str	r0, [r7, #4]
 801d964:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	0c1b      	lsrs	r3, r3, #16
 801d96a:	b2db      	uxtb	r3, r3
 801d96c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801d96e:	687b      	ldr	r3, [r7, #4]
 801d970:	0a1b      	lsrs	r3, r3, #8
 801d972:	b2db      	uxtb	r3, r3
 801d974:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801d976:	687b      	ldr	r3, [r7, #4]
 801d978:	b2db      	uxtb	r3, r3
 801d97a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801d97c:	683b      	ldr	r3, [r7, #0]
 801d97e:	0c1b      	lsrs	r3, r3, #16
 801d980:	b2db      	uxtb	r3, r3
 801d982:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801d984:	683b      	ldr	r3, [r7, #0]
 801d986:	0a1b      	lsrs	r3, r3, #8
 801d988:	b2db      	uxtb	r3, r3
 801d98a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801d98c:	683b      	ldr	r3, [r7, #0]
 801d98e:	b2db      	uxtb	r3, r3
 801d990:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801d992:	f107 0308 	add.w	r3, r7, #8
 801d996:	2206      	movs	r2, #6
 801d998:	4619      	mov	r1, r3
 801d99a:	2094      	movs	r0, #148	; 0x94
 801d99c:	f000 fd92 	bl	801e4c4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801d9a0:	4b03      	ldr	r3, [pc, #12]	; (801d9b0 <SUBGRF_SetRxDutyCycle+0x54>)
 801d9a2:	2206      	movs	r2, #6
 801d9a4:	701a      	strb	r2, [r3, #0]
}
 801d9a6:	bf00      	nop
 801d9a8:	3710      	adds	r7, #16
 801d9aa:	46bd      	mov	sp, r7
 801d9ac:	bd80      	pop	{r7, pc}
 801d9ae:	bf00      	nop
 801d9b0:	20001c08 	.word	0x20001c08

0801d9b4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801d9b8:	2200      	movs	r2, #0
 801d9ba:	2100      	movs	r1, #0
 801d9bc:	20c5      	movs	r0, #197	; 0xc5
 801d9be:	f000 fd81 	bl	801e4c4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801d9c2:	4b02      	ldr	r3, [pc, #8]	; (801d9cc <SUBGRF_SetCad+0x18>)
 801d9c4:	2207      	movs	r2, #7
 801d9c6:	701a      	strb	r2, [r3, #0]
}
 801d9c8:	bf00      	nop
 801d9ca:	bd80      	pop	{r7, pc}
 801d9cc:	20001c08 	.word	0x20001c08

0801d9d0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801d9d0:	b580      	push	{r7, lr}
 801d9d2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801d9d4:	2200      	movs	r2, #0
 801d9d6:	2100      	movs	r1, #0
 801d9d8:	20d1      	movs	r0, #209	; 0xd1
 801d9da:	f000 fd73 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801d9de:	bf00      	nop
 801d9e0:	bd80      	pop	{r7, pc}

0801d9e2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801d9e2:	b580      	push	{r7, lr}
 801d9e4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801d9e6:	2200      	movs	r2, #0
 801d9e8:	2100      	movs	r1, #0
 801d9ea:	20d2      	movs	r0, #210	; 0xd2
 801d9ec:	f000 fd6a 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801d9f0:	bf00      	nop
 801d9f2:	bd80      	pop	{r7, pc}

0801d9f4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801d9f4:	b580      	push	{r7, lr}
 801d9f6:	b082      	sub	sp, #8
 801d9f8:	af00      	add	r7, sp, #0
 801d9fa:	4603      	mov	r3, r0
 801d9fc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801d9fe:	1dfb      	adds	r3, r7, #7
 801da00:	2201      	movs	r2, #1
 801da02:	4619      	mov	r1, r3
 801da04:	209f      	movs	r0, #159	; 0x9f
 801da06:	f000 fd5d 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801da0a:	bf00      	nop
 801da0c:	3708      	adds	r7, #8
 801da0e:	46bd      	mov	sp, r7
 801da10:	bd80      	pop	{r7, pc}

0801da12 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801da12:	b580      	push	{r7, lr}
 801da14:	b084      	sub	sp, #16
 801da16:	af00      	add	r7, sp, #0
 801da18:	4603      	mov	r3, r0
 801da1a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801da1c:	1dfb      	adds	r3, r7, #7
 801da1e:	2201      	movs	r2, #1
 801da20:	4619      	mov	r1, r3
 801da22:	20a0      	movs	r0, #160	; 0xa0
 801da24:	f000 fd4e 	bl	801e4c4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801da28:	79fb      	ldrb	r3, [r7, #7]
 801da2a:	2b3f      	cmp	r3, #63	; 0x3f
 801da2c:	d91c      	bls.n	801da68 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801da2e:	79fb      	ldrb	r3, [r7, #7]
 801da30:	085b      	lsrs	r3, r3, #1
 801da32:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801da34:	2300      	movs	r3, #0
 801da36:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801da38:	2300      	movs	r3, #0
 801da3a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801da3c:	e005      	b.n	801da4a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801da3e:	7bfb      	ldrb	r3, [r7, #15]
 801da40:	089b      	lsrs	r3, r3, #2
 801da42:	73fb      	strb	r3, [r7, #15]
            exp++;
 801da44:	7bbb      	ldrb	r3, [r7, #14]
 801da46:	3301      	adds	r3, #1
 801da48:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801da4a:	7bfb      	ldrb	r3, [r7, #15]
 801da4c:	2b1f      	cmp	r3, #31
 801da4e:	d8f6      	bhi.n	801da3e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801da50:	7bfb      	ldrb	r3, [r7, #15]
 801da52:	00db      	lsls	r3, r3, #3
 801da54:	b2da      	uxtb	r2, r3
 801da56:	7bbb      	ldrb	r3, [r7, #14]
 801da58:	4413      	add	r3, r2
 801da5a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801da5c:	7b7b      	ldrb	r3, [r7, #13]
 801da5e:	4619      	mov	r1, r3
 801da60:	f240 7006 	movw	r0, #1798	; 0x706
 801da64:	f000 fc7e 	bl	801e364 <SUBGRF_WriteRegister>
    }
}
 801da68:	bf00      	nop
 801da6a:	3710      	adds	r7, #16
 801da6c:	46bd      	mov	sp, r7
 801da6e:	bd80      	pop	{r7, pc}

0801da70 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801da70:	b580      	push	{r7, lr}
 801da72:	b082      	sub	sp, #8
 801da74:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801da76:	f7ef fcf0 	bl	800d45a <RBI_IsDCDC>
 801da7a:	4603      	mov	r3, r0
 801da7c:	2b01      	cmp	r3, #1
 801da7e:	d102      	bne.n	801da86 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801da80:	2301      	movs	r3, #1
 801da82:	71fb      	strb	r3, [r7, #7]
 801da84:	e001      	b.n	801da8a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801da86:	2300      	movs	r3, #0
 801da88:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801da8a:	1dfb      	adds	r3, r7, #7
 801da8c:	2201      	movs	r2, #1
 801da8e:	4619      	mov	r1, r3
 801da90:	2096      	movs	r0, #150	; 0x96
 801da92:	f000 fd17 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801da96:	bf00      	nop
 801da98:	3708      	adds	r7, #8
 801da9a:	46bd      	mov	sp, r7
 801da9c:	bd80      	pop	{r7, pc}

0801da9e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801da9e:	b580      	push	{r7, lr}
 801daa0:	b084      	sub	sp, #16
 801daa2:	af00      	add	r7, sp, #0
 801daa4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801daa6:	793b      	ldrb	r3, [r7, #4]
 801daa8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801daac:	b2db      	uxtb	r3, r3
 801daae:	019b      	lsls	r3, r3, #6
 801dab0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801dab2:	793b      	ldrb	r3, [r7, #4]
 801dab4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801dab8:	b2db      	uxtb	r3, r3
 801daba:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801dabc:	b25b      	sxtb	r3, r3
 801dabe:	4313      	orrs	r3, r2
 801dac0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801dac2:	793b      	ldrb	r3, [r7, #4]
 801dac4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801dac8:	b2db      	uxtb	r3, r3
 801daca:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801dacc:	b25b      	sxtb	r3, r3
 801dace:	4313      	orrs	r3, r2
 801dad0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801dad2:	793b      	ldrb	r3, [r7, #4]
 801dad4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dad8:	b2db      	uxtb	r3, r3
 801dada:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801dadc:	b25b      	sxtb	r3, r3
 801dade:	4313      	orrs	r3, r2
 801dae0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801dae2:	793b      	ldrb	r3, [r7, #4]
 801dae4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801dae8:	b2db      	uxtb	r3, r3
 801daea:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801daec:	b25b      	sxtb	r3, r3
 801daee:	4313      	orrs	r3, r2
 801daf0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801daf2:	793b      	ldrb	r3, [r7, #4]
 801daf4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801daf8:	b2db      	uxtb	r3, r3
 801dafa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801dafc:	b25b      	sxtb	r3, r3
 801dafe:	4313      	orrs	r3, r2
 801db00:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801db02:	793b      	ldrb	r3, [r7, #4]
 801db04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801db08:	b2db      	uxtb	r3, r3
 801db0a:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801db0c:	4313      	orrs	r3, r2
 801db0e:	b25b      	sxtb	r3, r3
 801db10:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801db12:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801db14:	f107 030f 	add.w	r3, r7, #15
 801db18:	2201      	movs	r2, #1
 801db1a:	4619      	mov	r1, r3
 801db1c:	2089      	movs	r0, #137	; 0x89
 801db1e:	f000 fcd1 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801db22:	bf00      	nop
 801db24:	3710      	adds	r7, #16
 801db26:	46bd      	mov	sp, r7
 801db28:	bd80      	pop	{r7, pc}
	...

0801db2c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801db2c:	b580      	push	{r7, lr}
 801db2e:	b084      	sub	sp, #16
 801db30:	af00      	add	r7, sp, #0
 801db32:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	4a1d      	ldr	r2, [pc, #116]	; (801dbac <SUBGRF_CalibrateImage+0x80>)
 801db38:	4293      	cmp	r3, r2
 801db3a:	d904      	bls.n	801db46 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801db3c:	23e1      	movs	r3, #225	; 0xe1
 801db3e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801db40:	23e9      	movs	r3, #233	; 0xe9
 801db42:	737b      	strb	r3, [r7, #13]
 801db44:	e027      	b.n	801db96 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	4a19      	ldr	r2, [pc, #100]	; (801dbb0 <SUBGRF_CalibrateImage+0x84>)
 801db4a:	4293      	cmp	r3, r2
 801db4c:	d904      	bls.n	801db58 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801db4e:	23d7      	movs	r3, #215	; 0xd7
 801db50:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801db52:	23db      	movs	r3, #219	; 0xdb
 801db54:	737b      	strb	r3, [r7, #13]
 801db56:	e01e      	b.n	801db96 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	4a16      	ldr	r2, [pc, #88]	; (801dbb4 <SUBGRF_CalibrateImage+0x88>)
 801db5c:	4293      	cmp	r3, r2
 801db5e:	d904      	bls.n	801db6a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801db60:	23c1      	movs	r3, #193	; 0xc1
 801db62:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801db64:	23c5      	movs	r3, #197	; 0xc5
 801db66:	737b      	strb	r3, [r7, #13]
 801db68:	e015      	b.n	801db96 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801db6a:	687b      	ldr	r3, [r7, #4]
 801db6c:	4a12      	ldr	r2, [pc, #72]	; (801dbb8 <SUBGRF_CalibrateImage+0x8c>)
 801db6e:	4293      	cmp	r3, r2
 801db70:	d904      	bls.n	801db7c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801db72:	2375      	movs	r3, #117	; 0x75
 801db74:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801db76:	2381      	movs	r3, #129	; 0x81
 801db78:	737b      	strb	r3, [r7, #13]
 801db7a:	e00c      	b.n	801db96 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	4a0f      	ldr	r2, [pc, #60]	; (801dbbc <SUBGRF_CalibrateImage+0x90>)
 801db80:	4293      	cmp	r3, r2
 801db82:	d904      	bls.n	801db8e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801db84:	236b      	movs	r3, #107	; 0x6b
 801db86:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801db88:	236f      	movs	r3, #111	; 0x6f
 801db8a:	737b      	strb	r3, [r7, #13]
 801db8c:	e003      	b.n	801db96 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801db8e:	2329      	movs	r3, #41	; 0x29
 801db90:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801db92:	232b      	movs	r3, #43	; 0x2b
 801db94:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801db96:	f107 030c 	add.w	r3, r7, #12
 801db9a:	2202      	movs	r2, #2
 801db9c:	4619      	mov	r1, r3
 801db9e:	2098      	movs	r0, #152	; 0x98
 801dba0:	f000 fc90 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801dba4:	bf00      	nop
 801dba6:	3710      	adds	r7, #16
 801dba8:	46bd      	mov	sp, r7
 801dbaa:	bd80      	pop	{r7, pc}
 801dbac:	35a4e900 	.word	0x35a4e900
 801dbb0:	32a9f880 	.word	0x32a9f880
 801dbb4:	2de54480 	.word	0x2de54480
 801dbb8:	1b6b0b00 	.word	0x1b6b0b00
 801dbbc:	1954fc40 	.word	0x1954fc40

0801dbc0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801dbc0:	b590      	push	{r4, r7, lr}
 801dbc2:	b085      	sub	sp, #20
 801dbc4:	af00      	add	r7, sp, #0
 801dbc6:	4604      	mov	r4, r0
 801dbc8:	4608      	mov	r0, r1
 801dbca:	4611      	mov	r1, r2
 801dbcc:	461a      	mov	r2, r3
 801dbce:	4623      	mov	r3, r4
 801dbd0:	71fb      	strb	r3, [r7, #7]
 801dbd2:	4603      	mov	r3, r0
 801dbd4:	71bb      	strb	r3, [r7, #6]
 801dbd6:	460b      	mov	r3, r1
 801dbd8:	717b      	strb	r3, [r7, #5]
 801dbda:	4613      	mov	r3, r2
 801dbdc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801dbde:	79fb      	ldrb	r3, [r7, #7]
 801dbe0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801dbe2:	79bb      	ldrb	r3, [r7, #6]
 801dbe4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801dbe6:	797b      	ldrb	r3, [r7, #5]
 801dbe8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801dbea:	793b      	ldrb	r3, [r7, #4]
 801dbec:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801dbee:	f107 030c 	add.w	r3, r7, #12
 801dbf2:	2204      	movs	r2, #4
 801dbf4:	4619      	mov	r1, r3
 801dbf6:	2095      	movs	r0, #149	; 0x95
 801dbf8:	f000 fc64 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801dbfc:	bf00      	nop
 801dbfe:	3714      	adds	r7, #20
 801dc00:	46bd      	mov	sp, r7
 801dc02:	bd90      	pop	{r4, r7, pc}

0801dc04 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801dc04:	b590      	push	{r4, r7, lr}
 801dc06:	b085      	sub	sp, #20
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	4604      	mov	r4, r0
 801dc0c:	4608      	mov	r0, r1
 801dc0e:	4611      	mov	r1, r2
 801dc10:	461a      	mov	r2, r3
 801dc12:	4623      	mov	r3, r4
 801dc14:	80fb      	strh	r3, [r7, #6]
 801dc16:	4603      	mov	r3, r0
 801dc18:	80bb      	strh	r3, [r7, #4]
 801dc1a:	460b      	mov	r3, r1
 801dc1c:	807b      	strh	r3, [r7, #2]
 801dc1e:	4613      	mov	r3, r2
 801dc20:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801dc22:	88fb      	ldrh	r3, [r7, #6]
 801dc24:	0a1b      	lsrs	r3, r3, #8
 801dc26:	b29b      	uxth	r3, r3
 801dc28:	b2db      	uxtb	r3, r3
 801dc2a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801dc2c:	88fb      	ldrh	r3, [r7, #6]
 801dc2e:	b2db      	uxtb	r3, r3
 801dc30:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801dc32:	88bb      	ldrh	r3, [r7, #4]
 801dc34:	0a1b      	lsrs	r3, r3, #8
 801dc36:	b29b      	uxth	r3, r3
 801dc38:	b2db      	uxtb	r3, r3
 801dc3a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801dc3c:	88bb      	ldrh	r3, [r7, #4]
 801dc3e:	b2db      	uxtb	r3, r3
 801dc40:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801dc42:	887b      	ldrh	r3, [r7, #2]
 801dc44:	0a1b      	lsrs	r3, r3, #8
 801dc46:	b29b      	uxth	r3, r3
 801dc48:	b2db      	uxtb	r3, r3
 801dc4a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801dc4c:	887b      	ldrh	r3, [r7, #2]
 801dc4e:	b2db      	uxtb	r3, r3
 801dc50:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801dc52:	883b      	ldrh	r3, [r7, #0]
 801dc54:	0a1b      	lsrs	r3, r3, #8
 801dc56:	b29b      	uxth	r3, r3
 801dc58:	b2db      	uxtb	r3, r3
 801dc5a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801dc5c:	883b      	ldrh	r3, [r7, #0]
 801dc5e:	b2db      	uxtb	r3, r3
 801dc60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801dc62:	f107 0308 	add.w	r3, r7, #8
 801dc66:	2208      	movs	r2, #8
 801dc68:	4619      	mov	r1, r3
 801dc6a:	2008      	movs	r0, #8
 801dc6c:	f000 fc2a 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801dc70:	bf00      	nop
 801dc72:	3714      	adds	r7, #20
 801dc74:	46bd      	mov	sp, r7
 801dc76:	bd90      	pop	{r4, r7, pc}

0801dc78 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801dc78:	b580      	push	{r7, lr}
 801dc7a:	b084      	sub	sp, #16
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	4603      	mov	r3, r0
 801dc80:	6039      	str	r1, [r7, #0]
 801dc82:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801dc84:	79fb      	ldrb	r3, [r7, #7]
 801dc86:	f003 0307 	and.w	r3, r3, #7
 801dc8a:	b2db      	uxtb	r3, r3
 801dc8c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dc8e:	683b      	ldr	r3, [r7, #0]
 801dc90:	0c1b      	lsrs	r3, r3, #16
 801dc92:	b2db      	uxtb	r3, r3
 801dc94:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dc96:	683b      	ldr	r3, [r7, #0]
 801dc98:	0a1b      	lsrs	r3, r3, #8
 801dc9a:	b2db      	uxtb	r3, r3
 801dc9c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801dc9e:	683b      	ldr	r3, [r7, #0]
 801dca0:	b2db      	uxtb	r3, r3
 801dca2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801dca4:	f107 030c 	add.w	r3, r7, #12
 801dca8:	2204      	movs	r2, #4
 801dcaa:	4619      	mov	r1, r3
 801dcac:	2097      	movs	r0, #151	; 0x97
 801dcae:	f000 fc09 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801dcb2:	bf00      	nop
 801dcb4:	3710      	adds	r7, #16
 801dcb6:	46bd      	mov	sp, r7
 801dcb8:	bd80      	pop	{r7, pc}
	...

0801dcbc <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801dcbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801dcc0:	b084      	sub	sp, #16
 801dcc2:	af00      	add	r7, sp, #0
 801dcc4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801dcc6:	2300      	movs	r3, #0
 801dcc8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801dcca:	4b1d      	ldr	r3, [pc, #116]	; (801dd40 <SUBGRF_SetRfFrequency+0x84>)
 801dccc:	781b      	ldrb	r3, [r3, #0]
 801dcce:	f083 0301 	eor.w	r3, r3, #1
 801dcd2:	b2db      	uxtb	r3, r3
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d005      	beq.n	801dce4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801dcd8:	6878      	ldr	r0, [r7, #4]
 801dcda:	f7ff ff27 	bl	801db2c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801dcde:	4b18      	ldr	r3, [pc, #96]	; (801dd40 <SUBGRF_SetRfFrequency+0x84>)
 801dce0:	2201      	movs	r2, #1
 801dce2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	2200      	movs	r2, #0
 801dce8:	461c      	mov	r4, r3
 801dcea:	4615      	mov	r5, r2
 801dcec:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801dcf0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801dcf4:	4a13      	ldr	r2, [pc, #76]	; (801dd44 <SUBGRF_SetRfFrequency+0x88>)
 801dcf6:	f04f 0300 	mov.w	r3, #0
 801dcfa:	4640      	mov	r0, r8
 801dcfc:	4649      	mov	r1, r9
 801dcfe:	f7e3 f9b5 	bl	800106c <__aeabi_uldivmod>
 801dd02:	4602      	mov	r2, r0
 801dd04:	460b      	mov	r3, r1
 801dd06:	4613      	mov	r3, r2
 801dd08:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	0e1b      	lsrs	r3, r3, #24
 801dd0e:	b2db      	uxtb	r3, r3
 801dd10:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	0c1b      	lsrs	r3, r3, #16
 801dd16:	b2db      	uxtb	r3, r3
 801dd18:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	0a1b      	lsrs	r3, r3, #8
 801dd1e:	b2db      	uxtb	r3, r3
 801dd20:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	b2db      	uxtb	r3, r3
 801dd26:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801dd28:	f107 0308 	add.w	r3, r7, #8
 801dd2c:	2204      	movs	r2, #4
 801dd2e:	4619      	mov	r1, r3
 801dd30:	2086      	movs	r0, #134	; 0x86
 801dd32:	f000 fbc7 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801dd36:	bf00      	nop
 801dd38:	3710      	adds	r7, #16
 801dd3a:	46bd      	mov	sp, r7
 801dd3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801dd40:	20001c10 	.word	0x20001c10
 801dd44:	01e84800 	.word	0x01e84800

0801dd48 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801dd48:	b580      	push	{r7, lr}
 801dd4a:	b082      	sub	sp, #8
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	4603      	mov	r3, r0
 801dd50:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801dd52:	79fa      	ldrb	r2, [r7, #7]
 801dd54:	4b09      	ldr	r3, [pc, #36]	; (801dd7c <SUBGRF_SetPacketType+0x34>)
 801dd56:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801dd58:	79fb      	ldrb	r3, [r7, #7]
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	d104      	bne.n	801dd68 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801dd5e:	2100      	movs	r1, #0
 801dd60:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801dd64:	f000 fafe 	bl	801e364 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801dd68:	1dfb      	adds	r3, r7, #7
 801dd6a:	2201      	movs	r2, #1
 801dd6c:	4619      	mov	r1, r3
 801dd6e:	208a      	movs	r0, #138	; 0x8a
 801dd70:	f000 fba8 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801dd74:	bf00      	nop
 801dd76:	3708      	adds	r7, #8
 801dd78:	46bd      	mov	sp, r7
 801dd7a:	bd80      	pop	{r7, pc}
 801dd7c:	20001c09 	.word	0x20001c09

0801dd80 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801dd80:	b480      	push	{r7}
 801dd82:	af00      	add	r7, sp, #0
    return PacketType;
 801dd84:	4b02      	ldr	r3, [pc, #8]	; (801dd90 <SUBGRF_GetPacketType+0x10>)
 801dd86:	781b      	ldrb	r3, [r3, #0]
}
 801dd88:	4618      	mov	r0, r3
 801dd8a:	46bd      	mov	sp, r7
 801dd8c:	bc80      	pop	{r7}
 801dd8e:	4770      	bx	lr
 801dd90:	20001c09 	.word	0x20001c09

0801dd94 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801dd94:	b580      	push	{r7, lr}
 801dd96:	b084      	sub	sp, #16
 801dd98:	af00      	add	r7, sp, #0
 801dd9a:	4603      	mov	r3, r0
 801dd9c:	71fb      	strb	r3, [r7, #7]
 801dd9e:	460b      	mov	r3, r1
 801dda0:	71bb      	strb	r3, [r7, #6]
 801dda2:	4613      	mov	r3, r2
 801dda4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801dda6:	79fb      	ldrb	r3, [r7, #7]
 801dda8:	2b01      	cmp	r3, #1
 801ddaa:	d149      	bne.n	801de40 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801ddac:	2000      	movs	r0, #0
 801ddae:	f7ef fb5b 	bl	800d468 <RBI_GetRFOMaxPowerConfig>
 801ddb2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801ddb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ddb8:	68fa      	ldr	r2, [r7, #12]
 801ddba:	429a      	cmp	r2, r3
 801ddbc:	da01      	bge.n	801ddc2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801ddbe:	68fb      	ldr	r3, [r7, #12]
 801ddc0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	2b0e      	cmp	r3, #14
 801ddc6:	d10e      	bne.n	801dde6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801ddc8:	2301      	movs	r3, #1
 801ddca:	2201      	movs	r2, #1
 801ddcc:	2100      	movs	r1, #0
 801ddce:	2004      	movs	r0, #4
 801ddd0:	f7ff fef6 	bl	801dbc0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ddd4:	79ba      	ldrb	r2, [r7, #6]
 801ddd6:	68fb      	ldr	r3, [r7, #12]
 801ddd8:	b2db      	uxtb	r3, r3
 801ddda:	1ad3      	subs	r3, r2, r3
 801dddc:	b2db      	uxtb	r3, r3
 801ddde:	330e      	adds	r3, #14
 801dde0:	b2db      	uxtb	r3, r3
 801dde2:	71bb      	strb	r3, [r7, #6]
 801dde4:	e01f      	b.n	801de26 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801dde6:	68fb      	ldr	r3, [r7, #12]
 801dde8:	2b0a      	cmp	r3, #10
 801ddea:	d10e      	bne.n	801de0a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ddec:	2301      	movs	r3, #1
 801ddee:	2201      	movs	r2, #1
 801ddf0:	2100      	movs	r1, #0
 801ddf2:	2001      	movs	r0, #1
 801ddf4:	f7ff fee4 	bl	801dbc0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801ddf8:	79ba      	ldrb	r2, [r7, #6]
 801ddfa:	68fb      	ldr	r3, [r7, #12]
 801ddfc:	b2db      	uxtb	r3, r3
 801ddfe:	1ad3      	subs	r3, r2, r3
 801de00:	b2db      	uxtb	r3, r3
 801de02:	330d      	adds	r3, #13
 801de04:	b2db      	uxtb	r3, r3
 801de06:	71bb      	strb	r3, [r7, #6]
 801de08:	e00d      	b.n	801de26 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801de0a:	2301      	movs	r3, #1
 801de0c:	2201      	movs	r2, #1
 801de0e:	2100      	movs	r1, #0
 801de10:	2007      	movs	r0, #7
 801de12:	f7ff fed5 	bl	801dbc0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801de16:	79ba      	ldrb	r2, [r7, #6]
 801de18:	68fb      	ldr	r3, [r7, #12]
 801de1a:	b2db      	uxtb	r3, r3
 801de1c:	1ad3      	subs	r3, r2, r3
 801de1e:	b2db      	uxtb	r3, r3
 801de20:	330e      	adds	r3, #14
 801de22:	b2db      	uxtb	r3, r3
 801de24:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801de26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801de2a:	f113 0f11 	cmn.w	r3, #17
 801de2e:	da01      	bge.n	801de34 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801de30:	23ef      	movs	r3, #239	; 0xef
 801de32:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801de34:	2118      	movs	r1, #24
 801de36:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801de3a:	f000 fa93 	bl	801e364 <SUBGRF_WriteRegister>
 801de3e:	e067      	b.n	801df10 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801de40:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801de44:	f000 faa2 	bl	801e38c <SUBGRF_ReadRegister>
 801de48:	4603      	mov	r3, r0
 801de4a:	f043 031e 	orr.w	r3, r3, #30
 801de4e:	b2db      	uxtb	r3, r3
 801de50:	4619      	mov	r1, r3
 801de52:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801de56:	f000 fa85 	bl	801e364 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801de5a:	2001      	movs	r0, #1
 801de5c:	f7ef fb04 	bl	800d468 <RBI_GetRFOMaxPowerConfig>
 801de60:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801de62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801de66:	68fa      	ldr	r2, [r7, #12]
 801de68:	429a      	cmp	r2, r3
 801de6a:	da01      	bge.n	801de70 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801de6c:	68fb      	ldr	r3, [r7, #12]
 801de6e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801de70:	68fb      	ldr	r3, [r7, #12]
 801de72:	2b14      	cmp	r3, #20
 801de74:	d10e      	bne.n	801de94 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801de76:	2301      	movs	r3, #1
 801de78:	2200      	movs	r2, #0
 801de7a:	2105      	movs	r1, #5
 801de7c:	2003      	movs	r0, #3
 801de7e:	f7ff fe9f 	bl	801dbc0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801de82:	79ba      	ldrb	r2, [r7, #6]
 801de84:	68fb      	ldr	r3, [r7, #12]
 801de86:	b2db      	uxtb	r3, r3
 801de88:	1ad3      	subs	r3, r2, r3
 801de8a:	b2db      	uxtb	r3, r3
 801de8c:	3316      	adds	r3, #22
 801de8e:	b2db      	uxtb	r3, r3
 801de90:	71bb      	strb	r3, [r7, #6]
 801de92:	e031      	b.n	801def8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	2b11      	cmp	r3, #17
 801de98:	d10e      	bne.n	801deb8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801de9a:	2301      	movs	r3, #1
 801de9c:	2200      	movs	r2, #0
 801de9e:	2103      	movs	r1, #3
 801dea0:	2002      	movs	r0, #2
 801dea2:	f7ff fe8d 	bl	801dbc0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801dea6:	79ba      	ldrb	r2, [r7, #6]
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	b2db      	uxtb	r3, r3
 801deac:	1ad3      	subs	r3, r2, r3
 801deae:	b2db      	uxtb	r3, r3
 801deb0:	3316      	adds	r3, #22
 801deb2:	b2db      	uxtb	r3, r3
 801deb4:	71bb      	strb	r3, [r7, #6]
 801deb6:	e01f      	b.n	801def8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	2b0e      	cmp	r3, #14
 801debc:	d10e      	bne.n	801dedc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801debe:	2301      	movs	r3, #1
 801dec0:	2200      	movs	r2, #0
 801dec2:	2102      	movs	r1, #2
 801dec4:	2002      	movs	r0, #2
 801dec6:	f7ff fe7b 	bl	801dbc0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801deca:	79ba      	ldrb	r2, [r7, #6]
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	b2db      	uxtb	r3, r3
 801ded0:	1ad3      	subs	r3, r2, r3
 801ded2:	b2db      	uxtb	r3, r3
 801ded4:	330e      	adds	r3, #14
 801ded6:	b2db      	uxtb	r3, r3
 801ded8:	71bb      	strb	r3, [r7, #6]
 801deda:	e00d      	b.n	801def8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801dedc:	2301      	movs	r3, #1
 801dede:	2200      	movs	r2, #0
 801dee0:	2107      	movs	r1, #7
 801dee2:	2004      	movs	r0, #4
 801dee4:	f7ff fe6c 	bl	801dbc0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801dee8:	79ba      	ldrb	r2, [r7, #6]
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	b2db      	uxtb	r3, r3
 801deee:	1ad3      	subs	r3, r2, r3
 801def0:	b2db      	uxtb	r3, r3
 801def2:	3316      	adds	r3, #22
 801def4:	b2db      	uxtb	r3, r3
 801def6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801def8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801defc:	f113 0f09 	cmn.w	r3, #9
 801df00:	da01      	bge.n	801df06 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801df02:	23f7      	movs	r3, #247	; 0xf7
 801df04:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801df06:	2138      	movs	r1, #56	; 0x38
 801df08:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801df0c:	f000 fa2a 	bl	801e364 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801df10:	79bb      	ldrb	r3, [r7, #6]
 801df12:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801df14:	797b      	ldrb	r3, [r7, #5]
 801df16:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801df18:	f107 0308 	add.w	r3, r7, #8
 801df1c:	2202      	movs	r2, #2
 801df1e:	4619      	mov	r1, r3
 801df20:	208e      	movs	r0, #142	; 0x8e
 801df22:	f000 facf 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801df26:	bf00      	nop
 801df28:	3710      	adds	r7, #16
 801df2a:	46bd      	mov	sp, r7
 801df2c:	bd80      	pop	{r7, pc}
	...

0801df30 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801df30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801df34:	b086      	sub	sp, #24
 801df36:	af00      	add	r7, sp, #0
 801df38:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801df3a:	2300      	movs	r3, #0
 801df3c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801df3e:	4a61      	ldr	r2, [pc, #388]	; (801e0c4 <SUBGRF_SetModulationParams+0x194>)
 801df40:	f107 0308 	add.w	r3, r7, #8
 801df44:	e892 0003 	ldmia.w	r2, {r0, r1}
 801df48:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801df4c:	687b      	ldr	r3, [r7, #4]
 801df4e:	781a      	ldrb	r2, [r3, #0]
 801df50:	4b5d      	ldr	r3, [pc, #372]	; (801e0c8 <SUBGRF_SetModulationParams+0x198>)
 801df52:	781b      	ldrb	r3, [r3, #0]
 801df54:	429a      	cmp	r2, r3
 801df56:	d004      	beq.n	801df62 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	781b      	ldrb	r3, [r3, #0]
 801df5c:	4618      	mov	r0, r3
 801df5e:	f7ff fef3 	bl	801dd48 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	781b      	ldrb	r3, [r3, #0]
 801df66:	2b03      	cmp	r3, #3
 801df68:	f200 80a5 	bhi.w	801e0b6 <SUBGRF_SetModulationParams+0x186>
 801df6c:	a201      	add	r2, pc, #4	; (adr r2, 801df74 <SUBGRF_SetModulationParams+0x44>)
 801df6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df72:	bf00      	nop
 801df74:	0801df85 	.word	0x0801df85
 801df78:	0801e045 	.word	0x0801e045
 801df7c:	0801e007 	.word	0x0801e007
 801df80:	0801e073 	.word	0x0801e073
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801df84:	2308      	movs	r3, #8
 801df86:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	685b      	ldr	r3, [r3, #4]
 801df8c:	4a4f      	ldr	r2, [pc, #316]	; (801e0cc <SUBGRF_SetModulationParams+0x19c>)
 801df8e:	fbb2 f3f3 	udiv	r3, r2, r3
 801df92:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801df94:	697b      	ldr	r3, [r7, #20]
 801df96:	0c1b      	lsrs	r3, r3, #16
 801df98:	b2db      	uxtb	r3, r3
 801df9a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801df9c:	697b      	ldr	r3, [r7, #20]
 801df9e:	0a1b      	lsrs	r3, r3, #8
 801dfa0:	b2db      	uxtb	r3, r3
 801dfa2:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801dfa4:	697b      	ldr	r3, [r7, #20]
 801dfa6:	b2db      	uxtb	r3, r3
 801dfa8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	7b1b      	ldrb	r3, [r3, #12]
 801dfae:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	7b5b      	ldrb	r3, [r3, #13]
 801dfb4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	689b      	ldr	r3, [r3, #8]
 801dfba:	2200      	movs	r2, #0
 801dfbc:	461c      	mov	r4, r3
 801dfbe:	4615      	mov	r5, r2
 801dfc0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801dfc4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801dfc8:	4a41      	ldr	r2, [pc, #260]	; (801e0d0 <SUBGRF_SetModulationParams+0x1a0>)
 801dfca:	f04f 0300 	mov.w	r3, #0
 801dfce:	4640      	mov	r0, r8
 801dfd0:	4649      	mov	r1, r9
 801dfd2:	f7e3 f84b 	bl	800106c <__aeabi_uldivmod>
 801dfd6:	4602      	mov	r2, r0
 801dfd8:	460b      	mov	r3, r1
 801dfda:	4613      	mov	r3, r2
 801dfdc:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801dfde:	697b      	ldr	r3, [r7, #20]
 801dfe0:	0c1b      	lsrs	r3, r3, #16
 801dfe2:	b2db      	uxtb	r3, r3
 801dfe4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801dfe6:	697b      	ldr	r3, [r7, #20]
 801dfe8:	0a1b      	lsrs	r3, r3, #8
 801dfea:	b2db      	uxtb	r3, r3
 801dfec:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801dfee:	697b      	ldr	r3, [r7, #20]
 801dff0:	b2db      	uxtb	r3, r3
 801dff2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801dff4:	7cfb      	ldrb	r3, [r7, #19]
 801dff6:	b29a      	uxth	r2, r3
 801dff8:	f107 0308 	add.w	r3, r7, #8
 801dffc:	4619      	mov	r1, r3
 801dffe:	208b      	movs	r0, #139	; 0x8b
 801e000:	f000 fa60 	bl	801e4c4 <SUBGRF_WriteCommand>
        break;
 801e004:	e058      	b.n	801e0b8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801e006:	2304      	movs	r3, #4
 801e008:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	691b      	ldr	r3, [r3, #16]
 801e00e:	4a2f      	ldr	r2, [pc, #188]	; (801e0cc <SUBGRF_SetModulationParams+0x19c>)
 801e010:	fbb2 f3f3 	udiv	r3, r2, r3
 801e014:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e016:	697b      	ldr	r3, [r7, #20]
 801e018:	0c1b      	lsrs	r3, r3, #16
 801e01a:	b2db      	uxtb	r3, r3
 801e01c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e01e:	697b      	ldr	r3, [r7, #20]
 801e020:	0a1b      	lsrs	r3, r3, #8
 801e022:	b2db      	uxtb	r3, r3
 801e024:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e026:	697b      	ldr	r3, [r7, #20]
 801e028:	b2db      	uxtb	r3, r3
 801e02a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	7d1b      	ldrb	r3, [r3, #20]
 801e030:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e032:	7cfb      	ldrb	r3, [r7, #19]
 801e034:	b29a      	uxth	r2, r3
 801e036:	f107 0308 	add.w	r3, r7, #8
 801e03a:	4619      	mov	r1, r3
 801e03c:	208b      	movs	r0, #139	; 0x8b
 801e03e:	f000 fa41 	bl	801e4c4 <SUBGRF_WriteCommand>
        break;
 801e042:	e039      	b.n	801e0b8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801e044:	2304      	movs	r3, #4
 801e046:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	7e1b      	ldrb	r3, [r3, #24]
 801e04c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	7e5b      	ldrb	r3, [r3, #25]
 801e052:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	7e9b      	ldrb	r3, [r3, #26]
 801e058:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	7edb      	ldrb	r3, [r3, #27]
 801e05e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e060:	7cfb      	ldrb	r3, [r7, #19]
 801e062:	b29a      	uxth	r2, r3
 801e064:	f107 0308 	add.w	r3, r7, #8
 801e068:	4619      	mov	r1, r3
 801e06a:	208b      	movs	r0, #139	; 0x8b
 801e06c:	f000 fa2a 	bl	801e4c4 <SUBGRF_WriteCommand>

        break;
 801e070:	e022      	b.n	801e0b8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801e072:	2305      	movs	r3, #5
 801e074:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	685b      	ldr	r3, [r3, #4]
 801e07a:	4a14      	ldr	r2, [pc, #80]	; (801e0cc <SUBGRF_SetModulationParams+0x19c>)
 801e07c:	fbb2 f3f3 	udiv	r3, r2, r3
 801e080:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801e082:	697b      	ldr	r3, [r7, #20]
 801e084:	0c1b      	lsrs	r3, r3, #16
 801e086:	b2db      	uxtb	r3, r3
 801e088:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801e08a:	697b      	ldr	r3, [r7, #20]
 801e08c:	0a1b      	lsrs	r3, r3, #8
 801e08e:	b2db      	uxtb	r3, r3
 801e090:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801e092:	697b      	ldr	r3, [r7, #20]
 801e094:	b2db      	uxtb	r3, r3
 801e096:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801e098:	687b      	ldr	r3, [r7, #4]
 801e09a:	7b1b      	ldrb	r3, [r3, #12]
 801e09c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	7b5b      	ldrb	r3, [r3, #13]
 801e0a2:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801e0a4:	7cfb      	ldrb	r3, [r7, #19]
 801e0a6:	b29a      	uxth	r2, r3
 801e0a8:	f107 0308 	add.w	r3, r7, #8
 801e0ac:	4619      	mov	r1, r3
 801e0ae:	208b      	movs	r0, #139	; 0x8b
 801e0b0:	f000 fa08 	bl	801e4c4 <SUBGRF_WriteCommand>
        break;
 801e0b4:	e000      	b.n	801e0b8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801e0b6:	bf00      	nop
    }
}
 801e0b8:	bf00      	nop
 801e0ba:	3718      	adds	r7, #24
 801e0bc:	46bd      	mov	sp, r7
 801e0be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801e0c2:	bf00      	nop
 801e0c4:	08020878 	.word	0x08020878
 801e0c8:	20001c09 	.word	0x20001c09
 801e0cc:	3d090000 	.word	0x3d090000
 801e0d0:	01e84800 	.word	0x01e84800

0801e0d4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801e0d4:	b580      	push	{r7, lr}
 801e0d6:	b086      	sub	sp, #24
 801e0d8:	af00      	add	r7, sp, #0
 801e0da:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801e0dc:	2300      	movs	r3, #0
 801e0de:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801e0e0:	4a48      	ldr	r2, [pc, #288]	; (801e204 <SUBGRF_SetPacketParams+0x130>)
 801e0e2:	f107 030c 	add.w	r3, r7, #12
 801e0e6:	ca07      	ldmia	r2, {r0, r1, r2}
 801e0e8:	c303      	stmia	r3!, {r0, r1}
 801e0ea:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	781a      	ldrb	r2, [r3, #0]
 801e0f0:	4b45      	ldr	r3, [pc, #276]	; (801e208 <SUBGRF_SetPacketParams+0x134>)
 801e0f2:	781b      	ldrb	r3, [r3, #0]
 801e0f4:	429a      	cmp	r2, r3
 801e0f6:	d004      	beq.n	801e102 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	781b      	ldrb	r3, [r3, #0]
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	f7ff fe23 	bl	801dd48 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	781b      	ldrb	r3, [r3, #0]
 801e106:	2b03      	cmp	r3, #3
 801e108:	d878      	bhi.n	801e1fc <SUBGRF_SetPacketParams+0x128>
 801e10a:	a201      	add	r2, pc, #4	; (adr r2, 801e110 <SUBGRF_SetPacketParams+0x3c>)
 801e10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e110:	0801e121 	.word	0x0801e121
 801e114:	0801e1b1 	.word	0x0801e1b1
 801e118:	0801e1a5 	.word	0x0801e1a5
 801e11c:	0801e121 	.word	0x0801e121
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	7a5b      	ldrb	r3, [r3, #9]
 801e124:	2bf1      	cmp	r3, #241	; 0xf1
 801e126:	d10a      	bne.n	801e13e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801e128:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801e12c:	f7ff faaa 	bl	801d684 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801e130:	f248 0005 	movw	r0, #32773	; 0x8005
 801e134:	f7ff fac6 	bl	801d6c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801e138:	2302      	movs	r3, #2
 801e13a:	75bb      	strb	r3, [r7, #22]
 801e13c:	e011      	b.n	801e162 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	7a5b      	ldrb	r3, [r3, #9]
 801e142:	2bf2      	cmp	r3, #242	; 0xf2
 801e144:	d10a      	bne.n	801e15c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801e146:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801e14a:	f7ff fa9b 	bl	801d684 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801e14e:	f241 0021 	movw	r0, #4129	; 0x1021
 801e152:	f7ff fab7 	bl	801d6c4 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801e156:	2306      	movs	r3, #6
 801e158:	75bb      	strb	r3, [r7, #22]
 801e15a:	e002      	b.n	801e162 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	7a5b      	ldrb	r3, [r3, #9]
 801e160:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801e162:	2309      	movs	r3, #9
 801e164:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	885b      	ldrh	r3, [r3, #2]
 801e16a:	0a1b      	lsrs	r3, r3, #8
 801e16c:	b29b      	uxth	r3, r3
 801e16e:	b2db      	uxtb	r3, r3
 801e170:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	885b      	ldrh	r3, [r3, #2]
 801e176:	b2db      	uxtb	r3, r3
 801e178:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	791b      	ldrb	r3, [r3, #4]
 801e17e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	795b      	ldrb	r3, [r3, #5]
 801e184:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	799b      	ldrb	r3, [r3, #6]
 801e18a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	79db      	ldrb	r3, [r3, #7]
 801e190:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	7a1b      	ldrb	r3, [r3, #8]
 801e196:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801e198:	7dbb      	ldrb	r3, [r7, #22]
 801e19a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	7a9b      	ldrb	r3, [r3, #10]
 801e1a0:	753b      	strb	r3, [r7, #20]
        break;
 801e1a2:	e022      	b.n	801e1ea <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801e1a4:	2301      	movs	r3, #1
 801e1a6:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	7b1b      	ldrb	r3, [r3, #12]
 801e1ac:	733b      	strb	r3, [r7, #12]
        break;
 801e1ae:	e01c      	b.n	801e1ea <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801e1b0:	2306      	movs	r3, #6
 801e1b2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	89db      	ldrh	r3, [r3, #14]
 801e1b8:	0a1b      	lsrs	r3, r3, #8
 801e1ba:	b29b      	uxth	r3, r3
 801e1bc:	b2db      	uxtb	r3, r3
 801e1be:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	89db      	ldrh	r3, [r3, #14]
 801e1c4:	b2db      	uxtb	r3, r3
 801e1c6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	7c1a      	ldrb	r2, [r3, #16]
 801e1cc:	4b0f      	ldr	r3, [pc, #60]	; (801e20c <SUBGRF_SetPacketParams+0x138>)
 801e1ce:	4611      	mov	r1, r2
 801e1d0:	7019      	strb	r1, [r3, #0]
 801e1d2:	4613      	mov	r3, r2
 801e1d4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	7c5b      	ldrb	r3, [r3, #17]
 801e1da:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	7c9b      	ldrb	r3, [r3, #18]
 801e1e0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	7cdb      	ldrb	r3, [r3, #19]
 801e1e6:	747b      	strb	r3, [r7, #17]
        break;
 801e1e8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801e1ea:	7dfb      	ldrb	r3, [r7, #23]
 801e1ec:	b29a      	uxth	r2, r3
 801e1ee:	f107 030c 	add.w	r3, r7, #12
 801e1f2:	4619      	mov	r1, r3
 801e1f4:	208c      	movs	r0, #140	; 0x8c
 801e1f6:	f000 f965 	bl	801e4c4 <SUBGRF_WriteCommand>
 801e1fa:	e000      	b.n	801e1fe <SUBGRF_SetPacketParams+0x12a>
        return;
 801e1fc:	bf00      	nop
}
 801e1fe:	3718      	adds	r7, #24
 801e200:	46bd      	mov	sp, r7
 801e202:	bd80      	pop	{r7, pc}
 801e204:	08020880 	.word	0x08020880
 801e208:	20001c09 	.word	0x20001c09
 801e20c:	20001c0a 	.word	0x20001c0a

0801e210 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e210:	b580      	push	{r7, lr}
 801e212:	b084      	sub	sp, #16
 801e214:	af00      	add	r7, sp, #0
 801e216:	4603      	mov	r3, r0
 801e218:	460a      	mov	r2, r1
 801e21a:	71fb      	strb	r3, [r7, #7]
 801e21c:	4613      	mov	r3, r2
 801e21e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e220:	79fb      	ldrb	r3, [r7, #7]
 801e222:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e224:	79bb      	ldrb	r3, [r7, #6]
 801e226:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e228:	f107 030c 	add.w	r3, r7, #12
 801e22c:	2202      	movs	r2, #2
 801e22e:	4619      	mov	r1, r3
 801e230:	208f      	movs	r0, #143	; 0x8f
 801e232:	f000 f947 	bl	801e4c4 <SUBGRF_WriteCommand>
}
 801e236:	bf00      	nop
 801e238:	3710      	adds	r7, #16
 801e23a:	46bd      	mov	sp, r7
 801e23c:	bd80      	pop	{r7, pc}

0801e23e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e23e:	b580      	push	{r7, lr}
 801e240:	b082      	sub	sp, #8
 801e242:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e244:	2300      	movs	r3, #0
 801e246:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e248:	1d3b      	adds	r3, r7, #4
 801e24a:	2201      	movs	r2, #1
 801e24c:	4619      	mov	r1, r3
 801e24e:	2015      	movs	r0, #21
 801e250:	f000 f95a 	bl	801e508 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e254:	793b      	ldrb	r3, [r7, #4]
 801e256:	425b      	negs	r3, r3
 801e258:	105b      	asrs	r3, r3, #1
 801e25a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e25c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e260:	4618      	mov	r0, r3
 801e262:	3708      	adds	r7, #8
 801e264:	46bd      	mov	sp, r7
 801e266:	bd80      	pop	{r7, pc}

0801e268 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e268:	b580      	push	{r7, lr}
 801e26a:	b084      	sub	sp, #16
 801e26c:	af00      	add	r7, sp, #0
 801e26e:	6078      	str	r0, [r7, #4]
 801e270:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e272:	f107 030c 	add.w	r3, r7, #12
 801e276:	2202      	movs	r2, #2
 801e278:	4619      	mov	r1, r3
 801e27a:	2013      	movs	r0, #19
 801e27c:	f000 f944 	bl	801e508 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e280:	f7ff fd7e 	bl	801dd80 <SUBGRF_GetPacketType>
 801e284:	4603      	mov	r3, r0
 801e286:	2b01      	cmp	r3, #1
 801e288:	d10d      	bne.n	801e2a6 <SUBGRF_GetRxBufferStatus+0x3e>
 801e28a:	4b0c      	ldr	r3, [pc, #48]	; (801e2bc <SUBGRF_GetRxBufferStatus+0x54>)
 801e28c:	781b      	ldrb	r3, [r3, #0]
 801e28e:	b2db      	uxtb	r3, r3
 801e290:	2b01      	cmp	r3, #1
 801e292:	d108      	bne.n	801e2a6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e294:	f240 7002 	movw	r0, #1794	; 0x702
 801e298:	f000 f878 	bl	801e38c <SUBGRF_ReadRegister>
 801e29c:	4603      	mov	r3, r0
 801e29e:	461a      	mov	r2, r3
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	701a      	strb	r2, [r3, #0]
 801e2a4:	e002      	b.n	801e2ac <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e2a6:	7b3a      	ldrb	r2, [r7, #12]
 801e2a8:	687b      	ldr	r3, [r7, #4]
 801e2aa:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e2ac:	7b7a      	ldrb	r2, [r7, #13]
 801e2ae:	683b      	ldr	r3, [r7, #0]
 801e2b0:	701a      	strb	r2, [r3, #0]
}
 801e2b2:	bf00      	nop
 801e2b4:	3710      	adds	r7, #16
 801e2b6:	46bd      	mov	sp, r7
 801e2b8:	bd80      	pop	{r7, pc}
 801e2ba:	bf00      	nop
 801e2bc:	20001c0a 	.word	0x20001c0a

0801e2c0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	b084      	sub	sp, #16
 801e2c4:	af00      	add	r7, sp, #0
 801e2c6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e2c8:	f107 030c 	add.w	r3, r7, #12
 801e2cc:	2203      	movs	r2, #3
 801e2ce:	4619      	mov	r1, r3
 801e2d0:	2014      	movs	r0, #20
 801e2d2:	f000 f919 	bl	801e508 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e2d6:	f7ff fd53 	bl	801dd80 <SUBGRF_GetPacketType>
 801e2da:	4603      	mov	r3, r0
 801e2dc:	461a      	mov	r2, r3
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	781b      	ldrb	r3, [r3, #0]
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d002      	beq.n	801e2f0 <SUBGRF_GetPacketStatus+0x30>
 801e2ea:	2b01      	cmp	r3, #1
 801e2ec:	d013      	beq.n	801e316 <SUBGRF_GetPacketStatus+0x56>
 801e2ee:	e02a      	b.n	801e346 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e2f0:	7b3a      	ldrb	r2, [r7, #12]
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e2f6:	7b7b      	ldrb	r3, [r7, #13]
 801e2f8:	425b      	negs	r3, r3
 801e2fa:	105b      	asrs	r3, r3, #1
 801e2fc:	b25a      	sxtb	r2, r3
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e302:	7bbb      	ldrb	r3, [r7, #14]
 801e304:	425b      	negs	r3, r3
 801e306:	105b      	asrs	r3, r3, #1
 801e308:	b25a      	sxtb	r2, r3
 801e30a:	687b      	ldr	r3, [r7, #4]
 801e30c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	2200      	movs	r2, #0
 801e312:	609a      	str	r2, [r3, #8]
            break;
 801e314:	e020      	b.n	801e358 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e316:	7b3b      	ldrb	r3, [r7, #12]
 801e318:	425b      	negs	r3, r3
 801e31a:	105b      	asrs	r3, r3, #1
 801e31c:	b25a      	sxtb	r2, r3
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e322:	7b7b      	ldrb	r3, [r7, #13]
 801e324:	b25b      	sxtb	r3, r3
 801e326:	3302      	adds	r3, #2
 801e328:	109b      	asrs	r3, r3, #2
 801e32a:	b25a      	sxtb	r2, r3
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e330:	7bbb      	ldrb	r3, [r7, #14]
 801e332:	425b      	negs	r3, r3
 801e334:	105b      	asrs	r3, r3, #1
 801e336:	b25a      	sxtb	r2, r3
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e33c:	4b08      	ldr	r3, [pc, #32]	; (801e360 <SUBGRF_GetPacketStatus+0xa0>)
 801e33e:	681a      	ldr	r2, [r3, #0]
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	611a      	str	r2, [r3, #16]
            break;
 801e344:	e008      	b.n	801e358 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e346:	2214      	movs	r2, #20
 801e348:	2100      	movs	r1, #0
 801e34a:	6878      	ldr	r0, [r7, #4]
 801e34c:	f000 fbcd 	bl	801eaea <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	220f      	movs	r2, #15
 801e354:	701a      	strb	r2, [r3, #0]
            break;
 801e356:	bf00      	nop
    }
}
 801e358:	bf00      	nop
 801e35a:	3710      	adds	r7, #16
 801e35c:	46bd      	mov	sp, r7
 801e35e:	bd80      	pop	{r7, pc}
 801e360:	20001c0c 	.word	0x20001c0c

0801e364 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e364:	b580      	push	{r7, lr}
 801e366:	b082      	sub	sp, #8
 801e368:	af00      	add	r7, sp, #0
 801e36a:	4603      	mov	r3, r0
 801e36c:	460a      	mov	r2, r1
 801e36e:	80fb      	strh	r3, [r7, #6]
 801e370:	4613      	mov	r3, r2
 801e372:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e374:	1d7a      	adds	r2, r7, #5
 801e376:	88f9      	ldrh	r1, [r7, #6]
 801e378:	2301      	movs	r3, #1
 801e37a:	4803      	ldr	r0, [pc, #12]	; (801e388 <SUBGRF_WriteRegister+0x24>)
 801e37c:	f7eb fc3c 	bl	8009bf8 <HAL_SUBGHZ_WriteRegisters>
}
 801e380:	bf00      	nop
 801e382:	3708      	adds	r7, #8
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}
 801e388:	20000250 	.word	0x20000250

0801e38c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b084      	sub	sp, #16
 801e390:	af00      	add	r7, sp, #0
 801e392:	4603      	mov	r3, r0
 801e394:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e396:	f107 020f 	add.w	r2, r7, #15
 801e39a:	88f9      	ldrh	r1, [r7, #6]
 801e39c:	2301      	movs	r3, #1
 801e39e:	4804      	ldr	r0, [pc, #16]	; (801e3b0 <SUBGRF_ReadRegister+0x24>)
 801e3a0:	f7eb fc89 	bl	8009cb6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e3a4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e3a6:	4618      	mov	r0, r3
 801e3a8:	3710      	adds	r7, #16
 801e3aa:	46bd      	mov	sp, r7
 801e3ac:	bd80      	pop	{r7, pc}
 801e3ae:	bf00      	nop
 801e3b0:	20000250 	.word	0x20000250

0801e3b4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e3b4:	b580      	push	{r7, lr}
 801e3b6:	b086      	sub	sp, #24
 801e3b8:	af00      	add	r7, sp, #0
 801e3ba:	4603      	mov	r3, r0
 801e3bc:	6039      	str	r1, [r7, #0]
 801e3be:	80fb      	strh	r3, [r7, #6]
 801e3c0:	4613      	mov	r3, r2
 801e3c2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e3c4:	f3ef 8310 	mrs	r3, PRIMASK
 801e3c8:	60fb      	str	r3, [r7, #12]
  return(result);
 801e3ca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e3cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e3ce:	b672      	cpsid	i
}
 801e3d0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e3d2:	88bb      	ldrh	r3, [r7, #4]
 801e3d4:	88f9      	ldrh	r1, [r7, #6]
 801e3d6:	683a      	ldr	r2, [r7, #0]
 801e3d8:	4806      	ldr	r0, [pc, #24]	; (801e3f4 <SUBGRF_WriteRegisters+0x40>)
 801e3da:	f7eb fc0d 	bl	8009bf8 <HAL_SUBGHZ_WriteRegisters>
 801e3de:	697b      	ldr	r3, [r7, #20]
 801e3e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e3e2:	693b      	ldr	r3, [r7, #16]
 801e3e4:	f383 8810 	msr	PRIMASK, r3
}
 801e3e8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e3ea:	bf00      	nop
 801e3ec:	3718      	adds	r7, #24
 801e3ee:	46bd      	mov	sp, r7
 801e3f0:	bd80      	pop	{r7, pc}
 801e3f2:	bf00      	nop
 801e3f4:	20000250 	.word	0x20000250

0801e3f8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e3f8:	b580      	push	{r7, lr}
 801e3fa:	b086      	sub	sp, #24
 801e3fc:	af00      	add	r7, sp, #0
 801e3fe:	4603      	mov	r3, r0
 801e400:	6039      	str	r1, [r7, #0]
 801e402:	80fb      	strh	r3, [r7, #6]
 801e404:	4613      	mov	r3, r2
 801e406:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e408:	f3ef 8310 	mrs	r3, PRIMASK
 801e40c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e40e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e412:	b672      	cpsid	i
}
 801e414:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e416:	88bb      	ldrh	r3, [r7, #4]
 801e418:	88f9      	ldrh	r1, [r7, #6]
 801e41a:	683a      	ldr	r2, [r7, #0]
 801e41c:	4806      	ldr	r0, [pc, #24]	; (801e438 <SUBGRF_ReadRegisters+0x40>)
 801e41e:	f7eb fc4a 	bl	8009cb6 <HAL_SUBGHZ_ReadRegisters>
 801e422:	697b      	ldr	r3, [r7, #20]
 801e424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e426:	693b      	ldr	r3, [r7, #16]
 801e428:	f383 8810 	msr	PRIMASK, r3
}
 801e42c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e42e:	bf00      	nop
 801e430:	3718      	adds	r7, #24
 801e432:	46bd      	mov	sp, r7
 801e434:	bd80      	pop	{r7, pc}
 801e436:	bf00      	nop
 801e438:	20000250 	.word	0x20000250

0801e43c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e43c:	b580      	push	{r7, lr}
 801e43e:	b086      	sub	sp, #24
 801e440:	af00      	add	r7, sp, #0
 801e442:	4603      	mov	r3, r0
 801e444:	6039      	str	r1, [r7, #0]
 801e446:	71fb      	strb	r3, [r7, #7]
 801e448:	4613      	mov	r3, r2
 801e44a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e44c:	f3ef 8310 	mrs	r3, PRIMASK
 801e450:	60fb      	str	r3, [r7, #12]
  return(result);
 801e452:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e454:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e456:	b672      	cpsid	i
}
 801e458:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e45a:	79bb      	ldrb	r3, [r7, #6]
 801e45c:	b29b      	uxth	r3, r3
 801e45e:	79f9      	ldrb	r1, [r7, #7]
 801e460:	683a      	ldr	r2, [r7, #0]
 801e462:	4806      	ldr	r0, [pc, #24]	; (801e47c <SUBGRF_WriteBuffer+0x40>)
 801e464:	f7eb fd3b 	bl	8009ede <HAL_SUBGHZ_WriteBuffer>
 801e468:	697b      	ldr	r3, [r7, #20]
 801e46a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e46c:	693b      	ldr	r3, [r7, #16]
 801e46e:	f383 8810 	msr	PRIMASK, r3
}
 801e472:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e474:	bf00      	nop
 801e476:	3718      	adds	r7, #24
 801e478:	46bd      	mov	sp, r7
 801e47a:	bd80      	pop	{r7, pc}
 801e47c:	20000250 	.word	0x20000250

0801e480 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e480:	b580      	push	{r7, lr}
 801e482:	b086      	sub	sp, #24
 801e484:	af00      	add	r7, sp, #0
 801e486:	4603      	mov	r3, r0
 801e488:	6039      	str	r1, [r7, #0]
 801e48a:	71fb      	strb	r3, [r7, #7]
 801e48c:	4613      	mov	r3, r2
 801e48e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e490:	f3ef 8310 	mrs	r3, PRIMASK
 801e494:	60fb      	str	r3, [r7, #12]
  return(result);
 801e496:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e498:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e49a:	b672      	cpsid	i
}
 801e49c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e49e:	79bb      	ldrb	r3, [r7, #6]
 801e4a0:	b29b      	uxth	r3, r3
 801e4a2:	79f9      	ldrb	r1, [r7, #7]
 801e4a4:	683a      	ldr	r2, [r7, #0]
 801e4a6:	4806      	ldr	r0, [pc, #24]	; (801e4c0 <SUBGRF_ReadBuffer+0x40>)
 801e4a8:	f7eb fd6c 	bl	8009f84 <HAL_SUBGHZ_ReadBuffer>
 801e4ac:	697b      	ldr	r3, [r7, #20]
 801e4ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4b0:	693b      	ldr	r3, [r7, #16]
 801e4b2:	f383 8810 	msr	PRIMASK, r3
}
 801e4b6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e4b8:	bf00      	nop
 801e4ba:	3718      	adds	r7, #24
 801e4bc:	46bd      	mov	sp, r7
 801e4be:	bd80      	pop	{r7, pc}
 801e4c0:	20000250 	.word	0x20000250

0801e4c4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e4c4:	b580      	push	{r7, lr}
 801e4c6:	b086      	sub	sp, #24
 801e4c8:	af00      	add	r7, sp, #0
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	6039      	str	r1, [r7, #0]
 801e4ce:	71fb      	strb	r3, [r7, #7]
 801e4d0:	4613      	mov	r3, r2
 801e4d2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e4d4:	f3ef 8310 	mrs	r3, PRIMASK
 801e4d8:	60fb      	str	r3, [r7, #12]
  return(result);
 801e4da:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e4dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e4de:	b672      	cpsid	i
}
 801e4e0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e4e2:	88bb      	ldrh	r3, [r7, #4]
 801e4e4:	79f9      	ldrb	r1, [r7, #7]
 801e4e6:	683a      	ldr	r2, [r7, #0]
 801e4e8:	4806      	ldr	r0, [pc, #24]	; (801e504 <SUBGRF_WriteCommand+0x40>)
 801e4ea:	f7eb fc45 	bl	8009d78 <HAL_SUBGHZ_ExecSetCmd>
 801e4ee:	697b      	ldr	r3, [r7, #20]
 801e4f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e4f2:	693b      	ldr	r3, [r7, #16]
 801e4f4:	f383 8810 	msr	PRIMASK, r3
}
 801e4f8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e4fa:	bf00      	nop
 801e4fc:	3718      	adds	r7, #24
 801e4fe:	46bd      	mov	sp, r7
 801e500:	bd80      	pop	{r7, pc}
 801e502:	bf00      	nop
 801e504:	20000250 	.word	0x20000250

0801e508 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	b086      	sub	sp, #24
 801e50c:	af00      	add	r7, sp, #0
 801e50e:	4603      	mov	r3, r0
 801e510:	6039      	str	r1, [r7, #0]
 801e512:	71fb      	strb	r3, [r7, #7]
 801e514:	4613      	mov	r3, r2
 801e516:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e518:	f3ef 8310 	mrs	r3, PRIMASK
 801e51c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e51e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e520:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e522:	b672      	cpsid	i
}
 801e524:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e526:	88bb      	ldrh	r3, [r7, #4]
 801e528:	79f9      	ldrb	r1, [r7, #7]
 801e52a:	683a      	ldr	r2, [r7, #0]
 801e52c:	4806      	ldr	r0, [pc, #24]	; (801e548 <SUBGRF_ReadCommand+0x40>)
 801e52e:	f7eb fc82 	bl	8009e36 <HAL_SUBGHZ_ExecGetCmd>
 801e532:	697b      	ldr	r3, [r7, #20]
 801e534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e536:	693b      	ldr	r3, [r7, #16]
 801e538:	f383 8810 	msr	PRIMASK, r3
}
 801e53c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e53e:	bf00      	nop
 801e540:	3718      	adds	r7, #24
 801e542:	46bd      	mov	sp, r7
 801e544:	bd80      	pop	{r7, pc}
 801e546:	bf00      	nop
 801e548:	20000250 	.word	0x20000250

0801e54c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801e54c:	b580      	push	{r7, lr}
 801e54e:	b084      	sub	sp, #16
 801e550:	af00      	add	r7, sp, #0
 801e552:	4603      	mov	r3, r0
 801e554:	460a      	mov	r2, r1
 801e556:	71fb      	strb	r3, [r7, #7]
 801e558:	4613      	mov	r3, r2
 801e55a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801e55c:	2301      	movs	r3, #1
 801e55e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801e560:	79bb      	ldrb	r3, [r7, #6]
 801e562:	2b01      	cmp	r3, #1
 801e564:	d10d      	bne.n	801e582 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801e566:	79fb      	ldrb	r3, [r7, #7]
 801e568:	2b01      	cmp	r3, #1
 801e56a:	d104      	bne.n	801e576 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801e56c:	2302      	movs	r3, #2
 801e56e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801e570:	2004      	movs	r0, #4
 801e572:	f000 f8ef 	bl	801e754 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801e576:	79fb      	ldrb	r3, [r7, #7]
 801e578:	2b02      	cmp	r3, #2
 801e57a:	d107      	bne.n	801e58c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801e57c:	2303      	movs	r3, #3
 801e57e:	73fb      	strb	r3, [r7, #15]
 801e580:	e004      	b.n	801e58c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801e582:	79bb      	ldrb	r3, [r7, #6]
 801e584:	2b00      	cmp	r3, #0
 801e586:	d101      	bne.n	801e58c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801e588:	2301      	movs	r3, #1
 801e58a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801e58c:	7bfb      	ldrb	r3, [r7, #15]
 801e58e:	4618      	mov	r0, r3
 801e590:	f7ee ff47 	bl	800d422 <RBI_ConfigRFSwitch>
}
 801e594:	bf00      	nop
 801e596:	3710      	adds	r7, #16
 801e598:	46bd      	mov	sp, r7
 801e59a:	bd80      	pop	{r7, pc}

0801e59c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801e59c:	b580      	push	{r7, lr}
 801e59e:	b084      	sub	sp, #16
 801e5a0:	af00      	add	r7, sp, #0
 801e5a2:	4603      	mov	r3, r0
 801e5a4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801e5a6:	2301      	movs	r3, #1
 801e5a8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801e5aa:	f7ee ff48 	bl	800d43e <RBI_GetTxConfig>
 801e5ae:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801e5b0:	68bb      	ldr	r3, [r7, #8]
 801e5b2:	2b02      	cmp	r3, #2
 801e5b4:	d016      	beq.n	801e5e4 <SUBGRF_SetRfTxPower+0x48>
 801e5b6:	68bb      	ldr	r3, [r7, #8]
 801e5b8:	2b02      	cmp	r3, #2
 801e5ba:	dc16      	bgt.n	801e5ea <SUBGRF_SetRfTxPower+0x4e>
 801e5bc:	68bb      	ldr	r3, [r7, #8]
 801e5be:	2b00      	cmp	r3, #0
 801e5c0:	d003      	beq.n	801e5ca <SUBGRF_SetRfTxPower+0x2e>
 801e5c2:	68bb      	ldr	r3, [r7, #8]
 801e5c4:	2b01      	cmp	r3, #1
 801e5c6:	d00a      	beq.n	801e5de <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801e5c8:	e00f      	b.n	801e5ea <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801e5ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e5ce:	2b0f      	cmp	r3, #15
 801e5d0:	dd02      	ble.n	801e5d8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801e5d2:	2302      	movs	r3, #2
 801e5d4:	73fb      	strb	r3, [r7, #15]
            break;
 801e5d6:	e009      	b.n	801e5ec <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801e5d8:	2301      	movs	r3, #1
 801e5da:	73fb      	strb	r3, [r7, #15]
            break;
 801e5dc:	e006      	b.n	801e5ec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801e5de:	2301      	movs	r3, #1
 801e5e0:	73fb      	strb	r3, [r7, #15]
            break;
 801e5e2:	e003      	b.n	801e5ec <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801e5e4:	2302      	movs	r3, #2
 801e5e6:	73fb      	strb	r3, [r7, #15]
            break;
 801e5e8:	e000      	b.n	801e5ec <SUBGRF_SetRfTxPower+0x50>
            break;
 801e5ea:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801e5ec:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e5f0:	7bfb      	ldrb	r3, [r7, #15]
 801e5f2:	2202      	movs	r2, #2
 801e5f4:	4618      	mov	r0, r3
 801e5f6:	f7ff fbcd 	bl	801dd94 <SUBGRF_SetTxParams>

    return paSelect;
 801e5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801e5fc:	4618      	mov	r0, r3
 801e5fe:	3710      	adds	r7, #16
 801e600:	46bd      	mov	sp, r7
 801e602:	bd80      	pop	{r7, pc}

0801e604 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801e604:	b480      	push	{r7}
 801e606:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801e608:	2301      	movs	r3, #1
}
 801e60a:	4618      	mov	r0, r3
 801e60c:	46bd      	mov	sp, r7
 801e60e:	bc80      	pop	{r7}
 801e610:	4770      	bx	lr
	...

0801e614 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e614:	b580      	push	{r7, lr}
 801e616:	b082      	sub	sp, #8
 801e618:	af00      	add	r7, sp, #0
 801e61a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801e61c:	4b03      	ldr	r3, [pc, #12]	; (801e62c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	2001      	movs	r0, #1
 801e622:	4798      	blx	r3
}
 801e624:	bf00      	nop
 801e626:	3708      	adds	r7, #8
 801e628:	46bd      	mov	sp, r7
 801e62a:	bd80      	pop	{r7, pc}
 801e62c:	20001c14 	.word	0x20001c14

0801e630 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e630:	b580      	push	{r7, lr}
 801e632:	b082      	sub	sp, #8
 801e634:	af00      	add	r7, sp, #0
 801e636:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801e638:	4b03      	ldr	r3, [pc, #12]	; (801e648 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	2002      	movs	r0, #2
 801e63e:	4798      	blx	r3
}
 801e640:	bf00      	nop
 801e642:	3708      	adds	r7, #8
 801e644:	46bd      	mov	sp, r7
 801e646:	bd80      	pop	{r7, pc}
 801e648:	20001c14 	.word	0x20001c14

0801e64c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801e64c:	b580      	push	{r7, lr}
 801e64e:	b082      	sub	sp, #8
 801e650:	af00      	add	r7, sp, #0
 801e652:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801e654:	4b03      	ldr	r3, [pc, #12]	; (801e664 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801e656:	681b      	ldr	r3, [r3, #0]
 801e658:	2040      	movs	r0, #64	; 0x40
 801e65a:	4798      	blx	r3
}
 801e65c:	bf00      	nop
 801e65e:	3708      	adds	r7, #8
 801e660:	46bd      	mov	sp, r7
 801e662:	bd80      	pop	{r7, pc}
 801e664:	20001c14 	.word	0x20001c14

0801e668 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801e668:	b580      	push	{r7, lr}
 801e66a:	b082      	sub	sp, #8
 801e66c:	af00      	add	r7, sp, #0
 801e66e:	6078      	str	r0, [r7, #4]
 801e670:	460b      	mov	r3, r1
 801e672:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801e674:	78fb      	ldrb	r3, [r7, #3]
 801e676:	2b00      	cmp	r3, #0
 801e678:	d002      	beq.n	801e680 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801e67a:	2b01      	cmp	r3, #1
 801e67c:	d005      	beq.n	801e68a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801e67e:	e00a      	b.n	801e696 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801e680:	4b07      	ldr	r3, [pc, #28]	; (801e6a0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e682:	681b      	ldr	r3, [r3, #0]
 801e684:	2080      	movs	r0, #128	; 0x80
 801e686:	4798      	blx	r3
            break;
 801e688:	e005      	b.n	801e696 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801e68a:	4b05      	ldr	r3, [pc, #20]	; (801e6a0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e68c:	681b      	ldr	r3, [r3, #0]
 801e68e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e692:	4798      	blx	r3
            break;
 801e694:	bf00      	nop
    }
}
 801e696:	bf00      	nop
 801e698:	3708      	adds	r7, #8
 801e69a:	46bd      	mov	sp, r7
 801e69c:	bd80      	pop	{r7, pc}
 801e69e:	bf00      	nop
 801e6a0:	20001c14 	.word	0x20001c14

0801e6a4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e6a4:	b580      	push	{r7, lr}
 801e6a6:	b082      	sub	sp, #8
 801e6a8:	af00      	add	r7, sp, #0
 801e6aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801e6ac:	4b04      	ldr	r3, [pc, #16]	; (801e6c0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	f44f 7000 	mov.w	r0, #512	; 0x200
 801e6b4:	4798      	blx	r3
}
 801e6b6:	bf00      	nop
 801e6b8:	3708      	adds	r7, #8
 801e6ba:	46bd      	mov	sp, r7
 801e6bc:	bd80      	pop	{r7, pc}
 801e6be:	bf00      	nop
 801e6c0:	20001c14 	.word	0x20001c14

0801e6c4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e6c4:	b580      	push	{r7, lr}
 801e6c6:	b082      	sub	sp, #8
 801e6c8:	af00      	add	r7, sp, #0
 801e6ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801e6cc:	4b03      	ldr	r3, [pc, #12]	; (801e6dc <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	2020      	movs	r0, #32
 801e6d2:	4798      	blx	r3
}
 801e6d4:	bf00      	nop
 801e6d6:	3708      	adds	r7, #8
 801e6d8:	46bd      	mov	sp, r7
 801e6da:	bd80      	pop	{r7, pc}
 801e6dc:	20001c14 	.word	0x20001c14

0801e6e0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e6e0:	b580      	push	{r7, lr}
 801e6e2:	b082      	sub	sp, #8
 801e6e4:	af00      	add	r7, sp, #0
 801e6e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801e6e8:	4b03      	ldr	r3, [pc, #12]	; (801e6f8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	2004      	movs	r0, #4
 801e6ee:	4798      	blx	r3
}
 801e6f0:	bf00      	nop
 801e6f2:	3708      	adds	r7, #8
 801e6f4:	46bd      	mov	sp, r7
 801e6f6:	bd80      	pop	{r7, pc}
 801e6f8:	20001c14 	.word	0x20001c14

0801e6fc <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e6fc:	b580      	push	{r7, lr}
 801e6fe:	b082      	sub	sp, #8
 801e700:	af00      	add	r7, sp, #0
 801e702:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801e704:	4b03      	ldr	r3, [pc, #12]	; (801e714 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	2008      	movs	r0, #8
 801e70a:	4798      	blx	r3
}
 801e70c:	bf00      	nop
 801e70e:	3708      	adds	r7, #8
 801e710:	46bd      	mov	sp, r7
 801e712:	bd80      	pop	{r7, pc}
 801e714:	20001c14 	.word	0x20001c14

0801e718 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e718:	b580      	push	{r7, lr}
 801e71a:	b082      	sub	sp, #8
 801e71c:	af00      	add	r7, sp, #0
 801e71e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801e720:	4b03      	ldr	r3, [pc, #12]	; (801e730 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	2010      	movs	r0, #16
 801e726:	4798      	blx	r3
}
 801e728:	bf00      	nop
 801e72a:	3708      	adds	r7, #8
 801e72c:	46bd      	mov	sp, r7
 801e72e:	bd80      	pop	{r7, pc}
 801e730:	20001c14 	.word	0x20001c14

0801e734 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e734:	b580      	push	{r7, lr}
 801e736:	b082      	sub	sp, #8
 801e738:	af00      	add	r7, sp, #0
 801e73a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801e73c:	4b04      	ldr	r3, [pc, #16]	; (801e750 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801e744:	4798      	blx	r3
}
 801e746:	bf00      	nop
 801e748:	3708      	adds	r7, #8
 801e74a:	46bd      	mov	sp, r7
 801e74c:	bd80      	pop	{r7, pc}
 801e74e:	bf00      	nop
 801e750:	20001c14 	.word	0x20001c14

0801e754 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801e754:	b580      	push	{r7, lr}
 801e756:	b084      	sub	sp, #16
 801e758:	af00      	add	r7, sp, #0
 801e75a:	4603      	mov	r3, r0
 801e75c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801e75e:	f7ee fe7c 	bl	800d45a <RBI_IsDCDC>
 801e762:	4603      	mov	r3, r0
 801e764:	2b01      	cmp	r3, #1
 801e766:	d112      	bne.n	801e78e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801e768:	f640 1023 	movw	r0, #2339	; 0x923
 801e76c:	f7ff fe0e 	bl	801e38c <SUBGRF_ReadRegister>
 801e770:	4603      	mov	r3, r0
 801e772:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801e774:	7bfb      	ldrb	r3, [r7, #15]
 801e776:	f023 0306 	bic.w	r3, r3, #6
 801e77a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801e77c:	7bfa      	ldrb	r2, [r7, #15]
 801e77e:	79fb      	ldrb	r3, [r7, #7]
 801e780:	4313      	orrs	r3, r2
 801e782:	b2db      	uxtb	r3, r3
 801e784:	4619      	mov	r1, r3
 801e786:	f640 1023 	movw	r0, #2339	; 0x923
 801e78a:	f7ff fdeb 	bl	801e364 <SUBGRF_WriteRegister>
  }
}
 801e78e:	bf00      	nop
 801e790:	3710      	adds	r7, #16
 801e792:	46bd      	mov	sp, r7
 801e794:	bd80      	pop	{r7, pc}
	...

0801e798 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801e798:	b480      	push	{r7}
 801e79a:	b085      	sub	sp, #20
 801e79c:	af00      	add	r7, sp, #0
 801e79e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	2b00      	cmp	r3, #0
 801e7a4:	d101      	bne.n	801e7aa <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801e7a6:	231f      	movs	r3, #31
 801e7a8:	e016      	b.n	801e7d8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801e7aa:	2300      	movs	r3, #0
 801e7ac:	73fb      	strb	r3, [r7, #15]
 801e7ae:	e00f      	b.n	801e7d0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801e7b0:	7bfb      	ldrb	r3, [r7, #15]
 801e7b2:	4a0c      	ldr	r2, [pc, #48]	; (801e7e4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801e7b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801e7b8:	687a      	ldr	r2, [r7, #4]
 801e7ba:	429a      	cmp	r2, r3
 801e7bc:	d205      	bcs.n	801e7ca <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801e7be:	7bfb      	ldrb	r3, [r7, #15]
 801e7c0:	4a08      	ldr	r2, [pc, #32]	; (801e7e4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801e7c2:	00db      	lsls	r3, r3, #3
 801e7c4:	4413      	add	r3, r2
 801e7c6:	791b      	ldrb	r3, [r3, #4]
 801e7c8:	e006      	b.n	801e7d8 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801e7ca:	7bfb      	ldrb	r3, [r7, #15]
 801e7cc:	3301      	adds	r3, #1
 801e7ce:	73fb      	strb	r3, [r7, #15]
 801e7d0:	7bfb      	ldrb	r3, [r7, #15]
 801e7d2:	2b15      	cmp	r3, #21
 801e7d4:	d9ec      	bls.n	801e7b0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801e7d6:	e7fe      	b.n	801e7d6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801e7d8:	4618      	mov	r0, r3
 801e7da:	3714      	adds	r7, #20
 801e7dc:	46bd      	mov	sp, r7
 801e7de:	bc80      	pop	{r7}
 801e7e0:	4770      	bx	lr
 801e7e2:	bf00      	nop
 801e7e4:	08020edc 	.word	0x08020edc

0801e7e8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801e7e8:	b580      	push	{r7, lr}
 801e7ea:	b08a      	sub	sp, #40	; 0x28
 801e7ec:	af00      	add	r7, sp, #0
 801e7ee:	6078      	str	r0, [r7, #4]
 801e7f0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801e7f2:	4b35      	ldr	r3, [pc, #212]	; (801e8c8 <SUBGRF_GetCFO+0xe0>)
 801e7f4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801e7f6:	f640 0007 	movw	r0, #2055	; 0x807
 801e7fa:	f7ff fdc7 	bl	801e38c <SUBGRF_ReadRegister>
 801e7fe:	4603      	mov	r3, r0
 801e800:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801e802:	7ffb      	ldrb	r3, [r7, #31]
 801e804:	08db      	lsrs	r3, r3, #3
 801e806:	b2db      	uxtb	r3, r3
 801e808:	f003 0303 	and.w	r3, r3, #3
 801e80c:	3328      	adds	r3, #40	; 0x28
 801e80e:	443b      	add	r3, r7
 801e810:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801e814:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801e816:	7ffb      	ldrb	r3, [r7, #31]
 801e818:	f003 0307 	and.w	r3, r3, #7
 801e81c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801e81e:	7fba      	ldrb	r2, [r7, #30]
 801e820:	7f7b      	ldrb	r3, [r7, #29]
 801e822:	3301      	adds	r3, #1
 801e824:	fa02 f303 	lsl.w	r3, r2, r3
 801e828:	461a      	mov	r2, r3
 801e82a:	4b28      	ldr	r3, [pc, #160]	; (801e8cc <SUBGRF_GetCFO+0xe4>)
 801e82c:	fbb3 f3f2 	udiv	r3, r3, r2
 801e830:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801e832:	69ba      	ldr	r2, [r7, #24]
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	fbb2 f3f3 	udiv	r3, r2, r3
 801e83a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801e83c:	2301      	movs	r3, #1
 801e83e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801e842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e846:	697a      	ldr	r2, [r7, #20]
 801e848:	fb02 f303 	mul.w	r3, r2, r3
 801e84c:	2b07      	cmp	r3, #7
 801e84e:	d802      	bhi.n	801e856 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801e850:	2302      	movs	r3, #2
 801e852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801e856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e85a:	697a      	ldr	r2, [r7, #20]
 801e85c:	fb02 f303 	mul.w	r3, r2, r3
 801e860:	2b03      	cmp	r3, #3
 801e862:	d802      	bhi.n	801e86a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801e864:	2304      	movs	r3, #4
 801e866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801e86a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801e86e:	69bb      	ldr	r3, [r7, #24]
 801e870:	fb02 f303 	mul.w	r3, r2, r3
 801e874:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801e876:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801e87a:	f7ff fd87 	bl	801e38c <SUBGRF_ReadRegister>
 801e87e:	4603      	mov	r3, r0
 801e880:	021b      	lsls	r3, r3, #8
 801e882:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801e886:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801e888:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801e88c:	f7ff fd7e 	bl	801e38c <SUBGRF_ReadRegister>
 801e890:	4603      	mov	r3, r0
 801e892:	461a      	mov	r2, r3
 801e894:	6a3b      	ldr	r3, [r7, #32]
 801e896:	4313      	orrs	r3, r2
 801e898:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801e89a:	6a3b      	ldr	r3, [r7, #32]
 801e89c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e8a0:	2b00      	cmp	r3, #0
 801e8a2:	d005      	beq.n	801e8b0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801e8a4:	6a3b      	ldr	r3, [r7, #32]
 801e8a6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801e8aa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801e8ae:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801e8b0:	693b      	ldr	r3, [r7, #16]
 801e8b2:	095b      	lsrs	r3, r3, #5
 801e8b4:	6a3a      	ldr	r2, [r7, #32]
 801e8b6:	fb02 f303 	mul.w	r3, r2, r3
 801e8ba:	11da      	asrs	r2, r3, #7
 801e8bc:	683b      	ldr	r3, [r7, #0]
 801e8be:	601a      	str	r2, [r3, #0]
}
 801e8c0:	bf00      	nop
 801e8c2:	3728      	adds	r7, #40	; 0x28
 801e8c4:	46bd      	mov	sp, r7
 801e8c6:	bd80      	pop	{r7, pc}
 801e8c8:	0c0a0804 	.word	0x0c0a0804
 801e8cc:	01e84800 	.word	0x01e84800

0801e8d0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801e8d0:	b480      	push	{r7}
 801e8d2:	b087      	sub	sp, #28
 801e8d4:	af00      	add	r7, sp, #0
 801e8d6:	4603      	mov	r3, r0
 801e8d8:	60b9      	str	r1, [r7, #8]
 801e8da:	607a      	str	r2, [r7, #4]
 801e8dc:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801e8de:	2300      	movs	r3, #0
 801e8e0:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801e8e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e8e6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801e8e8:	697b      	ldr	r3, [r7, #20]
}
 801e8ea:	4618      	mov	r0, r3
 801e8ec:	371c      	adds	r7, #28
 801e8ee:	46bd      	mov	sp, r7
 801e8f0:	bc80      	pop	{r7}
 801e8f2:	4770      	bx	lr

0801e8f4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801e8f4:	b480      	push	{r7}
 801e8f6:	b087      	sub	sp, #28
 801e8f8:	af00      	add	r7, sp, #0
 801e8fa:	4603      	mov	r3, r0
 801e8fc:	60b9      	str	r1, [r7, #8]
 801e8fe:	607a      	str	r2, [r7, #4]
 801e900:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801e902:	2300      	movs	r3, #0
 801e904:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801e906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e90a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801e90c:	697b      	ldr	r3, [r7, #20]
}
 801e90e:	4618      	mov	r0, r3
 801e910:	371c      	adds	r7, #28
 801e912:	46bd      	mov	sp, r7
 801e914:	bc80      	pop	{r7}
 801e916:	4770      	bx	lr

0801e918 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801e918:	b480      	push	{r7}
 801e91a:	b085      	sub	sp, #20
 801e91c:	af00      	add	r7, sp, #0
 801e91e:	60f8      	str	r0, [r7, #12]
 801e920:	60b9      	str	r1, [r7, #8]
 801e922:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801e924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801e928:	4618      	mov	r0, r3
 801e92a:	3714      	adds	r7, #20
 801e92c:	46bd      	mov	sp, r7
 801e92e:	bc80      	pop	{r7}
 801e930:	4770      	bx	lr

0801e932 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801e932:	b480      	push	{r7}
 801e934:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801e936:	bf00      	nop
 801e938:	46bd      	mov	sp, r7
 801e93a:	bc80      	pop	{r7}
 801e93c:	4770      	bx	lr

0801e93e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801e93e:	b480      	push	{r7}
 801e940:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801e942:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801e944:	4618      	mov	r0, r3
 801e946:	46bd      	mov	sp, r7
 801e948:	bc80      	pop	{r7}
 801e94a:	4770      	bx	lr

0801e94c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801e94c:	b480      	push	{r7}
 801e94e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801e950:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801e952:	4618      	mov	r0, r3
 801e954:	46bd      	mov	sp, r7
 801e956:	bc80      	pop	{r7}
 801e958:	4770      	bx	lr

0801e95a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801e95a:	b480      	push	{r7}
 801e95c:	b083      	sub	sp, #12
 801e95e:	af00      	add	r7, sp, #0
 801e960:	4603      	mov	r3, r0
 801e962:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801e964:	bf00      	nop
 801e966:	370c      	adds	r7, #12
 801e968:	46bd      	mov	sp, r7
 801e96a:	bc80      	pop	{r7}
 801e96c:	4770      	bx	lr

0801e96e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801e96e:	b480      	push	{r7}
 801e970:	b087      	sub	sp, #28
 801e972:	af00      	add	r7, sp, #0
 801e974:	60f8      	str	r0, [r7, #12]
 801e976:	460b      	mov	r3, r1
 801e978:	607a      	str	r2, [r7, #4]
 801e97a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801e97c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e980:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801e982:	697b      	ldr	r3, [r7, #20]
}
 801e984:	4618      	mov	r0, r3
 801e986:	371c      	adds	r7, #28
 801e988:	46bd      	mov	sp, r7
 801e98a:	bc80      	pop	{r7}
 801e98c:	4770      	bx	lr

0801e98e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801e98e:	b480      	push	{r7}
 801e990:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801e992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801e996:	4618      	mov	r0, r3
 801e998:	46bd      	mov	sp, r7
 801e99a:	bc80      	pop	{r7}
 801e99c:	4770      	bx	lr

0801e99e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801e99e:	b480      	push	{r7}
 801e9a0:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801e9a2:	bf00      	nop
 801e9a4:	46bd      	mov	sp, r7
 801e9a6:	bc80      	pop	{r7}
 801e9a8:	4770      	bx	lr

0801e9aa <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801e9aa:	b480      	push	{r7}
 801e9ac:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801e9ae:	bf00      	nop
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	bc80      	pop	{r7}
 801e9b4:	4770      	bx	lr

0801e9b6 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801e9b6:	b480      	push	{r7}
 801e9b8:	b083      	sub	sp, #12
 801e9ba:	af00      	add	r7, sp, #0
 801e9bc:	4603      	mov	r3, r0
 801e9be:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801e9c0:	bf00      	nop
 801e9c2:	370c      	adds	r7, #12
 801e9c4:	46bd      	mov	sp, r7
 801e9c6:	bc80      	pop	{r7}
 801e9c8:	4770      	bx	lr
	...

0801e9cc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801e9cc:	b480      	push	{r7}
 801e9ce:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801e9d0:	4b04      	ldr	r3, [pc, #16]	; (801e9e4 <UTIL_LPM_Init+0x18>)
 801e9d2:	2200      	movs	r2, #0
 801e9d4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801e9d6:	4b04      	ldr	r3, [pc, #16]	; (801e9e8 <UTIL_LPM_Init+0x1c>)
 801e9d8:	2200      	movs	r2, #0
 801e9da:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801e9dc:	bf00      	nop
 801e9de:	46bd      	mov	sp, r7
 801e9e0:	bc80      	pop	{r7}
 801e9e2:	4770      	bx	lr
 801e9e4:	20001c18 	.word	0x20001c18
 801e9e8:	20001c1c 	.word	0x20001c1c

0801e9ec <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801e9ec:	b480      	push	{r7}
 801e9ee:	b087      	sub	sp, #28
 801e9f0:	af00      	add	r7, sp, #0
 801e9f2:	6078      	str	r0, [r7, #4]
 801e9f4:	460b      	mov	r3, r1
 801e9f6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9f8:	f3ef 8310 	mrs	r3, PRIMASK
 801e9fc:	613b      	str	r3, [r7, #16]
  return(result);
 801e9fe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ea00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea02:	b672      	cpsid	i
}
 801ea04:	bf00      	nop
  
  switch( state )
 801ea06:	78fb      	ldrb	r3, [r7, #3]
 801ea08:	2b00      	cmp	r3, #0
 801ea0a:	d008      	beq.n	801ea1e <UTIL_LPM_SetStopMode+0x32>
 801ea0c:	2b01      	cmp	r3, #1
 801ea0e:	d10e      	bne.n	801ea2e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ea10:	4b0d      	ldr	r3, [pc, #52]	; (801ea48 <UTIL_LPM_SetStopMode+0x5c>)
 801ea12:	681a      	ldr	r2, [r3, #0]
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	4313      	orrs	r3, r2
 801ea18:	4a0b      	ldr	r2, [pc, #44]	; (801ea48 <UTIL_LPM_SetStopMode+0x5c>)
 801ea1a:	6013      	str	r3, [r2, #0]
      break;
 801ea1c:	e008      	b.n	801ea30 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	43da      	mvns	r2, r3
 801ea22:	4b09      	ldr	r3, [pc, #36]	; (801ea48 <UTIL_LPM_SetStopMode+0x5c>)
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	4013      	ands	r3, r2
 801ea28:	4a07      	ldr	r2, [pc, #28]	; (801ea48 <UTIL_LPM_SetStopMode+0x5c>)
 801ea2a:	6013      	str	r3, [r2, #0]
      break;
 801ea2c:	e000      	b.n	801ea30 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ea2e:	bf00      	nop
 801ea30:	697b      	ldr	r3, [r7, #20]
 801ea32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	f383 8810 	msr	PRIMASK, r3
}
 801ea3a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ea3c:	bf00      	nop
 801ea3e:	371c      	adds	r7, #28
 801ea40:	46bd      	mov	sp, r7
 801ea42:	bc80      	pop	{r7}
 801ea44:	4770      	bx	lr
 801ea46:	bf00      	nop
 801ea48:	20001c18 	.word	0x20001c18

0801ea4c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ea4c:	b480      	push	{r7}
 801ea4e:	b087      	sub	sp, #28
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	6078      	str	r0, [r7, #4]
 801ea54:	460b      	mov	r3, r1
 801ea56:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ea58:	f3ef 8310 	mrs	r3, PRIMASK
 801ea5c:	613b      	str	r3, [r7, #16]
  return(result);
 801ea5e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ea60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea62:	b672      	cpsid	i
}
 801ea64:	bf00      	nop
  
  switch(state)
 801ea66:	78fb      	ldrb	r3, [r7, #3]
 801ea68:	2b00      	cmp	r3, #0
 801ea6a:	d008      	beq.n	801ea7e <UTIL_LPM_SetOffMode+0x32>
 801ea6c:	2b01      	cmp	r3, #1
 801ea6e:	d10e      	bne.n	801ea8e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ea70:	4b0d      	ldr	r3, [pc, #52]	; (801eaa8 <UTIL_LPM_SetOffMode+0x5c>)
 801ea72:	681a      	ldr	r2, [r3, #0]
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	4313      	orrs	r3, r2
 801ea78:	4a0b      	ldr	r2, [pc, #44]	; (801eaa8 <UTIL_LPM_SetOffMode+0x5c>)
 801ea7a:	6013      	str	r3, [r2, #0]
      break;
 801ea7c:	e008      	b.n	801ea90 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	43da      	mvns	r2, r3
 801ea82:	4b09      	ldr	r3, [pc, #36]	; (801eaa8 <UTIL_LPM_SetOffMode+0x5c>)
 801ea84:	681b      	ldr	r3, [r3, #0]
 801ea86:	4013      	ands	r3, r2
 801ea88:	4a07      	ldr	r2, [pc, #28]	; (801eaa8 <UTIL_LPM_SetOffMode+0x5c>)
 801ea8a:	6013      	str	r3, [r2, #0]
      break;
 801ea8c:	e000      	b.n	801ea90 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ea8e:	bf00      	nop
 801ea90:	697b      	ldr	r3, [r7, #20]
 801ea92:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	f383 8810 	msr	PRIMASK, r3
}
 801ea9a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ea9c:	bf00      	nop
 801ea9e:	371c      	adds	r7, #28
 801eaa0:	46bd      	mov	sp, r7
 801eaa2:	bc80      	pop	{r7}
 801eaa4:	4770      	bx	lr
 801eaa6:	bf00      	nop
 801eaa8:	20001c1c 	.word	0x20001c1c

0801eaac <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801eaac:	b480      	push	{r7}
 801eaae:	b087      	sub	sp, #28
 801eab0:	af00      	add	r7, sp, #0
 801eab2:	60f8      	str	r0, [r7, #12]
 801eab4:	60b9      	str	r1, [r7, #8]
 801eab6:	4613      	mov	r3, r2
 801eab8:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801eaba:	68fb      	ldr	r3, [r7, #12]
 801eabc:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801eabe:	68bb      	ldr	r3, [r7, #8]
 801eac0:	613b      	str	r3, [r7, #16]

  while( size-- )
 801eac2:	e007      	b.n	801ead4 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801eac4:	693a      	ldr	r2, [r7, #16]
 801eac6:	1c53      	adds	r3, r2, #1
 801eac8:	613b      	str	r3, [r7, #16]
 801eaca:	697b      	ldr	r3, [r7, #20]
 801eacc:	1c59      	adds	r1, r3, #1
 801eace:	6179      	str	r1, [r7, #20]
 801ead0:	7812      	ldrb	r2, [r2, #0]
 801ead2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ead4:	88fb      	ldrh	r3, [r7, #6]
 801ead6:	1e5a      	subs	r2, r3, #1
 801ead8:	80fa      	strh	r2, [r7, #6]
 801eada:	2b00      	cmp	r3, #0
 801eadc:	d1f2      	bne.n	801eac4 <UTIL_MEM_cpy_8+0x18>
    }
}
 801eade:	bf00      	nop
 801eae0:	bf00      	nop
 801eae2:	371c      	adds	r7, #28
 801eae4:	46bd      	mov	sp, r7
 801eae6:	bc80      	pop	{r7}
 801eae8:	4770      	bx	lr

0801eaea <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801eaea:	b480      	push	{r7}
 801eaec:	b085      	sub	sp, #20
 801eaee:	af00      	add	r7, sp, #0
 801eaf0:	6078      	str	r0, [r7, #4]
 801eaf2:	460b      	mov	r3, r1
 801eaf4:	70fb      	strb	r3, [r7, #3]
 801eaf6:	4613      	mov	r3, r2
 801eaf8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801eafe:	e004      	b.n	801eb0a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	1c5a      	adds	r2, r3, #1
 801eb04:	60fa      	str	r2, [r7, #12]
 801eb06:	78fa      	ldrb	r2, [r7, #3]
 801eb08:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801eb0a:	883b      	ldrh	r3, [r7, #0]
 801eb0c:	1e5a      	subs	r2, r3, #1
 801eb0e:	803a      	strh	r2, [r7, #0]
 801eb10:	2b00      	cmp	r3, #0
 801eb12:	d1f5      	bne.n	801eb00 <UTIL_MEM_set_8+0x16>
  }
}
 801eb14:	bf00      	nop
 801eb16:	bf00      	nop
 801eb18:	3714      	adds	r7, #20
 801eb1a:	46bd      	mov	sp, r7
 801eb1c:	bc80      	pop	{r7}
 801eb1e:	4770      	bx	lr

0801eb20 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801eb20:	b082      	sub	sp, #8
 801eb22:	b480      	push	{r7}
 801eb24:	b087      	sub	sp, #28
 801eb26:	af00      	add	r7, sp, #0
 801eb28:	60f8      	str	r0, [r7, #12]
 801eb2a:	1d38      	adds	r0, r7, #4
 801eb2c:	e880 0006 	stmia.w	r0, {r1, r2}
 801eb30:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801eb32:	2300      	movs	r3, #0
 801eb34:	613b      	str	r3, [r7, #16]
 801eb36:	2300      	movs	r3, #0
 801eb38:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801eb3a:	687a      	ldr	r2, [r7, #4]
 801eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb3e:	4413      	add	r3, r2
 801eb40:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801eb42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801eb46:	b29a      	uxth	r2, r3
 801eb48:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801eb4c:	b29b      	uxth	r3, r3
 801eb4e:	4413      	add	r3, r2
 801eb50:	b29b      	uxth	r3, r3
 801eb52:	b21b      	sxth	r3, r3
 801eb54:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801eb56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eb5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801eb5e:	db0a      	blt.n	801eb76 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801eb60:	693b      	ldr	r3, [r7, #16]
 801eb62:	3301      	adds	r3, #1
 801eb64:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801eb66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801eb6a:	b29b      	uxth	r3, r3
 801eb6c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801eb70:	b29b      	uxth	r3, r3
 801eb72:	b21b      	sxth	r3, r3
 801eb74:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	461a      	mov	r2, r3
 801eb7a:	f107 0310 	add.w	r3, r7, #16
 801eb7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801eb82:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801eb86:	68f8      	ldr	r0, [r7, #12]
 801eb88:	371c      	adds	r7, #28
 801eb8a:	46bd      	mov	sp, r7
 801eb8c:	bc80      	pop	{r7}
 801eb8e:	b002      	add	sp, #8
 801eb90:	4770      	bx	lr

0801eb92 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801eb92:	b082      	sub	sp, #8
 801eb94:	b480      	push	{r7}
 801eb96:	b087      	sub	sp, #28
 801eb98:	af00      	add	r7, sp, #0
 801eb9a:	60f8      	str	r0, [r7, #12]
 801eb9c:	1d38      	adds	r0, r7, #4
 801eb9e:	e880 0006 	stmia.w	r0, {r1, r2}
 801eba2:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801eba4:	2300      	movs	r3, #0
 801eba6:	613b      	str	r3, [r7, #16]
 801eba8:	2300      	movs	r3, #0
 801ebaa:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801ebac:	687a      	ldr	r2, [r7, #4]
 801ebae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebb0:	1ad3      	subs	r3, r2, r3
 801ebb2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801ebb4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801ebb8:	b29a      	uxth	r2, r3
 801ebba:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801ebbe:	b29b      	uxth	r3, r3
 801ebc0:	1ad3      	subs	r3, r2, r3
 801ebc2:	b29b      	uxth	r3, r3
 801ebc4:	b21b      	sxth	r3, r3
 801ebc6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801ebc8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	da0a      	bge.n	801ebe6 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801ebd0:	693b      	ldr	r3, [r7, #16]
 801ebd2:	3b01      	subs	r3, #1
 801ebd4:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801ebd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ebda:	b29b      	uxth	r3, r3
 801ebdc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801ebe0:	b29b      	uxth	r3, r3
 801ebe2:	b21b      	sxth	r3, r3
 801ebe4:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801ebe6:	68fb      	ldr	r3, [r7, #12]
 801ebe8:	461a      	mov	r2, r3
 801ebea:	f107 0310 	add.w	r3, r7, #16
 801ebee:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ebf2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ebf6:	68f8      	ldr	r0, [r7, #12]
 801ebf8:	371c      	adds	r7, #28
 801ebfa:	46bd      	mov	sp, r7
 801ebfc:	bc80      	pop	{r7}
 801ebfe:	b002      	add	sp, #8
 801ec00:	4770      	bx	lr
	...

0801ec04 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801ec04:	b580      	push	{r7, lr}
 801ec06:	b088      	sub	sp, #32
 801ec08:	af02      	add	r7, sp, #8
 801ec0a:	463b      	mov	r3, r7
 801ec0c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ec10:	2300      	movs	r3, #0
 801ec12:	60bb      	str	r3, [r7, #8]
 801ec14:	2300      	movs	r3, #0
 801ec16:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ec18:	4b10      	ldr	r3, [pc, #64]	; (801ec5c <SysTimeSet+0x58>)
 801ec1a:	691b      	ldr	r3, [r3, #16]
 801ec1c:	f107 0208 	add.w	r2, r7, #8
 801ec20:	3204      	adds	r2, #4
 801ec22:	4610      	mov	r0, r2
 801ec24:	4798      	blx	r3
 801ec26:	4603      	mov	r3, r0
 801ec28:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801ec2a:	f107 0010 	add.w	r0, r7, #16
 801ec2e:	68fb      	ldr	r3, [r7, #12]
 801ec30:	9300      	str	r3, [sp, #0]
 801ec32:	68bb      	ldr	r3, [r7, #8]
 801ec34:	463a      	mov	r2, r7
 801ec36:	ca06      	ldmia	r2, {r1, r2}
 801ec38:	f7ff ffab 	bl	801eb92 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801ec3c:	4b07      	ldr	r3, [pc, #28]	; (801ec5c <SysTimeSet+0x58>)
 801ec3e:	681b      	ldr	r3, [r3, #0]
 801ec40:	693a      	ldr	r2, [r7, #16]
 801ec42:	4610      	mov	r0, r2
 801ec44:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801ec46:	4b05      	ldr	r3, [pc, #20]	; (801ec5c <SysTimeSet+0x58>)
 801ec48:	689b      	ldr	r3, [r3, #8]
 801ec4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801ec4e:	4610      	mov	r0, r2
 801ec50:	4798      	blx	r3
}
 801ec52:	bf00      	nop
 801ec54:	3718      	adds	r7, #24
 801ec56:	46bd      	mov	sp, r7
 801ec58:	bd80      	pop	{r7, pc}
 801ec5a:	bf00      	nop
 801ec5c:	080209b0 	.word	0x080209b0

0801ec60 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801ec60:	b580      	push	{r7, lr}
 801ec62:	b08a      	sub	sp, #40	; 0x28
 801ec64:	af02      	add	r7, sp, #8
 801ec66:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ec68:	2300      	movs	r3, #0
 801ec6a:	61bb      	str	r3, [r7, #24]
 801ec6c:	2300      	movs	r3, #0
 801ec6e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801ec70:	2300      	movs	r3, #0
 801ec72:	613b      	str	r3, [r7, #16]
 801ec74:	2300      	movs	r3, #0
 801ec76:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ec78:	4b14      	ldr	r3, [pc, #80]	; (801eccc <SysTimeGet+0x6c>)
 801ec7a:	691b      	ldr	r3, [r3, #16]
 801ec7c:	f107 0218 	add.w	r2, r7, #24
 801ec80:	3204      	adds	r2, #4
 801ec82:	4610      	mov	r0, r2
 801ec84:	4798      	blx	r3
 801ec86:	4603      	mov	r3, r0
 801ec88:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ec8a:	4b10      	ldr	r3, [pc, #64]	; (801eccc <SysTimeGet+0x6c>)
 801ec8c:	68db      	ldr	r3, [r3, #12]
 801ec8e:	4798      	blx	r3
 801ec90:	4603      	mov	r3, r0
 801ec92:	b21b      	sxth	r3, r3
 801ec94:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ec96:	4b0d      	ldr	r3, [pc, #52]	; (801eccc <SysTimeGet+0x6c>)
 801ec98:	685b      	ldr	r3, [r3, #4]
 801ec9a:	4798      	blx	r3
 801ec9c:	4603      	mov	r3, r0
 801ec9e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801eca0:	f107 0010 	add.w	r0, r7, #16
 801eca4:	69fb      	ldr	r3, [r7, #28]
 801eca6:	9300      	str	r3, [sp, #0]
 801eca8:	69bb      	ldr	r3, [r7, #24]
 801ecaa:	f107 0208 	add.w	r2, r7, #8
 801ecae:	ca06      	ldmia	r2, {r1, r2}
 801ecb0:	f7ff ff36 	bl	801eb20 <SysTimeAdd>

  return sysTime;
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	461a      	mov	r2, r3
 801ecb8:	f107 0310 	add.w	r3, r7, #16
 801ecbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ecc0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ecc4:	6878      	ldr	r0, [r7, #4]
 801ecc6:	3720      	adds	r7, #32
 801ecc8:	46bd      	mov	sp, r7
 801ecca:	bd80      	pop	{r7, pc}
 801eccc:	080209b0 	.word	0x080209b0

0801ecd0 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801ecd0:	b580      	push	{r7, lr}
 801ecd2:	b084      	sub	sp, #16
 801ecd4:	af00      	add	r7, sp, #0
 801ecd6:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ecd8:	2300      	movs	r3, #0
 801ecda:	60bb      	str	r3, [r7, #8]
 801ecdc:	2300      	movs	r3, #0
 801ecde:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ece0:	4b0a      	ldr	r3, [pc, #40]	; (801ed0c <SysTimeGetMcuTime+0x3c>)
 801ece2:	691b      	ldr	r3, [r3, #16]
 801ece4:	f107 0208 	add.w	r2, r7, #8
 801ece8:	3204      	adds	r2, #4
 801ecea:	4610      	mov	r0, r2
 801ecec:	4798      	blx	r3
 801ecee:	4603      	mov	r3, r0
 801ecf0:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	461a      	mov	r2, r3
 801ecf6:	f107 0308 	add.w	r3, r7, #8
 801ecfa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ecfe:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ed02:	6878      	ldr	r0, [r7, #4]
 801ed04:	3710      	adds	r7, #16
 801ed06:	46bd      	mov	sp, r7
 801ed08:	bd80      	pop	{r7, pc}
 801ed0a:	bf00      	nop
 801ed0c:	080209b0 	.word	0x080209b0

0801ed10 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801ed10:	b580      	push	{r7, lr}
 801ed12:	b088      	sub	sp, #32
 801ed14:	af02      	add	r7, sp, #8
 801ed16:	463b      	mov	r3, r7
 801ed18:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ed1c:	4b0f      	ldr	r3, [pc, #60]	; (801ed5c <SysTimeToMs+0x4c>)
 801ed1e:	68db      	ldr	r3, [r3, #12]
 801ed20:	4798      	blx	r3
 801ed22:	4603      	mov	r3, r0
 801ed24:	b21b      	sxth	r3, r3
 801ed26:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ed28:	4b0c      	ldr	r3, [pc, #48]	; (801ed5c <SysTimeToMs+0x4c>)
 801ed2a:	685b      	ldr	r3, [r3, #4]
 801ed2c:	4798      	blx	r3
 801ed2e:	4603      	mov	r3, r0
 801ed30:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801ed32:	f107 0008 	add.w	r0, r7, #8
 801ed36:	697b      	ldr	r3, [r7, #20]
 801ed38:	9300      	str	r3, [sp, #0]
 801ed3a:	693b      	ldr	r3, [r7, #16]
 801ed3c:	463a      	mov	r2, r7
 801ed3e:	ca06      	ldmia	r2, {r1, r2}
 801ed40:	f7ff ff27 	bl	801eb92 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801ed44:	68bb      	ldr	r3, [r7, #8]
 801ed46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ed4a:	fb02 f303 	mul.w	r3, r2, r3
 801ed4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801ed52:	4413      	add	r3, r2
}
 801ed54:	4618      	mov	r0, r3
 801ed56:	3718      	adds	r7, #24
 801ed58:	46bd      	mov	sp, r7
 801ed5a:	bd80      	pop	{r7, pc}
 801ed5c:	080209b0 	.word	0x080209b0

0801ed60 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801ed60:	b580      	push	{r7, lr}
 801ed62:	b08a      	sub	sp, #40	; 0x28
 801ed64:	af02      	add	r7, sp, #8
 801ed66:	6078      	str	r0, [r7, #4]
 801ed68:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801ed6a:	683b      	ldr	r3, [r7, #0]
 801ed6c:	4a19      	ldr	r2, [pc, #100]	; (801edd4 <SysTimeFromMs+0x74>)
 801ed6e:	fba2 2303 	umull	r2, r3, r2, r3
 801ed72:	099b      	lsrs	r3, r3, #6
 801ed74:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801ed76:	69fb      	ldr	r3, [r7, #28]
 801ed78:	617b      	str	r3, [r7, #20]
 801ed7a:	683b      	ldr	r3, [r7, #0]
 801ed7c:	b29a      	uxth	r2, r3
 801ed7e:	69fb      	ldr	r3, [r7, #28]
 801ed80:	b29b      	uxth	r3, r3
 801ed82:	4619      	mov	r1, r3
 801ed84:	0149      	lsls	r1, r1, #5
 801ed86:	1ac9      	subs	r1, r1, r3
 801ed88:	0089      	lsls	r1, r1, #2
 801ed8a:	440b      	add	r3, r1
 801ed8c:	00db      	lsls	r3, r3, #3
 801ed8e:	b29b      	uxth	r3, r3
 801ed90:	1ad3      	subs	r3, r2, r3
 801ed92:	b29b      	uxth	r3, r3
 801ed94:	b21b      	sxth	r3, r3
 801ed96:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801ed98:	f107 030c 	add.w	r3, r7, #12
 801ed9c:	2200      	movs	r2, #0
 801ed9e:	601a      	str	r2, [r3, #0]
 801eda0:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801eda2:	4b0d      	ldr	r3, [pc, #52]	; (801edd8 <SysTimeFromMs+0x78>)
 801eda4:	68db      	ldr	r3, [r3, #12]
 801eda6:	4798      	blx	r3
 801eda8:	4603      	mov	r3, r0
 801edaa:	b21b      	sxth	r3, r3
 801edac:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801edae:	4b0a      	ldr	r3, [pc, #40]	; (801edd8 <SysTimeFromMs+0x78>)
 801edb0:	685b      	ldr	r3, [r3, #4]
 801edb2:	4798      	blx	r3
 801edb4:	4603      	mov	r3, r0
 801edb6:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801edb8:	6878      	ldr	r0, [r7, #4]
 801edba:	693b      	ldr	r3, [r7, #16]
 801edbc:	9300      	str	r3, [sp, #0]
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	f107 0214 	add.w	r2, r7, #20
 801edc4:	ca06      	ldmia	r2, {r1, r2}
 801edc6:	f7ff feab 	bl	801eb20 <SysTimeAdd>
}
 801edca:	6878      	ldr	r0, [r7, #4]
 801edcc:	3720      	adds	r7, #32
 801edce:	46bd      	mov	sp, r7
 801edd0:	bd80      	pop	{r7, pc}
 801edd2:	bf00      	nop
 801edd4:	10624dd3 	.word	0x10624dd3
 801edd8:	080209b0 	.word	0x080209b0

0801eddc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801eddc:	b480      	push	{r7}
 801edde:	b085      	sub	sp, #20
 801ede0:	af00      	add	r7, sp, #0
 801ede2:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ede4:	2300      	movs	r3, #0
 801ede6:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ede8:	e00e      	b.n	801ee08 <ee_skip_atoi+0x2c>
 801edea:	68fa      	ldr	r2, [r7, #12]
 801edec:	4613      	mov	r3, r2
 801edee:	009b      	lsls	r3, r3, #2
 801edf0:	4413      	add	r3, r2
 801edf2:	005b      	lsls	r3, r3, #1
 801edf4:	4618      	mov	r0, r3
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	681b      	ldr	r3, [r3, #0]
 801edfa:	1c59      	adds	r1, r3, #1
 801edfc:	687a      	ldr	r2, [r7, #4]
 801edfe:	6011      	str	r1, [r2, #0]
 801ee00:	781b      	ldrb	r3, [r3, #0]
 801ee02:	4403      	add	r3, r0
 801ee04:	3b30      	subs	r3, #48	; 0x30
 801ee06:	60fb      	str	r3, [r7, #12]
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	681b      	ldr	r3, [r3, #0]
 801ee0c:	781b      	ldrb	r3, [r3, #0]
 801ee0e:	2b2f      	cmp	r3, #47	; 0x2f
 801ee10:	d904      	bls.n	801ee1c <ee_skip_atoi+0x40>
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	681b      	ldr	r3, [r3, #0]
 801ee16:	781b      	ldrb	r3, [r3, #0]
 801ee18:	2b39      	cmp	r3, #57	; 0x39
 801ee1a:	d9e6      	bls.n	801edea <ee_skip_atoi+0xe>
  return i;
 801ee1c:	68fb      	ldr	r3, [r7, #12]
}
 801ee1e:	4618      	mov	r0, r3
 801ee20:	3714      	adds	r7, #20
 801ee22:	46bd      	mov	sp, r7
 801ee24:	bc80      	pop	{r7}
 801ee26:	4770      	bx	lr

0801ee28 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ee28:	b480      	push	{r7}
 801ee2a:	b099      	sub	sp, #100	; 0x64
 801ee2c:	af00      	add	r7, sp, #0
 801ee2e:	60f8      	str	r0, [r7, #12]
 801ee30:	60b9      	str	r1, [r7, #8]
 801ee32:	607a      	str	r2, [r7, #4]
 801ee34:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ee36:	4b71      	ldr	r3, [pc, #452]	; (801effc <ee_number+0x1d4>)
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ee3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ee3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d002      	beq.n	801ee4c <ee_number+0x24>
 801ee46:	4b6e      	ldr	r3, [pc, #440]	; (801f000 <ee_number+0x1d8>)
 801ee48:	681b      	ldr	r3, [r3, #0]
 801ee4a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ee4c:	683b      	ldr	r3, [r7, #0]
 801ee4e:	2b01      	cmp	r3, #1
 801ee50:	dd02      	ble.n	801ee58 <ee_number+0x30>
 801ee52:	683b      	ldr	r3, [r7, #0]
 801ee54:	2b24      	cmp	r3, #36	; 0x24
 801ee56:	dd01      	ble.n	801ee5c <ee_number+0x34>
 801ee58:	2300      	movs	r3, #0
 801ee5a:	e0ca      	b.n	801eff2 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801ee5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ee5e:	f003 0301 	and.w	r3, r3, #1
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d001      	beq.n	801ee6a <ee_number+0x42>
 801ee66:	2330      	movs	r3, #48	; 0x30
 801ee68:	e000      	b.n	801ee6c <ee_number+0x44>
 801ee6a:	2320      	movs	r3, #32
 801ee6c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801ee70:	2300      	movs	r3, #0
 801ee72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801ee76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ee78:	f003 0302 	and.w	r3, r3, #2
 801ee7c:	2b00      	cmp	r3, #0
 801ee7e:	d00b      	beq.n	801ee98 <ee_number+0x70>
  {
    if (num < 0)
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	da08      	bge.n	801ee98 <ee_number+0x70>
    {
      sign = '-';
 801ee86:	232d      	movs	r3, #45	; 0x2d
 801ee88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	425b      	negs	r3, r3
 801ee90:	607b      	str	r3, [r7, #4]
      size--;
 801ee92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ee94:	3b01      	subs	r3, #1
 801ee96:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801ee98:	2300      	movs	r3, #0
 801ee9a:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d11e      	bne.n	801eee0 <ee_number+0xb8>
    tmp[i++] = '0';
 801eea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eea4:	1c5a      	adds	r2, r3, #1
 801eea6:	657a      	str	r2, [r7, #84]	; 0x54
 801eea8:	3360      	adds	r3, #96	; 0x60
 801eeaa:	443b      	add	r3, r7
 801eeac:	2230      	movs	r2, #48	; 0x30
 801eeae:	f803 2c50 	strb.w	r2, [r3, #-80]
 801eeb2:	e018      	b.n	801eee6 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801eeb4:	687b      	ldr	r3, [r7, #4]
 801eeb6:	683a      	ldr	r2, [r7, #0]
 801eeb8:	fbb3 f1f2 	udiv	r1, r3, r2
 801eebc:	fb01 f202 	mul.w	r2, r1, r2
 801eec0:	1a9b      	subs	r3, r3, r2
 801eec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801eec4:	441a      	add	r2, r3
 801eec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eec8:	1c59      	adds	r1, r3, #1
 801eeca:	6579      	str	r1, [r7, #84]	; 0x54
 801eecc:	7812      	ldrb	r2, [r2, #0]
 801eece:	3360      	adds	r3, #96	; 0x60
 801eed0:	443b      	add	r3, r7
 801eed2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801eed6:	687a      	ldr	r2, [r7, #4]
 801eed8:	683b      	ldr	r3, [r7, #0]
 801eeda:	fbb2 f3f3 	udiv	r3, r2, r3
 801eede:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d1e6      	bne.n	801eeb4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801eee6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801eee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eeea:	429a      	cmp	r2, r3
 801eeec:	dd01      	ble.n	801eef2 <ee_number+0xca>
 801eeee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801eef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801eef2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eef6:	1ad3      	subs	r3, r2, r3
 801eef8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801eefa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801eefc:	f003 0301 	and.w	r3, r3, #1
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d112      	bne.n	801ef2a <ee_number+0x102>
 801ef04:	e00c      	b.n	801ef20 <ee_number+0xf8>
 801ef06:	68fb      	ldr	r3, [r7, #12]
 801ef08:	1c5a      	adds	r2, r3, #1
 801ef0a:	60fa      	str	r2, [r7, #12]
 801ef0c:	2220      	movs	r2, #32
 801ef0e:	701a      	strb	r2, [r3, #0]
 801ef10:	68bb      	ldr	r3, [r7, #8]
 801ef12:	3b01      	subs	r3, #1
 801ef14:	60bb      	str	r3, [r7, #8]
 801ef16:	68bb      	ldr	r3, [r7, #8]
 801ef18:	2b00      	cmp	r3, #0
 801ef1a:	d101      	bne.n	801ef20 <ee_number+0xf8>
 801ef1c:	68fb      	ldr	r3, [r7, #12]
 801ef1e:	e068      	b.n	801eff2 <ee_number+0x1ca>
 801ef20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ef22:	1e5a      	subs	r2, r3, #1
 801ef24:	66ba      	str	r2, [r7, #104]	; 0x68
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	dced      	bgt.n	801ef06 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801ef2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	d01b      	beq.n	801ef6a <ee_number+0x142>
 801ef32:	68fb      	ldr	r3, [r7, #12]
 801ef34:	1c5a      	adds	r2, r3, #1
 801ef36:	60fa      	str	r2, [r7, #12]
 801ef38:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801ef3c:	701a      	strb	r2, [r3, #0]
 801ef3e:	68bb      	ldr	r3, [r7, #8]
 801ef40:	3b01      	subs	r3, #1
 801ef42:	60bb      	str	r3, [r7, #8]
 801ef44:	68bb      	ldr	r3, [r7, #8]
 801ef46:	2b00      	cmp	r3, #0
 801ef48:	d10f      	bne.n	801ef6a <ee_number+0x142>
 801ef4a:	68fb      	ldr	r3, [r7, #12]
 801ef4c:	e051      	b.n	801eff2 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801ef4e:	68fb      	ldr	r3, [r7, #12]
 801ef50:	1c5a      	adds	r2, r3, #1
 801ef52:	60fa      	str	r2, [r7, #12]
 801ef54:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801ef58:	701a      	strb	r2, [r3, #0]
 801ef5a:	68bb      	ldr	r3, [r7, #8]
 801ef5c:	3b01      	subs	r3, #1
 801ef5e:	60bb      	str	r3, [r7, #8]
 801ef60:	68bb      	ldr	r3, [r7, #8]
 801ef62:	2b00      	cmp	r3, #0
 801ef64:	d101      	bne.n	801ef6a <ee_number+0x142>
 801ef66:	68fb      	ldr	r3, [r7, #12]
 801ef68:	e043      	b.n	801eff2 <ee_number+0x1ca>
 801ef6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ef6c:	1e5a      	subs	r2, r3, #1
 801ef6e:	66ba      	str	r2, [r7, #104]	; 0x68
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	dcec      	bgt.n	801ef4e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801ef74:	e00c      	b.n	801ef90 <ee_number+0x168>
 801ef76:	68fb      	ldr	r3, [r7, #12]
 801ef78:	1c5a      	adds	r2, r3, #1
 801ef7a:	60fa      	str	r2, [r7, #12]
 801ef7c:	2230      	movs	r2, #48	; 0x30
 801ef7e:	701a      	strb	r2, [r3, #0]
 801ef80:	68bb      	ldr	r3, [r7, #8]
 801ef82:	3b01      	subs	r3, #1
 801ef84:	60bb      	str	r3, [r7, #8]
 801ef86:	68bb      	ldr	r3, [r7, #8]
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d101      	bne.n	801ef90 <ee_number+0x168>
 801ef8c:	68fb      	ldr	r3, [r7, #12]
 801ef8e:	e030      	b.n	801eff2 <ee_number+0x1ca>
 801ef90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ef92:	1e5a      	subs	r2, r3, #1
 801ef94:	66fa      	str	r2, [r7, #108]	; 0x6c
 801ef96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ef98:	429a      	cmp	r2, r3
 801ef9a:	dbec      	blt.n	801ef76 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801ef9c:	e010      	b.n	801efc0 <ee_number+0x198>
 801ef9e:	68fb      	ldr	r3, [r7, #12]
 801efa0:	1c5a      	adds	r2, r3, #1
 801efa2:	60fa      	str	r2, [r7, #12]
 801efa4:	f107 0110 	add.w	r1, r7, #16
 801efa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801efaa:	440a      	add	r2, r1
 801efac:	7812      	ldrb	r2, [r2, #0]
 801efae:	701a      	strb	r2, [r3, #0]
 801efb0:	68bb      	ldr	r3, [r7, #8]
 801efb2:	3b01      	subs	r3, #1
 801efb4:	60bb      	str	r3, [r7, #8]
 801efb6:	68bb      	ldr	r3, [r7, #8]
 801efb8:	2b00      	cmp	r3, #0
 801efba:	d101      	bne.n	801efc0 <ee_number+0x198>
 801efbc:	68fb      	ldr	r3, [r7, #12]
 801efbe:	e018      	b.n	801eff2 <ee_number+0x1ca>
 801efc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801efc2:	1e5a      	subs	r2, r3, #1
 801efc4:	657a      	str	r2, [r7, #84]	; 0x54
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	dce9      	bgt.n	801ef9e <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801efca:	e00c      	b.n	801efe6 <ee_number+0x1be>
 801efcc:	68fb      	ldr	r3, [r7, #12]
 801efce:	1c5a      	adds	r2, r3, #1
 801efd0:	60fa      	str	r2, [r7, #12]
 801efd2:	2220      	movs	r2, #32
 801efd4:	701a      	strb	r2, [r3, #0]
 801efd6:	68bb      	ldr	r3, [r7, #8]
 801efd8:	3b01      	subs	r3, #1
 801efda:	60bb      	str	r3, [r7, #8]
 801efdc:	68bb      	ldr	r3, [r7, #8]
 801efde:	2b00      	cmp	r3, #0
 801efe0:	d101      	bne.n	801efe6 <ee_number+0x1be>
 801efe2:	68fb      	ldr	r3, [r7, #12]
 801efe4:	e005      	b.n	801eff2 <ee_number+0x1ca>
 801efe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801efe8:	1e5a      	subs	r2, r3, #1
 801efea:	66ba      	str	r2, [r7, #104]	; 0x68
 801efec:	2b00      	cmp	r3, #0
 801efee:	dced      	bgt.n	801efcc <ee_number+0x1a4>

  return str;
 801eff0:	68fb      	ldr	r3, [r7, #12]
}
 801eff2:	4618      	mov	r0, r3
 801eff4:	3764      	adds	r7, #100	; 0x64
 801eff6:	46bd      	mov	sp, r7
 801eff8:	bc80      	pop	{r7}
 801effa:	4770      	bx	lr
 801effc:	20000138 	.word	0x20000138
 801f000:	2000013c 	.word	0x2000013c

0801f004 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801f004:	b580      	push	{r7, lr}
 801f006:	b092      	sub	sp, #72	; 0x48
 801f008:	af04      	add	r7, sp, #16
 801f00a:	60f8      	str	r0, [r7, #12]
 801f00c:	60b9      	str	r1, [r7, #8]
 801f00e:	607a      	str	r2, [r7, #4]
 801f010:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801f012:	68bb      	ldr	r3, [r7, #8]
 801f014:	2b00      	cmp	r3, #0
 801f016:	dc01      	bgt.n	801f01c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801f018:	2300      	movs	r3, #0
 801f01a:	e13e      	b.n	801f29a <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f01c:	68fb      	ldr	r3, [r7, #12]
 801f01e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f020:	e128      	b.n	801f274 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801f022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	1ad2      	subs	r2, r2, r3
 801f028:	68bb      	ldr	r3, [r7, #8]
 801f02a:	3b01      	subs	r3, #1
 801f02c:	429a      	cmp	r2, r3
 801f02e:	f280 812e 	bge.w	801f28e <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	781b      	ldrb	r3, [r3, #0]
 801f036:	2b25      	cmp	r3, #37	; 0x25
 801f038:	d006      	beq.n	801f048 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801f03a:	687a      	ldr	r2, [r7, #4]
 801f03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f03e:	1c59      	adds	r1, r3, #1
 801f040:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f042:	7812      	ldrb	r2, [r2, #0]
 801f044:	701a      	strb	r2, [r3, #0]
      continue;
 801f046:	e112      	b.n	801f26e <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801f048:	2300      	movs	r3, #0
 801f04a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	3301      	adds	r3, #1
 801f050:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801f052:	687b      	ldr	r3, [r7, #4]
 801f054:	781b      	ldrb	r3, [r3, #0]
 801f056:	2b30      	cmp	r3, #48	; 0x30
 801f058:	d103      	bne.n	801f062 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801f05a:	6a3b      	ldr	r3, [r7, #32]
 801f05c:	f043 0301 	orr.w	r3, r3, #1
 801f060:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801f062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f066:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	781b      	ldrb	r3, [r3, #0]
 801f06c:	2b2f      	cmp	r3, #47	; 0x2f
 801f06e:	d908      	bls.n	801f082 <tiny_vsnprintf_like+0x7e>
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	781b      	ldrb	r3, [r3, #0]
 801f074:	2b39      	cmp	r3, #57	; 0x39
 801f076:	d804      	bhi.n	801f082 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801f078:	1d3b      	adds	r3, r7, #4
 801f07a:	4618      	mov	r0, r3
 801f07c:	f7ff feae 	bl	801eddc <ee_skip_atoi>
 801f080:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801f082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f086:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801f088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f08c:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801f08e:	230a      	movs	r3, #10
 801f090:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	781b      	ldrb	r3, [r3, #0]
 801f096:	3b58      	subs	r3, #88	; 0x58
 801f098:	2b20      	cmp	r3, #32
 801f09a:	f200 8094 	bhi.w	801f1c6 <tiny_vsnprintf_like+0x1c2>
 801f09e:	a201      	add	r2, pc, #4	; (adr r2, 801f0a4 <tiny_vsnprintf_like+0xa0>)
 801f0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f0a4:	0801f1af 	.word	0x0801f1af
 801f0a8:	0801f1c7 	.word	0x0801f1c7
 801f0ac:	0801f1c7 	.word	0x0801f1c7
 801f0b0:	0801f1c7 	.word	0x0801f1c7
 801f0b4:	0801f1c7 	.word	0x0801f1c7
 801f0b8:	0801f1c7 	.word	0x0801f1c7
 801f0bc:	0801f1c7 	.word	0x0801f1c7
 801f0c0:	0801f1c7 	.word	0x0801f1c7
 801f0c4:	0801f1c7 	.word	0x0801f1c7
 801f0c8:	0801f1c7 	.word	0x0801f1c7
 801f0cc:	0801f1c7 	.word	0x0801f1c7
 801f0d0:	0801f133 	.word	0x0801f133
 801f0d4:	0801f1bd 	.word	0x0801f1bd
 801f0d8:	0801f1c7 	.word	0x0801f1c7
 801f0dc:	0801f1c7 	.word	0x0801f1c7
 801f0e0:	0801f1c7 	.word	0x0801f1c7
 801f0e4:	0801f1c7 	.word	0x0801f1c7
 801f0e8:	0801f1bd 	.word	0x0801f1bd
 801f0ec:	0801f1c7 	.word	0x0801f1c7
 801f0f0:	0801f1c7 	.word	0x0801f1c7
 801f0f4:	0801f1c7 	.word	0x0801f1c7
 801f0f8:	0801f1c7 	.word	0x0801f1c7
 801f0fc:	0801f1c7 	.word	0x0801f1c7
 801f100:	0801f1c7 	.word	0x0801f1c7
 801f104:	0801f1c7 	.word	0x0801f1c7
 801f108:	0801f1c7 	.word	0x0801f1c7
 801f10c:	0801f1c7 	.word	0x0801f1c7
 801f110:	0801f153 	.word	0x0801f153
 801f114:	0801f1c7 	.word	0x0801f1c7
 801f118:	0801f213 	.word	0x0801f213
 801f11c:	0801f1c7 	.word	0x0801f1c7
 801f120:	0801f1c7 	.word	0x0801f1c7
 801f124:	0801f1b7 	.word	0x0801f1b7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801f128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f12a:	1c5a      	adds	r2, r3, #1
 801f12c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f12e:	2220      	movs	r2, #32
 801f130:	701a      	strb	r2, [r3, #0]
 801f132:	69fb      	ldr	r3, [r7, #28]
 801f134:	3b01      	subs	r3, #1
 801f136:	61fb      	str	r3, [r7, #28]
 801f138:	69fb      	ldr	r3, [r7, #28]
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	dcf4      	bgt.n	801f128 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801f13e:	683b      	ldr	r3, [r7, #0]
 801f140:	1d1a      	adds	r2, r3, #4
 801f142:	603a      	str	r2, [r7, #0]
 801f144:	6819      	ldr	r1, [r3, #0]
 801f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f148:	1c5a      	adds	r2, r3, #1
 801f14a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f14c:	b2ca      	uxtb	r2, r1
 801f14e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801f150:	e08d      	b.n	801f26e <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801f152:	683b      	ldr	r3, [r7, #0]
 801f154:	1d1a      	adds	r2, r3, #4
 801f156:	603a      	str	r2, [r7, #0]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f15e:	2b00      	cmp	r3, #0
 801f160:	d101      	bne.n	801f166 <tiny_vsnprintf_like+0x162>
 801f162:	4b50      	ldr	r3, [pc, #320]	; (801f2a4 <tiny_vsnprintf_like+0x2a0>)
 801f164:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801f166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f168:	f7e1 f806 	bl	8000178 <strlen>
 801f16c:	4603      	mov	r3, r0
 801f16e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801f170:	e004      	b.n	801f17c <tiny_vsnprintf_like+0x178>
 801f172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f174:	1c5a      	adds	r2, r3, #1
 801f176:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f178:	2220      	movs	r2, #32
 801f17a:	701a      	strb	r2, [r3, #0]
 801f17c:	69fb      	ldr	r3, [r7, #28]
 801f17e:	1e5a      	subs	r2, r3, #1
 801f180:	61fa      	str	r2, [r7, #28]
 801f182:	693a      	ldr	r2, [r7, #16]
 801f184:	429a      	cmp	r2, r3
 801f186:	dbf4      	blt.n	801f172 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801f188:	2300      	movs	r3, #0
 801f18a:	62bb      	str	r3, [r7, #40]	; 0x28
 801f18c:	e00a      	b.n	801f1a4 <tiny_vsnprintf_like+0x1a0>
 801f18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801f190:	1c53      	adds	r3, r2, #1
 801f192:	627b      	str	r3, [r7, #36]	; 0x24
 801f194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f196:	1c59      	adds	r1, r3, #1
 801f198:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f19a:	7812      	ldrb	r2, [r2, #0]
 801f19c:	701a      	strb	r2, [r3, #0]
 801f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1a0:	3301      	adds	r3, #1
 801f1a2:	62bb      	str	r3, [r7, #40]	; 0x28
 801f1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f1a6:	693b      	ldr	r3, [r7, #16]
 801f1a8:	429a      	cmp	r2, r3
 801f1aa:	dbf0      	blt.n	801f18e <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801f1ac:	e05f      	b.n	801f26e <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801f1ae:	6a3b      	ldr	r3, [r7, #32]
 801f1b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f1b4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801f1b6:	2310      	movs	r3, #16
 801f1b8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801f1ba:	e02b      	b.n	801f214 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801f1bc:	6a3b      	ldr	r3, [r7, #32]
 801f1be:	f043 0302 	orr.w	r3, r3, #2
 801f1c2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801f1c4:	e025      	b.n	801f212 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801f1c6:	687b      	ldr	r3, [r7, #4]
 801f1c8:	781b      	ldrb	r3, [r3, #0]
 801f1ca:	2b25      	cmp	r3, #37	; 0x25
 801f1cc:	d004      	beq.n	801f1d8 <tiny_vsnprintf_like+0x1d4>
 801f1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1d0:	1c5a      	adds	r2, r3, #1
 801f1d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f1d4:	2225      	movs	r2, #37	; 0x25
 801f1d6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801f1d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f1da:	68fb      	ldr	r3, [r7, #12]
 801f1dc:	1ad2      	subs	r2, r2, r3
 801f1de:	68bb      	ldr	r3, [r7, #8]
 801f1e0:	3b01      	subs	r3, #1
 801f1e2:	429a      	cmp	r2, r3
 801f1e4:	da16      	bge.n	801f214 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	781b      	ldrb	r3, [r3, #0]
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d006      	beq.n	801f1fc <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801f1ee:	687a      	ldr	r2, [r7, #4]
 801f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f1f2:	1c59      	adds	r1, r3, #1
 801f1f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801f1f6:	7812      	ldrb	r2, [r2, #0]
 801f1f8:	701a      	strb	r2, [r3, #0]
 801f1fa:	e002      	b.n	801f202 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	3b01      	subs	r3, #1
 801f200:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801f202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f204:	68fb      	ldr	r3, [r7, #12]
 801f206:	1ad2      	subs	r2, r2, r3
 801f208:	68bb      	ldr	r3, [r7, #8]
 801f20a:	3b01      	subs	r3, #1
 801f20c:	429a      	cmp	r2, r3
 801f20e:	db2d      	blt.n	801f26c <tiny_vsnprintf_like+0x268>
 801f210:	e000      	b.n	801f214 <tiny_vsnprintf_like+0x210>
        break;
 801f212:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801f214:	697b      	ldr	r3, [r7, #20]
 801f216:	2b6c      	cmp	r3, #108	; 0x6c
 801f218:	d105      	bne.n	801f226 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801f21a:	683b      	ldr	r3, [r7, #0]
 801f21c:	1d1a      	adds	r2, r3, #4
 801f21e:	603a      	str	r2, [r7, #0]
 801f220:	681b      	ldr	r3, [r3, #0]
 801f222:	637b      	str	r3, [r7, #52]	; 0x34
 801f224:	e00f      	b.n	801f246 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801f226:	6a3b      	ldr	r3, [r7, #32]
 801f228:	f003 0302 	and.w	r3, r3, #2
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	d005      	beq.n	801f23c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801f230:	683b      	ldr	r3, [r7, #0]
 801f232:	1d1a      	adds	r2, r3, #4
 801f234:	603a      	str	r2, [r7, #0]
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	637b      	str	r3, [r7, #52]	; 0x34
 801f23a:	e004      	b.n	801f246 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801f23c:	683b      	ldr	r3, [r7, #0]
 801f23e:	1d1a      	adds	r2, r3, #4
 801f240:	603a      	str	r2, [r7, #0]
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801f246:	68bb      	ldr	r3, [r7, #8]
 801f248:	1e5a      	subs	r2, r3, #1
 801f24a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	1acb      	subs	r3, r1, r3
 801f250:	1ad1      	subs	r1, r2, r3
 801f252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f254:	6a3b      	ldr	r3, [r7, #32]
 801f256:	9302      	str	r3, [sp, #8]
 801f258:	69bb      	ldr	r3, [r7, #24]
 801f25a:	9301      	str	r3, [sp, #4]
 801f25c:	69fb      	ldr	r3, [r7, #28]
 801f25e:	9300      	str	r3, [sp, #0]
 801f260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f262:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801f264:	f7ff fde0 	bl	801ee28 <ee_number>
 801f268:	62f8      	str	r0, [r7, #44]	; 0x2c
 801f26a:	e000      	b.n	801f26e <tiny_vsnprintf_like+0x26a>
        continue;
 801f26c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801f26e:	687b      	ldr	r3, [r7, #4]
 801f270:	3301      	adds	r3, #1
 801f272:	607b      	str	r3, [r7, #4]
 801f274:	687b      	ldr	r3, [r7, #4]
 801f276:	781b      	ldrb	r3, [r3, #0]
 801f278:	2b00      	cmp	r3, #0
 801f27a:	f47f aed2 	bne.w	801f022 <tiny_vsnprintf_like+0x1e>
 801f27e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f280:	68fb      	ldr	r3, [r7, #12]
 801f282:	1ad2      	subs	r2, r2, r3
 801f284:	68bb      	ldr	r3, [r7, #8]
 801f286:	3b01      	subs	r3, #1
 801f288:	429a      	cmp	r2, r3
 801f28a:	f6bf aeca 	bge.w	801f022 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f290:	2200      	movs	r2, #0
 801f292:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801f294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	1ad3      	subs	r3, r2, r3
}
 801f29a:	4618      	mov	r0, r3
 801f29c:	3738      	adds	r7, #56	; 0x38
 801f29e:	46bd      	mov	sp, r7
 801f2a0:	bd80      	pop	{r7, pc}
 801f2a2:	bf00      	nop
 801f2a4:	080208dc 	.word	0x080208dc

0801f2a8 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f2a8:	b580      	push	{r7, lr}
 801f2aa:	b088      	sub	sp, #32
 801f2ac:	af00      	add	r7, sp, #0
 801f2ae:	60f8      	str	r0, [r7, #12]
 801f2b0:	60b9      	str	r1, [r7, #8]
 801f2b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2b4:	f3ef 8310 	mrs	r3, PRIMASK
 801f2b8:	617b      	str	r3, [r7, #20]
  return(result);
 801f2ba:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f2bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f2be:	b672      	cpsid	i
}
 801f2c0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f2c2:	68f8      	ldr	r0, [r7, #12]
 801f2c4:	f000 f83e 	bl	801f344 <SEQ_BitPosition>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	4619      	mov	r1, r3
 801f2cc:	4a06      	ldr	r2, [pc, #24]	; (801f2e8 <UTIL_SEQ_RegTask+0x40>)
 801f2ce:	687b      	ldr	r3, [r7, #4]
 801f2d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f2d4:	69fb      	ldr	r3, [r7, #28]
 801f2d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f2d8:	69bb      	ldr	r3, [r7, #24]
 801f2da:	f383 8810 	msr	PRIMASK, r3
}
 801f2de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801f2e0:	bf00      	nop
}
 801f2e2:	3720      	adds	r7, #32
 801f2e4:	46bd      	mov	sp, r7
 801f2e6:	bd80      	pop	{r7, pc}
 801f2e8:	20001c24 	.word	0x20001c24

0801f2ec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801f2ec:	b480      	push	{r7}
 801f2ee:	b087      	sub	sp, #28
 801f2f0:	af00      	add	r7, sp, #0
 801f2f2:	6078      	str	r0, [r7, #4]
 801f2f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f2f6:	f3ef 8310 	mrs	r3, PRIMASK
 801f2fa:	60fb      	str	r3, [r7, #12]
  return(result);
 801f2fc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f2fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f300:	b672      	cpsid	i
}
 801f302:	bf00      	nop

  TaskSet |= TaskId_bm;
 801f304:	4b0d      	ldr	r3, [pc, #52]	; (801f33c <UTIL_SEQ_SetTask+0x50>)
 801f306:	681a      	ldr	r2, [r3, #0]
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	4313      	orrs	r3, r2
 801f30c:	4a0b      	ldr	r2, [pc, #44]	; (801f33c <UTIL_SEQ_SetTask+0x50>)
 801f30e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801f310:	4a0b      	ldr	r2, [pc, #44]	; (801f340 <UTIL_SEQ_SetTask+0x54>)
 801f312:	683b      	ldr	r3, [r7, #0]
 801f314:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	431a      	orrs	r2, r3
 801f31c:	4908      	ldr	r1, [pc, #32]	; (801f340 <UTIL_SEQ_SetTask+0x54>)
 801f31e:	683b      	ldr	r3, [r7, #0]
 801f320:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801f324:	697b      	ldr	r3, [r7, #20]
 801f326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f328:	693b      	ldr	r3, [r7, #16]
 801f32a:	f383 8810 	msr	PRIMASK, r3
}
 801f32e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f330:	bf00      	nop
}
 801f332:	371c      	adds	r7, #28
 801f334:	46bd      	mov	sp, r7
 801f336:	bc80      	pop	{r7}
 801f338:	4770      	bx	lr
 801f33a:	bf00      	nop
 801f33c:	20001c20 	.word	0x20001c20
 801f340:	20001c34 	.word	0x20001c34

0801f344 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801f344:	b480      	push	{r7}
 801f346:	b085      	sub	sp, #20
 801f348:	af00      	add	r7, sp, #0
 801f34a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801f34c:	2300      	movs	r3, #0
 801f34e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801f354:	68bb      	ldr	r3, [r7, #8]
 801f356:	0c1b      	lsrs	r3, r3, #16
 801f358:	041b      	lsls	r3, r3, #16
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d104      	bne.n	801f368 <SEQ_BitPosition+0x24>
 801f35e:	2310      	movs	r3, #16
 801f360:	73fb      	strb	r3, [r7, #15]
 801f362:	68bb      	ldr	r3, [r7, #8]
 801f364:	041b      	lsls	r3, r3, #16
 801f366:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801f368:	68bb      	ldr	r3, [r7, #8]
 801f36a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801f36e:	2b00      	cmp	r3, #0
 801f370:	d105      	bne.n	801f37e <SEQ_BitPosition+0x3a>
 801f372:	7bfb      	ldrb	r3, [r7, #15]
 801f374:	3308      	adds	r3, #8
 801f376:	73fb      	strb	r3, [r7, #15]
 801f378:	68bb      	ldr	r3, [r7, #8]
 801f37a:	021b      	lsls	r3, r3, #8
 801f37c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801f37e:	68bb      	ldr	r3, [r7, #8]
 801f380:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801f384:	2b00      	cmp	r3, #0
 801f386:	d105      	bne.n	801f394 <SEQ_BitPosition+0x50>
 801f388:	7bfb      	ldrb	r3, [r7, #15]
 801f38a:	3304      	adds	r3, #4
 801f38c:	73fb      	strb	r3, [r7, #15]
 801f38e:	68bb      	ldr	r3, [r7, #8]
 801f390:	011b      	lsls	r3, r3, #4
 801f392:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801f394:	68bb      	ldr	r3, [r7, #8]
 801f396:	0f1b      	lsrs	r3, r3, #28
 801f398:	4a06      	ldr	r2, [pc, #24]	; (801f3b4 <SEQ_BitPosition+0x70>)
 801f39a:	5cd2      	ldrb	r2, [r2, r3]
 801f39c:	7bfb      	ldrb	r3, [r7, #15]
 801f39e:	4413      	add	r3, r2
 801f3a0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801f3a2:	7bfb      	ldrb	r3, [r7, #15]
 801f3a4:	f1c3 031f 	rsb	r3, r3, #31
 801f3a8:	b2db      	uxtb	r3, r3
}
 801f3aa:	4618      	mov	r0, r3
 801f3ac:	3714      	adds	r7, #20
 801f3ae:	46bd      	mov	sp, r7
 801f3b0:	bc80      	pop	{r7}
 801f3b2:	4770      	bx	lr
 801f3b4:	08020f8c 	.word	0x08020f8c

0801f3b8 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801f3b8:	b580      	push	{r7, lr}
 801f3ba:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801f3bc:	4b04      	ldr	r3, [pc, #16]	; (801f3d0 <UTIL_TIMER_Init+0x18>)
 801f3be:	2200      	movs	r2, #0
 801f3c0:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801f3c2:	4b04      	ldr	r3, [pc, #16]	; (801f3d4 <UTIL_TIMER_Init+0x1c>)
 801f3c4:	681b      	ldr	r3, [r3, #0]
 801f3c6:	4798      	blx	r3
 801f3c8:	4603      	mov	r3, r0
}
 801f3ca:	4618      	mov	r0, r3
 801f3cc:	bd80      	pop	{r7, pc}
 801f3ce:	bf00      	nop
 801f3d0:	20001c3c 	.word	0x20001c3c
 801f3d4:	08020984 	.word	0x08020984

0801f3d8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801f3d8:	b580      	push	{r7, lr}
 801f3da:	b084      	sub	sp, #16
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	60f8      	str	r0, [r7, #12]
 801f3e0:	60b9      	str	r1, [r7, #8]
 801f3e2:	603b      	str	r3, [r7, #0]
 801f3e4:	4613      	mov	r3, r2
 801f3e6:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d023      	beq.n	801f436 <UTIL_TIMER_Create+0x5e>
 801f3ee:	683b      	ldr	r3, [r7, #0]
 801f3f0:	2b00      	cmp	r3, #0
 801f3f2:	d020      	beq.n	801f436 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801f3f4:	68fb      	ldr	r3, [r7, #12]
 801f3f6:	2200      	movs	r2, #0
 801f3f8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801f3fa:	4b11      	ldr	r3, [pc, #68]	; (801f440 <UTIL_TIMER_Create+0x68>)
 801f3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3fe:	68b8      	ldr	r0, [r7, #8]
 801f400:	4798      	blx	r3
 801f402:	4602      	mov	r2, r0
 801f404:	68fb      	ldr	r3, [r7, #12]
 801f406:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	2200      	movs	r2, #0
 801f40c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801f40e:	68fb      	ldr	r3, [r7, #12]
 801f410:	2200      	movs	r2, #0
 801f412:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	2200      	movs	r2, #0
 801f418:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801f41a:	68fb      	ldr	r3, [r7, #12]
 801f41c:	683a      	ldr	r2, [r7, #0]
 801f41e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801f420:	68fb      	ldr	r3, [r7, #12]
 801f422:	69ba      	ldr	r2, [r7, #24]
 801f424:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	79fa      	ldrb	r2, [r7, #7]
 801f42a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801f42c:	68fb      	ldr	r3, [r7, #12]
 801f42e:	2200      	movs	r2, #0
 801f430:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801f432:	2300      	movs	r3, #0
 801f434:	e000      	b.n	801f438 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801f436:	2301      	movs	r3, #1
  }
}
 801f438:	4618      	mov	r0, r3
 801f43a:	3710      	adds	r7, #16
 801f43c:	46bd      	mov	sp, r7
 801f43e:	bd80      	pop	{r7, pc}
 801f440:	08020984 	.word	0x08020984

0801f444 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801f444:	b580      	push	{r7, lr}
 801f446:	b08a      	sub	sp, #40	; 0x28
 801f448:	af00      	add	r7, sp, #0
 801f44a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f44c:	2300      	movs	r3, #0
 801f44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	2b00      	cmp	r3, #0
 801f456:	d056      	beq.n	801f506 <UTIL_TIMER_Start+0xc2>
 801f458:	6878      	ldr	r0, [r7, #4]
 801f45a:	f000 f9a9 	bl	801f7b0 <TimerExists>
 801f45e:	4603      	mov	r3, r0
 801f460:	f083 0301 	eor.w	r3, r3, #1
 801f464:	b2db      	uxtb	r3, r3
 801f466:	2b00      	cmp	r3, #0
 801f468:	d04d      	beq.n	801f506 <UTIL_TIMER_Start+0xc2>
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	7a5b      	ldrb	r3, [r3, #9]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d149      	bne.n	801f506 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f472:	f3ef 8310 	mrs	r3, PRIMASK
 801f476:	613b      	str	r3, [r7, #16]
  return(result);
 801f478:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f47a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f47c:	b672      	cpsid	i
}
 801f47e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	685b      	ldr	r3, [r3, #4]
 801f484:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801f486:	4b24      	ldr	r3, [pc, #144]	; (801f518 <UTIL_TIMER_Start+0xd4>)
 801f488:	6a1b      	ldr	r3, [r3, #32]
 801f48a:	4798      	blx	r3
 801f48c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801f48e:	6a3a      	ldr	r2, [r7, #32]
 801f490:	69bb      	ldr	r3, [r7, #24]
 801f492:	429a      	cmp	r2, r3
 801f494:	d201      	bcs.n	801f49a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801f496:	69bb      	ldr	r3, [r7, #24]
 801f498:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	6a3a      	ldr	r2, [r7, #32]
 801f49e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	2200      	movs	r2, #0
 801f4a4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	2201      	movs	r2, #1
 801f4aa:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	2200      	movs	r2, #0
 801f4b0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801f4b2:	4b1a      	ldr	r3, [pc, #104]	; (801f51c <UTIL_TIMER_Start+0xd8>)
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	d106      	bne.n	801f4c8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801f4ba:	4b17      	ldr	r3, [pc, #92]	; (801f518 <UTIL_TIMER_Start+0xd4>)
 801f4bc:	691b      	ldr	r3, [r3, #16]
 801f4be:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801f4c0:	6878      	ldr	r0, [r7, #4]
 801f4c2:	f000 f9eb 	bl	801f89c <TimerInsertNewHeadTimer>
 801f4c6:	e017      	b.n	801f4f8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801f4c8:	4b13      	ldr	r3, [pc, #76]	; (801f518 <UTIL_TIMER_Start+0xd4>)
 801f4ca:	699b      	ldr	r3, [r3, #24]
 801f4cc:	4798      	blx	r3
 801f4ce:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	681a      	ldr	r2, [r3, #0]
 801f4d4:	697b      	ldr	r3, [r7, #20]
 801f4d6:	441a      	add	r2, r3
 801f4d8:	687b      	ldr	r3, [r7, #4]
 801f4da:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	681a      	ldr	r2, [r3, #0]
 801f4e0:	4b0e      	ldr	r3, [pc, #56]	; (801f51c <UTIL_TIMER_Start+0xd8>)
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	429a      	cmp	r2, r3
 801f4e8:	d203      	bcs.n	801f4f2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801f4ea:	6878      	ldr	r0, [r7, #4]
 801f4ec:	f000 f9d6 	bl	801f89c <TimerInsertNewHeadTimer>
 801f4f0:	e002      	b.n	801f4f8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801f4f2:	6878      	ldr	r0, [r7, #4]
 801f4f4:	f000 f9a2 	bl	801f83c <TimerInsertTimer>
 801f4f8:	69fb      	ldr	r3, [r7, #28]
 801f4fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f4fc:	68fb      	ldr	r3, [r7, #12]
 801f4fe:	f383 8810 	msr	PRIMASK, r3
}
 801f502:	bf00      	nop
  {
 801f504:	e002      	b.n	801f50c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801f506:	2301      	movs	r3, #1
 801f508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801f50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801f510:	4618      	mov	r0, r3
 801f512:	3728      	adds	r7, #40	; 0x28
 801f514:	46bd      	mov	sp, r7
 801f516:	bd80      	pop	{r7, pc}
 801f518:	08020984 	.word	0x08020984
 801f51c:	20001c3c 	.word	0x20001c3c

0801f520 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801f520:	b580      	push	{r7, lr}
 801f522:	b088      	sub	sp, #32
 801f524:	af00      	add	r7, sp, #0
 801f526:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f528:	2300      	movs	r3, #0
 801f52a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	2b00      	cmp	r3, #0
 801f530:	d05b      	beq.n	801f5ea <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f532:	f3ef 8310 	mrs	r3, PRIMASK
 801f536:	60fb      	str	r3, [r7, #12]
  return(result);
 801f538:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f53a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801f53c:	b672      	cpsid	i
}
 801f53e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801f540:	4b2d      	ldr	r3, [pc, #180]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801f546:	4b2c      	ldr	r3, [pc, #176]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f548:	681b      	ldr	r3, [r3, #0]
 801f54a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	2201      	movs	r2, #1
 801f550:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801f552:	4b29      	ldr	r3, [pc, #164]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f554:	681b      	ldr	r3, [r3, #0]
 801f556:	2b00      	cmp	r3, #0
 801f558:	d041      	beq.n	801f5de <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	2200      	movs	r2, #0
 801f55e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801f560:	4b25      	ldr	r3, [pc, #148]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	687a      	ldr	r2, [r7, #4]
 801f566:	429a      	cmp	r2, r3
 801f568:	d134      	bne.n	801f5d4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801f56a:	4b23      	ldr	r3, [pc, #140]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	2200      	movs	r2, #0
 801f570:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801f572:	4b21      	ldr	r3, [pc, #132]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	695b      	ldr	r3, [r3, #20]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d00a      	beq.n	801f592 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801f57c:	4b1e      	ldr	r3, [pc, #120]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	695b      	ldr	r3, [r3, #20]
 801f582:	4a1d      	ldr	r2, [pc, #116]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f584:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801f586:	4b1c      	ldr	r3, [pc, #112]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f588:	681b      	ldr	r3, [r3, #0]
 801f58a:	4618      	mov	r0, r3
 801f58c:	f000 f92c 	bl	801f7e8 <TimerSetTimeout>
 801f590:	e023      	b.n	801f5da <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801f592:	4b1a      	ldr	r3, [pc, #104]	; (801f5fc <UTIL_TIMER_Stop+0xdc>)
 801f594:	68db      	ldr	r3, [r3, #12]
 801f596:	4798      	blx	r3
            TimerListHead = NULL;
 801f598:	4b17      	ldr	r3, [pc, #92]	; (801f5f8 <UTIL_TIMER_Stop+0xd8>)
 801f59a:	2200      	movs	r2, #0
 801f59c:	601a      	str	r2, [r3, #0]
 801f59e:	e01c      	b.n	801f5da <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801f5a0:	697a      	ldr	r2, [r7, #20]
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	429a      	cmp	r2, r3
 801f5a6:	d110      	bne.n	801f5ca <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801f5a8:	697b      	ldr	r3, [r7, #20]
 801f5aa:	695b      	ldr	r3, [r3, #20]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d006      	beq.n	801f5be <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801f5b0:	697b      	ldr	r3, [r7, #20]
 801f5b2:	695b      	ldr	r3, [r3, #20]
 801f5b4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801f5b6:	69bb      	ldr	r3, [r7, #24]
 801f5b8:	697a      	ldr	r2, [r7, #20]
 801f5ba:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801f5bc:	e00d      	b.n	801f5da <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801f5be:	2300      	movs	r3, #0
 801f5c0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801f5c2:	69bb      	ldr	r3, [r7, #24]
 801f5c4:	697a      	ldr	r2, [r7, #20]
 801f5c6:	615a      	str	r2, [r3, #20]
            break;
 801f5c8:	e007      	b.n	801f5da <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801f5ca:	697b      	ldr	r3, [r7, #20]
 801f5cc:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801f5ce:	697b      	ldr	r3, [r7, #20]
 801f5d0:	695b      	ldr	r3, [r3, #20]
 801f5d2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801f5d4:	697b      	ldr	r3, [r7, #20]
 801f5d6:	2b00      	cmp	r3, #0
 801f5d8:	d1e2      	bne.n	801f5a0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801f5da:	2300      	movs	r3, #0
 801f5dc:	77fb      	strb	r3, [r7, #31]
 801f5de:	693b      	ldr	r3, [r7, #16]
 801f5e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f5e2:	68bb      	ldr	r3, [r7, #8]
 801f5e4:	f383 8810 	msr	PRIMASK, r3
}
 801f5e8:	e001      	b.n	801f5ee <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801f5ea:	2301      	movs	r3, #1
 801f5ec:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801f5ee:	7ffb      	ldrb	r3, [r7, #31]
}
 801f5f0:	4618      	mov	r0, r3
 801f5f2:	3720      	adds	r7, #32
 801f5f4:	46bd      	mov	sp, r7
 801f5f6:	bd80      	pop	{r7, pc}
 801f5f8:	20001c3c 	.word	0x20001c3c
 801f5fc:	08020984 	.word	0x08020984

0801f600 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801f600:	b580      	push	{r7, lr}
 801f602:	b084      	sub	sp, #16
 801f604:	af00      	add	r7, sp, #0
 801f606:	6078      	str	r0, [r7, #4]
 801f608:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f60a:	2300      	movs	r3, #0
 801f60c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801f60e:	687b      	ldr	r3, [r7, #4]
 801f610:	2b00      	cmp	r3, #0
 801f612:	d102      	bne.n	801f61a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801f614:	2301      	movs	r3, #1
 801f616:	73fb      	strb	r3, [r7, #15]
 801f618:	e014      	b.n	801f644 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801f61a:	4b0d      	ldr	r3, [pc, #52]	; (801f650 <UTIL_TIMER_SetPeriod+0x50>)
 801f61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f61e:	6838      	ldr	r0, [r7, #0]
 801f620:	4798      	blx	r3
 801f622:	4602      	mov	r2, r0
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801f628:	6878      	ldr	r0, [r7, #4]
 801f62a:	f000 f8c1 	bl	801f7b0 <TimerExists>
 801f62e:	4603      	mov	r3, r0
 801f630:	2b00      	cmp	r3, #0
 801f632:	d007      	beq.n	801f644 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801f634:	6878      	ldr	r0, [r7, #4]
 801f636:	f7ff ff73 	bl	801f520 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801f63a:	6878      	ldr	r0, [r7, #4]
 801f63c:	f7ff ff02 	bl	801f444 <UTIL_TIMER_Start>
 801f640:	4603      	mov	r3, r0
 801f642:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801f644:	7bfb      	ldrb	r3, [r7, #15]
}
 801f646:	4618      	mov	r0, r3
 801f648:	3710      	adds	r7, #16
 801f64a:	46bd      	mov	sp, r7
 801f64c:	bd80      	pop	{r7, pc}
 801f64e:	bf00      	nop
 801f650:	08020984 	.word	0x08020984

0801f654 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801f654:	b590      	push	{r4, r7, lr}
 801f656:	b089      	sub	sp, #36	; 0x24
 801f658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f65a:	f3ef 8310 	mrs	r3, PRIMASK
 801f65e:	60bb      	str	r3, [r7, #8]
  return(result);
 801f660:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f662:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801f664:	b672      	cpsid	i
}
 801f666:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801f668:	4b38      	ldr	r3, [pc, #224]	; (801f74c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f66a:	695b      	ldr	r3, [r3, #20]
 801f66c:	4798      	blx	r3
 801f66e:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801f670:	4b36      	ldr	r3, [pc, #216]	; (801f74c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f672:	691b      	ldr	r3, [r3, #16]
 801f674:	4798      	blx	r3
 801f676:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801f678:	693a      	ldr	r2, [r7, #16]
 801f67a:	697b      	ldr	r3, [r7, #20]
 801f67c:	1ad3      	subs	r3, r2, r3
 801f67e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801f680:	4b33      	ldr	r3, [pc, #204]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f682:	681b      	ldr	r3, [r3, #0]
 801f684:	2b00      	cmp	r3, #0
 801f686:	d037      	beq.n	801f6f8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801f688:	4b31      	ldr	r3, [pc, #196]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f68a:	681b      	ldr	r3, [r3, #0]
 801f68c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801f68e:	69fb      	ldr	r3, [r7, #28]
 801f690:	681b      	ldr	r3, [r3, #0]
 801f692:	68fa      	ldr	r2, [r7, #12]
 801f694:	429a      	cmp	r2, r3
 801f696:	d206      	bcs.n	801f6a6 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801f698:	69fb      	ldr	r3, [r7, #28]
 801f69a:	681a      	ldr	r2, [r3, #0]
 801f69c:	68fb      	ldr	r3, [r7, #12]
 801f69e:	1ad2      	subs	r2, r2, r3
 801f6a0:	69fb      	ldr	r3, [r7, #28]
 801f6a2:	601a      	str	r2, [r3, #0]
 801f6a4:	e002      	b.n	801f6ac <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801f6a6:	69fb      	ldr	r3, [r7, #28]
 801f6a8:	2200      	movs	r2, #0
 801f6aa:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801f6ac:	69fb      	ldr	r3, [r7, #28]
 801f6ae:	695b      	ldr	r3, [r3, #20]
 801f6b0:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801f6b2:	69fb      	ldr	r3, [r7, #28]
 801f6b4:	2b00      	cmp	r3, #0
 801f6b6:	d1ea      	bne.n	801f68e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801f6b8:	e01e      	b.n	801f6f8 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801f6ba:	4b25      	ldr	r3, [pc, #148]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801f6c0:	4b23      	ldr	r3, [pc, #140]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6c2:	681b      	ldr	r3, [r3, #0]
 801f6c4:	695b      	ldr	r3, [r3, #20]
 801f6c6:	4a22      	ldr	r2, [pc, #136]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6c8:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801f6ca:	69fb      	ldr	r3, [r7, #28]
 801f6cc:	2200      	movs	r2, #0
 801f6ce:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801f6d0:	69fb      	ldr	r3, [r7, #28]
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801f6d6:	69fb      	ldr	r3, [r7, #28]
 801f6d8:	68db      	ldr	r3, [r3, #12]
 801f6da:	69fa      	ldr	r2, [r7, #28]
 801f6dc:	6912      	ldr	r2, [r2, #16]
 801f6de:	4610      	mov	r0, r2
 801f6e0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801f6e2:	69fb      	ldr	r3, [r7, #28]
 801f6e4:	7adb      	ldrb	r3, [r3, #11]
 801f6e6:	2b01      	cmp	r3, #1
 801f6e8:	d106      	bne.n	801f6f8 <UTIL_TIMER_IRQ_Handler+0xa4>
 801f6ea:	69fb      	ldr	r3, [r7, #28]
 801f6ec:	7a9b      	ldrb	r3, [r3, #10]
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d102      	bne.n	801f6f8 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801f6f2:	69f8      	ldr	r0, [r7, #28]
 801f6f4:	f7ff fea6 	bl	801f444 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801f6f8:	4b15      	ldr	r3, [pc, #84]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f6fa:	681b      	ldr	r3, [r3, #0]
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d00d      	beq.n	801f71c <UTIL_TIMER_IRQ_Handler+0xc8>
 801f700:	4b13      	ldr	r3, [pc, #76]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	681b      	ldr	r3, [r3, #0]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d0d7      	beq.n	801f6ba <UTIL_TIMER_IRQ_Handler+0x66>
 801f70a:	4b11      	ldr	r3, [pc, #68]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f70c:	681b      	ldr	r3, [r3, #0]
 801f70e:	681c      	ldr	r4, [r3, #0]
 801f710:	4b0e      	ldr	r3, [pc, #56]	; (801f74c <UTIL_TIMER_IRQ_Handler+0xf8>)
 801f712:	699b      	ldr	r3, [r3, #24]
 801f714:	4798      	blx	r3
 801f716:	4603      	mov	r3, r0
 801f718:	429c      	cmp	r4, r3
 801f71a:	d3ce      	bcc.n	801f6ba <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801f71c:	4b0c      	ldr	r3, [pc, #48]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f71e:	681b      	ldr	r3, [r3, #0]
 801f720:	2b00      	cmp	r3, #0
 801f722:	d009      	beq.n	801f738 <UTIL_TIMER_IRQ_Handler+0xe4>
 801f724:	4b0a      	ldr	r3, [pc, #40]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	7a1b      	ldrb	r3, [r3, #8]
 801f72a:	2b00      	cmp	r3, #0
 801f72c:	d104      	bne.n	801f738 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801f72e:	4b08      	ldr	r3, [pc, #32]	; (801f750 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801f730:	681b      	ldr	r3, [r3, #0]
 801f732:	4618      	mov	r0, r3
 801f734:	f000 f858 	bl	801f7e8 <TimerSetTimeout>
 801f738:	69bb      	ldr	r3, [r7, #24]
 801f73a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f73c:	687b      	ldr	r3, [r7, #4]
 801f73e:	f383 8810 	msr	PRIMASK, r3
}
 801f742:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801f744:	bf00      	nop
 801f746:	3724      	adds	r7, #36	; 0x24
 801f748:	46bd      	mov	sp, r7
 801f74a:	bd90      	pop	{r4, r7, pc}
 801f74c:	08020984 	.word	0x08020984
 801f750:	20001c3c 	.word	0x20001c3c

0801f754 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801f754:	b580      	push	{r7, lr}
 801f756:	b082      	sub	sp, #8
 801f758:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801f75a:	4b06      	ldr	r3, [pc, #24]	; (801f774 <UTIL_TIMER_GetCurrentTime+0x20>)
 801f75c:	69db      	ldr	r3, [r3, #28]
 801f75e:	4798      	blx	r3
 801f760:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801f762:	4b04      	ldr	r3, [pc, #16]	; (801f774 <UTIL_TIMER_GetCurrentTime+0x20>)
 801f764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f766:	6878      	ldr	r0, [r7, #4]
 801f768:	4798      	blx	r3
 801f76a:	4603      	mov	r3, r0
}
 801f76c:	4618      	mov	r0, r3
 801f76e:	3708      	adds	r7, #8
 801f770:	46bd      	mov	sp, r7
 801f772:	bd80      	pop	{r7, pc}
 801f774:	08020984 	.word	0x08020984

0801f778 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801f778:	b580      	push	{r7, lr}
 801f77a:	b084      	sub	sp, #16
 801f77c:	af00      	add	r7, sp, #0
 801f77e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801f780:	4b0a      	ldr	r3, [pc, #40]	; (801f7ac <UTIL_TIMER_GetElapsedTime+0x34>)
 801f782:	69db      	ldr	r3, [r3, #28]
 801f784:	4798      	blx	r3
 801f786:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801f788:	4b08      	ldr	r3, [pc, #32]	; (801f7ac <UTIL_TIMER_GetElapsedTime+0x34>)
 801f78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f78c:	6878      	ldr	r0, [r7, #4]
 801f78e:	4798      	blx	r3
 801f790:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801f792:	4b06      	ldr	r3, [pc, #24]	; (801f7ac <UTIL_TIMER_GetElapsedTime+0x34>)
 801f794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f796:	68f9      	ldr	r1, [r7, #12]
 801f798:	68ba      	ldr	r2, [r7, #8]
 801f79a:	1a8a      	subs	r2, r1, r2
 801f79c:	4610      	mov	r0, r2
 801f79e:	4798      	blx	r3
 801f7a0:	4603      	mov	r3, r0
}
 801f7a2:	4618      	mov	r0, r3
 801f7a4:	3710      	adds	r7, #16
 801f7a6:	46bd      	mov	sp, r7
 801f7a8:	bd80      	pop	{r7, pc}
 801f7aa:	bf00      	nop
 801f7ac:	08020984 	.word	0x08020984

0801f7b0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801f7b0:	b480      	push	{r7}
 801f7b2:	b085      	sub	sp, #20
 801f7b4:	af00      	add	r7, sp, #0
 801f7b6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801f7b8:	4b0a      	ldr	r3, [pc, #40]	; (801f7e4 <TimerExists+0x34>)
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801f7be:	e008      	b.n	801f7d2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801f7c0:	68fa      	ldr	r2, [r7, #12]
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	429a      	cmp	r2, r3
 801f7c6:	d101      	bne.n	801f7cc <TimerExists+0x1c>
    {
      return true;
 801f7c8:	2301      	movs	r3, #1
 801f7ca:	e006      	b.n	801f7da <TimerExists+0x2a>
    }
    cur = cur->Next;
 801f7cc:	68fb      	ldr	r3, [r7, #12]
 801f7ce:	695b      	ldr	r3, [r3, #20]
 801f7d0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801f7d2:	68fb      	ldr	r3, [r7, #12]
 801f7d4:	2b00      	cmp	r3, #0
 801f7d6:	d1f3      	bne.n	801f7c0 <TimerExists+0x10>
  }
  return false;
 801f7d8:	2300      	movs	r3, #0
}
 801f7da:	4618      	mov	r0, r3
 801f7dc:	3714      	adds	r7, #20
 801f7de:	46bd      	mov	sp, r7
 801f7e0:	bc80      	pop	{r7}
 801f7e2:	4770      	bx	lr
 801f7e4:	20001c3c 	.word	0x20001c3c

0801f7e8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801f7e8:	b590      	push	{r4, r7, lr}
 801f7ea:	b085      	sub	sp, #20
 801f7ec:	af00      	add	r7, sp, #0
 801f7ee:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801f7f0:	4b11      	ldr	r3, [pc, #68]	; (801f838 <TimerSetTimeout+0x50>)
 801f7f2:	6a1b      	ldr	r3, [r3, #32]
 801f7f4:	4798      	blx	r3
 801f7f6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	2201      	movs	r2, #1
 801f7fc:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	681c      	ldr	r4, [r3, #0]
 801f802:	4b0d      	ldr	r3, [pc, #52]	; (801f838 <TimerSetTimeout+0x50>)
 801f804:	699b      	ldr	r3, [r3, #24]
 801f806:	4798      	blx	r3
 801f808:	4602      	mov	r2, r0
 801f80a:	68fb      	ldr	r3, [r7, #12]
 801f80c:	4413      	add	r3, r2
 801f80e:	429c      	cmp	r4, r3
 801f810:	d207      	bcs.n	801f822 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801f812:	4b09      	ldr	r3, [pc, #36]	; (801f838 <TimerSetTimeout+0x50>)
 801f814:	699b      	ldr	r3, [r3, #24]
 801f816:	4798      	blx	r3
 801f818:	4602      	mov	r2, r0
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	441a      	add	r2, r3
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801f822:	4b05      	ldr	r3, [pc, #20]	; (801f838 <TimerSetTimeout+0x50>)
 801f824:	689b      	ldr	r3, [r3, #8]
 801f826:	687a      	ldr	r2, [r7, #4]
 801f828:	6812      	ldr	r2, [r2, #0]
 801f82a:	4610      	mov	r0, r2
 801f82c:	4798      	blx	r3
}
 801f82e:	bf00      	nop
 801f830:	3714      	adds	r7, #20
 801f832:	46bd      	mov	sp, r7
 801f834:	bd90      	pop	{r4, r7, pc}
 801f836:	bf00      	nop
 801f838:	08020984 	.word	0x08020984

0801f83c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801f83c:	b480      	push	{r7}
 801f83e:	b085      	sub	sp, #20
 801f840:	af00      	add	r7, sp, #0
 801f842:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801f844:	4b14      	ldr	r3, [pc, #80]	; (801f898 <TimerInsertTimer+0x5c>)
 801f846:	681b      	ldr	r3, [r3, #0]
 801f848:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801f84a:	4b13      	ldr	r3, [pc, #76]	; (801f898 <TimerInsertTimer+0x5c>)
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	695b      	ldr	r3, [r3, #20]
 801f850:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801f852:	e012      	b.n	801f87a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	681a      	ldr	r2, [r3, #0]
 801f858:	68bb      	ldr	r3, [r7, #8]
 801f85a:	681b      	ldr	r3, [r3, #0]
 801f85c:	429a      	cmp	r2, r3
 801f85e:	d905      	bls.n	801f86c <TimerInsertTimer+0x30>
    {
        cur = next;
 801f860:	68bb      	ldr	r3, [r7, #8]
 801f862:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801f864:	68bb      	ldr	r3, [r7, #8]
 801f866:	695b      	ldr	r3, [r3, #20]
 801f868:	60bb      	str	r3, [r7, #8]
 801f86a:	e006      	b.n	801f87a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801f86c:	68fb      	ldr	r3, [r7, #12]
 801f86e:	687a      	ldr	r2, [r7, #4]
 801f870:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	68ba      	ldr	r2, [r7, #8]
 801f876:	615a      	str	r2, [r3, #20]
        return;
 801f878:	e009      	b.n	801f88e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801f87a:	68fb      	ldr	r3, [r7, #12]
 801f87c:	695b      	ldr	r3, [r3, #20]
 801f87e:	2b00      	cmp	r3, #0
 801f880:	d1e8      	bne.n	801f854 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	687a      	ldr	r2, [r7, #4]
 801f886:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801f888:	687b      	ldr	r3, [r7, #4]
 801f88a:	2200      	movs	r2, #0
 801f88c:	615a      	str	r2, [r3, #20]
}
 801f88e:	3714      	adds	r7, #20
 801f890:	46bd      	mov	sp, r7
 801f892:	bc80      	pop	{r7}
 801f894:	4770      	bx	lr
 801f896:	bf00      	nop
 801f898:	20001c3c 	.word	0x20001c3c

0801f89c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801f89c:	b580      	push	{r7, lr}
 801f89e:	b084      	sub	sp, #16
 801f8a0:	af00      	add	r7, sp, #0
 801f8a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801f8a4:	4b0b      	ldr	r3, [pc, #44]	; (801f8d4 <TimerInsertNewHeadTimer+0x38>)
 801f8a6:	681b      	ldr	r3, [r3, #0]
 801f8a8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801f8aa:	68fb      	ldr	r3, [r7, #12]
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d002      	beq.n	801f8b6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801f8b0:	68fb      	ldr	r3, [r7, #12]
 801f8b2:	2200      	movs	r2, #0
 801f8b4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	68fa      	ldr	r2, [r7, #12]
 801f8ba:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801f8bc:	4a05      	ldr	r2, [pc, #20]	; (801f8d4 <TimerInsertNewHeadTimer+0x38>)
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801f8c2:	4b04      	ldr	r3, [pc, #16]	; (801f8d4 <TimerInsertNewHeadTimer+0x38>)
 801f8c4:	681b      	ldr	r3, [r3, #0]
 801f8c6:	4618      	mov	r0, r3
 801f8c8:	f7ff ff8e 	bl	801f7e8 <TimerSetTimeout>
}
 801f8cc:	bf00      	nop
 801f8ce:	3710      	adds	r7, #16
 801f8d0:	46bd      	mov	sp, r7
 801f8d2:	bd80      	pop	{r7, pc}
 801f8d4:	20001c3c 	.word	0x20001c3c

0801f8d8 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801f8d8:	b580      	push	{r7, lr}
 801f8da:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801f8dc:	2218      	movs	r2, #24
 801f8de:	2100      	movs	r1, #0
 801f8e0:	4807      	ldr	r0, [pc, #28]	; (801f900 <UTIL_ADV_TRACE_Init+0x28>)
 801f8e2:	f7ff f902 	bl	801eaea <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801f8e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801f8ea:	2100      	movs	r1, #0
 801f8ec:	4805      	ldr	r0, [pc, #20]	; (801f904 <UTIL_ADV_TRACE_Init+0x2c>)
 801f8ee:	f7ff f8fc 	bl	801eaea <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801f8f2:	4b05      	ldr	r3, [pc, #20]	; (801f908 <UTIL_ADV_TRACE_Init+0x30>)
 801f8f4:	681b      	ldr	r3, [r3, #0]
 801f8f6:	4805      	ldr	r0, [pc, #20]	; (801f90c <UTIL_ADV_TRACE_Init+0x34>)
 801f8f8:	4798      	blx	r3
 801f8fa:	4603      	mov	r3, r0
}
 801f8fc:	4618      	mov	r0, r3
 801f8fe:	bd80      	pop	{r7, pc}
 801f900:	20001c40 	.word	0x20001c40
 801f904:	20001c58 	.word	0x20001c58
 801f908:	080209c4 	.word	0x080209c4
 801f90c:	0801fb79 	.word	0x0801fb79

0801f910 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801f910:	b480      	push	{r7}
 801f912:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801f914:	4b06      	ldr	r3, [pc, #24]	; (801f930 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801f916:	8a5a      	ldrh	r2, [r3, #18]
 801f918:	4b05      	ldr	r3, [pc, #20]	; (801f930 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801f91a:	8a1b      	ldrh	r3, [r3, #16]
 801f91c:	429a      	cmp	r2, r3
 801f91e:	d101      	bne.n	801f924 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801f920:	2301      	movs	r3, #1
 801f922:	e000      	b.n	801f926 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801f924:	2300      	movs	r3, #0
}
 801f926:	4618      	mov	r0, r3
 801f928:	46bd      	mov	sp, r7
 801f92a:	bc80      	pop	{r7}
 801f92c:	4770      	bx	lr
 801f92e:	bf00      	nop
 801f930:	20001c40 	.word	0x20001c40

0801f934 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801f934:	b408      	push	{r3}
 801f936:	b580      	push	{r7, lr}
 801f938:	b08d      	sub	sp, #52	; 0x34
 801f93a:	af00      	add	r7, sp, #0
 801f93c:	60f8      	str	r0, [r7, #12]
 801f93e:	60b9      	str	r1, [r7, #8]
 801f940:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801f942:	2300      	movs	r3, #0
 801f944:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801f946:	2300      	movs	r3, #0
 801f948:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801f94a:	4b37      	ldr	r3, [pc, #220]	; (801fa28 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801f94c:	7a1b      	ldrb	r3, [r3, #8]
 801f94e:	461a      	mov	r2, r3
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	4293      	cmp	r3, r2
 801f954:	d902      	bls.n	801f95c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801f956:	f06f 0304 	mvn.w	r3, #4
 801f95a:	e05e      	b.n	801fa1a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801f95c:	4b32      	ldr	r3, [pc, #200]	; (801fa28 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801f95e:	68da      	ldr	r2, [r3, #12]
 801f960:	68bb      	ldr	r3, [r7, #8]
 801f962:	4013      	ands	r3, r2
 801f964:	68ba      	ldr	r2, [r7, #8]
 801f966:	429a      	cmp	r2, r3
 801f968:	d002      	beq.n	801f970 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801f96a:	f06f 0305 	mvn.w	r3, #5
 801f96e:	e054      	b.n	801fa1a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801f970:	4b2d      	ldr	r3, [pc, #180]	; (801fa28 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801f972:	685b      	ldr	r3, [r3, #4]
 801f974:	2b00      	cmp	r3, #0
 801f976:	d00a      	beq.n	801f98e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801f978:	687b      	ldr	r3, [r7, #4]
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d007      	beq.n	801f98e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801f97e:	4b2a      	ldr	r3, [pc, #168]	; (801fa28 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801f980:	685b      	ldr	r3, [r3, #4]
 801f982:	f107 0116 	add.w	r1, r7, #22
 801f986:	f107 0218 	add.w	r2, r7, #24
 801f98a:	4610      	mov	r0, r2
 801f98c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801f98e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801f992:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801f994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f996:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f998:	f44f 7100 	mov.w	r1, #512	; 0x200
 801f99c:	4823      	ldr	r0, [pc, #140]	; (801fa2c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801f99e:	f7ff fb31 	bl	801f004 <tiny_vsnprintf_like>
 801f9a2:	4603      	mov	r3, r0
 801f9a4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801f9a6:	f000 f9f1 	bl	801fd8c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801f9aa:	8afa      	ldrh	r2, [r7, #22]
 801f9ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f9ae:	4413      	add	r3, r2
 801f9b0:	b29b      	uxth	r3, r3
 801f9b2:	f107 0214 	add.w	r2, r7, #20
 801f9b6:	4611      	mov	r1, r2
 801f9b8:	4618      	mov	r0, r3
 801f9ba:	f000 f969 	bl	801fc90 <TRACE_AllocateBufer>
 801f9be:	4603      	mov	r3, r0
 801f9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f9c4:	d025      	beq.n	801fa12 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801f9c6:	2300      	movs	r3, #0
 801f9c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801f9ca:	e00e      	b.n	801f9ea <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801f9cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801f9ce:	8aba      	ldrh	r2, [r7, #20]
 801f9d0:	3330      	adds	r3, #48	; 0x30
 801f9d2:	443b      	add	r3, r7
 801f9d4:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801f9d8:	4b15      	ldr	r3, [pc, #84]	; (801fa30 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801f9da:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801f9dc:	8abb      	ldrh	r3, [r7, #20]
 801f9de:	3301      	adds	r3, #1
 801f9e0:	b29b      	uxth	r3, r3
 801f9e2:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801f9e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801f9e6:	3301      	adds	r3, #1
 801f9e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801f9ea:	8afb      	ldrh	r3, [r7, #22]
 801f9ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801f9ee:	429a      	cmp	r2, r3
 801f9f0:	d3ec      	bcc.n	801f9cc <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801f9f2:	8abb      	ldrh	r3, [r7, #20]
 801f9f4:	461a      	mov	r2, r3
 801f9f6:	4b0e      	ldr	r3, [pc, #56]	; (801fa30 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801f9f8:	18d0      	adds	r0, r2, r3
 801f9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801f9fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 801fa02:	f7ff faff 	bl	801f004 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801fa06:	f000 f9df 	bl	801fdc8 <TRACE_UnLock>

    return TRACE_Send();
 801fa0a:	f000 f831 	bl	801fa70 <TRACE_Send>
 801fa0e:	4603      	mov	r3, r0
 801fa10:	e003      	b.n	801fa1a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801fa12:	f000 f9d9 	bl	801fdc8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801fa16:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801fa1a:	4618      	mov	r0, r3
 801fa1c:	3734      	adds	r7, #52	; 0x34
 801fa1e:	46bd      	mov	sp, r7
 801fa20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fa24:	b001      	add	sp, #4
 801fa26:	4770      	bx	lr
 801fa28:	20001c40 	.word	0x20001c40
 801fa2c:	20002058 	.word	0x20002058
 801fa30:	20001c58 	.word	0x20001c58

0801fa34 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801fa34:	b480      	push	{r7}
 801fa36:	b083      	sub	sp, #12
 801fa38:	af00      	add	r7, sp, #0
 801fa3a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801fa3c:	4a03      	ldr	r2, [pc, #12]	; (801fa4c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	6053      	str	r3, [r2, #4]
}
 801fa42:	bf00      	nop
 801fa44:	370c      	adds	r7, #12
 801fa46:	46bd      	mov	sp, r7
 801fa48:	bc80      	pop	{r7}
 801fa4a:	4770      	bx	lr
 801fa4c:	20001c40 	.word	0x20001c40

0801fa50 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801fa50:	b480      	push	{r7}
 801fa52:	b083      	sub	sp, #12
 801fa54:	af00      	add	r7, sp, #0
 801fa56:	4603      	mov	r3, r0
 801fa58:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801fa5a:	4a04      	ldr	r2, [pc, #16]	; (801fa6c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801fa5c:	79fb      	ldrb	r3, [r7, #7]
 801fa5e:	7213      	strb	r3, [r2, #8]
}
 801fa60:	bf00      	nop
 801fa62:	370c      	adds	r7, #12
 801fa64:	46bd      	mov	sp, r7
 801fa66:	bc80      	pop	{r7}
 801fa68:	4770      	bx	lr
 801fa6a:	bf00      	nop
 801fa6c:	20001c40 	.word	0x20001c40

0801fa70 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801fa70:	b580      	push	{r7, lr}
 801fa72:	b088      	sub	sp, #32
 801fa74:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801fa76:	2300      	movs	r3, #0
 801fa78:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801fa7a:	2300      	movs	r3, #0
 801fa7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fa7e:	f3ef 8310 	mrs	r3, PRIMASK
 801fa82:	613b      	str	r3, [r7, #16]
  return(result);
 801fa84:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fa86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801fa88:	b672      	cpsid	i
}
 801fa8a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801fa8c:	f000 f9ba 	bl	801fe04 <TRACE_IsLocked>
 801fa90:	4603      	mov	r3, r0
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	d15d      	bne.n	801fb52 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801fa96:	f000 f979 	bl	801fd8c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801fa9a:	4b34      	ldr	r3, [pc, #208]	; (801fb6c <TRACE_Send+0xfc>)
 801fa9c:	8a1a      	ldrh	r2, [r3, #16]
 801fa9e:	4b33      	ldr	r3, [pc, #204]	; (801fb6c <TRACE_Send+0xfc>)
 801faa0:	8a5b      	ldrh	r3, [r3, #18]
 801faa2:	429a      	cmp	r2, r3
 801faa4:	d04d      	beq.n	801fb42 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801faa6:	4b31      	ldr	r3, [pc, #196]	; (801fb6c <TRACE_Send+0xfc>)
 801faa8:	789b      	ldrb	r3, [r3, #2]
 801faaa:	2b01      	cmp	r3, #1
 801faac:	d117      	bne.n	801fade <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801faae:	4b2f      	ldr	r3, [pc, #188]	; (801fb6c <TRACE_Send+0xfc>)
 801fab0:	881a      	ldrh	r2, [r3, #0]
 801fab2:	4b2e      	ldr	r3, [pc, #184]	; (801fb6c <TRACE_Send+0xfc>)
 801fab4:	8a1b      	ldrh	r3, [r3, #16]
 801fab6:	1ad3      	subs	r3, r2, r3
 801fab8:	b29a      	uxth	r2, r3
 801faba:	4b2c      	ldr	r3, [pc, #176]	; (801fb6c <TRACE_Send+0xfc>)
 801fabc:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801fabe:	4b2b      	ldr	r3, [pc, #172]	; (801fb6c <TRACE_Send+0xfc>)
 801fac0:	2202      	movs	r2, #2
 801fac2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801fac4:	4b29      	ldr	r3, [pc, #164]	; (801fb6c <TRACE_Send+0xfc>)
 801fac6:	2200      	movs	r2, #0
 801fac8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801faca:	4b28      	ldr	r3, [pc, #160]	; (801fb6c <TRACE_Send+0xfc>)
 801facc:	8a9b      	ldrh	r3, [r3, #20]
 801face:	2b00      	cmp	r3, #0
 801fad0:	d105      	bne.n	801fade <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fad2:	4b26      	ldr	r3, [pc, #152]	; (801fb6c <TRACE_Send+0xfc>)
 801fad4:	2200      	movs	r2, #0
 801fad6:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fad8:	4b24      	ldr	r3, [pc, #144]	; (801fb6c <TRACE_Send+0xfc>)
 801fada:	2200      	movs	r2, #0
 801fadc:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801fade:	4b23      	ldr	r3, [pc, #140]	; (801fb6c <TRACE_Send+0xfc>)
 801fae0:	789b      	ldrb	r3, [r3, #2]
 801fae2:	2b00      	cmp	r3, #0
 801fae4:	d115      	bne.n	801fb12 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801fae6:	4b21      	ldr	r3, [pc, #132]	; (801fb6c <TRACE_Send+0xfc>)
 801fae8:	8a5a      	ldrh	r2, [r3, #18]
 801faea:	4b20      	ldr	r3, [pc, #128]	; (801fb6c <TRACE_Send+0xfc>)
 801faec:	8a1b      	ldrh	r3, [r3, #16]
 801faee:	429a      	cmp	r2, r3
 801faf0:	d908      	bls.n	801fb04 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801faf2:	4b1e      	ldr	r3, [pc, #120]	; (801fb6c <TRACE_Send+0xfc>)
 801faf4:	8a5a      	ldrh	r2, [r3, #18]
 801faf6:	4b1d      	ldr	r3, [pc, #116]	; (801fb6c <TRACE_Send+0xfc>)
 801faf8:	8a1b      	ldrh	r3, [r3, #16]
 801fafa:	1ad3      	subs	r3, r2, r3
 801fafc:	b29a      	uxth	r2, r3
 801fafe:	4b1b      	ldr	r3, [pc, #108]	; (801fb6c <TRACE_Send+0xfc>)
 801fb00:	829a      	strh	r2, [r3, #20]
 801fb02:	e006      	b.n	801fb12 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801fb04:	4b19      	ldr	r3, [pc, #100]	; (801fb6c <TRACE_Send+0xfc>)
 801fb06:	8a1b      	ldrh	r3, [r3, #16]
 801fb08:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fb0c:	b29a      	uxth	r2, r3
 801fb0e:	4b17      	ldr	r3, [pc, #92]	; (801fb6c <TRACE_Send+0xfc>)
 801fb10:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801fb12:	4b16      	ldr	r3, [pc, #88]	; (801fb6c <TRACE_Send+0xfc>)
 801fb14:	8a1b      	ldrh	r3, [r3, #16]
 801fb16:	461a      	mov	r2, r3
 801fb18:	4b15      	ldr	r3, [pc, #84]	; (801fb70 <TRACE_Send+0x100>)
 801fb1a:	4413      	add	r3, r2
 801fb1c:	61bb      	str	r3, [r7, #24]
 801fb1e:	697b      	ldr	r3, [r7, #20]
 801fb20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fb22:	68fb      	ldr	r3, [r7, #12]
 801fb24:	f383 8810 	msr	PRIMASK, r3
}
 801fb28:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801fb2a:	f7e2 fc8f 	bl	800244c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801fb2e:	4b11      	ldr	r3, [pc, #68]	; (801fb74 <TRACE_Send+0x104>)
 801fb30:	68db      	ldr	r3, [r3, #12]
 801fb32:	4a0e      	ldr	r2, [pc, #56]	; (801fb6c <TRACE_Send+0xfc>)
 801fb34:	8a92      	ldrh	r2, [r2, #20]
 801fb36:	4611      	mov	r1, r2
 801fb38:	69b8      	ldr	r0, [r7, #24]
 801fb3a:	4798      	blx	r3
 801fb3c:	4603      	mov	r3, r0
 801fb3e:	77fb      	strb	r3, [r7, #31]
 801fb40:	e00d      	b.n	801fb5e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801fb42:	f000 f941 	bl	801fdc8 <TRACE_UnLock>
 801fb46:	697b      	ldr	r3, [r7, #20]
 801fb48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fb4a:	68bb      	ldr	r3, [r7, #8]
 801fb4c:	f383 8810 	msr	PRIMASK, r3
}
 801fb50:	e005      	b.n	801fb5e <TRACE_Send+0xee>
 801fb52:	697b      	ldr	r3, [r7, #20]
 801fb54:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	f383 8810 	msr	PRIMASK, r3
}
 801fb5c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801fb5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801fb62:	4618      	mov	r0, r3
 801fb64:	3720      	adds	r7, #32
 801fb66:	46bd      	mov	sp, r7
 801fb68:	bd80      	pop	{r7, pc}
 801fb6a:	bf00      	nop
 801fb6c:	20001c40 	.word	0x20001c40
 801fb70:	20001c58 	.word	0x20001c58
 801fb74:	080209c4 	.word	0x080209c4

0801fb78 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801fb78:	b580      	push	{r7, lr}
 801fb7a:	b088      	sub	sp, #32
 801fb7c:	af00      	add	r7, sp, #0
 801fb7e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801fb80:	2300      	movs	r3, #0
 801fb82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fb84:	f3ef 8310 	mrs	r3, PRIMASK
 801fb88:	617b      	str	r3, [r7, #20]
  return(result);
 801fb8a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fb8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801fb8e:	b672      	cpsid	i
}
 801fb90:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801fb92:	4b3c      	ldr	r3, [pc, #240]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fb94:	789b      	ldrb	r3, [r3, #2]
 801fb96:	2b02      	cmp	r3, #2
 801fb98:	d106      	bne.n	801fba8 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fb9a:	4b3a      	ldr	r3, [pc, #232]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fb9c:	2200      	movs	r2, #0
 801fb9e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fba0:	4b38      	ldr	r3, [pc, #224]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fba2:	2200      	movs	r2, #0
 801fba4:	821a      	strh	r2, [r3, #16]
 801fba6:	e00a      	b.n	801fbbe <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801fba8:	4b36      	ldr	r3, [pc, #216]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbaa:	8a1a      	ldrh	r2, [r3, #16]
 801fbac:	4b35      	ldr	r3, [pc, #212]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbae:	8a9b      	ldrh	r3, [r3, #20]
 801fbb0:	4413      	add	r3, r2
 801fbb2:	b29b      	uxth	r3, r3
 801fbb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801fbb8:	b29a      	uxth	r2, r3
 801fbba:	4b32      	ldr	r3, [pc, #200]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbbc:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801fbbe:	4b31      	ldr	r3, [pc, #196]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbc0:	8a1a      	ldrh	r2, [r3, #16]
 801fbc2:	4b30      	ldr	r3, [pc, #192]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbc4:	8a5b      	ldrh	r3, [r3, #18]
 801fbc6:	429a      	cmp	r2, r3
 801fbc8:	d04d      	beq.n	801fc66 <TRACE_TxCpltCallback+0xee>
 801fbca:	4b2e      	ldr	r3, [pc, #184]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbcc:	8adb      	ldrh	r3, [r3, #22]
 801fbce:	2b01      	cmp	r3, #1
 801fbd0:	d149      	bne.n	801fc66 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801fbd2:	4b2c      	ldr	r3, [pc, #176]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbd4:	789b      	ldrb	r3, [r3, #2]
 801fbd6:	2b01      	cmp	r3, #1
 801fbd8:	d117      	bne.n	801fc0a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801fbda:	4b2a      	ldr	r3, [pc, #168]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbdc:	881a      	ldrh	r2, [r3, #0]
 801fbde:	4b29      	ldr	r3, [pc, #164]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbe0:	8a1b      	ldrh	r3, [r3, #16]
 801fbe2:	1ad3      	subs	r3, r2, r3
 801fbe4:	b29a      	uxth	r2, r3
 801fbe6:	4b27      	ldr	r3, [pc, #156]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbe8:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801fbea:	4b26      	ldr	r3, [pc, #152]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbec:	2202      	movs	r2, #2
 801fbee:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801fbf0:	4b24      	ldr	r3, [pc, #144]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbf2:	2200      	movs	r2, #0
 801fbf4:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801fbf6:	4b23      	ldr	r3, [pc, #140]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fbf8:	8a9b      	ldrh	r3, [r3, #20]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d105      	bne.n	801fc0a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801fbfe:	4b21      	ldr	r3, [pc, #132]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc00:	2200      	movs	r2, #0
 801fc02:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801fc04:	4b1f      	ldr	r3, [pc, #124]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc06:	2200      	movs	r2, #0
 801fc08:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801fc0a:	4b1e      	ldr	r3, [pc, #120]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc0c:	789b      	ldrb	r3, [r3, #2]
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d115      	bne.n	801fc3e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801fc12:	4b1c      	ldr	r3, [pc, #112]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc14:	8a5a      	ldrh	r2, [r3, #18]
 801fc16:	4b1b      	ldr	r3, [pc, #108]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc18:	8a1b      	ldrh	r3, [r3, #16]
 801fc1a:	429a      	cmp	r2, r3
 801fc1c:	d908      	bls.n	801fc30 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801fc1e:	4b19      	ldr	r3, [pc, #100]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc20:	8a5a      	ldrh	r2, [r3, #18]
 801fc22:	4b18      	ldr	r3, [pc, #96]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc24:	8a1b      	ldrh	r3, [r3, #16]
 801fc26:	1ad3      	subs	r3, r2, r3
 801fc28:	b29a      	uxth	r2, r3
 801fc2a:	4b16      	ldr	r3, [pc, #88]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc2c:	829a      	strh	r2, [r3, #20]
 801fc2e:	e006      	b.n	801fc3e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801fc30:	4b14      	ldr	r3, [pc, #80]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc32:	8a1b      	ldrh	r3, [r3, #16]
 801fc34:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fc38:	b29a      	uxth	r2, r3
 801fc3a:	4b12      	ldr	r3, [pc, #72]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc3c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801fc3e:	4b11      	ldr	r3, [pc, #68]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc40:	8a1b      	ldrh	r3, [r3, #16]
 801fc42:	461a      	mov	r2, r3
 801fc44:	4b10      	ldr	r3, [pc, #64]	; (801fc88 <TRACE_TxCpltCallback+0x110>)
 801fc46:	4413      	add	r3, r2
 801fc48:	61fb      	str	r3, [r7, #28]
 801fc4a:	69bb      	ldr	r3, [r7, #24]
 801fc4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fc4e:	693b      	ldr	r3, [r7, #16]
 801fc50:	f383 8810 	msr	PRIMASK, r3
}
 801fc54:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801fc56:	4b0d      	ldr	r3, [pc, #52]	; (801fc8c <TRACE_TxCpltCallback+0x114>)
 801fc58:	68db      	ldr	r3, [r3, #12]
 801fc5a:	4a0a      	ldr	r2, [pc, #40]	; (801fc84 <TRACE_TxCpltCallback+0x10c>)
 801fc5c:	8a92      	ldrh	r2, [r2, #20]
 801fc5e:	4611      	mov	r1, r2
 801fc60:	69f8      	ldr	r0, [r7, #28]
 801fc62:	4798      	blx	r3
 801fc64:	e00a      	b.n	801fc7c <TRACE_TxCpltCallback+0x104>
 801fc66:	69bb      	ldr	r3, [r7, #24]
 801fc68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fc6a:	68fb      	ldr	r3, [r7, #12]
 801fc6c:	f383 8810 	msr	PRIMASK, r3
}
 801fc70:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801fc72:	f7e2 fbf3 	bl	800245c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801fc76:	f000 f8a7 	bl	801fdc8 <TRACE_UnLock>
  }
}
 801fc7a:	bf00      	nop
 801fc7c:	bf00      	nop
 801fc7e:	3720      	adds	r7, #32
 801fc80:	46bd      	mov	sp, r7
 801fc82:	bd80      	pop	{r7, pc}
 801fc84:	20001c40 	.word	0x20001c40
 801fc88:	20001c58 	.word	0x20001c58
 801fc8c:	080209c4 	.word	0x080209c4

0801fc90 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801fc90:	b480      	push	{r7}
 801fc92:	b087      	sub	sp, #28
 801fc94:	af00      	add	r7, sp, #0
 801fc96:	4603      	mov	r3, r0
 801fc98:	6039      	str	r1, [r7, #0]
 801fc9a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801fc9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fca0:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fca2:	f3ef 8310 	mrs	r3, PRIMASK
 801fca6:	60fb      	str	r3, [r7, #12]
  return(result);
 801fca8:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fcaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801fcac:	b672      	cpsid	i
}
 801fcae:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801fcb0:	4b35      	ldr	r3, [pc, #212]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fcb2:	8a5a      	ldrh	r2, [r3, #18]
 801fcb4:	4b34      	ldr	r3, [pc, #208]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fcb6:	8a1b      	ldrh	r3, [r3, #16]
 801fcb8:	429a      	cmp	r2, r3
 801fcba:	d11b      	bne.n	801fcf4 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801fcbc:	4b32      	ldr	r3, [pc, #200]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fcbe:	8a5b      	ldrh	r3, [r3, #18]
 801fcc0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fcc4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801fcc6:	88fa      	ldrh	r2, [r7, #6]
 801fcc8:	8afb      	ldrh	r3, [r7, #22]
 801fcca:	429a      	cmp	r2, r3
 801fccc:	d33a      	bcc.n	801fd44 <TRACE_AllocateBufer+0xb4>
 801fcce:	4b2e      	ldr	r3, [pc, #184]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fcd0:	8a1b      	ldrh	r3, [r3, #16]
 801fcd2:	88fa      	ldrh	r2, [r7, #6]
 801fcd4:	429a      	cmp	r2, r3
 801fcd6:	d235      	bcs.n	801fd44 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801fcd8:	4b2b      	ldr	r3, [pc, #172]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fcda:	2201      	movs	r2, #1
 801fcdc:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801fcde:	4b2a      	ldr	r3, [pc, #168]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fce0:	8a5a      	ldrh	r2, [r3, #18]
 801fce2:	4b29      	ldr	r3, [pc, #164]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fce4:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801fce6:	4b28      	ldr	r3, [pc, #160]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fce8:	8a1b      	ldrh	r3, [r3, #16]
 801fcea:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801fcec:	4b26      	ldr	r3, [pc, #152]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fcee:	2200      	movs	r2, #0
 801fcf0:	825a      	strh	r2, [r3, #18]
 801fcf2:	e027      	b.n	801fd44 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801fcf4:	4b24      	ldr	r3, [pc, #144]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fcf6:	8a5a      	ldrh	r2, [r3, #18]
 801fcf8:	4b23      	ldr	r3, [pc, #140]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fcfa:	8a1b      	ldrh	r3, [r3, #16]
 801fcfc:	429a      	cmp	r2, r3
 801fcfe:	d91b      	bls.n	801fd38 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801fd00:	4b21      	ldr	r3, [pc, #132]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd02:	8a5b      	ldrh	r3, [r3, #18]
 801fd04:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801fd08:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801fd0a:	88fa      	ldrh	r2, [r7, #6]
 801fd0c:	8afb      	ldrh	r3, [r7, #22]
 801fd0e:	429a      	cmp	r2, r3
 801fd10:	d318      	bcc.n	801fd44 <TRACE_AllocateBufer+0xb4>
 801fd12:	4b1d      	ldr	r3, [pc, #116]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd14:	8a1b      	ldrh	r3, [r3, #16]
 801fd16:	88fa      	ldrh	r2, [r7, #6]
 801fd18:	429a      	cmp	r2, r3
 801fd1a:	d213      	bcs.n	801fd44 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801fd1c:	4b1a      	ldr	r3, [pc, #104]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd1e:	2201      	movs	r2, #1
 801fd20:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801fd22:	4b19      	ldr	r3, [pc, #100]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd24:	8a5a      	ldrh	r2, [r3, #18]
 801fd26:	4b18      	ldr	r3, [pc, #96]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd28:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801fd2a:	4b17      	ldr	r3, [pc, #92]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd2c:	8a1b      	ldrh	r3, [r3, #16]
 801fd2e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801fd30:	4b15      	ldr	r3, [pc, #84]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd32:	2200      	movs	r2, #0
 801fd34:	825a      	strh	r2, [r3, #18]
 801fd36:	e005      	b.n	801fd44 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801fd38:	4b13      	ldr	r3, [pc, #76]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd3a:	8a1a      	ldrh	r2, [r3, #16]
 801fd3c:	4b12      	ldr	r3, [pc, #72]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd3e:	8a5b      	ldrh	r3, [r3, #18]
 801fd40:	1ad3      	subs	r3, r2, r3
 801fd42:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801fd44:	8afa      	ldrh	r2, [r7, #22]
 801fd46:	88fb      	ldrh	r3, [r7, #6]
 801fd48:	429a      	cmp	r2, r3
 801fd4a:	d90f      	bls.n	801fd6c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801fd4c:	4b0e      	ldr	r3, [pc, #56]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd4e:	8a5a      	ldrh	r2, [r3, #18]
 801fd50:	683b      	ldr	r3, [r7, #0]
 801fd52:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801fd54:	4b0c      	ldr	r3, [pc, #48]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd56:	8a5a      	ldrh	r2, [r3, #18]
 801fd58:	88fb      	ldrh	r3, [r7, #6]
 801fd5a:	4413      	add	r3, r2
 801fd5c:	b29b      	uxth	r3, r3
 801fd5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801fd62:	b29a      	uxth	r2, r3
 801fd64:	4b08      	ldr	r3, [pc, #32]	; (801fd88 <TRACE_AllocateBufer+0xf8>)
 801fd66:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801fd68:	2300      	movs	r3, #0
 801fd6a:	82bb      	strh	r3, [r7, #20]
 801fd6c:	693b      	ldr	r3, [r7, #16]
 801fd6e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fd70:	68bb      	ldr	r3, [r7, #8]
 801fd72:	f383 8810 	msr	PRIMASK, r3
}
 801fd76:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801fd78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801fd7c:	4618      	mov	r0, r3
 801fd7e:	371c      	adds	r7, #28
 801fd80:	46bd      	mov	sp, r7
 801fd82:	bc80      	pop	{r7}
 801fd84:	4770      	bx	lr
 801fd86:	bf00      	nop
 801fd88:	20001c40 	.word	0x20001c40

0801fd8c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801fd8c:	b480      	push	{r7}
 801fd8e:	b085      	sub	sp, #20
 801fd90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fd92:	f3ef 8310 	mrs	r3, PRIMASK
 801fd96:	607b      	str	r3, [r7, #4]
  return(result);
 801fd98:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fd9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801fd9c:	b672      	cpsid	i
}
 801fd9e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801fda0:	4b08      	ldr	r3, [pc, #32]	; (801fdc4 <TRACE_Lock+0x38>)
 801fda2:	8adb      	ldrh	r3, [r3, #22]
 801fda4:	3301      	adds	r3, #1
 801fda6:	b29a      	uxth	r2, r3
 801fda8:	4b06      	ldr	r3, [pc, #24]	; (801fdc4 <TRACE_Lock+0x38>)
 801fdaa:	82da      	strh	r2, [r3, #22]
 801fdac:	68fb      	ldr	r3, [r7, #12]
 801fdae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fdb0:	68bb      	ldr	r3, [r7, #8]
 801fdb2:	f383 8810 	msr	PRIMASK, r3
}
 801fdb6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801fdb8:	bf00      	nop
 801fdba:	3714      	adds	r7, #20
 801fdbc:	46bd      	mov	sp, r7
 801fdbe:	bc80      	pop	{r7}
 801fdc0:	4770      	bx	lr
 801fdc2:	bf00      	nop
 801fdc4:	20001c40 	.word	0x20001c40

0801fdc8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801fdc8:	b480      	push	{r7}
 801fdca:	b085      	sub	sp, #20
 801fdcc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fdce:	f3ef 8310 	mrs	r3, PRIMASK
 801fdd2:	607b      	str	r3, [r7, #4]
  return(result);
 801fdd4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801fdd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801fdd8:	b672      	cpsid	i
}
 801fdda:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801fddc:	4b08      	ldr	r3, [pc, #32]	; (801fe00 <TRACE_UnLock+0x38>)
 801fdde:	8adb      	ldrh	r3, [r3, #22]
 801fde0:	3b01      	subs	r3, #1
 801fde2:	b29a      	uxth	r2, r3
 801fde4:	4b06      	ldr	r3, [pc, #24]	; (801fe00 <TRACE_UnLock+0x38>)
 801fde6:	82da      	strh	r2, [r3, #22]
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fdec:	68bb      	ldr	r3, [r7, #8]
 801fdee:	f383 8810 	msr	PRIMASK, r3
}
 801fdf2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801fdf4:	bf00      	nop
 801fdf6:	3714      	adds	r7, #20
 801fdf8:	46bd      	mov	sp, r7
 801fdfa:	bc80      	pop	{r7}
 801fdfc:	4770      	bx	lr
 801fdfe:	bf00      	nop
 801fe00:	20001c40 	.word	0x20001c40

0801fe04 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801fe04:	b480      	push	{r7}
 801fe06:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801fe08:	4b05      	ldr	r3, [pc, #20]	; (801fe20 <TRACE_IsLocked+0x1c>)
 801fe0a:	8adb      	ldrh	r3, [r3, #22]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	bf14      	ite	ne
 801fe10:	2301      	movne	r3, #1
 801fe12:	2300      	moveq	r3, #0
 801fe14:	b2db      	uxtb	r3, r3
}
 801fe16:	4618      	mov	r0, r3
 801fe18:	46bd      	mov	sp, r7
 801fe1a:	bc80      	pop	{r7}
 801fe1c:	4770      	bx	lr
 801fe1e:	bf00      	nop
 801fe20:	20001c40 	.word	0x20001c40
 801fe24:	00000000 	.word	0x00000000

0801fe28 <floor>:
 801fe28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801fe2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fe30:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801fe34:	2e13      	cmp	r6, #19
 801fe36:	460b      	mov	r3, r1
 801fe38:	4607      	mov	r7, r0
 801fe3a:	460c      	mov	r4, r1
 801fe3c:	4605      	mov	r5, r0
 801fe3e:	dc32      	bgt.n	801fea6 <floor+0x7e>
 801fe40:	2e00      	cmp	r6, #0
 801fe42:	da14      	bge.n	801fe6e <floor+0x46>
 801fe44:	a334      	add	r3, pc, #208	; (adr r3, 801ff18 <floor+0xf0>)
 801fe46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe4a:	f7e0 f9a3 	bl	8000194 <__adddf3>
 801fe4e:	2200      	movs	r2, #0
 801fe50:	2300      	movs	r3, #0
 801fe52:	f7e0 fde5 	bl	8000a20 <__aeabi_dcmpgt>
 801fe56:	b138      	cbz	r0, 801fe68 <floor+0x40>
 801fe58:	2c00      	cmp	r4, #0
 801fe5a:	da56      	bge.n	801ff0a <floor+0xe2>
 801fe5c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801fe60:	4325      	orrs	r5, r4
 801fe62:	d055      	beq.n	801ff10 <floor+0xe8>
 801fe64:	4c2e      	ldr	r4, [pc, #184]	; (801ff20 <floor+0xf8>)
 801fe66:	2500      	movs	r5, #0
 801fe68:	4623      	mov	r3, r4
 801fe6a:	462f      	mov	r7, r5
 801fe6c:	e025      	b.n	801feba <floor+0x92>
 801fe6e:	4a2d      	ldr	r2, [pc, #180]	; (801ff24 <floor+0xfc>)
 801fe70:	fa42 f806 	asr.w	r8, r2, r6
 801fe74:	ea01 0208 	and.w	r2, r1, r8
 801fe78:	4302      	orrs	r2, r0
 801fe7a:	d01e      	beq.n	801feba <floor+0x92>
 801fe7c:	a326      	add	r3, pc, #152	; (adr r3, 801ff18 <floor+0xf0>)
 801fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe82:	f7e0 f987 	bl	8000194 <__adddf3>
 801fe86:	2200      	movs	r2, #0
 801fe88:	2300      	movs	r3, #0
 801fe8a:	f7e0 fdc9 	bl	8000a20 <__aeabi_dcmpgt>
 801fe8e:	2800      	cmp	r0, #0
 801fe90:	d0ea      	beq.n	801fe68 <floor+0x40>
 801fe92:	2c00      	cmp	r4, #0
 801fe94:	bfbe      	ittt	lt
 801fe96:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801fe9a:	4133      	asrlt	r3, r6
 801fe9c:	18e4      	addlt	r4, r4, r3
 801fe9e:	ea24 0408 	bic.w	r4, r4, r8
 801fea2:	2500      	movs	r5, #0
 801fea4:	e7e0      	b.n	801fe68 <floor+0x40>
 801fea6:	2e33      	cmp	r6, #51	; 0x33
 801fea8:	dd0b      	ble.n	801fec2 <floor+0x9a>
 801feaa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801feae:	d104      	bne.n	801feba <floor+0x92>
 801feb0:	4602      	mov	r2, r0
 801feb2:	f7e0 f96f 	bl	8000194 <__adddf3>
 801feb6:	4607      	mov	r7, r0
 801feb8:	460b      	mov	r3, r1
 801feba:	4638      	mov	r0, r7
 801febc:	4619      	mov	r1, r3
 801febe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fec2:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801fec6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801feca:	fa28 f802 	lsr.w	r8, r8, r2
 801fece:	ea10 0f08 	tst.w	r0, r8
 801fed2:	d0f2      	beq.n	801feba <floor+0x92>
 801fed4:	a310      	add	r3, pc, #64	; (adr r3, 801ff18 <floor+0xf0>)
 801fed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801feda:	f7e0 f95b 	bl	8000194 <__adddf3>
 801fede:	2200      	movs	r2, #0
 801fee0:	2300      	movs	r3, #0
 801fee2:	f7e0 fd9d 	bl	8000a20 <__aeabi_dcmpgt>
 801fee6:	2800      	cmp	r0, #0
 801fee8:	d0be      	beq.n	801fe68 <floor+0x40>
 801feea:	2c00      	cmp	r4, #0
 801feec:	da0a      	bge.n	801ff04 <floor+0xdc>
 801feee:	2e14      	cmp	r6, #20
 801fef0:	d101      	bne.n	801fef6 <floor+0xce>
 801fef2:	3401      	adds	r4, #1
 801fef4:	e006      	b.n	801ff04 <floor+0xdc>
 801fef6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801fefa:	2301      	movs	r3, #1
 801fefc:	40b3      	lsls	r3, r6
 801fefe:	441d      	add	r5, r3
 801ff00:	42af      	cmp	r7, r5
 801ff02:	d8f6      	bhi.n	801fef2 <floor+0xca>
 801ff04:	ea25 0508 	bic.w	r5, r5, r8
 801ff08:	e7ae      	b.n	801fe68 <floor+0x40>
 801ff0a:	2500      	movs	r5, #0
 801ff0c:	462c      	mov	r4, r5
 801ff0e:	e7ab      	b.n	801fe68 <floor+0x40>
 801ff10:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ff14:	e7a8      	b.n	801fe68 <floor+0x40>
 801ff16:	bf00      	nop
 801ff18:	8800759c 	.word	0x8800759c
 801ff1c:	7e37e43c 	.word	0x7e37e43c
 801ff20:	bff00000 	.word	0xbff00000
 801ff24:	000fffff 	.word	0x000fffff

0801ff28 <memset>:
 801ff28:	4402      	add	r2, r0
 801ff2a:	4603      	mov	r3, r0
 801ff2c:	4293      	cmp	r3, r2
 801ff2e:	d100      	bne.n	801ff32 <memset+0xa>
 801ff30:	4770      	bx	lr
 801ff32:	f803 1b01 	strb.w	r1, [r3], #1
 801ff36:	e7f9      	b.n	801ff2c <memset+0x4>

0801ff38 <__libc_init_array>:
 801ff38:	b570      	push	{r4, r5, r6, lr}
 801ff3a:	4d0d      	ldr	r5, [pc, #52]	; (801ff70 <__libc_init_array+0x38>)
 801ff3c:	4c0d      	ldr	r4, [pc, #52]	; (801ff74 <__libc_init_array+0x3c>)
 801ff3e:	1b64      	subs	r4, r4, r5
 801ff40:	10a4      	asrs	r4, r4, #2
 801ff42:	2600      	movs	r6, #0
 801ff44:	42a6      	cmp	r6, r4
 801ff46:	d109      	bne.n	801ff5c <__libc_init_array+0x24>
 801ff48:	4d0b      	ldr	r5, [pc, #44]	; (801ff78 <__libc_init_array+0x40>)
 801ff4a:	4c0c      	ldr	r4, [pc, #48]	; (801ff7c <__libc_init_array+0x44>)
 801ff4c:	f000 f826 	bl	801ff9c <_init>
 801ff50:	1b64      	subs	r4, r4, r5
 801ff52:	10a4      	asrs	r4, r4, #2
 801ff54:	2600      	movs	r6, #0
 801ff56:	42a6      	cmp	r6, r4
 801ff58:	d105      	bne.n	801ff66 <__libc_init_array+0x2e>
 801ff5a:	bd70      	pop	{r4, r5, r6, pc}
 801ff5c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ff60:	4798      	blx	r3
 801ff62:	3601      	adds	r6, #1
 801ff64:	e7ee      	b.n	801ff44 <__libc_init_array+0xc>
 801ff66:	f855 3b04 	ldr.w	r3, [r5], #4
 801ff6a:	4798      	blx	r3
 801ff6c:	3601      	adds	r6, #1
 801ff6e:	e7f2      	b.n	801ff56 <__libc_init_array+0x1e>
 801ff70:	0802107c 	.word	0x0802107c
 801ff74:	0802107c 	.word	0x0802107c
 801ff78:	0802107c 	.word	0x0802107c
 801ff7c:	08021080 	.word	0x08021080

0801ff80 <memcpy>:
 801ff80:	440a      	add	r2, r1
 801ff82:	4291      	cmp	r1, r2
 801ff84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ff88:	d100      	bne.n	801ff8c <memcpy+0xc>
 801ff8a:	4770      	bx	lr
 801ff8c:	b510      	push	{r4, lr}
 801ff8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ff92:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ff96:	4291      	cmp	r1, r2
 801ff98:	d1f9      	bne.n	801ff8e <memcpy+0xe>
 801ff9a:	bd10      	pop	{r4, pc}

0801ff9c <_init>:
 801ff9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff9e:	bf00      	nop
 801ffa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ffa2:	bc08      	pop	{r3}
 801ffa4:	469e      	mov	lr, r3
 801ffa6:	4770      	bx	lr

0801ffa8 <_fini>:
 801ffa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ffaa:	bf00      	nop
 801ffac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ffae:	bc08      	pop	{r3}
 801ffb0:	469e      	mov	lr, r3
 801ffb2:	4770      	bx	lr
