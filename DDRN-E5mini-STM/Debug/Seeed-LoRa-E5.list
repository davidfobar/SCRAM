
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de98  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc4  0801dfd0  0801dfd0  0002dfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801ef94  0801ef94  0002ef94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f06c  0801f06c  00030140  2**0
                  CONTENTS
  5 .ARM          00000008  0801f06c  0801f06c  0002f06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f074  0801f074  00030140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801f074  0801f074  0002f074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f078  0801f078  0002f078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000140  20000000  0801f07c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002110  20000140  0801f1bc  00030140  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002250  0801f1bc  00032250  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003016a  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004b697  00000000  00000000  000301ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b616  00000000  00000000  0007b844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000038c8  00000000  00000000  00086e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b3e  00000000  00000000  0008a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d640  00000000  00000000  0008d266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00044564  00000000  00000000  000ba8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4cdb  00000000  00000000  000fee0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000eb70  00000000  00000000  001d3ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  001e2658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000140 	.word	0x20000140
 8000154:	00000000 	.word	0x00000000
 8000158:	0801dfb8 	.word	0x0801dfb8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000144 	.word	0x20000144
 8000174:	0801dfb8 	.word	0x0801dfb8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_frsub>:
 8000a84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a88:	e002      	b.n	8000a90 <__addsf3>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_fsub>:
 8000a8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a90 <__addsf3>:
 8000a90:	0042      	lsls	r2, r0, #1
 8000a92:	bf1f      	itttt	ne
 8000a94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a98:	ea92 0f03 	teqne	r2, r3
 8000a9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa4:	d06a      	beq.n	8000b7c <__addsf3+0xec>
 8000aa6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aaa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aae:	bfc1      	itttt	gt
 8000ab0:	18d2      	addgt	r2, r2, r3
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	4048      	eorgt	r0, r1
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	bfb8      	it	lt
 8000aba:	425b      	neglt	r3, r3
 8000abc:	2b19      	cmp	r3, #25
 8000abe:	bf88      	it	hi
 8000ac0:	4770      	bxhi	lr
 8000ac2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4240      	negne	r0, r0
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ada:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4249      	negne	r1, r1
 8000ae2:	ea92 0f03 	teq	r2, r3
 8000ae6:	d03f      	beq.n	8000b68 <__addsf3+0xd8>
 8000ae8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aec:	fa41 fc03 	asr.w	ip, r1, r3
 8000af0:	eb10 000c 	adds.w	r0, r0, ip
 8000af4:	f1c3 0320 	rsb	r3, r3, #32
 8000af8:	fa01 f103 	lsl.w	r1, r1, r3
 8000afc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	d502      	bpl.n	8000b08 <__addsf3+0x78>
 8000b02:	4249      	negs	r1, r1
 8000b04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b0c:	d313      	bcc.n	8000b36 <__addsf3+0xa6>
 8000b0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b12:	d306      	bcc.n	8000b22 <__addsf3+0x92>
 8000b14:	0840      	lsrs	r0, r0, #1
 8000b16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1a:	f102 0201 	add.w	r2, r2, #1
 8000b1e:	2afe      	cmp	r2, #254	; 0xfe
 8000b20:	d251      	bcs.n	8000bc6 <__addsf3+0x136>
 8000b22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2a:	bf08      	it	eq
 8000b2c:	f020 0001 	biceq.w	r0, r0, #1
 8000b30:	ea40 0003 	orr.w	r0, r0, r3
 8000b34:	4770      	bx	lr
 8000b36:	0049      	lsls	r1, r1, #1
 8000b38:	eb40 0000 	adc.w	r0, r0, r0
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b44:	d2ed      	bcs.n	8000b22 <__addsf3+0x92>
 8000b46:	fab0 fc80 	clz	ip, r0
 8000b4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b56:	bfaa      	itet	ge
 8000b58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b5c:	4252      	neglt	r2, r2
 8000b5e:	4318      	orrge	r0, r3
 8000b60:	bfbc      	itt	lt
 8000b62:	40d0      	lsrlt	r0, r2
 8000b64:	4318      	orrlt	r0, r3
 8000b66:	4770      	bx	lr
 8000b68:	f092 0f00 	teq	r2, #0
 8000b6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b70:	bf06      	itte	eq
 8000b72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b76:	3201      	addeq	r2, #1
 8000b78:	3b01      	subne	r3, #1
 8000b7a:	e7b5      	b.n	8000ae8 <__addsf3+0x58>
 8000b7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b84:	bf18      	it	ne
 8000b86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8a:	d021      	beq.n	8000bd0 <__addsf3+0x140>
 8000b8c:	ea92 0f03 	teq	r2, r3
 8000b90:	d004      	beq.n	8000b9c <__addsf3+0x10c>
 8000b92:	f092 0f00 	teq	r2, #0
 8000b96:	bf08      	it	eq
 8000b98:	4608      	moveq	r0, r1
 8000b9a:	4770      	bx	lr
 8000b9c:	ea90 0f01 	teq	r0, r1
 8000ba0:	bf1c      	itt	ne
 8000ba2:	2000      	movne	r0, #0
 8000ba4:	4770      	bxne	lr
 8000ba6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000baa:	d104      	bne.n	8000bb6 <__addsf3+0x126>
 8000bac:	0040      	lsls	r0, r0, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	4770      	bx	lr
 8000bb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bba:	bf3c      	itt	cc
 8000bbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bxcc	lr
 8000bc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	4770      	bx	lr
 8000bd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd4:	bf16      	itet	ne
 8000bd6:	4608      	movne	r0, r1
 8000bd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bdc:	4601      	movne	r1, r0
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	bf06      	itte	eq
 8000be2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be6:	ea90 0f01 	teqeq	r0, r1
 8000bea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_ui2f>:
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e004      	b.n	8000c00 <__aeabi_i2f+0x8>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_i2f>:
 8000bf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bfc:	bf48      	it	mi
 8000bfe:	4240      	negmi	r0, r0
 8000c00:	ea5f 0c00 	movs.w	ip, r0
 8000c04:	bf08      	it	eq
 8000c06:	4770      	bxeq	lr
 8000c08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	e01c      	b.n	8000c4e <__aeabi_l2f+0x2a>

08000c14 <__aeabi_ul2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e00a      	b.n	8000c38 <__aeabi_l2f+0x14>
 8000c22:	bf00      	nop

08000c24 <__aeabi_l2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__aeabi_l2f+0x14>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	ea5f 0c01 	movs.w	ip, r1
 8000c3c:	bf02      	ittt	eq
 8000c3e:	4684      	moveq	ip, r0
 8000c40:	4601      	moveq	r1, r0
 8000c42:	2000      	moveq	r0, #0
 8000c44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c48:	bf08      	it	eq
 8000c4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c52:	fabc f28c 	clz	r2, ip
 8000c56:	3a08      	subs	r2, #8
 8000c58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c5c:	db10      	blt.n	8000c80 <__aeabi_l2f+0x5c>
 8000c5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c62:	4463      	add	r3, ip
 8000c64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c70:	fa20 f202 	lsr.w	r2, r0, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	f020 0001 	biceq.w	r0, r0, #1
 8000c7e:	4770      	bx	lr
 8000c80:	f102 0220 	add.w	r2, r2, #32
 8000c84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c90:	fa21 f202 	lsr.w	r2, r1, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_fmul>:
 8000ca0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca8:	bf1e      	ittt	ne
 8000caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cae:	ea92 0f0c 	teqne	r2, ip
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d06f      	beq.n	8000d98 <__aeabi_fmul+0xf8>
 8000cb8:	441a      	add	r2, r3
 8000cba:	ea80 0c01 	eor.w	ip, r0, r1
 8000cbe:	0240      	lsls	r0, r0, #9
 8000cc0:	bf18      	it	ne
 8000cc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc6:	d01e      	beq.n	8000d06 <__aeabi_fmul+0x66>
 8000cc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ccc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cdc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce0:	bf3e      	ittt	cc
 8000ce2:	0049      	lslcc	r1, r1, #1
 8000ce4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce8:	005b      	lslcc	r3, r3, #1
 8000cea:	ea40 0001 	orr.w	r0, r0, r1
 8000cee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf2:	2afd      	cmp	r2, #253	; 0xfd
 8000cf4:	d81d      	bhi.n	8000d32 <__aeabi_fmul+0x92>
 8000cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0e:	bf08      	it	eq
 8000d10:	0249      	lsleq	r1, r1, #9
 8000d12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1a:	3a7f      	subs	r2, #127	; 0x7f
 8000d1c:	bfc2      	ittt	gt
 8000d1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d26:	4770      	bxgt	lr
 8000d28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	dc5d      	bgt.n	8000df0 <__aeabi_fmul+0x150>
 8000d34:	f112 0f19 	cmn.w	r2, #25
 8000d38:	bfdc      	itt	le
 8000d3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3e:	4770      	bxle	lr
 8000d40:	f1c2 0200 	rsb	r2, r2, #0
 8000d44:	0041      	lsls	r1, r0, #1
 8000d46:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4a:	f1c2 0220 	rsb	r2, r2, #32
 8000d4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d52:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d56:	f140 0000 	adc.w	r0, r0, #0
 8000d5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5e:	bf08      	it	eq
 8000d60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d64:	4770      	bx	lr
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0040      	lsleq	r0, r0, #1
 8000d72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d76:	3a01      	subeq	r2, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xce>
 8000d7a:	ea40 000c 	orr.w	r0, r0, ip
 8000d7e:	f093 0f00 	teq	r3, #0
 8000d82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0049      	lsleq	r1, r1, #1
 8000d8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8e:	3b01      	subeq	r3, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xe6>
 8000d92:	ea41 010c 	orr.w	r1, r1, ip
 8000d96:	e78f      	b.n	8000cb8 <__aeabi_fmul+0x18>
 8000d98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	bf18      	it	ne
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d00a      	beq.n	8000dbe <__aeabi_fmul+0x11e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1d8      	bne.n	8000d66 <__aeabi_fmul+0xc6>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	bf17      	itett	ne
 8000dc4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc8:	4608      	moveq	r0, r1
 8000dca:	f091 0f00 	teqne	r1, #0
 8000dce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd2:	d014      	beq.n	8000dfe <__aeabi_fmul+0x15e>
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	d101      	bne.n	8000dde <__aeabi_fmul+0x13e>
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	d10f      	bne.n	8000dfe <__aeabi_fmul+0x15e>
 8000dde:	ea93 0f0c 	teq	r3, ip
 8000de2:	d103      	bne.n	8000dec <__aeabi_fmul+0x14c>
 8000de4:	024b      	lsls	r3, r1, #9
 8000de6:	bf18      	it	ne
 8000de8:	4608      	movne	r0, r1
 8000dea:	d108      	bne.n	8000dfe <__aeabi_fmul+0x15e>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dfc:	4770      	bx	lr
 8000dfe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e06:	4770      	bx	lr

08000e08 <__aeabi_fdiv>:
 8000e08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e10:	bf1e      	ittt	ne
 8000e12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e16:	ea92 0f0c 	teqne	r2, ip
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d069      	beq.n	8000ef4 <__aeabi_fdiv+0xec>
 8000e20:	eba2 0203 	sub.w	r2, r2, r3
 8000e24:	ea80 0c01 	eor.w	ip, r0, r1
 8000e28:	0249      	lsls	r1, r1, #9
 8000e2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2e:	d037      	beq.n	8000ea0 <__aeabi_fdiv+0x98>
 8000e30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	428b      	cmp	r3, r1
 8000e42:	bf38      	it	cc
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	bf24      	itt	cs
 8000e52:	1a5b      	subcs	r3, r3, r1
 8000e54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6a:	bf24      	itt	cs
 8000e6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e78:	bf24      	itt	cs
 8000e7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8a:	d1e0      	bne.n	8000e4e <__aeabi_fdiv+0x46>
 8000e8c:	2afd      	cmp	r2, #253	; 0xfd
 8000e8e:	f63f af50 	bhi.w	8000d32 <__aeabi_fmul+0x92>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea8:	327f      	adds	r2, #127	; 0x7f
 8000eaa:	bfc2      	ittt	gt
 8000eac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb4:	4770      	bxgt	lr
 8000eb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	3a01      	subs	r2, #1
 8000ec0:	e737      	b.n	8000d32 <__aeabi_fmul+0x92>
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xc2>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xda>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e795      	b.n	8000e20 <__aeabi_fdiv+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d108      	bne.n	8000f10 <__aeabi_fdiv+0x108>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	f47f af7d 	bne.w	8000dfe <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	f47f af70 	bne.w	8000dec <__aeabi_fmul+0x14c>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e776      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f10:	ea93 0f0c 	teq	r3, ip
 8000f14:	d104      	bne.n	8000f20 <__aeabi_fdiv+0x118>
 8000f16:	024b      	lsls	r3, r1, #9
 8000f18:	f43f af4c 	beq.w	8000db4 <__aeabi_fmul+0x114>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e76e      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f24:	bf18      	it	ne
 8000f26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2a:	d1ca      	bne.n	8000ec2 <__aeabi_fdiv+0xba>
 8000f2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f30:	f47f af5c 	bne.w	8000dec <__aeabi_fmul+0x14c>
 8000f34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f38:	f47f af3c 	bne.w	8000db4 <__aeabi_fmul+0x114>
 8000f3c:	e75f      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_f2iz>:
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f48:	d30f      	bcc.n	8000f6a <__aeabi_f2iz+0x2a>
 8000f4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f52:	d90d      	bls.n	8000f70 <__aeabi_f2iz+0x30>
 8000f54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	bf18      	it	ne
 8000f66:	4240      	negne	r0, r0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2iz+0x3a>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d105      	bne.n	8000f86 <__aeabi_f2iz+0x46>
 8000f7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f7e:	bf08      	it	eq
 8000f80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_f2uiz>:
 8000f8c:	0042      	lsls	r2, r0, #1
 8000f8e:	d20e      	bcs.n	8000fae <__aeabi_f2uiz+0x22>
 8000f90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f94:	d30b      	bcc.n	8000fae <__aeabi_f2uiz+0x22>
 8000f96:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f9a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f9e:	d409      	bmi.n	8000fb4 <__aeabi_f2uiz+0x28>
 8000fa0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fac:	4770      	bx	lr
 8000fae:	f04f 0000 	mov.w	r0, #0
 8000fb2:	4770      	bx	lr
 8000fb4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb8:	d101      	bne.n	8000fbe <__aeabi_f2uiz+0x32>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	d102      	bne.n	8000fc4 <__aeabi_f2uiz+0x38>
 8000fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc2:	4770      	bx	lr
 8000fc4:	f04f 0000 	mov.w	r0, #0
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <__aeabi_uldivmod>:
 8000fcc:	b953      	cbnz	r3, 8000fe4 <__aeabi_uldivmod+0x18>
 8000fce:	b94a      	cbnz	r2, 8000fe4 <__aeabi_uldivmod+0x18>
 8000fd0:	2900      	cmp	r1, #0
 8000fd2:	bf08      	it	eq
 8000fd4:	2800      	cmpeq	r0, #0
 8000fd6:	bf1c      	itt	ne
 8000fd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000fdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000fe0:	f000 b970 	b.w	80012c4 <__aeabi_idiv0>
 8000fe4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fe8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fec:	f000 f806 	bl	8000ffc <__udivmoddi4>
 8000ff0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ff8:	b004      	add	sp, #16
 8000ffa:	4770      	bx	lr

08000ffc <__udivmoddi4>:
 8000ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001000:	9e08      	ldr	r6, [sp, #32]
 8001002:	460d      	mov	r5, r1
 8001004:	4604      	mov	r4, r0
 8001006:	460f      	mov	r7, r1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d14a      	bne.n	80010a2 <__udivmoddi4+0xa6>
 800100c:	428a      	cmp	r2, r1
 800100e:	4694      	mov	ip, r2
 8001010:	d965      	bls.n	80010de <__udivmoddi4+0xe2>
 8001012:	fab2 f382 	clz	r3, r2
 8001016:	b143      	cbz	r3, 800102a <__udivmoddi4+0x2e>
 8001018:	fa02 fc03 	lsl.w	ip, r2, r3
 800101c:	f1c3 0220 	rsb	r2, r3, #32
 8001020:	409f      	lsls	r7, r3
 8001022:	fa20 f202 	lsr.w	r2, r0, r2
 8001026:	4317      	orrs	r7, r2
 8001028:	409c      	lsls	r4, r3
 800102a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800102e:	fa1f f58c 	uxth.w	r5, ip
 8001032:	fbb7 f1fe 	udiv	r1, r7, lr
 8001036:	0c22      	lsrs	r2, r4, #16
 8001038:	fb0e 7711 	mls	r7, lr, r1, r7
 800103c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001040:	fb01 f005 	mul.w	r0, r1, r5
 8001044:	4290      	cmp	r0, r2
 8001046:	d90a      	bls.n	800105e <__udivmoddi4+0x62>
 8001048:	eb1c 0202 	adds.w	r2, ip, r2
 800104c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8001050:	f080 811b 	bcs.w	800128a <__udivmoddi4+0x28e>
 8001054:	4290      	cmp	r0, r2
 8001056:	f240 8118 	bls.w	800128a <__udivmoddi4+0x28e>
 800105a:	3902      	subs	r1, #2
 800105c:	4462      	add	r2, ip
 800105e:	1a12      	subs	r2, r2, r0
 8001060:	b2a4      	uxth	r4, r4
 8001062:	fbb2 f0fe 	udiv	r0, r2, lr
 8001066:	fb0e 2210 	mls	r2, lr, r0, r2
 800106a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800106e:	fb00 f505 	mul.w	r5, r0, r5
 8001072:	42a5      	cmp	r5, r4
 8001074:	d90a      	bls.n	800108c <__udivmoddi4+0x90>
 8001076:	eb1c 0404 	adds.w	r4, ip, r4
 800107a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800107e:	f080 8106 	bcs.w	800128e <__udivmoddi4+0x292>
 8001082:	42a5      	cmp	r5, r4
 8001084:	f240 8103 	bls.w	800128e <__udivmoddi4+0x292>
 8001088:	4464      	add	r4, ip
 800108a:	3802      	subs	r0, #2
 800108c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001090:	1b64      	subs	r4, r4, r5
 8001092:	2100      	movs	r1, #0
 8001094:	b11e      	cbz	r6, 800109e <__udivmoddi4+0xa2>
 8001096:	40dc      	lsrs	r4, r3
 8001098:	2300      	movs	r3, #0
 800109a:	e9c6 4300 	strd	r4, r3, [r6]
 800109e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a2:	428b      	cmp	r3, r1
 80010a4:	d908      	bls.n	80010b8 <__udivmoddi4+0xbc>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	f000 80ec 	beq.w	8001284 <__udivmoddi4+0x288>
 80010ac:	2100      	movs	r1, #0
 80010ae:	e9c6 0500 	strd	r0, r5, [r6]
 80010b2:	4608      	mov	r0, r1
 80010b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b8:	fab3 f183 	clz	r1, r3
 80010bc:	2900      	cmp	r1, #0
 80010be:	d149      	bne.n	8001154 <__udivmoddi4+0x158>
 80010c0:	42ab      	cmp	r3, r5
 80010c2:	d302      	bcc.n	80010ca <__udivmoddi4+0xce>
 80010c4:	4282      	cmp	r2, r0
 80010c6:	f200 80f7 	bhi.w	80012b8 <__udivmoddi4+0x2bc>
 80010ca:	1a84      	subs	r4, r0, r2
 80010cc:	eb65 0203 	sbc.w	r2, r5, r3
 80010d0:	2001      	movs	r0, #1
 80010d2:	4617      	mov	r7, r2
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d0e2      	beq.n	800109e <__udivmoddi4+0xa2>
 80010d8:	e9c6 4700 	strd	r4, r7, [r6]
 80010dc:	e7df      	b.n	800109e <__udivmoddi4+0xa2>
 80010de:	b902      	cbnz	r2, 80010e2 <__udivmoddi4+0xe6>
 80010e0:	deff      	udf	#255	; 0xff
 80010e2:	fab2 f382 	clz	r3, r2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 808f 	bne.w	800120a <__udivmoddi4+0x20e>
 80010ec:	1a8a      	subs	r2, r1, r2
 80010ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f2:	fa1f fe8c 	uxth.w	lr, ip
 80010f6:	2101      	movs	r1, #1
 80010f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80010fc:	fb07 2015 	mls	r0, r7, r5, r2
 8001100:	0c22      	lsrs	r2, r4, #16
 8001102:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001106:	fb0e f005 	mul.w	r0, lr, r5
 800110a:	4290      	cmp	r0, r2
 800110c:	d908      	bls.n	8001120 <__udivmoddi4+0x124>
 800110e:	eb1c 0202 	adds.w	r2, ip, r2
 8001112:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001116:	d202      	bcs.n	800111e <__udivmoddi4+0x122>
 8001118:	4290      	cmp	r0, r2
 800111a:	f200 80ca 	bhi.w	80012b2 <__udivmoddi4+0x2b6>
 800111e:	4645      	mov	r5, r8
 8001120:	1a12      	subs	r2, r2, r0
 8001122:	b2a4      	uxth	r4, r4
 8001124:	fbb2 f0f7 	udiv	r0, r2, r7
 8001128:	fb07 2210 	mls	r2, r7, r0, r2
 800112c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001130:	fb0e fe00 	mul.w	lr, lr, r0
 8001134:	45a6      	cmp	lr, r4
 8001136:	d908      	bls.n	800114a <__udivmoddi4+0x14e>
 8001138:	eb1c 0404 	adds.w	r4, ip, r4
 800113c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001140:	d202      	bcs.n	8001148 <__udivmoddi4+0x14c>
 8001142:	45a6      	cmp	lr, r4
 8001144:	f200 80ba 	bhi.w	80012bc <__udivmoddi4+0x2c0>
 8001148:	4610      	mov	r0, r2
 800114a:	eba4 040e 	sub.w	r4, r4, lr
 800114e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001152:	e79f      	b.n	8001094 <__udivmoddi4+0x98>
 8001154:	f1c1 0720 	rsb	r7, r1, #32
 8001158:	408b      	lsls	r3, r1
 800115a:	fa22 fc07 	lsr.w	ip, r2, r7
 800115e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001162:	fa05 f401 	lsl.w	r4, r5, r1
 8001166:	fa20 f307 	lsr.w	r3, r0, r7
 800116a:	40fd      	lsrs	r5, r7
 800116c:	4323      	orrs	r3, r4
 800116e:	fa00 f901 	lsl.w	r9, r0, r1
 8001172:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001176:	fa1f fe8c 	uxth.w	lr, ip
 800117a:	fbb5 f8f0 	udiv	r8, r5, r0
 800117e:	0c1c      	lsrs	r4, r3, #16
 8001180:	fb00 5518 	mls	r5, r0, r8, r5
 8001184:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001188:	fb08 f50e 	mul.w	r5, r8, lr
 800118c:	42a5      	cmp	r5, r4
 800118e:	fa02 f201 	lsl.w	r2, r2, r1
 8001192:	d90b      	bls.n	80011ac <__udivmoddi4+0x1b0>
 8001194:	eb1c 0404 	adds.w	r4, ip, r4
 8001198:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800119c:	f080 8087 	bcs.w	80012ae <__udivmoddi4+0x2b2>
 80011a0:	42a5      	cmp	r5, r4
 80011a2:	f240 8084 	bls.w	80012ae <__udivmoddi4+0x2b2>
 80011a6:	f1a8 0802 	sub.w	r8, r8, #2
 80011aa:	4464      	add	r4, ip
 80011ac:	1b64      	subs	r4, r4, r5
 80011ae:	b29d      	uxth	r5, r3
 80011b0:	fbb4 f3f0 	udiv	r3, r4, r0
 80011b4:	fb00 4413 	mls	r4, r0, r3, r4
 80011b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80011bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80011c0:	45a6      	cmp	lr, r4
 80011c2:	d908      	bls.n	80011d6 <__udivmoddi4+0x1da>
 80011c4:	eb1c 0404 	adds.w	r4, ip, r4
 80011c8:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80011cc:	d26b      	bcs.n	80012a6 <__udivmoddi4+0x2aa>
 80011ce:	45a6      	cmp	lr, r4
 80011d0:	d969      	bls.n	80012a6 <__udivmoddi4+0x2aa>
 80011d2:	3b02      	subs	r3, #2
 80011d4:	4464      	add	r4, ip
 80011d6:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011da:	fba0 8302 	umull	r8, r3, r0, r2
 80011de:	eba4 040e 	sub.w	r4, r4, lr
 80011e2:	429c      	cmp	r4, r3
 80011e4:	46c6      	mov	lr, r8
 80011e6:	461d      	mov	r5, r3
 80011e8:	d355      	bcc.n	8001296 <__udivmoddi4+0x29a>
 80011ea:	d052      	beq.n	8001292 <__udivmoddi4+0x296>
 80011ec:	b156      	cbz	r6, 8001204 <__udivmoddi4+0x208>
 80011ee:	ebb9 030e 	subs.w	r3, r9, lr
 80011f2:	eb64 0405 	sbc.w	r4, r4, r5
 80011f6:	fa04 f707 	lsl.w	r7, r4, r7
 80011fa:	40cb      	lsrs	r3, r1
 80011fc:	40cc      	lsrs	r4, r1
 80011fe:	431f      	orrs	r7, r3
 8001200:	e9c6 7400 	strd	r7, r4, [r6]
 8001204:	2100      	movs	r1, #0
 8001206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120a:	f1c3 0120 	rsb	r1, r3, #32
 800120e:	fa02 fc03 	lsl.w	ip, r2, r3
 8001212:	fa20 f201 	lsr.w	r2, r0, r1
 8001216:	fa25 f101 	lsr.w	r1, r5, r1
 800121a:	409d      	lsls	r5, r3
 800121c:	432a      	orrs	r2, r5
 800121e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001222:	fa1f fe8c 	uxth.w	lr, ip
 8001226:	fbb1 f0f7 	udiv	r0, r1, r7
 800122a:	fb07 1510 	mls	r5, r7, r0, r1
 800122e:	0c11      	lsrs	r1, r2, #16
 8001230:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001234:	fb00 f50e 	mul.w	r5, r0, lr
 8001238:	428d      	cmp	r5, r1
 800123a:	fa04 f403 	lsl.w	r4, r4, r3
 800123e:	d908      	bls.n	8001252 <__udivmoddi4+0x256>
 8001240:	eb1c 0101 	adds.w	r1, ip, r1
 8001244:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001248:	d22f      	bcs.n	80012aa <__udivmoddi4+0x2ae>
 800124a:	428d      	cmp	r5, r1
 800124c:	d92d      	bls.n	80012aa <__udivmoddi4+0x2ae>
 800124e:	3802      	subs	r0, #2
 8001250:	4461      	add	r1, ip
 8001252:	1b49      	subs	r1, r1, r5
 8001254:	b292      	uxth	r2, r2
 8001256:	fbb1 f5f7 	udiv	r5, r1, r7
 800125a:	fb07 1115 	mls	r1, r7, r5, r1
 800125e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001262:	fb05 f10e 	mul.w	r1, r5, lr
 8001266:	4291      	cmp	r1, r2
 8001268:	d908      	bls.n	800127c <__udivmoddi4+0x280>
 800126a:	eb1c 0202 	adds.w	r2, ip, r2
 800126e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8001272:	d216      	bcs.n	80012a2 <__udivmoddi4+0x2a6>
 8001274:	4291      	cmp	r1, r2
 8001276:	d914      	bls.n	80012a2 <__udivmoddi4+0x2a6>
 8001278:	3d02      	subs	r5, #2
 800127a:	4462      	add	r2, ip
 800127c:	1a52      	subs	r2, r2, r1
 800127e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001282:	e739      	b.n	80010f8 <__udivmoddi4+0xfc>
 8001284:	4631      	mov	r1, r6
 8001286:	4630      	mov	r0, r6
 8001288:	e709      	b.n	800109e <__udivmoddi4+0xa2>
 800128a:	4639      	mov	r1, r7
 800128c:	e6e7      	b.n	800105e <__udivmoddi4+0x62>
 800128e:	4610      	mov	r0, r2
 8001290:	e6fc      	b.n	800108c <__udivmoddi4+0x90>
 8001292:	45c1      	cmp	r9, r8
 8001294:	d2aa      	bcs.n	80011ec <__udivmoddi4+0x1f0>
 8001296:	ebb8 0e02 	subs.w	lr, r8, r2
 800129a:	eb63 050c 	sbc.w	r5, r3, ip
 800129e:	3801      	subs	r0, #1
 80012a0:	e7a4      	b.n	80011ec <__udivmoddi4+0x1f0>
 80012a2:	4645      	mov	r5, r8
 80012a4:	e7ea      	b.n	800127c <__udivmoddi4+0x280>
 80012a6:	4603      	mov	r3, r0
 80012a8:	e795      	b.n	80011d6 <__udivmoddi4+0x1da>
 80012aa:	4640      	mov	r0, r8
 80012ac:	e7d1      	b.n	8001252 <__udivmoddi4+0x256>
 80012ae:	46d0      	mov	r8, sl
 80012b0:	e77c      	b.n	80011ac <__udivmoddi4+0x1b0>
 80012b2:	3d02      	subs	r5, #2
 80012b4:	4462      	add	r2, ip
 80012b6:	e733      	b.n	8001120 <__udivmoddi4+0x124>
 80012b8:	4608      	mov	r0, r1
 80012ba:	e70b      	b.n	80010d4 <__udivmoddi4+0xd8>
 80012bc:	4464      	add	r4, ip
 80012be:	3802      	subs	r0, #2
 80012c0:	e743      	b.n	800114a <__udivmoddi4+0x14e>
 80012c2:	bf00      	nop

080012c4 <__aeabi_idiv0>:
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4013      	ands	r3, r2
 80012ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ec:	68fb      	ldr	r3, [r7, #12]
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001304:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	43db      	mvns	r3, r3
 800130a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800130e:	4013      	ands	r3, r2
 8001310:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001320:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <MX_ADC_Init+0x94>)
 8001322:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <MX_ADC_Init+0x98>)
 8001324:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <MX_ADC_Init+0x94>)
 8001328:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800132c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_ADC_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <MX_ADC_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_ADC_Init+0x94>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <MX_ADC_Init+0x94>)
 8001342:	2204      	movs	r2, #4
 8001344:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001346:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <MX_ADC_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <MX_ADC_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001352:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <MX_ADC_Init+0x94>)
 8001354:	2200      	movs	r2, #0
 8001356:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_ADC_Init+0x94>)
 800135a:	2201      	movs	r2, #1
 800135c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_ADC_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_ADC_Init+0x94>)
 8001368:	2200      	movs	r2, #0
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_ADC_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_ADC_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <MX_ADC_Init+0x94>)
 800137c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_ADC_Init+0x94>)
 8001384:	2207      	movs	r2, #7
 8001386:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_ADC_Init+0x94>)
 800138a:	2207      	movs	r2, #7
 800138c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_ADC_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_ADC_Init+0x94>)
 8001398:	2200      	movs	r2, #0
 800139a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_ADC_Init+0x94>)
 800139e:	f003 f8df 	bl	8004560 <HAL_ADC_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_ADC_Init+0x90>
  {
    Error_Handler();
 80013a8:	f000 fd54 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000015c 	.word	0x2000015c
 80013b4:	40012400 	.word	0x40012400

080013b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <HAL_ADC_MspInit+0x24>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d103      	bne.n	80013d2 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ce:	f7ff ff7b 	bl	80012c8 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40012400 	.word	0x40012400

080013e0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_ADC_MspDeInit+0x24>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d103      	bne.n	80013fa <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 80013f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013f6:	f7ff ff7f 	bl	80012f8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40012400 	.word	0x40012400

08001408 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <SYS_InitMeasurement+0x14>)
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <SYS_InitMeasurement+0x18>)
 8001410:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	2000015c 	.word	0x2000015c
 8001420:	40012400 	.word	0x40012400

08001424 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001432:	4813      	ldr	r0, [pc, #76]	; (8001480 <SYS_GetBatteryLevel+0x5c>)
 8001434:	f000 f82a 	bl	800148c <ADC_ReadChannels>
 8001438:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	80fb      	strh	r3, [r7, #6]
 8001444:	e016      	b.n	8001474 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001446:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <SYS_GetBatteryLevel+0x60>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800144e:	4293      	cmp	r3, r2
 8001450:	d00b      	beq.n	800146a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001452:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <SYS_GetBatteryLevel+0x60>)
 8001454:	881b      	ldrh	r3, [r3, #0]
 8001456:	461a      	mov	r2, r3
 8001458:	f640 43e4 	movw	r3, #3300	; 0xce4
 800145c:	fb03 f202 	mul.w	r2, r3, r2
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	80fb      	strh	r3, [r7, #6]
 8001468:	e004      	b.n	8001474 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <SYS_GetBatteryLevel+0x64>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001474:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	b4002000 	.word	0xb4002000
 8001484:	1fff75aa 	.word	0x1fff75aa
 8001488:	004c08d8 	.word	0x004c08d8

0800148c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80014a4:	f7ff ff3a 	bl	800131c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80014a8:	481a      	ldr	r0, [pc, #104]	; (8001514 <ADC_ReadChannels+0x88>)
 80014aa:	f003 fe78 	bl	800519e <HAL_ADCEx_Calibration_Start>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80014b4:	f000 fcce 	bl	8001e54 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014c4:	f107 0308 	add.w	r3, r7, #8
 80014c8:	4619      	mov	r1, r3
 80014ca:	4812      	ldr	r0, [pc, #72]	; (8001514 <ADC_ReadChannels+0x88>)
 80014cc:	f003 fb84 	bl	8004bd8 <HAL_ADC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80014d6:	f000 fcbd 	bl	8001e54 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80014da:	480e      	ldr	r0, [pc, #56]	; (8001514 <ADC_ReadChannels+0x88>)
 80014dc:	f003 fa60 	bl	80049a0 <HAL_ADC_Start>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80014e6:	f000 fcb5 	bl	8001e54 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80014ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <ADC_ReadChannels+0x88>)
 80014f0:	f003 face 	bl	8004a90 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <ADC_ReadChannels+0x88>)
 80014f6:	f003 fa99 	bl	8004a2c <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80014fa:	4806      	ldr	r0, [pc, #24]	; (8001514 <ADC_ReadChannels+0x88>)
 80014fc:	f003 fb5f 	bl	8004bbe <HAL_ADC_GetValue>
 8001500:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <ADC_ReadChannels+0x88>)
 8001504:	f003 f9c0 	bl	8004888 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001508:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	2000015c 	.word	0x2000015c

08001518 <LL_AHB1_GRP1_EnableClock>:
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4313      	orrs	r3, r2
 800152e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4013      	ands	r3, r2
 800153a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800153c:	68fb      	ldr	r3, [r7, #12]
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff ffe3 	bl	8001518 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff ffe0 	bl	8001518 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2102      	movs	r1, #2
 800155c:	200b      	movs	r0, #11
 800155e:	f003 ffc4 	bl	80054ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001562:	200b      	movs	r0, #11
 8001564:	f003 ffdb 	bl	800551e <HAL_NVIC_EnableIRQ>

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001578:	23ff      	movs	r3, #255	; 0xff
 800157a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001582:	d311      	bcc.n	80015a8 <FLASH_IF_Write+0x3c>
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <FLASH_IF_Write+0x48>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	029a      	lsls	r2, r3, #10
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <FLASH_IF_Write+0x4c>)
 800158c:	4013      	ands	r3, r2
 800158e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001592:	3b01      	subs	r3, #1
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4293      	cmp	r3, r2
 8001598:	d306      	bcc.n	80015a8 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 f85a 	bl	8001658 <FLASH_IF_INT_Write>
 80015a4:	4603      	mov	r3, r0
 80015a6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80015a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	1fff75e0 	.word	0x1fff75e0
 80015b8:	03fffc00 	.word	0x03fffc00

080015bc <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015c8:	23ff      	movs	r3, #255	; 0xff
 80015ca:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015d2:	d311      	bcc.n	80015f8 <FLASH_IF_Read+0x3c>
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <FLASH_IF_Read+0x48>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	029a      	lsls	r2, r3, #10
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <FLASH_IF_Read+0x4c>)
 80015dc:	4013      	ands	r3, r2
 80015de:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015e2:	3b01      	subs	r3, #1
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d306      	bcc.n	80015f8 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 f93a 	bl	8001868 <FLASH_IF_INT_Read>
 80015f4:	4603      	mov	r3, r0
 80015f6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 80015f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	1fff75e0 	.word	0x1fff75e0
 8001608:	03fffc00 	.word	0x03fffc00

0800160c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001616:	23ff      	movs	r3, #255	; 0xff
 8001618:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001620:	d310      	bcc.n	8001644 <FLASH_IF_Erase+0x38>
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <FLASH_IF_Erase+0x44>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	029a      	lsls	r2, r3, #10
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <FLASH_IF_Erase+0x48>)
 800162a:	4013      	ands	r3, r2
 800162c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001630:	3b01      	subs	r3, #1
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4293      	cmp	r3, r2
 8001636:	d305      	bcc.n	8001644 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001638:	6839      	ldr	r1, [r7, #0]
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f932 	bl	80018a4 <FLASH_IF_INT_Erase>
 8001640:	4603      	mov	r3, r0
 8001642:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	1fff75e0 	.word	0x1fff75e0
 8001654:	03fffc00 	.word	0x03fffc00

08001658 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b090      	sub	sp, #64	; 0x40
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00c      	beq.n	8001696 <FLASH_IF_INT_Write+0x3e>
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <FLASH_IF_INT_Write+0x3e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	2b00      	cmp	r3, #0
 800168a:	d104      	bne.n	8001696 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 8001696:	f06f 0305 	mvn.w	r3, #5
 800169a:	e0da      	b.n	8001852 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 800169c:	f000 f992 	bl	80019c4 <FLASH_IF_INT_Clear_Error>
 80016a0:	4603      	mov	r3, r0
 80016a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 80016a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f040 80cf 	bne.w	800184e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80016b0:	f004 fb80 	bl	8005db4 <HAL_FLASH_Unlock>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80c6 	bne.w	8001848 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80016bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016be:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80016c2:	4b66      	ldr	r3, [pc, #408]	; (800185c <FLASH_IF_INT_Write+0x204>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	0299      	lsls	r1, r3, #10
 80016c8:	4b65      	ldr	r3, [pc, #404]	; (8001860 <FLASH_IF_INT_Write+0x208>)
 80016ca:	400b      	ands	r3, r1
 80016cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80016d0:	fb01 f303 	mul.w	r3, r1, r3
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	0adb      	lsrs	r3, r3, #11
 80016d8:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80016da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80016e4:	3b01      	subs	r3, #1
 80016e6:	4a5d      	ldr	r2, [pc, #372]	; (800185c <FLASH_IF_INT_Write+0x204>)
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	0291      	lsls	r1, r2, #10
 80016ec:	4a5c      	ldr	r2, [pc, #368]	; (8001860 <FLASH_IF_INT_Write+0x208>)
 80016ee:	400a      	ands	r2, r1
 80016f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80016f4:	fb01 f202 	mul.w	r2, r1, r2
 80016f8:	1a9b      	subs	r3, r3, r2
 80016fa:	0ada      	lsrs	r2, r3, #11
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d905      	bls.n	8001716 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800170a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800170c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001710:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171a:	e089      	b.n	8001830 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001722:	02db      	lsls	r3, r3, #11
 8001724:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 f925 	bl	8001978 <FLASH_IF_INT_IsEmpty>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d031      	beq.n	8001798 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001734:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <FLASH_IF_INT_Write+0x20c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d103      	bne.n	8001744 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800173c:	23fa      	movs	r3, #250	; 0xfa
 800173e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001742:	e07e      	b.n	8001842 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <FLASH_IF_INT_Write+0x20c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6939      	ldr	r1, [r7, #16]
 800174a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f88a 	bl	8001868 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <FLASH_IF_INT_Write+0x20c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800175e:	4413      	add	r3, r2
 8001760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001764:	b292      	uxth	r2, r2
 8001766:	4618      	mov	r0, r3
 8001768:	f01b f9bc 	bl	801cae4 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f896 	bl	80018a4 <FLASH_IF_INT_Erase>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800177e:	23fe      	movs	r3, #254	; 0xfe
 8001780:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001784:	e05d      	b.n	8001842 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800178a:	4b36      	ldr	r3, [pc, #216]	; (8001864 <FLASH_IF_INT_Write+0x20c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 8001790:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e005      	b.n	80017a4 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 8001798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 800179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800179e:	623b      	str	r3, [r7, #32]
          current_length = length;
 80017a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a2:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017a8:	e026      	b.n	80017f8 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80017aa:	6a3a      	ldr	r2, [r7, #32]
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017b6:	2001      	movs	r0, #1
 80017b8:	f004 fab8 	bl	8005d2c <HAL_FLASH_Program>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d113      	bne.n	80017ea <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c8:	6a3a      	ldr	r2, [r7, #32]
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	4413      	add	r3, r2
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	4299      	cmp	r1, r3
 80017d4:	bf08      	it	eq
 80017d6:	4290      	cmpeq	r0, r2
 80017d8:	d003      	beq.n	80017e2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80017da:	23fc      	movs	r3, #252	; 0xfc
 80017dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80017e0:	e00e      	b.n	8001800 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	3308      	adds	r3, #8
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
 80017e8:	e003      	b.n	80017f2 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80017ea:	23fc      	movs	r3, #252	; 0xfc
 80017ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80017f0:	e006      	b.n	8001800 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f4:	3308      	adds	r3, #8
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d3d4      	bcc.n	80017aa <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001800:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001804:	2b00      	cmp	r3, #0
 8001806:	d11b      	bne.n	8001840 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001808:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180c:	4413      	add	r3, r2
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001814:	4413      	add	r3, r2
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001822:	bf28      	it	cs
 8001824:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001828:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	3301      	adds	r3, #1
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	4413      	add	r3, r2
 8001836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001838:	429a      	cmp	r2, r3
 800183a:	f4ff af6f 	bcc.w	800171c <FLASH_IF_INT_Write+0xc4>
 800183e:	e000      	b.n	8001842 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001840:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001842:	f004 fad9 	bl	8005df8 <HAL_FLASH_Lock>
 8001846:	e002      	b.n	800184e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001848:	23fb      	movs	r3, #251	; 0xfb
 800184a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800184e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001852:	4618      	mov	r0, r3
 8001854:	3740      	adds	r7, #64	; 0x40
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	1fff75e0 	.word	0x1fff75e0
 8001860:	03fffc00 	.word	0x03fffc00
 8001864:	200001c0 	.word	0x200001c0

08001868 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <FLASH_IF_INT_Read+0x1c>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001884:	f06f 0305 	mvn.w	r3, #5
 8001888:	e008      	b.n	800189c <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	b29b      	uxth	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f01b f926 	bl	801cae4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 8001898:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3718      	adds	r7, #24
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d102      	bne.n	80018ca <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80018c4:	f06f 0305 	mvn.w	r3, #5
 80018c8:	e04e      	b.n	8001968 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80018ca:	f000 f87b 	bl	80019c4 <FLASH_IF_INT_Clear_Error>
 80018ce:	4603      	mov	r3, r0
 80018d0:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80018d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d144      	bne.n	8001964 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80018da:	f004 fa6b 	bl	8005db4 <HAL_FLASH_Unlock>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d13d      	bne.n	8001960 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80018e4:	2302      	movs	r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <FLASH_IF_INT_Erase+0xcc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	0299      	lsls	r1, r3, #10
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <FLASH_IF_INT_Erase+0xd0>)
 80018f6:	400b      	ands	r3, r1
 80018f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80018fc:	fb01 f303 	mul.w	r3, r1, r3
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	0adb      	lsrs	r3, r3, #11
 8001904:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4413      	add	r3, r2
 800190c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001910:	3b01      	subs	r3, #1
 8001912:	4a17      	ldr	r2, [pc, #92]	; (8001970 <FLASH_IF_INT_Erase+0xcc>)
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	0291      	lsls	r1, r2, #10
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <FLASH_IF_INT_Erase+0xd0>)
 800191a:	400a      	ands	r2, r1
 800191c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001920:	fb01 f202 	mul.w	r2, r1, r2
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	0ada      	lsrs	r2, r3, #11
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	3301      	adds	r3, #1
 800192e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001930:	f107 0214 	add.w	r2, r7, #20
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f004 fb3c 	bl	8005fb8 <HAL_FLASHEx_Erase>
 8001940:	4603      	mov	r3, r0
 8001942:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001944:	7fbb      	ldrb	r3, [r7, #30]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800194a:	7fbb      	ldrb	r3, [r7, #30]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d101      	bne.n	8001954 <FLASH_IF_INT_Erase+0xb0>
 8001950:	2301      	movs	r3, #1
 8001952:	e001      	b.n	8001958 <FLASH_IF_INT_Erase+0xb4>
 8001954:	f06f 0301 	mvn.w	r3, #1
 8001958:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800195a:	f004 fa4d 	bl	8005df8 <HAL_FLASH_Lock>
 800195e:	e001      	b.n	8001964 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001960:	23fb      	movs	r3, #251	; 0xfb
 8001962:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001964:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3720      	adds	r7, #32
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	1fff75e0 	.word	0x1fff75e0
 8001974:	03fffc00 	.word	0x03fffc00

08001978 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	e011      	b.n	80019b0 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001996:	bf08      	it	eq
 8001998:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
 800199c:	d002      	beq.n	80019a4 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 800199e:	2301      	movs	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
      break;
 80019a2:	e009      	b.n	80019b8 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3308      	adds	r3, #8
 80019a8:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3308      	adds	r3, #8
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3e9      	bcc.n	800198c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 80019b8:	68fb      	ldr	r3, [r7, #12]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80019ca:	23fb      	movs	r3, #251	; 0xfb
 80019cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80019ce:	f004 f9f1 	bl	8005db4 <HAL_FLASH_Unlock>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d110      	bne.n	80019fa <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <FLASH_IF_INT_Clear_Error+0x44>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <FLASH_IF_INT_Clear_Error+0x44>)
 80019de:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <FLASH_IF_INT_Clear_Error+0x44>)
 80019e6:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 80019ea:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80019ec:	f004 fa04 	bl	8005df8 <HAL_FLASH_Lock>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	58004000 	.word	0x58004000

08001a0c <LL_AHB2_GRP1_EnableClock>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a30:	68fb      	ldr	r3, [r7, #12]
}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ffdb 	bl	8001a0c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2002      	movs	r0, #2
 8001a58:	f7ff ffd8 	bl	8001a0c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5c:	2004      	movs	r0, #4
 8001a5e:	f7ff ffd5 	bl	8001a0c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001a68:	4821      	ldr	r0, [pc, #132]	; (8001af0 <MX_GPIO_Init+0xb4>)
 8001a6a:	f004 fda7 	bl	80065bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2120      	movs	r1, #32
 8001a72:	481f      	ldr	r0, [pc, #124]	; (8001af0 <MX_GPIO_Init+0xb4>)
 8001a74:	f004 fda2 	bl	80065bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2131      	movs	r1, #49	; 0x31
 8001a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a80:	f004 fd9c 	bl	80065bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001a84:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001a88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4815      	ldr	r0, [pc, #84]	; (8001af0 <MX_GPIO_Init+0xb4>)
 8001a9c:	f004 fb60 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001aa0:	2331      	movs	r3, #49	; 0x31
 8001aa2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	1d3b      	adds	r3, r7, #4
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab8:	f004 fb52 	bl	8006160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ac6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4807      	ldr	r0, [pc, #28]	; (8001af0 <MX_GPIO_Init+0xb4>)
 8001ad2:	f004 fb45 	bl	8006160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2029      	movs	r0, #41	; 0x29
 8001adc:	f003 fd05 	bl	80054ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ae0:	2029      	movs	r0, #41	; 0x29
 8001ae2:	f003 fd1c 	bl	800551e <HAL_NVIC_EnableIRQ>

}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	48000400 	.word	0x48000400

08001af4 <LL_AHB2_GRP1_EnableClock>:
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b18:	68fb      	ldr	r3, [r7, #12]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <LL_APB1_GRP1_EnableClock>:
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b48:	68fb      	ldr	r3, [r7, #12]
}
 8001b4a:	bf00      	nop
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b58:	4b1b      	ldr	r3, [pc, #108]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <MX_I2C2_Init+0x78>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b60:	4a1b      	ldr	r2, [pc, #108]	; (8001bd0 <MX_I2C2_Init+0x7c>)
 8001b62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b64:	4b18      	ldr	r3, [pc, #96]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b70:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b88:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b8e:	480e      	ldr	r0, [pc, #56]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001b90:	f004 fd44 	bl	800661c <HAL_I2C_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b9a:	f000 f95b 	bl	8001e54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	4809      	ldr	r0, [pc, #36]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001ba2:	f005 fa91 	bl	80070c8 <HAL_I2CEx_ConfigAnalogFilter>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001bac:	f000 f952 	bl	8001e54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <MX_I2C2_Init+0x74>)
 8001bb4:	f005 fad2 	bl	800715c <HAL_I2CEx_ConfigDigitalFilter>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bbe:	f000 f949 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200001c4 	.word	0x200001c4
 8001bcc:	40005800 	.word	0x40005800
 8001bd0:	20303e5d 	.word	0x20303e5d

08001bd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b096      	sub	sp, #88	; 0x58
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2238      	movs	r2, #56	; 0x38
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f01c f9b3 	bl	801df60 <memset>
  if(i2cHandle->Instance==I2C2)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_I2C_MspInit+0xb0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d13b      	bne.n	8001c7c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c08:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4618      	mov	r0, r3
 8001c14:	f006 fcbc 	bl	8008590 <HAL_RCCEx_PeriphCLKConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c1e:	f000 f919 	bl	8001e54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff ff66 	bl	8001af4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f7ff ff63 	bl	8001af4 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c34:	2312      	movs	r3, #18
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c40:	2304      	movs	r3, #4
 8001c42:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4e:	f004 fa87 	bl	8006160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c58:	2312      	movs	r3, #18
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c64:	2304      	movs	r3, #4
 8001c66:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <HAL_I2C_MspInit+0xb4>)
 8001c70:	f004 fa76 	bl	8006160 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c74:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001c78:	f7ff ff54 	bl	8001b24 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3758      	adds	r7, #88	; 0x58
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40005800 	.word	0x40005800
 8001c88:	48000400 	.word	0x48000400

08001c8c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9c:	f023 0218 	bic.w	r2, r3, #24
 8001ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
	...

08001cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b0cf      	sub	sp, #316	; 0x13c
 8001cbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbe:	f002 fa7d 	bl	80041bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc2:	f000 f863 	bl	8001d8c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cc6:	f7ff feb9 	bl	8001a3c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001cca:	f009 fff9 	bl	800bcc0 <MX_LoRaWAN_Init>
  MX_I2C2_Init();
 8001cce:	f7ff ff41 	bl	8001b54 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  APP_LOG(TS_ON, VLEVEL_M, "Hello APP_LOG \r\n");
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <main+0xbc>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2002      	movs	r0, #2
 8001cda:	f01b fe47 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    	APP_LOG(TS_ON, VLEVEL_M, "BMP390 memory read success \r\n");
    } else {
    	APP_LOG(TS_ON, VLEVEL_M, "Incorrect device ID: %x \r\n", bmp390_device_id);
    }*/

  EnvionmentSensors envSensors(&hi2c2);
 8001cde:	f107 0310 	add.w	r3, r7, #16
 8001ce2:	4925      	ldr	r1, [pc, #148]	; (8001d78 <main+0xc0>)
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 f91f 	bl	8003f28 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>

  float temperature = -99;
 8001cea:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <main+0xc4>)
 8001cec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  float pressure = -99;
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <main+0xc4>)
 8001cf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  float altitude = -99;
 8001cf6:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <main+0xc4>)
 8001cf8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

  	APP_LOG(TS_ON, VLEVEL_M, "temp: %d.%02d [C]\r\n", (int)temperature / 100, (int)temperature % 100);
  	APP_LOG(TS_ON, VLEVEL_M, "pressure: %d.%02d [Pa]\r\n", (int)pressure / 100, (int)pressure % 100);
  	APP_LOG(TS_ON, VLEVEL_M, "altitude: %d.%02d [m?]\r\n", (int)altitude / 100, (int)altitude % 100);*/

  	lsm303AccelData a = envSensors.getAccelData();
 8001cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d04:	f107 0210 	add.w	r2, r7, #16
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 f974 	bl	8003ff8 <_ZN17EnvionmentSensors12getAccelDataEv>
  	float ax = a.x*100;
 8001d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4919      	ldr	r1, [pc, #100]	; (8001d80 <main+0xc8>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe ffbf 	bl	8000ca0 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  	APP_LOG(TS_ON, VLEVEL_M, "ax: %d.%02d [m/s^2]\r\n", (int)ax / 100, (int)ax % 100);
 8001d28:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001d2c:	f7ff f908 	bl	8000f40 <__aeabi_f2iz>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <main+0xcc>)
 8001d34:	fb82 1203 	smull	r1, r2, r2, r3
 8001d38:	1152      	asrs	r2, r2, #5
 8001d3a:	17db      	asrs	r3, r3, #31
 8001d3c:	1ad4      	subs	r4, r2, r3
 8001d3e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001d42:	f7ff f8fd 	bl	8000f40 <__aeabi_f2iz>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <main+0xcc>)
 8001d4a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d4e:	1159      	asrs	r1, r3, #5
 8001d50:	17d3      	asrs	r3, r2, #31
 8001d52:	1acb      	subs	r3, r1, r3
 8001d54:	2164      	movs	r1, #100	; 0x64
 8001d56:	fb01 f303 	mul.w	r3, r1, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	9400      	str	r4, [sp, #0]
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <main+0xd0>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	2100      	movs	r1, #0
 8001d66:	2002      	movs	r0, #2
 8001d68:	f01b fe00 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>

  	HAL_Delay(100);
 8001d6c:	2064      	movs	r0, #100	; 0x64
 8001d6e:	f000 fb75 	bl	800245c <HAL_Delay>
    /* USER CODE END WHILE */
    //MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */
  }
 8001d72:	e7c3      	b.n	8001cfc <main+0x44>
 8001d74:	0801dfd0 	.word	0x0801dfd0
 8001d78:	200001c4 	.word	0x200001c4
 8001d7c:	c2c60000 	.word	0xc2c60000
 8001d80:	42c80000 	.word	0x42c80000
 8001d84:	51eb851f 	.word	0x51eb851f
 8001d88:	0801dfe4 	.word	0x0801dfe4

08001d8c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b09a      	sub	sp, #104	; 0x68
 8001d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2248      	movs	r2, #72	; 0x48
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f01c f8e0 	bl	801df60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
 8001db0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001db2:	f005 fa1f 	bl	80071f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff ff68 	bl	8001c8c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dbc:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <_Z18SystemClock_Configv+0xc4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <_Z18SystemClock_Configv+0xc4>)
 8001dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <_Z18SystemClock_Configv+0xc4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dd4:	607b      	str	r3, [r7, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001dd8:	2324      	movs	r3, #36	; 0x24
 8001dda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ddc:	2381      	movs	r3, #129	; 0x81
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001de0:	2301      	movs	r3, #1
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001de4:	2300      	movs	r3, #0
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001de8:	23b0      	movs	r3, #176	; 0xb0
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 fca7 	bl	8007748 <HAL_RCC_OscConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <_Z18SystemClock_Configv+0x82>
  {
    Error_Handler();
 8001e0a:	f000 f823 	bl	8001e54 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001e0e:	234f      	movs	r3, #79	; 0x4f
 8001e10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e16:	2300      	movs	r3, #0
 8001e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	2102      	movs	r1, #2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f006 f80d 	bl	8007e4c <HAL_RCC_ClockConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	bf14      	ite	ne
 8001e38:	2301      	movne	r3, #1
 8001e3a:	2300      	moveq	r3, #0
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001e42:	f000 f807 	bl	8001e54 <Error_Handler>
  }
}
 8001e46:	bf00      	nop
 8001e48:	3768      	adds	r7, #104	; 0x68
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	58000400 	.word	0x58000400

08001e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
}
 8001e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <Error_Handler+0x8>

08001e5e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <LL_APB1_GRP1_EnableClock>:
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
	...

08001eb0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	; 0x30
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	222c      	movs	r2, #44	; 0x2c
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f01c f84f 	bl	801df60 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ec2:	4b22      	ldr	r3, [pc, #136]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001ec4:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <MX_RTC_Init+0xa0>)
 8001ec6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001ec8:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001eca:	221f      	movs	r2, #31
 8001ecc:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001ee2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ee6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001eee:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ef6:	4815      	ldr	r0, [pc, #84]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001ef8:	f006 fc64 	bl	80087c4 <HAL_RTC_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001f02:	f7ff ffa7 	bl	8001e54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001f06:	4811      	ldr	r0, [pc, #68]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001f08:	f006 ff5a 	bl	8008dc0 <HAL_RTCEx_SetSSRU_IT>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001f12:	f7ff ff9f 	bl	8001e54 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f26:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001f2e:	1d3b      	adds	r3, r7, #4
 8001f30:	2200      	movs	r2, #0
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_RTC_Init+0x9c>)
 8001f36:	f006 fcc7 	bl	80088c8 <HAL_RTC_SetAlarm_IT>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001f40:	f7ff ff88 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	3730      	adds	r7, #48	; 0x30
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20000218 	.word	0x20000218
 8001f50:	40002800 	.word	0x40002800

08001f54 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b090      	sub	sp, #64	; 0x40
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	2238      	movs	r2, #56	; 0x38
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f01b fffb 	bl	801df60 <memset>
  if(rtcHandle->Instance==RTC)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a16      	ldr	r2, [pc, #88]	; (8001fc8 <HAL_RTC_MspInit+0x74>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d125      	bne.n	8001fc0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f78:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	4618      	mov	r0, r3
 8001f86:	f006 fb03 	bl	8008590 <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f90:	f7ff ff60 	bl	8001e54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f94:	f7ff ff63 	bl	8001e5e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f9c:	f7ff ff6f 	bl	8001e7e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f003 faa0 	bl	80054ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001faa:	2002      	movs	r0, #2
 8001fac:	f003 fab7 	bl	800551e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	202a      	movs	r0, #42	; 0x2a
 8001fb6:	f003 fa98 	bl	80054ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001fba:	202a      	movs	r0, #42	; 0x2a
 8001fbc:	f003 faaf 	bl	800551e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3740      	adds	r7, #64	; 0x40
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40002800 	.word	0x40002800

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <NMI_Handler+0x4>

08001fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <HardFault_Handler+0x4>

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr

0800200e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr

0800201a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
	...

08002028 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800202e:	f006 ff03 	bl	8008e38 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000218 	.word	0x20000218

0800203c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <DMA1_Channel1_IRQHandler+0x10>)
 8002042:	f003 fd03 	bl	8005a4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002f8 	.word	0x200002f8

08002050 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <USART1_IRQHandler+0x10>)
 8002056:	f007 fd39 	bl	8009acc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000264 	.word	0x20000264

08002064 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8002068:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800206c:	f004 fabe 	bl	80065ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <RTC_Alarm_IRQHandler+0x10>)
 800207a:	f006 fd8d 	bl	8008b98 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000218 	.word	0x20000218

08002088 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <SUBGHZ_Radio_IRQHandler+0x10>)
 800208e:	f007 fa41 	bl	8009514 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000250 	.word	0x20000250

0800209c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c0:	68fb      	ldr	r3, [r7, #12]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <MX_SUBGHZ_Init+0x20>)
 80020d2:	2208      	movs	r2, #8
 80020d4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80020d6:	4805      	ldr	r0, [pc, #20]	; (80020ec <MX_SUBGHZ_Init+0x20>)
 80020d8:	f006 ff9a 	bl	8009010 <HAL_SUBGHZ_Init>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80020e2:	f7ff feb7 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000250 	.word	0x20000250

080020f0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff ffcf 	bl	800209c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2032      	movs	r0, #50	; 0x32
 8002104:	f003 f9f1 	bl	80054ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002108:	2032      	movs	r0, #50	; 0x32
 800210a:	f003 fa08 	bl	800551e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <LL_FLASH_GetUDN+0x10>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	1fff7580 	.word	0x1fff7580

08002150 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <LL_FLASH_GetDeviceID+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	1fff7584 	.word	0x1fff7584

08002168 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <LL_FLASH_GetSTCompanyID+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0a1b      	lsrs	r3, r3, #8
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	1fff7584 	.word	0x1fff7584

08002180 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff ffc6 	bl	8002116 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800218a:	f01b f931 	bl	801d3f0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <SystemApp_Init+0x48>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002194:	f000 f986 	bl	80024a4 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002198:	f01b fbba 	bl	801d910 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800219c:	480b      	ldr	r0, [pc, #44]	; (80021cc <SystemApp_Init+0x4c>)
 800219e:	f01b fc65 	bl	801da6c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <SystemApp_Init+0x50>)
 80021a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021a8:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80021aa:	2002      	movs	r0, #2
 80021ac:	f01b fc6c 	bl	801da88 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 80021b0:	f7ff f92a 	bl	8001408 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80021b4:	f000 f9fc 	bl	80025b0 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80021b8:	f01a fc24 	bl	801ca04 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80021bc:	2101      	movs	r1, #1
 80021be:	2001      	movs	r0, #1
 80021c0:	f01a fc60 	bl	801ca84 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2000025c 	.word	0x2000025c
 80021cc:	08002395 	.word	0x08002395
 80021d0:	58004000 	.word	0x58004000

080021d4 <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80021de:	f7ff f921 	bl	8001424 <SYS_GetBatteryLevel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80021e6:	88bb      	ldrh	r3, [r7, #4]
 80021e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d902      	bls.n	80021f6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80021f0:	23fe      	movs	r3, #254	; 0xfe
 80021f2:	71fb      	strb	r3, [r7, #7]
 80021f4:	e014      	b.n	8002220 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80021f6:	88bb      	ldrh	r3, [r7, #4]
 80021f8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80021fc:	d202      	bcs.n	8002204 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	71fb      	strb	r3, [r7, #7]
 8002202:	e00d      	b.n	8002220 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002204:	88bb      	ldrh	r3, [r7, #4]
 8002206:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800220a:	461a      	mov	r2, r3
 800220c:	4613      	mov	r3, r2
 800220e:	01db      	lsls	r3, r3, #7
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	461a      	mov	r2, r3
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <GetBatteryLevel+0x58>)
 8002218:	fba3 2302 	umull	r2, r3, r3, r2
 800221c:	09db      	lsrs	r3, r3, #7
 800221e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002220:	79fb      	ldrb	r3, [r7, #7]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	1b4e81b5 	.word	0x1b4e81b5

08002230 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f000 f98d 	bl	800255c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fe7b 	bl	8000f40 <__aeabi_f2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 800224e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3720      	adds	r7, #32
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8002266:	f7ff ff69 	bl	800213c <LL_FLASH_GetUDN>
 800226a:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002272:	d138      	bne.n	80022e6 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002274:	f001 ffc2 	bl	80041fc <HAL_GetUIDw0>
 8002278:	4604      	mov	r4, r0
 800227a:	f001 ffd3 	bl	8004224 <HAL_GetUIDw2>
 800227e:	4603      	mov	r3, r0
 8002280:	4423      	add	r3, r4
 8002282:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002284:	f001 ffc4 	bl	8004210 <HAL_GetUIDw1>
 8002288:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	0e1a      	lsrs	r2, r3, #24
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3307      	adds	r3, #7
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	0c1a      	lsrs	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3306      	adds	r3, #6
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	0a1a      	lsrs	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3305      	adds	r3, #5
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	0e1a      	lsrs	r2, r3, #24
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3303      	adds	r3, #3
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	0c1a      	lsrs	r2, r3, #16
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3302      	adds	r3, #2
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	0a1a      	lsrs	r2, r3, #8
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3301      	adds	r3, #1
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 80022e4:	e031      	b.n	800234a <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3307      	adds	r3, #7
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	0a1a      	lsrs	r2, r3, #8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3306      	adds	r3, #6
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	0c1a      	lsrs	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3305      	adds	r3, #5
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	0e1a      	lsrs	r2, r3, #24
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3304      	adds	r3, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002314:	f7ff ff1c 	bl	8002150 <LL_FLASH_GetDeviceID>
 8002318:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3303      	adds	r3, #3
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002324:	f7ff ff20 	bl	8002168 <LL_FLASH_GetSTCompanyID>
 8002328:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3302      	adds	r3, #2
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	0a1a      	lsrs	r2, r3, #8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3301      	adds	r3, #1
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	0c1b      	lsrs	r3, r3, #16
 8002344:	b2da      	uxtb	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	701a      	strb	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bd90      	pop	{r4, r7, pc}

08002352 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002352:	b590      	push	{r4, r7, lr}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800235a:	f7ff feef 	bl	800213c <LL_FLASH_GetUDN>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800236c:	d10d      	bne.n	800238a <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 800236e:	f001 ff45 	bl	80041fc <HAL_GetUIDw0>
 8002372:	4604      	mov	r4, r0
 8002374:	f001 ff4c 	bl	8004210 <HAL_GetUIDw1>
 8002378:	4603      	mov	r3, r0
 800237a:	405c      	eors	r4, r3
 800237c:	f001 ff52 	bl	8004224 <HAL_GetUIDw2>
 8002380:	4603      	mov	r3, r0
 8002382:	ea84 0203 	eor.w	r2, r4, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}
	...

08002394 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af02      	add	r7, sp, #8
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	4618      	mov	r0, r3
 80023a4:	f01a fc78 	bl	801cc98 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80023ae:	9200      	str	r2, [sp, #0]
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <TimestampNow+0x3c>)
 80023b2:	2110      	movs	r1, #16
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f000 f81d 	bl	80023f4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fd fedc 	bl	8000178 <strlen>
 80023c0:	4603      	mov	r3, r0
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	0801dffc 	.word	0x0801dffc

080023d4 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80023d8:	2101      	movs	r1, #1
 80023da:	2002      	movs	r0, #2
 80023dc:	f01a fb22 	bl	801ca24 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80023e8:	2100      	movs	r1, #0
 80023ea:	2002      	movs	r0, #2
 80023ec:	f01a fb1a 	bl	801ca24 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80023f4:	b40c      	push	{r2, r3}
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
 80023fe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002400:	f107 031c 	add.w	r3, r7, #28
 8002404:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002406:	6839      	ldr	r1, [r7, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f01a fe15 	bl	801d03c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002412:	bf00      	nop
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800241c:	b002      	add	sp, #8
 800241e:	4770      	bx	lr

08002420 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_GetTick+0x24>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002446:	f000 f97f 	bl	8002748 <TIMER_IF_GetTimerValue>
 800244a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 800244c:	687b      	ldr	r3, [r7, #4]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000025c 	.word	0x2000025c

0800245c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f9f5 	bl	8002856 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <LL_AHB2_GRP1_EnableClock>:
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80024aa:	f001 fec5 	bl	8004238 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80024ae:	f001 fec9 	bl	8004244 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80024b2:	f001 fecd 	bl	8004250 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80024b6:	1d3b      	adds	r3, r7, #4
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80024cc:	2303      	movs	r3, #3
 80024ce:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80024d0:	2001      	movs	r0, #1
 80024d2:	f7ff ffcf 	bl	8002474 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7ff ffcc 	bl	8002474 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 80024dc:	2002      	movs	r0, #2
 80024de:	f7ff ffc9 	bl	8002474 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 80024e2:	2002      	movs	r0, #2
 80024e4:	f7ff ffc6 	bl	8002474 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80024e8:	2301      	movs	r3, #1
 80024ea:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	4619      	mov	r1, r3
 80024f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f4:	f003 fe34 	bl	8006160 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80024f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4815      	ldr	r0, [pc, #84]	; (8002558 <DBG_Init+0xb4>)
 8002504:	f003 fe2c 	bl	8006160 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002508:	2308      	movs	r3, #8
 800250a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4811      	ldr	r0, [pc, #68]	; (8002558 <DBG_Init+0xb4>)
 8002512:	f003 fe25 	bl	8006160 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002516:	2310      	movs	r3, #16
 8002518:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	4619      	mov	r1, r3
 800251e:	480e      	ldr	r0, [pc, #56]	; (8002558 <DBG_Init+0xb4>)
 8002520:	f003 fe1e 	bl	8006160 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002524:	2200      	movs	r2, #0
 8002526:	2101      	movs	r1, #1
 8002528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252c:	f004 f846 	bl	80065bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002536:	4808      	ldr	r0, [pc, #32]	; (8002558 <DBG_Init+0xb4>)
 8002538:	f004 f840 	bl	80065bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	2108      	movs	r1, #8
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <DBG_Init+0xb4>)
 8002542:	f004 f83b 	bl	80065bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002546:	2200      	movs	r2, #0
 8002548:	2110      	movs	r1, #16
 800254a:	4803      	ldr	r0, [pc, #12]	; (8002558 <DBG_Init+0xb4>)
 800254c:	f004 f836 	bl	80065bc <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	48000400 	.word	0x48000400

0800255c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <EnvSensors_Read+0x40>)
 8002566:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <EnvSensors_Read+0x44>)
 800256a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <EnvSensors_Read+0x48>)
 800256e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <EnvSensors_Read+0x4c>)
 8002586:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <EnvSensors_Read+0x50>)
 800258c:	611a      	str	r2, [r3, #16]

  return 0;
 800258e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002590:	4618      	mov	r0, r3
 8002592:	371c      	adds	r7, #28
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	42480000 	.word	0x42480000
 80025a0:	41900000 	.word	0x41900000
 80025a4:	447a0000 	.word	0x447a0000
 80025a8:	003e090d 	.word	0x003e090d
 80025ac:	000503ab 	.word	0x000503ab

080025b0 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 80025ba:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr

080025d2 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80025ee:	2300      	movs	r3, #0
 80025f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <TIMER_IF_Init+0x5c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	f083 0301 	eor.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01b      	beq.n	8002638 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <TIMER_IF_Init+0x60>)
 8002602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002608:	f7ff fc52 	bl	8001eb0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800260c:	f000 f856 	bl	80026bc <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002614:	480c      	ldr	r0, [pc, #48]	; (8002648 <TIMER_IF_Init+0x60>)
 8002616:	f006 fa63 	bl	8008ae0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <TIMER_IF_Init+0x60>)
 800261c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002620:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002622:	4809      	ldr	r0, [pc, #36]	; (8002648 <TIMER_IF_Init+0x60>)
 8002624:	f006 fb9a 	bl	8008d5c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002628:	2000      	movs	r0, #0
 800262a:	f000 f9d3 	bl	80029d4 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800262e:	f000 f85f 	bl	80026f0 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002632:	4b04      	ldr	r3, [pc, #16]	; (8002644 <TIMER_IF_Init+0x5c>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002638:	79fb      	ldrb	r3, [r7, #7]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000025d 	.word	0x2000025d
 8002648:	20000218 	.word	0x20000218

0800264c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08e      	sub	sp, #56	; 0x38
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800265a:	f107 0308 	add.w	r3, r7, #8
 800265e:	222c      	movs	r2, #44	; 0x2c
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f01b fc7c 	bl	801df60 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002668:	f000 f828 	bl	80026bc <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <TIMER_IF_StartTimer+0x68>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4413      	add	r3, r2
 8002674:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	43db      	mvns	r3, r3
 800267e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002684:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002688:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800268a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	2201      	movs	r2, #1
 8002696:	4619      	mov	r1, r3
 8002698:	4807      	ldr	r0, [pc, #28]	; (80026b8 <TIMER_IF_StartTimer+0x6c>)
 800269a:	f006 f915 	bl	80088c8 <HAL_RTC_SetAlarm_IT>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80026a4:	f7ff fbd6 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80026a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3738      	adds	r7, #56	; 0x38
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20000260 	.word	0x20000260
 80026b8:	20000218 	.word	0x20000218

080026bc <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <TIMER_IF_StopTimer+0x2c>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80026cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026d0:	4806      	ldr	r0, [pc, #24]	; (80026ec <TIMER_IF_StopTimer+0x30>)
 80026d2:	f006 fa05 	bl	8008ae0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <TIMER_IF_StopTimer+0x30>)
 80026d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 80026de:	79fb      	ldrb	r3, [r7, #7]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40002800 	.word	0x40002800
 80026ec:	20000218 	.word	0x20000218

080026f0 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 80026f4:	f000 f98e 	bl	8002a14 <GetTimerTicks>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4a03      	ldr	r2, [pc, #12]	; (8002708 <TIMER_IF_SetTimerContext+0x18>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80026fe:	4b02      	ldr	r3, [pc, #8]	; (8002708 <TIMER_IF_SetTimerContext+0x18>)
 8002700:	681b      	ldr	r3, [r3, #0]
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	20000260 	.word	0x20000260

0800270c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002710:	4b02      	ldr	r3, [pc, #8]	; (800271c <TIMER_IF_GetTimerContext+0x10>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	20000260 	.word	0x20000260

08002720 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800272a:	f000 f973 	bl	8002a14 <GetTimerTicks>
 800272e:	4602      	mov	r2, r0
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002738:	687b      	ldr	r3, [r7, #4]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000260 	.word	0x20000260

08002748 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <TIMER_IF_GetTimerValue+0x24>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800275a:	f000 f95b 	bl	8002a14 <GetTimerTicks>
 800275e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002760:	687b      	ldr	r3, [r7, #4]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	2000025d 	.word	0x2000025d

08002770 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800277a:	2303      	movs	r3, #3
 800277c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800277e:	687b      	ldr	r3, [r7, #4]
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800278a:	b5b0      	push	{r4, r5, r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002792:	2100      	movs	r1, #0
 8002794:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	2000      	movs	r0, #0
 800279a:	460a      	mov	r2, r1
 800279c:	4603      	mov	r3, r0
 800279e:	0d95      	lsrs	r5, r2, #22
 80027a0:	0294      	lsls	r4, r2, #10
 80027a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	4620      	mov	r0, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f7fe fc0d 	bl	8000fcc <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4613      	mov	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bdb0      	pop	{r4, r5, r7, pc}

080027c4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80027c4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80027ce:	2100      	movs	r1, #0
 80027d0:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	2000      	movs	r0, #0
 80027d6:	460c      	mov	r4, r1
 80027d8:	4605      	mov	r5, r0
 80027da:	4620      	mov	r0, r4
 80027dc:	4629      	mov	r1, r5
 80027de:	f04f 0a00 	mov.w	sl, #0
 80027e2:	f04f 0b00 	mov.w	fp, #0
 80027e6:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 80027ea:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80027ee:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80027f2:	4650      	mov	r0, sl
 80027f4:	4659      	mov	r1, fp
 80027f6:	1b02      	subs	r2, r0, r4
 80027f8:	eb61 0305 	sbc.w	r3, r1, r5
 80027fc:	f04f 0000 	mov.w	r0, #0
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	0099      	lsls	r1, r3, #2
 8002806:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800280a:	0090      	lsls	r0, r2, #2
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	eb12 0804 	adds.w	r8, r2, r4
 8002814:	eb43 0905 	adc.w	r9, r3, r5
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002824:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002828:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800282c:	4690      	mov	r8, r2
 800282e:	4699      	mov	r9, r3
 8002830:	4640      	mov	r0, r8
 8002832:	4649      	mov	r1, r9
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	f04f 0300 	mov.w	r3, #0
 800283c:	0a82      	lsrs	r2, r0, #10
 800283e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002842:	0a8b      	lsrs	r3, r1, #10
 8002844:	4613      	mov	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002848:	68fb      	ldr	r3, [r7, #12]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002854:	4770      	bx	lr

08002856 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ff93 	bl	800278a <TIMER_IF_Convert_ms2Tick>
 8002864:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002866:	f000 f8d5 	bl	8002a14 <GetTimerTicks>
 800286a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800286c:	e000      	b.n	8002870 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800286e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002870:	f000 f8d0 	bl	8002a14 <GetTimerTicks>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	429a      	cmp	r2, r3
 800287e:	d8f6      	bhi.n	800286e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002892:	f01a fefb 	bl	801d68c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002896:	bf00      	nop
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80028a6:	f000 f8a5 	bl	80029f4 <TIMER_IF_BkUp_Read_MSBticks>
 80028aa:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3301      	adds	r3, #1
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 f88f 	bl	80029d4 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80028be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c2:	b08c      	sub	sp, #48	; 0x30
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80028cc:	f000 f8a2 	bl	8002a14 <GetTimerTicks>
 80028d0:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80028d2:	f000 f88f 	bl	80029f4 <TIMER_IF_BkUp_Read_MSBticks>
 80028d6:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	2200      	movs	r2, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	60fa      	str	r2, [r7, #12]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	000b      	movs	r3, r1
 80028ec:	2200      	movs	r2, #0
 80028ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f0:	2000      	movs	r0, #0
 80028f2:	460c      	mov	r4, r1
 80028f4:	4605      	mov	r5, r0
 80028f6:	eb12 0804 	adds.w	r8, r2, r4
 80028fa:	eb43 0905 	adc.w	r9, r3, r5
 80028fe:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002902:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	0a82      	lsrs	r2, r0, #10
 8002910:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002914:	0a8b      	lsrs	r3, r1, #10
 8002916:	4613      	mov	r3, r2
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2200      	movs	r2, #0
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002928:	f04f 0b00 	mov.w	fp, #0
 800292c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff46 	bl	80027c4 <TIMER_IF_Convert_Tick2ms>
 8002938:	4603      	mov	r3, r0
 800293a:	b29a      	uxth	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002942:	4618      	mov	r0, r3
 8002944:	3730      	adds	r7, #48	; 0x30
 8002946:	46bd      	mov	sp, r7
 8002948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800294c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	2100      	movs	r1, #0
 8002958:	4803      	ldr	r0, [pc, #12]	; (8002968 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800295a:	f006 fa91 	bl	8008e80 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000218 	.word	0x20000218

0800296c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	2101      	movs	r1, #1
 8002978:	4803      	ldr	r0, [pc, #12]	; (8002988 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800297a:	f006 fa81 	bl	8008e80 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000218 	.word	0x20000218

0800298c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002996:	2100      	movs	r1, #0
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800299a:	f006 fa89 	bl	8008eb0 <HAL_RTCEx_BKUPRead>
 800299e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000218 	.word	0x20000218

080029b0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80029ba:	2101      	movs	r1, #1
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80029be:	f006 fa77 	bl	8008eb0 <HAL_RTCEx_BKUPRead>
 80029c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80029c4:	687b      	ldr	r3, [r7, #4]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000218 	.word	0x20000218

080029d4 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	2102      	movs	r1, #2
 80029e0:	4803      	ldr	r0, [pc, #12]	; (80029f0 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 80029e2:	f006 fa4d 	bl	8008e80 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20000218 	.word	0x20000218

080029f4 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80029fa:	2102      	movs	r1, #2
 80029fc:	4804      	ldr	r0, [pc, #16]	; (8002a10 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80029fe:	f006 fa57 	bl	8008eb0 <HAL_RTCEx_BKUPRead>
 8002a02:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002a04:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000218 	.word	0x20000218

08002a14 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002a1a:	480b      	ldr	r0, [pc, #44]	; (8002a48 <GetTimerTicks+0x34>)
 8002a1c:	f7ff fdd9 	bl	80025d2 <LL_RTC_TIME_GetSubSecond>
 8002a20:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002a22:	e003      	b.n	8002a2c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002a24:	4808      	ldr	r0, [pc, #32]	; (8002a48 <GetTimerTicks+0x34>)
 8002a26:	f7ff fdd4 	bl	80025d2 <LL_RTC_TIME_GetSubSecond>
 8002a2a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002a2c:	4806      	ldr	r0, [pc, #24]	; (8002a48 <GetTimerTicks+0x34>)
 8002a2e:	f7ff fdd0 	bl	80025d2 <LL_RTC_TIME_GetSubSecond>
 8002a32:	4602      	mov	r2, r0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d1f4      	bne.n	8002a24 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40002800 	.word	0x40002800

08002a4c <LL_AHB2_GRP1_EnableClock>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a70:	68fb      	ldr	r3, [r7, #12]
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <LL_APB2_GRP1_EnableClock>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_APB2_GRP1_DisableClock>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ad4:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <MX_USART1_UART_Init+0x94>)
 8002ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ada:	4b21      	ldr	r3, [pc, #132]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ae2:	4b1f      	ldr	r3, [pc, #124]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ae8:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002af4:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002af6:	220c      	movs	r2, #12
 8002af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002afa:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b00:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b0c:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b18:	4811      	ldr	r0, [pc, #68]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002b1a:	f006 feba 	bl	8009892 <HAL_UART_Init>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b24:	f7ff f996 	bl	8001e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	480d      	ldr	r0, [pc, #52]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002b2c:	f008 ffdd 	bl	800baea <HAL_UARTEx_SetTxFifoThreshold>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b36:	f7ff f98d 	bl	8001e54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	4808      	ldr	r0, [pc, #32]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002b3e:	f009 f812 	bl	800bb66 <HAL_UARTEx_SetRxFifoThreshold>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b48:	f7ff f984 	bl	8001e54 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002b4c:	4804      	ldr	r0, [pc, #16]	; (8002b60 <MX_USART1_UART_Init+0x90>)
 8002b4e:	f008 ff91 	bl	800ba74 <HAL_UARTEx_EnableFifoMode>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b58:	f7ff f97c 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000264 	.word	0x20000264
 8002b64:	40013800 	.word	0x40013800

08002b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b096      	sub	sp, #88	; 0x58
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b80:	f107 030c 	add.w	r3, r7, #12
 8002b84:	2238      	movs	r2, #56	; 0x38
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f01b f9e9 	bl	801df60 <memset>
  if(uartHandle->Instance==USART1)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a2f      	ldr	r2, [pc, #188]	; (8002c50 <HAL_UART_MspInit+0xe8>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d156      	bne.n	8002c46 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b9c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002ba0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f005 fcf2 	bl	8008590 <HAL_RCCEx_PeriphCLKConfig>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bb2:	f7ff f94f 	bl	8001e54 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002bba:	f7ff ff5f 	bl	8002a7c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f7ff ff44 	bl	8002a4c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002bc4:	23c0      	movs	r3, #192	; 0xc0
 8002bc6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002bdc:	4619      	mov	r1, r3
 8002bde:	481d      	ldr	r0, [pc, #116]	; (8002c54 <HAL_UART_MspInit+0xec>)
 8002be0:	f003 fabe 	bl	8006160 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002be6:	4a1d      	ldr	r2, [pc, #116]	; (8002c5c <HAL_UART_MspInit+0xf4>)
 8002be8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002bea:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002bec:	2212      	movs	r2, #18
 8002bee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfc:	4b16      	ldr	r3, [pc, #88]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002bfe:	2280      	movs	r2, #128	; 0x80
 8002c00:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c02:	4b15      	ldr	r3, [pc, #84]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c1a:	480f      	ldr	r0, [pc, #60]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002c1c:	f002 fc9c 	bl	8005558 <HAL_DMA_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002c26:	f7ff f915 	bl	8001e54 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002c2e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c30:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <HAL_UART_MspInit+0xf0>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2102      	movs	r1, #2
 8002c3a:	2024      	movs	r0, #36	; 0x24
 8002c3c:	f002 fc55 	bl	80054ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c40:	2024      	movs	r0, #36	; 0x24
 8002c42:	f002 fc6c 	bl	800551e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c46:	bf00      	nop
 8002c48:	3758      	adds	r7, #88	; 0x58
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40013800 	.word	0x40013800
 8002c54:	48000400 	.word	0x48000400
 8002c58:	200002f8 	.word	0x200002f8
 8002c5c:	40020008 	.word	0x40020008

08002c60 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <HAL_UART_MspDeInit+0x3c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10f      	bne.n	8002c92 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002c72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c76:	f7ff ff19 	bl	8002aac <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002c7a:	21c0      	movs	r1, #192	; 0xc0
 8002c7c:	4808      	ldr	r0, [pc, #32]	; (8002ca0 <HAL_UART_MspDeInit+0x40>)
 8002c7e:	f003 fbcf 	bl	8006420 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fd0e 	bl	80056a8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002c8c:	2024      	movs	r0, #36	; 0x24
 8002c8e:	f002 fc54 	bl	800553a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	48000400 	.word	0x48000400

08002ca4 <LL_APB2_GRP1_ForceReset>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <LL_APB2_GRP1_ReleaseReset>:
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cdc:	4013      	ands	r3, r2
 8002cde:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
	...

08002cec <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cf6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002cfa:	4905      	ldr	r1, [pc, #20]	; (8002d10 <LL_EXTI_EnableIT_0_31+0x24>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	58000800 	.word	0x58000800

08002d14 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002d1c:	4a07      	ldr	r2, [pc, #28]	; (8002d3c <vcom_Init+0x28>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002d22:	f7fe fc11 	bl	8001548 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002d26:	f7ff fed3 	bl	8002ad0 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8002d2a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002d2e:	f7ff ffdd 	bl	8002cec <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002d32:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	2000035c 	.word	0x2000035c

08002d40 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8002d44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d48:	f7ff ffac 	bl	8002ca4 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8002d4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d50:	f7ff ffb9 	bl	8002cc6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002d54:	4804      	ldr	r0, [pc, #16]	; (8002d68 <vcom_DeInit+0x28>)
 8002d56:	f7ff ff83 	bl	8002c60 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002d5a:	200f      	movs	r0, #15
 8002d5c:	f002 fbed 	bl	800553a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002d60:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20000264 	.word	0x20000264

08002d6c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	460b      	mov	r3, r1
 8002d76:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4804      	ldr	r0, [pc, #16]	; (8002d90 <vcom_Trace_DMA+0x24>)
 8002d80:	f006 fe24 	bl	80099cc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002d84:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000264 	.word	0x20000264

08002d94 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002d9c:	4a19      	ldr	r2, [pc, #100]	; (8002e04 <vcom_ReceiveInit+0x70>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002da2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002da6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002da8:	f107 0308 	add.w	r3, r7, #8
 8002dac:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002db0:	4815      	ldr	r0, [pc, #84]	; (8002e08 <vcom_ReceiveInit+0x74>)
 8002db2:	f008 fdd2 	bl	800b95a <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002db6:	bf00      	nop
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <vcom_ReceiveInit+0x74>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc6:	d0f7      	beq.n	8002db8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002dc8:	bf00      	nop
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <vcom_ReceiveInit+0x74>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd8:	d1f7      	bne.n	8002dca <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <vcom_ReceiveInit+0x74>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <vcom_ReceiveInit+0x74>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002de8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002dea:	4807      	ldr	r0, [pc, #28]	; (8002e08 <vcom_ReceiveInit+0x74>)
 8002dec:	f008 fe10 	bl	800ba10 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002df0:	2201      	movs	r2, #1
 8002df2:	4906      	ldr	r1, [pc, #24]	; (8002e0c <vcom_ReceiveInit+0x78>)
 8002df4:	4804      	ldr	r0, [pc, #16]	; (8002e08 <vcom_ReceiveInit+0x74>)
 8002df6:	f006 fd9d 	bl	8009934 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002dfa:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000360 	.word	0x20000360
 8002e08:	20000264 	.word	0x20000264
 8002e0c:	20000358 	.word	0x20000358

08002e10 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <HAL_UART_TxCpltCallback+0x24>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d103      	bne.n	8002e2a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002e22:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <HAL_UART_TxCpltCallback+0x28>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2000      	movs	r0, #0
 8002e28:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40013800 	.word	0x40013800
 8002e38:	2000035c 	.word	0x2000035c

08002e3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_UART_RxCpltCallback+0x44>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d113      	bne.n	8002e76 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002e4e:	4b0d      	ldr	r3, [pc, #52]	; (8002e84 <HAL_UART_RxCpltCallback+0x48>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_UART_RxCpltCallback+0x30>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_UART_RxCpltCallback+0x48>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2101      	movs	r1, #1
 8002e68:	4807      	ldr	r0, [pc, #28]	; (8002e88 <HAL_UART_RxCpltCallback+0x4c>)
 8002e6a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4906      	ldr	r1, [pc, #24]	; (8002e88 <HAL_UART_RxCpltCallback+0x4c>)
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f006 fd5f 	bl	8009934 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40013800 	.word	0x40013800
 8002e84:	20000360 	.word	0x20000360
 8002e88:	20000358 	.word	0x20000358

08002e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e8c:	480d      	ldr	r0, [pc, #52]	; (8002ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e90:	f7ff fb99 	bl	80025c6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e94:	480c      	ldr	r0, [pc, #48]	; (8002ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e96:	490d      	ldr	r1, [pc, #52]	; (8002ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <LoopForever+0xe>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e9c:	e002      	b.n	8002ea4 <LoopCopyDataInit>

08002e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea2:	3304      	adds	r3, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea8:	d3f9      	bcc.n	8002e9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eac:	4c0a      	ldr	r4, [pc, #40]	; (8002ed8 <LoopForever+0x16>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb0:	e001      	b.n	8002eb6 <LoopFillZerobss>

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb4:	3204      	adds	r2, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eba:	f01b f859 	bl	801df70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ebe:	f7fe fefb 	bl	8001cb8 <main>

08002ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ec2:	e7fe      	b.n	8002ec2 <LoopForever>
  ldr   r0, =_estack
 8002ec4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ecc:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8002ed0:	0801f07c 	.word	0x0801f07c
  ldr r2, =_sbss
 8002ed4:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 8002ed8:	20002250 	.word	0x20002250

08002edc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002edc:	e7fe      	b.n	8002edc <ADC_IRQHandler>

08002ede <bmp3_init>:
 *  @brief This API is the entry point.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id and calibration data of the sensor.
 */
int8_t bmp3_init(struct bmp3_dev *dev)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fbd2 	bl	8003694 <null_ptr_check>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 8002ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d131      	bne.n	8002f60 <bmp3_init+0x82>
    {
        /* Read mechanism according to selected interface */
        if (dev->intf != BMP3_I2C_INTF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7a1b      	ldrb	r3, [r3, #8]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d003      	beq.n	8002f0c <bmp3_init+0x2e>
        {
            /* If SPI interface is selected, read extra byte */
            dev->dummy_byte = 1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	729a      	strb	r2, [r3, #10]
 8002f0a:	e002      	b.n	8002f12 <bmp3_init+0x34>
        }
        else
        {
            /* If I2C interface is selected, no need to read
             * extra byte */
            dev->dummy_byte = 0;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	729a      	strb	r2, [r3, #10]
        }

        /* Read the chip-id of bmp3 sensor */
        rslt = bmp3_get_regs(BMP3_REG_CHIP_ID, &chip_id, 1, dev);
 8002f12:	f107 010e 	add.w	r1, r7, #14
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f000 f826 	bl	8002f6c <bmp3_get_regs>
 8002f20:	4603      	mov	r3, r0
 8002f22:	73fb      	strb	r3, [r7, #15]

        /* Proceed if everything is fine until now */
        if (rslt == BMP3_OK)
 8002f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d119      	bne.n	8002f60 <bmp3_init+0x82>
        {
            /* Check for chip id validity */
            if ((chip_id == BMP3_CHIP_ID) || (chip_id == BMP390_CHIP_ID))
 8002f2c:	7bbb      	ldrb	r3, [r7, #14]
 8002f2e:	2b50      	cmp	r3, #80	; 0x50
 8002f30:	d002      	beq.n	8002f38 <bmp3_init+0x5a>
 8002f32:	7bbb      	ldrb	r3, [r7, #14]
 8002f34:	2b60      	cmp	r3, #96	; 0x60
 8002f36:	d111      	bne.n	8002f5c <bmp3_init+0x7e>
            {
                dev->chip_id = chip_id;
 8002f38:	7bba      	ldrb	r2, [r7, #14]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bmp3_soft_reset(dev);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f939 	bl	80031b6 <bmp3_soft_reset>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8002f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <bmp3_init+0x82>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f988 	bl	8003266 <get_calib_data>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMP3_OK)
 8002f5a:	e001      	b.n	8002f60 <bmp3_init+0x82>
                }
            }
            else
            {
                rslt = BMP3_E_DEV_NOT_FOUND;
 8002f5c:	23fe      	movs	r3, #254	; 0xfe
 8002f5e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <bmp3_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bmp3_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 8002f6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f70:	b08b      	sub	sp, #44	; 0x2c
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t idx;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	f000 fb88 	bl	8003694 <null_ptr_check>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Proceed if null check is fine */
    if ((rslt == BMP3_OK) && (reg_data != NULL))
 8002f8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d172      	bne.n	8003078 <bmp3_get_regs+0x10c>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d06f      	beq.n	8003078 <bmp3_get_regs+0x10c>
    {
 8002f98:	466b      	mov	r3, sp
 8002f9a:	461e      	mov	r6, r3
        uint32_t temp_len = len + dev->dummy_byte;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	7a9b      	ldrb	r3, [r3, #10]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	61fb      	str	r3, [r7, #28]
        uint8_t temp_buff[len + dev->dummy_byte];
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	7a9b      	ldrb	r3, [r3, #10]
 8002fac:	461a      	mov	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	18d1      	adds	r1, r2, r3
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	4688      	mov	r8, r1
 8002fbc:	4699      	mov	r9, r3
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	461d      	mov	r5, r3
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	00eb      	lsls	r3, r5, #3
 8002fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe6:	00e2      	lsls	r2, r4, #3
 8002fe8:	1dcb      	adds	r3, r1, #7
 8002fea:	08db      	lsrs	r3, r3, #3
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	ebad 0d03 	sub.w	sp, sp, r3
 8002ff2:	466b      	mov	r3, sp
 8002ff4:	3300      	adds	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

        /* If interface selected is SPI */
        if (dev->intf != BMP3_I2C_INTF)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	7a1b      	ldrb	r3, [r3, #8]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d025      	beq.n	800304c <bmp3_get_regs+0xe0>
        {
            reg_addr = reg_addr | 0x80;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003006:	73fb      	strb	r3, [r7, #15]

            /* Read the data from the register */
            dev->intf_rslt = dev->read(reg_addr, temp_buff, temp_len, dev->intf_ptr);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68dc      	ldr	r4, [r3, #12]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	7bf8      	ldrb	r0, [r7, #15]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	6979      	ldr	r1, [r7, #20]
 8003016:	47a0      	blx	r4
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	725a      	strb	r2, [r3, #9]
            for (idx = 0; idx < len; idx++)
 8003020:	2300      	movs	r3, #0
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	e00d      	b.n	8003042 <bmp3_get_regs+0xd6>
            {
                reg_data[idx] = temp_buff[idx + dev->dummy_byte];
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	7a9b      	ldrb	r3, [r3, #10]
 800302a:	461a      	mov	r2, r3
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	441a      	add	r2, r3
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	440b      	add	r3, r1
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	5c8a      	ldrb	r2, [r1, r2]
 800303a:	701a      	strb	r2, [r3, #0]
            for (idx = 0; idx < len; idx++)
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	3301      	adds	r3, #1
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	d3ed      	bcc.n	8003026 <bmp3_get_regs+0xba>
 800304a:	e00b      	b.n	8003064 <bmp3_get_regs+0xf8>
            }
        }
        else
        {
            /* Read the data using I2C */
            dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	68dc      	ldr	r4, [r3, #12]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	7bf8      	ldrb	r0, [r7, #15]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	47a0      	blx	r4
 800305c:	4603      	mov	r3, r0
 800305e:	461a      	mov	r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	725a      	strb	r2, [r3, #9]
        }

        /* Check for communication error */
        if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <bmp3_get_regs+0x108>
        {
            rslt = BMP3_E_COMM_FAIL;
 800306e:	23f9      	movs	r3, #249	; 0xf9
 8003070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003074:	46b5      	mov	sp, r6
    {
 8003076:	e002      	b.n	800307e <bmp3_get_regs+0x112>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 8003078:	23ff      	movs	r3, #255	; 0xff
 800307a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800307e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003082:	4618      	mov	r0, r3
 8003084:	372c      	adds	r7, #44	; 0x2c
 8003086:	46bd      	mov	sp, r7
 8003088:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800308c <bmp3_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bmp3_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bmp3_dev *dev)
{
 800308c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003090:	b08b      	sub	sp, #44	; 0x2c
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	466b      	mov	r3, sp
 800309e:	461e      	mov	r6, r3
    int8_t rslt;
    uint8_t temp_buff[len * 2];
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	0059      	lsls	r1, r3, #1
 80030a4:	460b      	mov	r3, r1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	2300      	movs	r3, #0
 80030ac:	4688      	mov	r8, r1
 80030ae:	4699      	mov	r9, r3
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030c4:	2300      	movs	r3, #0
 80030c6:	460c      	mov	r4, r1
 80030c8:	461d      	mov	r5, r3
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	00eb      	lsls	r3, r5, #3
 80030d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d8:	00e2      	lsls	r2, r4, #3
 80030da:	1dcb      	adds	r3, r1, #7
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	ebad 0d03 	sub.w	sp, sp, r3
 80030e4:	466b      	mov	r3, sp
 80030e6:	3300      	adds	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
    uint32_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80030ea:	6838      	ldr	r0, [r7, #0]
 80030ec:	f000 fad2 	bl	8003694 <null_ptr_check>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check for arguments validity */
    if ((rslt == BMP3_OK) && (reg_addr != NULL) && (reg_data != NULL))
 80030f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d14e      	bne.n	800319c <bmp3_set_regs+0x110>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d04b      	beq.n	800319c <bmp3_set_regs+0x110>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d048      	beq.n	800319c <bmp3_set_regs+0x110>
    {
        if (len != 0)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d041      	beq.n	8003194 <bmp3_set_regs+0x108>
        {
            temp_buff[0] = reg_data[0];
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781a      	ldrb	r2, [r3, #0]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	701a      	strb	r2, [r3, #0]

            /* If interface selected is SPI */
            if (dev->intf == BMP3_SPI_INTF)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	7a1b      	ldrb	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d114      	bne.n	800314a <bmp3_set_regs+0xbe>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e00d      	b.n	8003142 <bmp3_set_regs+0xb6>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8003126:	7ffb      	ldrb	r3, [r7, #31]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	781a      	ldrb	r2, [r3, #0]
 800312e:	7ffb      	ldrb	r3, [r7, #31]
 8003130:	68f9      	ldr	r1, [r7, #12]
 8003132:	440b      	add	r3, r1
 8003134:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 800313c:	7ffb      	ldrb	r3, [r7, #31]
 800313e:	3301      	adds	r3, #1
 8003140:	77fb      	strb	r3, [r7, #31]
 8003142:	7ffb      	ldrb	r3, [r7, #31]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d8ed      	bhi.n	8003126 <bmp3_set_regs+0x9a>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d909      	bls.n	8003164 <bmp3_set_regs+0xd8>
            {
                /* Interleave register address w.r.t data for
                 * burst write*/
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	6979      	ldr	r1, [r7, #20]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f8aa 	bl	80032b0 <interleave_reg_addr>
                temp_len = len * 2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	623b      	str	r3, [r7, #32]
 8003162:	e001      	b.n	8003168 <bmp3_set_regs+0xdc>
            }
            else
            {
                temp_len = len;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	623b      	str	r3, [r7, #32]
            }

            dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691c      	ldr	r4, [r3, #16]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	7818      	ldrb	r0, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	6a3a      	ldr	r2, [r7, #32]
 8003176:	6979      	ldr	r1, [r7, #20]
 8003178:	47a0      	blx	r4
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	725a      	strb	r2, [r3, #9]

            /* Check for communication error */
            if (dev->intf_rslt != BMP3_INTF_RET_SUCCESS)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <bmp3_set_regs+0x118>
            {
                rslt = BMP3_E_COMM_FAIL;
 800318c:	23f9      	movs	r3, #249	; 0xf9
 800318e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 8003192:	e007      	b.n	80031a4 <bmp3_set_regs+0x118>
            }
        }
        else
        {
            rslt = BMP3_E_INVALID_LEN;
 8003194:	23fa      	movs	r3, #250	; 0xfa
 8003196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (len != 0)
 800319a:	e003      	b.n	80031a4 <bmp3_set_regs+0x118>
        }
    }
    else
    {
        rslt = BMP3_E_NULL_PTR;
 800319c:	23ff      	movs	r3, #255	; 0xff
 800319e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031a2:	e000      	b.n	80031a6 <bmp3_set_regs+0x11a>
        if (len != 0)
 80031a4:	bf00      	nop
    }

    return rslt;
 80031a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80031aa:	46b5      	mov	sp, r6
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	372c      	adds	r7, #44	; 0x2c
 80031b0:	46bd      	mov	sp, r7
 80031b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080031b6 <bmp3_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bmp3_soft_reset(struct bmp3_dev *dev)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CMD;
 80031be:	237e      	movs	r3, #126	; 0x7e
 80031c0:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BMP3_SOFT_RESET;
 80031c2:	23b6      	movs	r3, #182	; 0xb6
 80031c4:	737b      	strb	r3, [r7, #13]
    uint8_t cmd_rdy_status;
    uint8_t cmd_err_status;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa64 	bl	8003694 <null_ptr_check>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMP3_OK)
 80031d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d140      	bne.n	800325a <bmp3_soft_reset+0xa4>
    {
        /* Check for command ready status */
        rslt = bmp3_get_regs(BMP3_REG_SENS_STATUS, &cmd_rdy_status, 1, dev);
 80031d8:	f107 010c 	add.w	r1, r7, #12
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	2003      	movs	r0, #3
 80031e2:	f7ff fec3 	bl	8002f6c <bmp3_get_regs>
 80031e6:	4603      	mov	r3, r0
 80031e8:	73fb      	strb	r3, [r7, #15]

        /* Device is ready to accept new command */
        if ((cmd_rdy_status & BMP3_CMD_RDY) && (rslt == BMP3_OK))
 80031ea:	7b3b      	ldrb	r3, [r7, #12]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d02e      	beq.n	8003252 <bmp3_soft_reset+0x9c>
 80031f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d12a      	bne.n	8003252 <bmp3_soft_reset+0x9c>
        {
            /* Write the soft reset command in the sensor */
            rslt = bmp3_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80031fc:	f107 010d 	add.w	r1, r7, #13
 8003200:	f107 000e 	add.w	r0, r7, #14
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f7ff ff40 	bl	800308c <bmp3_set_regs>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]

            /* Proceed if everything is fine until now */
            if (rslt == BMP3_OK)
 8003210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d11f      	bne.n	8003258 <bmp3_soft_reset+0xa2>
            {
                /* Wait for 2 ms */
                dev->delay_us(2000, dev->intf_ptr);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6852      	ldr	r2, [r2, #4]
 8003220:	4611      	mov	r1, r2
 8003222:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003226:	4798      	blx	r3

                /* Read for command error status */
                rslt = bmp3_get_regs(BMP3_REG_ERR, &cmd_err_status, 1, dev);
 8003228:	f107 010b 	add.w	r1, r7, #11
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	2002      	movs	r0, #2
 8003232:	f7ff fe9b 	bl	8002f6c <bmp3_get_regs>
 8003236:	4603      	mov	r3, r0
 8003238:	73fb      	strb	r3, [r7, #15]

                /* check for command error status */
                if ((cmd_err_status & BMP3_REG_CMD) || (rslt != BMP3_OK))
 800323a:	7afb      	ldrb	r3, [r7, #11]
 800323c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <bmp3_soft_reset+0x96>
 8003244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <bmp3_soft_reset+0xa2>
                {
                    /* Command not written hence return
                     * error */
                    rslt = BMP3_E_CMD_EXEC_FAILED;
 800324c:	23fc      	movs	r3, #252	; 0xfc
 800324e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMP3_OK)
 8003250:	e002      	b.n	8003258 <bmp3_soft_reset+0xa2>
                }
            }
        }
        else
        {
            rslt = BMP3_E_CMD_EXEC_FAILED;
 8003252:	23fc      	movs	r3, #252	; 0xfc
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	e000      	b.n	800325a <bmp3_soft_reset+0xa4>
            if (rslt == BMP3_OK)
 8003258:	bf00      	nop
        }
    }

    return rslt;
 800325a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it then compensates it and store in the device structure.
 */
static int8_t get_calib_data(struct bmp3_dev *dev)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b088      	sub	sp, #32
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BMP3_REG_CALIB_DATA;
 800326e:	2331      	movs	r3, #49	; 0x31
 8003270:	77fb      	strb	r3, [r7, #31]

    /* Array to store calibration data */
    uint8_t calib_data[BMP3_LEN_CALIB_DATA] = { 0 };
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
 8003284:	741a      	strb	r2, [r3, #16]

    /* Read the calibration data from the sensor */
    rslt = bmp3_get_regs(reg_addr, calib_data, BMP3_LEN_CALIB_DATA, dev);
 8003286:	f107 0108 	add.w	r1, r7, #8
 800328a:	7ff8      	ldrb	r0, [r7, #31]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2215      	movs	r2, #21
 8003290:	f7ff fe6c 	bl	8002f6c <bmp3_get_regs>
 8003294:	4603      	mov	r3, r0
 8003296:	77bb      	strb	r3, [r7, #30]

    /* Parse calibration data and store it in device structure */
    parse_calib_data(calib_data, dev);
 8003298:	f107 0308 	add.w	r3, r7, #8
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f830 	bl	8003304 <parse_calib_data>

    return rslt;
 80032a4:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b087      	sub	sp, #28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
    uint32_t index;

    for (index = 1; index < len; index++)
 80032be:	2301      	movs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	e015      	b.n	80032f0 <interleave_reg_addr+0x40>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	441a      	add	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	3b01      	subs	r3, #1
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	440b      	add	r3, r1
 80032d4:	7812      	ldrb	r2, [r2, #0]
 80032d6:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	441a      	add	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	68b9      	ldr	r1, [r7, #8]
 80032e4:	440b      	add	r3, r1
 80032e6:	7812      	ldrb	r2, [r2, #0]
 80032e8:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	3301      	adds	r3, #1
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d3e5      	bcc.n	80032c4 <interleave_reg_addr+0x14>
    }
}
 80032f8:	bf00      	nop
 80032fa:	bf00      	nop
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <parse_calib_data>:
/*!
 *  @brief This internal API is used to parse the calibration data, compensates
 *  it and store it in device structure
 */
static void parse_calib_data(const uint8_t *reg_data, struct bmp3_dev *dev)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
    /* Temporary variable to store the aligned trim data */
    struct bmp3_reg_calib_data *reg_calib_data = &dev->calib_data.reg_calib_data;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	3390      	adds	r3, #144	; 0x90
 8003312:	617b      	str	r3, [r7, #20]
    struct bmp3_quantized_calib_data *quantized_calib_data = &dev->calib_data.quantized_calib_data;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	3318      	adds	r3, #24
 8003318:	613b      	str	r3, [r7, #16]

    /* Temporary variable */
    double temp_var;

    /* 1 / 2^8 */
    temp_var = 0.00390625f;
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	4ba4      	ldr	r3, [pc, #656]	; (80035b0 <parse_calib_data+0x2ac>)
 8003320:	e9c7 2302 	strd	r2, r3, [r7, #8]
    reg_calib_data->par_t1 = BMP3_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3301      	adds	r3, #1
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	b21a      	sxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	b21b      	sxth	r3, r3
 8003334:	4313      	orrs	r3, r2
 8003336:	b21b      	sxth	r3, r3
 8003338:	b29a      	uxth	r2, r3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	801a      	strh	r2, [r3, #0]
    quantized_calib_data->par_t1 = ((double)reg_calib_data->par_t1 / temp_var);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd f862 	bl	800040c <__aeabi_ui2d>
 8003348:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800334c:	f7fd fa02 	bl	8000754 <__aeabi_ddiv>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	6939      	ldr	r1, [r7, #16]
 8003356:	e9c1 2300 	strd	r2, r3, [r1]
    reg_calib_data->par_t2 = BMP3_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3303      	adds	r3, #3
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	b21a      	sxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3302      	adds	r3, #2
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b21b      	sxth	r3, r3
 800336c:	4313      	orrs	r3, r2
 800336e:	b21b      	sxth	r3, r3
 8003370:	b29a      	uxth	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	805a      	strh	r2, [r3, #2]
    temp_var = 1073741824.0f;
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	4b8e      	ldr	r3, [pc, #568]	; (80035b4 <parse_calib_data+0x2b0>)
 800337c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t2 = ((double)reg_calib_data->par_t2 / temp_var);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	885b      	ldrh	r3, [r3, #2]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f841 	bl	800040c <__aeabi_ui2d>
 800338a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338e:	f7fd f9e1 	bl	8000754 <__aeabi_ddiv>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	6939      	ldr	r1, [r7, #16]
 8003398:	e9c1 2302 	strd	r2, r3, [r1, #8]
    reg_calib_data->par_t3 = (int8_t)reg_data[4];
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	b25a      	sxtb	r2, r3
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	711a      	strb	r2, [r3, #4]
    temp_var = 281474976710656.0f;
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <parse_calib_data+0x2b4>)
 80033ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_t3 = ((double)reg_calib_data->par_t3 / temp_var);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd f837 	bl	800042c <__aeabi_i2d>
 80033be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033c2:	f7fd f9c7 	bl	8000754 <__aeabi_ddiv>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	6939      	ldr	r1, [r7, #16]
 80033cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    reg_calib_data->par_p1 = (int16_t)BMP3_CONCAT_BYTES(reg_data[6], reg_data[5]);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3306      	adds	r3, #6
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	b21a      	sxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3305      	adds	r3, #5
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b21a      	sxth	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	80da      	strh	r2, [r3, #6]
    temp_var = 1048576.0f;
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	4b73      	ldr	r3, [pc, #460]	; (80035bc <parse_calib_data+0x2b8>)
 80033f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p1 = ((double)(reg_calib_data->par_p1 - (16384)) / temp_var);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80033fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd f814 	bl	800042c <__aeabi_i2d>
 8003404:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003408:	f7fd f9a4 	bl	8000754 <__aeabi_ddiv>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	6939      	ldr	r1, [r7, #16]
 8003412:	e9c1 2306 	strd	r2, r3, [r1, #24]
    reg_calib_data->par_p2 = (int16_t)BMP3_CONCAT_BYTES(reg_data[8], reg_data[7]);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3308      	adds	r3, #8
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	b21a      	sxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3307      	adds	r3, #7
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b21b      	sxth	r3, r3
 8003428:	4313      	orrs	r3, r2
 800342a:	b21a      	sxth	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	811a      	strh	r2, [r3, #8]
    temp_var = 536870912.0f;
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <parse_calib_data+0x2bc>)
 8003436:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p2 = ((double)(reg_calib_data->par_p2 - (16384)) / temp_var);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003440:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8003444:	4618      	mov	r0, r3
 8003446:	f7fc fff1 	bl	800042c <__aeabi_i2d>
 800344a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800344e:	f7fd f981 	bl	8000754 <__aeabi_ddiv>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	6939      	ldr	r1, [r7, #16]
 8003458:	e9c1 2308 	strd	r2, r3, [r1, #32]
    reg_calib_data->par_p3 = (int8_t)reg_data[9];
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3309      	adds	r3, #9
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b25a      	sxtb	r2, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	729a      	strb	r2, [r3, #10]
    temp_var = 4294967296.0f;
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <parse_calib_data+0x2c0>)
 800346e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p3 = ((double)reg_calib_data->par_p3 / temp_var);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fc ffd7 	bl	800042c <__aeabi_i2d>
 800347e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003482:	f7fd f967 	bl	8000754 <__aeabi_ddiv>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	6939      	ldr	r1, [r7, #16]
 800348c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    reg_calib_data->par_p4 = (int8_t)reg_data[10];
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	330a      	adds	r3, #10
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b25a      	sxtb	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	72da      	strb	r2, [r3, #11]
    temp_var = 137438953472.0f;
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <parse_calib_data+0x2c4>)
 80034a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p4 = ((double)reg_calib_data->par_p4 / temp_var);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fc ffbd 	bl	800042c <__aeabi_i2d>
 80034b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034b6:	f7fd f94d 	bl	8000754 <__aeabi_ddiv>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	6939      	ldr	r1, [r7, #16]
 80034c0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    reg_calib_data->par_p5 = BMP3_CONCAT_BYTES(reg_data[12], reg_data[11]);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	330c      	adds	r3, #12
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	b21a      	sxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	330b      	adds	r3, #11
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	4313      	orrs	r3, r2
 80034d8:	b21b      	sxth	r3, r3
 80034da:	b29a      	uxth	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	819a      	strh	r2, [r3, #12]

    /* 1 / 2^3 */
    temp_var = 0.125f;
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80034e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p5 = ((double)reg_calib_data->par_p5 / temp_var);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	899b      	ldrh	r3, [r3, #12]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fc ff8b 	bl	800040c <__aeabi_ui2d>
 80034f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034fa:	f7fd f92b 	bl	8000754 <__aeabi_ddiv>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	6939      	ldr	r1, [r7, #16]
 8003504:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    reg_calib_data->par_p6 = BMP3_CONCAT_BYTES(reg_data[14], reg_data[13]);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	330e      	adds	r3, #14
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	b21a      	sxth	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	330d      	adds	r3, #13
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	b21b      	sxth	r3, r3
 800351a:	4313      	orrs	r3, r2
 800351c:	b21b      	sxth	r3, r3
 800351e:	b29a      	uxth	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	81da      	strh	r2, [r3, #14]
    temp_var = 64.0f;
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	4b28      	ldr	r3, [pc, #160]	; (80035cc <parse_calib_data+0x2c8>)
 800352a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p6 = ((double)reg_calib_data->par_p6 / temp_var);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	89db      	ldrh	r3, [r3, #14]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fc ff6a 	bl	800040c <__aeabi_ui2d>
 8003538:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800353c:	f7fd f90a 	bl	8000754 <__aeabi_ddiv>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    reg_calib_data->par_p7 = (int8_t)reg_data[15];
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	330f      	adds	r3, #15
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	b25a      	sxtb	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	741a      	strb	r2, [r3, #16]
    temp_var = 256.0f;
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <parse_calib_data+0x2cc>)
 800355c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p7 = ((double)reg_calib_data->par_p7 / temp_var);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc ff60 	bl	800042c <__aeabi_i2d>
 800356c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003570:	f7fd f8f0 	bl	8000754 <__aeabi_ddiv>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	6939      	ldr	r1, [r7, #16]
 800357a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    reg_calib_data->par_p8 = (int8_t)reg_data[16];
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3310      	adds	r3, #16
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b25a      	sxtb	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	745a      	strb	r2, [r3, #17]
    temp_var = 32768.0f;
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <parse_calib_data+0x2d0>)
 8003590:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p8 = ((double)reg_calib_data->par_p8 / temp_var);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ff46 	bl	800042c <__aeabi_i2d>
 80035a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a4:	f7fd f8d6 	bl	8000754 <__aeabi_ddiv>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	6939      	ldr	r1, [r7, #16]
 80035ae:	e013      	b.n	80035d8 <parse_calib_data+0x2d4>
 80035b0:	3f700000 	.word	0x3f700000
 80035b4:	41d00000 	.word	0x41d00000
 80035b8:	42f00000 	.word	0x42f00000
 80035bc:	41300000 	.word	0x41300000
 80035c0:	41c00000 	.word	0x41c00000
 80035c4:	41f00000 	.word	0x41f00000
 80035c8:	42400000 	.word	0x42400000
 80035cc:	40500000 	.word	0x40500000
 80035d0:	40700000 	.word	0x40700000
 80035d4:	40e00000 	.word	0x40e00000
 80035d8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    reg_calib_data->par_p9 = (int16_t)BMP3_CONCAT_BYTES(reg_data[18], reg_data[17]);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3312      	adds	r3, #18
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	021b      	lsls	r3, r3, #8
 80035e4:	b21a      	sxth	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3311      	adds	r3, #17
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	4313      	orrs	r3, r2
 80035f0:	b21a      	sxth	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	825a      	strh	r2, [r3, #18]
    temp_var = 281474976710656.0f;
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	4b25      	ldr	r3, [pc, #148]	; (8003690 <parse_calib_data+0x38c>)
 80035fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p9 = ((double)reg_calib_data->par_p9 / temp_var);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003606:	4618      	mov	r0, r3
 8003608:	f7fc ff10 	bl	800042c <__aeabi_i2d>
 800360c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003610:	f7fd f8a0 	bl	8000754 <__aeabi_ddiv>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	6939      	ldr	r1, [r7, #16]
 800361a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    reg_calib_data->par_p10 = (int8_t)reg_data[19];
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3313      	adds	r3, #19
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	b25a      	sxtb	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	751a      	strb	r2, [r3, #20]
    temp_var = 281474976710656.0f;
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	4b18      	ldr	r3, [pc, #96]	; (8003690 <parse_calib_data+0x38c>)
 8003630:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p10 = ((double)reg_calib_data->par_p10 / temp_var);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fc fef6 	bl	800042c <__aeabi_i2d>
 8003640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003644:	f7fd f886 	bl	8000754 <__aeabi_ddiv>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	6939      	ldr	r1, [r7, #16]
 800364e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
    reg_calib_data->par_p11 = (int8_t)reg_data[20];
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3314      	adds	r3, #20
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	b25a      	sxtb	r2, r3
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	755a      	strb	r2, [r3, #21]
    temp_var = 36893488147419103232.0f;
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8003666:	e9c7 2302 	strd	r2, r3, [r7, #8]
    quantized_calib_data->par_p11 = ((double)reg_calib_data->par_p11 / temp_var);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc fedb 	bl	800042c <__aeabi_i2d>
 8003676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800367a:	f7fd f86b 	bl	8000754 <__aeabi_ddiv>
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	6939      	ldr	r1, [r7, #16]
 8003684:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	42f00000 	.word	0x42f00000

08003694 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmp3_dev *dev)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00f      	beq.n	80036c2 <null_ptr_check+0x2e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00b      	beq.n	80036c2 <null_ptr_check+0x2e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d007      	beq.n	80036c2 <null_ptr_check+0x2e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <null_ptr_check+0x2e>
        (dev->intf_ptr == NULL))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMP3_E_NULL_PTR;
 80036c2:	23ff      	movs	r3, #255	; 0xff
 80036c4:	73fb      	strb	r3, [r7, #15]
 80036c6:	e001      	b.n	80036cc <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMP3_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bc80      	pop	{r7}
 80036d8:	4770      	bx	lr
 80036da:	0000      	movs	r0, r0
 80036dc:	0000      	movs	r0, r0
	...

080036e0 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>:
static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr);
static int8_t validate_trimming_param(struct bmp3_dev *dev);
static int8_t cal_crc(uint8_t seed, uint8_t data);

BMP390::BMP390(I2C_HandleTypeDef *pntr_hi2c) {
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  _meas_end = 0;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  _filterEnabled = _tempOSEnabled = _presOSEnabled = false;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 20e2 	ldrb.w	r2, [r3, #226]	; 0xe2
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 20e1 	ldrb.w	r2, [r3, #225]	; 0xe1
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
  temperature = -999;
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	a312      	add	r3, pc, #72	; (adr r3, 8003760 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	e9c1 2300 	strd	r2, r3, [r1]
  pressure = -999;
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	a30f      	add	r3, pc, #60	; (adr r3, 8003760 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x80>)
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	e9c1 2302 	strd	r2, r3, [r1, #8]

  the_sensor.chip_id = BMP390_I2C_ADDRESS;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	22ee      	movs	r2, #238	; 0xee
 800372e:	741a      	strb	r2, [r3, #16]
  the_sensor.intf = BMP3_I2C_INTF;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	761a      	strb	r2, [r3, #24]
  the_sensor.read = &bmp390_i2c_read;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a0b      	ldr	r2, [pc, #44]	; (8003768 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x88>)
 800373a:	61da      	str	r2, [r3, #28]
  the_sensor.write = &bmp390_i2c_write;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a0b      	ldr	r2, [pc, #44]	; (800376c <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x8c>)
 8003740:	621a      	str	r2, [r3, #32]
  the_sensor.intf_ptr = (void *)pntr_hi2c;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	615a      	str	r2, [r3, #20]
  the_sensor.dummy_byte = 0;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	769a      	strb	r2, [r3, #26]
  the_sensor.delay_us = &delay_usec;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a07      	ldr	r2, [pc, #28]	; (8003770 <_ZN6BMP390C1EP19__I2C_HandleTypeDef+0x90>)
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	00000000 	.word	0x00000000
 8003764:	c08f3800 	.word	0xc08f3800
 8003768:	0800396b 	.word	0x0800396b
 800376c:	08003919 	.word	0x08003919
 8003770:	080037f5 	.word	0x080037f5

08003774 <_ZN6BMP3904initEv>:

bool BMP390::init(){
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	int8_t rslt = BMP3_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
	/* Reset the sensor */
	rslt = bmp3_soft_reset(&the_sensor);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3310      	adds	r3, #16
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff fd16 	bl	80031b6 <bmp3_soft_reset>
 800378a:	4603      	mov	r3, r0
 800378c:	73fb      	strb	r3, [r7, #15]
	if (rslt != BMP3_OK) { return false; }
 800378e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <_ZN6BMP3904initEv+0x26>
 8003796:	2300      	movs	r3, #0
 8003798:	e028      	b.n	80037ec <_ZN6BMP3904initEv+0x78>

	rslt = bmp3_init(&the_sensor);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3310      	adds	r3, #16
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fb9d 	bl	8002ede <bmp3_init>
 80037a4:	4603      	mov	r3, r0
 80037a6:	73fb      	strb	r3, [r7, #15]
	rslt = validate_trimming_param(&the_sensor);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3310      	adds	r3, #16
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f905 	bl	80039bc <_ZL23validate_trimming_paramP8bmp3_dev>
 80037b2:	4603      	mov	r3, r0
 80037b4:	73fb      	strb	r3, [r7, #15]

	if (rslt != BMP3_OK) { return false; }
 80037b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <_ZN6BMP3904initEv+0x4e>
 80037be:	2300      	movs	r3, #0
 80037c0:	e014      	b.n	80037ec <_ZN6BMP3904initEv+0x78>

	setTemperatureOversampling(BMP3_NO_OVERSAMPLING);
 80037c2:	2100      	movs	r1, #0
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f82b 	bl	8003820 <_ZN6BMP39026setTemperatureOversamplingEh>
	setPressureOversampling(BMP3_NO_OVERSAMPLING);
 80037ca:	2100      	movs	r1, #0
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f848 	bl	8003862 <_ZN6BMP39023setPressureOversamplingEh>
	setIIRFilterCoeff(BMP3_IIR_FILTER_DISABLE);
 80037d2:	2100      	movs	r1, #0
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f865 	bl	80038a4 <_ZN6BMP39017setIIRFilterCoeffEh>
	setOutputDataRate(BMP3_ODR_25_HZ);
 80037da:	2103      	movs	r1, #3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f882 	bl	80038e6 <_ZN6BMP39017setOutputDataRateEh>

	// don't do anything till we request a reading
	the_sensor.settings.op_mode = BMP3_MODE_FORCED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

	return true;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_ZL10delay_usecmPv>:

  return true;
}

// Our hardware interface functions
static void delay_usec(uint32_t us, void *intf_ptr){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	uint8_t ms = us/1000;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a06      	ldr	r2, [pc, #24]	; (800381c <_ZL10delay_usecmPv+0x28>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	099b      	lsrs	r3, r3, #6
 8003808:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(ms);
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe fe25 	bl	800245c <HAL_Delay>
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	10624dd3 	.word	0x10624dd3

08003820 <_ZN6BMP39026setTemperatureOversamplingEh>:

bool BMP390::setTemperatureOversampling(uint8_t oversample) {
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 800382c:	78fb      	ldrb	r3, [r7, #3]
 800382e:	2b05      	cmp	r3, #5
 8003830:	d901      	bls.n	8003836 <_ZN6BMP39026setTemperatureOversamplingEh+0x16>
    return false;
 8003832:	2300      	movs	r3, #0
 8003834:	e010      	b.n	8003858 <_ZN6BMP39026setTemperatureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.temp_os = oversample;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	78fa      	ldrb	r2, [r7, #3]
 800383a:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

  if (oversample == BMP3_NO_OVERSAMPLING)
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <_ZN6BMP39026setTemperatureOversamplingEh+0x2e>
    _tempOSEnabled = false;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800384c:	e003      	b.n	8003856 <_ZN6BMP39026setTemperatureOversamplingEh+0x36>
  else
    _tempOSEnabled = true;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

  return true;
 8003856:	2301      	movs	r3, #1
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <_ZN6BMP39023setPressureOversamplingEh>:
   BMP3_OVERSAMPLING_2X, BMP3_OVERSAMPLING_4X, BMP3_OVERSAMPLING_8X,
   BMP3_OVERSAMPLING_16X, BMP3_OVERSAMPLING_32X
    @return True on success, False on failure
*/
/**************************************************************************/
bool BMP390::setPressureOversampling(uint8_t oversample) {
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	70fb      	strb	r3, [r7, #3]
  if (oversample > BMP3_OVERSAMPLING_32X)
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	2b05      	cmp	r3, #5
 8003872:	d901      	bls.n	8003878 <_ZN6BMP39023setPressureOversamplingEh+0x16>
    return false;
 8003874:	2300      	movs	r3, #0
 8003876:	e010      	b.n	800389a <_ZN6BMP39023setPressureOversamplingEh+0x38>

  the_sensor.settings.odr_filter.press_os = oversample;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

  if (oversample == BMP3_NO_OVERSAMPLING)
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <_ZN6BMP39023setPressureOversamplingEh+0x2e>
    _presOSEnabled = false;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 800388e:	e003      	b.n	8003898 <_ZN6BMP39023setPressureOversamplingEh+0x36>
  else
    _presOSEnabled = true;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

  return true;
 8003898:	2301      	movs	r3, #1
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <_ZN6BMP39017setIIRFilterCoeffEh>:
   BMP3_IIR_FILTER_COEFF_31, BMP3_IIR_FILTER_COEFF_63, BMP3_IIR_FILTER_COEFF_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setIIRFilterCoeff(uint8_t filtercoeff) {
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  if (filtercoeff > BMP3_IIR_FILTER_COEFF_127)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	2b07      	cmp	r3, #7
 80038b4:	d901      	bls.n	80038ba <_ZN6BMP39017setIIRFilterCoeffEh+0x16>
    return false;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e010      	b.n	80038dc <_ZN6BMP39017setIIRFilterCoeffEh+0x38>

  the_sensor.settings.odr_filter.iir_filter = filtercoeff;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	78fa      	ldrb	r2, [r7, #3]
 80038be:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

  if (filtercoeff == BMP3_IIR_FILTER_DISABLE)
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <_ZN6BMP39017setIIRFilterCoeffEh+0x2e>
    _filterEnabled = false;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 80038d0:	e003      	b.n	80038da <_ZN6BMP39017setIIRFilterCoeffEh+0x36>
  else
    _filterEnabled = true;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0

  return true;
 80038da:	2301      	movs	r3, #1
}
 80038dc:	4618      	mov	r0, r3
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <_ZN6BMP39017setOutputDataRateEh>:
   BMP3_ODR_0_01_HZ, BMP3_ODR_0_006_HZ, BMP3_ODR_0_003_HZ, or BMP3_ODR_0_001_HZ
    @return True on success, False on failure

*/
/**************************************************************************/
bool BMP390::setOutputDataRate(uint8_t odr) {
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	70fb      	strb	r3, [r7, #3]
  if (odr > BMP3_ODR_0_001_HZ)
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	2b11      	cmp	r3, #17
 80038f6:	d901      	bls.n	80038fc <_ZN6BMP39017setOutputDataRateEh+0x16>
    return false;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e008      	b.n	800390e <_ZN6BMP39017setOutputDataRateEh+0x28>

  the_sensor.settings.odr_filter.odr = odr;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

  _ODREnabled = true;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3

  return true;
 800390c:	2301      	movs	r3, #1
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <_ZL16bmp390_i2c_writehPKhmPv>:

static int8_t bmp390_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr){
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	; 0x28
 800391c:	af04      	add	r7, sp, #16
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4603      	mov	r3, r0
 8003926:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	b29a      	uxth	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003938:	9102      	str	r1, [sp, #8]
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2301      	movs	r3, #1
 8003942:	21ee      	movs	r1, #238	; 0xee
 8003944:	6978      	ldr	r0, [r7, #20]
 8003946:	f002 fef9 	bl	800673c <HAL_I2C_Mem_Write>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf14      	ite	ne
 8003950:	2301      	movne	r3, #1
 8003952:	2300      	moveq	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <_ZL16bmp390_i2c_writehPKhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 800395a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800395e:	e000      	b.n	8003962 <_ZL16bmp390_i2c_writehPKhmPv+0x4a>
	}
	return 0;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <_ZL15bmp390_i2c_readhPhmPv>:

static int8_t bmp390_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr){
 800396a:	b580      	push	{r7, lr}
 800396c:	b08a      	sub	sp, #40	; 0x28
 800396e:	af04      	add	r7, sp, #16
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4603      	mov	r3, r0
 8003978:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(hi2c, BMP390_I2C_ADDRESS, reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, len, HAL_MAX_DELAY) != HAL_OK) {
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	b29a      	uxth	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800398a:	9102      	str	r1, [sp, #8]
 800398c:	9301      	str	r3, [sp, #4]
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2301      	movs	r3, #1
 8003994:	21ee      	movs	r1, #238	; 0xee
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f002 ffe4 	bl	8006964 <HAL_I2C_Mem_Read>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <_ZL15bmp390_i2c_readhPhmPv+0x48>
		// Error handling: You can handle write errors here
		return -1;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b0:	e000      	b.n	80039b4 <_ZL15bmp390_i2c_readhPhmPv+0x4a>
	}
	return 0;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_ZL23validate_trimming_paramP8bmp3_dev>:

static int8_t validate_trimming_param(struct bmp3_dev *dev) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  int8_t rslt;
  uint8_t crc = 0xFF;
 80039c4:	23ff      	movs	r3, #255	; 0xff
 80039c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t stored_crc;
  uint8_t trim_param[21];
  uint8_t i;

  rslt = bmp3_get_regs(BMP3_REG_CALIB_DATA, trim_param, 21, dev);
 80039ca:	f107 010c 	add.w	r1, r7, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2215      	movs	r2, #21
 80039d2:	2031      	movs	r0, #49	; 0x31
 80039d4:	f7ff faca 	bl	8002f6c <bmp3_get_regs>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (rslt == BMP3_OK) {
 80039de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d133      	bne.n	8003a4e <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
    for (i = 0; i < 21; i++) {
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80039ec:	e013      	b.n	8003a16 <_ZL23validate_trimming_paramP8bmp3_dev+0x5a>
      crc = (uint8_t)cal_crc(crc, trim_param[i]);
 80039ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039f2:	3328      	adds	r3, #40	; 0x28
 80039f4:	443b      	add	r3, r7
 80039f6:	f813 2c1c 	ldrb.w	r2, [r3, #-28]
 80039fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f82a 	bl	8003a5a <_ZL7cal_crchh>
 8003a06:	4603      	mov	r3, r0
 8003a08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (i = 0; i < 21; i++) {
 8003a0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a10:	3301      	adds	r3, #1
 8003a12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003a16:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a1a:	2b14      	cmp	r3, #20
 8003a1c:	d9e7      	bls.n	80039ee <_ZL23validate_trimming_paramP8bmp3_dev+0x32>
    }

    crc = (crc ^ 0xFF);
 8003a1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003a22:	43db      	mvns	r3, r3
 8003a24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    rslt = bmp3_get_regs(0x30, &stored_crc, 1, dev);
 8003a28:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2030      	movs	r0, #48	; 0x30
 8003a32:	f7ff fa9b 	bl	8002f6c <bmp3_get_regs>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (stored_crc != crc) {
 8003a3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003a40:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d002      	beq.n	8003a4e <_ZL23validate_trimming_paramP8bmp3_dev+0x92>
      rslt = -1;
 8003a48:	23ff      	movs	r3, #255	; 0xff
 8003a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  return rslt;
 8003a4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <_ZL7cal_crchh>:

/*
 * @brief function to calculate CRC for the trimming parameters
 * */
static int8_t cal_crc(uint8_t seed, uint8_t data) {
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	4603      	mov	r3, r0
 8003a62:	460a      	mov	r2, r1
 8003a64:	71fb      	strb	r3, [r7, #7]
 8003a66:	4613      	mov	r3, r2
 8003a68:	71bb      	strb	r3, [r7, #6]
  int8_t poly = 0x1D;
 8003a6a:	231d      	movs	r3, #29
 8003a6c:	737b      	strb	r3, [r7, #13]
  int8_t var2;
  uint8_t i;

  for (i = 0; i < 8; i++) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73bb      	strb	r3, [r7, #14]
 8003a72:	e01c      	b.n	8003aae <_ZL7cal_crchh+0x54>
    if ((seed & 0x80) ^ (data & 0x80)) {
 8003a74:	79fa      	ldrb	r2, [r7, #7]
 8003a76:	79bb      	ldrb	r3, [r7, #6]
 8003a78:	4053      	eors	r3, r2
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	b25b      	sxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da02      	bge.n	8003a88 <_ZL7cal_crchh+0x2e>
      var2 = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	e001      	b.n	8003a8c <_ZL7cal_crchh+0x32>
    } else {
      var2 = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]
    }

    seed = (seed & 0x7F) << 1;
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	71fb      	strb	r3, [r7, #7]
    data = (data & 0x7F) << 1;
 8003a92:	79bb      	ldrb	r3, [r7, #6]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	71bb      	strb	r3, [r7, #6]
    seed = seed ^ (uint8_t)(poly * var2);
 8003a98:	7b7a      	ldrb	r2, [r7, #13]
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	fb12 f303 	smulbb	r3, r2, r3
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	4053      	eors	r3, r2
 8003aa6:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8003aa8:	7bbb      	ldrb	r3, [r7, #14]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	73bb      	strb	r3, [r7, #14]
 8003aae:	7bbb      	ldrb	r3, [r7, #14]
 8003ab0:	2b07      	cmp	r3, #7
 8003ab2:	d9df      	bls.n	8003a74 <_ZL7cal_crchh+0x1a>
  }

  return (int8_t)seed;
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <_ZN12LSM303_AccelC1EP19__I2C_HandleTypeDef>:
#include <lsm303_accel.hpp>

LSM303_Accel::LSM303_Accel(I2C_HandleTypeDef *_pntr_hi2c) {
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  pntr_hi2c = _pntr_hi2c;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]

  // Initialize the raw accel data
  data.x = 0;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	609a      	str	r2, [r3, #8]
  data.y = 0;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
  data.z = 0;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	611a      	str	r2, [r3, #16]
}
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
	...

08003af8 <_ZN12LSM303_Accel5writeEhPKhh>:

bool LSM303_Accel::write(const uint8_t reg_location, const uint8_t *data, const uint8_t len){
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b088      	sub	sp, #32
 8003afc:	af04      	add	r7, sp, #16
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	607a      	str	r2, [r7, #4]
 8003b02:	461a      	mov	r2, r3
 8003b04:	460b      	mov	r3, r1
 8003b06:	72fb      	strb	r3, [r7, #11]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Write((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	7afb      	ldrb	r3, [r7, #11]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	7abb      	ldrb	r3, [r7, #10]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b1c:	9102      	str	r1, [sp, #8]
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2301      	movs	r3, #1
 8003b26:	2132      	movs	r1, #50	; 0x32
 8003b28:	f002 fe08 	bl	800673c <HAL_I2C_Mem_Write>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <_ZN12LSM303_Accel5writeEhPKhh+0x54>
    // Error handling: You can handle write errors here
  	APP_LOG(TS_ON, VLEVEL_M,"Error writing \r\n");
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <_ZN12LSM303_Accel5writeEhPKhh+0x60>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	2100      	movs	r1, #0
 8003b42:	2002      	movs	r0, #2
 8003b44:	f019 ff12 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    return false;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <_ZN12LSM303_Accel5writeEhPKhh+0x56>
  }
  return true;
 8003b4c:	2301      	movs	r3, #1
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	0801e008 	.word	0x0801e008

08003b5c <_ZN12LSM303_Accel4readEhPhh>:

bool LSM303_Accel::read(const uint8_t reg_location, uint8_t *data, const uint8_t len){
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af04      	add	r7, sp, #16
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	607a      	str	r2, [r7, #4]
 8003b66:	461a      	mov	r2, r3
 8003b68:	460b      	mov	r3, r1
 8003b6a:	72fb      	strb	r3, [r7, #11]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	72bb      	strb	r3, [r7, #10]
  if (HAL_I2C_Mem_Read((I2C_HandleTypeDef *) pntr_hi2c, LSM303_ADDRESS_ACCEL, reg_location, I2C_MEMADD_SIZE_8BIT, (uint8_t *)data, len, HAL_MAX_DELAY) != HAL_OK) {
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	7afb      	ldrb	r3, [r7, #11]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	7abb      	ldrb	r3, [r7, #10]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b80:	9102      	str	r1, [sp, #8]
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	2132      	movs	r1, #50	; 0x32
 8003b8c:	f002 feea 	bl	8006964 <HAL_I2C_Mem_Read>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <_ZN12LSM303_Accel4readEhPhh+0x48>
    // Error handling: You can handle write errors here
    return false;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <_ZN12LSM303_Accel4readEhPhh+0x4a>
  }
  return true;
 8003ba4:	2301      	movs	r3, #1
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <_ZN12LSM303_Accel4initEv>:

bool LSM303_Accel::init() {
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  uint8_t len = 1;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]

  uint8_t reg_data = 0x57; // Enable the accelerometer (100Hz)
 8003bba:	2357      	movs	r3, #87	; 0x57
 8003bbc:	73bb      	strb	r3, [r7, #14]
  if ( write(LSM303_REGISTER_ACCEL_CTRL_REG1_A, &reg_data, len) ){
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	f107 020e 	add.w	r2, r7, #14
 8003bc4:	2120      	movs	r1, #32
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ff96 	bl	8003af8 <_ZN12LSM303_Accel5writeEhPKhh>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00e      	beq.n	8003bf0 <_ZN12LSM303_Accel4initEv+0x42>
    if ( read(LSM303_REGISTER_ACCEL_WHO_AM_I, &reg_data, len) ) {
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	f107 020e 	add.w	r2, r7, #14
 8003bd8:	210f      	movs	r1, #15
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff ffbe 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d004      	beq.n	8003bf0 <_ZN12LSM303_Accel4initEv+0x42>
      if (reg_data == 0x33) return true; //confirm that we are talking
 8003be6:	7bbb      	ldrb	r3, [r7, #14]
 8003be8:	2b33      	cmp	r3, #51	; 0x33
 8003bea:	d101      	bne.n	8003bf0 <_ZN12LSM303_Accel4initEv+0x42>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <_ZN12LSM303_Accel4initEv+0x44>
    }
  }
  return false; //something went wrong
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <_ZN12LSM303_Accel8getRangeEv>:

  //send it to the device
  write(LSM303_REGISTER_ACCEL_CTRL_REG4_A, &reg_data, len);
}

lsm303_accel_range_t LSM303_Accel::getRange(void) {
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  //get the current register values
  uint8_t reg_data;
  uint8_t len = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
  read(LSM303_REGISTER_ACCEL_CTRL_REG4_A, &reg_data, len);
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	f107 020e 	add.w	r2, r7, #14
 8003c0c:	2123      	movs	r1, #35	; 0x23
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ffa4 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>

  //isolate the current range bits
  reg_data &= (3 << 4);
 8003c14:	7bbb      	ldrb	r3, [r7, #14]
 8003c16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	73bb      	strb	r3, [r7, #14]

  //shift the bits
  reg_data = (reg_data >> 4);
 8003c1e:	7bbb      	ldrb	r3, [r7, #14]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	73bb      	strb	r3, [r7, #14]

  return (lsm303_accel_range_t)reg_data;
 8003c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZN12LSM303_Accel7getModeEv>:
  //send it to the device
  write(LSM303_REGISTER_ACCEL_CTRL_REG4_A, &res_reg, len);
  HAL_Delay(20);
}

lsm303_accel_mode_t LSM303_Accel::getMode(void) {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  ///////////////////////////power//////////////////////
  //get the current register value for the power mode
  uint8_t power_reg = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73bb      	strb	r3, [r7, #14]
  uint8_t len = 1;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
  read(LSM303_REGISTER_ACCEL_CTRL_REG1_A, &power_reg, len);
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	f107 020e 	add.w	r2, r7, #14
 8003c46:	2120      	movs	r1, #32
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7ff ff87 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>

  //isolate the current power bit
  power_reg &= (1 << 3);
 8003c4e:	7bbb      	ldrb	r3, [r7, #14]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	73bb      	strb	r3, [r7, #14]

  //shift it to the LSB
  power_reg = power_reg >> 3;
 8003c58:	7bbb      	ldrb	r3, [r7, #14]
 8003c5a:	08db      	lsrs	r3, r3, #3
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	73bb      	strb	r3, [r7, #14]

  ///////////////////////////resolution//////////////////////
  //get the current register value for the power mode
  uint8_t res_reg = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	737b      	strb	r3, [r7, #13]
  read(LSM303_REGISTER_ACCEL_CTRL_REG4_A, &res_reg, len);
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	f107 020d 	add.w	r2, r7, #13
 8003c6a:	2123      	movs	r1, #35	; 0x23
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff75 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>

  //isolate the current resolution bit
  res_reg &= (1 << 3);
 8003c72:	7b7b      	ldrb	r3, [r7, #13]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	737b      	strb	r3, [r7, #13]

  //shift it to the 2nd LSB
  res_reg = res_reg >> 2;
 8003c7c:	7b7b      	ldrb	r3, [r7, #13]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	737b      	strb	r3, [r7, #13]

  return (lsm303_accel_mode_t)(res_reg | power_reg);
 8003c84:	7b7a      	ldrb	r2, [r7, #13]
 8003c86:	7bbb      	ldrb	r3, [r7, #14]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b2db      	uxtb	r3, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_ZN12LSM303_Accel12getAccelDataEv>:
/**************************************************************************/
/*!
    @brief  Reads the raw data from the sensor
*/
/**************************************************************************/
lsm303AccelData LSM303_Accel::getAccelData(void) {
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint8_t ylo;
  uint8_t yhi;
  uint8_t zlo;
  uint8_t zhi;

  uint8_t len = 1;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	77fb      	strb	r3, [r7, #31]

  read(LSM303_REGISTER_ACCEL_OUT_X_L_A, &xlo, len);
 8003ca2:	7ffb      	ldrb	r3, [r7, #31]
 8003ca4:	f107 020e 	add.w	r2, r7, #14
 8003ca8:	2128      	movs	r1, #40	; 0x28
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	f7ff ff56 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>
  read(LSM303_REGISTER_ACCEL_OUT_X_H_A, &xhi, len);
 8003cb0:	7ffb      	ldrb	r3, [r7, #31]
 8003cb2:	f107 020d 	add.w	r2, r7, #13
 8003cb6:	2129      	movs	r1, #41	; 0x29
 8003cb8:	6838      	ldr	r0, [r7, #0]
 8003cba:	f7ff ff4f 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>
  read(LSM303_REGISTER_ACCEL_OUT_Y_L_A, &ylo, len);
 8003cbe:	7ffb      	ldrb	r3, [r7, #31]
 8003cc0:	f107 020c 	add.w	r2, r7, #12
 8003cc4:	212a      	movs	r1, #42	; 0x2a
 8003cc6:	6838      	ldr	r0, [r7, #0]
 8003cc8:	f7ff ff48 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>
  read(LSM303_REGISTER_ACCEL_OUT_Y_H_A, &yhi, len);
 8003ccc:	7ffb      	ldrb	r3, [r7, #31]
 8003cce:	f107 020b 	add.w	r2, r7, #11
 8003cd2:	212b      	movs	r1, #43	; 0x2b
 8003cd4:	6838      	ldr	r0, [r7, #0]
 8003cd6:	f7ff ff41 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>
  read(LSM303_REGISTER_ACCEL_OUT_Z_L_A, &zlo, len);
 8003cda:	7ffb      	ldrb	r3, [r7, #31]
 8003cdc:	f107 020a 	add.w	r2, r7, #10
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	6838      	ldr	r0, [r7, #0]
 8003ce4:	f7ff ff3a 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>
  read(LSM303_REGISTER_ACCEL_OUT_Z_H_A, &zhi, len);
 8003ce8:	7ffb      	ldrb	r3, [r7, #31]
 8003cea:	f107 0209 	add.w	r2, r7, #9
 8003cee:	212d      	movs	r1, #45	; 0x2d
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f7ff ff33 	bl	8003b5c <_ZN12LSM303_Accel4readEhPhh>

  uint16_t raw_x = (int16_t)(xlo | (xhi << 8));
 8003cf6:	7bbb      	ldrb	r3, [r7, #14]
 8003cf8:	b21a      	sxth	r2, r3
 8003cfa:	7b7b      	ldrb	r3, [r7, #13]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	b21b      	sxth	r3, r3
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	83bb      	strh	r3, [r7, #28]
  uint16_t raw_y = (int16_t)(ylo | (yhi << 8));
 8003d06:	7b3b      	ldrb	r3, [r7, #12]
 8003d08:	b21a      	sxth	r2, r3
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	b21b      	sxth	r3, r3
 8003d10:	4313      	orrs	r3, r2
 8003d12:	b21b      	sxth	r3, r3
 8003d14:	837b      	strh	r3, [r7, #26]
  uint16_t raw_z = (int16_t)(zlo | (zhi << 8));
 8003d16:	7abb      	ldrb	r3, [r7, #10]
 8003d18:	b21a      	sxth	r2, r3
 8003d1a:	7a7b      	ldrb	r3, [r7, #9]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	b21b      	sxth	r3, r3
 8003d20:	4313      	orrs	r3, r2
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	833b      	strh	r3, [r7, #24]

  lsm303_accel_mode_t mode = getMode();
 8003d26:	6838      	ldr	r0, [r7, #0]
 8003d28:	f7ff ff82 	bl	8003c30 <_ZN12LSM303_Accel7getModeEv>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	75fb      	strb	r3, [r7, #23]

  float lsb = getLSB(mode);
 8003d30:	7dfb      	ldrb	r3, [r7, #23]
 8003d32:	4619      	mov	r1, r3
 8003d34:	6838      	ldr	r0, [r7, #0]
 8003d36:	f000 f855 	bl	8003de4 <_ZN12LSM303_Accel6getLSBE4mode>
 8003d3a:	6138      	str	r0, [r7, #16]
  uint8_t shift = getShift(mode);
 8003d3c:	7dfb      	ldrb	r3, [r7, #23]
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6838      	ldr	r0, [r7, #0]
 8003d42:	f000 f8d1 	bl	8003ee8 <_ZN12LSM303_Accel8getShiftE4mode>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73fb      	strb	r3, [r7, #15]

  data.x = (float)(raw_x >> shift) * lsb * GRAVITY_EARTH;
 8003d4a:	8bba      	ldrh	r2, [r7, #28]
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	fa42 f303 	asr.w	r3, r2, r3
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fc ff50 	bl	8000bf8 <__aeabi_i2f>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	6939      	ldr	r1, [r7, #16]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc ff9f 	bl	8000ca0 <__aeabi_fmul>
 8003d62:	4603      	mov	r3, r0
 8003d64:	491e      	ldr	r1, [pc, #120]	; (8003de0 <_ZN12LSM303_Accel12getAccelDataEv+0x14c>)
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc ff9a 	bl	8000ca0 <__aeabi_fmul>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	609a      	str	r2, [r3, #8]
  data.y = (float)(raw_y >> shift) * lsb * GRAVITY_EARTH;
 8003d74:	8b7a      	ldrh	r2, [r7, #26]
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	fa42 f303 	asr.w	r3, r2, r3
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc ff3b 	bl	8000bf8 <__aeabi_i2f>
 8003d82:	4603      	mov	r3, r0
 8003d84:	6939      	ldr	r1, [r7, #16]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fc ff8a 	bl	8000ca0 <__aeabi_fmul>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4914      	ldr	r1, [pc, #80]	; (8003de0 <_ZN12LSM303_Accel12getAccelDataEv+0x14c>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc ff85 	bl	8000ca0 <__aeabi_fmul>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	60da      	str	r2, [r3, #12]
  data.z = (float)(raw_z >> shift) * lsb * GRAVITY_EARTH;
 8003d9e:	8b3a      	ldrh	r2, [r7, #24]
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	fa42 f303 	asr.w	r3, r2, r3
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc ff26 	bl	8000bf8 <__aeabi_i2f>
 8003dac:	4603      	mov	r3, r0
 8003dae:	6939      	ldr	r1, [r7, #16]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fc ff75 	bl	8000ca0 <__aeabi_fmul>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4909      	ldr	r1, [pc, #36]	; (8003de0 <_ZN12LSM303_Accel12getAccelDataEv+0x14c>)
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fc ff70 	bl	8000ca0 <__aeabi_fmul>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	611a      	str	r2, [r3, #16]

  return data;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	4614      	mov	r4, r2
 8003dce:	3308      	adds	r3, #8
 8003dd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003dd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	3724      	adds	r7, #36	; 0x24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}
 8003de0:	411ce80a 	.word	0x411ce80a

08003de4 <_ZN12LSM303_Accel6getLSBE4mode>:
    @brief  Gets the Least Significant Bit value for the current mode
    @param mode the current mode, used to determind the appropriate lsb value
    in concert with the current range setting.
*/
/**************************************************************************/
float LSM303_Accel::getLSB(lsm303_accel_mode_t mode) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	70fb      	strb	r3, [r7, #3]
  float lsb = 0;
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
  lsm303_accel_range_t range = getRange();
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff feff 	bl	8003bfa <_ZN12LSM303_Accel8getRangeEv>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	72fb      	strb	r3, [r7, #11]
  if (mode == LSM303_MODE_NORMAL) {
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11a      	bne.n	8003e3c <_ZN12LSM303_Accel6getLSBE4mode+0x58>
    switch (range) {
 8003e06:	7afb      	ldrb	r3, [r7, #11]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d853      	bhi.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <_ZN12LSM303_Accel6getLSBE4mode+0x30>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e2b 	.word	0x08003e2b
 8003e1c:	08003e31 	.word	0x08003e31
 8003e20:	08003e37 	.word	0x08003e37
    case LSM303_RANGE_2G:
      lsb = 0.0039;
 8003e24:	4b26      	ldr	r3, [pc, #152]	; (8003ec0 <_ZN12LSM303_Accel6getLSBE4mode+0xdc>)
 8003e26:	60fb      	str	r3, [r7, #12]
      break;
 8003e28:	e044      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_4G:
      lsb = 0.00782;
 8003e2a:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <_ZN12LSM303_Accel6getLSBE4mode+0xe0>)
 8003e2c:	60fb      	str	r3, [r7, #12]
      break;
 8003e2e:	e041      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_8G:
      lsb = 0.01563;
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <_ZN12LSM303_Accel6getLSBE4mode+0xe4>)
 8003e32:	60fb      	str	r3, [r7, #12]
      break;
 8003e34:	e03e      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_16G:
      lsb = 0.0469;
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <_ZN12LSM303_Accel6getLSBE4mode+0xe8>)
 8003e38:	60fb      	str	r3, [r7, #12]
      break;
 8003e3a:	e03b      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    }
  }

  else if (mode == LSM303_MODE_HIGH_RESOLUTION) {
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d11a      	bne.n	8003e78 <_ZN12LSM303_Accel6getLSBE4mode+0x94>
    switch (range) {
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d835      	bhi.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
 8003e48:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <_ZN12LSM303_Accel6getLSBE4mode+0x6c>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e67 	.word	0x08003e67
 8003e58:	08003e6d 	.word	0x08003e6d
 8003e5c:	08003e73 	.word	0x08003e73
    case LSM303_RANGE_2G:
      lsb = 0.00098;
 8003e60:	4b1b      	ldr	r3, [pc, #108]	; (8003ed0 <_ZN12LSM303_Accel6getLSBE4mode+0xec>)
 8003e62:	60fb      	str	r3, [r7, #12]
      break;
 8003e64:	e026      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_4G:
      lsb = 0.00195;
 8003e66:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <_ZN12LSM303_Accel6getLSBE4mode+0xf0>)
 8003e68:	60fb      	str	r3, [r7, #12]
      break;
 8003e6a:	e023      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_8G:
      lsb = 0.0039;
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <_ZN12LSM303_Accel6getLSBE4mode+0xdc>)
 8003e6e:	60fb      	str	r3, [r7, #12]
      break;
 8003e70:	e020      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_16G:
      lsb = 0.01172;
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <_ZN12LSM303_Accel6getLSBE4mode+0xf4>)
 8003e74:	60fb      	str	r3, [r7, #12]
      break;
 8003e76:	e01d      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    }
  } else if (mode == LSM303_MODE_LOW_POWER) {
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d11a      	bne.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    switch (range) {
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d817      	bhi.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
 8003e84:	a201      	add	r2, pc, #4	; (adr r2, 8003e8c <_ZN12LSM303_Accel6getLSBE4mode+0xa8>)
 8003e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8a:	bf00      	nop
 8003e8c:	08003e9d 	.word	0x08003e9d
 8003e90:	08003ea3 	.word	0x08003ea3
 8003e94:	08003ea9 	.word	0x08003ea9
 8003e98:	08003eaf 	.word	0x08003eaf
    case LSM303_RANGE_2G:
      lsb = 0.01563;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <_ZN12LSM303_Accel6getLSBE4mode+0xe4>)
 8003e9e:	60fb      	str	r3, [r7, #12]
      break;
 8003ea0:	e008      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_4G:
      lsb = 0.03126;
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <_ZN12LSM303_Accel6getLSBE4mode+0xf8>)
 8003ea4:	60fb      	str	r3, [r7, #12]
      break;
 8003ea6:	e005      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_8G:
      lsb = 0.06252;
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <_ZN12LSM303_Accel6getLSBE4mode+0xfc>)
 8003eaa:	60fb      	str	r3, [r7, #12]
      break;
 8003eac:	e002      	b.n	8003eb4 <_ZN12LSM303_Accel6getLSBE4mode+0xd0>
    case LSM303_RANGE_16G:
      lsb = 0.18758;
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <_ZN12LSM303_Accel6getLSBE4mode+0x100>)
 8003eb0:	60fb      	str	r3, [r7, #12]
      break;
 8003eb2:	bf00      	nop
    }
  }

  return lsb;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	3b7f9724 	.word	0x3b7f9724
 8003ec4:	3c001f75 	.word	0x3c001f75
 8003ec8:	3c800a7c 	.word	0x3c800a7c
 8003ecc:	3d401a37 	.word	0x3d401a37
 8003ed0:	3a807358 	.word	0x3a807358
 8003ed4:	3aff9724 	.word	0x3aff9724
 8003ed8:	3c40053e 	.word	0x3c40053e
 8003edc:	3d000a7c 	.word	0x3d000a7c
 8003ee0:	3d800a7c 	.word	0x3d800a7c
 8003ee4:	3e4014f9 	.word	0x3e4014f9

08003ee8 <_ZN12LSM303_Accel8getShiftE4mode>:
    @brief  Gets the bit shift amount for the current mode
    @param mode the current mode, used to determind the appropriate shift
    amount based on the bitdepth of the mode
*/
/**************************************************************************/
uint8_t LSM303_Accel::getShift(lsm303_accel_mode_t mode) {
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	70fb      	strb	r3, [r7, #3]
  uint8_t shift = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	73fb      	strb	r3, [r7, #15]
  switch (mode) {
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d00b      	beq.n	8003f16 <_ZN12LSM303_Accel8getShiftE4mode+0x2e>
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	dc0c      	bgt.n	8003f1c <_ZN12LSM303_Accel8getShiftE4mode+0x34>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d004      	beq.n	8003f10 <_ZN12LSM303_Accel8getShiftE4mode+0x28>
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d108      	bne.n	8003f1c <_ZN12LSM303_Accel8getShiftE4mode+0x34>
  case LSM303_MODE_HIGH_RESOLUTION:
    shift = 4;
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8003f0e:	e005      	b.n	8003f1c <_ZN12LSM303_Accel8getShiftE4mode+0x34>
  case LSM303_MODE_NORMAL:
    shift = 6;
 8003f10:	2306      	movs	r3, #6
 8003f12:	73fb      	strb	r3, [r7, #15]
    break;
 8003f14:	e002      	b.n	8003f1c <_ZN12LSM303_Accel8getShiftE4mode+0x34>
  case LSM303_MODE_LOW_POWER:
    shift = 8;
 8003f16:	2308      	movs	r3, #8
 8003f18:	73fb      	strb	r3, [r7, #15]
    break;
 8003f1a:	bf00      	nop
  }

  return shift;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef>:
#include <env_sensors.hpp>

EnvionmentSensors::EnvionmentSensors(I2C_HandleTypeDef *pntr_hi2c) : lsm_accel(pntr_hi2c), bmp(pntr_hi2c) {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6839      	ldr	r1, [r7, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fdc3 	bl	8003ac2 <_ZN12LSM303_AccelC1EP19__I2C_HandleTypeDef>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3318      	adds	r3, #24
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fbcc 	bl	80036e0 <_ZN6BMP390C1EP19__I2C_HandleTypeDef>
	APP_LOG(TS_ON, VLEVEL_M, "env sensors i2c interface: %d \r\n", pntr_hi2c);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0xbc>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	2100      	movs	r1, #0
 8003f52:	2002      	movs	r0, #2
 8003f54:	f019 fd0a 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
	if( lsm_accel.init() ){
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fe27 	bl	8003bae <_ZN12LSM303_Accel4initEv>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d006      	beq.n	8003f74 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x4c>
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup valid \r\n");
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0xc0>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f019 fcfd 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
 8003f72:	e005      	b.n	8003f80 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x58>
	} else {
		APP_LOG(TS_ON, VLEVEL_M, "lsm303 setup failed \r\n");
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0xc4>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	2100      	movs	r1, #0
 8003f7a:	2002      	movs	r0, #2
 8003f7c:	f019 fcf6 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
	}


  if( bmp.init() ){
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3318      	adds	r3, #24
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fbf5 	bl	8003774 <_ZN6BMP3904initEv>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x76>
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup valid \r\n");
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0xc8>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	2100      	movs	r1, #0
 8003f96:	2002      	movs	r0, #2
 8003f98:	f019 fce8 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
 8003f9c:	e005      	b.n	8003faa <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0x82>
  } else {
  	APP_LOG(TS_ON, VLEVEL_M, "bmp390 setup failed \r\n");
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <_ZN17EnvionmentSensorsC1EP19__I2C_HandleTypeDef+0xcc>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	2002      	movs	r0, #2
 8003fa6:	f019 fce1 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
  }
  bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3318      	adds	r3, #24
 8003fae:	2103      	movs	r1, #3
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fc35 	bl	8003820 <_ZN6BMP39026setTemperatureOversamplingEh>
	bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3318      	adds	r3, #24
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fc50 	bl	8003862 <_ZN6BMP39023setPressureOversamplingEh>
	bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3318      	adds	r3, #24
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fc6b 	bl	80038a4 <_ZN6BMP39017setIIRFilterCoeffEh>
	bmp.setOutputDataRate(BMP3_ODR_50_HZ);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fc86 	bl	80038e6 <_ZN6BMP39017setOutputDataRateEh>


}
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	0801e01c 	.word	0x0801e01c
 8003fe8:	0801e040 	.word	0x0801e040
 8003fec:	0801e058 	.word	0x0801e058
 8003ff0:	0801e070 	.word	0x0801e070
 8003ff4:	0801e088 	.word	0x0801e088

08003ff8 <_ZN17EnvionmentSensors12getAccelDataEv>:

float EnvionmentSensors::getAltitude(float seaLevel){
  return bmp.getAltitude(seaLevel);
}

lsm303AccelData EnvionmentSensors::getAccelData(){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  return lsm_accel.getAccelData();
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fe43 	bl	8003c94 <_ZN12LSM303_Accel12getAccelDataEv>
 800400e:	bf00      	nop
}
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800402c:	2310      	movs	r3, #16
 800402e:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004030:	2301      	movs	r3, #1
 8004032:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004038:	2303      	movs	r3, #3
 800403a:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004044:	f002 f88c 	bl	8006160 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8004048:	2320      	movs	r3, #32
 800404a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	4619      	mov	r1, r3
 8004050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004054:	f002 f884 	bl	8006160 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004058:	2200      	movs	r2, #0
 800405a:	2120      	movs	r1, #32
 800405c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004060:	f002 faac 	bl	80065bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8004064:	2200      	movs	r2, #0
 8004066:	2110      	movs	r1, #16
 8004068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800406c:	f002 faa6 	bl	80065bc <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d83f      	bhi.n	800410c <BSP_RADIO_ConfigRFSwitch+0x90>
 800408c:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040a5 	.word	0x080040a5
 8004098:	080040bf 	.word	0x080040bf
 800409c:	080040d9 	.word	0x080040d9
 80040a0:	080040f3 	.word	0x080040f3
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80040a4:	2200      	movs	r2, #0
 80040a6:	2110      	movs	r1, #16
 80040a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ac:	f002 fa86 	bl	80065bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80040b0:	2200      	movs	r2, #0
 80040b2:	2120      	movs	r1, #32
 80040b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040b8:	f002 fa80 	bl	80065bc <HAL_GPIO_WritePin>
      break;      
 80040bc:	e027      	b.n	800410e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80040be:	2201      	movs	r2, #1
 80040c0:	2110      	movs	r1, #16
 80040c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040c6:	f002 fa79 	bl	80065bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80040ca:	2200      	movs	r2, #0
 80040cc:	2120      	movs	r1, #32
 80040ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040d2:	f002 fa73 	bl	80065bc <HAL_GPIO_WritePin>
      break;
 80040d6:	e01a      	b.n	800410e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80040d8:	2201      	movs	r2, #1
 80040da:	2110      	movs	r1, #16
 80040dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040e0:	f002 fa6c 	bl	80065bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80040e4:	2201      	movs	r2, #1
 80040e6:	2120      	movs	r1, #32
 80040e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ec:	f002 fa66 	bl	80065bc <HAL_GPIO_WritePin>
      break;
 80040f0:	e00d      	b.n	800410e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80040f2:	2200      	movs	r2, #0
 80040f4:	2110      	movs	r1, #16
 80040f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040fa:	f002 fa5f 	bl	80065bc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80040fe:	2201      	movs	r2, #1
 8004100:	2120      	movs	r1, #32
 8004102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004106:	f002 fa59 	bl	80065bc <HAL_GPIO_WritePin>
      break;
 800410a:	e000      	b.n	800410e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800410c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800411c:	2302      	movs	r3, #2
}
 800411e:	4618      	mov	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr

08004126 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800412a:	2301      	movs	r3, #1
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8004138:	2301      	movs	r3, #1
}
 800413a:	4618      	mov	r0, r3
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	4603      	mov	r3, r0
 800414a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8004152:	230f      	movs	r3, #15
 8004154:	60fb      	str	r3, [r7, #12]
 8004156:	e001      	b.n	800415c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8004158:	2316      	movs	r3, #22
 800415a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800415c:	68fb      	ldr	r3, [r7, #12]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800416c:	4b04      	ldr	r3, [pc, #16]	; (8004180 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	4a03      	ldr	r2, [pc, #12]	; (8004180 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	6053      	str	r3, [r2, #4]
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	e0042000 	.word	0xe0042000

08004184 <LL_DBGMCU_DisableDBGStopMode>:
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a03      	ldr	r2, [pc, #12]	; (800419c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800418e:	f023 0302 	bic.w	r3, r3, #2
 8004192:	6053      	str	r3, [r2, #4]
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	e0042000 	.word	0xe0042000

080041a0 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	4a03      	ldr	r2, [pc, #12]	; (80041b8 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80041aa:	f023 0304 	bic.w	r3, r3, #4
 80041ae:	6053      	str	r3, [r2, #4]
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	e0042000 	.word	0xe0042000

080041bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c6:	2003      	movs	r0, #3
 80041c8:	f001 f984 	bl	80054d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041cc:	f004 f802 	bl	80081d4 <HAL_RCC_GetHCLKFreq>
 80041d0:	4603      	mov	r3, r0
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <HAL_Init+0x3c>)
 80041d4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041d6:	200f      	movs	r0, #15
 80041d8:	f7fe f922 	bl	8002420 <HAL_InitTick>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	71fb      	strb	r3, [r7, #7]
 80041e6:	e001      	b.n	80041ec <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041e8:	f7fd fef0 	bl	8001fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041ec:	79fb      	ldrb	r3, [r7, #7]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000000 	.word	0x20000000

080041fc <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8004200:	4b02      	ldr	r3, [pc, #8]	; (800420c <HAL_GetUIDw0+0x10>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	bc80      	pop	{r7}
 800420a:	4770      	bx	lr
 800420c:	1fff7590 	.word	0x1fff7590

08004210 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004214:	4b02      	ldr	r3, [pc, #8]	; (8004220 <HAL_GetUIDw1+0x10>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr
 8004220:	1fff7594 	.word	0x1fff7594

08004224 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004228:	4b02      	ldr	r3, [pc, #8]	; (8004234 <HAL_GetUIDw2+0x10>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	4618      	mov	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr
 8004234:	1fff7598 	.word	0x1fff7598

08004238 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 800423c:	f7ff ff94 	bl	8004168 <LL_DBGMCU_DisableDBGSleepMode>
}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8004248:	f7ff ff9c 	bl	8004184 <LL_DBGMCU_DisableDBGStopMode>
}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8004254:	f7ff ffa4 	bl	80041a0 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}

0800425c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	431a      	orrs	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	601a      	str	r2, [r3, #0]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	695a      	ldr	r2, [r3, #20]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2107      	movs	r1, #7
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	401a      	ands	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	fa01 f303 	lsl.w	r3, r1, r3
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	695a      	ldr	r2, [r3, #20]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2107      	movs	r1, #7
 80042ec:	fa01 f303 	lsl.w	r3, r1, r3
 80042f0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr

0800432a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800432a:	b480      	push	{r7}
 800432c:	b085      	sub	sp, #20
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	210f      	movs	r1, #15
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	43db      	mvns	r3, r3
 8004348:	401a      	ands	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	0e9b      	lsrs	r3, r3, #26
 800434e:	f003 010f 	and.w	r1, r3, #15
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 031f 	and.w	r3, r3, #31
 8004358:	fa01 f303 	lsl.w	r3, r1, r3
 800435c:	431a      	orrs	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	bc80      	pop	{r7}
 800438e:	4770      	bx	lr

08004390 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80043a4:	43db      	mvns	r3, r3
 80043a6:	401a      	ands	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	43db      	mvns	r3, r3
 80043cc:	401a      	ands	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	0219      	lsls	r1, r3, #8
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	400b      	ands	r3, r1
 80043d6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80043da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043de:	431a      	orrs	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80043e4:	bf00      	nop
 80043e6:	3714      	adds	r7, #20
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bc80      	pop	{r7}
 80043ec:	4770      	bx	lr

080043ee <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80043fe:	f023 0317 	bic.w	r3, r3, #23
 8004402:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004424:	f023 0317 	bic.w	r3, r3, #23
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6093      	str	r3, [r2, #8]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800444a:	d101      	bne.n	8004450 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800446c:	f023 0317 	bic.w	r3, r3, #23
 8004470:	f043 0201 	orr.w	r2, r3, #1
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004492:	f023 0317 	bic.w	r3, r3, #23
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <LL_ADC_IsEnabled+0x18>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <LL_ADC_IsEnabled+0x1a>
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr

080044cc <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d101      	bne.n	80044e4 <LL_ADC_IsDisableOngoing+0x18>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <LL_ADC_IsDisableOngoing+0x1a>
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004500:	f023 0317 	bic.w	r3, r3, #23
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004526:	f023 0317 	bic.w	r3, r3, #23
 800452a:	f043 0210 	orr.w	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b04      	cmp	r3, #4
 800454e:	d101      	bne.n	8004554 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800456c:	2300      	movs	r3, #0
 800456e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004570:	2300      	movs	r3, #0
 8004572:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e17e      	b.n	8004880 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7fc ff11 	bl	80013b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff ff44 	bl	8004436 <LL_ADC_IsInternalRegulatorEnabled>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d115      	bne.n	80045e0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff18 	bl	80043ee <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045be:	4b9e      	ldr	r3, [pc, #632]	; (8004838 <HAL_ADC_Init+0x2d8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	099b      	lsrs	r3, r3, #6
 80045c4:	4a9d      	ldr	r2, [pc, #628]	; (800483c <HAL_ADC_Init+0x2dc>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	099b      	lsrs	r3, r3, #6
 80045cc:	3301      	adds	r3, #1
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045d2:	e002      	b.n	80045da <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f9      	bne.n	80045d4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff26 	bl	8004436 <LL_ADC_IsInternalRegulatorEnabled>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	f043 0210 	orr.w	r2, r3, #16
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	f043 0201 	orr.w	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f7ff ff93 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 8004616:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 8124 	bne.w	800486e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8120 	bne.w	800486e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004636:	f043 0202 	orr.w	r2, r3, #2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ff30 	bl	80044a8 <LL_ADC_IsEnabled>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	f040 80a7 	bne.w	800479e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	7e1b      	ldrb	r3, [r3, #24]
 8004658:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800465a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7e5b      	ldrb	r3, [r3, #25]
 8004660:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004662:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	7e9b      	ldrb	r3, [r3, #26]
 8004668:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800466a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004670:	2a00      	cmp	r2, #0
 8004672:	d002      	beq.n	800467a <HAL_ADC_Init+0x11a>
 8004674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004678:	e000      	b.n	800467c <HAL_ADC_Init+0x11c>
 800467a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800467c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004682:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	da04      	bge.n	8004696 <HAL_ADC_Init+0x136>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004694:	e001      	b.n	800469a <HAL_ADC_Init+0x13a>
 8004696:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800469a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046a2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80046a4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d114      	bne.n	80046e0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	7e9b      	ldrb	r3, [r3, #26]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d104      	bne.n	80046c8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e00b      	b.n	80046e0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	f043 0220 	orr.w	r2, r3, #32
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d8:	f043 0201 	orr.w	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80046f4:	4313      	orrs	r3, r2
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8004706:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	69b9      	ldr	r1, [r7, #24]
 8004710:	430b      	orrs	r3, r1
 8004712:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004720:	4313      	orrs	r3, r2
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d111      	bne.n	8004756 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800473e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8004744:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800474a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	4b38      	ldr	r3, [pc, #224]	; (8004840 <HAL_ADC_Init+0x2e0>)
 800475e:	4013      	ands	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	430b      	orrs	r3, r1
 8004768:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004772:	d014      	beq.n	800479e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477c:	d00f      	beq.n	800479e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004786:	d00a      	beq.n	800479e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004788:	4b2e      	ldr	r3, [pc, #184]	; (8004844 <HAL_ADC_Init+0x2e4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004798:	492a      	ldr	r1, [pc, #168]	; (8004844 <HAL_ADC_Init+0x2e4>)
 800479a:	4313      	orrs	r3, r2
 800479c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a6:	461a      	mov	r2, r3
 80047a8:	2100      	movs	r1, #0
 80047aa:	f7ff fd76 	bl	800429a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	461a      	mov	r2, r3
 80047b8:	4923      	ldr	r1, [pc, #140]	; (8004848 <HAL_ADC_Init+0x2e8>)
 80047ba:	f7ff fd6e 	bl	800429a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d108      	bne.n	80047d8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f062 020f 	orn	r2, r2, #15
 80047d4:	629a      	str	r2, [r3, #40]	; 0x28
 80047d6:	e017      	b.n	8004808 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047e0:	d112      	bne.n	8004808 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	f003 031c 	and.w	r3, r3, #28
 80047f4:	f06f 020f 	mvn.w	r2, #15
 80047f8:	fa02 f103 	lsl.w	r1, r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fd61 	bl	80042d6 <LL_ADC_GetSamplingTimeCommonChannels>
 8004814:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800481a:	429a      	cmp	r2, r3
 800481c:	d116      	bne.n	800484c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	f023 0303 	bic.w	r3, r3, #3
 800482c:	f043 0201 	orr.w	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004834:	e023      	b.n	800487e <HAL_ADC_Init+0x31e>
 8004836:	bf00      	nop
 8004838:	20000000 	.word	0x20000000
 800483c:	053e2d63 	.word	0x053e2d63
 8004840:	1ffffc02 	.word	0x1ffffc02
 8004844:	40012708 	.word	0x40012708
 8004848:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004850:	f023 0312 	bic.w	r3, r3, #18
 8004854:	f043 0210 	orr.w	r2, r3, #16
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800486c:	e007      	b.n	800487e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	f043 0210 	orr.w	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800487e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e07a      	b.n	8004990 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f043 0202 	orr.w	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 face 	bl	8004e48 <ADC_ConversionStop>
 80048ac:	4603      	mov	r3, r0
 80048ae:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10f      	bne.n	80048d6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fb92 	bl	8004fe0 <ADC_Disable>
 80048bc:	4603      	mov	r3, r0
 80048be:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fd9f 	bl	8004414 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6812      	ldr	r2, [r2, #0]
 80048e0:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80048e4:	f023 0303 	bic.w	r3, r3, #3
 80048e8:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f240 329f 	movw	r2, #927	; 0x39f
 80048f2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68d9      	ldr	r1, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b26      	ldr	r3, [pc, #152]	; (8004998 <HAL_ADC_DeInit+0x110>)
 8004900:	400b      	ands	r3, r1
 8004902:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691a      	ldr	r2, [r3, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8004912:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695a      	ldr	r2, [r3, #20]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0207 	bic.w	r2, r2, #7
 8004922:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004932:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004942:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004962:	4b0e      	ldr	r3, [pc, #56]	; (800499c <HAL_ADC_DeInit+0x114>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a0d      	ldr	r2, [pc, #52]	; (800499c <HAL_ADC_DeInit+0x114>)
 8004968:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800496c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fc fd36 	bl	80013e0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	833e0200 	.word	0x833e0200
 800499c:	40012708 	.word	0x40012708

080049a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7ff fdc5 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d132      	bne.n	8004a1e <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_ADC_Start+0x26>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e02e      	b.n	8004a24 <HAL_ADC_Start+0x84>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa80 	bl	8004ed4 <ADC_Enable>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d11a      	bne.n	8004a14 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	221c      	movs	r2, #28
 80049fe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fd6f 	bl	80044f0 <LL_ADC_REG_StartConversion>
 8004a12:	e006      	b.n	8004a22 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004a1c:	e001      	b.n	8004a22 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a1e:	2302      	movs	r3, #2
 8004a20:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_ADC_Stop+0x16>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e022      	b.n	8004a88 <HAL_ADC_Stop+0x5c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f9fc 	bl	8004e48 <ADC_ConversionStop>
 8004a50:	4603      	mov	r3, r0
 8004a52:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d111      	bne.n	8004a7e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fac0 	bl	8004fe0 <ADC_Disable>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a72:	f023 0301 	bic.w	r3, r3, #1
 8004a76:	f043 0201 	orr.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d102      	bne.n	8004aa8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e010      	b.n	8004aca <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e077      	b.n	8004bb6 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004aca:	f7fd fcb3 	bl	8002434 <HAL_GetTick>
 8004ace:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004ad0:	e021      	b.n	8004b16 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad8:	d01d      	beq.n	8004b16 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004ada:	f7fd fcab 	bl	8002434 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d302      	bcc.n	8004af0 <HAL_ADC_PollForConversion+0x60>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d112      	bne.n	8004b16 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4013      	ands	r3, r2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10b      	bne.n	8004b16 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	f043 0204 	orr.w	r2, r3, #4
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e04f      	b.n	8004bb6 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0d6      	beq.n	8004ad2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fbe6 	bl	8004306 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d031      	beq.n	8004ba4 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	7e9b      	ldrb	r3, [r3, #26]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d12d      	bne.n	8004ba4 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d126      	bne.n	8004ba4 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fcee 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d112      	bne.n	8004b8c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 020c 	bic.w	r2, r2, #12
 8004b74:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7e:	f023 0301 	bic.w	r3, r3, #1
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	659a      	str	r2, [r3, #88]	; 0x58
 8004b8a:	e00b      	b.n	8004ba4 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	f043 0220 	orr.w	r2, r3, #32
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	7e1b      	ldrb	r3, [r3, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	220c      	movs	r2, #12
 8004bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr
	...

08004bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_ADC_ConfigChannel+0x28>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e110      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x24a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fc95 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 80f7 	bne.w	8004e08 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	f000 80b1 	beq.w	8004d86 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c2c:	d004      	beq.n	8004c38 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004c32:	4a7e      	ldr	r2, [pc, #504]	; (8004e2c <HAL_ADC_ConfigChannel+0x254>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d108      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f7ff fb92 	bl	800436c <LL_ADC_REG_SetSequencerChAdd>
 8004c48:	e041      	b.n	8004cce <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	210f      	movs	r1, #15
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	401a      	ands	r2, r3
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d105      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0xa0>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0e9b      	lsrs	r3, r3, #26
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	e011      	b.n	8004c9c <HAL_ADC_ConfigChannel+0xc4>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004c90:	2320      	movs	r3, #32
 8004c92:	e003      	b.n	8004c9c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6849      	ldr	r1, [r1, #4]
 8004ca0:	f001 011f 	and.w	r1, r1, #31
 8004ca4:	408b      	lsls	r3, r1
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d808      	bhi.n	8004cce <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f7ff fb2e 	bl	800432a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	f7ff fb6b 	bl	80043b6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f280 8097 	bge.w	8004e18 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cea:	4851      	ldr	r0, [pc, #324]	; (8004e30 <HAL_ADC_ConfigChannel+0x258>)
 8004cec:	f7ff fac8 	bl	8004280 <LL_ADC_GetCommonPathInternalCh>
 8004cf0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a4f      	ldr	r2, [pc, #316]	; (8004e34 <HAL_ADC_ConfigChannel+0x25c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d120      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11b      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4848      	ldr	r0, [pc, #288]	; (8004e30 <HAL_ADC_ConfigChannel+0x258>)
 8004d10:	f7ff faa4 	bl	800425c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d14:	4b48      	ldr	r3, [pc, #288]	; (8004e38 <HAL_ADC_ConfigChannel+0x260>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	099b      	lsrs	r3, r3, #6
 8004d1a:	4a48      	ldr	r2, [pc, #288]	; (8004e3c <HAL_ADC_ConfigChannel+0x264>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	099b      	lsrs	r3, r3, #6
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	4613      	mov	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004d2e:	e002      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f9      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004d3c:	e06c      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a3f      	ldr	r2, [pc, #252]	; (8004e40 <HAL_ADC_ConfigChannel+0x268>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d10c      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d107      	bne.n	8004d62 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4835      	ldr	r0, [pc, #212]	; (8004e30 <HAL_ADC_ConfigChannel+0x258>)
 8004d5c:	f7ff fa7e 	bl	800425c <LL_ADC_SetCommonPathInternalCh>
 8004d60:	e05a      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a37      	ldr	r2, [pc, #220]	; (8004e44 <HAL_ADC_ConfigChannel+0x26c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d155      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d150      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	482c      	ldr	r0, [pc, #176]	; (8004e30 <HAL_ADC_ConfigChannel+0x258>)
 8004d80:	f7ff fa6c 	bl	800425c <LL_ADC_SetCommonPathInternalCh>
 8004d84:	e048      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d8e:	d004      	beq.n	8004d9a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004d94:	4a25      	ldr	r2, [pc, #148]	; (8004e2c <HAL_ADC_ConfigChannel+0x254>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d107      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4619      	mov	r1, r3
 8004da4:	4610      	mov	r0, r2
 8004da6:	f7ff faf3 	bl	8004390 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da32      	bge.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004db2:	481f      	ldr	r0, [pc, #124]	; (8004e30 <HAL_ADC_ConfigChannel+0x258>)
 8004db4:	f7ff fa64 	bl	8004280 <LL_ADC_GetCommonPathInternalCh>
 8004db8:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <HAL_ADC_ConfigChannel+0x25c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d107      	bne.n	8004dd4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4818      	ldr	r0, [pc, #96]	; (8004e30 <HAL_ADC_ConfigChannel+0x258>)
 8004dce:	f7ff fa45 	bl	800425c <LL_ADC_SetCommonPathInternalCh>
 8004dd2:	e021      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a19      	ldr	r2, [pc, #100]	; (8004e40 <HAL_ADC_ConfigChannel+0x268>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d107      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de4:	4619      	mov	r1, r3
 8004de6:	4812      	ldr	r0, [pc, #72]	; (8004e30 <HAL_ADC_ConfigChannel+0x258>)
 8004de8:	f7ff fa38 	bl	800425c <LL_ADC_SetCommonPathInternalCh>
 8004dec:	e014      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a14      	ldr	r2, [pc, #80]	; (8004e44 <HAL_ADC_ConfigChannel+0x26c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d10f      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004dfe:	4619      	mov	r1, r3
 8004e00:	480b      	ldr	r0, [pc, #44]	; (8004e30 <HAL_ADC_ConfigChannel+0x258>)
 8004e02:	f7ff fa2b 	bl	800425c <LL_ADC_SetCommonPathInternalCh>
 8004e06:	e007      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f043 0220 	orr.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	80000004 	.word	0x80000004
 8004e30:	40012708 	.word	0x40012708
 8004e34:	b0001000 	.word	0xb0001000
 8004e38:	20000000 	.word	0x20000000
 8004e3c:	053e2d63 	.word	0x053e2d63
 8004e40:	b8004000 	.word	0xb8004000
 8004e44:	b4002000 	.word	0xb4002000

08004e48 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fb71 	bl	800453c <LL_ADC_REG_IsConversionOngoing>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d033      	beq.n	8004ec8 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7ff fb31 	bl	80044cc <LL_ADC_IsDisableOngoing>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff fb4e 	bl	8004516 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e7a:	f7fd fadb 	bl	8002434 <HAL_GetTick>
 8004e7e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004e80:	e01b      	b.n	8004eba <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004e82:	f7fd fad7 	bl	8002434 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d914      	bls.n	8004eba <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0304 	and.w	r3, r3, #4
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f043 0210 	orr.w	r2, r3, #16
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	f043 0201 	orr.w	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e007      	b.n	8004eca <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1dc      	bne.n	8004e82 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fadf 	bl	80044a8 <LL_ADC_IsEnabled>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d169      	bne.n	8004fc4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <ADC_Enable+0xfc>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00d      	beq.n	8004f1a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	f043 0210 	orr.w	r2, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0e:	f043 0201 	orr.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e055      	b.n	8004fc6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fa9c 	bl	800445c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004f24:	482b      	ldr	r0, [pc, #172]	; (8004fd4 <ADC_Enable+0x100>)
 8004f26:	f7ff f9ab 	bl	8004280 <LL_ADC_GetCommonPathInternalCh>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00f      	beq.n	8004f54 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f34:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <ADC_Enable+0x104>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	4a28      	ldr	r2, [pc, #160]	; (8004fdc <ADC_Enable+0x108>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	099b      	lsrs	r3, r3, #6
 8004f42:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004f44:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f46:	e002      	b.n	8004f4e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f9      	bne.n	8004f48 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	7e5b      	ldrb	r3, [r3, #25]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d033      	beq.n	8004fc4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004f5c:	f7fd fa6a 	bl	8002434 <HAL_GetTick>
 8004f60:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f62:	e028      	b.n	8004fb6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fa9d 	bl	80044a8 <LL_ADC_IsEnabled>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d104      	bne.n	8004f7e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fa6f 	bl	800445c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f7e:	f7fd fa59 	bl	8002434 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d914      	bls.n	8004fb6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d00d      	beq.n	8004fb6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	f043 0210 	orr.w	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004faa:	f043 0201 	orr.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e007      	b.n	8004fc6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d1cf      	bne.n	8004f64 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	80000017 	.word	0x80000017
 8004fd4:	40012708 	.word	0x40012708
 8004fd8:	20000000 	.word	0x20000000
 8004fdc:	053e2d63 	.word	0x053e2d63

08004fe0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fa6d 	bl	80044cc <LL_ADC_IsDisableOngoing>
 8004ff2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7ff fa55 	bl	80044a8 <LL_ADC_IsEnabled>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d047      	beq.n	8005094 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d144      	bne.n	8005094 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0305 	and.w	r3, r3, #5
 8005014:	2b01      	cmp	r3, #1
 8005016:	d10c      	bne.n	8005032 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fa30 	bl	8004482 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2203      	movs	r2, #3
 8005028:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800502a:	f7fd fa03 	bl	8002434 <HAL_GetTick>
 800502e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005030:	e029      	b.n	8005086 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005036:	f043 0210 	orr.w	r2, r3, #16
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005042:	f043 0201 	orr.w	r2, r3, #1
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e023      	b.n	8005096 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800504e:	f7fd f9f1 	bl	8002434 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d914      	bls.n	8005086 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506e:	f043 0210 	orr.w	r2, r3, #16
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507a:	f043 0201 	orr.w	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e007      	b.n	8005096 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1dc      	bne.n	800504e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <LL_ADC_SetCalibrationFactor>:
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050ae:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <LL_ADC_GetCalibrationFactor>:
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <LL_ADC_Enable>:
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050f2:	f023 0317 	bic.w	r3, r3, #23
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	609a      	str	r2, [r3, #8]
}
 80050fe:	bf00      	nop
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	bc80      	pop	{r7}
 8005106:	4770      	bx	lr

08005108 <LL_ADC_Disable>:
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005118:	f023 0317 	bic.w	r3, r3, #23
 800511c:	f043 0202 	orr.w	r2, r3, #2
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	609a      	str	r2, [r3, #8]
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <LL_ADC_IsEnabled>:
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b01      	cmp	r3, #1
 8005140:	d101      	bne.n	8005146 <LL_ADC_IsEnabled+0x18>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <LL_ADC_IsEnabled+0x1a>
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr

08005152 <LL_ADC_StartCalibration>:
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005162:	f023 0317 	bic.w	r3, r3, #23
 8005166:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	609a      	str	r2, [r3, #8]
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <LL_ADC_IsCalibrationOnGoing>:
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800518c:	d101      	bne.n	8005192 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b088      	sub	sp, #32
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_ADCEx_Calibration_Start+0x1e>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e0b9      	b.n	8005330 <HAL_ADCEx_Calibration_Start+0x192>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff ff0b 	bl	8004fe0 <ADC_Disable>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff ffab 	bl	800512e <LL_ADC_IsEnabled>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f040 809d 	bne.w	800531a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80051e8:	f043 0202 	orr.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	f248 0303 	movw	r3, #32771	; 0x8003
 80051fa:	4013      	ands	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800520c:	f023 0303 	bic.w	r3, r3, #3
 8005210:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	e02e      	b.n	8005276 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ff98 	bl	8005152 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005222:	e014      	b.n	800524e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	3301      	adds	r3, #1
 8005228:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8005230:	d30d      	bcc.n	800524e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	f023 0312 	bic.w	r3, r3, #18
 800523a:	f043 0210 	orr.w	r2, r3, #16
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e070      	b.n	8005330 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff ff90 	bl	8005178 <LL_ADC_IsCalibrationOnGoing>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e2      	bne.n	8005224 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff2f 	bl	80050c6 <LL_ADC_GetCalibrationFactor>
 8005268:	4602      	mov	r2, r0
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	4413      	add	r3, r2
 800526e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	3301      	adds	r3, #1
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	2b07      	cmp	r3, #7
 800527a:	d9cd      	bls.n	8005218 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff ff29 	bl	80050e2 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69b9      	ldr	r1, [r7, #24]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff ff01 	bl	800509e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7ff ff31 	bl	8005108 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052a6:	f7fd f8c5 	bl	8002434 <HAL_GetTick>
 80052aa:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052ac:	e01c      	b.n	80052e8 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80052ae:	f7fd f8c1 	bl	8002434 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d915      	bls.n	80052e8 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff ff34 	bl	800512e <LL_ADC_IsEnabled>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00d      	beq.n	80052e8 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	f043 0210 	orr.w	r2, r3, #16
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052dc:	f043 0201 	orr.w	r2, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e023      	b.n	8005330 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff ff1e 	bl	800512e <LL_ADC_IsEnabled>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1da      	bne.n	80052ae <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68d9      	ldr	r1, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	430a      	orrs	r2, r1
 8005306:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	f023 0303 	bic.w	r3, r3, #3
 8005310:	f043 0201 	orr.w	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	659a      	str	r2, [r3, #88]	; 0x58
 8005318:	e005      	b.n	8005326 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531e:	f043 0210 	orr.w	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800532e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005348:	4b0c      	ldr	r3, [pc, #48]	; (800537c <__NVIC_SetPriorityGrouping+0x44>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005354:	4013      	ands	r3, r2
 8005356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800536a:	4a04      	ldr	r2, [pc, #16]	; (800537c <__NVIC_SetPriorityGrouping+0x44>)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	60d3      	str	r3, [r2, #12]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	e000ed00 	.word	0xe000ed00

08005380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005384:	4b04      	ldr	r3, [pc, #16]	; (8005398 <__NVIC_GetPriorityGrouping+0x18>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	0a1b      	lsrs	r3, r3, #8
 800538a:	f003 0307 	and.w	r3, r3, #7
}
 800538e:	4618      	mov	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	e000ed00 	.word	0xe000ed00

0800539c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	db0b      	blt.n	80053c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ae:	79fb      	ldrb	r3, [r7, #7]
 80053b0:	f003 021f 	and.w	r2, r3, #31
 80053b4:	4906      	ldr	r1, [pc, #24]	; (80053d0 <__NVIC_EnableIRQ+0x34>)
 80053b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2001      	movs	r0, #1
 80053be:	fa00 f202 	lsl.w	r2, r0, r2
 80053c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr
 80053d0:	e000e100 	.word	0xe000e100

080053d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	db12      	blt.n	800540c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	f003 021f 	and.w	r2, r3, #31
 80053ec:	490a      	ldr	r1, [pc, #40]	; (8005418 <__NVIC_DisableIRQ+0x44>)
 80053ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	2001      	movs	r0, #1
 80053f6:	fa00 f202 	lsl.w	r2, r0, r2
 80053fa:	3320      	adds	r3, #32
 80053fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005400:	f3bf 8f4f 	dsb	sy
}
 8005404:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005406:	f3bf 8f6f 	isb	sy
}
 800540a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000e100 	.word	0xe000e100

0800541c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	6039      	str	r1, [r7, #0]
 8005426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542c:	2b00      	cmp	r3, #0
 800542e:	db0a      	blt.n	8005446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	b2da      	uxtb	r2, r3
 8005434:	490c      	ldr	r1, [pc, #48]	; (8005468 <__NVIC_SetPriority+0x4c>)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	440b      	add	r3, r1
 8005440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005444:	e00a      	b.n	800545c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4908      	ldr	r1, [pc, #32]	; (800546c <__NVIC_SetPriority+0x50>)
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	3b04      	subs	r3, #4
 8005454:	0112      	lsls	r2, r2, #4
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	440b      	add	r3, r1
 800545a:	761a      	strb	r2, [r3, #24]
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	bc80      	pop	{r7}
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	e000e100 	.word	0xe000e100
 800546c:	e000ed00 	.word	0xe000ed00

08005470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005470:	b480      	push	{r7}
 8005472:	b089      	sub	sp, #36	; 0x24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f1c3 0307 	rsb	r3, r3, #7
 800548a:	2b04      	cmp	r3, #4
 800548c:	bf28      	it	cs
 800548e:	2304      	movcs	r3, #4
 8005490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	3304      	adds	r3, #4
 8005496:	2b06      	cmp	r3, #6
 8005498:	d902      	bls.n	80054a0 <NVIC_EncodePriority+0x30>
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	3b03      	subs	r3, #3
 800549e:	e000      	b.n	80054a2 <NVIC_EncodePriority+0x32>
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43da      	mvns	r2, r3
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	401a      	ands	r2, r3
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	fa01 f303 	lsl.w	r3, r1, r3
 80054c2:	43d9      	mvns	r1, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c8:	4313      	orrs	r3, r2
         );
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3724      	adds	r7, #36	; 0x24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ff2b 	bl	8005338 <__NVIC_SetPriorityGrouping>
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b086      	sub	sp, #24
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	4603      	mov	r3, r0
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
 80054f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054f8:	f7ff ff42 	bl	8005380 <__NVIC_GetPriorityGrouping>
 80054fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68b9      	ldr	r1, [r7, #8]
 8005502:	6978      	ldr	r0, [r7, #20]
 8005504:	f7ff ffb4 	bl	8005470 <NVIC_EncodePriority>
 8005508:	4602      	mov	r2, r0
 800550a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800550e:	4611      	mov	r1, r2
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff ff83 	bl	800541c <__NVIC_SetPriority>
}
 8005516:	bf00      	nop
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	4603      	mov	r3, r0
 8005526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff35 	bl	800539c <__NVIC_EnableIRQ>
}
 8005532:	bf00      	nop
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	4603      	mov	r3, r0
 8005542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff ff43 	bl	80053d4 <__NVIC_DisableIRQ>
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e08e      	b.n	8005688 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	4b47      	ldr	r3, [pc, #284]	; (8005690 <HAL_DMA_Init+0x138>)
 8005572:	429a      	cmp	r2, r3
 8005574:	d80f      	bhi.n	8005596 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	4b45      	ldr	r3, [pc, #276]	; (8005694 <HAL_DMA_Init+0x13c>)
 800557e:	4413      	add	r3, r2
 8005580:	4a45      	ldr	r2, [pc, #276]	; (8005698 <HAL_DMA_Init+0x140>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	091b      	lsrs	r3, r3, #4
 8005588:	009a      	lsls	r2, r3, #2
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a42      	ldr	r2, [pc, #264]	; (800569c <HAL_DMA_Init+0x144>)
 8005592:	641a      	str	r2, [r3, #64]	; 0x40
 8005594:	e00e      	b.n	80055b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	461a      	mov	r2, r3
 800559c:	4b40      	ldr	r3, [pc, #256]	; (80056a0 <HAL_DMA_Init+0x148>)
 800559e:	4413      	add	r3, r2
 80055a0:	4a3d      	ldr	r2, [pc, #244]	; (8005698 <HAL_DMA_Init+0x140>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	009a      	lsls	r2, r3, #2
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <HAL_DMA_Init+0x14c>)
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6819      	ldr	r1, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fb24 	bl	8005c54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005614:	d102      	bne.n	800561c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005628:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005632:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_DMA_Init+0x106>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b04      	cmp	r3, #4
 8005642:	d80c      	bhi.n	800565e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fb4d 	bl	8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800565a:	605a      	str	r2, [r3, #4]
 800565c:	e008      	b.n	8005670 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40020407 	.word	0x40020407
 8005694:	bffdfff8 	.word	0xbffdfff8
 8005698:	cccccccd 	.word	0xcccccccd
 800569c:	40020000 	.word	0x40020000
 80056a0:	bffdfbf8 	.word	0xbffdfbf8
 80056a4:	40020400 	.word	0x40020400

080056a8 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e07b      	b.n	80057b2 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	4b3a      	ldr	r3, [pc, #232]	; (80057bc <HAL_DMA_DeInit+0x114>)
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d80f      	bhi.n	80056f6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	4b38      	ldr	r3, [pc, #224]	; (80057c0 <HAL_DMA_DeInit+0x118>)
 80056de:	4413      	add	r3, r2
 80056e0:	4a38      	ldr	r2, [pc, #224]	; (80057c4 <HAL_DMA_DeInit+0x11c>)
 80056e2:	fba2 2303 	umull	r2, r3, r2, r3
 80056e6:	091b      	lsrs	r3, r3, #4
 80056e8:	009a      	lsls	r2, r3, #2
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a35      	ldr	r2, [pc, #212]	; (80057c8 <HAL_DMA_DeInit+0x120>)
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
 80056f4:	e00e      	b.n	8005714 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	461a      	mov	r2, r3
 80056fc:	4b33      	ldr	r3, [pc, #204]	; (80057cc <HAL_DMA_DeInit+0x124>)
 80056fe:	4413      	add	r3, r2
 8005700:	4a30      	ldr	r2, [pc, #192]	; (80057c4 <HAL_DMA_DeInit+0x11c>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	091b      	lsrs	r3, r3, #4
 8005708:	009a      	lsls	r2, r3, #2
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2f      	ldr	r2, [pc, #188]	; (80057d0 <HAL_DMA_DeInit+0x128>)
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	f003 021c 	and.w	r2, r3, #28
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	2101      	movs	r1, #1
 800572a:	fa01 f202 	lsl.w	r2, r1, r2
 800572e:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fa8f 	bl	8005c54 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005746:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00f      	beq.n	8005770 <HAL_DMA_DeInit+0xc8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d80b      	bhi.n	8005770 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fac3 	bl	8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800576e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40020407 	.word	0x40020407
 80057c0:	bffdfff8 	.word	0xbffdfff8
 80057c4:	cccccccd 	.word	0xcccccccd
 80057c8:	40020000 	.word	0x40020000
 80057cc:	bffdfbf8 	.word	0xbffdfbf8
 80057d0:	40020400 	.word	0x40020400

080057d4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2300      	movs	r3, #0
 80057e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d101      	bne.n	80057f4 <HAL_DMA_Start_IT+0x20>
 80057f0:	2302      	movs	r3, #2
 80057f2:	e069      	b.n	80058c8 <HAL_DMA_Start_IT+0xf4>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b01      	cmp	r3, #1
 8005806:	d155      	bne.n	80058b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	68b9      	ldr	r1, [r7, #8]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f9d3 	bl	8005bd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 020e 	orr.w	r2, r2, #14
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e00f      	b.n	800586c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0204 	bic.w	r2, r2, #4
 800585a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 020a 	orr.w	r2, r2, #10
 800586a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d007      	beq.n	800588a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005884:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005888:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0201 	orr.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e008      	b.n	80058c6 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2280      	movs	r2, #128	; 0x80
 80058b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80058c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3718      	adds	r7, #24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e04f      	b.n	8005982 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d008      	beq.n	8005900 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2204      	movs	r2, #4
 80058f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e040      	b.n	8005982 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 020e 	bic.w	r2, r2, #14
 800590e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800591a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800591e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0201 	bic.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005934:	f003 021c 	and.w	r2, r3, #28
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f202 	lsl.w	r2, r1, r2
 8005942:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800594c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00c      	beq.n	8005970 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005964:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800596e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d005      	beq.n	80059b0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2204      	movs	r2, #4
 80059a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
 80059ae:	e047      	b.n	8005a40 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 020e 	bic.w	r2, r2, #14
 80059be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 0201 	bic.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	f003 021c 	and.w	r2, r3, #28
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	2101      	movs	r1, #1
 80059ee:	fa01 f202 	lsl.w	r2, r1, r2
 80059f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00c      	beq.n	8005a20 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005a1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	4798      	blx	r3
    }
  }
  return status;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a68:	f003 031c 	and.w	r3, r3, #28
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d027      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x7c>
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d022      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d107      	bne.n	8005aa0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0204 	bic.w	r2, r2, #4
 8005a9e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa4:	f003 021c 	and.w	r2, r3, #28
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	2104      	movs	r1, #4
 8005aae:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8081 	beq.w	8005bc0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005ac6:	e07b      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005acc:	f003 031c 	and.w	r3, r3, #28
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	409a      	lsls	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d03d      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x10c>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d038      	beq.n	8005b58 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0320 	and.w	r3, r3, #32
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 020a 	bic.w	r2, r2, #10
 8005b02:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	461a      	mov	r2, r3
 8005b12:	4b2e      	ldr	r3, [pc, #184]	; (8005bcc <HAL_DMA_IRQHandler+0x180>)
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d909      	bls.n	8005b2c <HAL_DMA_IRQHandler+0xe0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1c:	f003 031c 	and.w	r3, r3, #28
 8005b20:	4a2b      	ldr	r2, [pc, #172]	; (8005bd0 <HAL_DMA_IRQHandler+0x184>)
 8005b22:	2102      	movs	r1, #2
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	6053      	str	r3, [r2, #4]
 8005b2a:	e008      	b.n	8005b3e <HAL_DMA_IRQHandler+0xf2>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b30:	f003 031c 	and.w	r3, r3, #28
 8005b34:	4a27      	ldr	r2, [pc, #156]	; (8005bd4 <HAL_DMA_IRQHandler+0x188>)
 8005b36:	2102      	movs	r1, #2
 8005b38:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d038      	beq.n	8005bc0 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8005b56:	e033      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5c:	f003 031c 	and.w	r3, r3, #28
 8005b60:	2208      	movs	r2, #8
 8005b62:	409a      	lsls	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4013      	ands	r3, r2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d02a      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x176>
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d025      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 020e 	bic.w	r2, r2, #14
 8005b84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8a:	f003 021c 	and.w	r2, r3, #28
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2101      	movs	r1, #1
 8005b94:	fa01 f202 	lsl.w	r2, r1, r2
 8005b98:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d004      	beq.n	8005bc2 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
}
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40020080 	.word	0x40020080
 8005bd0:	40020400 	.word	0x40020400
 8005bd4:	40020000 	.word	0x40020000

08005bd8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005bee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	f003 021c 	and.w	r2, r3, #28
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2101      	movs	r1, #1
 8005c10:	fa01 f202 	lsl.w	r2, r1, r2
 8005c14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	683a      	ldr	r2, [r7, #0]
 8005c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b10      	cmp	r3, #16
 8005c24:	d108      	bne.n	8005c38 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c36:	e007      	b.n	8005c48 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	60da      	str	r2, [r3, #12]
}
 8005c48:	bf00      	nop
 8005c4a:	3714      	adds	r7, #20
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bc80      	pop	{r7}
 8005c50:	4770      	bx	lr
	...

08005c54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	461a      	mov	r2, r3
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d813      	bhi.n	8005c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c74:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	3b08      	subs	r3, #8
 8005c84:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e011      	b.n	8005cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	009a      	lsls	r2, r3, #2
 8005c98:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005c9a:	4413      	add	r3, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	3b08      	subs	r3, #8
 8005ca8:	4a0b      	ldr	r2, [pc, #44]	; (8005cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005caa:	fba2 2303 	umull	r2, r3, r2, r3
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	3307      	adds	r3, #7
 8005cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005cb8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f003 031f 	and.w	r3, r3, #31
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005cc8:	bf00      	nop
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40020407 	.word	0x40020407
 8005cd8:	cccccccd 	.word	0xcccccccd
 8005cdc:	4002081c 	.word	0x4002081c
 8005ce0:	40020880 	.word	0x40020880

08005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	461a      	mov	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a08      	ldr	r2, [pc, #32]	; (8005d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d08:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2201      	movs	r2, #1
 8005d14:	409a      	lsls	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	1000823f 	.word	0x1000823f
 8005d28:	40020940 	.word	0x40020940

08005d2c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d3a:	4b1c      	ldr	r3, [pc, #112]	; (8005dac <HAL_FLASH_Program+0x80>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_FLASH_Program+0x1a>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e02d      	b.n	8005da2 <HAL_FLASH_Program+0x76>
 8005d46:	4b19      	ldr	r3, [pc, #100]	; (8005dac <HAL_FLASH_Program+0x80>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d4c:	4b17      	ldr	r3, [pc, #92]	; (8005dac <HAL_FLASH_Program+0x80>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d56:	f000 f869 	bl	8005e2c <FLASH_WaitForLastOperation>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11a      	bne.n	8005d9a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d105      	bne.n	8005d76 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6e:	68b8      	ldr	r0, [r7, #8]
 8005d70:	f000 f8be 	bl	8005ef0 <FLASH_Program_DoubleWord>
 8005d74:	e004      	b.n	8005d80 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	68b8      	ldr	r0, [r7, #8]
 8005d7c:	f000 f8de 	bl	8005f3c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d84:	f000 f852 	bl	8005e2c <FLASH_WaitForLastOperation>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005d8c:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <HAL_FLASH_Program+0x84>)
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	43db      	mvns	r3, r3
 8005d94:	4906      	ldr	r1, [pc, #24]	; (8005db0 <HAL_FLASH_Program+0x84>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d9a:	4b04      	ldr	r3, [pc, #16]	; (8005dac <HAL_FLASH_Program+0x80>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000364 	.word	0x20000364
 8005db0:	58004000 	.word	0x58004000

08005db4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	; (8005dec <HAL_FLASH_Unlock+0x38>)
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da0b      	bge.n	8005dde <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005dc6:	4b09      	ldr	r3, [pc, #36]	; (8005dec <HAL_FLASH_Unlock+0x38>)
 8005dc8:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <HAL_FLASH_Unlock+0x3c>)
 8005dca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005dcc:	4b07      	ldr	r3, [pc, #28]	; (8005dec <HAL_FLASH_Unlock+0x38>)
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <HAL_FLASH_Unlock+0x40>)
 8005dd0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005dd2:	4b06      	ldr	r3, [pc, #24]	; (8005dec <HAL_FLASH_Unlock+0x38>)
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da01      	bge.n	8005dde <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005dde:	79fb      	ldrb	r3, [r7, #7]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bc80      	pop	{r7}
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	58004000 	.word	0x58004000
 8005df0:	45670123 	.word	0x45670123
 8005df4:	cdef89ab 	.word	0xcdef89ab

08005df8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <HAL_FLASH_Lock+0x30>)
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <HAL_FLASH_Lock+0x30>)
 8005e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e0c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <HAL_FLASH_Lock+0x30>)
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	db01      	blt.n	8005e1a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	58004000 	.word	0x58004000

08005e2c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005e34:	f7fc fafe 	bl	8002434 <HAL_GetTick>
 8005e38:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005e3a:	e009      	b.n	8005e50 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005e3c:	f7fc fafa 	bl	8002434 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d801      	bhi.n	8005e50 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e047      	b.n	8005ee0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <FLASH_WaitForLastOperation+0xbc>)
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e5c:	d0ee      	beq.n	8005e3c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005e5e:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <FLASH_WaitForLastOperation+0xbc>)
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005e6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ee8 <FLASH_WaitForLastOperation+0xbc>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <FLASH_WaitForLastOperation+0x6c>
 8005e88:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <FLASH_WaitForLastOperation+0xbc>)
 8005e8a:	699a      	ldr	r2, [r3, #24]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005e92:	4915      	ldr	r1, [pc, #84]	; (8005ee8 <FLASH_WaitForLastOperation+0xbc>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	618b      	str	r3, [r1, #24]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <FLASH_WaitForLastOperation+0x80>
 8005ea2:	4a11      	ldr	r2, [pc, #68]	; (8005ee8 <FLASH_WaitForLastOperation+0xbc>)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005eaa:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00e      	beq.n	8005ed0 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005eb2:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <FLASH_WaitForLastOperation+0xc0>)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e011      	b.n	8005ee0 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005ebc:	f7fc faba 	bl	8002434 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d801      	bhi.n	8005ed0 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e007      	b.n	8005ee0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <FLASH_WaitForLastOperation+0xbc>)
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005edc:	d0ee      	beq.n	8005ebc <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	58004000 	.word	0x58004000
 8005eec:	20000364 	.word	0x20000364

08005ef0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <FLASH_Program_DoubleWord+0x48>)
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	4a0d      	ldr	r2, [pc, #52]	; (8005f38 <FLASH_Program_DoubleWord+0x48>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005f0e:	f3bf 8f6f 	isb	sy
}
 8005f12:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	000a      	movs	r2, r1
 8005f22:	2300      	movs	r3, #0
 8005f24:	68f9      	ldr	r1, [r7, #12]
 8005f26:	3104      	adds	r1, #4
 8005f28:	4613      	mov	r3, r2
 8005f2a:	600b      	str	r3, [r1, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	58004000 	.word	0x58004000

08005f3c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b089      	sub	sp, #36	; 0x24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005f46:	2340      	movs	r3, #64	; 0x40
 8005f48:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005f52:	4b18      	ldr	r3, [pc, #96]	; (8005fb4 <FLASH_Program_Fast+0x78>)
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <FLASH_Program_Fast+0x78>)
 8005f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f5c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f62:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f64:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005f66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f68:	b672      	cpsid	i
}
 8005f6a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	3304      	adds	r3, #4
 8005f78:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	617b      	str	r3, [r7, #20]
    row_index--;
 8005f80:	7ffb      	ldrb	r3, [r7, #31]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005f86:	7ffb      	ldrb	r3, [r7, #31]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1ef      	bne.n	8005f6c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005f8c:	bf00      	nop
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <FLASH_Program_Fast+0x78>)
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9a:	d0f8      	beq.n	8005f8e <FLASH_Program_Fast+0x52>
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f383 8810 	msr	PRIMASK, r3
}
 8005fa6:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005fa8:	bf00      	nop
 8005faa:	3724      	adds	r7, #36	; 0x24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	58004000 	.word	0x58004000

08005fb8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fc2:	4b28      	ldr	r3, [pc, #160]	; (8006064 <HAL_FLASHEx_Erase+0xac>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_FLASHEx_Erase+0x16>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e046      	b.n	800605c <HAL_FLASHEx_Erase+0xa4>
 8005fce:	4b25      	ldr	r3, [pc, #148]	; (8006064 <HAL_FLASHEx_Erase+0xac>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005fd4:	4b23      	ldr	r3, [pc, #140]	; (8006064 <HAL_FLASHEx_Erase+0xac>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fde:	f7ff ff25 	bl	8005e2c <FLASH_WaitForLastOperation>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d133      	bne.n	8006054 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d108      	bne.n	8006006 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005ff4:	f000 f838 	bl	8006068 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ffc:	f7ff ff16 	bl	8005e2c <FLASH_WaitForLastOperation>
 8006000:	4603      	mov	r3, r0
 8006002:	73fb      	strb	r3, [r7, #15]
 8006004:	e024      	b.n	8006050 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800600c:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	e012      	b.n	800603c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8006016:	68b8      	ldr	r0, [r7, #8]
 8006018:	f000 f836 	bl	8006088 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800601c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006020:	f7ff ff04 	bl	8005e2c <FLASH_WaitForLastOperation>
 8006024:	4603      	mov	r3, r0
 8006026:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	601a      	str	r2, [r3, #0]
          break;
 8006034:	e00a      	b.n	800604c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	3301      	adds	r3, #1
 800603a:	60bb      	str	r3, [r7, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	4413      	add	r3, r2
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	429a      	cmp	r2, r3
 800604a:	d3e4      	bcc.n	8006016 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800604c:	f000 f878 	bl	8006140 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006050:	f000 f832 	bl	80060b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006054:	4b03      	ldr	r3, [pc, #12]	; (8006064 <HAL_FLASHEx_Erase+0xac>)
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]

  return status;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	20000364 	.word	0x20000364

08006068 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <FLASH_MassErase+0x1c>)
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	4a04      	ldr	r2, [pc, #16]	; (8006084 <FLASH_MassErase+0x1c>)
 8006072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	6153      	str	r3, [r2, #20]
#endif
}
 800607c:	bf00      	nop
 800607e:	46bd      	mov	sp, r7
 8006080:	bc80      	pop	{r7}
 8006082:	4770      	bx	lr
 8006084:	58004000 	.word	0x58004000

08006088 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8006090:	4b08      	ldr	r3, [pc, #32]	; (80060b4 <FLASH_PageErase+0x2c>)
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	4313      	orrs	r3, r2
 800609e:	4a05      	ldr	r2, [pc, #20]	; (80060b4 <FLASH_PageErase+0x2c>)
 80060a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a4:	f043 0302 	orr.w	r3, r3, #2
 80060a8:	6153      	str	r3, [r2, #20]
#endif
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bc80      	pop	{r7}
 80060b2:	4770      	bx	lr
 80060b4:	58004000 	.word	0x58004000

080060b8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80060bc:	4b1f      	ldr	r3, [pc, #124]	; (800613c <FLASH_FlushCaches+0x84>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d117      	bne.n	80060f8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80060c8:	4b1c      	ldr	r3, [pc, #112]	; (800613c <FLASH_FlushCaches+0x84>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1b      	ldr	r2, [pc, #108]	; (800613c <FLASH_FlushCaches+0x84>)
 80060ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80060d4:	4b19      	ldr	r3, [pc, #100]	; (800613c <FLASH_FlushCaches+0x84>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a18      	ldr	r2, [pc, #96]	; (800613c <FLASH_FlushCaches+0x84>)
 80060da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	4b16      	ldr	r3, [pc, #88]	; (800613c <FLASH_FlushCaches+0x84>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a15      	ldr	r2, [pc, #84]	; (800613c <FLASH_FlushCaches+0x84>)
 80060e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060ec:	4b13      	ldr	r3, [pc, #76]	; (800613c <FLASH_FlushCaches+0x84>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a12      	ldr	r2, [pc, #72]	; (800613c <FLASH_FlushCaches+0x84>)
 80060f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060f6:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80060f8:	4b10      	ldr	r3, [pc, #64]	; (800613c <FLASH_FlushCaches+0x84>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006100:	2b01      	cmp	r3, #1
 8006102:	d117      	bne.n	8006134 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <FLASH_FlushCaches+0x84>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a0c      	ldr	r2, [pc, #48]	; (800613c <FLASH_FlushCaches+0x84>)
 800610a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800610e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006110:	4b0a      	ldr	r3, [pc, #40]	; (800613c <FLASH_FlushCaches+0x84>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a09      	ldr	r2, [pc, #36]	; (800613c <FLASH_FlushCaches+0x84>)
 8006116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800611a:	6013      	str	r3, [r2, #0]
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <FLASH_FlushCaches+0x84>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a06      	ldr	r2, [pc, #24]	; (800613c <FLASH_FlushCaches+0x84>)
 8006122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006126:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006128:	4b04      	ldr	r3, [pc, #16]	; (800613c <FLASH_FlushCaches+0x84>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a03      	ldr	r2, [pc, #12]	; (800613c <FLASH_FlushCaches+0x84>)
 800612e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006132:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	58004000 	.word	0x58004000

08006140 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <FLASH_AcknowledgePageErase+0x1c>)
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	4a04      	ldr	r2, [pc, #16]	; (800615c <FLASH_AcknowledgePageErase+0x1c>)
 800614a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800614e:	f023 0302 	bic.w	r3, r3, #2
 8006152:	6153      	str	r3, [r2, #20]
#endif
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	58004000 	.word	0x58004000

08006160 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800616e:	e140      	b.n	80063f2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	2101      	movs	r1, #1
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	fa01 f303 	lsl.w	r3, r1, r3
 800617c:	4013      	ands	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8132 	beq.w	80063ec <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b01      	cmp	r3, #1
 8006192:	d005      	beq.n	80061a0 <HAL_GPIO_Init+0x40>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d130      	bne.n	8006202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	2203      	movs	r2, #3
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4013      	ands	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061d6:	2201      	movs	r2, #1
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	fa02 f303 	lsl.w	r3, r2, r3
 80061de:	43db      	mvns	r3, r3
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4013      	ands	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	f003 0201 	and.w	r2, r3, #1
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	2b03      	cmp	r3, #3
 800620c:	d017      	beq.n	800623e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	2203      	movs	r2, #3
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4013      	ands	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d123      	bne.n	8006292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	08da      	lsrs	r2, r3, #3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	3208      	adds	r2, #8
 8006252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	220f      	movs	r2, #15
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4013      	ands	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	08da      	lsrs	r2, r3, #3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3208      	adds	r2, #8
 800628c:	6939      	ldr	r1, [r7, #16]
 800628e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	2203      	movs	r2, #3
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	43db      	mvns	r3, r3
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4013      	ands	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f003 0203 	and.w	r2, r3, #3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 808c 	beq.w	80063ec <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80062d4:	4a4e      	ldr	r2, [pc, #312]	; (8006410 <HAL_GPIO_Init+0x2b0>)
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	089b      	lsrs	r3, r3, #2
 80062da:	3302      	adds	r3, #2
 80062dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	2207      	movs	r2, #7
 80062ec:	fa02 f303 	lsl.w	r3, r2, r3
 80062f0:	43db      	mvns	r3, r3
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4013      	ands	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062fe:	d00d      	beq.n	800631c <HAL_GPIO_Init+0x1bc>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a44      	ldr	r2, [pc, #272]	; (8006414 <HAL_GPIO_Init+0x2b4>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d007      	beq.n	8006318 <HAL_GPIO_Init+0x1b8>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a43      	ldr	r2, [pc, #268]	; (8006418 <HAL_GPIO_Init+0x2b8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d101      	bne.n	8006314 <HAL_GPIO_Init+0x1b4>
 8006310:	2302      	movs	r3, #2
 8006312:	e004      	b.n	800631e <HAL_GPIO_Init+0x1be>
 8006314:	2307      	movs	r3, #7
 8006316:	e002      	b.n	800631e <HAL_GPIO_Init+0x1be>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <HAL_GPIO_Init+0x1be>
 800631c:	2300      	movs	r3, #0
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	f002 0203 	and.w	r2, r2, #3
 8006324:	0092      	lsls	r2, r2, #2
 8006326:	4093      	lsls	r3, r2
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800632e:	4938      	ldr	r1, [pc, #224]	; (8006410 <HAL_GPIO_Init+0x2b0>)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	089b      	lsrs	r3, r3, #2
 8006334:	3302      	adds	r3, #2
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800633c:	4b37      	ldr	r3, [pc, #220]	; (800641c <HAL_GPIO_Init+0x2bc>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	43db      	mvns	r3, r3
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4013      	ands	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006360:	4a2e      	ldr	r2, [pc, #184]	; (800641c <HAL_GPIO_Init+0x2bc>)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006366:	4b2d      	ldr	r3, [pc, #180]	; (800641c <HAL_GPIO_Init+0x2bc>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	43db      	mvns	r3, r3
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4013      	ands	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800638a:	4a24      	ldr	r2, [pc, #144]	; (800641c <HAL_GPIO_Init+0x2bc>)
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006390:	4b22      	ldr	r3, [pc, #136]	; (800641c <HAL_GPIO_Init+0x2bc>)
 8006392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006396:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	43db      	mvns	r3, r3
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4013      	ands	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80063b6:	4a19      	ldr	r2, [pc, #100]	; (800641c <HAL_GPIO_Init+0x2bc>)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80063be:	4b17      	ldr	r3, [pc, #92]	; (800641c <HAL_GPIO_Init+0x2bc>)
 80063c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	43db      	mvns	r3, r3
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	4013      	ands	r3, r2
 80063ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80063e4:	4a0d      	ldr	r2, [pc, #52]	; (800641c <HAL_GPIO_Init+0x2bc>)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	3301      	adds	r3, #1
 80063f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f47f aeb7 	bne.w	8006170 <HAL_GPIO_Init+0x10>
  }
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40010000 	.word	0x40010000
 8006414:	48000400 	.word	0x48000400
 8006418:	48000800 	.word	0x48000800
 800641c:	58000800 	.word	0x58000800

08006420 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800642e:	e0af      	b.n	8006590 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006430:	2201      	movs	r2, #1
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	683a      	ldr	r2, [r7, #0]
 800643a:	4013      	ands	r3, r2
 800643c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 80a2 	beq.w	800658a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006446:	4a59      	ldr	r2, [pc, #356]	; (80065ac <HAL_GPIO_DeInit+0x18c>)
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	089b      	lsrs	r3, r3, #2
 800644c:	3302      	adds	r3, #2
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	2207      	movs	r2, #7
 800645e:	fa02 f303 	lsl.w	r3, r2, r3
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4013      	ands	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800646e:	d00d      	beq.n	800648c <HAL_GPIO_DeInit+0x6c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a4f      	ldr	r2, [pc, #316]	; (80065b0 <HAL_GPIO_DeInit+0x190>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <HAL_GPIO_DeInit+0x68>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a4e      	ldr	r2, [pc, #312]	; (80065b4 <HAL_GPIO_DeInit+0x194>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d101      	bne.n	8006484 <HAL_GPIO_DeInit+0x64>
 8006480:	2302      	movs	r3, #2
 8006482:	e004      	b.n	800648e <HAL_GPIO_DeInit+0x6e>
 8006484:	2307      	movs	r3, #7
 8006486:	e002      	b.n	800648e <HAL_GPIO_DeInit+0x6e>
 8006488:	2301      	movs	r3, #1
 800648a:	e000      	b.n	800648e <HAL_GPIO_DeInit+0x6e>
 800648c:	2300      	movs	r3, #0
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	f002 0203 	and.w	r2, r2, #3
 8006494:	0092      	lsls	r2, r2, #2
 8006496:	4093      	lsls	r3, r2
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	429a      	cmp	r2, r3
 800649c:	d136      	bne.n	800650c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800649e:	4b46      	ldr	r3, [pc, #280]	; (80065b8 <HAL_GPIO_DeInit+0x198>)
 80064a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	43db      	mvns	r3, r3
 80064a8:	4943      	ldr	r1, [pc, #268]	; (80065b8 <HAL_GPIO_DeInit+0x198>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80064b0:	4b41      	ldr	r3, [pc, #260]	; (80065b8 <HAL_GPIO_DeInit+0x198>)
 80064b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	43db      	mvns	r3, r3
 80064ba:	493f      	ldr	r1, [pc, #252]	; (80065b8 <HAL_GPIO_DeInit+0x198>)
 80064bc:	4013      	ands	r3, r2
 80064be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80064c2:	4b3d      	ldr	r3, [pc, #244]	; (80065b8 <HAL_GPIO_DeInit+0x198>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	493b      	ldr	r1, [pc, #236]	; (80065b8 <HAL_GPIO_DeInit+0x198>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80064d0:	4b39      	ldr	r3, [pc, #228]	; (80065b8 <HAL_GPIO_DeInit+0x198>)
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	43db      	mvns	r3, r3
 80064d8:	4937      	ldr	r1, [pc, #220]	; (80065b8 <HAL_GPIO_DeInit+0x198>)
 80064da:	4013      	ands	r3, r2
 80064dc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	2207      	movs	r2, #7
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80064ee:	4a2f      	ldr	r2, [pc, #188]	; (80065ac <HAL_GPIO_DeInit+0x18c>)
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	089b      	lsrs	r3, r3, #2
 80064f4:	3302      	adds	r3, #2
 80064f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	43da      	mvns	r2, r3
 80064fe:	482b      	ldr	r0, [pc, #172]	; (80065ac <HAL_GPIO_DeInit+0x18c>)
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	089b      	lsrs	r3, r3, #2
 8006504:	400a      	ands	r2, r1
 8006506:	3302      	adds	r3, #2
 8006508:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	2103      	movs	r1, #3
 8006516:	fa01 f303 	lsl.w	r3, r1, r3
 800651a:	431a      	orrs	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	08da      	lsrs	r2, r3, #3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3208      	adds	r2, #8
 8006528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	220f      	movs	r2, #15
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43db      	mvns	r3, r3
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	08d2      	lsrs	r2, r2, #3
 8006540:	4019      	ands	r1, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3208      	adds	r2, #8
 8006546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	2103      	movs	r1, #3
 8006554:	fa01 f303 	lsl.w	r3, r1, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	401a      	ands	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	2101      	movs	r1, #1
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	fa01 f303 	lsl.w	r3, r1, r3
 800656c:	43db      	mvns	r3, r3
 800656e:	401a      	ands	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	005b      	lsls	r3, r3, #1
 800657c:	2103      	movs	r1, #3
 800657e:	fa01 f303 	lsl.w	r3, r1, r3
 8006582:	43db      	mvns	r3, r3
 8006584:	401a      	ands	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60da      	str	r2, [r3, #12]
    }

    position++;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	3301      	adds	r3, #1
 800658e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	f47f af49 	bne.w	8006430 <HAL_GPIO_DeInit+0x10>
  }
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bc80      	pop	{r7}
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	40010000 	.word	0x40010000
 80065b0:	48000400 	.word	0x48000400
 80065b4:	48000800 	.word	0x48000800
 80065b8:	58000800 	.word	0x58000800

080065bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	807b      	strh	r3, [r7, #2]
 80065c8:	4613      	mov	r3, r2
 80065ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065cc:	787b      	ldrb	r3, [r7, #1]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065d2:	887a      	ldrh	r2, [r7, #2]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065d8:	e002      	b.n	80065e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065da:	887a      	ldrh	r2, [r7, #2]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d006      	beq.n	8006610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006602:	4a05      	ldr	r2, [pc, #20]	; (8006618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006604:	88fb      	ldrh	r3, [r7, #6]
 8006606:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006608:	88fb      	ldrh	r3, [r7, #6]
 800660a:	4618      	mov	r0, r3
 800660c:	f005 fc68 	bl	800bee0 <HAL_GPIO_EXTI_Callback>
  }
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	58000800 	.word	0x58000800

0800661c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e081      	b.n	8006732 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fb fac6 	bl	8001bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800666c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689a      	ldr	r2, [r3, #8]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800667c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d107      	bne.n	8006696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	e006      	b.n	80066a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d104      	bne.n	80066b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69d9      	ldr	r1, [r3, #28]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1a      	ldr	r2, [r3, #32]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4603      	mov	r3, r0
 800674c:	817b      	strh	r3, [r7, #10]
 800674e:	460b      	mov	r3, r1
 8006750:	813b      	strh	r3, [r7, #8]
 8006752:	4613      	mov	r3, r2
 8006754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b20      	cmp	r3, #32
 8006760:	f040 80f9 	bne.w	8006956 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_I2C_Mem_Write+0x34>
 800676a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006776:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0ed      	b.n	8006958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_I2C_Mem_Write+0x4e>
 8006786:	2302      	movs	r3, #2
 8006788:	e0e6      	b.n	8006958 <HAL_I2C_Mem_Write+0x21c>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006792:	f7fb fe4f 	bl	8002434 <HAL_GetTick>
 8006796:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2319      	movs	r3, #25
 800679e:	2201      	movs	r2, #1
 80067a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fac2 	bl	8006d2e <I2C_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0d1      	b.n	8006958 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2221      	movs	r2, #33	; 0x21
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2240      	movs	r2, #64	; 0x40
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067dc:	88f8      	ldrh	r0, [r7, #6]
 80067de:	893a      	ldrh	r2, [r7, #8]
 80067e0:	8979      	ldrh	r1, [r7, #10]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	4603      	mov	r3, r0
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f9d3 	bl	8006b98 <I2C_RequestMemoryWrite>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e0a9      	b.n	8006958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	2bff      	cmp	r3, #255	; 0xff
 800680c:	d90e      	bls.n	800682c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	22ff      	movs	r2, #255	; 0xff
 8006812:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006818:	b2da      	uxtb	r2, r3
 800681a:	8979      	ldrh	r1, [r7, #10]
 800681c:	2300      	movs	r3, #0
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 fc1f 	bl	8007068 <I2C_TransferConfig>
 800682a:	e00f      	b.n	800684c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683a:	b2da      	uxtb	r2, r3
 800683c:	8979      	ldrh	r1, [r7, #10]
 800683e:	2300      	movs	r3, #0
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 fc0e 	bl	8007068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 faac 	bl	8006dae <I2C_WaitOnTXISFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e07b      	b.n	8006958 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	781a      	ldrb	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d034      	beq.n	8006904 <HAL_I2C_Mem_Write+0x1c8>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d130      	bne.n	8006904 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	2200      	movs	r2, #0
 80068aa:	2180      	movs	r1, #128	; 0x80
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fa3e 	bl	8006d2e <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e04d      	b.n	8006958 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2bff      	cmp	r3, #255	; 0xff
 80068c4:	d90e      	bls.n	80068e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	22ff      	movs	r2, #255	; 0xff
 80068ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	8979      	ldrh	r1, [r7, #10]
 80068d4:	2300      	movs	r3, #0
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fbc3 	bl	8007068 <I2C_TransferConfig>
 80068e2:	e00f      	b.n	8006904 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	8979      	ldrh	r1, [r7, #10]
 80068f6:	2300      	movs	r3, #0
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 fbb2 	bl	8007068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d19e      	bne.n	800684c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fa8b 	bl	8006e2e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e01a      	b.n	8006958 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2220      	movs	r2, #32
 8006928:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6859      	ldr	r1, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <HAL_I2C_Mem_Write+0x224>)
 8006936:	400b      	ands	r3, r1
 8006938:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006952:	2300      	movs	r3, #0
 8006954:	e000      	b.n	8006958 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006956:	2302      	movs	r3, #2
  }
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	fe00e800 	.word	0xfe00e800

08006964 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b088      	sub	sp, #32
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	4608      	mov	r0, r1
 800696e:	4611      	mov	r1, r2
 8006970:	461a      	mov	r2, r3
 8006972:	4603      	mov	r3, r0
 8006974:	817b      	strh	r3, [r7, #10]
 8006976:	460b      	mov	r3, r1
 8006978:	813b      	strh	r3, [r7, #8]
 800697a:	4613      	mov	r3, r2
 800697c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b20      	cmp	r3, #32
 8006988:	f040 80fd 	bne.w	8006b86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <HAL_I2C_Mem_Read+0x34>
 8006992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800699e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0f1      	b.n	8006b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_I2C_Mem_Read+0x4e>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e0ea      	b.n	8006b88 <HAL_I2C_Mem_Read+0x224>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80069ba:	f7fb fd3b 	bl	8002434 <HAL_GetTick>
 80069be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	9300      	str	r3, [sp, #0]
 80069c4:	2319      	movs	r3, #25
 80069c6:	2201      	movs	r2, #1
 80069c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f9ae 	bl	8006d2e <I2C_WaitOnFlagUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e0d5      	b.n	8006b88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2222      	movs	r2, #34	; 0x22
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2240      	movs	r2, #64	; 0x40
 80069e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a3a      	ldr	r2, [r7, #32]
 80069f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a04:	88f8      	ldrh	r0, [r7, #6]
 8006a06:	893a      	ldrh	r2, [r7, #8]
 8006a08:	8979      	ldrh	r1, [r7, #10]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	4603      	mov	r3, r0
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f913 	bl	8006c40 <I2C_RequestMemoryRead>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0ad      	b.n	8006b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2bff      	cmp	r3, #255	; 0xff
 8006a34:	d90e      	bls.n	8006a54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	22ff      	movs	r2, #255	; 0xff
 8006a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	8979      	ldrh	r1, [r7, #10]
 8006a44:	4b52      	ldr	r3, [pc, #328]	; (8006b90 <HAL_I2C_Mem_Read+0x22c>)
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 fb0b 	bl	8007068 <I2C_TransferConfig>
 8006a52:	e00f      	b.n	8006a74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	8979      	ldrh	r1, [r7, #10]
 8006a66:	4b4a      	ldr	r3, [pc, #296]	; (8006b90 <HAL_I2C_Mem_Read+0x22c>)
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 fafa 	bl	8007068 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2104      	movs	r1, #4
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 f955 	bl	8006d2e <I2C_WaitOnFlagUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e07c      	b.n	8006b88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d034      	beq.n	8006b34 <HAL_I2C_Mem_Read+0x1d0>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d130      	bne.n	8006b34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2180      	movs	r1, #128	; 0x80
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f926 	bl	8006d2e <I2C_WaitOnFlagUntilTimeout>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e04d      	b.n	8006b88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2bff      	cmp	r3, #255	; 0xff
 8006af4:	d90e      	bls.n	8006b14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	22ff      	movs	r2, #255	; 0xff
 8006afa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	8979      	ldrh	r1, [r7, #10]
 8006b04:	2300      	movs	r3, #0
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 faab 	bl	8007068 <I2C_TransferConfig>
 8006b12:	e00f      	b.n	8006b34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	8979      	ldrh	r1, [r7, #10]
 8006b26:	2300      	movs	r3, #0
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 fa9a 	bl	8007068 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d19a      	bne.n	8006a74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f973 	bl	8006e2e <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e01a      	b.n	8006b88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2220      	movs	r2, #32
 8006b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6859      	ldr	r1, [r3, #4]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_I2C_Mem_Read+0x230>)
 8006b66:	400b      	ands	r3, r1
 8006b68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	e000      	b.n	8006b88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
  }
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	80002400 	.word	0x80002400
 8006b94:	fe00e800 	.word	0xfe00e800

08006b98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	817b      	strh	r3, [r7, #10]
 8006baa:	460b      	mov	r3, r1
 8006bac:	813b      	strh	r3, [r7, #8]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006bb2:	88fb      	ldrh	r3, [r7, #6]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	8979      	ldrh	r1, [r7, #10]
 8006bb8:	4b20      	ldr	r3, [pc, #128]	; (8006c3c <I2C_RequestMemoryWrite+0xa4>)
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 fa51 	bl	8007068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	69b9      	ldr	r1, [r7, #24]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 f8ef 	bl	8006dae <I2C_WaitOnTXISFlagUntilTimeout>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e02c      	b.n	8006c34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d105      	bne.n	8006bec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006be0:	893b      	ldrh	r3, [r7, #8]
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
 8006bea:	e015      	b.n	8006c18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006bec:	893b      	ldrh	r3, [r7, #8]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	69b9      	ldr	r1, [r7, #24]
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 f8d5 	bl	8006dae <I2C_WaitOnTXISFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e012      	b.n	8006c34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c0e:	893b      	ldrh	r3, [r7, #8]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2180      	movs	r1, #128	; 0x80
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 f883 	bl	8006d2e <I2C_WaitOnFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e000      	b.n	8006c34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	80002000 	.word	0x80002000

08006c40 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	4608      	mov	r0, r1
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4603      	mov	r3, r0
 8006c50:	817b      	strh	r3, [r7, #10]
 8006c52:	460b      	mov	r3, r1
 8006c54:	813b      	strh	r3, [r7, #8]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	8979      	ldrh	r1, [r7, #10]
 8006c60:	4b20      	ldr	r3, [pc, #128]	; (8006ce4 <I2C_RequestMemoryRead+0xa4>)
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	2300      	movs	r3, #0
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 f9fe 	bl	8007068 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	69b9      	ldr	r1, [r7, #24]
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f89c 	bl	8006dae <I2C_WaitOnTXISFlagUntilTimeout>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e02c      	b.n	8006cda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c80:	88fb      	ldrh	r3, [r7, #6]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d105      	bne.n	8006c92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c90:	e015      	b.n	8006cbe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c92:	893b      	ldrh	r3, [r7, #8]
 8006c94:	0a1b      	lsrs	r3, r3, #8
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ca0:	69fa      	ldr	r2, [r7, #28]
 8006ca2:	69b9      	ldr	r1, [r7, #24]
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 f882 	bl	8006dae <I2C_WaitOnTXISFlagUntilTimeout>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e012      	b.n	8006cda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cb4:	893b      	ldrh	r3, [r7, #8]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2140      	movs	r1, #64	; 0x40
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f830 	bl	8006d2e <I2C_WaitOnFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	80002000 	.word	0x80002000

08006ce8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d103      	bne.n	8006d06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2200      	movs	r2, #0
 8006d04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d007      	beq.n	8006d24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	619a      	str	r2, [r3, #24]
  }
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bc80      	pop	{r7}
 8006d2c:	4770      	bx	lr

08006d2e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	603b      	str	r3, [r7, #0]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d3e:	e022      	b.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d46:	d01e      	beq.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d48:	f7fb fb74 	bl	8002434 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d302      	bcc.n	8006d5e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d113      	bne.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d62:	f043 0220 	orr.w	r2, r3, #32
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e00f      	b.n	8006da6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699a      	ldr	r2, [r3, #24]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	bf0c      	ite	eq
 8006d96:	2301      	moveq	r3, #1
 8006d98:	2300      	movne	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	79fb      	ldrb	r3, [r7, #7]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d0cd      	beq.n	8006d40 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	60f8      	str	r0, [r7, #12]
 8006db6:	60b9      	str	r1, [r7, #8]
 8006db8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006dba:	e02c      	b.n	8006e16 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	68b9      	ldr	r1, [r7, #8]
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f871 	bl	8006ea8 <I2C_IsErrorOccurred>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e02a      	b.n	8006e26 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dd6:	d01e      	beq.n	8006e16 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd8:	f7fb fb2c 	bl	8002434 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d302      	bcc.n	8006dee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d113      	bne.n	8006e16 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f043 0220 	orr.w	r2, r3, #32
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e007      	b.n	8006e26 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d1cb      	bne.n	8006dbc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	60f8      	str	r0, [r7, #12]
 8006e36:	60b9      	str	r1, [r7, #8]
 8006e38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e3a:	e028      	b.n	8006e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 f831 	bl	8006ea8 <I2C_IsErrorOccurred>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e026      	b.n	8006e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e50:	f7fb faf0 	bl	8002434 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d113      	bne.n	8006e8e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	f043 0220 	orr.w	r2, r3, #32
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e007      	b.n	8006e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d1cf      	bne.n	8006e3c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d068      	beq.n	8006fa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2210      	movs	r2, #16
 8006eda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006edc:	e049      	b.n	8006f72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ee4:	d045      	beq.n	8006f72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ee6:	f7fb faa5 	bl	8002434 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d302      	bcc.n	8006efc <I2C_IsErrorOccurred+0x54>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d13a      	bne.n	8006f72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1e:	d121      	bne.n	8006f64 <I2C_IsErrorOccurred+0xbc>
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f26:	d01d      	beq.n	8006f64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006f28:	7cfb      	ldrb	r3, [r7, #19]
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d01a      	beq.n	8006f64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006f3e:	f7fb fa79 	bl	8002434 <HAL_GetTick>
 8006f42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f44:	e00e      	b.n	8006f64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006f46:	f7fb fa75 	bl	8002434 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b19      	cmp	r3, #25
 8006f52:	d907      	bls.n	8006f64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f043 0320 	orr.w	r3, r3, #32
 8006f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006f62:	e006      	b.n	8006f72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d1e9      	bne.n	8006f46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b20      	cmp	r3, #32
 8006f7e:	d003      	beq.n	8006f88 <I2C_IsErrorOccurred+0xe0>
 8006f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0aa      	beq.n	8006ede <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2220      	movs	r2, #32
 8006f96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	f043 0304 	orr.w	r3, r3, #4
 8006f9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00b      	beq.n	8006ff2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	f043 0308 	orr.w	r3, r3, #8
 8006fe0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d00b      	beq.n	8007014 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	f043 0302 	orr.w	r3, r3, #2
 8007002:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01c      	beq.n	8007056 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f7ff fe63 	bl	8006ce8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6859      	ldr	r1, [r3, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	4b0d      	ldr	r3, [pc, #52]	; (8007064 <I2C_IsErrorOccurred+0x1bc>)
 800702e:	400b      	ands	r3, r1
 8007030:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800705a:	4618      	mov	r0, r3
 800705c:	3728      	adds	r7, #40	; 0x28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	fe00e800 	.word	0xfe00e800

08007068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007068:	b480      	push	{r7}
 800706a:	b087      	sub	sp, #28
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	460b      	mov	r3, r1
 8007074:	817b      	strh	r3, [r7, #10]
 8007076:	4613      	mov	r3, r2
 8007078:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800707a:	897b      	ldrh	r3, [r7, #10]
 800707c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007080:	7a7b      	ldrb	r3, [r7, #9]
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007088:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800708e:	6a3b      	ldr	r3, [r7, #32]
 8007090:	4313      	orrs	r3, r2
 8007092:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007096:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	0d5b      	lsrs	r3, r3, #21
 80070a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80070a6:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <I2C_TransferConfig+0x5c>)
 80070a8:	430b      	orrs	r3, r1
 80070aa:	43db      	mvns	r3, r3
 80070ac:	ea02 0103 	and.w	r1, r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr
 80070c4:	03ff63ff 	.word	0x03ff63ff

080070c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d138      	bne.n	8007150 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e032      	b.n	8007152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2224      	movs	r2, #36	; 0x24
 80070f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0201 	bic.w	r2, r2, #1
 800710a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800711a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6819      	ldr	r1, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	e000      	b.n	8007152 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007150:	2302      	movs	r3, #2
  }
}
 8007152:	4618      	mov	r0, r3
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	bc80      	pop	{r7}
 800715a:	4770      	bx	lr

0800715c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b20      	cmp	r3, #32
 8007170:	d139      	bne.n	80071e6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007178:	2b01      	cmp	r3, #1
 800717a:	d101      	bne.n	8007180 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800717c:	2302      	movs	r3, #2
 800717e:	e033      	b.n	80071e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2224      	movs	r2, #36	; 0x24
 800718c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071ae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0201 	orr.w	r2, r2, #1
 80071d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	e000      	b.n	80071e8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071e6:	2302      	movs	r3, #2
  }
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bc80      	pop	{r7}
 80071f0:	4770      	bx	lr
	...

080071f4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071f8:	4b04      	ldr	r3, [pc, #16]	; (800720c <HAL_PWR_EnableBkUpAccess+0x18>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a03      	ldr	r2, [pc, #12]	; (800720c <HAL_PWR_EnableBkUpAccess+0x18>)
 80071fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007202:	6013      	str	r3, [r2, #0]
}
 8007204:	bf00      	nop
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	58000400 	.word	0x58000400

08007210 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007214:	4b03      	ldr	r3, [pc, #12]	; (8007224 <HAL_PWREx_GetVoltageRange+0x14>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800721c:	4618      	mov	r0, r3
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	58000400 	.word	0x58000400

08007228 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007238:	d101      	bne.n	800723e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800723a:	2301      	movs	r3, #1
 800723c:	e000      	b.n	8007240 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr
 8007248:	58000400 	.word	0x58000400

0800724c <LL_RCC_HSE_EnableTcxo>:
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800725a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800725e:	6013      	str	r3, [r2, #0]
}
 8007260:	bf00      	nop
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <LL_RCC_HSE_DisableTcxo>:
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800726c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800727a:	6013      	str	r3, [r2, #0]
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007296:	d101      	bne.n	800729c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bc80      	pop	{r7}
 80072a4:	4770      	bx	lr

080072a6 <LL_RCC_HSE_Enable>:
{
 80072a6:	b480      	push	{r7}
 80072a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80072aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b8:	6013      	str	r3, [r2, #0]
}
 80072ba:	bf00      	nop
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <LL_RCC_HSE_Disable>:
{
 80072c2:	b480      	push	{r7}
 80072c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80072c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d4:	6013      	str	r3, [r2, #0]
}
 80072d6:	bf00      	nop
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc80      	pop	{r7}
 80072dc:	4770      	bx	lr

080072de <LL_RCC_HSE_IsReady>:
{
 80072de:	b480      	push	{r7}
 80072e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80072e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f0:	d101      	bne.n	80072f6 <LL_RCC_HSE_IsReady+0x18>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <LL_RCC_HSE_IsReady+0x1a>
 80072f6:	2300      	movs	r3, #0
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bc80      	pop	{r7}
 80072fe:	4770      	bx	lr

08007300 <LL_RCC_HSI_Enable>:
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800730e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007312:	6013      	str	r3, [r2, #0]
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <LL_RCC_HSI_Disable>:
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800732a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800732e:	6013      	str	r3, [r2, #0]
}
 8007330:	bf00      	nop
 8007332:	46bd      	mov	sp, r7
 8007334:	bc80      	pop	{r7}
 8007336:	4770      	bx	lr

08007338 <LL_RCC_HSI_IsReady>:
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800733c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734a:	d101      	bne.n	8007350 <LL_RCC_HSI_IsReady+0x18>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <LL_RCC_HSI_IsReady+0x1a>
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	46bd      	mov	sp, r7
 8007356:	bc80      	pop	{r7}
 8007358:	4770      	bx	lr

0800735a <LL_RCC_HSI_SetCalibTrimming>:
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	061b      	lsls	r3, r3, #24
 8007370:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007374:	4313      	orrs	r3, r2
 8007376:	604b      	str	r3, [r1, #4]
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr

08007382 <LL_RCC_LSE_IsReady>:
{
 8007382:	b480      	push	{r7}
 8007384:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800738a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	2b02      	cmp	r3, #2
 8007394:	d101      	bne.n	800739a <LL_RCC_LSE_IsReady+0x18>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <LL_RCC_LSE_IsReady+0x1a>
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr

080073a4 <LL_RCC_LSI_Enable>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80073a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073b4:	f043 0301 	orr.w	r3, r3, #1
 80073b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr

080073c4 <LL_RCC_LSI_Disable>:
{
 80073c4:	b480      	push	{r7}
 80073c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80073c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073d4:	f023 0301 	bic.w	r3, r3, #1
 80073d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80073dc:	bf00      	nop
 80073de:	46bd      	mov	sp, r7
 80073e0:	bc80      	pop	{r7}
 80073e2:	4770      	bx	lr

080073e4 <LL_RCC_LSI_IsReady>:
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80073e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d101      	bne.n	80073fc <LL_RCC_LSI_IsReady+0x18>
 80073f8:	2301      	movs	r3, #1
 80073fa:	e000      	b.n	80073fe <LL_RCC_LSI_IsReady+0x1a>
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr

08007406 <LL_RCC_MSI_Enable>:
{
 8007406:	b480      	push	{r7}
 8007408:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800740a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007414:	f043 0301 	orr.w	r3, r3, #1
 8007418:	6013      	str	r3, [r2, #0]
}
 800741a:	bf00      	nop
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr

08007422 <LL_RCC_MSI_Disable>:
{
 8007422:	b480      	push	{r7}
 8007424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	6013      	str	r3, [r2, #0]
}
 8007436:	bf00      	nop
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr

0800743e <LL_RCC_MSI_IsReady>:
{
 800743e:	b480      	push	{r7}
 8007440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0302 	and.w	r3, r3, #2
 800744c:	2b02      	cmp	r3, #2
 800744e:	d101      	bne.n	8007454 <LL_RCC_MSI_IsReady+0x16>
 8007450:	2301      	movs	r3, #1
 8007452:	e000      	b.n	8007456 <LL_RCC_MSI_IsReady+0x18>
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr

0800745e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800745e:	b480      	push	{r7}
 8007460:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b08      	cmp	r3, #8
 800746e:	d101      	bne.n	8007474 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <LL_RCC_MSI_GetRange>:
{
 800747e:	b480      	push	{r7}
 8007480:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800748c:	4618      	mov	r0, r3
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr

08007494 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800749c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bc80      	pop	{r7}
 80074aa:	4770      	bx	lr

080074ac <LL_RCC_MSI_SetCalibTrimming>:
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80074b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	021b      	lsls	r3, r3, #8
 80074c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074c6:	4313      	orrs	r3, r2
 80074c8:	604b      	str	r3, [r1, #4]
}
 80074ca:	bf00      	nop
 80074cc:	370c      	adds	r7, #12
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bc80      	pop	{r7}
 80074d2:	4770      	bx	lr

080074d4 <LL_RCC_SetSysClkSource>:
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80074dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 0203 	bic.w	r2, r3, #3
 80074e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	608b      	str	r3, [r1, #8]
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr

080074fa <LL_RCC_GetSysClkSource>:
{
 80074fa:	b480      	push	{r7}
 80074fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 030c 	and.w	r3, r3, #12
}
 8007508:	4618      	mov	r0, r3
 800750a:	46bd      	mov	sp, r7
 800750c:	bc80      	pop	{r7}
 800750e:	4770      	bx	lr

08007510 <LL_RCC_SetAHBPrescaler>:
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4313      	orrs	r3, r2
 800752a:	608b      	str	r3, [r1, #8]
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	bc80      	pop	{r7}
 8007534:	4770      	bx	lr

08007536 <LL_RCC_SetAHB3Prescaler>:
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800753e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007542:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007546:	f023 020f 	bic.w	r2, r3, #15
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	091b      	lsrs	r3, r3, #4
 800754e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007552:	4313      	orrs	r3, r2
 8007554:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr

08007562 <LL_RCC_SetAPB1Prescaler>:
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800756a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4313      	orrs	r3, r2
 800757c:	608b      	str	r3, [r1, #8]
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	bc80      	pop	{r7}
 8007586:	4770      	bx	lr

08007588 <LL_RCC_SetAPB2Prescaler>:
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800759a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	608b      	str	r3, [r1, #8]
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr

080075ae <LL_RCC_GetAHBPrescaler>:
{
 80075ae:	b480      	push	{r7}
 80075b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80075b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <LL_RCC_GetAHB3Prescaler>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80075d0:	011b      	lsls	r3, r3, #4
 80075d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <LL_RCC_GetAPB1Prescaler>:
{
 80075de:	b480      	push	{r7}
 80075e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80075e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bc80      	pop	{r7}
 80075f2:	4770      	bx	lr

080075f4 <LL_RCC_GetAPB2Prescaler>:
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80075f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007602:	4618      	mov	r0, r3
 8007604:	46bd      	mov	sp, r7
 8007606:	bc80      	pop	{r7}
 8007608:	4770      	bx	lr

0800760a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800760a:	b480      	push	{r7}
 800760c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800760e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007618:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800761c:	6013      	str	r3, [r2, #0]
}
 800761e:	bf00      	nop
 8007620:	46bd      	mov	sp, r7
 8007622:	bc80      	pop	{r7}
 8007624:	4770      	bx	lr

08007626 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007626:	b480      	push	{r7}
 8007628:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800762a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007638:	6013      	str	r3, [r2, #0]
}
 800763a:	bf00      	nop
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr

08007642 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007642:	b480      	push	{r7}
 8007644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007654:	d101      	bne.n	800765a <LL_RCC_PLL_IsReady+0x18>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <LL_RCC_PLL_IsReady+0x1a>
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	46bd      	mov	sp, r7
 8007660:	bc80      	pop	{r7}
 8007662:	4770      	bx	lr

08007664 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007674:	4618      	mov	r0, r3
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800768a:	4618      	mov	r0, r3
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr

08007692 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007692:	b480      	push	{r7}
 8007694:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bc80      	pop	{r7}
 80076a6:	4770      	bx	lr

080076a8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80076ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0303 	and.w	r3, r3, #3
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr

080076be <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80076be:	b480      	push	{r7}
 80076c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80076c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d101      	bne.n	80076d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	bc80      	pop	{r7}
 80076de:	4770      	bx	lr

080076e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80076e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80076ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f4:	d101      	bne.n	80076fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr

08007704 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007712:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007716:	d101      	bne.n	800771c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800771c:	2300      	movs	r3, #0
}
 800771e:	4618      	mov	r0, r3
 8007720:	46bd      	mov	sp, r7
 8007722:	bc80      	pop	{r7}
 8007724:	4770      	bx	lr

08007726 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007726:	b480      	push	{r7}
 8007728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800772a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007734:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007738:	d101      	bne.n	800773e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr

08007748 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e36f      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800775a:	f7ff fece 	bl	80074fa <LL_RCC_GetSysClkSource>
 800775e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007760:	f7ff ffa2 	bl	80076a8 <LL_RCC_PLL_GetMainSource>
 8007764:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80c4 	beq.w	80078fc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d005      	beq.n	8007786 <HAL_RCC_OscConfig+0x3e>
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	2b0c      	cmp	r3, #12
 800777e:	d176      	bne.n	800786e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d173      	bne.n	800786e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e353      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0308 	and.w	r3, r3, #8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <HAL_RCC_OscConfig+0x68>
 80077a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077ae:	e006      	b.n	80077be <HAL_RCC_OscConfig+0x76>
 80077b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b8:	091b      	lsrs	r3, r3, #4
 80077ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077be:	4293      	cmp	r3, r2
 80077c0:	d222      	bcs.n	8007808 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fd3c 	bl	8008244 <RCC_SetFlashLatencyFromMSIRange>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e331      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077e0:	f043 0308 	orr.w	r3, r3, #8
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077f8:	4313      	orrs	r3, r2
 80077fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	4618      	mov	r0, r3
 8007802:	f7ff fe53 	bl	80074ac <LL_RCC_MSI_SetCalibTrimming>
 8007806:	e021      	b.n	800784c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007812:	f043 0308 	orr.w	r3, r3, #8
 8007816:	6013      	str	r3, [r2, #0]
 8007818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800782a:	4313      	orrs	r3, r2
 800782c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff fe3a 	bl	80074ac <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fd01 	bl	8008244 <RCC_SetFlashLatencyFromMSIRange>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e2f6      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800784c:	f000 fcc2 	bl	80081d4 <HAL_RCC_GetHCLKFreq>
 8007850:	4603      	mov	r3, r0
 8007852:	4aa7      	ldr	r2, [pc, #668]	; (8007af0 <HAL_RCC_OscConfig+0x3a8>)
 8007854:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8007856:	4ba7      	ldr	r3, [pc, #668]	; (8007af4 <HAL_RCC_OscConfig+0x3ac>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f7fa fde0 	bl	8002420 <HAL_InitTick>
 8007860:	4603      	mov	r3, r0
 8007862:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007864:	7cfb      	ldrb	r3, [r7, #19]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d047      	beq.n	80078fa <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800786a:	7cfb      	ldrb	r3, [r7, #19]
 800786c:	e2e5      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d02c      	beq.n	80078d0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007876:	f7ff fdc6 	bl	8007406 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800787a:	f7fa fddb 	bl	8002434 <HAL_GetTick>
 800787e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007880:	e008      	b.n	8007894 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007882:	f7fa fdd7 	bl	8002434 <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e2d2      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007894:	f7ff fdd3 	bl	800743e <LL_RCC_MSI_IsReady>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0f1      	beq.n	8007882 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800789e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80078a8:	f043 0308 	orr.w	r3, r3, #8
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078c0:	4313      	orrs	r3, r2
 80078c2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7ff fdef 	bl	80074ac <LL_RCC_MSI_SetCalibTrimming>
 80078ce:	e015      	b.n	80078fc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80078d0:	f7ff fda7 	bl	8007422 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80078d4:	f7fa fdae 	bl	8002434 <HAL_GetTick>
 80078d8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80078da:	e008      	b.n	80078ee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078dc:	f7fa fdaa 	bl	8002434 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e2a5      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80078ee:	f7ff fda6 	bl	800743e <LL_RCC_MSI_IsReady>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1f1      	bne.n	80078dc <HAL_RCC_OscConfig+0x194>
 80078f8:	e000      	b.n	80078fc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80078fa:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	d058      	beq.n	80079ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b08      	cmp	r3, #8
 800790c:	d005      	beq.n	800791a <HAL_RCC_OscConfig+0x1d2>
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	2b0c      	cmp	r3, #12
 8007912:	d108      	bne.n	8007926 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b03      	cmp	r3, #3
 8007918:	d105      	bne.n	8007926 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d14b      	bne.n	80079ba <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e289      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8007926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007938:	4313      	orrs	r3, r2
 800793a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007944:	d102      	bne.n	800794c <HAL_RCC_OscConfig+0x204>
 8007946:	f7ff fcae 	bl	80072a6 <LL_RCC_HSE_Enable>
 800794a:	e00d      	b.n	8007968 <HAL_RCC_OscConfig+0x220>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007954:	d104      	bne.n	8007960 <HAL_RCC_OscConfig+0x218>
 8007956:	f7ff fc79 	bl	800724c <LL_RCC_HSE_EnableTcxo>
 800795a:	f7ff fca4 	bl	80072a6 <LL_RCC_HSE_Enable>
 800795e:	e003      	b.n	8007968 <HAL_RCC_OscConfig+0x220>
 8007960:	f7ff fcaf 	bl	80072c2 <LL_RCC_HSE_Disable>
 8007964:	f7ff fc80 	bl	8007268 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d012      	beq.n	8007996 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007970:	f7fa fd60 	bl	8002434 <HAL_GetTick>
 8007974:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007976:	e008      	b.n	800798a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007978:	f7fa fd5c 	bl	8002434 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b64      	cmp	r3, #100	; 0x64
 8007984:	d901      	bls.n	800798a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	e257      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800798a:	f7ff fca8 	bl	80072de <LL_RCC_HSE_IsReady>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0f1      	beq.n	8007978 <HAL_RCC_OscConfig+0x230>
 8007994:	e011      	b.n	80079ba <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007996:	f7fa fd4d 	bl	8002434 <HAL_GetTick>
 800799a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800799c:	e008      	b.n	80079b0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800799e:	f7fa fd49 	bl	8002434 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b64      	cmp	r3, #100	; 0x64
 80079aa:	d901      	bls.n	80079b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e244      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80079b0:	f7ff fc95 	bl	80072de <LL_RCC_HSE_IsReady>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1f1      	bne.n	800799e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d046      	beq.n	8007a54 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	2b04      	cmp	r3, #4
 80079ca:	d005      	beq.n	80079d8 <HAL_RCC_OscConfig+0x290>
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	2b0c      	cmp	r3, #12
 80079d0:	d10e      	bne.n	80079f0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d10b      	bne.n	80079f0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e22a      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff fcb6 	bl	800735a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80079ee:	e031      	b.n	8007a54 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d019      	beq.n	8007a2c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079f8:	f7ff fc82 	bl	8007300 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fc:	f7fa fd1a 	bl	8002434 <HAL_GetTick>
 8007a00:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a04:	f7fa fd16 	bl	8002434 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e211      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007a16:	f7ff fc8f 	bl	8007338 <LL_RCC_HSI_IsReady>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d0f1      	beq.n	8007a04 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff fc98 	bl	800735a <LL_RCC_HSI_SetCalibTrimming>
 8007a2a:	e013      	b.n	8007a54 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a2c:	f7ff fc76 	bl	800731c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fa fd00 	bl	8002434 <HAL_GetTick>
 8007a34:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007a36:	e008      	b.n	8007a4a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a38:	f7fa fcfc 	bl	8002434 <HAL_GetTick>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d901      	bls.n	8007a4a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e1f7      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007a4a:	f7ff fc75 	bl	8007338 <LL_RCC_HSI_IsReady>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1f1      	bne.n	8007a38 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d06e      	beq.n	8007b3e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d056      	beq.n	8007b16 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8007a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a70:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	69da      	ldr	r2, [r3, #28]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d031      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f003 0302 	and.w	r3, r3, #2
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d006      	beq.n	8007a98 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e1d0      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d013      	beq.n	8007aca <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8007aa2:	f7ff fc8f 	bl	80073c4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007aa6:	f7fa fcc5 	bl	8002434 <HAL_GetTick>
 8007aaa:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aae:	f7fa fcc1 	bl	8002434 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b11      	cmp	r3, #17
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e1bc      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8007ac0:	f7ff fc90 	bl	80073e4 <LL_RCC_LSI_IsReady>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1f1      	bne.n	8007aae <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ad2:	f023 0210 	bic.w	r2, r3, #16
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ae4:	f7ff fc5e 	bl	80073a4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae8:	f7fa fca4 	bl	8002434 <HAL_GetTick>
 8007aec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007aee:	e00c      	b.n	8007b0a <HAL_RCC_OscConfig+0x3c2>
 8007af0:	20000000 	.word	0x20000000
 8007af4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007af8:	f7fa fc9c 	bl	8002434 <HAL_GetTick>
 8007afc:	4602      	mov	r2, r0
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	2b11      	cmp	r3, #17
 8007b04:	d901      	bls.n	8007b0a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8007b06:	2303      	movs	r3, #3
 8007b08:	e197      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8007b0a:	f7ff fc6b 	bl	80073e4 <LL_RCC_LSI_IsReady>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0f1      	beq.n	8007af8 <HAL_RCC_OscConfig+0x3b0>
 8007b14:	e013      	b.n	8007b3e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b16:	f7ff fc55 	bl	80073c4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b1a:	f7fa fc8b 	bl	8002434 <HAL_GetTick>
 8007b1e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007b20:	e008      	b.n	8007b34 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b22:	f7fa fc87 	bl	8002434 <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b11      	cmp	r3, #17
 8007b2e:	d901      	bls.n	8007b34 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e182      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007b34:	f7ff fc56 	bl	80073e4 <LL_RCC_LSI_IsReady>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f1      	bne.n	8007b22 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 80d8 	beq.w	8007cfc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007b4c:	f7ff fb6c 	bl	8007228 <LL_PWR_IsEnabledBkUpAccess>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d113      	bne.n	8007b7e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007b56:	f7ff fb4d 	bl	80071f4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b5a:	f7fa fc6b 	bl	8002434 <HAL_GetTick>
 8007b5e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007b60:	e008      	b.n	8007b74 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b62:	f7fa fc67 	bl	8002434 <HAL_GetTick>
 8007b66:	4602      	mov	r2, r0
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d901      	bls.n	8007b74 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e162      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007b74:	f7ff fb58 	bl	8007228 <LL_PWR_IsEnabledBkUpAccess>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f1      	beq.n	8007b62 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d07b      	beq.n	8007c7e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	2b85      	cmp	r3, #133	; 0x85
 8007b8c:	d003      	beq.n	8007b96 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2b05      	cmp	r3, #5
 8007b94:	d109      	bne.n	8007baa <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ba2:	f043 0304 	orr.w	r3, r3, #4
 8007ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007baa:	f7fa fc43 	bl	8002434 <HAL_GetTick>
 8007bae:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bbc:	f043 0301 	orr.w	r3, r3, #1
 8007bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007bc4:	e00a      	b.n	8007bdc <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bc6:	f7fa fc35 	bl	8002434 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e12e      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007bdc:	f7ff fbd1 	bl	8007382 <LL_RCC_LSE_IsReady>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0ef      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	2b81      	cmp	r3, #129	; 0x81
 8007bec:	d003      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	2b85      	cmp	r3, #133	; 0x85
 8007bf4:	d121      	bne.n	8007c3a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bf6:	f7fa fc1d 	bl	8002434 <HAL_GetTick>
 8007bfa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c10:	e00a      	b.n	8007c28 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c12:	f7fa fc0f 	bl	8002434 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e108      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0ec      	beq.n	8007c12 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007c38:	e060      	b.n	8007cfc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3a:	f7fa fbfb 	bl	8002434 <HAL_GetTick>
 8007c3e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007c54:	e00a      	b.n	8007c6c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c56:	f7fa fbed 	bl	8002434 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d901      	bls.n	8007c6c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e0e6      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1ec      	bne.n	8007c56 <HAL_RCC_OscConfig+0x50e>
 8007c7c:	e03e      	b.n	8007cfc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c7e:	f7fa fbd9 	bl	8002434 <HAL_GetTick>
 8007c82:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007c98:	e00a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c9a:	f7fa fbcb 	bl	8002434 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d901      	bls.n	8007cb0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e0c4      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1ec      	bne.n	8007c9a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cc0:	f7fa fbb8 	bl	8002434 <HAL_GetTick>
 8007cc4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cd2:	f023 0301 	bic.w	r3, r3, #1
 8007cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007cda:	e00a      	b.n	8007cf2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cdc:	f7fa fbaa 	bl	8002434 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e0a3      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007cf2:	f7ff fb46 	bl	8007382 <LL_RCC_LSE_IsReady>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1ef      	bne.n	8007cdc <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8099 	beq.w	8007e38 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d06c      	beq.n	8007de6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d14b      	bne.n	8007dac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d14:	f7ff fc87 	bl	8007626 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d18:	f7fa fb8c 	bl	8002434 <HAL_GetTick>
 8007d1c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d20:	f7fa fb88 	bl	8002434 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b0a      	cmp	r3, #10
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e083      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007d32:	f7ff fc86 	bl	8007642 <LL_RCC_PLL_IsReady>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1f1      	bne.n	8007d20 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	4b40      	ldr	r3, [pc, #256]	; (8007e44 <HAL_RCC_OscConfig+0x6fc>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d4e:	4311      	orrs	r1, r2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d54:	0212      	lsls	r2, r2, #8
 8007d56:	4311      	orrs	r1, r2
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d5c:	4311      	orrs	r1, r2
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007d62:	4311      	orrs	r1, r2
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d72:	f7ff fc4a 	bl	800760a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d84:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d86:	f7fa fb55 	bl	8002434 <HAL_GetTick>
 8007d8a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8007d8c:	e008      	b.n	8007da0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d8e:	f7fa fb51 	bl	8002434 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b0a      	cmp	r3, #10
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e04c      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8007da0:	f7ff fc4f 	bl	8007642 <LL_RCC_PLL_IsReady>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0f1      	beq.n	8007d8e <HAL_RCC_OscConfig+0x646>
 8007daa:	e045      	b.n	8007e38 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dac:	f7ff fc3b 	bl	8007626 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db0:	f7fa fb40 	bl	8002434 <HAL_GetTick>
 8007db4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8007db6:	e008      	b.n	8007dca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007db8:	f7fa fb3c 	bl	8002434 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b0a      	cmp	r3, #10
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e037      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007dca:	f7ff fc3a 	bl	8007642 <LL_RCC_PLL_IsReady>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f1      	bne.n	8007db8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007dde:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <HAL_RCC_OscConfig+0x700>)
 8007de0:	4013      	ands	r3, r2
 8007de2:	60cb      	str	r3, [r1, #12]
 8007de4:	e028      	b.n	8007e38 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e023      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	f003 0203 	and.w	r2, r3, #3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d115      	bne.n	8007e34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d10e      	bne.n	8007e34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	021b      	lsls	r3, r3, #8
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d106      	bne.n	8007e34 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d001      	beq.n	8007e38 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e000      	b.n	8007e3a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3720      	adds	r7, #32
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	11c1808c 	.word	0x11c1808c
 8007e48:	eefefffc 	.word	0xeefefffc

08007e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e10f      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e60:	4b89      	ldr	r3, [pc, #548]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d91b      	bls.n	8007ea6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6e:	4b86      	ldr	r3, [pc, #536]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f023 0207 	bic.w	r2, r3, #7
 8007e76:	4984      	ldr	r1, [pc, #528]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e7e:	f7fa fad9 	bl	8002434 <HAL_GetTick>
 8007e82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e84:	e008      	b.n	8007e98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007e86:	f7fa fad5 	bl	8002434 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e0f3      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e98:	4b7b      	ldr	r3, [pc, #492]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d1ef      	bne.n	8007e86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d016      	beq.n	8007ee0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7ff fb2a 	bl	8007510 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ebc:	f7fa faba 	bl	8002434 <HAL_GetTick>
 8007ec0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007ec2:	e008      	b.n	8007ed6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007ec4:	f7fa fab6 	bl	8002434 <HAL_GetTick>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d901      	bls.n	8007ed6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e0d4      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007ed6:	f7ff fbf2 	bl	80076be <LL_RCC_IsActiveFlag_HPRE>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0f1      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d016      	beq.n	8007f1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7ff fb20 	bl	8007536 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007ef6:	f7fa fa9d 	bl	8002434 <HAL_GetTick>
 8007efa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007efc:	e008      	b.n	8007f10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007efe:	f7fa fa99 	bl	8002434 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	d901      	bls.n	8007f10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e0b7      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007f10:	f7ff fbe6 	bl	80076e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f1      	beq.n	8007efe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff fb19 	bl	8007562 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f30:	f7fa fa80 	bl	8002434 <HAL_GetTick>
 8007f34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007f36:	e008      	b.n	8007f4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007f38:	f7fa fa7c 	bl	8002434 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e09a      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007f4a:	f7ff fbdb 	bl	8007704 <LL_RCC_IsActiveFlag_PPRE1>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0f1      	beq.n	8007f38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d017      	beq.n	8007f90 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff fb0e 	bl	8007588 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007f6c:	f7fa fa62 	bl	8002434 <HAL_GetTick>
 8007f70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007f74:	f7fa fa5e 	bl	8002434 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e07c      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007f86:	f7ff fbce 	bl	8007726 <LL_RCC_IsActiveFlag_PPRE2>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0f1      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0301 	and.w	r3, r3, #1
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d043      	beq.n	8008024 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b02      	cmp	r3, #2
 8007fa2:	d106      	bne.n	8007fb2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007fa4:	f7ff f99b 	bl	80072de <LL_RCC_HSE_IsReady>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d11e      	bne.n	8007fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e066      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b03      	cmp	r3, #3
 8007fb8:	d106      	bne.n	8007fc8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007fba:	f7ff fb42 	bl	8007642 <LL_RCC_PLL_IsReady>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d113      	bne.n	8007fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e05b      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d106      	bne.n	8007fde <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007fd0:	f7ff fa35 	bl	800743e <LL_RCC_MSI_IsReady>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d108      	bne.n	8007fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e050      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007fde:	f7ff f9ab 	bl	8007338 <LL_RCC_HSI_IsReady>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e049      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff fa6f 	bl	80074d4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ff6:	f7fa fa1d 	bl	8002434 <HAL_GetTick>
 8007ffa:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ffc:	e00a      	b.n	8008014 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ffe:	f7fa fa19 	bl	8002434 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	f241 3288 	movw	r2, #5000	; 0x1388
 800800c:	4293      	cmp	r3, r2
 800800e:	d901      	bls.n	8008014 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e035      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008014:	f7ff fa71 	bl	80074fa <LL_RCC_GetSysClkSource>
 8008018:	4602      	mov	r2, r0
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	429a      	cmp	r2, r3
 8008022:	d1ec      	bne.n	8007ffe <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008024:	4b18      	ldr	r3, [pc, #96]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d21b      	bcs.n	800806a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f023 0207 	bic.w	r2, r3, #7
 800803a:	4913      	ldr	r1, [pc, #76]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	4313      	orrs	r3, r2
 8008040:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008042:	f7fa f9f7 	bl	8002434 <HAL_GetTick>
 8008046:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008048:	e008      	b.n	800805c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800804a:	f7fa f9f3 	bl	8002434 <HAL_GetTick>
 800804e:	4602      	mov	r2, r0
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	1ad3      	subs	r3, r2, r3
 8008054:	2b02      	cmp	r3, #2
 8008056:	d901      	bls.n	800805c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e011      	b.n	8008080 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <HAL_RCC_ClockConfig+0x23c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 0307 	and.w	r3, r3, #7
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d1ef      	bne.n	800804a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800806a:	f000 f8b3 	bl	80081d4 <HAL_RCC_GetHCLKFreq>
 800806e:	4603      	mov	r3, r0
 8008070:	4a06      	ldr	r2, [pc, #24]	; (800808c <HAL_RCC_ClockConfig+0x240>)
 8008072:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8008074:	4b06      	ldr	r3, [pc, #24]	; (8008090 <HAL_RCC_ClockConfig+0x244>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4618      	mov	r0, r3
 800807a:	f7fa f9d1 	bl	8002420 <HAL_InitTick>
 800807e:	4603      	mov	r3, r0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	58004000 	.word	0x58004000
 800808c:	20000000 	.word	0x20000000
 8008090:	20000004 	.word	0x20000004

08008094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008094:	b590      	push	{r4, r7, lr}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a2:	f7ff fa2a 	bl	80074fa <LL_RCC_GetSysClkSource>
 80080a6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080a8:	f7ff fafe 	bl	80076a8 <LL_RCC_PLL_GetMainSource>
 80080ac:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <HAL_RCC_GetSysClockFreq+0x2c>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b0c      	cmp	r3, #12
 80080b8:	d139      	bne.n	800812e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d136      	bne.n	800812e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80080c0:	f7ff f9cd 	bl	800745e <LL_RCC_MSI_IsEnabledRangeSelect>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d115      	bne.n	80080f6 <HAL_RCC_GetSysClockFreq+0x62>
 80080ca:	f7ff f9c8 	bl	800745e <LL_RCC_MSI_IsEnabledRangeSelect>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d106      	bne.n	80080e2 <HAL_RCC_GetSysClockFreq+0x4e>
 80080d4:	f7ff f9d3 	bl	800747e <LL_RCC_MSI_GetRange>
 80080d8:	4603      	mov	r3, r0
 80080da:	0a1b      	lsrs	r3, r3, #8
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	e005      	b.n	80080ee <HAL_RCC_GetSysClockFreq+0x5a>
 80080e2:	f7ff f9d7 	bl	8007494 <LL_RCC_MSI_GetRangeAfterStandby>
 80080e6:	4603      	mov	r3, r0
 80080e8:	0a1b      	lsrs	r3, r3, #8
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	4a36      	ldr	r2, [pc, #216]	; (80081c8 <HAL_RCC_GetSysClockFreq+0x134>)
 80080f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f4:	e014      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x8c>
 80080f6:	f7ff f9b2 	bl	800745e <LL_RCC_MSI_IsEnabledRangeSelect>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d106      	bne.n	800810e <HAL_RCC_GetSysClockFreq+0x7a>
 8008100:	f7ff f9bd 	bl	800747e <LL_RCC_MSI_GetRange>
 8008104:	4603      	mov	r3, r0
 8008106:	091b      	lsrs	r3, r3, #4
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	e005      	b.n	800811a <HAL_RCC_GetSysClockFreq+0x86>
 800810e:	f7ff f9c1 	bl	8007494 <LL_RCC_MSI_GetRangeAfterStandby>
 8008112:	4603      	mov	r3, r0
 8008114:	091b      	lsrs	r3, r3, #4
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	4a2b      	ldr	r2, [pc, #172]	; (80081c8 <HAL_RCC_GetSysClockFreq+0x134>)
 800811c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008120:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d115      	bne.n	8008154 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800812c:	e012      	b.n	8008154 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	2b04      	cmp	r3, #4
 8008132:	d102      	bne.n	800813a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008134:	4b25      	ldr	r3, [pc, #148]	; (80081cc <HAL_RCC_GetSysClockFreq+0x138>)
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e00c      	b.n	8008154 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b08      	cmp	r3, #8
 800813e:	d109      	bne.n	8008154 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008140:	f7ff f8a0 	bl	8007284 <LL_RCC_HSE_IsEnabledDiv2>
 8008144:	4603      	mov	r3, r0
 8008146:	2b01      	cmp	r3, #1
 8008148:	d102      	bne.n	8008150 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800814a:	4b20      	ldr	r3, [pc, #128]	; (80081cc <HAL_RCC_GetSysClockFreq+0x138>)
 800814c:	617b      	str	r3, [r7, #20]
 800814e:	e001      	b.n	8008154 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008150:	4b1f      	ldr	r3, [pc, #124]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008152:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008154:	f7ff f9d1 	bl	80074fa <LL_RCC_GetSysClkSource>
 8008158:	4603      	mov	r3, r0
 800815a:	2b0c      	cmp	r3, #12
 800815c:	d12f      	bne.n	80081be <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800815e:	f7ff faa3 	bl	80076a8 <LL_RCC_PLL_GetMainSource>
 8008162:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d003      	beq.n	8008172 <HAL_RCC_GetSysClockFreq+0xde>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b03      	cmp	r3, #3
 800816e:	d003      	beq.n	8008178 <HAL_RCC_GetSysClockFreq+0xe4>
 8008170:	e00d      	b.n	800818e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <HAL_RCC_GetSysClockFreq+0x138>)
 8008174:	60fb      	str	r3, [r7, #12]
        break;
 8008176:	e00d      	b.n	8008194 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008178:	f7ff f884 	bl	8007284 <LL_RCC_HSE_IsEnabledDiv2>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d102      	bne.n	8008188 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008182:	4b12      	ldr	r3, [pc, #72]	; (80081cc <HAL_RCC_GetSysClockFreq+0x138>)
 8008184:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008186:	e005      	b.n	8008194 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008188:	4b11      	ldr	r3, [pc, #68]	; (80081d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800818a:	60fb      	str	r3, [r7, #12]
        break;
 800818c:	e002      	b.n	8008194 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	60fb      	str	r3, [r7, #12]
        break;
 8008192:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008194:	f7ff fa66 	bl	8007664 <LL_RCC_PLL_GetN>
 8008198:	4602      	mov	r2, r0
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	fb03 f402 	mul.w	r4, r3, r2
 80081a0:	f7ff fa77 	bl	8007692 <LL_RCC_PLL_GetDivider>
 80081a4:	4603      	mov	r3, r0
 80081a6:	091b      	lsrs	r3, r3, #4
 80081a8:	3301      	adds	r3, #1
 80081aa:	fbb4 f4f3 	udiv	r4, r4, r3
 80081ae:	f7ff fa65 	bl	800767c <LL_RCC_PLL_GetR>
 80081b2:	4603      	mov	r3, r0
 80081b4:	0f5b      	lsrs	r3, r3, #29
 80081b6:	3301      	adds	r3, #1
 80081b8:	fbb4 f3f3 	udiv	r3, r4, r3
 80081bc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80081be:	697b      	ldr	r3, [r7, #20]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd90      	pop	{r4, r7, pc}
 80081c8:	0801e974 	.word	0x0801e974
 80081cc:	00f42400 	.word	0x00f42400
 80081d0:	01e84800 	.word	0x01e84800

080081d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081d4:	b598      	push	{r3, r4, r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80081d8:	f7ff ff5c 	bl	8008094 <HAL_RCC_GetSysClockFreq>
 80081dc:	4604      	mov	r4, r0
 80081de:	f7ff f9e6 	bl	80075ae <LL_RCC_GetAHBPrescaler>
 80081e2:	4603      	mov	r3, r0
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	4a03      	ldr	r2, [pc, #12]	; (80081f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80081ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	bd98      	pop	{r3, r4, r7, pc}
 80081f8:	0801e914 	.word	0x0801e914

080081fc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081fc:	b598      	push	{r3, r4, r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008200:	f7ff ffe8 	bl	80081d4 <HAL_RCC_GetHCLKFreq>
 8008204:	4604      	mov	r4, r0
 8008206:	f7ff f9ea 	bl	80075de <LL_RCC_GetAPB1Prescaler>
 800820a:	4603      	mov	r3, r0
 800820c:	0a1b      	lsrs	r3, r3, #8
 800820e:	4a03      	ldr	r2, [pc, #12]	; (800821c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008214:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008218:	4618      	mov	r0, r3
 800821a:	bd98      	pop	{r3, r4, r7, pc}
 800821c:	0801e954 	.word	0x0801e954

08008220 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008220:	b598      	push	{r3, r4, r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008224:	f7ff ffd6 	bl	80081d4 <HAL_RCC_GetHCLKFreq>
 8008228:	4604      	mov	r4, r0
 800822a:	f7ff f9e3 	bl	80075f4 <LL_RCC_GetAPB2Prescaler>
 800822e:	4603      	mov	r3, r0
 8008230:	0adb      	lsrs	r3, r3, #11
 8008232:	4a03      	ldr	r2, [pc, #12]	; (8008240 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008238:	fa24 f303 	lsr.w	r3, r4, r3
}
 800823c:	4618      	mov	r0, r3
 800823e:	bd98      	pop	{r3, r4, r7, pc}
 8008240:	0801e954 	.word	0x0801e954

08008244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008244:	b590      	push	{r4, r7, lr}
 8008246:	b085      	sub	sp, #20
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	091b      	lsrs	r3, r3, #4
 8008250:	f003 030f 	and.w	r3, r3, #15
 8008254:	4a10      	ldr	r2, [pc, #64]	; (8008298 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8008256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800825a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800825c:	f7ff f9b2 	bl	80075c4 <LL_RCC_GetAHB3Prescaler>
 8008260:	4603      	mov	r3, r0
 8008262:	091b      	lsrs	r3, r3, #4
 8008264:	f003 030f 	and.w	r3, r3, #15
 8008268:	4a0c      	ldr	r2, [pc, #48]	; (800829c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800826a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	fbb2 f3f3 	udiv	r3, r2, r3
 8008274:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800827a:	fba2 2303 	umull	r2, r3, r2, r3
 800827e:	0c9c      	lsrs	r4, r3, #18
 8008280:	f7fe ffc6 	bl	8007210 <HAL_PWREx_GetVoltageRange>
 8008284:	4603      	mov	r3, r0
 8008286:	4619      	mov	r1, r3
 8008288:	4620      	mov	r0, r4
 800828a:	f000 f80b 	bl	80082a4 <RCC_SetFlashLatency>
 800828e:	4603      	mov	r3, r0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	bd90      	pop	{r4, r7, pc}
 8008298:	0801e974 	.word	0x0801e974
 800829c:	0801e914 	.word	0x0801e914
 80082a0:	431bde83 	.word	0x431bde83

080082a4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08e      	sub	sp, #56	; 0x38
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80082ae:	4a3a      	ldr	r2, [pc, #232]	; (8008398 <RCC_SetFlashLatency+0xf4>)
 80082b0:	f107 0320 	add.w	r3, r7, #32
 80082b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082b8:	6018      	str	r0, [r3, #0]
 80082ba:	3304      	adds	r3, #4
 80082bc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80082be:	4a37      	ldr	r2, [pc, #220]	; (800839c <RCC_SetFlashLatency+0xf8>)
 80082c0:	f107 0318 	add.w	r3, r7, #24
 80082c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082c8:	6018      	str	r0, [r3, #0]
 80082ca:	3304      	adds	r3, #4
 80082cc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80082ce:	4a34      	ldr	r2, [pc, #208]	; (80083a0 <RCC_SetFlashLatency+0xfc>)
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80082d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80082da:	2300      	movs	r3, #0
 80082dc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082e4:	d11b      	bne.n	800831e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	633b      	str	r3, [r7, #48]	; 0x30
 80082ea:	e014      	b.n	8008316 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	3338      	adds	r3, #56	; 0x38
 80082f2:	443b      	add	r3, r7
 80082f4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80082f8:	461a      	mov	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d807      	bhi.n	8008310 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	3338      	adds	r3, #56	; 0x38
 8008306:	443b      	add	r3, r7
 8008308:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800830e:	e021      	b.n	8008354 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	3301      	adds	r3, #1
 8008314:	633b      	str	r3, [r7, #48]	; 0x30
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	2b02      	cmp	r3, #2
 800831a:	d9e7      	bls.n	80082ec <RCC_SetFlashLatency+0x48>
 800831c:	e01a      	b.n	8008354 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800831e:	2300      	movs	r3, #0
 8008320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008322:	e014      	b.n	800834e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	3338      	adds	r3, #56	; 0x38
 800832a:	443b      	add	r3, r7
 800832c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008330:	461a      	mov	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4293      	cmp	r3, r2
 8008336:	d807      	bhi.n	8008348 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	3338      	adds	r3, #56	; 0x38
 800833e:	443b      	add	r3, r7
 8008340:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008344:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008346:	e005      	b.n	8008354 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	3301      	adds	r3, #1
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	2b02      	cmp	r3, #2
 8008352:	d9e7      	bls.n	8008324 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008354:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <RCC_SetFlashLatency+0x100>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f023 0207 	bic.w	r2, r3, #7
 800835c:	4911      	ldr	r1, [pc, #68]	; (80083a4 <RCC_SetFlashLatency+0x100>)
 800835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008360:	4313      	orrs	r3, r2
 8008362:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008364:	f7fa f866 	bl	8002434 <HAL_GetTick>
 8008368:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800836a:	e008      	b.n	800837e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800836c:	f7fa f862 	bl	8002434 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	d901      	bls.n	800837e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e007      	b.n	800838e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800837e:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <RCC_SetFlashLatency+0x100>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008388:	429a      	cmp	r2, r3
 800838a:	d1ef      	bne.n	800836c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3738      	adds	r7, #56	; 0x38
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	0801e0a0 	.word	0x0801e0a0
 800839c:	0801e0a8 	.word	0x0801e0a8
 80083a0:	0801e0b0 	.word	0x0801e0b0
 80083a4:	58004000 	.word	0x58004000

080083a8 <LL_RCC_LSE_IsReady>:
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80083ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b02      	cmp	r3, #2
 80083ba:	d101      	bne.n	80083c0 <LL_RCC_LSE_IsReady+0x18>
 80083bc:	2301      	movs	r3, #1
 80083be:	e000      	b.n	80083c2 <LL_RCC_LSE_IsReady+0x1a>
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr

080083ca <LL_RCC_SetUSARTClockSource>:
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80083d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	0c1b      	lsrs	r3, r3, #16
 80083de:	43db      	mvns	r3, r3
 80083e0:	401a      	ands	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr

080083fa <LL_RCC_SetI2SClockSource>:
{
 80083fa:	b480      	push	{r7}
 80083fc:	b083      	sub	sp, #12
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800840e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4313      	orrs	r3, r2
 8008416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800841a:	bf00      	nop
 800841c:	370c      	adds	r7, #12
 800841e:	46bd      	mov	sp, r7
 8008420:	bc80      	pop	{r7}
 8008422:	4770      	bx	lr

08008424 <LL_RCC_SetLPUARTClockSource>:
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800842c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008434:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008438:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008444:	bf00      	nop
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr

0800844e <LL_RCC_SetI2CClockSource>:
{
 800844e:	b480      	push	{r7}
 8008450:	b083      	sub	sp, #12
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800845a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	091b      	lsrs	r3, r3, #4
 8008462:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008466:	43db      	mvns	r3, r3
 8008468:	401a      	ands	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008476:	4313      	orrs	r3, r2
 8008478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	bc80      	pop	{r7}
 8008484:	4770      	bx	lr

08008486 <LL_RCC_SetLPTIMClockSource>:
{
 8008486:	b480      	push	{r7}
 8008488:	b083      	sub	sp, #12
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800848e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008492:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	0c1b      	lsrs	r3, r3, #16
 800849a:	041b      	lsls	r3, r3, #16
 800849c:	43db      	mvns	r3, r3
 800849e:	401a      	ands	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	041b      	lsls	r3, r3, #16
 80084a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084a8:	4313      	orrs	r3, r2
 80084aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bc80      	pop	{r7}
 80084b6:	4770      	bx	lr

080084b8 <LL_RCC_SetRNGClockSource>:
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80084c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80084cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	bc80      	pop	{r7}
 80084e0:	4770      	bx	lr

080084e2 <LL_RCC_SetADCClockSource>:
{
 80084e2:	b480      	push	{r7}
 80084e4:	b083      	sub	sp, #12
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80084ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	bc80      	pop	{r7}
 800850a:	4770      	bx	lr

0800850c <LL_RCC_SetRTCClockSource>:
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4313      	orrs	r3, r2
 8008528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr

08008536 <LL_RCC_GetRTCClockSource>:
{
 8008536:	b480      	push	{r7}
 8008538:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800853a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800853e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008542:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008546:	4618      	mov	r0, r3
 8008548:	46bd      	mov	sp, r7
 800854a:	bc80      	pop	{r7}
 800854c:	4770      	bx	lr

0800854e <LL_RCC_ForceBackupDomainReset>:
{
 800854e:	b480      	push	{r7}
 8008550:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800855e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008562:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008566:	bf00      	nop
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <LL_RCC_ReleaseBackupDomainReset>:
{
 800856e:	b480      	push	{r7}
 8008570:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800857e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008586:	bf00      	nop
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
	...

08008590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8008598:	2300      	movs	r3, #0
 800859a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800859c:	2300      	movs	r3, #0
 800859e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80085a0:	2300      	movs	r3, #0
 80085a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d058      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80085b0:	f7fe fe20 	bl	80071f4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085b4:	f7f9 ff3e 	bl	8002434 <HAL_GetTick>
 80085b8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80085ba:	e009      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085bc:	f7f9 ff3a 	bl	8002434 <HAL_GetTick>
 80085c0:	4602      	mov	r2, r0
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d902      	bls.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	74fb      	strb	r3, [r7, #19]
        break;
 80085ce:	e006      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80085d0:	4b7b      	ldr	r3, [pc, #492]	; (80087c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085dc:	d1ee      	bne.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80085de:	7cfb      	ldrb	r3, [r7, #19]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d13c      	bne.n	800865e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80085e4:	f7ff ffa7 	bl	8008536 <LL_RCC_GetRTCClockSource>
 80085e8:	4602      	mov	r2, r0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d00f      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80085f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008600:	f7ff ffa5 	bl	800854e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008604:	f7ff ffb3 	bl	800856e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008608:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f003 0302 	and.w	r3, r3, #2
 8008618:	2b00      	cmp	r3, #0
 800861a:	d014      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800861c:	f7f9 ff0a 	bl	8002434 <HAL_GetTick>
 8008620:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008622:	e00b      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008624:	f7f9 ff06 	bl	8002434 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008632:	4293      	cmp	r3, r2
 8008634:	d902      	bls.n	800863c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	74fb      	strb	r3, [r7, #19]
            break;
 800863a:	e004      	b.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800863c:	f7ff feb4 	bl	80083a8 <LL_RCC_LSE_IsReady>
 8008640:	4603      	mov	r3, r0
 8008642:	2b01      	cmp	r3, #1
 8008644:	d1ee      	bne.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8008646:	7cfb      	ldrb	r3, [r7, #19]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d105      	bne.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008650:	4618      	mov	r0, r3
 8008652:	f7ff ff5b 	bl	800850c <LL_RCC_SetRTCClockSource>
 8008656:	e004      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008658:	7cfb      	ldrb	r3, [r7, #19]
 800865a:	74bb      	strb	r3, [r7, #18]
 800865c:	e001      	b.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800865e:	7cfb      	ldrb	r3, [r7, #19]
 8008660:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff fea9 	bl	80083ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0302 	and.w	r3, r3, #2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff fe9e 	bl	80083ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff fec0 	bl	8008424 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fee6 	bl	8008486 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7ff fedb 	bl	8008486 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d004      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7ff fed0 	bl	8008486 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d004      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fea9 	bl	800844e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	4618      	mov	r0, r3
 800870e:	f7ff fe9e 	bl	800844e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800871a:	2b00      	cmp	r3, #0
 800871c:	d004      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff fe93 	bl	800844e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b00      	cmp	r3, #0
 8008732:	d011      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	4618      	mov	r0, r3
 800873a:	f7ff fe5e 	bl	80083fa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008746:	d107      	bne.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008756:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d010      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fea5 	bl	80084b8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	2b00      	cmp	r3, #0
 8008774:	d107      	bne.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008784:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d011      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff fea3 	bl	80084e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087a4:	d107      	bne.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80087a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087b4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80087b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	58000400 	.word	0x58000400

080087c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d071      	beq.n	80088ba <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d106      	bne.n	80087f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7f9 fbb2 	bl	8001f54 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80087f8:	4b32      	ldr	r3, [pc, #200]	; (80088c4 <HAL_RTC_Init+0x100>)
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b10      	cmp	r3, #16
 8008802:	d051      	beq.n	80088a8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008804:	4b2f      	ldr	r3, [pc, #188]	; (80088c4 <HAL_RTC_Init+0x100>)
 8008806:	22ca      	movs	r2, #202	; 0xca
 8008808:	625a      	str	r2, [r3, #36]	; 0x24
 800880a:	4b2e      	ldr	r3, [pc, #184]	; (80088c4 <HAL_RTC_Init+0x100>)
 800880c:	2253      	movs	r2, #83	; 0x53
 800880e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fa11 	bl	8008c38 <RTC_EnterInitMode>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d13f      	bne.n	80088a0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008820:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <HAL_RTC_Init+0x100>)
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	4a27      	ldr	r2, [pc, #156]	; (80088c4 <HAL_RTC_Init+0x100>)
 8008826:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800882a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800882e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008830:	4b24      	ldr	r3, [pc, #144]	; (80088c4 <HAL_RTC_Init+0x100>)
 8008832:	699a      	ldr	r2, [r3, #24]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6859      	ldr	r1, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	4319      	orrs	r1, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	430b      	orrs	r3, r1
 8008844:	491f      	ldr	r1, [pc, #124]	; (80088c4 <HAL_RTC_Init+0x100>)
 8008846:	4313      	orrs	r3, r2
 8008848:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	041b      	lsls	r3, r3, #16
 8008854:	491b      	ldr	r1, [pc, #108]	; (80088c4 <HAL_RTC_Init+0x100>)
 8008856:	4313      	orrs	r3, r2
 8008858:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800885a:	4b1a      	ldr	r3, [pc, #104]	; (80088c4 <HAL_RTC_Init+0x100>)
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800886a:	430b      	orrs	r3, r1
 800886c:	4915      	ldr	r1, [pc, #84]	; (80088c4 <HAL_RTC_Init+0x100>)
 800886e:	4313      	orrs	r3, r2
 8008870:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa14 	bl	8008ca0 <RTC_ExitInitMode>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800887c:	7bfb      	ldrb	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10e      	bne.n	80088a0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8008882:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <HAL_RTC_Init+0x100>)
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a19      	ldr	r1, [r3, #32]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69db      	ldr	r3, [r3, #28]
 8008892:	4319      	orrs	r1, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	695b      	ldr	r3, [r3, #20]
 8008898:	430b      	orrs	r3, r1
 800889a:	490a      	ldr	r1, [pc, #40]	; (80088c4 <HAL_RTC_Init+0x100>)
 800889c:	4313      	orrs	r3, r2
 800889e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a0:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <HAL_RTC_Init+0x100>)
 80088a2:	22ff      	movs	r2, #255	; 0xff
 80088a4:	625a      	str	r2, [r3, #36]	; 0x24
 80088a6:	e001      	b.n	80088ac <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d103      	bne.n	80088ba <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	40002800 	.word	0x40002800

080088c8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80088c8:	b590      	push	{r4, r7, lr}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <HAL_RTC_SetAlarm_IT+0x1e>
 80088e2:	2302      	movs	r3, #2
 80088e4:	e0f3      	b.n	8008ace <HAL_RTC_SetAlarm_IT+0x206>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2202      	movs	r2, #2
 80088f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80088f6:	4b78      	ldr	r3, [pc, #480]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088fe:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008906:	d06a      	beq.n	80089de <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d13a      	bne.n	8008984 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800890e:	4b72      	ldr	r3, [pc, #456]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d102      	bne.n	8008920 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2200      	movs	r2, #0
 800891e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	695b      	ldr	r3, [r3, #20]
 8008924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f9f5 	bl	8008d1c <RTC_ByteToBcd2>
 8008932:	4603      	mov	r3, r0
 8008934:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	785b      	ldrb	r3, [r3, #1]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f9ee 	bl	8008d1c <RTC_ByteToBcd2>
 8008940:	4603      	mov	r3, r0
 8008942:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008944:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	789b      	ldrb	r3, [r3, #2]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 f9e6 	bl	8008d1c <RTC_ByteToBcd2>
 8008950:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008952:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	78db      	ldrb	r3, [r3, #3]
 800895a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800895c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008966:	4618      	mov	r0, r3
 8008968:	f000 f9d8 	bl	8008d1c <RTC_ByteToBcd2>
 800896c:	4603      	mov	r3, r0
 800896e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008970:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008978:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800897e:	4313      	orrs	r3, r2
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e02c      	b.n	80089de <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800898c:	d00d      	beq.n	80089aa <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008996:	d008      	beq.n	80089aa <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008998:	4b4f      	ldr	r3, [pc, #316]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d102      	bne.n	80089aa <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2200      	movs	r2, #0
 80089a8:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80089b6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80089bc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	78db      	ldrb	r3, [r3, #3]
 80089c2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80089c4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089cc:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80089ce:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80089d4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80089da:	4313      	orrs	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089de:	4b3e      	ldr	r3, [pc, #248]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 80089e0:	22ca      	movs	r2, #202	; 0xca
 80089e2:	625a      	str	r2, [r3, #36]	; 0x24
 80089e4:	4b3c      	ldr	r3, [pc, #240]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 80089e6:	2253      	movs	r2, #83	; 0x53
 80089e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f2:	d12c      	bne.n	8008a4e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80089f4:	4b38      	ldr	r3, [pc, #224]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	4a37      	ldr	r2, [pc, #220]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 80089fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80089fe:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008a00:	4b35      	ldr	r3, [pc, #212]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a02:	2201      	movs	r2, #1
 8008a04:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0c:	d107      	bne.n	8008a1e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	4930      	ldr	r1, [pc, #192]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	644b      	str	r3, [r1, #68]	; 0x44
 8008a1c:	e006      	b.n	8008a2c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8008a1e:	4a2e      	ldr	r2, [pc, #184]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8008a24:	4a2c      	ldr	r2, [pc, #176]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8008a2c:	4a2a      	ldr	r2, [pc, #168]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	f043 0201 	orr.w	r2, r3, #1
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008a40:	4b25      	ldr	r3, [pc, #148]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	4a24      	ldr	r2, [pc, #144]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a46:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8008a4a:	6193      	str	r3, [r2, #24]
 8008a4c:	e02b      	b.n	8008aa6 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008a4e:	4b22      	ldr	r3, [pc, #136]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	4a21      	ldr	r2, [pc, #132]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a54:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008a58:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008a5a:	4b1f      	ldr	r3, [pc, #124]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a5c:	2202      	movs	r2, #2
 8008a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a66:	d107      	bne.n	8008a78 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	699a      	ldr	r2, [r3, #24]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	69db      	ldr	r3, [r3, #28]
 8008a70:	4919      	ldr	r1, [pc, #100]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a72:	4313      	orrs	r3, r2
 8008a74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a76:	e006      	b.n	8008a86 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8008a78:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8008a7e:	4a16      	ldr	r2, [pc, #88]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8008a86:	4a14      	ldr	r2, [pc, #80]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a92:	f043 0202 	orr.w	r2, r3, #2
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008a9a:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	4a0e      	ldr	r2, [pc, #56]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008aa0:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8008aa4:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	; (8008adc <HAL_RTC_SetAlarm_IT+0x214>)
 8008aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aac:	4a0b      	ldr	r2, [pc, #44]	; (8008adc <HAL_RTC_SetAlarm_IT+0x214>)
 8008aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ab2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab6:	4b08      	ldr	r3, [pc, #32]	; (8008ad8 <HAL_RTC_SetAlarm_IT+0x210>)
 8008ab8:	22ff      	movs	r2, #255	; 0xff
 8008aba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd90      	pop	{r4, r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	40002800 	.word	0x40002800
 8008adc:	58000800 	.word	0x58000800

08008ae0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_RTC_DeactivateAlarm+0x18>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e048      	b.n	8008b8a <HAL_RTC_DeactivateAlarm+0xaa>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b08:	4b22      	ldr	r3, [pc, #136]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b0a:	22ca      	movs	r2, #202	; 0xca
 8008b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b0e:	4b21      	ldr	r3, [pc, #132]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b10:	2253      	movs	r2, #83	; 0x53
 8008b12:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b1a:	d115      	bne.n	8008b48 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8008b1c:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	4a1c      	ldr	r2, [pc, #112]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008b26:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8008b28:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b2c:	4a19      	ldr	r2, [pc, #100]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b32:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b38:	f023 0201 	bic.w	r2, r3, #1
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008b40:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b42:	2201      	movs	r2, #1
 8008b44:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b46:	e014      	b.n	8008b72 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8008b48:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	4a11      	ldr	r2, [pc, #68]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b4e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8008b52:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8008b54:	4b0f      	ldr	r3, [pc, #60]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b58:	4a0e      	ldr	r2, [pc, #56]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b5e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	f023 0202 	bic.w	r2, r3, #2
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008b6c:	4b09      	ldr	r3, [pc, #36]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b6e:	2202      	movs	r2, #2
 8008b70:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b72:	4b08      	ldr	r3, [pc, #32]	; (8008b94 <HAL_RTC_DeactivateAlarm+0xb4>)
 8008b74:	22ff      	movs	r2, #255	; 0xff
 8008b76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr
 8008b94:	40002800 	.word	0x40002800

08008b98 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8008ba0:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008ba2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	4013      	ands	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f003 0301 	and.w	r3, r3, #1
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d005      	beq.n	8008bc2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8008bb6:	4b0c      	ldr	r3, [pc, #48]	; (8008be8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008bb8:	2201      	movs	r2, #1
 8008bba:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7f9 fe64 	bl	800288a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8008bcc:	4b06      	ldr	r3, [pc, #24]	; (8008be8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8008bce:	2202      	movs	r2, #2
 8008bd0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f94a 	bl	8008e6c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008be0:	bf00      	nop
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	40002800 	.word	0x40002800

08008bec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <HAL_RTC_WaitForSynchro+0x48>)
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	4a0e      	ldr	r2, [pc, #56]	; (8008c34 <HAL_RTC_WaitForSynchro+0x48>)
 8008bfa:	f023 0320 	bic.w	r3, r3, #32
 8008bfe:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8008c00:	f7f9 fc18 	bl	8002434 <HAL_GetTick>
 8008c04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c06:	e009      	b.n	8008c1c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c08:	f7f9 fc14 	bl	8002434 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c16:	d901      	bls.n	8008c1c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e006      	b.n	8008c2a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <HAL_RTC_WaitForSynchro+0x48>)
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	f003 0320 	and.w	r3, r3, #32
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0ef      	beq.n	8008c08 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	40002800 	.word	0x40002800

08008c38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008c44:	4b15      	ldr	r3, [pc, #84]	; (8008c9c <RTC_EnterInitMode+0x64>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d120      	bne.n	8008c92 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008c50:	4b12      	ldr	r3, [pc, #72]	; (8008c9c <RTC_EnterInitMode+0x64>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <RTC_EnterInitMode+0x64>)
 8008c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c5a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008c5c:	f7f9 fbea 	bl	8002434 <HAL_GetTick>
 8008c60:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008c62:	e00d      	b.n	8008c80 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008c64:	f7f9 fbe6 	bl	8002434 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c72:	d905      	bls.n	8008c80 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2203      	movs	r2, #3
 8008c7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008c80:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <RTC_EnterInitMode+0x64>)
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d102      	bne.n	8008c92 <RTC_EnterInitMode+0x5a>
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	d1e8      	bne.n	8008c64 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	40002800 	.word	0x40002800

08008ca0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008cac:	4b1a      	ldr	r3, [pc, #104]	; (8008d18 <RTC_ExitInitMode+0x78>)
 8008cae:	68db      	ldr	r3, [r3, #12]
 8008cb0:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <RTC_ExitInitMode+0x78>)
 8008cb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cb6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008cb8:	4b17      	ldr	r3, [pc, #92]	; (8008d18 <RTC_ExitInitMode+0x78>)
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10c      	bne.n	8008cde <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff ff91 	bl	8008bec <HAL_RTC_WaitForSynchro>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01e      	beq.n	8008d0e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	73fb      	strb	r3, [r7, #15]
 8008cdc:	e017      	b.n	8008d0e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008cde:	4b0e      	ldr	r3, [pc, #56]	; (8008d18 <RTC_ExitInitMode+0x78>)
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	4a0d      	ldr	r2, [pc, #52]	; (8008d18 <RTC_ExitInitMode+0x78>)
 8008ce4:	f023 0320 	bic.w	r3, r3, #32
 8008ce8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7ff ff7e 	bl	8008bec <HAL_RTC_WaitForSynchro>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d005      	beq.n	8008d02 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008d02:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <RTC_ExitInitMode+0x78>)
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <RTC_ExitInitMode+0x78>)
 8008d08:	f043 0320 	orr.w	r3, r3, #32
 8008d0c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	40002800 	.word	0x40002800

08008d1c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8008d2e:	e005      	b.n	8008d3c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3301      	adds	r3, #1
 8008d34:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008d36:	7afb      	ldrb	r3, [r7, #11]
 8008d38:	3b0a      	subs	r3, #10
 8008d3a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008d3c:	7afb      	ldrb	r3, [r7, #11]
 8008d3e:	2b09      	cmp	r3, #9
 8008d40:	d8f6      	bhi.n	8008d30 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	011b      	lsls	r3, r3, #4
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	b2db      	uxtb	r3, r3
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr
	...

08008d5c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d101      	bne.n	8008d72 <HAL_RTCEx_EnableBypassShadow+0x16>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e01f      	b.n	8008db2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d82:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008d84:	22ca      	movs	r2, #202	; 0xca
 8008d86:	625a      	str	r2, [r3, #36]	; 0x24
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008d8a:	2253      	movs	r2, #83	; 0x53
 8008d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008d8e:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008d94:	f043 0320 	orr.w	r3, r3, #32
 8008d98:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d9a:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <HAL_RTCEx_EnableBypassShadow+0x60>)
 8008d9c:	22ff      	movs	r2, #255	; 0xff
 8008d9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008db0:	2300      	movs	r3, #0
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	370c      	adds	r7, #12
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bc80      	pop	{r7}
 8008dba:	4770      	bx	lr
 8008dbc:	40002800 	.word	0x40002800

08008dc0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d101      	bne.n	8008dd6 <HAL_RTCEx_SetSSRU_IT+0x16>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e027      	b.n	8008e26 <HAL_RTCEx_SetSSRU_IT+0x66>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2202      	movs	r2, #2
 8008de2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008de6:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008de8:	22ca      	movs	r2, #202	; 0xca
 8008dea:	625a      	str	r2, [r3, #36]	; 0x24
 8008dec:	4b10      	ldr	r3, [pc, #64]	; (8008e30 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008dee:	2253      	movs	r2, #83	; 0x53
 8008df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8008df2:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	4a0e      	ldr	r2, [pc, #56]	; (8008e30 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8008dfe:	4b0d      	ldr	r3, [pc, #52]	; (8008e34 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e04:	4a0b      	ldr	r2, [pc, #44]	; (8008e34 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8008e06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e0a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e0e:	4b08      	ldr	r3, [pc, #32]	; (8008e30 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8008e10:	22ff      	movs	r2, #255	; 0xff
 8008e12:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bc80      	pop	{r7}
 8008e2e:	4770      	bx	lr
 8008e30:	40002800 	.word	0x40002800
 8008e34:	58000800 	.word	0x58000800

08008e38 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8008e40:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d005      	beq.n	8008e58 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8008e4e:	2240      	movs	r2, #64	; 0x40
 8008e50:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7f9 fd23 	bl	800289e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	40002800 	.word	0x40002800

08008e6c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008e74:	bf00      	nop
 8008e76:	370c      	adds	r7, #12
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr
	...

08008e80 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008e8c:	4b07      	ldr	r3, [pc, #28]	; (8008eac <HAL_RTCEx_BKUPWrite+0x2c>)
 8008e8e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	4413      	add	r3, r2
 8008e98:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	601a      	str	r2, [r3, #0]
}
 8008ea0:	bf00      	nop
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bc80      	pop	{r7}
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	4000b100 	.word	0x4000b100

08008eb0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <HAL_RTCEx_BKUPRead+0x28>)
 8008ebc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	4000b100 	.word	0x4000b100

08008edc <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8008ee4:	4b06      	ldr	r3, [pc, #24]	; (8008f00 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008eec:	4904      	ldr	r1, [pc, #16]	; (8008f00 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	608b      	str	r3, [r1, #8]
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bc80      	pop	{r7}
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	58000400 	.word	0x58000400

08008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008f08:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f0e:	4a04      	ldr	r2, [pc, #16]	; (8008f20 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008f18:	bf00      	nop
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bc80      	pop	{r7}
 8008f1e:	4770      	bx	lr
 8008f20:	58000400 	.word	0x58000400

08008f24 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8008f24:	b480      	push	{r7}
 8008f26:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008f28:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f2e:	4a04      	ldr	r2, [pc, #16]	; (8008f40 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008f30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008f38:	bf00      	nop
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bc80      	pop	{r7}
 8008f3e:	4770      	bx	lr
 8008f40:	58000400 	.word	0x58000400

08008f44 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008f48:	4b03      	ldr	r3, [pc, #12]	; (8008f58 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f4e:	619a      	str	r2, [r3, #24]
}
 8008f50:	bf00      	nop
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bc80      	pop	{r7}
 8008f56:	4770      	bx	lr
 8008f58:	58000400 	.word	0x58000400

08008f5c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008f60:	4b06      	ldr	r3, [pc, #24]	; (8008f7c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8008f62:	695b      	ldr	r3, [r3, #20]
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d101      	bne.n	8008f70 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bc80      	pop	{r7}
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	58000400 	.word	0x58000400

08008f80 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8008f84:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d101      	bne.n	8008f94 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	58000400 	.word	0x58000400

08008fa4 <LL_RCC_RF_DisableReset>:
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8008fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008fbc:	bf00      	nop
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <LL_RCC_IsRFUnderReset>:
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8008fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fd8:	d101      	bne.n	8008fde <LL_RCC_IsRFUnderReset+0x1a>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <LL_RCC_IsRFUnderReset+0x1c>
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bc80      	pop	{r7}
 8008fe6:	4770      	bx	lr

08008fe8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008ff0:	4b06      	ldr	r3, [pc, #24]	; (800900c <LL_EXTI_EnableIT_32_63+0x24>)
 8008ff2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008ff6:	4905      	ldr	r1, [pc, #20]	; (800900c <LL_EXTI_EnableIT_32_63+0x24>)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	58000800 	.word	0x58000800

08009010 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	73fb      	strb	r3, [r7, #15]
    return status;
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	e052      	b.n	80090cc <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	799b      	ldrb	r3, [r3, #6]
 800902e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d002      	beq.n	800903c <HAL_SUBGHZ_Init+0x2c>
 8009036:	7bbb      	ldrb	r3, [r7, #14]
 8009038:	2b03      	cmp	r3, #3
 800903a:	d109      	bne.n	8009050 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7f9 f854 	bl	80020f0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009048:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800904c:	f7ff ffcc 	bl	8008fe8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d126      	bne.n	80090a4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2202      	movs	r2, #2
 800905a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800905c:	f7ff ffa2 	bl	8008fa4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009060:	4b1c      	ldr	r3, [pc, #112]	; (80090d4 <HAL_SUBGHZ_Init+0xc4>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	4613      	mov	r3, r2
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	0cdb      	lsrs	r3, r3, #19
 800906e:	2264      	movs	r2, #100	; 0x64
 8009070:	fb02 f303 	mul.w	r3, r2, r3
 8009074:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d105      	bne.n	8009088 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	609a      	str	r2, [r3, #8]
        break;
 8009086:	e007      	b.n	8009098 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	3b01      	subs	r3, #1
 800908c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800908e:	f7ff ff99 	bl	8008fc4 <LL_RCC_IsRFUnderReset>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1ee      	bne.n	8009076 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009098:	f7ff ff34 	bl	8008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800909c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80090a0:	f7ff ff1c 	bl	8008edc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80090a4:	f7ff ff4e 	bl	8008f44 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10a      	bne.n	80090c4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f000 faac 	bl	8009610 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	719a      	strb	r2, [r3, #6]

  return status;
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	20000000 	.word	0x20000000

080090d8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	461a      	mov	r2, r3
 80090e4:	460b      	mov	r3, r1
 80090e6:	817b      	strh	r3, [r7, #10]
 80090e8:	4613      	mov	r3, r2
 80090ea:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	799b      	ldrb	r3, [r3, #6]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d14a      	bne.n	800918c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	795b      	ldrb	r3, [r3, #5]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80090fe:	2302      	movs	r3, #2
 8009100:	e045      	b.n	800918e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2201      	movs	r2, #1
 8009106:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2202      	movs	r2, #2
 800910c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 fb4c 	bl	80097ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009114:	f7ff ff06 	bl	8008f24 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009118:	210d      	movs	r1, #13
 800911a:	68f8      	ldr	r0, [r7, #12]
 800911c:	f000 fa98 	bl	8009650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009120:	897b      	ldrh	r3, [r7, #10]
 8009122:	0a1b      	lsrs	r3, r3, #8
 8009124:	b29b      	uxth	r3, r3
 8009126:	b2db      	uxtb	r3, r3
 8009128:	4619      	mov	r1, r3
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fa90 	bl	8009650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009130:	897b      	ldrh	r3, [r7, #10]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	4619      	mov	r1, r3
 8009136:	68f8      	ldr	r0, [r7, #12]
 8009138:	f000 fa8a 	bl	8009650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800913c:	2300      	movs	r3, #0
 800913e:	82bb      	strh	r3, [r7, #20]
 8009140:	e00a      	b.n	8009158 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009142:	8abb      	ldrh	r3, [r7, #20]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4413      	add	r3, r2
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	4619      	mov	r1, r3
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 fa7f 	bl	8009650 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009152:	8abb      	ldrh	r3, [r7, #20]
 8009154:	3301      	adds	r3, #1
 8009156:	82bb      	strh	r3, [r7, #20]
 8009158:	8aba      	ldrh	r2, [r7, #20]
 800915a:	893b      	ldrh	r3, [r7, #8]
 800915c:	429a      	cmp	r2, r3
 800915e:	d3f0      	bcc.n	8009142 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009160:	f7ff fed0 	bl	8008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 fb45 	bl	80097f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	75fb      	strb	r3, [r7, #23]
 8009176:	e001      	b.n	800917c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009178:	2300      	movs	r3, #0
 800917a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2201      	movs	r2, #1
 8009180:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	715a      	strb	r2, [r3, #5]

    return status;
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	e000      	b.n	800918e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800918c:	2302      	movs	r3, #2
  }
}
 800918e:	4618      	mov	r0, r3
 8009190:	3718      	adds	r7, #24
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b088      	sub	sp, #32
 800919a:	af00      	add	r7, sp, #0
 800919c:	60f8      	str	r0, [r7, #12]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	461a      	mov	r2, r3
 80091a2:	460b      	mov	r3, r1
 80091a4:	817b      	strh	r3, [r7, #10]
 80091a6:	4613      	mov	r3, r2
 80091a8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	799b      	ldrb	r3, [r3, #6]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d14a      	bne.n	800924e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	795b      	ldrb	r3, [r3, #5]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d101      	bne.n	80091c4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80091c0:	2302      	movs	r3, #2
 80091c2:	e045      	b.n	8009250 <HAL_SUBGHZ_ReadRegisters+0xba>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2201      	movs	r2, #1
 80091c8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 faee 	bl	80097ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80091d0:	f7ff fea8 	bl	8008f24 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80091d4:	211d      	movs	r1, #29
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 fa3a 	bl	8009650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80091dc:	897b      	ldrh	r3, [r7, #10]
 80091de:	0a1b      	lsrs	r3, r3, #8
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	b2db      	uxtb	r3, r3
 80091e4:	4619      	mov	r1, r3
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 fa32 	bl	8009650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80091ec:	897b      	ldrh	r3, [r7, #10]
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	4619      	mov	r1, r3
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 fa2c 	bl	8009650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80091f8:	2100      	movs	r1, #0
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f000 fa28 	bl	8009650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009200:	2300      	movs	r3, #0
 8009202:	82fb      	strh	r3, [r7, #22]
 8009204:	e009      	b.n	800921a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009206:	69b9      	ldr	r1, [r7, #24]
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 fa77 	bl	80096fc <SUBGHZSPI_Receive>
      pData++;
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	3301      	adds	r3, #1
 8009212:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009214:	8afb      	ldrh	r3, [r7, #22]
 8009216:	3301      	adds	r3, #1
 8009218:	82fb      	strh	r3, [r7, #22]
 800921a:	8afa      	ldrh	r2, [r7, #22]
 800921c:	893b      	ldrh	r3, [r7, #8]
 800921e:	429a      	cmp	r2, r3
 8009220:	d3f1      	bcc.n	8009206 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009222:	f7ff fe6f 	bl	8008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 fae4 	bl	80097f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	77fb      	strb	r3, [r7, #31]
 8009238:	e001      	b.n	800923e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2201      	movs	r2, #1
 8009242:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2200      	movs	r2, #0
 8009248:	715a      	strb	r2, [r3, #5]

    return status;
 800924a:	7ffb      	ldrb	r3, [r7, #31]
 800924c:	e000      	b.n	8009250 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800924e:	2302      	movs	r3, #2
  }
}
 8009250:	4618      	mov	r0, r3
 8009252:	3720      	adds	r7, #32
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	607a      	str	r2, [r7, #4]
 8009262:	461a      	mov	r2, r3
 8009264:	460b      	mov	r3, r1
 8009266:	72fb      	strb	r3, [r7, #11]
 8009268:	4613      	mov	r3, r2
 800926a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	799b      	ldrb	r3, [r3, #6]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	d14a      	bne.n	800930c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	795b      	ldrb	r3, [r3, #5]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800927e:	2302      	movs	r3, #2
 8009280:	e045      	b.n	800930e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2201      	movs	r2, #1
 8009286:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 fa8f 	bl	80097ac <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800928e:	7afb      	ldrb	r3, [r7, #11]
 8009290:	2b84      	cmp	r3, #132	; 0x84
 8009292:	d002      	beq.n	800929a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	2b94      	cmp	r3, #148	; 0x94
 8009298:	d103      	bne.n	80092a2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2201      	movs	r2, #1
 800929e:	711a      	strb	r2, [r3, #4]
 80092a0:	e002      	b.n	80092a8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80092a8:	f7ff fe3c 	bl	8008f24 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80092ac:	7afb      	ldrb	r3, [r7, #11]
 80092ae:	4619      	mov	r1, r3
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 f9cd 	bl	8009650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80092b6:	2300      	movs	r3, #0
 80092b8:	82bb      	strh	r3, [r7, #20]
 80092ba:	e00a      	b.n	80092d2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80092bc:	8abb      	ldrh	r3, [r7, #20]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	4413      	add	r3, r2
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	4619      	mov	r1, r3
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 f9c2 	bl	8009650 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80092cc:	8abb      	ldrh	r3, [r7, #20]
 80092ce:	3301      	adds	r3, #1
 80092d0:	82bb      	strh	r3, [r7, #20]
 80092d2:	8aba      	ldrh	r2, [r7, #20]
 80092d4:	893b      	ldrh	r3, [r7, #8]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d3f0      	bcc.n	80092bc <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80092da:	f7ff fe13 	bl	8008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	2b84      	cmp	r3, #132	; 0x84
 80092e2:	d002      	beq.n	80092ea <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fa85 	bl	80097f4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	75fb      	strb	r3, [r7, #23]
 80092f6:	e001      	b.n	80092fc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2201      	movs	r2, #1
 8009300:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	715a      	strb	r2, [r3, #5]

    return status;
 8009308:	7dfb      	ldrb	r3, [r7, #23]
 800930a:	e000      	b.n	800930e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800930c:	2302      	movs	r3, #2
  }
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b088      	sub	sp, #32
 800931a:	af00      	add	r7, sp, #0
 800931c:	60f8      	str	r0, [r7, #12]
 800931e:	607a      	str	r2, [r7, #4]
 8009320:	461a      	mov	r2, r3
 8009322:	460b      	mov	r3, r1
 8009324:	72fb      	strb	r3, [r7, #11]
 8009326:	4613      	mov	r3, r2
 8009328:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	799b      	ldrb	r3, [r3, #6]
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b01      	cmp	r3, #1
 8009336:	d13d      	bne.n	80093b4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	795b      	ldrb	r3, [r3, #5]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009340:	2302      	movs	r3, #2
 8009342:	e038      	b.n	80093b6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fa2e 	bl	80097ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009350:	f7ff fde8 	bl	8008f24 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	4619      	mov	r1, r3
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 f979 	bl	8009650 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800935e:	2100      	movs	r1, #0
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f975 	bl	8009650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009366:	2300      	movs	r3, #0
 8009368:	82fb      	strh	r3, [r7, #22]
 800936a:	e009      	b.n	8009380 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800936c:	69b9      	ldr	r1, [r7, #24]
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f9c4 	bl	80096fc <SUBGHZSPI_Receive>
      pData++;
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	3301      	adds	r3, #1
 8009378:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800937a:	8afb      	ldrh	r3, [r7, #22]
 800937c:	3301      	adds	r3, #1
 800937e:	82fb      	strh	r3, [r7, #22]
 8009380:	8afa      	ldrh	r2, [r7, #22]
 8009382:	893b      	ldrh	r3, [r7, #8]
 8009384:	429a      	cmp	r2, r3
 8009386:	d3f1      	bcc.n	800936c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009388:	f7ff fdbc 	bl	8008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800938c:	68f8      	ldr	r0, [r7, #12]
 800938e:	f000 fa31 	bl	80097f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	77fb      	strb	r3, [r7, #31]
 800939e:	e001      	b.n	80093a4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	715a      	strb	r2, [r3, #5]

    return status;
 80093b0:	7ffb      	ldrb	r3, [r7, #31]
 80093b2:	e000      	b.n	80093b6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80093b4:	2302      	movs	r3, #2
  }
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3720      	adds	r7, #32
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b086      	sub	sp, #24
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	607a      	str	r2, [r7, #4]
 80093c8:	461a      	mov	r2, r3
 80093ca:	460b      	mov	r3, r1
 80093cc:	72fb      	strb	r3, [r7, #11]
 80093ce:	4613      	mov	r3, r2
 80093d0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	799b      	ldrb	r3, [r3, #6]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d13e      	bne.n	800945a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	795b      	ldrb	r3, [r3, #5]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e039      	b.n	800945c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2201      	movs	r2, #1
 80093ec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 f9dc 	bl	80097ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80093f4:	f7ff fd96 	bl	8008f24 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80093f8:	210e      	movs	r1, #14
 80093fa:	68f8      	ldr	r0, [r7, #12]
 80093fc:	f000 f928 	bl	8009650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009400:	7afb      	ldrb	r3, [r7, #11]
 8009402:	4619      	mov	r1, r3
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 f923 	bl	8009650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800940a:	2300      	movs	r3, #0
 800940c:	82bb      	strh	r3, [r7, #20]
 800940e:	e00a      	b.n	8009426 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009410:	8abb      	ldrh	r3, [r7, #20]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	4413      	add	r3, r2
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f918 	bl	8009650 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009420:	8abb      	ldrh	r3, [r7, #20]
 8009422:	3301      	adds	r3, #1
 8009424:	82bb      	strh	r3, [r7, #20]
 8009426:	8aba      	ldrh	r2, [r7, #20]
 8009428:	893b      	ldrh	r3, [r7, #8]
 800942a:	429a      	cmp	r2, r3
 800942c:	d3f0      	bcc.n	8009410 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800942e:	f7ff fd69 	bl	8008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 f9de 	bl	80097f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	75fb      	strb	r3, [r7, #23]
 8009444:	e001      	b.n	800944a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	715a      	strb	r2, [r3, #5]

    return status;
 8009456:	7dfb      	ldrb	r3, [r7, #23]
 8009458:	e000      	b.n	800945c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800945a:	2302      	movs	r3, #2
  }
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	607a      	str	r2, [r7, #4]
 800946e:	461a      	mov	r2, r3
 8009470:	460b      	mov	r3, r1
 8009472:	72fb      	strb	r3, [r7, #11]
 8009474:	4613      	mov	r3, r2
 8009476:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	799b      	ldrb	r3, [r3, #6]
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b01      	cmp	r3, #1
 8009484:	d141      	bne.n	800950a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	795b      	ldrb	r3, [r3, #5]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d101      	bne.n	8009492 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800948e:	2302      	movs	r3, #2
 8009490:	e03c      	b.n	800950c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 f987 	bl	80097ac <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800949e:	f7ff fd41 	bl	8008f24 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80094a2:	211e      	movs	r1, #30
 80094a4:	68f8      	ldr	r0, [r7, #12]
 80094a6:	f000 f8d3 	bl	8009650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80094aa:	7afb      	ldrb	r3, [r7, #11]
 80094ac:	4619      	mov	r1, r3
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	f000 f8ce 	bl	8009650 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80094b4:	2100      	movs	r1, #0
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 f8ca 	bl	8009650 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80094bc:	2300      	movs	r3, #0
 80094be:	82fb      	strh	r3, [r7, #22]
 80094c0:	e009      	b.n	80094d6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80094c2:	69b9      	ldr	r1, [r7, #24]
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 f919 	bl	80096fc <SUBGHZSPI_Receive>
      pData++;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	3301      	adds	r3, #1
 80094ce:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80094d0:	8afb      	ldrh	r3, [r7, #22]
 80094d2:	3301      	adds	r3, #1
 80094d4:	82fb      	strh	r3, [r7, #22]
 80094d6:	8afa      	ldrh	r2, [r7, #22]
 80094d8:	893b      	ldrh	r3, [r7, #8]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d3f1      	bcc.n	80094c2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80094de:	f7ff fd11 	bl	8008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 f986 	bl	80097f4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	77fb      	strb	r3, [r7, #31]
 80094f4:	e001      	b.n	80094fa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2201      	movs	r2, #1
 80094fe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	715a      	strb	r2, [r3, #5]

    return status;
 8009506:	7ffb      	ldrb	r3, [r7, #31]
 8009508:	e000      	b.n	800950c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800950a:	2302      	movs	r3, #2
  }
}
 800950c:	4618      	mov	r0, r3
 800950e:	3720      	adds	r7, #32
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800951c:	2300      	movs	r3, #0
 800951e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009520:	f107 020c 	add.w	r2, r7, #12
 8009524:	2302      	movs	r3, #2
 8009526:	2112      	movs	r1, #18
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff fef4 	bl	8009316 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800952e:	7b3b      	ldrb	r3, [r7, #12]
 8009530:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8009532:	89fb      	ldrh	r3, [r7, #14]
 8009534:	021b      	lsls	r3, r3, #8
 8009536:	b21a      	sxth	r2, r3
 8009538:	7b7b      	ldrb	r3, [r7, #13]
 800953a:	b21b      	sxth	r3, r3
 800953c:	4313      	orrs	r3, r2
 800953e:	b21b      	sxth	r3, r3
 8009540:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8009542:	f107 020c 	add.w	r2, r7, #12
 8009546:	2302      	movs	r3, #2
 8009548:	2102      	movs	r1, #2
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7ff fe84 	bl	8009258 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009550:	89fb      	ldrh	r3, [r7, #14]
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f013 f876 	bl	801c64c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8009560:	89fb      	ldrh	r3, [r7, #14]
 8009562:	f003 0302 	and.w	r3, r3, #2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f013 f87c 	bl	801c668 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8009570:	89fb      	ldrh	r3, [r7, #14]
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f013 f8cc 	bl	801c718 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8009580:	89fb      	ldrh	r3, [r7, #14]
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	d002      	beq.n	8009590 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f013 f8d2 	bl	801c734 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8009590:	89fb      	ldrh	r3, [r7, #14]
 8009592:	f003 0310 	and.w	r3, r3, #16
 8009596:	2b00      	cmp	r3, #0
 8009598:	d002      	beq.n	80095a0 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f013 f8d8 	bl	801c750 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80095a0:	89fb      	ldrh	r3, [r7, #14]
 80095a2:	f003 0320 	and.w	r3, r3, #32
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d002      	beq.n	80095b0 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f013 f8a6 	bl	801c6fc <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80095b0:	89fb      	ldrh	r3, [r7, #14]
 80095b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f013 f862 	bl	801c684 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80095c0:	89fb      	ldrh	r3, [r7, #14]
 80095c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00d      	beq.n	80095e6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80095ca:	89fb      	ldrh	r3, [r7, #14]
 80095cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d004      	beq.n	80095de <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80095d4:	2101      	movs	r1, #1
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f013 f862 	bl	801c6a0 <HAL_SUBGHZ_CADStatusCallback>
 80095dc:	e003      	b.n	80095e6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80095de:	2100      	movs	r1, #0
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f013 f85d 	bl	801c6a0 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80095e6:	89fb      	ldrh	r3, [r7, #14]
 80095e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f013 f873 	bl	801c6dc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80095f6:	89fb      	ldrh	r3, [r7, #14]
 80095f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f013 f8b3 	bl	801c76c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009618:	4b0c      	ldr	r3, [pc, #48]	; (800964c <SUBGHZSPI_Init+0x3c>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a0b      	ldr	r2, [pc, #44]	; (800964c <SUBGHZSPI_Init+0x3c>)
 800961e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009622:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8009624:	4a09      	ldr	r2, [pc, #36]	; (800964c <SUBGHZSPI_Init+0x3c>)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800962c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800962e:	4b07      	ldr	r3, [pc, #28]	; (800964c <SUBGHZSPI_Init+0x3c>)
 8009630:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8009634:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009636:	4b05      	ldr	r3, [pc, #20]	; (800964c <SUBGHZSPI_Init+0x3c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a04      	ldr	r2, [pc, #16]	; (800964c <SUBGHZSPI_Init+0x3c>)
 800963c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009640:	6013      	str	r3, [r2, #0]
}
 8009642:	bf00      	nop
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	bc80      	pop	{r7}
 800964a:	4770      	bx	lr
 800964c:	58010000 	.word	0x58010000

08009650 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009660:	4b23      	ldr	r3, [pc, #140]	; (80096f0 <SUBGHZSPI_Transmit+0xa0>)
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	4613      	mov	r3, r2
 8009666:	00db      	lsls	r3, r3, #3
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	0cdb      	lsrs	r3, r3, #19
 800966e:	2264      	movs	r2, #100	; 0x64
 8009670:	fb02 f303 	mul.w	r3, r2, r3
 8009674:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d105      	bne.n	8009688 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	609a      	str	r2, [r3, #8]
      break;
 8009686:	e008      	b.n	800969a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3b01      	subs	r3, #1
 800968c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800968e:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <SUBGHZSPI_Transmit+0xa4>)
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f003 0302 	and.w	r3, r3, #2
 8009696:	2b02      	cmp	r3, #2
 8009698:	d1ed      	bne.n	8009676 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800969a:	4b17      	ldr	r3, [pc, #92]	; (80096f8 <SUBGHZSPI_Transmit+0xa8>)
 800969c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	78fa      	ldrb	r2, [r7, #3]
 80096a2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80096a4:	4b12      	ldr	r3, [pc, #72]	; (80096f0 <SUBGHZSPI_Transmit+0xa0>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	4613      	mov	r3, r2
 80096aa:	00db      	lsls	r3, r3, #3
 80096ac:	1a9b      	subs	r3, r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	0cdb      	lsrs	r3, r3, #19
 80096b2:	2264      	movs	r2, #100	; 0x64
 80096b4:	fb02 f303 	mul.w	r3, r2, r3
 80096b8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d105      	bne.n	80096cc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	609a      	str	r2, [r3, #8]
      break;
 80096ca:	e008      	b.n	80096de <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80096d2:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <SUBGHZSPI_Transmit+0xa4>)
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d1ed      	bne.n	80096ba <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80096de:	4b05      	ldr	r3, [pc, #20]	; (80096f4 <SUBGHZSPI_Transmit+0xa4>)
 80096e0:	68db      	ldr	r3, [r3, #12]

  return status;
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	371c      	adds	r7, #28
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bc80      	pop	{r7}
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	20000000 	.word	0x20000000
 80096f4:	58010000 	.word	0x58010000
 80096f8:	5801000c 	.word	0x5801000c

080096fc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800970a:	4b25      	ldr	r3, [pc, #148]	; (80097a0 <SUBGHZSPI_Receive+0xa4>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	4613      	mov	r3, r2
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	0cdb      	lsrs	r3, r3, #19
 8009718:	2264      	movs	r2, #100	; 0x64
 800971a:	fb02 f303 	mul.w	r3, r2, r3
 800971e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d105      	bne.n	8009732 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	609a      	str	r2, [r3, #8]
      break;
 8009730:	e008      	b.n	8009744 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3b01      	subs	r3, #1
 8009736:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009738:	4b1a      	ldr	r3, [pc, #104]	; (80097a4 <SUBGHZSPI_Receive+0xa8>)
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b02      	cmp	r3, #2
 8009742:	d1ed      	bne.n	8009720 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009744:	4b18      	ldr	r3, [pc, #96]	; (80097a8 <SUBGHZSPI_Receive+0xac>)
 8009746:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	22ff      	movs	r2, #255	; 0xff
 800974c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800974e:	4b14      	ldr	r3, [pc, #80]	; (80097a0 <SUBGHZSPI_Receive+0xa4>)
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4613      	mov	r3, r2
 8009754:	00db      	lsls	r3, r3, #3
 8009756:	1a9b      	subs	r3, r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	0cdb      	lsrs	r3, r3, #19
 800975c:	2264      	movs	r2, #100	; 0x64
 800975e:	fb02 f303 	mul.w	r3, r2, r3
 8009762:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d105      	bne.n	8009776 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	609a      	str	r2, [r3, #8]
      break;
 8009774:	e008      	b.n	8009788 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3b01      	subs	r3, #1
 800977a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800977c:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <SUBGHZSPI_Receive+0xa8>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b01      	cmp	r3, #1
 8009786:	d1ed      	bne.n	8009764 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009788:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <SUBGHZSPI_Receive+0xa8>)
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	b2da      	uxtb	r2, r3
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	701a      	strb	r2, [r3, #0]

  return status;
 8009792:	7dfb      	ldrb	r3, [r7, #23]
}
 8009794:	4618      	mov	r0, r3
 8009796:	371c      	adds	r7, #28
 8009798:	46bd      	mov	sp, r7
 800979a:	bc80      	pop	{r7}
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	20000000 	.word	0x20000000
 80097a4:	58010000 	.word	0x58010000
 80097a8:	5801000c 	.word	0x5801000c

080097ac <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	791b      	ldrb	r3, [r3, #4]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d111      	bne.n	80097e0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80097bc:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <SUBGHZ_CheckDeviceReady+0x44>)
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	4613      	mov	r3, r2
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	4413      	add	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	0c1b      	lsrs	r3, r3, #16
 80097ca:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80097cc:	f7ff fbaa 	bl	8008f24 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1f9      	bne.n	80097d0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80097dc:	f7ff fb92 	bl	8008f04 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f807 	bl	80097f4 <SUBGHZ_WaitOnBusy>
 80097e6:	4603      	mov	r3, r0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20000000 	.word	0x20000000

080097f4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8009800:	4b12      	ldr	r3, [pc, #72]	; (800984c <SUBGHZ_WaitOnBusy+0x58>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	4613      	mov	r3, r2
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	4413      	add	r3, r2
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	0d1b      	lsrs	r3, r3, #20
 800980e:	2264      	movs	r2, #100	; 0x64
 8009810:	fb02 f303 	mul.w	r3, r2, r3
 8009814:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009816:	f7ff fbb3 	bl	8008f80 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800981a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d105      	bne.n	800982e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2202      	movs	r2, #2
 800982a:	609a      	str	r2, [r3, #8]
      break;
 800982c:	e009      	b.n	8009842 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3b01      	subs	r3, #1
 8009832:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009834:	f7ff fb92 	bl	8008f5c <LL_PWR_IsActiveFlag_RFBUSYS>
 8009838:	4602      	mov	r2, r0
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4013      	ands	r3, r2
 800983e:	2b01      	cmp	r3, #1
 8009840:	d0e9      	beq.n	8009816 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8009842:	7dfb      	ldrb	r3, [r7, #23]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3718      	adds	r7, #24
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20000000 	.word	0x20000000

08009850 <LL_RCC_GetUSARTClockSource>:
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800985c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	401a      	ands	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	041b      	lsls	r3, r3, #16
 8009868:	4313      	orrs	r3, r2
}
 800986a:	4618      	mov	r0, r3
 800986c:	370c      	adds	r7, #12
 800986e:	46bd      	mov	sp, r7
 8009870:	bc80      	pop	{r7}
 8009872:	4770      	bx	lr

08009874 <LL_RCC_GetLPUARTClockSource>:
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800987c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009880:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4013      	ands	r3, r2
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	bc80      	pop	{r7}
 8009890:	4770      	bx	lr

08009892 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e042      	b.n	800992a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d106      	bne.n	80098bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7f9 f956 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2224      	movs	r2, #36	; 0x24
 80098c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0201 	bic.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fc3b 	bl	800a150 <UART_SetConfig>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d101      	bne.n	80098e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e022      	b.n	800992a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d002      	beq.n	80098f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fea3 	bl	800a638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	685a      	ldr	r2, [r3, #4]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f042 0201 	orr.w	r2, r2, #1
 8009920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 ff29 	bl	800a77a <UART_CheckIdleState>
 8009928:	4603      	mov	r3, r0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
	...

08009934 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08a      	sub	sp, #40	; 0x28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	4613      	mov	r3, r2
 8009940:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009948:	2b20      	cmp	r3, #32
 800994a:	d137      	bne.n	80099bc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <HAL_UART_Receive_IT+0x24>
 8009952:	88fb      	ldrh	r3, [r7, #6]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d101      	bne.n	800995c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	e030      	b.n	80099be <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a18      	ldr	r2, [pc, #96]	; (80099c8 <HAL_UART_Receive_IT+0x94>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d01f      	beq.n	80099ac <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d018      	beq.n	80099ac <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	e853 3f00 	ldrex	r3, [r3]
 8009986:	613b      	str	r3, [r7, #16]
   return(result);
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	461a      	mov	r2, r3
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	623b      	str	r3, [r7, #32]
 800999a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	69f9      	ldr	r1, [r7, #28]
 800999e:	6a3a      	ldr	r2, [r7, #32]
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e6      	bne.n	800997a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80099ac:	88fb      	ldrh	r3, [r7, #6]
 80099ae:	461a      	mov	r2, r3
 80099b0:	68b9      	ldr	r1, [r7, #8]
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 fff8 	bl	800a9a8 <UART_Start_Receive_IT>
 80099b8:	4603      	mov	r3, r0
 80099ba:	e000      	b.n	80099be <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099bc:	2302      	movs	r3, #2
  }
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3728      	adds	r7, #40	; 0x28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	40008000 	.word	0x40008000

080099cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b08a      	sub	sp, #40	; 0x28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	4613      	mov	r3, r2
 80099d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e0:	2b20      	cmp	r3, #32
 80099e2:	d167      	bne.n	8009ab4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d002      	beq.n	80099f0 <HAL_UART_Transmit_DMA+0x24>
 80099ea:	88fb      	ldrh	r3, [r7, #6]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e060      	b.n	8009ab6 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	88fa      	ldrh	r2, [r7, #6]
 80099fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	88fa      	ldrh	r2, [r7, #6]
 8009a06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2221      	movs	r2, #33	; 0x21
 8009a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d028      	beq.n	8009a74 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a26:	4a26      	ldr	r2, [pc, #152]	; (8009ac0 <HAL_UART_Transmit_DMA+0xf4>)
 8009a28:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a2e:	4a25      	ldr	r2, [pc, #148]	; (8009ac4 <HAL_UART_Transmit_DMA+0xf8>)
 8009a30:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a36:	4a24      	ldr	r2, [pc, #144]	; (8009ac8 <HAL_UART_Transmit_DMA+0xfc>)
 8009a38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a3e:	2200      	movs	r2, #0
 8009a40:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	3328      	adds	r3, #40	; 0x28
 8009a52:	461a      	mov	r2, r3
 8009a54:	88fb      	ldrh	r3, [r7, #6]
 8009a56:	f7fb febd 	bl	80057d4 <HAL_DMA_Start_IT>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d009      	beq.n	8009a74 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2210      	movs	r2, #16
 8009a64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e020      	b.n	8009ab6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2240      	movs	r2, #64	; 0x40
 8009a7a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3308      	adds	r3, #8
 8009a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	e853 3f00 	ldrex	r3, [r3]
 8009a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a92:	627b      	str	r3, [r7, #36]	; 0x24
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9c:	623a      	str	r2, [r7, #32]
 8009a9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa0:	69f9      	ldr	r1, [r7, #28]
 8009aa2:	6a3a      	ldr	r2, [r7, #32]
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e5      	bne.n	8009a7c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e000      	b.n	8009ab6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009ab4:	2302      	movs	r3, #2
  }
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3728      	adds	r7, #40	; 0x28
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	0800ad33 	.word	0x0800ad33
 8009ac4:	0800adcd 	.word	0x0800adcd
 8009ac8:	0800ade9 	.word	0x0800ade9

08009acc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b0ba      	sub	sp, #232	; 0xe8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	69db      	ldr	r3, [r3, #28]
 8009ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009af2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009af6:	f640 030f 	movw	r3, #2063	; 0x80f
 8009afa:	4013      	ands	r3, r2
 8009afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d11b      	bne.n	8009b40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d015      	beq.n	8009b40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b18:	f003 0320 	and.w	r3, r3, #32
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d105      	bne.n	8009b2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d009      	beq.n	8009b40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	f000 82e3 	beq.w	800a0fc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	4798      	blx	r3
      }
      return;
 8009b3e:	e2dd      	b.n	800a0fc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 8123 	beq.w	8009d90 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009b4e:	4b8d      	ldr	r3, [pc, #564]	; (8009d84 <HAL_UART_IRQHandler+0x2b8>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d106      	bne.n	8009b64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009b5a:	4b8b      	ldr	r3, [pc, #556]	; (8009d88 <HAL_UART_IRQHandler+0x2bc>)
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 8116 	beq.w	8009d90 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d011      	beq.n	8009b94 <HAL_UART_IRQHandler+0xc8>
 8009b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00b      	beq.n	8009b94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2201      	movs	r2, #1
 8009b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b8a:	f043 0201 	orr.w	r2, r3, #1
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d011      	beq.n	8009bc4 <HAL_UART_IRQHandler+0xf8>
 8009ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ba4:	f003 0301 	and.w	r3, r3, #1
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00b      	beq.n	8009bc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bba:	f043 0204 	orr.w	r2, r3, #4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bc8:	f003 0304 	and.w	r3, r3, #4
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d011      	beq.n	8009bf4 <HAL_UART_IRQHandler+0x128>
 8009bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bd4:	f003 0301 	and.w	r3, r3, #1
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00b      	beq.n	8009bf4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	2204      	movs	r2, #4
 8009be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bea:	f043 0202 	orr.w	r2, r3, #2
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bf8:	f003 0308 	and.w	r3, r3, #8
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d017      	beq.n	8009c30 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c04:	f003 0320 	and.w	r3, r3, #32
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d105      	bne.n	8009c18 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009c10:	4b5c      	ldr	r3, [pc, #368]	; (8009d84 <HAL_UART_IRQHandler+0x2b8>)
 8009c12:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00b      	beq.n	8009c30 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c26:	f043 0208 	orr.w	r2, r3, #8
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d012      	beq.n	8009c62 <HAL_UART_IRQHandler+0x196>
 8009c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00c      	beq.n	8009c62 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c58:	f043 0220 	orr.w	r2, r3, #32
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 8249 	beq.w	800a100 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c72:	f003 0320 	and.w	r3, r3, #32
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d013      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c7e:	f003 0320 	and.w	r3, r3, #32
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d105      	bne.n	8009c92 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d007      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb6:	2b40      	cmp	r3, #64	; 0x40
 8009cb8:	d005      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d054      	beq.n	8009d70 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 ffce 	bl	800ac68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cd6:	2b40      	cmp	r3, #64	; 0x40
 8009cd8:	d146      	bne.n	8009d68 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ce8:	e853 3f00 	ldrex	r3, [r3]
 8009cec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009cf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3308      	adds	r3, #8
 8009d02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009d12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d16:	e841 2300 	strex	r3, r2, [r1]
 8009d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1d9      	bne.n	8009cda <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d017      	beq.n	8009d60 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d36:	4a15      	ldr	r2, [pc, #84]	; (8009d8c <HAL_UART_IRQHandler+0x2c0>)
 8009d38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7fb fe23 	bl	800598c <HAL_DMA_Abort_IT>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d019      	beq.n	8009d80 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d5e:	e00f      	b.n	8009d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f9e0 	bl	800a126 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d66:	e00b      	b.n	8009d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f9dc 	bl	800a126 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d6e:	e007      	b.n	8009d80 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f9d8 	bl	800a126 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009d7e:	e1bf      	b.n	800a100 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d80:	bf00      	nop
    return;
 8009d82:	e1bd      	b.n	800a100 <HAL_UART_IRQHandler+0x634>
 8009d84:	10000001 	.word	0x10000001
 8009d88:	04000120 	.word	0x04000120
 8009d8c:	0800ae69 	.word	0x0800ae69

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	f040 8153 	bne.w	800a040 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d9e:	f003 0310 	and.w	r3, r3, #16
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 814c 	beq.w	800a040 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dac:	f003 0310 	and.w	r3, r3, #16
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 8145 	beq.w	800a040 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2210      	movs	r2, #16
 8009dbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dc8:	2b40      	cmp	r3, #64	; 0x40
 8009dca:	f040 80bb 	bne.w	8009f44 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 818f 	beq.w	800a104 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009df0:	429a      	cmp	r2, r3
 8009df2:	f080 8187 	bcs.w	800a104 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f003 0320 	and.w	r3, r3, #32
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f040 8087 	bne.w	8009f22 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d1da      	bne.n	8009e14 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3308      	adds	r3, #8
 8009e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e70:	f023 0301 	bic.w	r3, r3, #1
 8009e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3308      	adds	r3, #8
 8009e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e8e:	e841 2300 	strex	r3, r2, [r1]
 8009e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1e1      	bne.n	8009e5e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	3308      	adds	r3, #8
 8009ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ea4:	e853 3f00 	ldrex	r3, [r3]
 8009ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3308      	adds	r3, #8
 8009eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e3      	bne.n	8009e9a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ee8:	e853 3f00 	ldrex	r3, [r3]
 8009eec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ef0:	f023 0310 	bic.w	r3, r3, #16
 8009ef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	461a      	mov	r2, r3
 8009efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f0a:	e841 2300 	strex	r3, r2, [r1]
 8009f0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e4      	bne.n	8009ee0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fb fcd7 	bl	80058d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2202      	movs	r2, #2
 8009f26:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f8fb 	bl	800a138 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f42:	e0df      	b.n	800a104 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80d1 	beq.w	800a108 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 80cc 	beq.w	800a108 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f92:	647b      	str	r3, [r7, #68]	; 0x44
 8009f94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f9a:	e841 2300 	strex	r3, r2, [r1]
 8009f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1e4      	bne.n	8009f70 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3308      	adds	r3, #8
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	e853 3f00 	ldrex	r3, [r3]
 8009fb4:	623b      	str	r3, [r7, #32]
   return(result);
 8009fb6:	6a3b      	ldr	r3, [r7, #32]
 8009fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fbc:	f023 0301 	bic.w	r3, r3, #1
 8009fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009fce:	633a      	str	r2, [r7, #48]	; 0x30
 8009fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e1      	bne.n	8009fa6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	e853 3f00 	ldrex	r3, [r3]
 800a002:	60fb      	str	r3, [r7, #12]
   return(result);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0310 	bic.w	r3, r3, #16
 800a00a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01c:	69b9      	ldr	r1, [r7, #24]
 800a01e:	69fa      	ldr	r2, [r7, #28]
 800a020:	e841 2300 	strex	r3, r2, [r1]
 800a024:	617b      	str	r3, [r7, #20]
   return(result);
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e4      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a032:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f87d 	bl	800a138 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a03e:	e063      	b.n	800a108 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00e      	beq.n	800a06a <HAL_UART_IRQHandler+0x59e>
 800a04c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d008      	beq.n	800a06a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a060:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f001 fc5e 	bl	800b924 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a068:	e051      	b.n	800a10e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a072:	2b00      	cmp	r3, #0
 800a074:	d014      	beq.n	800a0a0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d105      	bne.n	800a08e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d008      	beq.n	800a0a0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a092:	2b00      	cmp	r3, #0
 800a094:	d03a      	beq.n	800a10c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	4798      	blx	r3
    }
    return;
 800a09e:	e035      	b.n	800a10c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d009      	beq.n	800a0c0 <HAL_UART_IRQHandler+0x5f4>
 800a0ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d003      	beq.n	800a0c0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 feeb 	bl	800ae94 <UART_EndTransmit_IT>
    return;
 800a0be:	e026      	b.n	800a10e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d009      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x614>
 800a0cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d003      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 fc35 	bl	800b948 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0de:	e016      	b.n	800a10e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d010      	beq.n	800a10e <HAL_UART_IRQHandler+0x642>
 800a0ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	da0c      	bge.n	800a10e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 fc1e 	bl	800b936 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0fa:	e008      	b.n	800a10e <HAL_UART_IRQHandler+0x642>
      return;
 800a0fc:	bf00      	nop
 800a0fe:	e006      	b.n	800a10e <HAL_UART_IRQHandler+0x642>
    return;
 800a100:	bf00      	nop
 800a102:	e004      	b.n	800a10e <HAL_UART_IRQHandler+0x642>
      return;
 800a104:	bf00      	nop
 800a106:	e002      	b.n	800a10e <HAL_UART_IRQHandler+0x642>
      return;
 800a108:	bf00      	nop
 800a10a:	e000      	b.n	800a10e <HAL_UART_IRQHandler+0x642>
    return;
 800a10c:	bf00      	nop
  }
}
 800a10e:	37e8      	adds	r7, #232	; 0xe8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	bc80      	pop	{r7}
 800a124:	4770      	bx	lr

0800a126 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	bc80      	pop	{r7}
 800a136:	4770      	bx	lr

0800a138 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	bc80      	pop	{r7}
 800a14c:	4770      	bx	lr
	...

0800a150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a154:	b08c      	sub	sp, #48	; 0x30
 800a156:	af00      	add	r7, sp, #0
 800a158:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	689a      	ldr	r2, [r3, #8]
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	431a      	orrs	r2, r3
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	431a      	orrs	r2, r3
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	69db      	ldr	r3, [r3, #28]
 800a174:	4313      	orrs	r3, r2
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b94      	ldr	r3, [pc, #592]	; (800a3d0 <UART_SetConfig+0x280>)
 800a180:	4013      	ands	r3, r2
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	6812      	ldr	r2, [r2, #0]
 800a186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a188:	430b      	orrs	r3, r1
 800a18a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	699b      	ldr	r3, [r3, #24]
 800a1a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a89      	ldr	r2, [pc, #548]	; (800a3d4 <UART_SetConfig+0x284>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d004      	beq.n	800a1bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a1c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	6812      	ldr	r2, [r2, #0]
 800a1ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	f023 010f 	bic.w	r1, r3, #15
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a7a      	ldr	r2, [pc, #488]	; (800a3d8 <UART_SetConfig+0x288>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d127      	bne.n	800a244 <UART_SetConfig+0xf4>
 800a1f4:	2003      	movs	r0, #3
 800a1f6:	f7ff fb2b 	bl	8009850 <LL_RCC_GetUSARTClockSource>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800a200:	2b03      	cmp	r3, #3
 800a202:	d81b      	bhi.n	800a23c <UART_SetConfig+0xec>
 800a204:	a201      	add	r2, pc, #4	; (adr r2, 800a20c <UART_SetConfig+0xbc>)
 800a206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20a:	bf00      	nop
 800a20c:	0800a21d 	.word	0x0800a21d
 800a210:	0800a22d 	.word	0x0800a22d
 800a214:	0800a225 	.word	0x0800a225
 800a218:	0800a235 	.word	0x0800a235
 800a21c:	2301      	movs	r3, #1
 800a21e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a222:	e080      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a224:	2302      	movs	r3, #2
 800a226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a22a:	e07c      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a22c:	2304      	movs	r3, #4
 800a22e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a232:	e078      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a234:	2308      	movs	r3, #8
 800a236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a23a:	e074      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a23c:	2310      	movs	r3, #16
 800a23e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a242:	e070      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a64      	ldr	r2, [pc, #400]	; (800a3dc <UART_SetConfig+0x28c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d138      	bne.n	800a2c0 <UART_SetConfig+0x170>
 800a24e:	200c      	movs	r0, #12
 800a250:	f7ff fafe 	bl	8009850 <LL_RCC_GetUSARTClockSource>
 800a254:	4603      	mov	r3, r0
 800a256:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800a25a:	2b0c      	cmp	r3, #12
 800a25c:	d82c      	bhi.n	800a2b8 <UART_SetConfig+0x168>
 800a25e:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <UART_SetConfig+0x114>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a299 	.word	0x0800a299
 800a268:	0800a2b9 	.word	0x0800a2b9
 800a26c:	0800a2b9 	.word	0x0800a2b9
 800a270:	0800a2b9 	.word	0x0800a2b9
 800a274:	0800a2a9 	.word	0x0800a2a9
 800a278:	0800a2b9 	.word	0x0800a2b9
 800a27c:	0800a2b9 	.word	0x0800a2b9
 800a280:	0800a2b9 	.word	0x0800a2b9
 800a284:	0800a2a1 	.word	0x0800a2a1
 800a288:	0800a2b9 	.word	0x0800a2b9
 800a28c:	0800a2b9 	.word	0x0800a2b9
 800a290:	0800a2b9 	.word	0x0800a2b9
 800a294:	0800a2b1 	.word	0x0800a2b1
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a29e:	e042      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2a6:	e03e      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a2a8:	2304      	movs	r3, #4
 800a2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ae:	e03a      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2b6:	e036      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2be:	e032      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a43      	ldr	r2, [pc, #268]	; (800a3d4 <UART_SetConfig+0x284>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d12a      	bne.n	800a320 <UART_SetConfig+0x1d0>
 800a2ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800a2ce:	f7ff fad1 	bl	8009874 <LL_RCC_GetLPUARTClockSource>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2d8:	d01a      	beq.n	800a310 <UART_SetConfig+0x1c0>
 800a2da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2de:	d81b      	bhi.n	800a318 <UART_SetConfig+0x1c8>
 800a2e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2e4:	d00c      	beq.n	800a300 <UART_SetConfig+0x1b0>
 800a2e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2ea:	d815      	bhi.n	800a318 <UART_SetConfig+0x1c8>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <UART_SetConfig+0x1a8>
 800a2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f4:	d008      	beq.n	800a308 <UART_SetConfig+0x1b8>
 800a2f6:	e00f      	b.n	800a318 <UART_SetConfig+0x1c8>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2fe:	e012      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a300:	2302      	movs	r3, #2
 800a302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a306:	e00e      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a308:	2304      	movs	r3, #4
 800a30a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a30e:	e00a      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a310:	2308      	movs	r3, #8
 800a312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a316:	e006      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a318:	2310      	movs	r3, #16
 800a31a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a31e:	e002      	b.n	800a326 <UART_SetConfig+0x1d6>
 800a320:	2310      	movs	r3, #16
 800a322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a2a      	ldr	r2, [pc, #168]	; (800a3d4 <UART_SetConfig+0x284>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	f040 80a4 	bne.w	800a47a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a336:	2b08      	cmp	r3, #8
 800a338:	d823      	bhi.n	800a382 <UART_SetConfig+0x232>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <UART_SetConfig+0x1f0>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a365 	.word	0x0800a365
 800a344:	0800a383 	.word	0x0800a383
 800a348:	0800a36d 	.word	0x0800a36d
 800a34c:	0800a383 	.word	0x0800a383
 800a350:	0800a373 	.word	0x0800a373
 800a354:	0800a383 	.word	0x0800a383
 800a358:	0800a383 	.word	0x0800a383
 800a35c:	0800a383 	.word	0x0800a383
 800a360:	0800a37b 	.word	0x0800a37b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a364:	f7fd ff4a 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 800a368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a36a:	e010      	b.n	800a38e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a36c:	4b1c      	ldr	r3, [pc, #112]	; (800a3e0 <UART_SetConfig+0x290>)
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a370:	e00d      	b.n	800a38e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a372:	f7fd fe8f 	bl	8008094 <HAL_RCC_GetSysClockFreq>
 800a376:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a378:	e009      	b.n	800a38e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a37e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a380:	e005      	b.n	800a38e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a38c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 8137 	beq.w	800a604 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	4a12      	ldr	r2, [pc, #72]	; (800a3e4 <UART_SetConfig+0x294>)
 800a39c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	685a      	ldr	r2, [r3, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	005b      	lsls	r3, r3, #1
 800a3b2:	4413      	add	r3, r2
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d305      	bcc.n	800a3c6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3c0:	69ba      	ldr	r2, [r7, #24]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d910      	bls.n	800a3e8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a3cc:	e11a      	b.n	800a604 <UART_SetConfig+0x4b4>
 800a3ce:	bf00      	nop
 800a3d0:	cfff69f3 	.word	0xcfff69f3
 800a3d4:	40008000 	.word	0x40008000
 800a3d8:	40013800 	.word	0x40013800
 800a3dc:	40004400 	.word	0x40004400
 800a3e0:	00f42400 	.word	0x00f42400
 800a3e4:	0801ea04 	.word	0x0801ea04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	60bb      	str	r3, [r7, #8]
 800a3ee:	60fa      	str	r2, [r7, #12]
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	4a8e      	ldr	r2, [pc, #568]	; (800a630 <UART_SetConfig+0x4e0>)
 800a3f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	607a      	str	r2, [r7, #4]
 800a402:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a406:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a40a:	f7f6 fddf 	bl	8000fcc <__aeabi_uldivmod>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	4610      	mov	r0, r2
 800a414:	4619      	mov	r1, r3
 800a416:	f04f 0200 	mov.w	r2, #0
 800a41a:	f04f 0300 	mov.w	r3, #0
 800a41e:	020b      	lsls	r3, r1, #8
 800a420:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a424:	0202      	lsls	r2, r0, #8
 800a426:	6979      	ldr	r1, [r7, #20]
 800a428:	6849      	ldr	r1, [r1, #4]
 800a42a:	0849      	lsrs	r1, r1, #1
 800a42c:	2000      	movs	r0, #0
 800a42e:	460c      	mov	r4, r1
 800a430:	4605      	mov	r5, r0
 800a432:	eb12 0804 	adds.w	r8, r2, r4
 800a436:	eb43 0905 	adc.w	r9, r3, r5
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	469a      	mov	sl, r3
 800a442:	4693      	mov	fp, r2
 800a444:	4652      	mov	r2, sl
 800a446:	465b      	mov	r3, fp
 800a448:	4640      	mov	r0, r8
 800a44a:	4649      	mov	r1, r9
 800a44c:	f7f6 fdbe 	bl	8000fcc <__aeabi_uldivmod>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4613      	mov	r3, r2
 800a456:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a45e:	d308      	bcc.n	800a472 <UART_SetConfig+0x322>
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a466:	d204      	bcs.n	800a472 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6a3a      	ldr	r2, [r7, #32]
 800a46e:	60da      	str	r2, [r3, #12]
 800a470:	e0c8      	b.n	800a604 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a478:	e0c4      	b.n	800a604 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	69db      	ldr	r3, [r3, #28]
 800a47e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a482:	d167      	bne.n	800a554 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800a484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a488:	2b08      	cmp	r3, #8
 800a48a:	d828      	bhi.n	800a4de <UART_SetConfig+0x38e>
 800a48c:	a201      	add	r2, pc, #4	; (adr r2, 800a494 <UART_SetConfig+0x344>)
 800a48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a492:	bf00      	nop
 800a494:	0800a4b9 	.word	0x0800a4b9
 800a498:	0800a4c1 	.word	0x0800a4c1
 800a49c:	0800a4c9 	.word	0x0800a4c9
 800a4a0:	0800a4df 	.word	0x0800a4df
 800a4a4:	0800a4cf 	.word	0x0800a4cf
 800a4a8:	0800a4df 	.word	0x0800a4df
 800a4ac:	0800a4df 	.word	0x0800a4df
 800a4b0:	0800a4df 	.word	0x0800a4df
 800a4b4:	0800a4d7 	.word	0x0800a4d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4b8:	f7fd fea0 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 800a4bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4be:	e014      	b.n	800a4ea <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4c0:	f7fd feae 	bl	8008220 <HAL_RCC_GetPCLK2Freq>
 800a4c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4c6:	e010      	b.n	800a4ea <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4c8:	4b5a      	ldr	r3, [pc, #360]	; (800a634 <UART_SetConfig+0x4e4>)
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4cc:	e00d      	b.n	800a4ea <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4ce:	f7fd fde1 	bl	8008094 <HAL_RCC_GetSysClockFreq>
 800a4d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a4d4:	e009      	b.n	800a4ea <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a4dc:	e005      	b.n	800a4ea <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a4e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 8089 	beq.w	800a604 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f6:	4a4e      	ldr	r2, [pc, #312]	; (800a630 <UART_SetConfig+0x4e0>)
 800a4f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	fbb3 f3f2 	udiv	r3, r3, r2
 800a504:	005a      	lsls	r2, r3, #1
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	085b      	lsrs	r3, r3, #1
 800a50c:	441a      	add	r2, r3
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	fbb2 f3f3 	udiv	r3, r2, r3
 800a516:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	2b0f      	cmp	r3, #15
 800a51c:	d916      	bls.n	800a54c <UART_SetConfig+0x3fc>
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a524:	d212      	bcs.n	800a54c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f023 030f 	bic.w	r3, r3, #15
 800a52e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	085b      	lsrs	r3, r3, #1
 800a534:	b29b      	uxth	r3, r3
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	8bfb      	ldrh	r3, [r7, #30]
 800a53e:	4313      	orrs	r3, r2
 800a540:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	8bfa      	ldrh	r2, [r7, #30]
 800a548:	60da      	str	r2, [r3, #12]
 800a54a:	e05b      	b.n	800a604 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a552:	e057      	b.n	800a604 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a554:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d828      	bhi.n	800a5ae <UART_SetConfig+0x45e>
 800a55c:	a201      	add	r2, pc, #4	; (adr r2, 800a564 <UART_SetConfig+0x414>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a589 	.word	0x0800a589
 800a568:	0800a591 	.word	0x0800a591
 800a56c:	0800a599 	.word	0x0800a599
 800a570:	0800a5af 	.word	0x0800a5af
 800a574:	0800a59f 	.word	0x0800a59f
 800a578:	0800a5af 	.word	0x0800a5af
 800a57c:	0800a5af 	.word	0x0800a5af
 800a580:	0800a5af 	.word	0x0800a5af
 800a584:	0800a5a7 	.word	0x0800a5a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a588:	f7fd fe38 	bl	80081fc <HAL_RCC_GetPCLK1Freq>
 800a58c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a58e:	e014      	b.n	800a5ba <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a590:	f7fd fe46 	bl	8008220 <HAL_RCC_GetPCLK2Freq>
 800a594:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a596:	e010      	b.n	800a5ba <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a598:	4b26      	ldr	r3, [pc, #152]	; (800a634 <UART_SetConfig+0x4e4>)
 800a59a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a59c:	e00d      	b.n	800a5ba <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a59e:	f7fd fd79 	bl	8008094 <HAL_RCC_GetSysClockFreq>
 800a5a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5a4:	e009      	b.n	800a5ba <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a5ac:	e005      	b.n	800a5ba <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a5b8:	bf00      	nop
    }

    if (pclk != 0U)
 800a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d021      	beq.n	800a604 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	4a1a      	ldr	r2, [pc, #104]	; (800a630 <UART_SetConfig+0x4e0>)
 800a5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	085b      	lsrs	r3, r3, #1
 800a5d8:	441a      	add	r2, r3
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	2b0f      	cmp	r3, #15
 800a5e8:	d909      	bls.n	800a5fe <UART_SetConfig+0x4ae>
 800a5ea:	6a3b      	ldr	r3, [r7, #32]
 800a5ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f0:	d205      	bcs.n	800a5fe <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	60da      	str	r2, [r3, #12]
 800a5fc:	e002      	b.n	800a604 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2201      	movs	r2, #1
 800a608:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2201      	movs	r2, #1
 800a610:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2200      	movs	r2, #0
 800a618:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	2200      	movs	r2, #0
 800a61e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a620:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a624:	4618      	mov	r0, r3
 800a626:	3730      	adds	r7, #48	; 0x30
 800a628:	46bd      	mov	sp, r7
 800a62a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a62e:	bf00      	nop
 800a630:	0801ea04 	.word	0x0801ea04
 800a634:	00f42400 	.word	0x00f42400

0800a638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00a      	beq.n	800a662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00a      	beq.n	800a684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	430a      	orrs	r2, r1
 800a682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a688:	f003 0304 	and.w	r3, r3, #4
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00a      	beq.n	800a6a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6aa:	f003 0308 	and.w	r3, r3, #8
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00a      	beq.n	800a6c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6cc:	f003 0310 	and.w	r3, r3, #16
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00a      	beq.n	800a6ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ee:	f003 0320 	and.w	r3, r3, #32
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00a      	beq.n	800a70c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	430a      	orrs	r2, r1
 800a70a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a714:	2b00      	cmp	r3, #0
 800a716:	d01a      	beq.n	800a74e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a736:	d10a      	bne.n	800a74e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	430a      	orrs	r2, r1
 800a76e:	605a      	str	r2, [r3, #4]
  }
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	bc80      	pop	{r7}
 800a778:	4770      	bx	lr

0800a77a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b086      	sub	sp, #24
 800a77e:	af02      	add	r7, sp, #8
 800a780:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a78a:	f7f7 fe53 	bl	8002434 <HAL_GetTick>
 800a78e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 0308 	and.w	r3, r3, #8
 800a79a:	2b08      	cmp	r3, #8
 800a79c:	d10e      	bne.n	800a7bc <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a79e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f832 	bl	800a816 <UART_WaitOnFlagUntilTimeout>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d001      	beq.n	800a7bc <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7b8:	2303      	movs	r3, #3
 800a7ba:	e028      	b.n	800a80e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0304 	and.w	r3, r3, #4
 800a7c6:	2b04      	cmp	r3, #4
 800a7c8:	d10e      	bne.n	800a7e8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7ca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f81c 	bl	800a816 <UART_WaitOnFlagUntilTimeout>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d001      	beq.n	800a7e8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	e012      	b.n	800a80e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2220      	movs	r2, #32
 800a7ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b09c      	sub	sp, #112	; 0x70
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	60b9      	str	r1, [r7, #8]
 800a820:	603b      	str	r3, [r7, #0]
 800a822:	4613      	mov	r3, r2
 800a824:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a826:	e0a9      	b.n	800a97c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a82a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a82e:	f000 80a5 	beq.w	800a97c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a832:	f7f7 fdff 	bl	8002434 <HAL_GetTick>
 800a836:	4602      	mov	r2, r0
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a83e:	429a      	cmp	r2, r3
 800a840:	d302      	bcc.n	800a848 <UART_WaitOnFlagUntilTimeout+0x32>
 800a842:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a844:	2b00      	cmp	r3, #0
 800a846:	d140      	bne.n	800a8ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a858:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a85c:	667b      	str	r3, [r7, #100]	; 0x64
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	461a      	mov	r2, r3
 800a864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a866:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a868:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a86c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a86e:	e841 2300 	strex	r3, r2, [r1]
 800a872:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1e6      	bne.n	800a848 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3308      	adds	r3, #8
 800a880:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a884:	e853 3f00 	ldrex	r3, [r3]
 800a888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88c:	f023 0301 	bic.w	r3, r3, #1
 800a890:	663b      	str	r3, [r7, #96]	; 0x60
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3308      	adds	r3, #8
 800a898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a89a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a89c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a89e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8a2:	e841 2300 	strex	r3, r2, [r1]
 800a8a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d1e5      	bne.n	800a87a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	e069      	b.n	800a99e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f003 0304 	and.w	r3, r3, #4
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d051      	beq.n	800a97c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8e6:	d149      	bne.n	800a97c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	e853 3f00 	ldrex	r3, [r3]
 800a8fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a906:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	461a      	mov	r2, r3
 800a90e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a910:	637b      	str	r3, [r7, #52]	; 0x34
 800a912:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a918:	e841 2300 	strex	r3, r2, [r1]
 800a91c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d1e6      	bne.n	800a8f2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3308      	adds	r3, #8
 800a92a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	e853 3f00 	ldrex	r3, [r3]
 800a932:	613b      	str	r3, [r7, #16]
   return(result);
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f023 0301 	bic.w	r3, r3, #1
 800a93a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	3308      	adds	r3, #8
 800a942:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a944:	623a      	str	r2, [r7, #32]
 800a946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a948:	69f9      	ldr	r1, [r7, #28]
 800a94a:	6a3a      	ldr	r2, [r7, #32]
 800a94c:	e841 2300 	strex	r3, r2, [r1]
 800a950:	61bb      	str	r3, [r7, #24]
   return(result);
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1e5      	bne.n	800a924 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2220      	movs	r2, #32
 800a95c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2220      	movs	r2, #32
 800a964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2220      	movs	r2, #32
 800a96c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a978:	2303      	movs	r3, #3
 800a97a:	e010      	b.n	800a99e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	69da      	ldr	r2, [r3, #28]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	4013      	ands	r3, r2
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	429a      	cmp	r2, r3
 800a98a:	bf0c      	ite	eq
 800a98c:	2301      	moveq	r3, #1
 800a98e:	2300      	movne	r3, #0
 800a990:	b2db      	uxtb	r3, r3
 800a992:	461a      	mov	r2, r3
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	429a      	cmp	r2, r3
 800a998:	f43f af46 	beq.w	800a828 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3770      	adds	r7, #112	; 0x70
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
	...

0800a9a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b0a3      	sub	sp, #140	; 0x8c
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	4613      	mov	r3, r2
 800a9b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	88fa      	ldrh	r2, [r7, #6]
 800a9c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	88fa      	ldrh	r2, [r7, #6]
 800a9c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9da:	d10e      	bne.n	800a9fa <UART_Start_Receive_IT+0x52>
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d105      	bne.n	800a9f0 <UART_Start_Receive_IT+0x48>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a9ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9ee:	e02d      	b.n	800aa4c <UART_Start_Receive_IT+0xa4>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	22ff      	movs	r2, #255	; 0xff
 800a9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9f8:	e028      	b.n	800aa4c <UART_Start_Receive_IT+0xa4>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10d      	bne.n	800aa1e <UART_Start_Receive_IT+0x76>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d104      	bne.n	800aa14 <UART_Start_Receive_IT+0x6c>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	22ff      	movs	r2, #255	; 0xff
 800aa0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa12:	e01b      	b.n	800aa4c <UART_Start_Receive_IT+0xa4>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	227f      	movs	r2, #127	; 0x7f
 800aa18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa1c:	e016      	b.n	800aa4c <UART_Start_Receive_IT+0xa4>
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa26:	d10d      	bne.n	800aa44 <UART_Start_Receive_IT+0x9c>
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d104      	bne.n	800aa3a <UART_Start_Receive_IT+0x92>
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	227f      	movs	r2, #127	; 0x7f
 800aa34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa38:	e008      	b.n	800aa4c <UART_Start_Receive_IT+0xa4>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	223f      	movs	r2, #63	; 0x3f
 800aa3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800aa42:	e003      	b.n	800aa4c <UART_Start_Receive_IT+0xa4>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2222      	movs	r2, #34	; 0x22
 800aa58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3308      	adds	r3, #8
 800aa62:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa66:	e853 3f00 	ldrex	r3, [r3]
 800aa6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800aa6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa6e:	f043 0301 	orr.w	r3, r3, #1
 800aa72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800aa80:	673a      	str	r2, [r7, #112]	; 0x70
 800aa82:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa84:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800aa86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aa88:	e841 2300 	strex	r3, r2, [r1]
 800aa8c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800aa8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1e3      	bne.n	800aa5c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa9c:	d14f      	bne.n	800ab3e <UART_Start_Receive_IT+0x196>
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aaa4:	88fa      	ldrh	r2, [r7, #6]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d349      	bcc.n	800ab3e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aab2:	d107      	bne.n	800aac4 <UART_Start_Receive_IT+0x11c>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d103      	bne.n	800aac4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4a46      	ldr	r2, [pc, #280]	; (800abd8 <UART_Start_Receive_IT+0x230>)
 800aac0:	675a      	str	r2, [r3, #116]	; 0x74
 800aac2:	e002      	b.n	800aaca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4a45      	ldr	r2, [pc, #276]	; (800abdc <UART_Start_Receive_IT+0x234>)
 800aac8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d01a      	beq.n	800ab08 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aaf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aaf6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aafa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ab02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e4      	bne.n	800aad2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab12:	e853 3f00 	ldrex	r3, [r3]
 800ab16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3308      	adds	r3, #8
 800ab26:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ab28:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab2a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab30:	e841 2300 	strex	r3, r2, [r1]
 800ab34:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e5      	bne.n	800ab08 <UART_Start_Receive_IT+0x160>
 800ab3c:	e046      	b.n	800abcc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab46:	d107      	bne.n	800ab58 <UART_Start_Receive_IT+0x1b0>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d103      	bne.n	800ab58 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	4a23      	ldr	r2, [pc, #140]	; (800abe0 <UART_Start_Receive_IT+0x238>)
 800ab54:	675a      	str	r2, [r3, #116]	; 0x74
 800ab56:	e002      	b.n	800ab5e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4a22      	ldr	r2, [pc, #136]	; (800abe4 <UART_Start_Receive_IT+0x23c>)
 800ab5c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d019      	beq.n	800ab9a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ab7a:	677b      	str	r3, [r7, #116]	; 0x74
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab84:	637b      	str	r3, [r7, #52]	; 0x34
 800ab86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e6      	bne.n	800ab66 <UART_Start_Receive_IT+0x1be>
 800ab98:	e018      	b.n	800abcc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	e853 3f00 	ldrex	r3, [r3]
 800aba6:	613b      	str	r3, [r7, #16]
   return(result);
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	f043 0320 	orr.w	r3, r3, #32
 800abae:	67bb      	str	r3, [r7, #120]	; 0x78
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	461a      	mov	r2, r3
 800abb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abb8:	623b      	str	r3, [r7, #32]
 800abba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	69f9      	ldr	r1, [r7, #28]
 800abbe:	6a3a      	ldr	r2, [r7, #32]
 800abc0:	e841 2300 	strex	r3, r2, [r1]
 800abc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e6      	bne.n	800ab9a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	378c      	adds	r7, #140	; 0x8c
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bc80      	pop	{r7}
 800abd6:	4770      	bx	lr
 800abd8:	0800b5bd 	.word	0x0800b5bd
 800abdc:	0800b25d 	.word	0x0800b25d
 800abe0:	0800b0a5 	.word	0x0800b0a5
 800abe4:	0800aeed 	.word	0x0800aeed

0800abe8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abe8:	b480      	push	{r7}
 800abea:	b08f      	sub	sp, #60	; 0x3c
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	61fb      	str	r3, [r7, #28]
   return(result);
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac04:	637b      	str	r3, [r7, #52]	; 0x34
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac10:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e6      	bne.n	800abf0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3308      	adds	r3, #8
 800ac28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ac38:	633b      	str	r3, [r7, #48]	; 0x30
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac42:	61ba      	str	r2, [r7, #24]
 800ac44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	6979      	ldr	r1, [r7, #20]
 800ac48:	69ba      	ldr	r2, [r7, #24]
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e5      	bne.n	800ac22 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800ac5e:	bf00      	nop
 800ac60:	373c      	adds	r7, #60	; 0x3c
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc80      	pop	{r7}
 800ac66:	4770      	bx	lr

0800ac68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b095      	sub	sp, #84	; 0x54
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac78:	e853 3f00 	ldrex	r3, [r3]
 800ac7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac84:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac8e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac96:	e841 2300 	strex	r3, r2, [r1]
 800ac9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d1e6      	bne.n	800ac70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	3308      	adds	r3, #8
 800aca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	e853 3f00 	ldrex	r3, [r3]
 800acb0:	61fb      	str	r3, [r7, #28]
   return(result);
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acb8:	f023 0301 	bic.w	r3, r3, #1
 800acbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3308      	adds	r3, #8
 800acc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800accc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acce:	e841 2300 	strex	r3, r2, [r1]
 800acd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e3      	bne.n	800aca2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d118      	bne.n	800ad14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	60bb      	str	r3, [r7, #8]
   return(result);
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	f023 0310 	bic.w	r3, r3, #16
 800acf6:	647b      	str	r3, [r7, #68]	; 0x44
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	461a      	mov	r2, r3
 800acfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad00:	61bb      	str	r3, [r7, #24]
 800ad02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	6979      	ldr	r1, [r7, #20]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e6      	bne.n	800ace2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2220      	movs	r2, #32
 800ad18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ad28:	bf00      	nop
 800ad2a:	3754      	adds	r7, #84	; 0x54
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bc80      	pop	{r7}
 800ad30:	4770      	bx	lr

0800ad32 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b090      	sub	sp, #64	; 0x40
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f003 0320 	and.w	r3, r3, #32
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d137      	bne.n	800adbe <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ad4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad50:	2200      	movs	r2, #0
 800ad52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ad56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3308      	adds	r3, #8
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad60:	e853 3f00 	ldrex	r3, [r3]
 800ad64:	623b      	str	r3, [r7, #32]
   return(result);
 800ad66:	6a3b      	ldr	r3, [r7, #32]
 800ad68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ad6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3308      	adds	r3, #8
 800ad74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad76:	633a      	str	r2, [r7, #48]	; 0x30
 800ad78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad7e:	e841 2300 	strex	r3, r2, [r1]
 800ad82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d1e5      	bne.n	800ad56 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	e853 3f00 	ldrex	r3, [r3]
 800ad96:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9e:	637b      	str	r3, [r7, #52]	; 0x34
 800ada0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	461a      	mov	r2, r3
 800ada6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adac:	69b9      	ldr	r1, [r7, #24]
 800adae:	69fa      	ldr	r2, [r7, #28]
 800adb0:	e841 2300 	strex	r3, r2, [r1]
 800adb4:	617b      	str	r3, [r7, #20]
   return(result);
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d1e6      	bne.n	800ad8a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800adbc:	e002      	b.n	800adc4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800adbe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800adc0:	f7f8 f826 	bl	8002e10 <HAL_UART_TxCpltCallback>
}
 800adc4:	bf00      	nop
 800adc6:	3740      	adds	r7, #64	; 0x40
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f7ff f99a 	bl	800a114 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ade0:	bf00      	nop
 800ade2:	3710      	adds	r7, #16
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b086      	sub	sp, #24
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adf4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adfc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae04:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae10:	2b80      	cmp	r3, #128	; 0x80
 800ae12:	d109      	bne.n	800ae28 <UART_DMAError+0x40>
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	2b21      	cmp	r3, #33	; 0x21
 800ae18:	d106      	bne.n	800ae28 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ae22:	6978      	ldr	r0, [r7, #20]
 800ae24:	f7ff fee0 	bl	800abe8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae32:	2b40      	cmp	r3, #64	; 0x40
 800ae34:	d109      	bne.n	800ae4a <UART_DMAError+0x62>
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b22      	cmp	r3, #34	; 0x22
 800ae3a:	d106      	bne.n	800ae4a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ae44:	6978      	ldr	r0, [r7, #20]
 800ae46:	f7ff ff0f 	bl	800ac68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae50:	f043 0210 	orr.w	r2, r3, #16
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae5a:	6978      	ldr	r0, [r7, #20]
 800ae5c:	f7ff f963 	bl	800a126 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae60:	bf00      	nop
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f7ff f94d 	bl	800a126 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	e853 3f00 	ldrex	r3, [r3]
 800aea8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeb0:	61fb      	str	r3, [r7, #28]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	61bb      	str	r3, [r7, #24]
 800aebc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	6979      	ldr	r1, [r7, #20]
 800aec0:	69ba      	ldr	r2, [r7, #24]
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	613b      	str	r3, [r7, #16]
   return(result);
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e6      	bne.n	800ae9c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2220      	movs	r2, #32
 800aed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7f7 ff97 	bl	8002e10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aee2:	bf00      	nop
 800aee4:	3720      	adds	r7, #32
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
	...

0800aeec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b09c      	sub	sp, #112	; 0x70
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aefa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af04:	2b22      	cmp	r3, #34	; 0x22
 800af06:	f040 80be 	bne.w	800b086 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800af14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800af18:	b2d9      	uxtb	r1, r3
 800af1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800af1e:	b2da      	uxtb	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af24:	400a      	ands	r2, r1
 800af26:	b2d2      	uxtb	r2, r2
 800af28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af2e:	1c5a      	adds	r2, r3, #1
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	3b01      	subs	r3, #1
 800af3e:	b29a      	uxth	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f040 80a1 	bne.w	800b096 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af5c:	e853 3f00 	ldrex	r3, [r3]
 800af60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af68:	66bb      	str	r3, [r7, #104]	; 0x68
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af72:	65bb      	str	r3, [r7, #88]	; 0x58
 800af74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1e6      	bne.n	800af54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	3308      	adds	r3, #8
 800af8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af98:	f023 0301 	bic.w	r3, r3, #1
 800af9c:	667b      	str	r3, [r7, #100]	; 0x64
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3308      	adds	r3, #8
 800afa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afa6:	647a      	str	r2, [r7, #68]	; 0x44
 800afa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d1e5      	bne.n	800af86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a33      	ldr	r2, [pc, #204]	; (800b0a0 <UART_RxISR_8BIT+0x1b4>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d01f      	beq.n	800b018 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	685b      	ldr	r3, [r3, #4]
 800afde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d018      	beq.n	800b018 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	e853 3f00 	ldrex	r3, [r3]
 800aff2:	623b      	str	r3, [r7, #32]
   return(result);
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800affa:	663b      	str	r3, [r7, #96]	; 0x60
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b004:	633b      	str	r3, [r7, #48]	; 0x30
 800b006:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b00c:	e841 2300 	strex	r3, r2, [r1]
 800b010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1e6      	bne.n	800afe6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d12e      	bne.n	800b07e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	e853 3f00 	ldrex	r3, [r3]
 800b032:	60fb      	str	r3, [r7, #12]
   return(result);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0310 	bic.w	r3, r3, #16
 800b03a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	461a      	mov	r2, r3
 800b042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b044:	61fb      	str	r3, [r7, #28]
 800b046:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b048:	69b9      	ldr	r1, [r7, #24]
 800b04a:	69fa      	ldr	r2, [r7, #28]
 800b04c:	e841 2300 	strex	r3, r2, [r1]
 800b050:	617b      	str	r3, [r7, #20]
   return(result);
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1e6      	bne.n	800b026 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	69db      	ldr	r3, [r3, #28]
 800b05e:	f003 0310 	and.w	r3, r3, #16
 800b062:	2b10      	cmp	r3, #16
 800b064:	d103      	bne.n	800b06e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2210      	movs	r2, #16
 800b06c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff f85e 	bl	800a138 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b07c:	e00b      	b.n	800b096 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f7f7 fedc 	bl	8002e3c <HAL_UART_RxCpltCallback>
}
 800b084:	e007      	b.n	800b096 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	699a      	ldr	r2, [r3, #24]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f042 0208 	orr.w	r2, r2, #8
 800b094:	619a      	str	r2, [r3, #24]
}
 800b096:	bf00      	nop
 800b098:	3770      	adds	r7, #112	; 0x70
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	40008000 	.word	0x40008000

0800b0a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b09c      	sub	sp, #112	; 0x70
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b0b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0bc:	2b22      	cmp	r3, #34	; 0x22
 800b0be:	f040 80be 	bne.w	800b23e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0d0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b0d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b0d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b0da:	4013      	ands	r3, r2
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e6:	1c9a      	adds	r2, r3, #2
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b104:	b29b      	uxth	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	f040 80a1 	bne.w	800b24e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b114:	e853 3f00 	ldrex	r3, [r3]
 800b118:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b11a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b11c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b120:	667b      	str	r3, [r7, #100]	; 0x64
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b12a:	657b      	str	r3, [r7, #84]	; 0x54
 800b12c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b132:	e841 2300 	strex	r3, r2, [r1]
 800b136:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1e6      	bne.n	800b10c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	3308      	adds	r3, #8
 800b144:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b148:	e853 3f00 	ldrex	r3, [r3]
 800b14c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	f023 0301 	bic.w	r3, r3, #1
 800b154:	663b      	str	r3, [r7, #96]	; 0x60
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3308      	adds	r3, #8
 800b15c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b15e:	643a      	str	r2, [r7, #64]	; 0x40
 800b160:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b162:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b166:	e841 2300 	strex	r3, r2, [r1]
 800b16a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1e5      	bne.n	800b13e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2220      	movs	r2, #32
 800b176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4a33      	ldr	r2, [pc, #204]	; (800b258 <UART_RxISR_16BIT+0x1b4>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d01f      	beq.n	800b1d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d018      	beq.n	800b1d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	6a3b      	ldr	r3, [r7, #32]
 800b1a6:	e853 3f00 	ldrex	r3, [r3]
 800b1aa:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1ac:	69fb      	ldr	r3, [r7, #28]
 800b1ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1be:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c4:	e841 2300 	strex	r3, r2, [r1]
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e6      	bne.n	800b19e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d12e      	bne.n	800b236 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	e853 3f00 	ldrex	r3, [r3]
 800b1ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	f023 0310 	bic.w	r3, r3, #16
 800b1f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b1fc:	61bb      	str	r3, [r7, #24]
 800b1fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b200:	6979      	ldr	r1, [r7, #20]
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	e841 2300 	strex	r3, r2, [r1]
 800b208:	613b      	str	r3, [r7, #16]
   return(result);
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1e6      	bne.n	800b1de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	f003 0310 	and.w	r3, r3, #16
 800b21a:	2b10      	cmp	r3, #16
 800b21c:	d103      	bne.n	800b226 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2210      	movs	r2, #16
 800b224:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b22c:	4619      	mov	r1, r3
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7fe ff82 	bl	800a138 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b234:	e00b      	b.n	800b24e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7f7 fe00 	bl	8002e3c <HAL_UART_RxCpltCallback>
}
 800b23c:	e007      	b.n	800b24e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	699a      	ldr	r2, [r3, #24]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f042 0208 	orr.w	r2, r2, #8
 800b24c:	619a      	str	r2, [r3, #24]
}
 800b24e:	bf00      	nop
 800b250:	3770      	adds	r7, #112	; 0x70
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	40008000 	.word	0x40008000

0800b25c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b0ac      	sub	sp, #176	; 0xb0
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b26a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b292:	2b22      	cmp	r3, #34	; 0x22
 800b294:	f040 8182 	bne.w	800b59c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b29e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b2a2:	e125      	b.n	800b4f0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2aa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b2ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b2b2:	b2d9      	uxtb	r1, r3
 800b2b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2be:	400a      	ands	r2, r1
 800b2c0:	b2d2      	uxtb	r2, r2
 800b2c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b2ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2ee:	f003 0307 	and.w	r3, r3, #7
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d053      	beq.n	800b39e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b2f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d011      	beq.n	800b326 <UART_RxISR_8BIT_FIFOEN+0xca>
 800b302:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00b      	beq.n	800b326 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	2201      	movs	r2, #1
 800b314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b31c:	f043 0201 	orr.w	r2, r3, #1
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b32a:	f003 0302 	and.w	r3, r3, #2
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d011      	beq.n	800b356 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b336:	f003 0301 	and.w	r3, r3, #1
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00b      	beq.n	800b356 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2202      	movs	r2, #2
 800b344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34c:	f043 0204 	orr.w	r2, r3, #4
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d011      	beq.n	800b386 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00b      	beq.n	800b386 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2204      	movs	r2, #4
 800b374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b37c:	f043 0202 	orr.w	r2, r3, #2
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d006      	beq.n	800b39e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7fe fec8 	bl	800a126 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b3a4:	b29b      	uxth	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f040 80a2 	bne.w	800b4f0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800b3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b3ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3d0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800b3d4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b3d6:	e841 2300 	strex	r3, r2, [r1]
 800b3da:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800b3dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1e4      	bne.n	800b3ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	3308      	adds	r3, #8
 800b3e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b3ec:	e853 3f00 	ldrex	r3, [r3]
 800b3f0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b3f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b3f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3f8:	f023 0301 	bic.w	r3, r3, #1
 800b3fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	3308      	adds	r3, #8
 800b406:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b40a:	66ba      	str	r2, [r7, #104]	; 0x68
 800b40c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b40e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b410:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b412:	e841 2300 	strex	r3, r2, [r1]
 800b416:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1e1      	bne.n	800b3e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2220      	movs	r2, #32
 800b422:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a5f      	ldr	r2, [pc, #380]	; (800b5b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d021      	beq.n	800b480 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b446:	2b00      	cmp	r3, #0
 800b448:	d01a      	beq.n	800b480 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b452:	e853 3f00 	ldrex	r3, [r3]
 800b456:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b45a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b45e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	461a      	mov	r2, r3
 800b468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b46c:	657b      	str	r3, [r7, #84]	; 0x54
 800b46e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b470:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b472:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b474:	e841 2300 	strex	r3, r2, [r1]
 800b478:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b47a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e4      	bne.n	800b44a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b484:	2b01      	cmp	r3, #1
 800b486:	d130      	bne.n	800b4ea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b496:	e853 3f00 	ldrex	r3, [r3]
 800b49a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	f023 0310 	bic.w	r3, r3, #16
 800b4a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4b0:	643b      	str	r3, [r7, #64]	; 0x40
 800b4b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4b8:	e841 2300 	strex	r3, r2, [r1]
 800b4bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1e4      	bne.n	800b48e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	69db      	ldr	r3, [r3, #28]
 800b4ca:	f003 0310 	and.w	r3, r3, #16
 800b4ce:	2b10      	cmp	r3, #16
 800b4d0:	d103      	bne.n	800b4da <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2210      	movs	r2, #16
 800b4d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7fe fe28 	bl	800a138 <HAL_UARTEx_RxEventCallback>
 800b4e8:	e002      	b.n	800b4f0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7f7 fca6 	bl	8002e3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b4f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d006      	beq.n	800b506 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800b4f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4fc:	f003 0320 	and.w	r3, r3, #32
 800b500:	2b00      	cmp	r3, #0
 800b502:	f47f aecf 	bne.w	800b2a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b50c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b510:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b514:	2b00      	cmp	r3, #0
 800b516:	d049      	beq.n	800b5ac <UART_RxISR_8BIT_FIFOEN+0x350>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b51e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b522:	429a      	cmp	r2, r3
 800b524:	d242      	bcs.n	800b5ac <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3308      	adds	r3, #8
 800b52c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	e853 3f00 	ldrex	r3, [r3]
 800b534:	61fb      	str	r3, [r7, #28]
   return(result);
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b53c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	3308      	adds	r3, #8
 800b546:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b54a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b54c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b54e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b552:	e841 2300 	strex	r3, r2, [r1]
 800b556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d1e3      	bne.n	800b526 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a15      	ldr	r2, [pc, #84]	; (800b5b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b562:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	60bb      	str	r3, [r7, #8]
   return(result);
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	f043 0320 	orr.w	r3, r3, #32
 800b578:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b586:	61bb      	str	r3, [r7, #24]
 800b588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6979      	ldr	r1, [r7, #20]
 800b58c:	69ba      	ldr	r2, [r7, #24]
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	613b      	str	r3, [r7, #16]
   return(result);
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e4      	bne.n	800b564 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b59a:	e007      	b.n	800b5ac <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	699a      	ldr	r2, [r3, #24]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f042 0208 	orr.w	r2, r2, #8
 800b5aa:	619a      	str	r2, [r3, #24]
}
 800b5ac:	bf00      	nop
 800b5ae:	37b0      	adds	r7, #176	; 0xb0
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	40008000 	.word	0x40008000
 800b5b8:	0800aeed 	.word	0x0800aeed

0800b5bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b0ae      	sub	sp, #184	; 0xb8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b5ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	69db      	ldr	r3, [r3, #28]
 800b5d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5f2:	2b22      	cmp	r3, #34	; 0x22
 800b5f4:	f040 8186 	bne.w	800b904 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b602:	e129      	b.n	800b858 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b616:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b61a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b61e:	4013      	ands	r3, r2
 800b620:	b29a      	uxth	r2, r3
 800b622:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b626:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62c:	1c9a      	adds	r2, r3, #2
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b638:	b29b      	uxth	r3, r3
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	69db      	ldr	r3, [r3, #28]
 800b64a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b64e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b652:	f003 0307 	and.w	r3, r3, #7
 800b656:	2b00      	cmp	r3, #0
 800b658:	d053      	beq.n	800b702 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b65a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	2b00      	cmp	r3, #0
 800b664:	d011      	beq.n	800b68a <UART_RxISR_16BIT_FIFOEN+0xce>
 800b666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00b      	beq.n	800b68a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2201      	movs	r2, #1
 800b678:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b680:	f043 0201 	orr.w	r2, r3, #1
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b68a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d011      	beq.n	800b6ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b69a:	f003 0301 	and.w	r3, r3, #1
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00b      	beq.n	800b6ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b0:	f043 0204 	orr.w	r2, r3, #4
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b6be:	f003 0304 	and.w	r3, r3, #4
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d011      	beq.n	800b6ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b6c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6ca:	f003 0301 	and.w	r3, r3, #1
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00b      	beq.n	800b6ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	2204      	movs	r2, #4
 800b6d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6e0:	f043 0202 	orr.w	r2, r3, #2
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d006      	beq.n	800b702 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7fe fd16 	bl	800a126 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b708:	b29b      	uxth	r3, r3
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	f040 80a4 	bne.w	800b858 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b718:	e853 3f00 	ldrex	r3, [r3]
 800b71c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b71e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	461a      	mov	r2, r3
 800b72e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b732:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b736:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b738:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b73a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b73e:	e841 2300 	strex	r3, r2, [r1]
 800b742:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1e2      	bne.n	800b710 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3308      	adds	r3, #8
 800b750:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b754:	e853 3f00 	ldrex	r3, [r3]
 800b758:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b75a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b75c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b760:	f023 0301 	bic.w	r3, r3, #1
 800b764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3308      	adds	r3, #8
 800b76e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b772:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b774:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b776:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b778:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b77a:	e841 2300 	strex	r3, r2, [r1]
 800b77e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1e1      	bne.n	800b74a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2220      	movs	r2, #32
 800b78a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a5f      	ldr	r2, [pc, #380]	; (800b91c <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d021      	beq.n	800b7e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d01a      	beq.n	800b7e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ba:	e853 3f00 	ldrex	r3, [r3]
 800b7be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b7c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b7d4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7dc:	e841 2300 	strex	r3, r2, [r1]
 800b7e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b7e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1e4      	bne.n	800b7b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d130      	bne.n	800b852 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7fe:	e853 3f00 	ldrex	r3, [r3]
 800b802:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b806:	f023 0310 	bic.w	r3, r3, #16
 800b80a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	461a      	mov	r2, r3
 800b814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b818:	647b      	str	r3, [r7, #68]	; 0x44
 800b81a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b820:	e841 2300 	strex	r3, r2, [r1]
 800b824:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d1e4      	bne.n	800b7f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	f003 0310 	and.w	r3, r3, #16
 800b836:	2b10      	cmp	r3, #16
 800b838:	d103      	bne.n	800b842 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2210      	movs	r2, #16
 800b840:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b848:	4619      	mov	r1, r3
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f7fe fc74 	bl	800a138 <HAL_UARTEx_RxEventCallback>
 800b850:	e002      	b.n	800b858 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7f7 faf2 	bl	8002e3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b858:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d006      	beq.n	800b86e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800b860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b864:	f003 0320 	and.w	r3, r3, #32
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f47f aecb 	bne.w	800b604 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b874:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b878:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d049      	beq.n	800b914 <UART_RxISR_16BIT_FIFOEN+0x358>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b886:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d242      	bcs.n	800b914 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3308      	adds	r3, #8
 800b894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	e853 3f00 	ldrex	r3, [r3]
 800b89c:	623b      	str	r3, [r7, #32]
   return(result);
 800b89e:	6a3b      	ldr	r3, [r7, #32]
 800b8a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	3308      	adds	r3, #8
 800b8ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b8b2:	633a      	str	r2, [r7, #48]	; 0x30
 800b8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b8b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8ba:	e841 2300 	strex	r3, r2, [r1]
 800b8be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e3      	bne.n	800b88e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a15      	ldr	r2, [pc, #84]	; (800b920 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b8ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	e853 3f00 	ldrex	r3, [r3]
 800b8d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f043 0320 	orr.w	r3, r3, #32
 800b8e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f2:	69b9      	ldr	r1, [r7, #24]
 800b8f4:	69fa      	ldr	r2, [r7, #28]
 800b8f6:	e841 2300 	strex	r3, r2, [r1]
 800b8fa:	617b      	str	r3, [r7, #20]
   return(result);
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e4      	bne.n	800b8cc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b902:	e007      	b.n	800b914 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	699a      	ldr	r2, [r3, #24]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f042 0208 	orr.w	r2, r2, #8
 800b912:	619a      	str	r2, [r3, #24]
}
 800b914:	bf00      	nop
 800b916:	37b8      	adds	r7, #184	; 0xb8
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}
 800b91c:	40008000 	.word	0x40008000
 800b920:	0800b0a5 	.word	0x0800b0a5

0800b924 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	bc80      	pop	{r7}
 800b934:	4770      	bx	lr

0800b936 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b936:	b480      	push	{r7}
 800b938:	b083      	sub	sp, #12
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b93e:	bf00      	nop
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	bc80      	pop	{r7}
 800b946:	4770      	bx	lr

0800b948 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	bc80      	pop	{r7}
 800b958:	4770      	bx	lr

0800b95a <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b088      	sub	sp, #32
 800b95e:	af02      	add	r7, sp, #8
 800b960:	60f8      	str	r0, [r7, #12]
 800b962:	1d3b      	adds	r3, r7, #4
 800b964:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800b968:	2300      	movs	r3, #0
 800b96a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b972:	2b01      	cmp	r3, #1
 800b974:	d101      	bne.n	800b97a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800b976:	2302      	movs	r3, #2
 800b978:	e046      	b.n	800ba08 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2224      	movs	r2, #36	; 0x24
 800b986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f022 0201 	bic.w	r2, r2, #1
 800b998:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d105      	bne.n	800b9c0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800b9b4:	1d3b      	adds	r3, r7, #4
 800b9b6:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f000 f911 	bl	800bbe2 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f042 0201 	orr.w	r2, r2, #1
 800b9ce:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9d0:	f7f6 fd30 	bl	8002434 <HAL_GetTick>
 800b9d4:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7fe ff16 	bl	800a816 <UART_WaitOnFlagUntilTimeout>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d002      	beq.n	800b9f6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	75fb      	strb	r3, [r7, #23]
 800b9f4:	e003      	b.n	800b9fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b089      	sub	sp, #36	; 0x24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d101      	bne.n	800ba26 <HAL_UARTEx_EnableStopMode+0x16>
 800ba22:	2302      	movs	r3, #2
 800ba24:	e021      	b.n	800ba6a <HAL_UARTEx_EnableStopMode+0x5a>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	e853 3f00 	ldrex	r3, [r3]
 800ba3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f043 0302 	orr.w	r3, r3, #2
 800ba42:	61fb      	str	r3, [r7, #28]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	461a      	mov	r2, r3
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	61bb      	str	r3, [r7, #24]
 800ba4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba50:	6979      	ldr	r1, [r7, #20]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	e841 2300 	strex	r3, r2, [r1]
 800ba58:	613b      	str	r3, [r7, #16]
   return(result);
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1e6      	bne.n	800ba2e <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3724      	adds	r7, #36	; 0x24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bc80      	pop	{r7}
 800ba72:	4770      	bx	lr

0800ba74 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d101      	bne.n	800ba8a <HAL_UARTEx_EnableFifoMode+0x16>
 800ba86:	2302      	movs	r3, #2
 800ba88:	e02b      	b.n	800bae2 <HAL_UARTEx_EnableFifoMode+0x6e>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2224      	movs	r2, #36	; 0x24
 800ba96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f022 0201 	bic.w	r2, r2, #1
 800bab0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bab8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800bac0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68fa      	ldr	r2, [r7, #12]
 800bac8:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f8ac 	bl	800bc28 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
 800baf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bafe:	2302      	movs	r3, #2
 800bb00:	e02d      	b.n	800bb5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2224      	movs	r2, #36	; 0x24
 800bb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0201 	bic.w	r2, r2, #1
 800bb28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	430a      	orrs	r2, r1
 800bb3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f872 	bl	800bc28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d101      	bne.n	800bb7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	e02d      	b.n	800bbda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2224      	movs	r2, #36	; 0x24
 800bb8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f022 0201 	bic.w	r2, r2, #1
 800bba4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	689b      	ldr	r3, [r3, #8]
 800bbac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	683a      	ldr	r2, [r7, #0]
 800bbb6:	430a      	orrs	r2, r1
 800bbb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f834 	bl	800bc28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2220      	movs	r2, #32
 800bbcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbd8:	2300      	movs	r3, #0
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	b085      	sub	sp, #20
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	1d3b      	adds	r3, r7, #4
 800bbec:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	f023 0210 	bic.w	r2, r3, #16
 800bbfa:	893b      	ldrh	r3, [r7, #8]
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	430a      	orrs	r2, r1
 800bc04:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800bc10:	7abb      	ldrb	r3, [r7, #10]
 800bc12:	061a      	lsls	r2, r3, #24
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	430a      	orrs	r2, r1
 800bc1a:	605a      	str	r2, [r3, #4]
}
 800bc1c:	bf00      	nop
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bc80      	pop	{r7}
 800bc24:	4770      	bx	lr
	...

0800bc28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b085      	sub	sp, #20
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d108      	bne.n	800bc4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc48:	e031      	b.n	800bcae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc4a:	2308      	movs	r3, #8
 800bc4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc4e:	2308      	movs	r3, #8
 800bc50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	0e5b      	lsrs	r3, r3, #25
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	f003 0307 	and.w	r3, r3, #7
 800bc60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	0f5b      	lsrs	r3, r3, #29
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	f003 0307 	and.w	r3, r3, #7
 800bc70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc72:	7bbb      	ldrb	r3, [r7, #14]
 800bc74:	7b3a      	ldrb	r2, [r7, #12]
 800bc76:	4910      	ldr	r1, [pc, #64]	; (800bcb8 <UARTEx_SetNbDataToProcess+0x90>)
 800bc78:	5c8a      	ldrb	r2, [r1, r2]
 800bc7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc7e:	7b3a      	ldrb	r2, [r7, #12]
 800bc80:	490e      	ldr	r1, [pc, #56]	; (800bcbc <UARTEx_SetNbDataToProcess+0x94>)
 800bc82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc84:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
 800bc92:	7b7a      	ldrb	r2, [r7, #13]
 800bc94:	4908      	ldr	r1, [pc, #32]	; (800bcb8 <UARTEx_SetNbDataToProcess+0x90>)
 800bc96:	5c8a      	ldrb	r2, [r1, r2]
 800bc98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc9c:	7b7a      	ldrb	r2, [r7, #13]
 800bc9e:	4907      	ldr	r1, [pc, #28]	; (800bcbc <UARTEx_SetNbDataToProcess+0x94>)
 800bca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bca2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bcae:	bf00      	nop
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bc80      	pop	{r7}
 800bcb6:	4770      	bx	lr
 800bcb8:	0801ea1c 	.word	0x0801ea1c
 800bcbc:	0801ea24 	.word	0x0801ea24

0800bcc0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800bcc4:	f7f6 fa5c 	bl	8002180 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800bcc8:	f000 f818 	bl	800bcfc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800bccc:	bf00      	nop
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800bcd4:	f3bf 8f4f 	dsb	sy
}
 800bcd8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800bcda:	4b06      	ldr	r3, [pc, #24]	; (800bcf4 <__NVIC_SystemReset+0x24>)
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800bce2:	4904      	ldr	r1, [pc, #16]	; (800bcf4 <__NVIC_SystemReset+0x24>)
 800bce4:	4b04      	ldr	r3, [pc, #16]	; (800bcf8 <__NVIC_SystemReset+0x28>)
 800bce6:	4313      	orrs	r3, r2
 800bce8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bcea:	f3bf 8f4f 	dsb	sy
}
 800bcee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800bcf0:	bf00      	nop
 800bcf2:	e7fd      	b.n	800bcf0 <__NVIC_SystemReset+0x20>
 800bcf4:	e000ed00 	.word	0xe000ed00
 800bcf8:	05fa0004 	.word	0x05fa0004

0800bcfc <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800bd06:	2300      	movs	r3, #0
 800bd08:	9302      	str	r3, [sp, #8]
 800bd0a:	2303      	movs	r3, #3
 800bd0c:	9301      	str	r3, [sp, #4]
 800bd0e:	2301      	movs	r3, #1
 800bd10:	9300      	str	r3, [sp, #0]
 800bd12:	4b59      	ldr	r3, [pc, #356]	; (800be78 <LoRaWAN_Init+0x17c>)
 800bd14:	2200      	movs	r2, #0
 800bd16:	2100      	movs	r1, #0
 800bd18:	2002      	movs	r0, #2
 800bd1a:	f011 fe27 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9302      	str	r3, [sp, #8]
 800bd22:	2305      	movs	r3, #5
 800bd24:	9301      	str	r3, [sp, #4]
 800bd26:	2302      	movs	r3, #2
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	4b54      	ldr	r3, [pc, #336]	; (800be7c <LoRaWAN_Init+0x180>)
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2100      	movs	r1, #0
 800bd30:	2002      	movs	r0, #2
 800bd32:	f011 fe1b 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800bd36:	2300      	movs	r3, #0
 800bd38:	9302      	str	r3, [sp, #8]
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	9301      	str	r3, [sp, #4]
 800bd3e:	2301      	movs	r3, #1
 800bd40:	9300      	str	r3, [sp, #0]
 800bd42:	4b4f      	ldr	r3, [pc, #316]	; (800be80 <LoRaWAN_Init+0x184>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	2002      	movs	r0, #2
 800bd4a:	f011 fe0f 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800bd4e:	1d3b      	adds	r3, r7, #4
 800bd50:	4619      	mov	r1, r3
 800bd52:	2000      	movs	r0, #0
 800bd54:	f003 fa2e 	bl	800f1b4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	0e1b      	lsrs	r3, r3, #24
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	461a      	mov	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	0c1b      	lsrs	r3, r3, #16
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	4619      	mov	r1, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	0a1b      	lsrs	r3, r3, #8
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	9302      	str	r3, [sp, #8]
 800bd70:	9101      	str	r1, [sp, #4]
 800bd72:	9200      	str	r2, [sp, #0]
 800bd74:	4b43      	ldr	r3, [pc, #268]	; (800be84 <LoRaWAN_Init+0x188>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	2100      	movs	r1, #0
 800bd7a:	2002      	movs	r0, #2
 800bd7c:	f011 fdf6 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800bd80:	1d3b      	adds	r3, r7, #4
 800bd82:	4619      	mov	r1, r3
 800bd84:	2001      	movs	r0, #1
 800bd86:	f003 fa15 	bl	800f1b4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	0e1b      	lsrs	r3, r3, #24
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	461a      	mov	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	0c1b      	lsrs	r3, r3, #16
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	4619      	mov	r1, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	0a1b      	lsrs	r3, r3, #8
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	b2c0      	uxtb	r0, r0
 800bda4:	9003      	str	r0, [sp, #12]
 800bda6:	9302      	str	r3, [sp, #8]
 800bda8:	9101      	str	r1, [sp, #4]
 800bdaa:	9200      	str	r2, [sp, #0]
 800bdac:	4b36      	ldr	r3, [pc, #216]	; (800be88 <LoRaWAN_Init+0x18c>)
 800bdae:	2200      	movs	r2, #0
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	2002      	movs	r0, #2
 800bdb4:	f011 fdda 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	4b33      	ldr	r3, [pc, #204]	; (800be8c <LoRaWAN_Init+0x190>)
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bdc4:	4832      	ldr	r0, [pc, #200]	; (800be90 <LoRaWAN_Init+0x194>)
 800bdc6:	f011 fb23 	bl	801d410 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	4b31      	ldr	r3, [pc, #196]	; (800be94 <LoRaWAN_Init+0x198>)
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bdd6:	4830      	ldr	r0, [pc, #192]	; (800be98 <LoRaWAN_Init+0x19c>)
 800bdd8:	f011 fb1a 	bl	801d410 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800bddc:	2300      	movs	r3, #0
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	4b2e      	ldr	r3, [pc, #184]	; (800be9c <LoRaWAN_Init+0x1a0>)
 800bde2:	2201      	movs	r2, #1
 800bde4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bde8:	482d      	ldr	r0, [pc, #180]	; (800bea0 <LoRaWAN_Init+0x1a4>)
 800bdea:	f011 fb11 	bl	801d410 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800bdee:	2300      	movs	r3, #0
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	4b2c      	ldr	r3, [pc, #176]	; (800bea4 <LoRaWAN_Init+0x1a8>)
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800bdfa:	482b      	ldr	r0, [pc, #172]	; (800bea8 <LoRaWAN_Init+0x1ac>)
 800bdfc:	f011 fb08 	bl	801d410 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800be00:	4a2a      	ldr	r2, [pc, #168]	; (800beac <LoRaWAN_Init+0x1b0>)
 800be02:	2100      	movs	r1, #0
 800be04:	2001      	movs	r0, #1
 800be06:	f011 fa6b 	bl	801d2e0 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800be0a:	4a29      	ldr	r2, [pc, #164]	; (800beb0 <LoRaWAN_Init+0x1b4>)
 800be0c:	2100      	movs	r1, #0
 800be0e:	2002      	movs	r0, #2
 800be10:	f011 fa66 	bl	801d2e0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800be14:	4a27      	ldr	r2, [pc, #156]	; (800beb4 <LoRaWAN_Init+0x1b8>)
 800be16:	2100      	movs	r1, #0
 800be18:	2004      	movs	r0, #4
 800be1a:	f011 fa61 	bl	801d2e0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800be1e:	4a26      	ldr	r2, [pc, #152]	; (800beb8 <LoRaWAN_Init+0x1bc>)
 800be20:	2100      	movs	r1, #0
 800be22:	2008      	movs	r0, #8
 800be24:	f011 fa5c 	bl	801d2e0 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800be28:	f000 fd22 	bl	800c870 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800be2c:	4923      	ldr	r1, [pc, #140]	; (800bebc <LoRaWAN_Init+0x1c0>)
 800be2e:	4824      	ldr	r0, [pc, #144]	; (800bec0 <LoRaWAN_Init+0x1c4>)
 800be30:	f002 fa32 	bl	800e298 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800be34:	4823      	ldr	r0, [pc, #140]	; (800bec4 <LoRaWAN_Init+0x1c8>)
 800be36:	f002 fa9d 	bl	800e374 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800be3a:	4819      	ldr	r0, [pc, #100]	; (800bea0 <LoRaWAN_Init+0x1a4>)
 800be3c:	f011 fb1e 	bl	801d47c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800be40:	4b21      	ldr	r3, [pc, #132]	; (800bec8 <LoRaWAN_Init+0x1cc>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	4a21      	ldr	r2, [pc, #132]	; (800becc <LoRaWAN_Init+0x1d0>)
 800be46:	7812      	ldrb	r2, [r2, #0]
 800be48:	4611      	mov	r1, r2
 800be4a:	4618      	mov	r0, r3
 800be4c:	f002 fbea 	bl	800e624 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800be50:	4b1f      	ldr	r3, [pc, #124]	; (800bed0 <LoRaWAN_Init+0x1d4>)
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d10b      	bne.n	800be70 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800be58:	4b1e      	ldr	r3, [pc, #120]	; (800bed4 <LoRaWAN_Init+0x1d8>)
 800be5a:	6819      	ldr	r1, [r3, #0]
 800be5c:	2300      	movs	r3, #0
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	4b1d      	ldr	r3, [pc, #116]	; (800bed8 <LoRaWAN_Init+0x1dc>)
 800be62:	2200      	movs	r2, #0
 800be64:	481d      	ldr	r0, [pc, #116]	; (800bedc <LoRaWAN_Init+0x1e0>)
 800be66:	f011 fad3 	bl	801d410 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800be6a:	481c      	ldr	r0, [pc, #112]	; (800bedc <LoRaWAN_Init+0x1e0>)
 800be6c:	f011 fb06 	bl	801d47c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800be70:	bf00      	nop
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}
 800be78:	0801e0dc 	.word	0x0801e0dc
 800be7c:	0801e100 	.word	0x0801e100
 800be80:	0801e124 	.word	0x0801e124
 800be84:	0801e148 	.word	0x0801e148
 800be88:	0801e16c 	.word	0x0801e16c
 800be8c:	0800c391 	.word	0x0800c391
 800be90:	200004a4 	.word	0x200004a4
 800be94:	0800c3a3 	.word	0x0800c3a3
 800be98:	200004bc 	.word	0x200004bc
 800be9c:	0800c3b5 	.word	0x0800c3b5
 800bea0:	200004d4 	.word	0x200004d4
 800bea4:	0800c771 	.word	0x0800c771
 800bea8:	20000398 	.word	0x20000398
 800beac:	0800e5b9 	.word	0x0800e5b9
 800beb0:	0800c051 	.word	0x0800c051
 800beb4:	0800c795 	.word	0x0800c795
 800beb8:	0800c6f1 	.word	0x0800c6f1
 800bebc:	01030000 	.word	0x01030000
 800bec0:	20000024 	.word	0x20000024
 800bec4:	20000070 	.word	0x20000070
 800bec8:	20000020 	.word	0x20000020
 800becc:	20000021 	.word	0x20000021
 800bed0:	2000037c 	.word	0x2000037c
 800bed4:	20000088 	.word	0x20000088
 800bed8:	0800c36d 	.word	0x0800c36d
 800bedc:	20000380 	.word	0x20000380

0800bee0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800beea:	88fb      	ldrh	r3, [r7, #6]
 800beec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bef0:	d104      	bne.n	800befc <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800bef2:	2100      	movs	r1, #0
 800bef4:	2002      	movs	r0, #2
 800bef6:	f011 fa15 	bl	801d324 <UTIL_SEQ_SetTask>
      }
      break;
 800befa:	e000      	b.n	800befe <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800befc:	bf00      	nop
  }
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
	...

0800bf08 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800bf08:	b5b0      	push	{r4, r5, r7, lr}
 800bf0a:	b08a      	sub	sp, #40	; 0x28
 800bf0c:	af06      	add	r7, sp, #24
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 8086 	beq.w	800c02a <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800bf1e:	4845      	ldr	r0, [pc, #276]	; (800c034 <OnRxData+0x12c>)
 800bf20:	f011 faac 	bl	801d47c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d05a      	beq.n	800bfe2 <OnRxData+0xda>
    {
      if (appData != NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d057      	beq.n	800bfe2 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d050      	beq.n	800bfe2 <OnRxData+0xda>
        {
          switch (appData->Port)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d01f      	beq.n	800bf88 <OnRxData+0x80>
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d145      	bne.n	800bfd8 <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	785b      	ldrb	r3, [r3, #1]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d143      	bne.n	800bfdc <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d00e      	beq.n	800bf7c <OnRxData+0x74>
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	dc10      	bgt.n	800bf84 <OnRxData+0x7c>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <OnRxData+0x64>
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d004      	beq.n	800bf74 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800bf6a:	e00b      	b.n	800bf84 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	f002 fd0d 	bl	800e98c <LmHandlerRequestClass>
                    break;
 800bf72:	e008      	b.n	800bf86 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 800bf74:	2001      	movs	r0, #1
 800bf76:	f002 fd09 	bl	800e98c <LmHandlerRequestClass>
                    break;
 800bf7a:	e004      	b.n	800bf86 <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 800bf7c:	2002      	movs	r0, #2
 800bf7e:	f002 fd05 	bl	800e98c <LmHandlerRequestClass>
                    break;
 800bf82:	e000      	b.n	800bf86 <OnRxData+0x7e>
                    break;
 800bf84:	bf00      	nop
                }
              }
              break;
 800bf86:	e029      	b.n	800bfdc <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	785b      	ldrb	r3, [r3, #1]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d127      	bne.n	800bfe0 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	f003 0301 	and.w	r3, r3, #1
 800bf9a:	b2da      	uxtb	r2, r3
 800bf9c:	4b26      	ldr	r3, [pc, #152]	; (800c038 <OnRxData+0x130>)
 800bf9e:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800bfa0:	4b25      	ldr	r3, [pc, #148]	; (800c038 <OnRxData+0x130>)
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10b      	bne.n	800bfc0 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800bfa8:	4b24      	ldr	r3, [pc, #144]	; (800c03c <OnRxData+0x134>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	2100      	movs	r1, #0
 800bfae:	2003      	movs	r0, #3
 800bfb0:	f011 fcdc 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	2120      	movs	r1, #32
 800bfb8:	4821      	ldr	r0, [pc, #132]	; (800c040 <OnRxData+0x138>)
 800bfba:	f7fa faff 	bl	80065bc <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800bfbe:	e00f      	b.n	800bfe0 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800bfc0:	4b20      	ldr	r3, [pc, #128]	; (800c044 <OnRxData+0x13c>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	2003      	movs	r0, #3
 800bfc8:	f011 fcd0 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2120      	movs	r1, #32
 800bfd0:	481b      	ldr	r0, [pc, #108]	; (800c040 <OnRxData+0x138>)
 800bfd2:	f7fa faf3 	bl	80065bc <HAL_GPIO_WritePin>
              break;
 800bfd6:	e003      	b.n	800bfe0 <OnRxData+0xd8>

            default:

              break;
 800bfd8:	bf00      	nop
 800bfda:	e002      	b.n	800bfe2 <OnRxData+0xda>
              break;
 800bfdc:	bf00      	nop
 800bfde:	e000      	b.n	800bfe2 <OnRxData+0xda>
              break;
 800bfe0:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	7c1b      	ldrb	r3, [r3, #16]
 800bfe6:	2b05      	cmp	r3, #5
 800bfe8:	d81f      	bhi.n	800c02a <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	7bfa      	ldrb	r2, [r7, #15]
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800bff6:	460c      	mov	r4, r1
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	7c09      	ldrb	r1, [r1, #16]
 800bffc:	4608      	mov	r0, r1
 800bffe:	4912      	ldr	r1, [pc, #72]	; (800c048 <OnRxData+0x140>)
 800c000:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c004:	6838      	ldr	r0, [r7, #0]
 800c006:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800c00a:	4605      	mov	r5, r0
 800c00c:	6838      	ldr	r0, [r7, #0]
 800c00e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800c012:	9005      	str	r0, [sp, #20]
 800c014:	9504      	str	r5, [sp, #16]
 800c016:	9103      	str	r1, [sp, #12]
 800c018:	9402      	str	r4, [sp, #8]
 800c01a:	9201      	str	r2, [sp, #4]
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	4b0b      	ldr	r3, [pc, #44]	; (800c04c <OnRxData+0x144>)
 800c020:	2200      	movs	r2, #0
 800c022:	2100      	movs	r1, #0
 800c024:	2003      	movs	r0, #3
 800c026:	f011 fca1 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800c02a:	bf00      	nop
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bdb0      	pop	{r4, r5, r7, pc}
 800c032:	bf00      	nop
 800c034:	200004bc 	.word	0x200004bc
 800c038:	200004a2 	.word	0x200004a2
 800c03c:	0801e190 	.word	0x0801e190
 800c040:	48000400 	.word	0x48000400
 800c044:	0801e19c 	.word	0x0801e19c
 800c048:	20000008 	.word	0x20000008
 800c04c:	0801e1a8 	.word	0x0801e1a8

0800c050 <SendTxData>:

static void SendTxData(void)
{
 800c050:	b590      	push	{r4, r7, lr}
 800c052:	b091      	sub	sp, #68	; 0x44
 800c054:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c056:	23ff      	movs	r3, #255	; 0xff
 800c058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800c05c:	f7f6 f8ba 	bl	80021d4 <GetBatteryLevel>
 800c060:	4603      	mov	r3, r0
 800c062:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800c066:	2300      	movs	r3, #0
 800c068:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800c06e:	2300      	movs	r3, #0
 800c070:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800c086:	1d3b      	adds	r3, r7, #4
 800c088:	4618      	mov	r0, r3
 800c08a:	f7f6 fa67 	bl	800255c <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800c08e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	4b8f      	ldr	r3, [pc, #572]	; (800c2d4 <SendTxData+0x284>)
 800c096:	2201      	movs	r2, #1
 800c098:	2100      	movs	r1, #0
 800c09a:	2002      	movs	r0, #2
 800c09c:	f011 fc66 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7f4 ff4c 	bl	8000f40 <__aeabi_f2iz>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	b21b      	sxth	r3, r3
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	4b8a      	ldr	r3, [pc, #552]	; (800c2d8 <SendTxData+0x288>)
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	2002      	movs	r0, #2
 800c0b6:	f011 fc59 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800c0ba:	4b88      	ldr	r3, [pc, #544]	; (800c2dc <SendTxData+0x28c>)
 800c0bc:	2202      	movs	r2, #2
 800c0be:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4987      	ldr	r1, [pc, #540]	; (800c2e0 <SendTxData+0x290>)
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f7f4 fdeb 	bl	8000ca0 <__aeabi_fmul>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7f4 ff5d 	bl	8000f8c <__aeabi_f2uiz>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7f4 ff31 	bl	8000f40 <__aeabi_f2iz>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	497f      	ldr	r1, [pc, #508]	; (800c2e4 <SendTxData+0x294>)
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7f4 fdda 	bl	8000ca0 <__aeabi_fmul>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	497c      	ldr	r1, [pc, #496]	; (800c2e0 <SendTxData+0x290>)
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7f4 fe89 	bl	8000e08 <__aeabi_fdiv>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7f4 ff47 	bl	8000f8c <__aeabi_f2uiz>
 800c0fe:	4603      	mov	r3, r0
 800c100:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800c102:	4b76      	ldr	r3, [pc, #472]	; (800c2dc <SendTxData+0x28c>)
 800c104:	685a      	ldr	r2, [r3, #4]
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	1c59      	adds	r1, r3, #1
 800c10a:	6339      	str	r1, [r7, #48]	; 0x30
 800c10c:	4413      	add	r3, r2
 800c10e:	4a76      	ldr	r2, [pc, #472]	; (800c2e8 <SendTxData+0x298>)
 800c110:	7812      	ldrb	r2, [r2, #0]
 800c112:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800c114:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c116:	0a1b      	lsrs	r3, r3, #8
 800c118:	b298      	uxth	r0, r3
 800c11a:	4b70      	ldr	r3, [pc, #448]	; (800c2dc <SendTxData+0x28c>)
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	1c59      	adds	r1, r3, #1
 800c122:	6339      	str	r1, [r7, #48]	; 0x30
 800c124:	4413      	add	r3, r2
 800c126:	b2c2      	uxtb	r2, r0
 800c128:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800c12a:	4b6c      	ldr	r3, [pc, #432]	; (800c2dc <SendTxData+0x28c>)
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c130:	1c59      	adds	r1, r3, #1
 800c132:	6339      	str	r1, [r7, #48]	; 0x30
 800c134:	4413      	add	r3, r2
 800c136:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c138:	b2d2      	uxtb	r2, r2
 800c13a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800c13c:	4b67      	ldr	r3, [pc, #412]	; (800c2dc <SendTxData+0x28c>)
 800c13e:	685a      	ldr	r2, [r3, #4]
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	1c59      	adds	r1, r3, #1
 800c144:	6339      	str	r1, [r7, #48]	; 0x30
 800c146:	4413      	add	r3, r2
 800c148:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800c14a:	b2d2      	uxtb	r2, r2
 800c14c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800c14e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c150:	0a1b      	lsrs	r3, r3, #8
 800c152:	b298      	uxth	r0, r3
 800c154:	4b61      	ldr	r3, [pc, #388]	; (800c2dc <SendTxData+0x28c>)
 800c156:	685a      	ldr	r2, [r3, #4]
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	1c59      	adds	r1, r3, #1
 800c15c:	6339      	str	r1, [r7, #48]	; 0x30
 800c15e:	4413      	add	r3, r2
 800c160:	b2c2      	uxtb	r2, r0
 800c162:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800c164:	4b5d      	ldr	r3, [pc, #372]	; (800c2dc <SendTxData+0x28c>)
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16a:	1c59      	adds	r1, r3, #1
 800c16c:	6339      	str	r1, [r7, #48]	; 0x30
 800c16e:	4413      	add	r3, r2
 800c170:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800c172:	b2d2      	uxtb	r2, r2
 800c174:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800c176:	4b5d      	ldr	r3, [pc, #372]	; (800c2ec <SendTxData+0x29c>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b08      	cmp	r3, #8
 800c17c:	d007      	beq.n	800c18e <SendTxData+0x13e>
 800c17e:	4b5b      	ldr	r3, [pc, #364]	; (800c2ec <SendTxData+0x29c>)
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	2b01      	cmp	r3, #1
 800c184:	d003      	beq.n	800c18e <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800c186:	4b59      	ldr	r3, [pc, #356]	; (800c2ec <SendTxData+0x29c>)
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d120      	bne.n	800c1d0 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800c18e:	4b53      	ldr	r3, [pc, #332]	; (800c2dc <SendTxData+0x28c>)
 800c190:	685a      	ldr	r2, [r3, #4]
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	1c59      	adds	r1, r3, #1
 800c196:	6339      	str	r1, [r7, #48]	; 0x30
 800c198:	4413      	add	r3, r2
 800c19a:	2200      	movs	r2, #0
 800c19c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800c19e:	4b4f      	ldr	r3, [pc, #316]	; (800c2dc <SendTxData+0x28c>)
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	1c59      	adds	r1, r3, #1
 800c1a6:	6339      	str	r1, [r7, #48]	; 0x30
 800c1a8:	4413      	add	r3, r2
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800c1ae:	4b4b      	ldr	r3, [pc, #300]	; (800c2dc <SendTxData+0x28c>)
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b4:	1c59      	adds	r1, r3, #1
 800c1b6:	6339      	str	r1, [r7, #48]	; 0x30
 800c1b8:	4413      	add	r3, r2
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800c1be:	4b47      	ldr	r3, [pc, #284]	; (800c2dc <SendTxData+0x28c>)
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c4:	1c59      	adds	r1, r3, #1
 800c1c6:	6339      	str	r1, [r7, #48]	; 0x30
 800c1c8:	4413      	add	r3, r2
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	701a      	strb	r2, [r3, #0]
 800c1ce:	e05b      	b.n	800c288 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800c1d8:	4b40      	ldr	r3, [pc, #256]	; (800c2dc <SendTxData+0x28c>)
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	1c59      	adds	r1, r3, #1
 800c1e0:	6339      	str	r1, [r7, #48]	; 0x30
 800c1e2:	18d4      	adds	r4, r2, r3
 800c1e4:	f7f5 fff6 	bl	80021d4 <GetBatteryLevel>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	1418      	asrs	r0, r3, #16
 800c1f0:	4b3a      	ldr	r3, [pc, #232]	; (800c2dc <SendTxData+0x28c>)
 800c1f2:	685a      	ldr	r2, [r3, #4]
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	1c59      	adds	r1, r3, #1
 800c1f8:	6339      	str	r1, [r7, #48]	; 0x30
 800c1fa:	4413      	add	r3, r2
 800c1fc:	b2c2      	uxtb	r2, r0
 800c1fe:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	1218      	asrs	r0, r3, #8
 800c204:	4b35      	ldr	r3, [pc, #212]	; (800c2dc <SendTxData+0x28c>)
 800c206:	685a      	ldr	r2, [r3, #4]
 800c208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20a:	1c59      	adds	r1, r3, #1
 800c20c:	6339      	str	r1, [r7, #48]	; 0x30
 800c20e:	4413      	add	r3, r2
 800c210:	b2c2      	uxtb	r2, r0
 800c212:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800c214:	4b31      	ldr	r3, [pc, #196]	; (800c2dc <SendTxData+0x28c>)
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21a:	1c59      	adds	r1, r3, #1
 800c21c:	6339      	str	r1, [r7, #48]	; 0x30
 800c21e:	4413      	add	r3, r2
 800c220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c222:	b2d2      	uxtb	r2, r2
 800c224:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800c226:	6a3b      	ldr	r3, [r7, #32]
 800c228:	1418      	asrs	r0, r3, #16
 800c22a:	4b2c      	ldr	r3, [pc, #176]	; (800c2dc <SendTxData+0x28c>)
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c230:	1c59      	adds	r1, r3, #1
 800c232:	6339      	str	r1, [r7, #48]	; 0x30
 800c234:	4413      	add	r3, r2
 800c236:	b2c2      	uxtb	r2, r0
 800c238:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800c23a:	6a3b      	ldr	r3, [r7, #32]
 800c23c:	1218      	asrs	r0, r3, #8
 800c23e:	4b27      	ldr	r3, [pc, #156]	; (800c2dc <SendTxData+0x28c>)
 800c240:	685a      	ldr	r2, [r3, #4]
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	1c59      	adds	r1, r3, #1
 800c246:	6339      	str	r1, [r7, #48]	; 0x30
 800c248:	4413      	add	r3, r2
 800c24a:	b2c2      	uxtb	r2, r0
 800c24c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800c24e:	4b23      	ldr	r3, [pc, #140]	; (800c2dc <SendTxData+0x28c>)
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	1c59      	adds	r1, r3, #1
 800c256:	6339      	str	r1, [r7, #48]	; 0x30
 800c258:	4413      	add	r3, r2
 800c25a:	6a3a      	ldr	r2, [r7, #32]
 800c25c:	b2d2      	uxtb	r2, r2
 800c25e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800c260:	8bfb      	ldrh	r3, [r7, #30]
 800c262:	0a1b      	lsrs	r3, r3, #8
 800c264:	b298      	uxth	r0, r3
 800c266:	4b1d      	ldr	r3, [pc, #116]	; (800c2dc <SendTxData+0x28c>)
 800c268:	685a      	ldr	r2, [r3, #4]
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	1c59      	adds	r1, r3, #1
 800c26e:	6339      	str	r1, [r7, #48]	; 0x30
 800c270:	4413      	add	r3, r2
 800c272:	b2c2      	uxtb	r2, r0
 800c274:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800c276:	4b19      	ldr	r3, [pc, #100]	; (800c2dc <SendTxData+0x28c>)
 800c278:	685a      	ldr	r2, [r3, #4]
 800c27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27c:	1c59      	adds	r1, r3, #1
 800c27e:	6339      	str	r1, [r7, #48]	; 0x30
 800c280:	4413      	add	r3, r2
 800c282:	8bfa      	ldrh	r2, [r7, #30]
 800c284:	b2d2      	uxtb	r2, r2
 800c286:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	b2da      	uxtb	r2, r3
 800c28c:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <SendTxData+0x28c>)
 800c28e:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c290:	4b17      	ldr	r3, [pc, #92]	; (800c2f0 <SendTxData+0x2a0>)
 800c292:	7a5b      	ldrb	r3, [r3, #9]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d007      	beq.n	800c2a8 <SendTxData+0x258>
 800c298:	f002 fa66 	bl	800e768 <LmHandlerJoinStatus>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d102      	bne.n	800c2a8 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800c2a2:	4813      	ldr	r0, [pc, #76]	; (800c2f0 <SendTxData+0x2a0>)
 800c2a4:	f011 f958 	bl	801d558 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800c2a8:	4b10      	ldr	r3, [pc, #64]	; (800c2ec <SendTxData+0x29c>)
 800c2aa:	78db      	ldrb	r3, [r3, #3]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	480a      	ldr	r0, [pc, #40]	; (800c2dc <SendTxData+0x28c>)
 800c2b2:	f002 fa75 	bl	800e7a0 <LmHandlerSend>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800c2bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d119      	bne.n	800c2f8 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800c2c4:	4b0b      	ldr	r3, [pc, #44]	; (800c2f4 <SendTxData+0x2a4>)
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	2001      	movs	r0, #1
 800c2cc:	f011 fb4e 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
 800c2d0:	e029      	b.n	800c326 <SendTxData+0x2d6>
 800c2d2:	bf00      	nop
 800c2d4:	0801e1f0 	.word	0x0801e1f0
 800c2d8:	0801e1fc 	.word	0x0801e1fc
 800c2dc:	2000008c 	.word	0x2000008c
 800c2e0:	41200000 	.word	0x41200000
 800c2e4:	42c80000 	.word	0x42c80000
 800c2e8:	200004a2 	.word	0x200004a2
 800c2ec:	20000070 	.word	0x20000070
 800c2f0:	200004d4 	.word	0x200004d4
 800c2f4:	0801e208 	.word	0x0801e208
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800c2f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c2fc:	f113 0f06 	cmn.w	r3, #6
 800c300:	d111      	bne.n	800c326 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800c302:	f002 f985 	bl	800e610 <LmHandlerGetDutyCycleWaitTime>
 800c306:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800c308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00b      	beq.n	800c326 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800c30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c310:	4a11      	ldr	r2, [pc, #68]	; (800c358 <SendTxData+0x308>)
 800c312:	fba2 2303 	umull	r2, r3, r2, r3
 800c316:	099b      	lsrs	r3, r3, #6
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	4b10      	ldr	r3, [pc, #64]	; (800c35c <SendTxData+0x30c>)
 800c31c:	2201      	movs	r2, #1
 800c31e:	2100      	movs	r1, #0
 800c320:	2001      	movs	r0, #1
 800c322:	f011 fb23 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800c326:	4b0e      	ldr	r3, [pc, #56]	; (800c360 <SendTxData+0x310>)
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d10f      	bne.n	800c34e <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800c32e:	480d      	ldr	r0, [pc, #52]	; (800c364 <SendTxData+0x314>)
 800c330:	f011 f912 	bl	801d558 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800c334:	4b0c      	ldr	r3, [pc, #48]	; (800c368 <SendTxData+0x318>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c33a:	4293      	cmp	r3, r2
 800c33c:	bf38      	it	cc
 800c33e:	4613      	movcc	r3, r2
 800c340:	4619      	mov	r1, r3
 800c342:	4808      	ldr	r0, [pc, #32]	; (800c364 <SendTxData+0x314>)
 800c344:	f011 f978 	bl	801d638 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800c348:	4806      	ldr	r0, [pc, #24]	; (800c364 <SendTxData+0x314>)
 800c34a:	f011 f897 	bl	801d47c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800c34e:	bf00      	nop
 800c350:	373c      	adds	r7, #60	; 0x3c
 800c352:	46bd      	mov	sp, r7
 800c354:	bd90      	pop	{r4, r7, pc}
 800c356:	bf00      	nop
 800c358:	10624dd3 	.word	0x10624dd3
 800c35c:	0801e218 	.word	0x0801e218
 800c360:	2000037c 	.word	0x2000037c
 800c364:	20000380 	.word	0x20000380
 800c368:	20000088 	.word	0x20000088

0800c36c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800c374:	2100      	movs	r1, #0
 800c376:	2002      	movs	r0, #2
 800c378:	f010 ffd4 	bl	801d324 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800c37c:	4803      	ldr	r0, [pc, #12]	; (800c38c <OnTxTimerEvent+0x20>)
 800c37e:	f011 f87d 	bl	801d47c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800c382:	bf00      	nop
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20000380 	.word	0x20000380

0800c390 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bc80      	pop	{r7}
 800c3a0:	4770      	bx	lr

0800c3a2 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800c3aa:	bf00      	nop
 800c3ac:	370c      	adds	r7, #12
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bc80      	pop	{r7}
 800c3b2:	4770      	bx	lr

0800c3b4 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bc80      	pop	{r7}
 800c3c4:	4770      	bx	lr
	...

0800c3c8 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af04      	add	r7, sp, #16
 800c3ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d041      	beq.n	800c45a <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d03d      	beq.n	800c45a <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800c3de:	4821      	ldr	r0, [pc, #132]	; (800c464 <OnTxData+0x9c>)
 800c3e0:	f011 f84c 	bl	801d47c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800c3e4:	4b20      	ldr	r3, [pc, #128]	; (800c468 <OnTxData+0xa0>)
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	2100      	movs	r1, #0
 800c3ea:	2002      	movs	r0, #2
 800c3ec:	f011 fabe 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	7c12      	ldrb	r2, [r2, #16]
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800c400:	4610      	mov	r0, r2
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800c408:	9203      	str	r2, [sp, #12]
 800c40a:	9002      	str	r0, [sp, #8]
 800c40c:	9101      	str	r1, [sp, #4]
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	4b16      	ldr	r3, [pc, #88]	; (800c46c <OnTxData+0xa4>)
 800c412:	2200      	movs	r2, #0
 800c414:	2100      	movs	r1, #0
 800c416:	2003      	movs	r0, #3
 800c418:	f011 faa8 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800c41c:	4b14      	ldr	r3, [pc, #80]	; (800c470 <OnTxData+0xa8>)
 800c41e:	2200      	movs	r2, #0
 800c420:	2100      	movs	r1, #0
 800c422:	2003      	movs	r0, #3
 800c424:	f011 faa2 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	7a1b      	ldrb	r3, [r3, #8]
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	d10e      	bne.n	800c44e <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	7a5b      	ldrb	r3, [r3, #9]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d001      	beq.n	800c43c <OnTxData+0x74>
 800c438:	4b0e      	ldr	r3, [pc, #56]	; (800c474 <OnTxData+0xac>)
 800c43a:	e000      	b.n	800c43e <OnTxData+0x76>
 800c43c:	4b0e      	ldr	r3, [pc, #56]	; (800c478 <OnTxData+0xb0>)
 800c43e:	9300      	str	r3, [sp, #0]
 800c440:	4b0e      	ldr	r3, [pc, #56]	; (800c47c <OnTxData+0xb4>)
 800c442:	2200      	movs	r2, #0
 800c444:	2100      	movs	r1, #0
 800c446:	2003      	movs	r0, #3
 800c448:	f011 fa90 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800c44c:	e005      	b.n	800c45a <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800c44e:	4b0c      	ldr	r3, [pc, #48]	; (800c480 <OnTxData+0xb8>)
 800c450:	2200      	movs	r2, #0
 800c452:	2100      	movs	r1, #0
 800c454:	2003      	movs	r0, #3
 800c456:	f011 fa89 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 800c45a:	bf00      	nop
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	200004a4 	.word	0x200004a4
 800c468:	0801e238 	.word	0x0801e238
 800c46c:	0801e26c 	.word	0x0801e26c
 800c470:	0801e2a0 	.word	0x0801e2a0
 800c474:	0801e2b0 	.word	0x0801e2b0
 800c478:	0801e2b4 	.word	0x0801e2b4
 800c47c:	0801e2bc 	.word	0x0801e2bc
 800c480:	0801e2d0 	.word	0x0801e2d0

0800c484 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d039      	beq.n	800c506 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d11e      	bne.n	800c4da <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800c49c:	2100      	movs	r1, #0
 800c49e:	2004      	movs	r0, #4
 800c4a0:	f010 ff40 	bl	801d324 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800c4a4:	481a      	ldr	r0, [pc, #104]	; (800c510 <OnJoinRequest+0x8c>)
 800c4a6:	f011 f857 	bl	801d558 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800c4aa:	4b1a      	ldr	r3, [pc, #104]	; (800c514 <OnJoinRequest+0x90>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	2002      	movs	r0, #2
 800c4b2:	f011 fa5b 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	79db      	ldrb	r3, [r3, #7]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d106      	bne.n	800c4cc <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800c4be:	4b16      	ldr	r3, [pc, #88]	; (800c518 <OnJoinRequest+0x94>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	2002      	movs	r0, #2
 800c4c6:	f011 fa51 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800c4ca:	e01c      	b.n	800c506 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800c4cc:	4b13      	ldr	r3, [pc, #76]	; (800c51c <OnJoinRequest+0x98>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	2002      	movs	r0, #2
 800c4d4:	f011 fa4a 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 800c4d8:	e015      	b.n	800c506 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800c4da:	4b11      	ldr	r3, [pc, #68]	; (800c520 <OnJoinRequest+0x9c>)
 800c4dc:	2200      	movs	r2, #0
 800c4de:	2100      	movs	r1, #0
 800c4e0:	2002      	movs	r0, #2
 800c4e2:	f011 fa43 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	79db      	ldrb	r3, [r3, #7]
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d10b      	bne.n	800c506 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800c4ee:	4b0d      	ldr	r3, [pc, #52]	; (800c524 <OnJoinRequest+0xa0>)
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	2002      	movs	r0, #2
 800c4f6:	f011 fa39 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800c4fa:	4b0b      	ldr	r3, [pc, #44]	; (800c528 <OnJoinRequest+0xa4>)
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	2101      	movs	r1, #1
 800c500:	4618      	mov	r0, r3
 800c502:	f002 f88f 	bl	800e624 <LmHandlerJoin>
}
 800c506:	bf00      	nop
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	200004d4 	.word	0x200004d4
 800c514:	0801e2e0 	.word	0x0801e2e0
 800c518:	0801e2f8 	.word	0x0801e2f8
 800c51c:	0801e318 	.word	0x0801e318
 800c520:	0801e338 	.word	0x0801e338
 800c524:	0801e354 	.word	0x0801e354
 800c528:	20000020 	.word	0x20000020

0800c52c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800c52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c52e:	b093      	sub	sp, #76	; 0x4c
 800c530:	af0c      	add	r7, sp, #48	; 0x30
 800c532:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d056      	beq.n	800c5e8 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	785b      	ldrb	r3, [r3, #1]
 800c53e:	2b02      	cmp	r3, #2
 800c540:	d008      	beq.n	800c554 <OnBeaconStatusChange+0x28>
 800c542:	2b03      	cmp	r3, #3
 800c544:	d049      	beq.n	800c5da <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800c546:	4b2a      	ldr	r3, [pc, #168]	; (800c5f0 <OnBeaconStatusChange+0xc4>)
 800c548:	2200      	movs	r2, #0
 800c54a:	2100      	movs	r1, #0
 800c54c:	2002      	movs	r0, #2
 800c54e:	f011 fa0d 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c552:	e049      	b.n	800c5e8 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	7c1b      	ldrb	r3, [r3, #16]
 800c558:	4618      	mov	r0, r3
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800c560:	461c      	mov	r4, r3
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800c568:	461d      	mov	r5, r3
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	6852      	ldr	r2, [r2, #4]
 800c572:	6979      	ldr	r1, [r7, #20]
 800c574:	7d89      	ldrb	r1, [r1, #22]
 800c576:	460e      	mov	r6, r1
 800c578:	6979      	ldr	r1, [r7, #20]
 800c57a:	7dc9      	ldrb	r1, [r1, #23]
 800c57c:	6139      	str	r1, [r7, #16]
 800c57e:	6979      	ldr	r1, [r7, #20]
 800c580:	7e09      	ldrb	r1, [r1, #24]
 800c582:	60f9      	str	r1, [r7, #12]
 800c584:	6979      	ldr	r1, [r7, #20]
 800c586:	7e49      	ldrb	r1, [r1, #25]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	6979      	ldr	r1, [r7, #20]
 800c58c:	7e89      	ldrb	r1, [r1, #26]
 800c58e:	6079      	str	r1, [r7, #4]
 800c590:	6979      	ldr	r1, [r7, #20]
 800c592:	7ec9      	ldrb	r1, [r1, #27]
 800c594:	6039      	str	r1, [r7, #0]
 800c596:	6979      	ldr	r1, [r7, #20]
 800c598:	7f09      	ldrb	r1, [r1, #28]
 800c59a:	910b      	str	r1, [sp, #44]	; 0x2c
 800c59c:	f8d7 c000 	ldr.w	ip, [r7]
 800c5a0:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800c5a4:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800c5a8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800c5ac:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800c5b0:	f8cd c020 	str.w	ip, [sp, #32]
 800c5b4:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800c5b8:	f8cd c01c 	str.w	ip, [sp, #28]
 800c5bc:	6939      	ldr	r1, [r7, #16]
 800c5be:	9106      	str	r1, [sp, #24]
 800c5c0:	9605      	str	r6, [sp, #20]
 800c5c2:	9204      	str	r2, [sp, #16]
 800c5c4:	9303      	str	r3, [sp, #12]
 800c5c6:	9502      	str	r5, [sp, #8]
 800c5c8:	9401      	str	r4, [sp, #4]
 800c5ca:	9000      	str	r0, [sp, #0]
 800c5cc:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <OnBeaconStatusChange+0xc8>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	2002      	movs	r0, #2
 800c5d4:	f011 f9ca 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800c5d8:	e006      	b.n	800c5e8 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800c5da:	4b07      	ldr	r3, [pc, #28]	; (800c5f8 <OnBeaconStatusChange+0xcc>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2100      	movs	r1, #0
 800c5e0:	2002      	movs	r0, #2
 800c5e2:	f011 f9c3 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        break;
 800c5e6:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800c5e8:	bf00      	nop
 800c5ea:	371c      	adds	r7, #28
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5f0:	0801e378 	.word	0x0801e378
 800c5f4:	0801e390 	.word	0x0801e390
 800c5f8:	0801e404 	.word	0x0801e404

0800c5fc <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800c600:	bf00      	nop
 800c602:	46bd      	mov	sp, r7
 800c604:	bc80      	pop	{r7}
 800c606:	4770      	bx	lr

0800c608 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af02      	add	r7, sp, #8
 800c60e:	4603      	mov	r3, r0
 800c610:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	4a06      	ldr	r2, [pc, #24]	; (800c630 <OnClassChange+0x28>)
 800c616:	5cd3      	ldrb	r3, [r2, r3]
 800c618:	9300      	str	r3, [sp, #0]
 800c61a:	4b06      	ldr	r3, [pc, #24]	; (800c634 <OnClassChange+0x2c>)
 800c61c:	2200      	movs	r2, #0
 800c61e:	2100      	movs	r1, #0
 800c620:	2002      	movs	r0, #2
 800c622:	f011 f9a3 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800c626:	bf00      	nop
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	0801e440 	.word	0x0801e440
 800c634:	0801e424 	.word	0x0801e424

0800c638 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800c63c:	2100      	movs	r1, #0
 800c63e:	2001      	movs	r0, #1
 800c640:	f010 fe70 	bl	801d324 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800c644:	bf00      	nop
 800c646:	bd80      	pop	{r7, pc}

0800c648 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800c650:	4a0d      	ldr	r2, [pc, #52]	; (800c688 <OnTxPeriodicityChanged+0x40>)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800c656:	4b0c      	ldr	r3, [pc, #48]	; (800c688 <OnTxPeriodicityChanged+0x40>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d103      	bne.n	800c666 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800c65e:	4b0a      	ldr	r3, [pc, #40]	; (800c688 <OnTxPeriodicityChanged+0x40>)
 800c660:	f242 7210 	movw	r2, #10000	; 0x2710
 800c664:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800c666:	4809      	ldr	r0, [pc, #36]	; (800c68c <OnTxPeriodicityChanged+0x44>)
 800c668:	f010 ff76 	bl	801d558 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800c66c:	4b06      	ldr	r3, [pc, #24]	; (800c688 <OnTxPeriodicityChanged+0x40>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4619      	mov	r1, r3
 800c672:	4806      	ldr	r0, [pc, #24]	; (800c68c <OnTxPeriodicityChanged+0x44>)
 800c674:	f010 ffe0 	bl	801d638 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800c678:	4804      	ldr	r0, [pc, #16]	; (800c68c <OnTxPeriodicityChanged+0x44>)
 800c67a:	f010 feff 	bl	801d47c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800c67e:	bf00      	nop
 800c680:	3708      	adds	r7, #8
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20000088 	.word	0x20000088
 800c68c:	20000380 	.word	0x20000380

0800c690 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	4603      	mov	r3, r0
 800c698:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800c69a:	4a04      	ldr	r2, [pc, #16]	; (800c6ac <OnTxFrameCtrlChanged+0x1c>)
 800c69c:	79fb      	ldrb	r3, [r7, #7]
 800c69e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bc80      	pop	{r7}
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	20000070 	.word	0x20000070

0800c6b0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800c6ba:	4a04      	ldr	r2, [pc, #16]	; (800c6cc <OnPingSlotPeriodicityChanged+0x1c>)
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800c6c0:	bf00      	nop
 800c6c2:	370c      	adds	r7, #12
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bc80      	pop	{r7}
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	20000070 	.word	0x20000070

0800c6d0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800c6d4:	f002 fd9f 	bl	800f216 <LmHandlerHalt>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d106      	bne.n	800c6ec <OnSystemReset+0x1c>
 800c6de:	f002 f843 	bl	800e768 <LmHandlerJoinStatus>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d101      	bne.n	800c6ec <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800c6e8:	f7ff faf2 	bl	800bcd0 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800c6ec:	bf00      	nop
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <StopJoin>:

static void StopJoin(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800c6f4:	4817      	ldr	r0, [pc, #92]	; (800c754 <StopJoin+0x64>)
 800c6f6:	f010 ff2f 	bl	801d558 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800c6fa:	f002 fd7f 	bl	800f1fc <LmHandlerStop>
 800c6fe:	4603      	mov	r3, r0
 800c700:	2b00      	cmp	r3, #0
 800c702:	d006      	beq.n	800c712 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800c704:	4b14      	ldr	r3, [pc, #80]	; (800c758 <StopJoin+0x68>)
 800c706:	2200      	movs	r2, #0
 800c708:	2100      	movs	r1, #0
 800c70a:	2002      	movs	r0, #2
 800c70c:	f011 f92e 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
 800c710:	e01a      	b.n	800c748 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800c712:	4b12      	ldr	r3, [pc, #72]	; (800c75c <StopJoin+0x6c>)
 800c714:	2200      	movs	r2, #0
 800c716:	2100      	movs	r1, #0
 800c718:	2002      	movs	r0, #2
 800c71a:	f011 f927 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800c71e:	4b10      	ldr	r3, [pc, #64]	; (800c760 <StopJoin+0x70>)
 800c720:	2201      	movs	r2, #1
 800c722:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800c724:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <StopJoin+0x74>)
 800c726:	2200      	movs	r2, #0
 800c728:	2100      	movs	r1, #0
 800c72a:	2002      	movs	r0, #2
 800c72c:	f011 f91e 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800c730:	480d      	ldr	r0, [pc, #52]	; (800c768 <StopJoin+0x78>)
 800c732:	f001 fe1f 	bl	800e374 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800c736:	4b0a      	ldr	r3, [pc, #40]	; (800c760 <StopJoin+0x70>)
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	2101      	movs	r1, #1
 800c73c:	4618      	mov	r0, r3
 800c73e:	f001 ff71 	bl	800e624 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800c742:	4804      	ldr	r0, [pc, #16]	; (800c754 <StopJoin+0x64>)
 800c744:	f010 fe9a 	bl	801d47c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800c748:	4808      	ldr	r0, [pc, #32]	; (800c76c <StopJoin+0x7c>)
 800c74a:	f010 fe97 	bl	801d47c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800c74e:	bf00      	nop
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	20000380 	.word	0x20000380
 800c758:	0801e444 	.word	0x0801e444
 800c75c:	0801e464 	.word	0x0801e464
 800c760:	20000020 	.word	0x20000020
 800c764:	0801e478 	.word	0x0801e478
 800c768:	20000070 	.word	0x20000070
 800c76c:	20000398 	.word	0x20000398

0800c770 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b082      	sub	sp, #8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <OnStopJoinTimerEvent+0x20>)
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d103      	bne.n	800c788 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800c780:	2100      	movs	r1, #0
 800c782:	2008      	movs	r0, #8
 800c784:	f010 fdce 	bl	801d324 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	20000020 	.word	0x20000020

0800c794 <StoreContext>:

static void StoreContext(void)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800c79a:	23ff      	movs	r3, #255	; 0xff
 800c79c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800c79e:	f002 fd6f 	bl	800f280 <LmHandlerNvmDataStore>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800c7a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7aa:	f113 0f08 	cmn.w	r3, #8
 800c7ae:	d106      	bne.n	800c7be <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800c7b0:	4b0a      	ldr	r3, [pc, #40]	; (800c7dc <StoreContext+0x48>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	2100      	movs	r1, #0
 800c7b6:	2002      	movs	r0, #2
 800c7b8:	f011 f8d8 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800c7bc:	e00a      	b.n	800c7d4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800c7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7c6:	d105      	bne.n	800c7d4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800c7c8:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <StoreContext+0x4c>)
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	2002      	movs	r0, #2
 800c7d0:	f011 f8cc 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 800c7d4:	bf00      	nop
 800c7d6:	3708      	adds	r7, #8
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	0801e498 	.word	0x0801e498
 800c7e0:	0801e4b0 	.word	0x0801e4b0

0800c7e4 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800c7ee:	79fb      	ldrb	r3, [r7, #7]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d106      	bne.n	800c802 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800c7f4:	4b08      	ldr	r3, [pc, #32]	; (800c818 <OnNvmDataChange+0x34>)
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	2002      	movs	r0, #2
 800c7fc:	f011 f8b6 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800c800:	e005      	b.n	800c80e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800c802:	4b06      	ldr	r3, [pc, #24]	; (800c81c <OnNvmDataChange+0x38>)
 800c804:	2200      	movs	r2, #0
 800c806:	2100      	movs	r1, #0
 800c808:	2002      	movs	r0, #2
 800c80a:	f011 f8af 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 800c80e:	bf00      	nop
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	0801e4c8 	.word	0x0801e4c8
 800c81c:	0801e4dc 	.word	0x0801e4dc

0800c820 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b082      	sub	sp, #8
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800c82a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c82e:	4807      	ldr	r0, [pc, #28]	; (800c84c <OnStoreContextRequest+0x2c>)
 800c830:	f7f4 feec 	bl	800160c <FLASH_IF_Erase>
 800c834:	4603      	mov	r3, r0
 800c836:	2b00      	cmp	r3, #0
 800c838:	d104      	bne.n	800c844 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	6879      	ldr	r1, [r7, #4]
 800c83e:	4803      	ldr	r0, [pc, #12]	; (800c84c <OnStoreContextRequest+0x2c>)
 800c840:	f7f4 fe94 	bl	800156c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	0803f000 	.word	0x0803f000

0800c850 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	4903      	ldr	r1, [pc, #12]	; (800c86c <OnRestoreContextRequest+0x1c>)
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7f4 feac 	bl	80015bc <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800c864:	bf00      	nop
 800c866:	3708      	adds	r7, #8
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	0803f000 	.word	0x0803f000

0800c870 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800c874:	4b15      	ldr	r3, [pc, #84]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c876:	2200      	movs	r2, #0
 800c878:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800c87a:	4b14      	ldr	r3, [pc, #80]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800c880:	4b12      	ldr	r3, [pc, #72]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c882:	2200      	movs	r2, #0
 800c884:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800c886:	4b11      	ldr	r3, [pc, #68]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c888:	2200      	movs	r2, #0
 800c88a:	60da      	str	r2, [r3, #12]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800c88c:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c894:	4a0d      	ldr	r2, [pc, #52]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c896:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800c898:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10c      	bne.n	800c8ba <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <LoraInfo_Init+0x60>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	2000      	movs	r0, #0
 800c8a8:	f011 f860 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800c8ac:	bf00      	nop
 800c8ae:	f011 f84b 	bl	801d948 <UTIL_ADV_TRACE_IsBufferEmpty>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d1fa      	bne.n	800c8ae <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800c8b8:	e7fe      	b.n	800c8b8 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800c8ba:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800c8c0:	4b02      	ldr	r3, [pc, #8]	; (800c8cc <LoraInfo_Init+0x5c>)
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800c8c6:	bf00      	nop
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	200004ec 	.word	0x200004ec
 800c8d0:	0801e4f0 	.word	0x0801e4f0

0800c8d4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800c8d8:	4b02      	ldr	r3, [pc, #8]	; (800c8e4 <LoraInfo_GetPtr+0x10>)
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bc80      	pop	{r7}
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	200004ec 	.word	0x200004ec

0800c8e8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800c8ec:	f7f7 fb94 	bl	8004018 <BSP_RADIO_Init>
 800c8f0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b082      	sub	sp, #8
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c900:	79fb      	ldrb	r3, [r7, #7]
 800c902:	4618      	mov	r0, r3
 800c904:	f7f7 fbba 	bl	800407c <BSP_RADIO_ConfigRFSwitch>
 800c908:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800c916:	f7f7 fbff 	bl	8004118 <BSP_RADIO_GetTxConfig>
 800c91a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800c924:	f7f7 fbff 	bl	8004126 <BSP_RADIO_IsTCXO>
 800c928:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800c932:	f7f7 fbff 	bl	8004134 <BSP_RADIO_IsDCDC>
 800c936:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c938:	4618      	mov	r0, r3
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800c946:	79fb      	ldrb	r3, [r7, #7]
 800c948:	4618      	mov	r0, r3
 800c94a:	f7f7 fbfa 	bl	8004142 <BSP_RADIO_GetRFOMaxPowerConfig>
 800c94e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800c950:	4618      	mov	r0, r3
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	33f1      	adds	r3, #241	; 0xf1
 800c964:	2210      	movs	r2, #16
 800c966:	2100      	movs	r1, #0
 800c968:	4618      	mov	r0, r3
 800c96a:	f00c fdd3 	bl	8019514 <memset1>
    ctx->M_n = 0;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	22f0      	movs	r2, #240	; 0xf0
 800c97a:	2100      	movs	r1, #0
 800c97c:	4618      	mov	r0, r3
 800c97e:	f00c fdc9 	bl	8019514 <memset1>
}
 800c982:	bf00      	nop
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b082      	sub	sp, #8
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	461a      	mov	r2, r3
 800c998:	2110      	movs	r1, #16
 800c99a:	6838      	ldr	r0, [r7, #0]
 800c99c:	f000 fe5c 	bl	800d658 <lorawan_aes_set_key>
}
 800c9a0:	bf00      	nop
 800c9a2:	3708      	adds	r7, #8
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08c      	sub	sp, #48	; 0x30
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f000 80a1 	beq.w	800cb02 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c9c6:	f1c3 0310 	rsb	r3, r3, #16
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	4293      	cmp	r3, r2
 800c9ce:	bf28      	it	cs
 800c9d0:	4613      	movcs	r3, r2
 800c9d2:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f203 1201 	addw	r2, r3, #257	; 0x101
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c9e0:	4413      	add	r3, r2
 800c9e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9e4:	b292      	uxth	r2, r2
 800c9e6:	68b9      	ldr	r1, [r7, #8]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f00c fd58 	bl	801949e <memcpy1>
        ctx->M_n += mlen;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f6:	441a      	add	r2, r3
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ca04:	2b0f      	cmp	r3, #15
 800ca06:	f240 808d 	bls.w	800cb24 <AES_CMAC_Update+0x17c>
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	f000 8088 	beq.w	800cb24 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800ca14:	2300      	movs	r3, #0
 800ca16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca18:	e015      	b.n	800ca46 <AES_CMAC_Update+0x9e>
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	4413      	add	r3, r2
 800ca20:	33f1      	adds	r3, #241	; 0xf1
 800ca22:	781a      	ldrb	r2, [r3, #0]
 800ca24:	68f9      	ldr	r1, [r7, #12]
 800ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca28:	440b      	add	r3, r1
 800ca2a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	4053      	eors	r3, r2
 800ca32:	b2d9      	uxtb	r1, r3
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca38:	4413      	add	r3, r2
 800ca3a:	33f1      	adds	r3, #241	; 0xf1
 800ca3c:	460a      	mov	r2, r1
 800ca3e:	701a      	strb	r2, [r3, #0]
 800ca40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca42:	3301      	adds	r3, #1
 800ca44:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca48:	2b0f      	cmp	r3, #15
 800ca4a:	dde6      	ble.n	800ca1a <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ca52:	f107 0314 	add.w	r3, r7, #20
 800ca56:	2210      	movs	r2, #16
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f00c fd20 	bl	801949e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800ca5e:	68fa      	ldr	r2, [r7, #12]
 800ca60:	f107 0114 	add.w	r1, r7, #20
 800ca64:	f107 0314 	add.w	r3, r7, #20
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f000 fed3 	bl	800d814 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	33f1      	adds	r3, #241	; 0xf1
 800ca72:	f107 0114 	add.w	r1, r7, #20
 800ca76:	2210      	movs	r2, #16
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f00c fd10 	bl	801949e <memcpy1>

        data += mlen;
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca82:	4413      	add	r3, r2
 800ca84:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800ca8e:	e038      	b.n	800cb02 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800ca90:	2300      	movs	r3, #0
 800ca92:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca94:	e013      	b.n	800cabe <AES_CMAC_Update+0x116>
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca9a:	4413      	add	r3, r2
 800ca9c:	33f1      	adds	r3, #241	; 0xf1
 800ca9e:	781a      	ldrb	r2, [r3, #0]
 800caa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa2:	68b9      	ldr	r1, [r7, #8]
 800caa4:	440b      	add	r3, r1
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	4053      	eors	r3, r2
 800caaa:	b2d9      	uxtb	r1, r3
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab0:	4413      	add	r3, r2
 800cab2:	33f1      	adds	r3, #241	; 0xf1
 800cab4:	460a      	mov	r2, r1
 800cab6:	701a      	strb	r2, [r3, #0]
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	3301      	adds	r3, #1
 800cabc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac0:	2b0f      	cmp	r3, #15
 800cac2:	dde8      	ble.n	800ca96 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800caca:	f107 0314 	add.w	r3, r7, #20
 800cace:	2210      	movs	r2, #16
 800cad0:	4618      	mov	r0, r3
 800cad2:	f00c fce4 	bl	801949e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800cad6:	68fa      	ldr	r2, [r7, #12]
 800cad8:	f107 0114 	add.w	r1, r7, #20
 800cadc:	f107 0314 	add.w	r3, r7, #20
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fe97 	bl	800d814 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	33f1      	adds	r3, #241	; 0xf1
 800caea:	f107 0114 	add.w	r1, r7, #20
 800caee:	2210      	movs	r2, #16
 800caf0:	4618      	mov	r0, r3
 800caf2:	f00c fcd4 	bl	801949e <memcpy1>

        data += 16;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	3310      	adds	r3, #16
 800cafa:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	3b10      	subs	r3, #16
 800cb00:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	2b10      	cmp	r3, #16
 800cb06:	d8c3      	bhi.n	800ca90 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	b292      	uxth	r2, r2
 800cb12:	68b9      	ldr	r1, [r7, #8]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f00c fcc2 	bl	801949e <memcpy1>
    ctx->M_n = len;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800cb22:	e000      	b.n	800cb26 <AES_CMAC_Update+0x17e>
            return;
 800cb24:	bf00      	nop
}
 800cb26:	3730      	adds	r7, #48	; 0x30
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b092      	sub	sp, #72	; 0x48
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800cb36:	f107 031c 	add.w	r3, r7, #28
 800cb3a:	2210      	movs	r2, #16
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f00c fce8 	bl	8019514 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800cb44:	683a      	ldr	r2, [r7, #0]
 800cb46:	f107 011c 	add.w	r1, r7, #28
 800cb4a:	f107 031c 	add.w	r3, r7, #28
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f000 fe60 	bl	800d814 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800cb54:	7f3b      	ldrb	r3, [r7, #28]
 800cb56:	b25b      	sxtb	r3, r3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	da30      	bge.n	800cbbe <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb60:	e01b      	b.n	800cb9a <AES_CMAC_Final+0x6e>
 800cb62:	f107 021c 	add.w	r2, r7, #28
 800cb66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb68:	4413      	add	r3, r2
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	005b      	lsls	r3, r3, #1
 800cb6e:	b25a      	sxtb	r2, r3
 800cb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb72:	3301      	adds	r3, #1
 800cb74:	3348      	adds	r3, #72	; 0x48
 800cb76:	443b      	add	r3, r7
 800cb78:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cb7c:	09db      	lsrs	r3, r3, #7
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	b25b      	sxtb	r3, r3
 800cb82:	4313      	orrs	r3, r2
 800cb84:	b25b      	sxtb	r3, r3
 800cb86:	b2d9      	uxtb	r1, r3
 800cb88:	f107 021c 	add.w	r2, r7, #28
 800cb8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb8e:	4413      	add	r3, r2
 800cb90:	460a      	mov	r2, r1
 800cb92:	701a      	strb	r2, [r3, #0]
 800cb94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb96:	3301      	adds	r3, #1
 800cb98:	647b      	str	r3, [r7, #68]	; 0x44
 800cb9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb9c:	2b0e      	cmp	r3, #14
 800cb9e:	dde0      	ble.n	800cb62 <AES_CMAC_Final+0x36>
 800cba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cba4:	005b      	lsls	r3, r3, #1
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800cbac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbb0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800cbb4:	43db      	mvns	r3, r3
 800cbb6:	b2db      	uxtb	r3, r3
 800cbb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cbbc:	e027      	b.n	800cc0e <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	643b      	str	r3, [r7, #64]	; 0x40
 800cbc2:	e01b      	b.n	800cbfc <AES_CMAC_Final+0xd0>
 800cbc4:	f107 021c 	add.w	r2, r7, #28
 800cbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbca:	4413      	add	r3, r2
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	005b      	lsls	r3, r3, #1
 800cbd0:	b25a      	sxtb	r2, r3
 800cbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	3348      	adds	r3, #72	; 0x48
 800cbd8:	443b      	add	r3, r7
 800cbda:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cbde:	09db      	lsrs	r3, r3, #7
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	b25b      	sxtb	r3, r3
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	b25b      	sxtb	r3, r3
 800cbe8:	b2d9      	uxtb	r1, r3
 800cbea:	f107 021c 	add.w	r2, r7, #28
 800cbee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbf0:	4413      	add	r3, r2
 800cbf2:	460a      	mov	r2, r1
 800cbf4:	701a      	strb	r2, [r3, #0]
 800cbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	643b      	str	r3, [r7, #64]	; 0x40
 800cbfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbfe:	2b0e      	cmp	r3, #14
 800cc00:	dde0      	ble.n	800cbc4 <AES_CMAC_Final+0x98>
 800cc02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cc06:	005b      	lsls	r3, r3, #1
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cc14:	2b10      	cmp	r3, #16
 800cc16:	d11d      	bne.n	800cc54 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800cc18:	2300      	movs	r3, #0
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc1c:	e016      	b.n	800cc4c <AES_CMAC_Final+0x120>
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc22:	4413      	add	r3, r2
 800cc24:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cc28:	781a      	ldrb	r2, [r3, #0]
 800cc2a:	f107 011c 	add.w	r1, r7, #28
 800cc2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc30:	440b      	add	r3, r1
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	4053      	eors	r3, r2
 800cc36:	b2d9      	uxtb	r1, r3
 800cc38:	683a      	ldr	r2, [r7, #0]
 800cc3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc3c:	4413      	add	r3, r2
 800cc3e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cc42:	460a      	mov	r2, r1
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc48:	3301      	adds	r3, #1
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc4e:	2b0f      	cmp	r3, #15
 800cc50:	dde5      	ble.n	800cc1e <AES_CMAC_Final+0xf2>
 800cc52:	e096      	b.n	800cd82 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800cc54:	7f3b      	ldrb	r3, [r7, #28]
 800cc56:	b25b      	sxtb	r3, r3
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	da30      	bge.n	800ccbe <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc60:	e01b      	b.n	800cc9a <AES_CMAC_Final+0x16e>
 800cc62:	f107 021c 	add.w	r2, r7, #28
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	4413      	add	r3, r2
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	005b      	lsls	r3, r3, #1
 800cc6e:	b25a      	sxtb	r2, r3
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	3301      	adds	r3, #1
 800cc74:	3348      	adds	r3, #72	; 0x48
 800cc76:	443b      	add	r3, r7
 800cc78:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800cc7c:	09db      	lsrs	r3, r3, #7
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	b25b      	sxtb	r3, r3
 800cc82:	4313      	orrs	r3, r2
 800cc84:	b25b      	sxtb	r3, r3
 800cc86:	b2d9      	uxtb	r1, r3
 800cc88:	f107 021c 	add.w	r2, r7, #28
 800cc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8e:	4413      	add	r3, r2
 800cc90:	460a      	mov	r2, r1
 800cc92:	701a      	strb	r2, [r3, #0]
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	3301      	adds	r3, #1
 800cc98:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	2b0e      	cmp	r3, #14
 800cc9e:	dde0      	ble.n	800cc62 <AES_CMAC_Final+0x136>
 800cca0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cca4:	005b      	lsls	r3, r3, #1
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800ccac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccb0:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800ccb4:	43db      	mvns	r3, r3
 800ccb6:	b2db      	uxtb	r3, r3
 800ccb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ccbc:	e027      	b.n	800cd0e <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	637b      	str	r3, [r7, #52]	; 0x34
 800ccc2:	e01b      	b.n	800ccfc <AES_CMAC_Final+0x1d0>
 800ccc4:	f107 021c 	add.w	r2, r7, #28
 800ccc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccca:	4413      	add	r3, r2
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	005b      	lsls	r3, r3, #1
 800ccd0:	b25a      	sxtb	r2, r3
 800ccd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	3348      	adds	r3, #72	; 0x48
 800ccd8:	443b      	add	r3, r7
 800ccda:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ccde:	09db      	lsrs	r3, r3, #7
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	b25b      	sxtb	r3, r3
 800cce4:	4313      	orrs	r3, r2
 800cce6:	b25b      	sxtb	r3, r3
 800cce8:	b2d9      	uxtb	r1, r3
 800ccea:	f107 021c 	add.w	r2, r7, #28
 800ccee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf0:	4413      	add	r3, r2
 800ccf2:	460a      	mov	r2, r1
 800ccf4:	701a      	strb	r2, [r3, #0]
 800ccf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	637b      	str	r3, [r7, #52]	; 0x34
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfe:	2b0e      	cmp	r3, #14
 800cd00:	dde0      	ble.n	800ccc4 <AES_CMAC_Final+0x198>
 800cd02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd14:	683a      	ldr	r2, [r7, #0]
 800cd16:	4413      	add	r3, r2
 800cd18:	2280      	movs	r2, #128	; 0x80
 800cd1a:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800cd1e:	e007      	b.n	800cd30 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4413      	add	r3, r2
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd36:	1c5a      	adds	r2, r3, #1
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800cd44:	2b0f      	cmp	r3, #15
 800cd46:	d9eb      	bls.n	800cd20 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800cd48:	2300      	movs	r3, #0
 800cd4a:	633b      	str	r3, [r7, #48]	; 0x30
 800cd4c:	e016      	b.n	800cd7c <AES_CMAC_Final+0x250>
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	4413      	add	r3, r2
 800cd54:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cd58:	781a      	ldrb	r2, [r3, #0]
 800cd5a:	f107 011c 	add.w	r1, r7, #28
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	440b      	add	r3, r1
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	4053      	eors	r3, r2
 800cd66:	b2d9      	uxtb	r1, r3
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6c:	4413      	add	r3, r2
 800cd6e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cd72:	460a      	mov	r2, r1
 800cd74:	701a      	strb	r2, [r3, #0]
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	3301      	adds	r3, #1
 800cd7a:	633b      	str	r3, [r7, #48]	; 0x30
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	2b0f      	cmp	r3, #15
 800cd80:	dde5      	ble.n	800cd4e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800cd82:	2300      	movs	r3, #0
 800cd84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd86:	e015      	b.n	800cdb4 <AES_CMAC_Final+0x288>
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8c:	4413      	add	r3, r2
 800cd8e:	33f1      	adds	r3, #241	; 0xf1
 800cd90:	781a      	ldrb	r2, [r3, #0]
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd96:	440b      	add	r3, r1
 800cd98:	f203 1301 	addw	r3, r3, #257	; 0x101
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	4053      	eors	r3, r2
 800cda0:	b2d9      	uxtb	r1, r3
 800cda2:	683a      	ldr	r2, [r7, #0]
 800cda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda6:	4413      	add	r3, r2
 800cda8:	33f1      	adds	r3, #241	; 0xf1
 800cdaa:	460a      	mov	r2, r1
 800cdac:	701a      	strb	r2, [r3, #0]
 800cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	2b0f      	cmp	r3, #15
 800cdb8:	dde6      	ble.n	800cd88 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800cdc0:	f107 030c 	add.w	r3, r7, #12
 800cdc4:	2210      	movs	r2, #16
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f00c fb69 	bl	801949e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800cdcc:	683a      	ldr	r2, [r7, #0]
 800cdce:	f107 030c 	add.w	r3, r7, #12
 800cdd2:	6879      	ldr	r1, [r7, #4]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f000 fd1d 	bl	800d814 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800cdda:	f107 031c 	add.w	r3, r7, #28
 800cdde:	2210      	movs	r2, #16
 800cde0:	2100      	movs	r1, #0
 800cde2:	4618      	mov	r0, r3
 800cde4:	f00c fb96 	bl	8019514 <memset1>
}
 800cde8:	bf00      	nop
 800cdea:	3748      	adds	r7, #72	; 0x48
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	781a      	ldrb	r2, [r3, #0]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3301      	adds	r3, #1
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	7852      	ldrb	r2, [r2, #1]
 800ce0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3302      	adds	r3, #2
 800ce10:	683a      	ldr	r2, [r7, #0]
 800ce12:	7892      	ldrb	r2, [r2, #2]
 800ce14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	3303      	adds	r3, #3
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	78d2      	ldrb	r2, [r2, #3]
 800ce1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	3304      	adds	r3, #4
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	7912      	ldrb	r2, [r2, #4]
 800ce28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3305      	adds	r3, #5
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	7952      	ldrb	r2, [r2, #5]
 800ce32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	3306      	adds	r3, #6
 800ce38:	683a      	ldr	r2, [r7, #0]
 800ce3a:	7992      	ldrb	r2, [r2, #6]
 800ce3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	3307      	adds	r3, #7
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	79d2      	ldrb	r2, [r2, #7]
 800ce46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	7a12      	ldrb	r2, [r2, #8]
 800ce50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	3309      	adds	r3, #9
 800ce56:	683a      	ldr	r2, [r7, #0]
 800ce58:	7a52      	ldrb	r2, [r2, #9]
 800ce5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	330a      	adds	r3, #10
 800ce60:	683a      	ldr	r2, [r7, #0]
 800ce62:	7a92      	ldrb	r2, [r2, #10]
 800ce64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	330b      	adds	r3, #11
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	7ad2      	ldrb	r2, [r2, #11]
 800ce6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	330c      	adds	r3, #12
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	7b12      	ldrb	r2, [r2, #12]
 800ce78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	330d      	adds	r3, #13
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	7b52      	ldrb	r2, [r2, #13]
 800ce82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	330e      	adds	r3, #14
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	7b92      	ldrb	r2, [r2, #14]
 800ce8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	330f      	adds	r3, #15
 800ce92:	683a      	ldr	r2, [r7, #0]
 800ce94:	7bd2      	ldrb	r2, [r2, #15]
 800ce96:	701a      	strb	r2, [r3, #0]
#endif
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bc80      	pop	{r7}
 800cea0:	4770      	bx	lr

0800cea2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800cea2:	b480      	push	{r7}
 800cea4:	b085      	sub	sp, #20
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	60f8      	str	r0, [r7, #12]
 800ceaa:	60b9      	str	r1, [r7, #8]
 800ceac:	4613      	mov	r3, r2
 800ceae:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ceb0:	e007      	b.n	800cec2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	1c53      	adds	r3, r2, #1
 800ceb6:	60bb      	str	r3, [r7, #8]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	1c59      	adds	r1, r3, #1
 800cebc:	60f9      	str	r1, [r7, #12]
 800cebe:	7812      	ldrb	r2, [r2, #0]
 800cec0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800cec2:	79fb      	ldrb	r3, [r7, #7]
 800cec4:	1e5a      	subs	r2, r3, #1
 800cec6:	71fa      	strb	r2, [r7, #7]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1f2      	bne.n	800ceb2 <copy_block_nn+0x10>
}
 800cecc:	bf00      	nop
 800cece:	bf00      	nop
 800ced0:	3714      	adds	r7, #20
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bc80      	pop	{r7}
 800ced6:	4770      	bx	lr

0800ced8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	781a      	ldrb	r2, [r3, #0]
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	4053      	eors	r3, r2
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3301      	adds	r3, #1
 800cef6:	7819      	ldrb	r1, [r3, #0]
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	3301      	adds	r3, #1
 800cefc:	781a      	ldrb	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	3301      	adds	r3, #1
 800cf02:	404a      	eors	r2, r1
 800cf04:	b2d2      	uxtb	r2, r2
 800cf06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3302      	adds	r3, #2
 800cf0c:	7819      	ldrb	r1, [r3, #0]
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	3302      	adds	r3, #2
 800cf12:	781a      	ldrb	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3302      	adds	r3, #2
 800cf18:	404a      	eors	r2, r1
 800cf1a:	b2d2      	uxtb	r2, r2
 800cf1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	3303      	adds	r3, #3
 800cf22:	7819      	ldrb	r1, [r3, #0]
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	3303      	adds	r3, #3
 800cf28:	781a      	ldrb	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3303      	adds	r3, #3
 800cf2e:	404a      	eors	r2, r1
 800cf30:	b2d2      	uxtb	r2, r2
 800cf32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3304      	adds	r3, #4
 800cf38:	7819      	ldrb	r1, [r3, #0]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	3304      	adds	r3, #4
 800cf3e:	781a      	ldrb	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3304      	adds	r3, #4
 800cf44:	404a      	eors	r2, r1
 800cf46:	b2d2      	uxtb	r2, r2
 800cf48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	3305      	adds	r3, #5
 800cf4e:	7819      	ldrb	r1, [r3, #0]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	3305      	adds	r3, #5
 800cf54:	781a      	ldrb	r2, [r3, #0]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	3305      	adds	r3, #5
 800cf5a:	404a      	eors	r2, r1
 800cf5c:	b2d2      	uxtb	r2, r2
 800cf5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3306      	adds	r3, #6
 800cf64:	7819      	ldrb	r1, [r3, #0]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	3306      	adds	r3, #6
 800cf6a:	781a      	ldrb	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3306      	adds	r3, #6
 800cf70:	404a      	eors	r2, r1
 800cf72:	b2d2      	uxtb	r2, r2
 800cf74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	3307      	adds	r3, #7
 800cf7a:	7819      	ldrb	r1, [r3, #0]
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	3307      	adds	r3, #7
 800cf80:	781a      	ldrb	r2, [r3, #0]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	3307      	adds	r3, #7
 800cf86:	404a      	eors	r2, r1
 800cf88:	b2d2      	uxtb	r2, r2
 800cf8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	3308      	adds	r3, #8
 800cf90:	7819      	ldrb	r1, [r3, #0]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	3308      	adds	r3, #8
 800cf96:	781a      	ldrb	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	3308      	adds	r3, #8
 800cf9c:	404a      	eors	r2, r1
 800cf9e:	b2d2      	uxtb	r2, r2
 800cfa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	3309      	adds	r3, #9
 800cfa6:	7819      	ldrb	r1, [r3, #0]
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	3309      	adds	r3, #9
 800cfac:	781a      	ldrb	r2, [r3, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	3309      	adds	r3, #9
 800cfb2:	404a      	eors	r2, r1
 800cfb4:	b2d2      	uxtb	r2, r2
 800cfb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	330a      	adds	r3, #10
 800cfbc:	7819      	ldrb	r1, [r3, #0]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	330a      	adds	r3, #10
 800cfc2:	781a      	ldrb	r2, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	330a      	adds	r3, #10
 800cfc8:	404a      	eors	r2, r1
 800cfca:	b2d2      	uxtb	r2, r2
 800cfcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	330b      	adds	r3, #11
 800cfd2:	7819      	ldrb	r1, [r3, #0]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	330b      	adds	r3, #11
 800cfd8:	781a      	ldrb	r2, [r3, #0]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	330b      	adds	r3, #11
 800cfde:	404a      	eors	r2, r1
 800cfe0:	b2d2      	uxtb	r2, r2
 800cfe2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	330c      	adds	r3, #12
 800cfe8:	7819      	ldrb	r1, [r3, #0]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	330c      	adds	r3, #12
 800cfee:	781a      	ldrb	r2, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	330c      	adds	r3, #12
 800cff4:	404a      	eors	r2, r1
 800cff6:	b2d2      	uxtb	r2, r2
 800cff8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	330d      	adds	r3, #13
 800cffe:	7819      	ldrb	r1, [r3, #0]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	330d      	adds	r3, #13
 800d004:	781a      	ldrb	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	330d      	adds	r3, #13
 800d00a:	404a      	eors	r2, r1
 800d00c:	b2d2      	uxtb	r2, r2
 800d00e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	330e      	adds	r3, #14
 800d014:	7819      	ldrb	r1, [r3, #0]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	330e      	adds	r3, #14
 800d01a:	781a      	ldrb	r2, [r3, #0]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	330e      	adds	r3, #14
 800d020:	404a      	eors	r2, r1
 800d022:	b2d2      	uxtb	r2, r2
 800d024:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	330f      	adds	r3, #15
 800d02a:	7819      	ldrb	r1, [r3, #0]
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	330f      	adds	r3, #15
 800d030:	781a      	ldrb	r2, [r3, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	330f      	adds	r3, #15
 800d036:	404a      	eors	r2, r1
 800d038:	b2d2      	uxtb	r2, r2
 800d03a:	701a      	strb	r2, [r3, #0]
#endif
}
 800d03c:	bf00      	nop
 800d03e:	370c      	adds	r7, #12
 800d040:	46bd      	mov	sp, r7
 800d042:	bc80      	pop	{r7}
 800d044:	4770      	bx	lr

0800d046 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800d046:	b480      	push	{r7}
 800d048:	b085      	sub	sp, #20
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	60f8      	str	r0, [r7, #12]
 800d04e:	60b9      	str	r1, [r7, #8]
 800d050:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	781a      	ldrb	r2, [r3, #0]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	4053      	eors	r3, r2
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	3301      	adds	r3, #1
 800d066:	7819      	ldrb	r1, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	3301      	adds	r3, #1
 800d06c:	781a      	ldrb	r2, [r3, #0]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	3301      	adds	r3, #1
 800d072:	404a      	eors	r2, r1
 800d074:	b2d2      	uxtb	r2, r2
 800d076:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	3302      	adds	r3, #2
 800d07c:	7819      	ldrb	r1, [r3, #0]
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	3302      	adds	r3, #2
 800d082:	781a      	ldrb	r2, [r3, #0]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3302      	adds	r3, #2
 800d088:	404a      	eors	r2, r1
 800d08a:	b2d2      	uxtb	r2, r2
 800d08c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	3303      	adds	r3, #3
 800d092:	7819      	ldrb	r1, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	3303      	adds	r3, #3
 800d098:	781a      	ldrb	r2, [r3, #0]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3303      	adds	r3, #3
 800d09e:	404a      	eors	r2, r1
 800d0a0:	b2d2      	uxtb	r2, r2
 800d0a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	7819      	ldrb	r1, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	781a      	ldrb	r2, [r3, #0]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	404a      	eors	r2, r1
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	3305      	adds	r3, #5
 800d0be:	7819      	ldrb	r1, [r3, #0]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3305      	adds	r3, #5
 800d0c4:	781a      	ldrb	r2, [r3, #0]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	3305      	adds	r3, #5
 800d0ca:	404a      	eors	r2, r1
 800d0cc:	b2d2      	uxtb	r2, r2
 800d0ce:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	3306      	adds	r3, #6
 800d0d4:	7819      	ldrb	r1, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	3306      	adds	r3, #6
 800d0da:	781a      	ldrb	r2, [r3, #0]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3306      	adds	r3, #6
 800d0e0:	404a      	eors	r2, r1
 800d0e2:	b2d2      	uxtb	r2, r2
 800d0e4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	3307      	adds	r3, #7
 800d0ea:	7819      	ldrb	r1, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	3307      	adds	r3, #7
 800d0f0:	781a      	ldrb	r2, [r3, #0]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	3307      	adds	r3, #7
 800d0f6:	404a      	eors	r2, r1
 800d0f8:	b2d2      	uxtb	r2, r2
 800d0fa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	3308      	adds	r3, #8
 800d100:	7819      	ldrb	r1, [r3, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	3308      	adds	r3, #8
 800d106:	781a      	ldrb	r2, [r3, #0]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3308      	adds	r3, #8
 800d10c:	404a      	eors	r2, r1
 800d10e:	b2d2      	uxtb	r2, r2
 800d110:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	3309      	adds	r3, #9
 800d116:	7819      	ldrb	r1, [r3, #0]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	3309      	adds	r3, #9
 800d11c:	781a      	ldrb	r2, [r3, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	3309      	adds	r3, #9
 800d122:	404a      	eors	r2, r1
 800d124:	b2d2      	uxtb	r2, r2
 800d126:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	330a      	adds	r3, #10
 800d12c:	7819      	ldrb	r1, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	330a      	adds	r3, #10
 800d132:	781a      	ldrb	r2, [r3, #0]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	330a      	adds	r3, #10
 800d138:	404a      	eors	r2, r1
 800d13a:	b2d2      	uxtb	r2, r2
 800d13c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	330b      	adds	r3, #11
 800d142:	7819      	ldrb	r1, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	330b      	adds	r3, #11
 800d148:	781a      	ldrb	r2, [r3, #0]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	330b      	adds	r3, #11
 800d14e:	404a      	eors	r2, r1
 800d150:	b2d2      	uxtb	r2, r2
 800d152:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	330c      	adds	r3, #12
 800d158:	7819      	ldrb	r1, [r3, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	330c      	adds	r3, #12
 800d15e:	781a      	ldrb	r2, [r3, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	330c      	adds	r3, #12
 800d164:	404a      	eors	r2, r1
 800d166:	b2d2      	uxtb	r2, r2
 800d168:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	330d      	adds	r3, #13
 800d16e:	7819      	ldrb	r1, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	330d      	adds	r3, #13
 800d174:	781a      	ldrb	r2, [r3, #0]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	330d      	adds	r3, #13
 800d17a:	404a      	eors	r2, r1
 800d17c:	b2d2      	uxtb	r2, r2
 800d17e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	330e      	adds	r3, #14
 800d184:	7819      	ldrb	r1, [r3, #0]
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	330e      	adds	r3, #14
 800d18a:	781a      	ldrb	r2, [r3, #0]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	330e      	adds	r3, #14
 800d190:	404a      	eors	r2, r1
 800d192:	b2d2      	uxtb	r2, r2
 800d194:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	330f      	adds	r3, #15
 800d19a:	7819      	ldrb	r1, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	330f      	adds	r3, #15
 800d1a0:	781a      	ldrb	r2, [r3, #0]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	330f      	adds	r3, #15
 800d1a6:	404a      	eors	r2, r1
 800d1a8:	b2d2      	uxtb	r2, r2
 800d1aa:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800d1ac:	bf00      	nop
 800d1ae:	3714      	adds	r7, #20
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bc80      	pop	{r7}
 800d1b4:	4770      	bx	lr

0800d1b6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b082      	sub	sp, #8
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
 800d1be:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f7ff fe88 	bl	800ced8 <xor_block>
}
 800d1c8:	bf00      	nop
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	4b48      	ldr	r3, [pc, #288]	; (800d300 <shift_sub_rows+0x130>)
 800d1e0:	5c9a      	ldrb	r2, [r3, r2]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	3304      	adds	r3, #4
 800d1f2:	4a43      	ldr	r2, [pc, #268]	; (800d300 <shift_sub_rows+0x130>)
 800d1f4:	5c52      	ldrb	r2, [r2, r1]
 800d1f6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	4619      	mov	r1, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	3308      	adds	r3, #8
 800d204:	4a3e      	ldr	r2, [pc, #248]	; (800d300 <shift_sub_rows+0x130>)
 800d206:	5c52      	ldrb	r2, [r2, r1]
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	330c      	adds	r3, #12
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	4619      	mov	r1, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	330c      	adds	r3, #12
 800d216:	4a3a      	ldr	r2, [pc, #232]	; (800d300 <shift_sub_rows+0x130>)
 800d218:	5c52      	ldrb	r2, [r2, r1]
 800d21a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	785b      	ldrb	r3, [r3, #1]
 800d220:	73fb      	strb	r3, [r7, #15]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	3305      	adds	r3, #5
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	4619      	mov	r1, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	3301      	adds	r3, #1
 800d22e:	4a34      	ldr	r2, [pc, #208]	; (800d300 <shift_sub_rows+0x130>)
 800d230:	5c52      	ldrb	r2, [r2, r1]
 800d232:	701a      	strb	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	3309      	adds	r3, #9
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	4619      	mov	r1, r3
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	3305      	adds	r3, #5
 800d240:	4a2f      	ldr	r2, [pc, #188]	; (800d300 <shift_sub_rows+0x130>)
 800d242:	5c52      	ldrb	r2, [r2, r1]
 800d244:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	330d      	adds	r3, #13
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	4619      	mov	r1, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	3309      	adds	r3, #9
 800d252:	4a2b      	ldr	r2, [pc, #172]	; (800d300 <shift_sub_rows+0x130>)
 800d254:	5c52      	ldrb	r2, [r2, r1]
 800d256:	701a      	strb	r2, [r3, #0]
 800d258:	7bfa      	ldrb	r2, [r7, #15]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	330d      	adds	r3, #13
 800d25e:	4928      	ldr	r1, [pc, #160]	; (800d300 <shift_sub_rows+0x130>)
 800d260:	5c8a      	ldrb	r2, [r1, r2]
 800d262:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	789b      	ldrb	r3, [r3, #2]
 800d268:	73fb      	strb	r3, [r7, #15]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	330a      	adds	r3, #10
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	4619      	mov	r1, r3
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	3302      	adds	r3, #2
 800d276:	4a22      	ldr	r2, [pc, #136]	; (800d300 <shift_sub_rows+0x130>)
 800d278:	5c52      	ldrb	r2, [r2, r1]
 800d27a:	701a      	strb	r2, [r3, #0]
 800d27c:	7bfa      	ldrb	r2, [r7, #15]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	330a      	adds	r3, #10
 800d282:	491f      	ldr	r1, [pc, #124]	; (800d300 <shift_sub_rows+0x130>)
 800d284:	5c8a      	ldrb	r2, [r1, r2]
 800d286:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	799b      	ldrb	r3, [r3, #6]
 800d28c:	73fb      	strb	r3, [r7, #15]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	330e      	adds	r3, #14
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	4619      	mov	r1, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	3306      	adds	r3, #6
 800d29a:	4a19      	ldr	r2, [pc, #100]	; (800d300 <shift_sub_rows+0x130>)
 800d29c:	5c52      	ldrb	r2, [r2, r1]
 800d29e:	701a      	strb	r2, [r3, #0]
 800d2a0:	7bfa      	ldrb	r2, [r7, #15]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	330e      	adds	r3, #14
 800d2a6:	4916      	ldr	r1, [pc, #88]	; (800d300 <shift_sub_rows+0x130>)
 800d2a8:	5c8a      	ldrb	r2, [r1, r2]
 800d2aa:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	7bdb      	ldrb	r3, [r3, #15]
 800d2b0:	73fb      	strb	r3, [r7, #15]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	330b      	adds	r3, #11
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	330f      	adds	r3, #15
 800d2be:	4a10      	ldr	r2, [pc, #64]	; (800d300 <shift_sub_rows+0x130>)
 800d2c0:	5c52      	ldrb	r2, [r2, r1]
 800d2c2:	701a      	strb	r2, [r3, #0]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	3307      	adds	r3, #7
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	330b      	adds	r3, #11
 800d2d0:	4a0b      	ldr	r2, [pc, #44]	; (800d300 <shift_sub_rows+0x130>)
 800d2d2:	5c52      	ldrb	r2, [r2, r1]
 800d2d4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	3303      	adds	r3, #3
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	4619      	mov	r1, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3307      	adds	r3, #7
 800d2e2:	4a07      	ldr	r2, [pc, #28]	; (800d300 <shift_sub_rows+0x130>)
 800d2e4:	5c52      	ldrb	r2, [r2, r1]
 800d2e6:	701a      	strb	r2, [r3, #0]
 800d2e8:	7bfa      	ldrb	r2, [r7, #15]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	3303      	adds	r3, #3
 800d2ee:	4904      	ldr	r1, [pc, #16]	; (800d300 <shift_sub_rows+0x130>)
 800d2f0:	5c8a      	ldrb	r2, [r1, r2]
 800d2f2:	701a      	strb	r2, [r3, #0]
}
 800d2f4:	bf00      	nop
 800d2f6:	3714      	adds	r7, #20
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bc80      	pop	{r7}
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	0801ea2c 	.word	0x0801ea2c

0800d304 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800d30c:	f107 0308 	add.w	r3, r7, #8
 800d310:	6879      	ldr	r1, [r7, #4]
 800d312:	4618      	mov	r0, r3
 800d314:	f7ff fd6c 	bl	800cdf0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800d318:	7a3b      	ldrb	r3, [r7, #8]
 800d31a:	461a      	mov	r2, r3
 800d31c:	4b9a      	ldr	r3, [pc, #616]	; (800d588 <mix_sub_columns+0x284>)
 800d31e:	5c9a      	ldrb	r2, [r3, r2]
 800d320:	7b7b      	ldrb	r3, [r7, #13]
 800d322:	4619      	mov	r1, r3
 800d324:	4b99      	ldr	r3, [pc, #612]	; (800d58c <mix_sub_columns+0x288>)
 800d326:	5c5b      	ldrb	r3, [r3, r1]
 800d328:	4053      	eors	r3, r2
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	7cbb      	ldrb	r3, [r7, #18]
 800d32e:	4619      	mov	r1, r3
 800d330:	4b97      	ldr	r3, [pc, #604]	; (800d590 <mix_sub_columns+0x28c>)
 800d332:	5c5b      	ldrb	r3, [r3, r1]
 800d334:	4053      	eors	r3, r2
 800d336:	b2da      	uxtb	r2, r3
 800d338:	7dfb      	ldrb	r3, [r7, #23]
 800d33a:	4619      	mov	r1, r3
 800d33c:	4b94      	ldr	r3, [pc, #592]	; (800d590 <mix_sub_columns+0x28c>)
 800d33e:	5c5b      	ldrb	r3, [r3, r1]
 800d340:	4053      	eors	r3, r2
 800d342:	b2da      	uxtb	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800d348:	7a3b      	ldrb	r3, [r7, #8]
 800d34a:	461a      	mov	r2, r3
 800d34c:	4b90      	ldr	r3, [pc, #576]	; (800d590 <mix_sub_columns+0x28c>)
 800d34e:	5c9a      	ldrb	r2, [r3, r2]
 800d350:	7b7b      	ldrb	r3, [r7, #13]
 800d352:	4619      	mov	r1, r3
 800d354:	4b8c      	ldr	r3, [pc, #560]	; (800d588 <mix_sub_columns+0x284>)
 800d356:	5c5b      	ldrb	r3, [r3, r1]
 800d358:	4053      	eors	r3, r2
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	7cbb      	ldrb	r3, [r7, #18]
 800d35e:	4619      	mov	r1, r3
 800d360:	4b8a      	ldr	r3, [pc, #552]	; (800d58c <mix_sub_columns+0x288>)
 800d362:	5c5b      	ldrb	r3, [r3, r1]
 800d364:	4053      	eors	r3, r2
 800d366:	b2d9      	uxtb	r1, r3
 800d368:	7dfb      	ldrb	r3, [r7, #23]
 800d36a:	461a      	mov	r2, r3
 800d36c:	4b88      	ldr	r3, [pc, #544]	; (800d590 <mix_sub_columns+0x28c>)
 800d36e:	5c9a      	ldrb	r2, [r3, r2]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	3301      	adds	r3, #1
 800d374:	404a      	eors	r2, r1
 800d376:	b2d2      	uxtb	r2, r2
 800d378:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800d37a:	7a3b      	ldrb	r3, [r7, #8]
 800d37c:	461a      	mov	r2, r3
 800d37e:	4b84      	ldr	r3, [pc, #528]	; (800d590 <mix_sub_columns+0x28c>)
 800d380:	5c9a      	ldrb	r2, [r3, r2]
 800d382:	7b7b      	ldrb	r3, [r7, #13]
 800d384:	4619      	mov	r1, r3
 800d386:	4b82      	ldr	r3, [pc, #520]	; (800d590 <mix_sub_columns+0x28c>)
 800d388:	5c5b      	ldrb	r3, [r3, r1]
 800d38a:	4053      	eors	r3, r2
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	7cbb      	ldrb	r3, [r7, #18]
 800d390:	4619      	mov	r1, r3
 800d392:	4b7d      	ldr	r3, [pc, #500]	; (800d588 <mix_sub_columns+0x284>)
 800d394:	5c5b      	ldrb	r3, [r3, r1]
 800d396:	4053      	eors	r3, r2
 800d398:	b2d9      	uxtb	r1, r3
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
 800d39c:	461a      	mov	r2, r3
 800d39e:	4b7b      	ldr	r3, [pc, #492]	; (800d58c <mix_sub_columns+0x288>)
 800d3a0:	5c9a      	ldrb	r2, [r3, r2]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3302      	adds	r3, #2
 800d3a6:	404a      	eors	r2, r1
 800d3a8:	b2d2      	uxtb	r2, r2
 800d3aa:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800d3ac:	7a3b      	ldrb	r3, [r7, #8]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	4b76      	ldr	r3, [pc, #472]	; (800d58c <mix_sub_columns+0x288>)
 800d3b2:	5c9a      	ldrb	r2, [r3, r2]
 800d3b4:	7b7b      	ldrb	r3, [r7, #13]
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	4b75      	ldr	r3, [pc, #468]	; (800d590 <mix_sub_columns+0x28c>)
 800d3ba:	5c5b      	ldrb	r3, [r3, r1]
 800d3bc:	4053      	eors	r3, r2
 800d3be:	b2da      	uxtb	r2, r3
 800d3c0:	7cbb      	ldrb	r3, [r7, #18]
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	4b72      	ldr	r3, [pc, #456]	; (800d590 <mix_sub_columns+0x28c>)
 800d3c6:	5c5b      	ldrb	r3, [r3, r1]
 800d3c8:	4053      	eors	r3, r2
 800d3ca:	b2d9      	uxtb	r1, r3
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	4b6d      	ldr	r3, [pc, #436]	; (800d588 <mix_sub_columns+0x284>)
 800d3d2:	5c9a      	ldrb	r2, [r3, r2]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3303      	adds	r3, #3
 800d3d8:	404a      	eors	r2, r1
 800d3da:	b2d2      	uxtb	r2, r2
 800d3dc:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800d3de:	7b3b      	ldrb	r3, [r7, #12]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	4b69      	ldr	r3, [pc, #420]	; (800d588 <mix_sub_columns+0x284>)
 800d3e4:	5c9a      	ldrb	r2, [r3, r2]
 800d3e6:	7c7b      	ldrb	r3, [r7, #17]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	4b68      	ldr	r3, [pc, #416]	; (800d58c <mix_sub_columns+0x288>)
 800d3ec:	5c5b      	ldrb	r3, [r3, r1]
 800d3ee:	4053      	eors	r3, r2
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	7dbb      	ldrb	r3, [r7, #22]
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4b66      	ldr	r3, [pc, #408]	; (800d590 <mix_sub_columns+0x28c>)
 800d3f8:	5c5b      	ldrb	r3, [r3, r1]
 800d3fa:	4053      	eors	r3, r2
 800d3fc:	b2d9      	uxtb	r1, r3
 800d3fe:	7afb      	ldrb	r3, [r7, #11]
 800d400:	461a      	mov	r2, r3
 800d402:	4b63      	ldr	r3, [pc, #396]	; (800d590 <mix_sub_columns+0x28c>)
 800d404:	5c9a      	ldrb	r2, [r3, r2]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3304      	adds	r3, #4
 800d40a:	404a      	eors	r2, r1
 800d40c:	b2d2      	uxtb	r2, r2
 800d40e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800d410:	7b3b      	ldrb	r3, [r7, #12]
 800d412:	461a      	mov	r2, r3
 800d414:	4b5e      	ldr	r3, [pc, #376]	; (800d590 <mix_sub_columns+0x28c>)
 800d416:	5c9a      	ldrb	r2, [r3, r2]
 800d418:	7c7b      	ldrb	r3, [r7, #17]
 800d41a:	4619      	mov	r1, r3
 800d41c:	4b5a      	ldr	r3, [pc, #360]	; (800d588 <mix_sub_columns+0x284>)
 800d41e:	5c5b      	ldrb	r3, [r3, r1]
 800d420:	4053      	eors	r3, r2
 800d422:	b2da      	uxtb	r2, r3
 800d424:	7dbb      	ldrb	r3, [r7, #22]
 800d426:	4619      	mov	r1, r3
 800d428:	4b58      	ldr	r3, [pc, #352]	; (800d58c <mix_sub_columns+0x288>)
 800d42a:	5c5b      	ldrb	r3, [r3, r1]
 800d42c:	4053      	eors	r3, r2
 800d42e:	b2d9      	uxtb	r1, r3
 800d430:	7afb      	ldrb	r3, [r7, #11]
 800d432:	461a      	mov	r2, r3
 800d434:	4b56      	ldr	r3, [pc, #344]	; (800d590 <mix_sub_columns+0x28c>)
 800d436:	5c9a      	ldrb	r2, [r3, r2]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	3305      	adds	r3, #5
 800d43c:	404a      	eors	r2, r1
 800d43e:	b2d2      	uxtb	r2, r2
 800d440:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800d442:	7b3b      	ldrb	r3, [r7, #12]
 800d444:	461a      	mov	r2, r3
 800d446:	4b52      	ldr	r3, [pc, #328]	; (800d590 <mix_sub_columns+0x28c>)
 800d448:	5c9a      	ldrb	r2, [r3, r2]
 800d44a:	7c7b      	ldrb	r3, [r7, #17]
 800d44c:	4619      	mov	r1, r3
 800d44e:	4b50      	ldr	r3, [pc, #320]	; (800d590 <mix_sub_columns+0x28c>)
 800d450:	5c5b      	ldrb	r3, [r3, r1]
 800d452:	4053      	eors	r3, r2
 800d454:	b2da      	uxtb	r2, r3
 800d456:	7dbb      	ldrb	r3, [r7, #22]
 800d458:	4619      	mov	r1, r3
 800d45a:	4b4b      	ldr	r3, [pc, #300]	; (800d588 <mix_sub_columns+0x284>)
 800d45c:	5c5b      	ldrb	r3, [r3, r1]
 800d45e:	4053      	eors	r3, r2
 800d460:	b2d9      	uxtb	r1, r3
 800d462:	7afb      	ldrb	r3, [r7, #11]
 800d464:	461a      	mov	r2, r3
 800d466:	4b49      	ldr	r3, [pc, #292]	; (800d58c <mix_sub_columns+0x288>)
 800d468:	5c9a      	ldrb	r2, [r3, r2]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3306      	adds	r3, #6
 800d46e:	404a      	eors	r2, r1
 800d470:	b2d2      	uxtb	r2, r2
 800d472:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800d474:	7b3b      	ldrb	r3, [r7, #12]
 800d476:	461a      	mov	r2, r3
 800d478:	4b44      	ldr	r3, [pc, #272]	; (800d58c <mix_sub_columns+0x288>)
 800d47a:	5c9a      	ldrb	r2, [r3, r2]
 800d47c:	7c7b      	ldrb	r3, [r7, #17]
 800d47e:	4619      	mov	r1, r3
 800d480:	4b43      	ldr	r3, [pc, #268]	; (800d590 <mix_sub_columns+0x28c>)
 800d482:	5c5b      	ldrb	r3, [r3, r1]
 800d484:	4053      	eors	r3, r2
 800d486:	b2da      	uxtb	r2, r3
 800d488:	7dbb      	ldrb	r3, [r7, #22]
 800d48a:	4619      	mov	r1, r3
 800d48c:	4b40      	ldr	r3, [pc, #256]	; (800d590 <mix_sub_columns+0x28c>)
 800d48e:	5c5b      	ldrb	r3, [r3, r1]
 800d490:	4053      	eors	r3, r2
 800d492:	b2d9      	uxtb	r1, r3
 800d494:	7afb      	ldrb	r3, [r7, #11]
 800d496:	461a      	mov	r2, r3
 800d498:	4b3b      	ldr	r3, [pc, #236]	; (800d588 <mix_sub_columns+0x284>)
 800d49a:	5c9a      	ldrb	r2, [r3, r2]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	3307      	adds	r3, #7
 800d4a0:	404a      	eors	r2, r1
 800d4a2:	b2d2      	uxtb	r2, r2
 800d4a4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800d4a6:	7c3b      	ldrb	r3, [r7, #16]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	4b37      	ldr	r3, [pc, #220]	; (800d588 <mix_sub_columns+0x284>)
 800d4ac:	5c9a      	ldrb	r2, [r3, r2]
 800d4ae:	7d7b      	ldrb	r3, [r7, #21]
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	4b36      	ldr	r3, [pc, #216]	; (800d58c <mix_sub_columns+0x288>)
 800d4b4:	5c5b      	ldrb	r3, [r3, r1]
 800d4b6:	4053      	eors	r3, r2
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	7abb      	ldrb	r3, [r7, #10]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	4b34      	ldr	r3, [pc, #208]	; (800d590 <mix_sub_columns+0x28c>)
 800d4c0:	5c5b      	ldrb	r3, [r3, r1]
 800d4c2:	4053      	eors	r3, r2
 800d4c4:	b2d9      	uxtb	r1, r3
 800d4c6:	7bfb      	ldrb	r3, [r7, #15]
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	4b31      	ldr	r3, [pc, #196]	; (800d590 <mix_sub_columns+0x28c>)
 800d4cc:	5c9a      	ldrb	r2, [r3, r2]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	404a      	eors	r2, r1
 800d4d4:	b2d2      	uxtb	r2, r2
 800d4d6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800d4d8:	7c3b      	ldrb	r3, [r7, #16]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	4b2c      	ldr	r3, [pc, #176]	; (800d590 <mix_sub_columns+0x28c>)
 800d4de:	5c9a      	ldrb	r2, [r3, r2]
 800d4e0:	7d7b      	ldrb	r3, [r7, #21]
 800d4e2:	4619      	mov	r1, r3
 800d4e4:	4b28      	ldr	r3, [pc, #160]	; (800d588 <mix_sub_columns+0x284>)
 800d4e6:	5c5b      	ldrb	r3, [r3, r1]
 800d4e8:	4053      	eors	r3, r2
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	7abb      	ldrb	r3, [r7, #10]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4b26      	ldr	r3, [pc, #152]	; (800d58c <mix_sub_columns+0x288>)
 800d4f2:	5c5b      	ldrb	r3, [r3, r1]
 800d4f4:	4053      	eors	r3, r2
 800d4f6:	b2d9      	uxtb	r1, r3
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	4b24      	ldr	r3, [pc, #144]	; (800d590 <mix_sub_columns+0x28c>)
 800d4fe:	5c9a      	ldrb	r2, [r3, r2]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	3309      	adds	r3, #9
 800d504:	404a      	eors	r2, r1
 800d506:	b2d2      	uxtb	r2, r2
 800d508:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800d50a:	7c3b      	ldrb	r3, [r7, #16]
 800d50c:	461a      	mov	r2, r3
 800d50e:	4b20      	ldr	r3, [pc, #128]	; (800d590 <mix_sub_columns+0x28c>)
 800d510:	5c9a      	ldrb	r2, [r3, r2]
 800d512:	7d7b      	ldrb	r3, [r7, #21]
 800d514:	4619      	mov	r1, r3
 800d516:	4b1e      	ldr	r3, [pc, #120]	; (800d590 <mix_sub_columns+0x28c>)
 800d518:	5c5b      	ldrb	r3, [r3, r1]
 800d51a:	4053      	eors	r3, r2
 800d51c:	b2da      	uxtb	r2, r3
 800d51e:	7abb      	ldrb	r3, [r7, #10]
 800d520:	4619      	mov	r1, r3
 800d522:	4b19      	ldr	r3, [pc, #100]	; (800d588 <mix_sub_columns+0x284>)
 800d524:	5c5b      	ldrb	r3, [r3, r1]
 800d526:	4053      	eors	r3, r2
 800d528:	b2d9      	uxtb	r1, r3
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
 800d52c:	461a      	mov	r2, r3
 800d52e:	4b17      	ldr	r3, [pc, #92]	; (800d58c <mix_sub_columns+0x288>)
 800d530:	5c9a      	ldrb	r2, [r3, r2]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	330a      	adds	r3, #10
 800d536:	404a      	eors	r2, r1
 800d538:	b2d2      	uxtb	r2, r2
 800d53a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800d53c:	7c3b      	ldrb	r3, [r7, #16]
 800d53e:	461a      	mov	r2, r3
 800d540:	4b12      	ldr	r3, [pc, #72]	; (800d58c <mix_sub_columns+0x288>)
 800d542:	5c9a      	ldrb	r2, [r3, r2]
 800d544:	7d7b      	ldrb	r3, [r7, #21]
 800d546:	4619      	mov	r1, r3
 800d548:	4b11      	ldr	r3, [pc, #68]	; (800d590 <mix_sub_columns+0x28c>)
 800d54a:	5c5b      	ldrb	r3, [r3, r1]
 800d54c:	4053      	eors	r3, r2
 800d54e:	b2da      	uxtb	r2, r3
 800d550:	7abb      	ldrb	r3, [r7, #10]
 800d552:	4619      	mov	r1, r3
 800d554:	4b0e      	ldr	r3, [pc, #56]	; (800d590 <mix_sub_columns+0x28c>)
 800d556:	5c5b      	ldrb	r3, [r3, r1]
 800d558:	4053      	eors	r3, r2
 800d55a:	b2d9      	uxtb	r1, r3
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	461a      	mov	r2, r3
 800d560:	4b09      	ldr	r3, [pc, #36]	; (800d588 <mix_sub_columns+0x284>)
 800d562:	5c9a      	ldrb	r2, [r3, r2]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	330b      	adds	r3, #11
 800d568:	404a      	eors	r2, r1
 800d56a:	b2d2      	uxtb	r2, r2
 800d56c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800d56e:	7d3b      	ldrb	r3, [r7, #20]
 800d570:	461a      	mov	r2, r3
 800d572:	4b05      	ldr	r3, [pc, #20]	; (800d588 <mix_sub_columns+0x284>)
 800d574:	5c9a      	ldrb	r2, [r3, r2]
 800d576:	7a7b      	ldrb	r3, [r7, #9]
 800d578:	4619      	mov	r1, r3
 800d57a:	4b04      	ldr	r3, [pc, #16]	; (800d58c <mix_sub_columns+0x288>)
 800d57c:	5c5b      	ldrb	r3, [r3, r1]
 800d57e:	4053      	eors	r3, r2
 800d580:	b2da      	uxtb	r2, r3
 800d582:	7bbb      	ldrb	r3, [r7, #14]
 800d584:	4619      	mov	r1, r3
 800d586:	e005      	b.n	800d594 <mix_sub_columns+0x290>
 800d588:	0801eb2c 	.word	0x0801eb2c
 800d58c:	0801ec2c 	.word	0x0801ec2c
 800d590:	0801ea2c 	.word	0x0801ea2c
 800d594:	4b2d      	ldr	r3, [pc, #180]	; (800d64c <mix_sub_columns+0x348>)
 800d596:	5c5b      	ldrb	r3, [r3, r1]
 800d598:	4053      	eors	r3, r2
 800d59a:	b2d9      	uxtb	r1, r3
 800d59c:	7cfb      	ldrb	r3, [r7, #19]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	4b2a      	ldr	r3, [pc, #168]	; (800d64c <mix_sub_columns+0x348>)
 800d5a2:	5c9a      	ldrb	r2, [r3, r2]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	330c      	adds	r3, #12
 800d5a8:	404a      	eors	r2, r1
 800d5aa:	b2d2      	uxtb	r2, r2
 800d5ac:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800d5ae:	7d3b      	ldrb	r3, [r7, #20]
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	4b26      	ldr	r3, [pc, #152]	; (800d64c <mix_sub_columns+0x348>)
 800d5b4:	5c9a      	ldrb	r2, [r3, r2]
 800d5b6:	7a7b      	ldrb	r3, [r7, #9]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	4b25      	ldr	r3, [pc, #148]	; (800d650 <mix_sub_columns+0x34c>)
 800d5bc:	5c5b      	ldrb	r3, [r3, r1]
 800d5be:	4053      	eors	r3, r2
 800d5c0:	b2da      	uxtb	r2, r3
 800d5c2:	7bbb      	ldrb	r3, [r7, #14]
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	4b23      	ldr	r3, [pc, #140]	; (800d654 <mix_sub_columns+0x350>)
 800d5c8:	5c5b      	ldrb	r3, [r3, r1]
 800d5ca:	4053      	eors	r3, r2
 800d5cc:	b2d9      	uxtb	r1, r3
 800d5ce:	7cfb      	ldrb	r3, [r7, #19]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	4b1e      	ldr	r3, [pc, #120]	; (800d64c <mix_sub_columns+0x348>)
 800d5d4:	5c9a      	ldrb	r2, [r3, r2]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	330d      	adds	r3, #13
 800d5da:	404a      	eors	r2, r1
 800d5dc:	b2d2      	uxtb	r2, r2
 800d5de:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800d5e0:	7d3b      	ldrb	r3, [r7, #20]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	4b19      	ldr	r3, [pc, #100]	; (800d64c <mix_sub_columns+0x348>)
 800d5e6:	5c9a      	ldrb	r2, [r3, r2]
 800d5e8:	7a7b      	ldrb	r3, [r7, #9]
 800d5ea:	4619      	mov	r1, r3
 800d5ec:	4b17      	ldr	r3, [pc, #92]	; (800d64c <mix_sub_columns+0x348>)
 800d5ee:	5c5b      	ldrb	r3, [r3, r1]
 800d5f0:	4053      	eors	r3, r2
 800d5f2:	b2da      	uxtb	r2, r3
 800d5f4:	7bbb      	ldrb	r3, [r7, #14]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4b15      	ldr	r3, [pc, #84]	; (800d650 <mix_sub_columns+0x34c>)
 800d5fa:	5c5b      	ldrb	r3, [r3, r1]
 800d5fc:	4053      	eors	r3, r2
 800d5fe:	b2d9      	uxtb	r1, r3
 800d600:	7cfb      	ldrb	r3, [r7, #19]
 800d602:	461a      	mov	r2, r3
 800d604:	4b13      	ldr	r3, [pc, #76]	; (800d654 <mix_sub_columns+0x350>)
 800d606:	5c9a      	ldrb	r2, [r3, r2]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	330e      	adds	r3, #14
 800d60c:	404a      	eors	r2, r1
 800d60e:	b2d2      	uxtb	r2, r2
 800d610:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800d612:	7d3b      	ldrb	r3, [r7, #20]
 800d614:	461a      	mov	r2, r3
 800d616:	4b0f      	ldr	r3, [pc, #60]	; (800d654 <mix_sub_columns+0x350>)
 800d618:	5c9a      	ldrb	r2, [r3, r2]
 800d61a:	7a7b      	ldrb	r3, [r7, #9]
 800d61c:	4619      	mov	r1, r3
 800d61e:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <mix_sub_columns+0x348>)
 800d620:	5c5b      	ldrb	r3, [r3, r1]
 800d622:	4053      	eors	r3, r2
 800d624:	b2da      	uxtb	r2, r3
 800d626:	7bbb      	ldrb	r3, [r7, #14]
 800d628:	4619      	mov	r1, r3
 800d62a:	4b08      	ldr	r3, [pc, #32]	; (800d64c <mix_sub_columns+0x348>)
 800d62c:	5c5b      	ldrb	r3, [r3, r1]
 800d62e:	4053      	eors	r3, r2
 800d630:	b2d9      	uxtb	r1, r3
 800d632:	7cfb      	ldrb	r3, [r7, #19]
 800d634:	461a      	mov	r2, r3
 800d636:	4b06      	ldr	r3, [pc, #24]	; (800d650 <mix_sub_columns+0x34c>)
 800d638:	5c9a      	ldrb	r2, [r3, r2]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	330f      	adds	r3, #15
 800d63e:	404a      	eors	r2, r1
 800d640:	b2d2      	uxtb	r2, r2
 800d642:	701a      	strb	r2, [r3, #0]
  }
 800d644:	bf00      	nop
 800d646:	3718      	adds	r7, #24
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}
 800d64c:	0801ea2c 	.word	0x0801ea2c
 800d650:	0801eb2c 	.word	0x0801eb2c
 800d654:	0801ec2c 	.word	0x0801ec2c

0800d658 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b086      	sub	sp, #24
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	460b      	mov	r3, r1
 800d662:	607a      	str	r2, [r7, #4]
 800d664:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800d666:	7afb      	ldrb	r3, [r7, #11]
 800d668:	3b10      	subs	r3, #16
 800d66a:	2b10      	cmp	r3, #16
 800d66c:	bf8c      	ite	hi
 800d66e:	2201      	movhi	r2, #1
 800d670:	2200      	movls	r2, #0
 800d672:	b2d2      	uxtb	r2, r2
 800d674:	2a00      	cmp	r2, #0
 800d676:	d10b      	bne.n	800d690 <lorawan_aes_set_key+0x38>
 800d678:	4a64      	ldr	r2, [pc, #400]	; (800d80c <lorawan_aes_set_key+0x1b4>)
 800d67a:	fa22 f303 	lsr.w	r3, r2, r3
 800d67e:	f003 0301 	and.w	r3, r3, #1
 800d682:	2b00      	cmp	r3, #0
 800d684:	bf14      	ite	ne
 800d686:	2301      	movne	r3, #1
 800d688:	2300      	moveq	r3, #0
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d105      	bne.n	800d69c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800d698:	23ff      	movs	r3, #255	; 0xff
 800d69a:	e0b2      	b.n	800d802 <lorawan_aes_set_key+0x1aa>
        break;
 800d69c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	7afa      	ldrb	r2, [r7, #11]
 800d6a2:	68f9      	ldr	r1, [r7, #12]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff fbfc 	bl	800cea2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800d6aa:	7afb      	ldrb	r3, [r7, #11]
 800d6ac:	331c      	adds	r3, #28
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800d6b4:	7c7b      	ldrb	r3, [r7, #17]
 800d6b6:	091b      	lsrs	r3, r3, #4
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d6c4:	7afb      	ldrb	r3, [r7, #11]
 800d6c6:	75fb      	strb	r3, [r7, #23]
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	75bb      	strb	r3, [r7, #22]
 800d6cc:	e093      	b.n	800d7f6 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
 800d6d0:	3b04      	subs	r3, #4
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	5cd3      	ldrb	r3, [r2, r3]
 800d6d6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800d6d8:	7dfb      	ldrb	r3, [r7, #23]
 800d6da:	3b03      	subs	r3, #3
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	5cd3      	ldrb	r3, [r2, r3]
 800d6e0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
 800d6e4:	3b02      	subs	r3, #2
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	5cd3      	ldrb	r3, [r2, r3]
 800d6ea:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800d6ec:	7dfb      	ldrb	r3, [r7, #23]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	5cd3      	ldrb	r3, [r2, r3]
 800d6f4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	7afa      	ldrb	r2, [r7, #11]
 800d6fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6fe:	fb01 f202 	mul.w	r2, r1, r2
 800d702:	1a9b      	subs	r3, r3, r2
 800d704:	b2db      	uxtb	r3, r3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d127      	bne.n	800d75a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800d70a:	7d7b      	ldrb	r3, [r7, #21]
 800d70c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800d70e:	7d3b      	ldrb	r3, [r7, #20]
 800d710:	4a3f      	ldr	r2, [pc, #252]	; (800d810 <lorawan_aes_set_key+0x1b8>)
 800d712:	5cd2      	ldrb	r2, [r2, r3]
 800d714:	7dbb      	ldrb	r3, [r7, #22]
 800d716:	4053      	eors	r3, r2
 800d718:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800d71a:	7cfb      	ldrb	r3, [r7, #19]
 800d71c:	4a3c      	ldr	r2, [pc, #240]	; (800d810 <lorawan_aes_set_key+0x1b8>)
 800d71e:	5cd3      	ldrb	r3, [r2, r3]
 800d720:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800d722:	7cbb      	ldrb	r3, [r7, #18]
 800d724:	4a3a      	ldr	r2, [pc, #232]	; (800d810 <lorawan_aes_set_key+0x1b8>)
 800d726:	5cd3      	ldrb	r3, [r2, r3]
 800d728:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800d72a:	7c3b      	ldrb	r3, [r7, #16]
 800d72c:	4a38      	ldr	r2, [pc, #224]	; (800d810 <lorawan_aes_set_key+0x1b8>)
 800d72e:	5cd3      	ldrb	r3, [r2, r3]
 800d730:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800d732:	7dbb      	ldrb	r3, [r7, #22]
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	b25a      	sxtb	r2, r3
 800d738:	7dbb      	ldrb	r3, [r7, #22]
 800d73a:	09db      	lsrs	r3, r3, #7
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	4619      	mov	r1, r3
 800d740:	0049      	lsls	r1, r1, #1
 800d742:	440b      	add	r3, r1
 800d744:	4619      	mov	r1, r3
 800d746:	00c8      	lsls	r0, r1, #3
 800d748:	4619      	mov	r1, r3
 800d74a:	4603      	mov	r3, r0
 800d74c:	440b      	add	r3, r1
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	b25b      	sxtb	r3, r3
 800d752:	4053      	eors	r3, r2
 800d754:	b25b      	sxtb	r3, r3
 800d756:	75bb      	strb	r3, [r7, #22]
 800d758:	e01c      	b.n	800d794 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800d75a:	7afb      	ldrb	r3, [r7, #11]
 800d75c:	2b18      	cmp	r3, #24
 800d75e:	d919      	bls.n	800d794 <lorawan_aes_set_key+0x13c>
 800d760:	7dfb      	ldrb	r3, [r7, #23]
 800d762:	7afa      	ldrb	r2, [r7, #11]
 800d764:	fbb3 f1f2 	udiv	r1, r3, r2
 800d768:	fb01 f202 	mul.w	r2, r1, r2
 800d76c:	1a9b      	subs	r3, r3, r2
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	2b10      	cmp	r3, #16
 800d772:	d10f      	bne.n	800d794 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800d774:	7d7b      	ldrb	r3, [r7, #21]
 800d776:	4a26      	ldr	r2, [pc, #152]	; (800d810 <lorawan_aes_set_key+0x1b8>)
 800d778:	5cd3      	ldrb	r3, [r2, r3]
 800d77a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800d77c:	7d3b      	ldrb	r3, [r7, #20]
 800d77e:	4a24      	ldr	r2, [pc, #144]	; (800d810 <lorawan_aes_set_key+0x1b8>)
 800d780:	5cd3      	ldrb	r3, [r2, r3]
 800d782:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800d784:	7cfb      	ldrb	r3, [r7, #19]
 800d786:	4a22      	ldr	r2, [pc, #136]	; (800d810 <lorawan_aes_set_key+0x1b8>)
 800d788:	5cd3      	ldrb	r3, [r2, r3]
 800d78a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800d78c:	7cbb      	ldrb	r3, [r7, #18]
 800d78e:	4a20      	ldr	r2, [pc, #128]	; (800d810 <lorawan_aes_set_key+0x1b8>)
 800d790:	5cd3      	ldrb	r3, [r2, r3]
 800d792:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800d794:	7dfa      	ldrb	r2, [r7, #23]
 800d796:	7afb      	ldrb	r3, [r7, #11]
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800d79c:	7c3b      	ldrb	r3, [r7, #16]
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	5cd1      	ldrb	r1, [r2, r3]
 800d7a2:	7dfb      	ldrb	r3, [r7, #23]
 800d7a4:	7d7a      	ldrb	r2, [r7, #21]
 800d7a6:	404a      	eors	r2, r1
 800d7a8:	b2d1      	uxtb	r1, r2
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800d7ae:	7c3b      	ldrb	r3, [r7, #16]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	687a      	ldr	r2, [r7, #4]
 800d7b4:	5cd1      	ldrb	r1, [r2, r3]
 800d7b6:	7dfb      	ldrb	r3, [r7, #23]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	7d3a      	ldrb	r2, [r7, #20]
 800d7bc:	404a      	eors	r2, r1
 800d7be:	b2d1      	uxtb	r1, r2
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800d7c4:	7c3b      	ldrb	r3, [r7, #16]
 800d7c6:	3302      	adds	r3, #2
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	5cd1      	ldrb	r1, [r2, r3]
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
 800d7ce:	3302      	adds	r3, #2
 800d7d0:	7cfa      	ldrb	r2, [r7, #19]
 800d7d2:	404a      	eors	r2, r1
 800d7d4:	b2d1      	uxtb	r1, r2
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800d7da:	7c3b      	ldrb	r3, [r7, #16]
 800d7dc:	3303      	adds	r3, #3
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	5cd1      	ldrb	r1, [r2, r3]
 800d7e2:	7dfb      	ldrb	r3, [r7, #23]
 800d7e4:	3303      	adds	r3, #3
 800d7e6:	7cba      	ldrb	r2, [r7, #18]
 800d7e8:	404a      	eors	r2, r1
 800d7ea:	b2d1      	uxtb	r1, r2
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800d7f0:	7dfb      	ldrb	r3, [r7, #23]
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	75fb      	strb	r3, [r7, #23]
 800d7f6:	7dfa      	ldrb	r2, [r7, #23]
 800d7f8:	7c7b      	ldrb	r3, [r7, #17]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	f4ff af67 	bcc.w	800d6ce <lorawan_aes_set_key+0x76>
    }
    return 0;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3718      	adds	r7, #24
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	00010101 	.word	0x00010101
 800d810:	0801ea2c 	.word	0x0801ea2c

0800d814 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b08a      	sub	sp, #40	; 0x28
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d826:	2b00      	cmp	r3, #0
 800d828:	d038      	beq.n	800d89c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	f107 0314 	add.w	r3, r7, #20
 800d830:	68f9      	ldr	r1, [r7, #12]
 800d832:	4618      	mov	r0, r3
 800d834:	f7ff fc07 	bl	800d046 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800d838:	2301      	movs	r3, #1
 800d83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d83e:	e014      	b.n	800d86a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800d840:	f107 0314 	add.w	r3, r7, #20
 800d844:	4618      	mov	r0, r3
 800d846:	f7ff fd5d 	bl	800d304 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d850:	0112      	lsls	r2, r2, #4
 800d852:	441a      	add	r2, r3
 800d854:	f107 0314 	add.w	r3, r7, #20
 800d858:	4611      	mov	r1, r2
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7ff fcab 	bl	800d1b6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800d860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d864:	3301      	adds	r3, #1
 800d866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800d870:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d874:	429a      	cmp	r2, r3
 800d876:	d3e3      	bcc.n	800d840 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800d878:	f107 0314 	add.w	r3, r7, #20
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7ff fca7 	bl	800d1d0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d888:	0112      	lsls	r2, r2, #4
 800d88a:	441a      	add	r2, r3
 800d88c:	f107 0314 	add.w	r3, r7, #20
 800d890:	4619      	mov	r1, r3
 800d892:	68b8      	ldr	r0, [r7, #8]
 800d894:	f7ff fbd7 	bl	800d046 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800d898:	2300      	movs	r3, #0
 800d89a:	e000      	b.n	800d89e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800d89c:	23ff      	movs	r3, #255	; 0xff
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3728      	adds	r7, #40	; 0x28
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800d8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8aa:	b0a1      	sub	sp, #132	; 0x84
 800d8ac:	af12      	add	r7, sp, #72	; 0x48
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800d8b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800d8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d8bc:	4611      	mov	r1, r2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 fa12 	bl	800dce8 <SecureElementGetKeyByID>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d174      	bne.n	800d9b4 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8d0:	e06c      	b.n	800d9ac <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800d8d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d8d6:	4939      	ldr	r1, [pc, #228]	; (800d9bc <PrintKey+0x114>)
 800d8d8:	4613      	mov	r3, r2
 800d8da:	005b      	lsls	r3, r3, #1
 800d8dc:	4413      	add	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	440b      	add	r3, r1
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d15a      	bne.n	800d9a2 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800d8ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d8f0:	4932      	ldr	r1, [pc, #200]	; (800d9bc <PrintKey+0x114>)
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	005b      	lsls	r3, r3, #1
 800d8f6:	4413      	add	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	440b      	add	r3, r1
 800d8fc:	3308      	adds	r3, #8
 800d8fe:	6819      	ldr	r1, [r3, #0]
 800d900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d902:	785b      	ldrb	r3, [r3, #1]
 800d904:	461d      	mov	r5, r3
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	789b      	ldrb	r3, [r3, #2]
 800d90a:	461e      	mov	r6, r3
 800d90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90e:	78db      	ldrb	r3, [r3, #3]
 800d910:	62bb      	str	r3, [r7, #40]	; 0x28
 800d912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d914:	791b      	ldrb	r3, [r3, #4]
 800d916:	627b      	str	r3, [r7, #36]	; 0x24
 800d918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91a:	795b      	ldrb	r3, [r3, #5]
 800d91c:	623b      	str	r3, [r7, #32]
 800d91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d920:	799b      	ldrb	r3, [r3, #6]
 800d922:	61fb      	str	r3, [r7, #28]
 800d924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d926:	79db      	ldrb	r3, [r3, #7]
 800d928:	61bb      	str	r3, [r7, #24]
 800d92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92c:	7a1b      	ldrb	r3, [r3, #8]
 800d92e:	617b      	str	r3, [r7, #20]
 800d930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d932:	7a5b      	ldrb	r3, [r3, #9]
 800d934:	613b      	str	r3, [r7, #16]
 800d936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d938:	7a9b      	ldrb	r3, [r3, #10]
 800d93a:	60fb      	str	r3, [r7, #12]
 800d93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93e:	7adb      	ldrb	r3, [r3, #11]
 800d940:	60bb      	str	r3, [r7, #8]
 800d942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d944:	7b1b      	ldrb	r3, [r3, #12]
 800d946:	607b      	str	r3, [r7, #4]
 800d948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94a:	7b5b      	ldrb	r3, [r3, #13]
 800d94c:	461c      	mov	r4, r3
 800d94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d950:	7b9b      	ldrb	r3, [r3, #14]
 800d952:	4618      	mov	r0, r3
 800d954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d956:	7bdb      	ldrb	r3, [r3, #15]
 800d958:	461a      	mov	r2, r3
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	7c1b      	ldrb	r3, [r3, #16]
 800d95e:	9310      	str	r3, [sp, #64]	; 0x40
 800d960:	920f      	str	r2, [sp, #60]	; 0x3c
 800d962:	900e      	str	r0, [sp, #56]	; 0x38
 800d964:	940d      	str	r4, [sp, #52]	; 0x34
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	920c      	str	r2, [sp, #48]	; 0x30
 800d96a:	68ba      	ldr	r2, [r7, #8]
 800d96c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d96e:	68fa      	ldr	r2, [r7, #12]
 800d970:	920a      	str	r2, [sp, #40]	; 0x28
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	9209      	str	r2, [sp, #36]	; 0x24
 800d976:	697a      	ldr	r2, [r7, #20]
 800d978:	9208      	str	r2, [sp, #32]
 800d97a:	69ba      	ldr	r2, [r7, #24]
 800d97c:	9207      	str	r2, [sp, #28]
 800d97e:	69fa      	ldr	r2, [r7, #28]
 800d980:	9206      	str	r2, [sp, #24]
 800d982:	6a3a      	ldr	r2, [r7, #32]
 800d984:	9205      	str	r2, [sp, #20]
 800d986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d988:	9204      	str	r2, [sp, #16]
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	9303      	str	r3, [sp, #12]
 800d98e:	9602      	str	r6, [sp, #8]
 800d990:	9501      	str	r5, [sp, #4]
 800d992:	9100      	str	r1, [sp, #0]
 800d994:	4b0a      	ldr	r3, [pc, #40]	; (800d9c0 <PrintKey+0x118>)
 800d996:	2200      	movs	r2, #0
 800d998:	2100      	movs	r1, #0
 800d99a:	2002      	movs	r0, #2
 800d99c:	f00f ffe6 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
 800d9a0:	e008      	b.n	800d9b4 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d9a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d9ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9b0:	2b0a      	cmp	r3, #10
 800d9b2:	d98e      	bls.n	800d8d2 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800d9b4:	373c      	adds	r7, #60	; 0x3c
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	0801ed2c 	.word	0x0801ed2c
 800d9c0:	0801e5d4 	.word	0x0801e5d4

0800d9c4 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800d9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9c6:	b091      	sub	sp, #68	; 0x44
 800d9c8:	af08      	add	r7, sp, #32
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800d9d2:	f107 0310 	add.w	r3, r7, #16
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f000 fbda 	bl	800e190 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800d9dc:	7c3b      	ldrb	r3, [r7, #16]
 800d9de:	7c7a      	ldrb	r2, [r7, #17]
 800d9e0:	7cb9      	ldrb	r1, [r7, #18]
 800d9e2:	7cf8      	ldrb	r0, [r7, #19]
 800d9e4:	7d3c      	ldrb	r4, [r7, #20]
 800d9e6:	7d7d      	ldrb	r5, [r7, #21]
 800d9e8:	7dbe      	ldrb	r6, [r7, #22]
 800d9ea:	f897 c017 	ldrb.w	ip, [r7, #23]
 800d9ee:	f8cd c01c 	str.w	ip, [sp, #28]
 800d9f2:	9606      	str	r6, [sp, #24]
 800d9f4:	9505      	str	r5, [sp, #20]
 800d9f6:	9404      	str	r4, [sp, #16]
 800d9f8:	9003      	str	r0, [sp, #12]
 800d9fa:	9102      	str	r1, [sp, #8]
 800d9fc:	9201      	str	r2, [sp, #4]
 800d9fe:	9300      	str	r3, [sp, #0]
 800da00:	4b24      	ldr	r3, [pc, #144]	; (800da94 <PrintIds+0xd0>)
 800da02:	2200      	movs	r2, #0
 800da04:	2100      	movs	r1, #0
 800da06:	2002      	movs	r0, #2
 800da08:	f00f ffb0 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800da0c:	f107 0318 	add.w	r3, r7, #24
 800da10:	4618      	mov	r0, r3
 800da12:	f000 fbed 	bl	800e1f0 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800da16:	7e3b      	ldrb	r3, [r7, #24]
 800da18:	7e7a      	ldrb	r2, [r7, #25]
 800da1a:	7eb9      	ldrb	r1, [r7, #26]
 800da1c:	7ef8      	ldrb	r0, [r7, #27]
 800da1e:	7f3c      	ldrb	r4, [r7, #28]
 800da20:	7f7d      	ldrb	r5, [r7, #29]
 800da22:	7fbe      	ldrb	r6, [r7, #30]
 800da24:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800da28:	f8cd c01c 	str.w	ip, [sp, #28]
 800da2c:	9606      	str	r6, [sp, #24]
 800da2e:	9505      	str	r5, [sp, #20]
 800da30:	9404      	str	r4, [sp, #16]
 800da32:	9003      	str	r0, [sp, #12]
 800da34:	9102      	str	r1, [sp, #8]
 800da36:	9201      	str	r2, [sp, #4]
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	4b17      	ldr	r3, [pc, #92]	; (800da98 <PrintIds+0xd4>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	2100      	movs	r1, #0
 800da40:	2002      	movs	r0, #2
 800da42:	f00f ff93 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800da46:	f107 020c 	add.w	r2, r7, #12
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	4611      	mov	r1, r2
 800da4e:	4618      	mov	r0, r3
 800da50:	f000 fc00 	bl	800e254 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800da54:	f107 030c 	add.w	r3, r7, #12
 800da58:	3303      	adds	r3, #3
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	461a      	mov	r2, r3
 800da5e:	f107 030c 	add.w	r3, r7, #12
 800da62:	3302      	adds	r3, #2
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	4619      	mov	r1, r3
 800da68:	f107 030c 	add.w	r3, r7, #12
 800da6c:	3301      	adds	r3, #1
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	4618      	mov	r0, r3
 800da72:	f107 030c 	add.w	r3, r7, #12
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	9303      	str	r3, [sp, #12]
 800da7a:	9002      	str	r0, [sp, #8]
 800da7c:	9101      	str	r1, [sp, #4]
 800da7e:	9200      	str	r2, [sp, #0]
 800da80:	4b06      	ldr	r3, [pc, #24]	; (800da9c <PrintIds+0xd8>)
 800da82:	2200      	movs	r2, #0
 800da84:	2100      	movs	r1, #0
 800da86:	2002      	movs	r0, #2
 800da88:	f00f ff70 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800da8c:	bf00      	nop
 800da8e:	3724      	adds	r7, #36	; 0x24
 800da90:	46bd      	mov	sp, r7
 800da92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da94:	0801e630 	.word	0x0801e630
 800da98:	0801e670 	.word	0x0801e670
 800da9c:	0801e6b0 	.word	0x0801e6b0

0800daa0 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800daa0:	b480      	push	{r7}
 800daa2:	b085      	sub	sp, #20
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	4603      	mov	r3, r0
 800daa8:	6039      	str	r1, [r7, #0]
 800daaa:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800daac:	2300      	movs	r3, #0
 800daae:	73fb      	strb	r3, [r7, #15]
 800dab0:	e01a      	b.n	800dae8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dab2:	4b12      	ldr	r3, [pc, #72]	; (800dafc <GetKeyByID+0x5c>)
 800dab4:	6819      	ldr	r1, [r3, #0]
 800dab6:	7bfa      	ldrb	r2, [r7, #15]
 800dab8:	4613      	mov	r3, r2
 800daba:	011b      	lsls	r3, r3, #4
 800dabc:	4413      	add	r3, r2
 800dabe:	440b      	add	r3, r1
 800dac0:	3318      	adds	r3, #24
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	79fa      	ldrb	r2, [r7, #7]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d10b      	bne.n	800dae2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800daca:	4b0c      	ldr	r3, [pc, #48]	; (800dafc <GetKeyByID+0x5c>)
 800dacc:	6819      	ldr	r1, [r3, #0]
 800dace:	7bfa      	ldrb	r2, [r7, #15]
 800dad0:	4613      	mov	r3, r2
 800dad2:	011b      	lsls	r3, r3, #4
 800dad4:	4413      	add	r3, r2
 800dad6:	3318      	adds	r3, #24
 800dad8:	18ca      	adds	r2, r1, r3
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dade:	2300      	movs	r3, #0
 800dae0:	e006      	b.n	800daf0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dae2:	7bfb      	ldrb	r3, [r7, #15]
 800dae4:	3301      	adds	r3, #1
 800dae6:	73fb      	strb	r3, [r7, #15]
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
 800daea:	2b0a      	cmp	r3, #10
 800daec:	d9e1      	bls.n	800dab2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800daee:	2303      	movs	r3, #3
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3714      	adds	r7, #20
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bc80      	pop	{r7}
 800daf8:	4770      	bx	lr
 800dafa:	bf00      	nop
 800dafc:	200004fc 	.word	0x200004fc

0800db00 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800db00:	b590      	push	{r4, r7, lr}
 800db02:	b0d1      	sub	sp, #324	; 0x144
 800db04:	af00      	add	r7, sp, #0
 800db06:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800db0a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800db0e:	6020      	str	r0, [r4, #0]
 800db10:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800db14:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800db18:	6001      	str	r1, [r0, #0]
 800db1a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800db1e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800db22:	600a      	str	r2, [r1, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db2a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800db2e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800db30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db34:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d003      	beq.n	800db46 <ComputeCmac+0x46>
 800db3e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800db42:	2b00      	cmp	r3, #0
 800db44:	d101      	bne.n	800db4a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800db46:	2302      	movs	r3, #2
 800db48:	e05d      	b.n	800dc06 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800db4a:	f107 0314 	add.w	r3, r7, #20
 800db4e:	4618      	mov	r0, r3
 800db50:	f7fe ff02 	bl	800c958 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800db54:	f107 0210 	add.w	r2, r7, #16
 800db58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db5c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	4611      	mov	r1, r2
 800db64:	4618      	mov	r0, r3
 800db66:	f7ff ff9b 	bl	800daa0 <GetKeyByID>
 800db6a:	4603      	mov	r3, r0
 800db6c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800db70:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800db74:	2b00      	cmp	r3, #0
 800db76:	d144      	bne.n	800dc02 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800db78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	1c5a      	adds	r2, r3, #1
 800db84:	f107 0314 	add.w	r3, r7, #20
 800db88:	4611      	mov	r1, r2
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fe fefd 	bl	800c98a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800db90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800db94:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d009      	beq.n	800dbb2 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800db9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dba2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800dba6:	f107 0014 	add.w	r0, r7, #20
 800dbaa:	2210      	movs	r2, #16
 800dbac:	6819      	ldr	r1, [r3, #0]
 800dbae:	f7fe fefb 	bl	800c9a8 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800dbb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbb6:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800dbba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800dbbe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800dbc2:	f107 0014 	add.w	r0, r7, #20
 800dbc6:	6812      	ldr	r2, [r2, #0]
 800dbc8:	6819      	ldr	r1, [r3, #0]
 800dbca:	f7fe feed 	bl	800c9a8 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800dbce:	f107 0214 	add.w	r2, r7, #20
 800dbd2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe ffa7 	bl	800cb2c <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800dbde:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800dbe8:	021b      	lsls	r3, r3, #8
 800dbea:	431a      	orrs	r2, r3
 800dbec:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800dbf0:	041b      	lsls	r3, r3, #16
 800dbf2:	431a      	orrs	r2, r3
 800dbf4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800dbf8:	061b      	lsls	r3, r3, #24
 800dbfa:	431a      	orrs	r2, r3
 800dbfc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800dc00:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800dc02:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd90      	pop	{r4, r7, pc}

0800dc10 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d101      	bne.n	800dc22 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e00a      	b.n	800dc38 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800dc22:	4a07      	ldr	r2, [pc, #28]	; (800dc40 <SecureElementInit+0x30>)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800dc28:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <SecureElementInit+0x30>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	22d8      	movs	r2, #216	; 0xd8
 800dc2e:	4905      	ldr	r1, [pc, #20]	; (800dc44 <SecureElementInit+0x34>)
 800dc30:	4618      	mov	r0, r3
 800dc32:	f00b fc34 	bl	801949e <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800dc36:	2300      	movs	r3, #0
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	200004fc 	.word	0x200004fc
 800dc44:	0801ef94 	.word	0x0801ef94

0800dc48 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800dc52:	2300      	movs	r3, #0
 800dc54:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800dc56:	f107 030c 	add.w	r3, r7, #12
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f000 fa98 	bl	800e190 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800dc60:	f107 0308 	add.w	r3, r7, #8
 800dc64:	4619      	mov	r1, r3
 800dc66:	2001      	movs	r0, #1
 800dc68:	f000 faf4 	bl	800e254 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d024      	beq.n	800dcbc <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800dc72:	2300      	movs	r3, #0
 800dc74:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800dc76:	2300      	movs	r3, #0
 800dc78:	75bb      	strb	r3, [r7, #22]
 800dc7a:	e00c      	b.n	800dc96 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800dc7c:	7dbb      	ldrb	r3, [r7, #22]
 800dc7e:	3318      	adds	r3, #24
 800dc80:	443b      	add	r3, r7
 800dc82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	75fb      	strb	r3, [r7, #23]
                break;
 800dc8e:	e005      	b.n	800dc9c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800dc90:	7dbb      	ldrb	r3, [r7, #22]
 800dc92:	3301      	adds	r3, #1
 800dc94:	75bb      	strb	r3, [r7, #22]
 800dc96:	7dbb      	ldrb	r3, [r7, #22]
 800dc98:	2b07      	cmp	r3, #7
 800dc9a:	d9ef      	bls.n	800dc7c <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800dc9c:	7dfb      	ldrb	r3, [r7, #23]
 800dc9e:	f083 0301 	eor.w	r3, r3, #1
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d009      	beq.n	800dcbc <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800dca8:	f107 020c 	add.w	r2, r7, #12
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	4610      	mov	r0, r2
 800dcb0:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800dcb2:	f107 030c 	add.w	r3, r7, #12
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f000 fa52 	bl	800e160 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00c      	beq.n	800dcdc <SecureElementInitMcuID+0x94>
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d109      	bne.n	800dcdc <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800dcc8:	f107 0208 	add.w	r2, r7, #8
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	4610      	mov	r0, r2
 800dcd0:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	2001      	movs	r0, #1
 800dcd8:	f000 faa2 	bl	800e220 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3718      	adds	r7, #24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
	...

0800dce8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4603      	mov	r3, r0
 800dcf0:	6039      	str	r1, [r7, #0]
 800dcf2:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
 800dcf8:	e01a      	b.n	800dd30 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800dcfa:	4b12      	ldr	r3, [pc, #72]	; (800dd44 <SecureElementGetKeyByID+0x5c>)
 800dcfc:	6819      	ldr	r1, [r3, #0]
 800dcfe:	7bfa      	ldrb	r2, [r7, #15]
 800dd00:	4613      	mov	r3, r2
 800dd02:	011b      	lsls	r3, r3, #4
 800dd04:	4413      	add	r3, r2
 800dd06:	440b      	add	r3, r1
 800dd08:	3318      	adds	r3, #24
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	79fa      	ldrb	r2, [r7, #7]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d10b      	bne.n	800dd2a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800dd12:	4b0c      	ldr	r3, [pc, #48]	; (800dd44 <SecureElementGetKeyByID+0x5c>)
 800dd14:	6819      	ldr	r1, [r3, #0]
 800dd16:	7bfa      	ldrb	r2, [r7, #15]
 800dd18:	4613      	mov	r3, r2
 800dd1a:	011b      	lsls	r3, r3, #4
 800dd1c:	4413      	add	r3, r2
 800dd1e:	3318      	adds	r3, #24
 800dd20:	18ca      	adds	r2, r1, r3
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800dd26:	2300      	movs	r3, #0
 800dd28:	e006      	b.n	800dd38 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800dd2a:	7bfb      	ldrb	r3, [r7, #15]
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	73fb      	strb	r3, [r7, #15]
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	2b0a      	cmp	r3, #10
 800dd34:	d9e1      	bls.n	800dcfa <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800dd36:	2303      	movs	r3, #3
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bc80      	pop	{r7}
 800dd40:	4770      	bx	lr
 800dd42:	bf00      	nop
 800dd44:	200004fc 	.word	0x200004fc

0800dd48 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	f7ff fdab 	bl	800d8a8 <PrintKey>
    PrintKey( NWK_KEY );
 800dd52:	2001      	movs	r0, #1
 800dd54:	f7ff fda8 	bl	800d8a8 <PrintKey>
    PrintKey( APP_S_KEY );
 800dd58:	2009      	movs	r0, #9
 800dd5a:	f7ff fda5 	bl	800d8a8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800dd5e:	2008      	movs	r0, #8
 800dd60:	f7ff fda2 	bl	800d8a8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800dd64:	2000      	movs	r0, #0
 800dd66:	f7ff fe2d 	bl	800d9c4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800dd7a:	200b      	movs	r0, #11
 800dd7c:	f7ff fd94 	bl	800d8a8 <PrintKey>
    PrintKey( MC_KE_KEY );
 800dd80:	200c      	movs	r0, #12
 800dd82:	f7ff fd91 	bl	800d8a8 <PrintKey>
    PrintKey( APP_S_KEY );
 800dd86:	2009      	movs	r0, #9
 800dd88:	f7ff fd8e 	bl	800d8a8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800dd8c:	2008      	movs	r0, #8
 800dd8e:	f7ff fd8b 	bl	800d8a8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800dd92:	200a      	movs	r0, #10
 800dd94:	f7ff fd88 	bl	800d8a8 <PrintKey>
    PrintIds( mode );
 800dd98:	79fb      	ldrb	r3, [r7, #7]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7ff fe12 	bl	800d9c4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800dda0:	2300      	movs	r3, #0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
	...

0800ddac <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	6039      	str	r1, [r7, #0]
 800ddb6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d101      	bne.n	800ddc2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ddbe:	2302      	movs	r3, #2
 800ddc0:	e04c      	b.n	800de5c <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	77fb      	strb	r3, [r7, #31]
 800ddc6:	e045      	b.n	800de54 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ddc8:	4b26      	ldr	r3, [pc, #152]	; (800de64 <SecureElementSetKey+0xb8>)
 800ddca:	6819      	ldr	r1, [r3, #0]
 800ddcc:	7ffa      	ldrb	r2, [r7, #31]
 800ddce:	4613      	mov	r3, r2
 800ddd0:	011b      	lsls	r3, r3, #4
 800ddd2:	4413      	add	r3, r2
 800ddd4:	440b      	add	r3, r1
 800ddd6:	3318      	adds	r3, #24
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	79fa      	ldrb	r2, [r7, #7]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d136      	bne.n	800de4e <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800dde0:	79fb      	ldrb	r3, [r7, #7]
 800dde2:	2b0d      	cmp	r3, #13
 800dde4:	d123      	bne.n	800de2e <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800dde6:	2306      	movs	r3, #6
 800dde8:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800ddea:	2300      	movs	r3, #0
 800ddec:	60fb      	str	r3, [r7, #12]
 800ddee:	f107 0310 	add.w	r3, r7, #16
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	601a      	str	r2, [r3, #0]
 800ddf6:	605a      	str	r2, [r3, #4]
 800ddf8:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800ddfa:	f107 030c 	add.w	r3, r7, #12
 800ddfe:	220c      	movs	r2, #12
 800de00:	2110      	movs	r1, #16
 800de02:	6838      	ldr	r0, [r7, #0]
 800de04:	f000 f876 	bl	800def4 <SecureElementAesEncrypt>
 800de08:	4603      	mov	r3, r0
 800de0a:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800de0c:	4b15      	ldr	r3, [pc, #84]	; (800de64 <SecureElementSetKey+0xb8>)
 800de0e:	6819      	ldr	r1, [r3, #0]
 800de10:	7ffa      	ldrb	r2, [r7, #31]
 800de12:	4613      	mov	r3, r2
 800de14:	011b      	lsls	r3, r3, #4
 800de16:	4413      	add	r3, r2
 800de18:	3318      	adds	r3, #24
 800de1a:	440b      	add	r3, r1
 800de1c:	3301      	adds	r3, #1
 800de1e:	f107 010c 	add.w	r1, r7, #12
 800de22:	2210      	movs	r2, #16
 800de24:	4618      	mov	r0, r3
 800de26:	f00b fb3a 	bl	801949e <memcpy1>
                return retval;
 800de2a:	7fbb      	ldrb	r3, [r7, #30]
 800de2c:	e016      	b.n	800de5c <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800de2e:	4b0d      	ldr	r3, [pc, #52]	; (800de64 <SecureElementSetKey+0xb8>)
 800de30:	6819      	ldr	r1, [r3, #0]
 800de32:	7ffa      	ldrb	r2, [r7, #31]
 800de34:	4613      	mov	r3, r2
 800de36:	011b      	lsls	r3, r3, #4
 800de38:	4413      	add	r3, r2
 800de3a:	3318      	adds	r3, #24
 800de3c:	440b      	add	r3, r1
 800de3e:	3301      	adds	r3, #1
 800de40:	2210      	movs	r2, #16
 800de42:	6839      	ldr	r1, [r7, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	f00b fb2a 	bl	801949e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800de4a:	2300      	movs	r3, #0
 800de4c:	e006      	b.n	800de5c <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800de4e:	7ffb      	ldrb	r3, [r7, #31]
 800de50:	3301      	adds	r3, #1
 800de52:	77fb      	strb	r3, [r7, #31]
 800de54:	7ffb      	ldrb	r3, [r7, #31]
 800de56:	2b0a      	cmp	r3, #10
 800de58:	d9b6      	bls.n	800ddc8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800de5a:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3720      	adds	r7, #32
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	200004fc 	.word	0x200004fc

0800de68 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af02      	add	r7, sp, #8
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800de76:	78fb      	ldrb	r3, [r7, #3]
 800de78:	2b0b      	cmp	r3, #11
 800de7a:	d901      	bls.n	800de80 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800de7c:	2303      	movs	r3, #3
 800de7e:	e009      	b.n	800de94 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800de80:	78fa      	ldrb	r2, [r7, #3]
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	9300      	str	r3, [sp, #0]
 800de86:	4613      	mov	r3, r2
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	68b9      	ldr	r1, [r7, #8]
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	f7ff fe37 	bl	800db00 <ComputeCmac>
 800de92:	4603      	mov	r3, r0
}
 800de94:	4618      	mov	r0, r3
 800de96:	3710      	adds	r7, #16
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}

0800de9c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b088      	sub	sp, #32
 800dea0:	af02      	add	r7, sp, #8
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
 800dea8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d101      	bne.n	800deb4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800deb0:	2302      	movs	r3, #2
 800deb2:	e01b      	b.n	800deec <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800deb4:	2306      	movs	r3, #6
 800deb6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800deb8:	2300      	movs	r3, #0
 800deba:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800debc:	78fa      	ldrb	r2, [r7, #3]
 800debe:	f107 0310 	add.w	r3, r7, #16
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	4613      	mov	r3, r2
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	68f9      	ldr	r1, [r7, #12]
 800deca:	2000      	movs	r0, #0
 800decc:	f7ff fe18 	bl	800db00 <ComputeCmac>
 800ded0:	4603      	mov	r3, r0
 800ded2:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ded4:	7dfb      	ldrb	r3, [r7, #23]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800deda:	7dfb      	ldrb	r3, [r7, #23]
 800dedc:	e006      	b.n	800deec <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d001      	beq.n	800deea <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800dee6:	2301      	movs	r3, #1
 800dee8:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800deea:	7dfb      	ldrb	r3, [r7, #23]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b0c2      	sub	sp, #264	; 0x108
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800df00:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800df04:	6001      	str	r1, [r0, #0]
 800df06:	4611      	mov	r1, r2
 800df08:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800df0c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800df10:	6013      	str	r3, [r2, #0]
 800df12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df16:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800df1a:	460a      	mov	r2, r1
 800df1c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d006      	beq.n	800df32 <SecureElementAesEncrypt+0x3e>
 800df24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d101      	bne.n	800df36 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800df32:	2302      	movs	r3, #2
 800df34:	e059      	b.n	800dfea <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800df36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f003 030f 	and.w	r3, r3, #15
 800df44:	2b00      	cmp	r3, #0
 800df46:	d001      	beq.n	800df4c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800df48:	2305      	movs	r3, #5
 800df4a:	e04e      	b.n	800dfea <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800df4c:	f107 0314 	add.w	r3, r7, #20
 800df50:	22f0      	movs	r2, #240	; 0xf0
 800df52:	2100      	movs	r1, #0
 800df54:	4618      	mov	r0, r3
 800df56:	f00b fadd 	bl	8019514 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800df5a:	f107 0210 	add.w	r2, r7, #16
 800df5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df62:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	4611      	mov	r1, r2
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7ff fd98 	bl	800daa0 <GetKeyByID>
 800df70:	4603      	mov	r3, r0
 800df72:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800df76:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d133      	bne.n	800dfe6 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	3301      	adds	r3, #1
 800df82:	f107 0214 	add.w	r2, r7, #20
 800df86:	2110      	movs	r1, #16
 800df88:	4618      	mov	r0, r3
 800df8a:	f7ff fb65 	bl	800d658 <lorawan_aes_set_key>

        uint8_t block = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800df94:	e020      	b.n	800dfd8 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800df96:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800df9a:	68fa      	ldr	r2, [r7, #12]
 800df9c:	18d0      	adds	r0, r2, r3
 800df9e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dfa2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800dfa6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800dfaa:	6812      	ldr	r2, [r2, #0]
 800dfac:	4413      	add	r3, r2
 800dfae:	f107 0214 	add.w	r2, r7, #20
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	f7ff fc2e 	bl	800d814 <lorawan_aes_encrypt>
            block = block + 16;
 800dfb8:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800dfbc:	3310      	adds	r3, #16
 800dfbe:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800dfc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfc6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800dfca:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800dfce:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800dfd2:	6812      	ldr	r2, [r2, #0]
 800dfd4:	3a10      	subs	r2, #16
 800dfd6:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800dfd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfdc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1d7      	bne.n	800df96 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800dfe6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b088      	sub	sp, #32
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
 800e000:	4613      	mov	r3, r2
 800e002:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e00a:	2302      	movs	r3, #2
 800e00c:	e02e      	b.n	800e06c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800e00e:	2306      	movs	r3, #6
 800e010:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800e012:	78bb      	ldrb	r3, [r7, #2]
 800e014:	2b0c      	cmp	r3, #12
 800e016:	d104      	bne.n	800e022 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800e018:	78fb      	ldrb	r3, [r7, #3]
 800e01a:	2b0b      	cmp	r3, #11
 800e01c:	d001      	beq.n	800e022 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800e01e:	2303      	movs	r3, #3
 800e020:	e024      	b.n	800e06c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800e022:	2300      	movs	r3, #0
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	f107 0310 	add.w	r3, r7, #16
 800e02a:	2200      	movs	r2, #0
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	605a      	str	r2, [r3, #4]
 800e030:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800e032:	f107 030c 	add.w	r3, r7, #12
 800e036:	78fa      	ldrb	r2, [r7, #3]
 800e038:	2110      	movs	r1, #16
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f7ff ff5a 	bl	800def4 <SecureElementAesEncrypt>
 800e040:	4603      	mov	r3, r0
 800e042:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e044:	7ffb      	ldrb	r3, [r7, #31]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d001      	beq.n	800e04e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800e04a:	7ffb      	ldrb	r3, [r7, #31]
 800e04c:	e00e      	b.n	800e06c <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800e04e:	f107 020c 	add.w	r2, r7, #12
 800e052:	78bb      	ldrb	r3, [r7, #2]
 800e054:	4611      	mov	r1, r2
 800e056:	4618      	mov	r0, r3
 800e058:	f7ff fea8 	bl	800ddac <SecureElementSetKey>
 800e05c:	4603      	mov	r3, r0
 800e05e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800e060:	7ffb      	ldrb	r3, [r7, #31]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d001      	beq.n	800e06a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800e066:	7ffb      	ldrb	r3, [r7, #31]
 800e068:	e000      	b.n	800e06c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e06a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3720      	adds	r7, #32
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60b9      	str	r1, [r7, #8]
 800e07c:	607b      	str	r3, [r7, #4]
 800e07e:	4603      	mov	r3, r0
 800e080:	73fb      	strb	r3, [r7, #15]
 800e082:	4613      	mov	r3, r2
 800e084:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d005      	beq.n	800e098 <SecureElementProcessJoinAccept+0x24>
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d002      	beq.n	800e098 <SecureElementProcessJoinAccept+0x24>
 800e092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e094:	2b00      	cmp	r3, #0
 800e096:	d101      	bne.n	800e09c <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e098:	2302      	movs	r3, #2
 800e09a:	e05c      	b.n	800e156 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800e09c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0a0:	2b21      	cmp	r3, #33	; 0x21
 800e0a2:	d901      	bls.n	800e0a8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800e0a4:	2305      	movs	r3, #5
 800e0a6:	e056      	b.n	800e156 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800e0ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0b8:	f00b f9f1 	bl	801949e <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	1c58      	adds	r0, r3, #1
 800e0c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	4619      	mov	r1, r3
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	7dfa      	ldrb	r2, [r7, #23]
 800e0ce:	f7ff ff11 	bl	800def4 <SecureElementAesEncrypt>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800e0d8:	2307      	movs	r3, #7
 800e0da:	e03c      	b.n	800e156 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800e0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0de:	330b      	adds	r3, #11
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	09db      	lsrs	r3, r3, #7
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e8:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800e0ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0ee:	3b04      	subs	r3, #4
 800e0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f2:	4413      	add	r3, r2
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0fc:	3b03      	subs	r3, #3
 800e0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e100:	4413      	add	r3, r2
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	021b      	lsls	r3, r3, #8
 800e106:	ea41 0203 	orr.w	r2, r1, r3
 800e10a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e10e:	3b02      	subs	r3, #2
 800e110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e112:	440b      	add	r3, r1
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	041b      	lsls	r3, r3, #16
 800e118:	431a      	orrs	r2, r3
 800e11a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e11e:	3b01      	subs	r3, #1
 800e120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e122:	440b      	add	r3, r1
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	061b      	lsls	r3, r3, #24
 800e128:	4313      	orrs	r3, r2
 800e12a:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800e12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d10d      	bne.n	800e150 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800e134:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e138:	3b04      	subs	r3, #4
 800e13a:	4619      	mov	r1, r3
 800e13c:	2301      	movs	r3, #1
 800e13e:	693a      	ldr	r2, [r7, #16]
 800e140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e142:	f7ff feab 	bl	800de9c <SecureElementVerifyAesCmac>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d003      	beq.n	800e154 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800e14c:	2301      	movs	r3, #1
 800e14e:	e002      	b.n	800e156 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800e150:	2304      	movs	r3, #4
 800e152:	e000      	b.n	800e156 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800e154:	2300      	movs	r3, #0
}
 800e156:	4618      	mov	r0, r3
 800e158:	3718      	adds	r7, #24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}
	...

0800e160 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e16e:	2302      	movs	r3, #2
 800e170:	e007      	b.n	800e182 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800e172:	4b06      	ldr	r3, [pc, #24]	; (800e18c <SecureElementSetDevEui+0x2c>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2208      	movs	r2, #8
 800e178:	6879      	ldr	r1, [r7, #4]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f00b f98f 	bl	801949e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e180:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e182:	4618      	mov	r0, r3
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	200004fc 	.word	0x200004fc

0800e190 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b082      	sub	sp, #8
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d101      	bne.n	800e1a2 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e19e:	2302      	movs	r3, #2
 800e1a0:	e007      	b.n	800e1b2 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800e1a2:	4b06      	ldr	r3, [pc, #24]	; (800e1bc <SecureElementGetDevEui+0x2c>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2208      	movs	r2, #8
 800e1a8:	4619      	mov	r1, r3
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f00b f977 	bl	801949e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e1b0:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3708      	adds	r7, #8
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	200004fc 	.word	0x200004fc

0800e1c0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e1ce:	2302      	movs	r3, #2
 800e1d0:	e008      	b.n	800e1e4 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800e1d2:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <SecureElementSetJoinEui+0x2c>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	3308      	adds	r3, #8
 800e1d8:	2208      	movs	r2, #8
 800e1da:	6879      	ldr	r1, [r7, #4]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f00b f95e 	bl	801949e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e1e2:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3708      	adds	r7, #8
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	200004fc 	.word	0x200004fc

0800e1f0 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b082      	sub	sp, #8
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d101      	bne.n	800e202 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e1fe:	2302      	movs	r3, #2
 800e200:	e008      	b.n	800e214 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800e202:	4b06      	ldr	r3, [pc, #24]	; (800e21c <SecureElementGetJoinEui+0x2c>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	3308      	adds	r3, #8
 800e208:	2208      	movs	r2, #8
 800e20a:	4619      	mov	r1, r3
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f00b f946 	bl	801949e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800e212:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800e214:	4618      	mov	r0, r3
 800e216:	3708      	adds	r7, #8
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	200004fc 	.word	0x200004fc

0800e220 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800e220:	b480      	push	{r7}
 800e222:	b083      	sub	sp, #12
 800e224:	af00      	add	r7, sp, #0
 800e226:	4603      	mov	r3, r0
 800e228:	6039      	str	r1, [r7, #0]
 800e22a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800e22c:	79fb      	ldrb	r3, [r7, #7]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d104      	bne.n	800e23c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800e232:	4b07      	ldr	r3, [pc, #28]	; (800e250 <SecureElementSetDevAddr+0x30>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	611a      	str	r2, [r3, #16]
 800e23a:	e003      	b.n	800e244 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800e23c:	4b04      	ldr	r3, [pc, #16]	; (800e250 <SecureElementSetDevAddr+0x30>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	683a      	ldr	r2, [r7, #0]
 800e242:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800e244:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e246:	4618      	mov	r0, r3
 800e248:	370c      	adds	r7, #12
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bc80      	pop	{r7}
 800e24e:	4770      	bx	lr
 800e250:	200004fc 	.word	0x200004fc

0800e254 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800e254:	b480      	push	{r7}
 800e256:	b083      	sub	sp, #12
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	6039      	str	r1, [r7, #0]
 800e25e:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800e266:	2302      	movs	r3, #2
 800e268:	e00e      	b.n	800e288 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	2b02      	cmp	r3, #2
 800e26e:	d105      	bne.n	800e27c <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800e270:	4b08      	ldr	r3, [pc, #32]	; (800e294 <SecureElementGetDevAddr+0x40>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	691a      	ldr	r2, [r3, #16]
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	601a      	str	r2, [r3, #0]
 800e27a:	e004      	b.n	800e286 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <SecureElementGetDevAddr+0x40>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	695a      	ldr	r2, [r3, #20]
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800e286:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800e288:	4618      	mov	r0, r3
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bc80      	pop	{r7}
 800e290:	4770      	bx	lr
 800e292:	bf00      	nop
 800e294:	200004fc 	.word	0x200004fc

0800e298 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b082      	sub	sp, #8
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800e2a2:	4a29      	ldr	r2, [pc, #164]	; (800e348 <LmHandlerInit+0xb0>)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800e2a8:	4b28      	ldr	r3, [pc, #160]	; (800e34c <LmHandlerInit+0xb4>)
 800e2aa:	4a29      	ldr	r2, [pc, #164]	; (800e350 <LmHandlerInit+0xb8>)
 800e2ac:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800e2ae:	4b27      	ldr	r3, [pc, #156]	; (800e34c <LmHandlerInit+0xb4>)
 800e2b0:	4a28      	ldr	r2, [pc, #160]	; (800e354 <LmHandlerInit+0xbc>)
 800e2b2:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800e2b4:	4b25      	ldr	r3, [pc, #148]	; (800e34c <LmHandlerInit+0xb4>)
 800e2b6:	4a28      	ldr	r2, [pc, #160]	; (800e358 <LmHandlerInit+0xc0>)
 800e2b8:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800e2ba:	4b24      	ldr	r3, [pc, #144]	; (800e34c <LmHandlerInit+0xb4>)
 800e2bc:	4a27      	ldr	r2, [pc, #156]	; (800e35c <LmHandlerInit+0xc4>)
 800e2be:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800e2c0:	4b21      	ldr	r3, [pc, #132]	; (800e348 <LmHandlerInit+0xb0>)
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	4a26      	ldr	r2, [pc, #152]	; (800e360 <LmHandlerInit+0xc8>)
 800e2c8:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800e2ca:	4b1f      	ldr	r3, [pc, #124]	; (800e348 <LmHandlerInit+0xb0>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	685b      	ldr	r3, [r3, #4]
 800e2d0:	4a23      	ldr	r2, [pc, #140]	; (800e360 <LmHandlerInit+0xc8>)
 800e2d2:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800e2d4:	4b1c      	ldr	r3, [pc, #112]	; (800e348 <LmHandlerInit+0xb0>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	4a21      	ldr	r2, [pc, #132]	; (800e360 <LmHandlerInit+0xc8>)
 800e2dc:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800e2de:	4b1a      	ldr	r3, [pc, #104]	; (800e348 <LmHandlerInit+0xb0>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	4a1e      	ldr	r2, [pc, #120]	; (800e360 <LmHandlerInit+0xc8>)
 800e2e6:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800e2e8:	4b1d      	ldr	r3, [pc, #116]	; (800e360 <LmHandlerInit+0xc8>)
 800e2ea:	4a1e      	ldr	r2, [pc, #120]	; (800e364 <LmHandlerInit+0xcc>)
 800e2ec:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800e2ee:	4b16      	ldr	r3, [pc, #88]	; (800e348 <LmHandlerInit+0xb0>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	4a1a      	ldr	r2, [pc, #104]	; (800e360 <LmHandlerInit+0xc8>)
 800e2f6:	6153      	str	r3, [r2, #20]

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	4a1b      	ldr	r2, [pc, #108]	; (800e368 <LmHandlerInit+0xd0>)
 800e2fc:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800e2fe:	4b12      	ldr	r3, [pc, #72]	; (800e348 <LmHandlerInit+0xb0>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e304:	4a18      	ldr	r2, [pc, #96]	; (800e368 <LmHandlerInit+0xd0>)
 800e306:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800e308:	4b17      	ldr	r3, [pc, #92]	; (800e368 <LmHandlerInit+0xd0>)
 800e30a:	4a18      	ldr	r2, [pc, #96]	; (800e36c <LmHandlerInit+0xd4>)
 800e30c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800e30e:	4b16      	ldr	r3, [pc, #88]	; (800e368 <LmHandlerInit+0xd0>)
 800e310:	4a17      	ldr	r2, [pc, #92]	; (800e370 <LmHandlerInit+0xd8>)
 800e312:	60da      	str	r2, [r3, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800e314:	4914      	ldr	r1, [pc, #80]	; (800e368 <LmHandlerInit+0xd0>)
 800e316:	2000      	movs	r0, #0
 800e318:	f000 fdb4 	bl	800ee84 <LmHandlerPackageRegister>
 800e31c:	4603      	mov	r3, r0
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d002      	beq.n	800e328 <LmHandlerInit+0x90>
    {
        return LORAMAC_HANDLER_ERROR;
 800e322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e326:	e00a      	b.n	800e33e <LmHandlerInit+0xa6>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800e328:	463b      	mov	r3, r7
 800e32a:	4618      	mov	r0, r3
 800e32c:	f001 fd2a 	bl	800fd84 <LmhpPackagesRegistrationInit>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d002      	beq.n	800e33c <LmHandlerInit+0xa4>
    {
        return LORAMAC_HANDLER_ERROR;
 800e336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e33a:	e000      	b.n	800e33e <LmHandlerInit+0xa6>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	20000554 	.word	0x20000554
 800e34c:	20000558 	.word	0x20000558
 800e350:	0800eb5d 	.word	0x0800eb5d
 800e354:	0800ebd1 	.word	0x0800ebd1
 800e358:	0800eca1 	.word	0x0800eca1
 800e35c:	0800edf1 	.word	0x0800edf1
 800e360:	20000568 	.word	0x20000568
 800e364:	0800f331 	.word	0x0800f331
 800e368:	20000518 	.word	0x20000518
 800e36c:	0800f145 	.word	0x0800f145
 800e370:	0800f17d 	.word	0x0800f17d

0800e374 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b092      	sub	sp, #72	; 0x48
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800e37c:	2218      	movs	r2, #24
 800e37e:	6879      	ldr	r1, [r7, #4]
 800e380:	4884      	ldr	r0, [pc, #528]	; (800e594 <LmHandlerConfigure+0x220>)
 800e382:	f00b f88c 	bl	801949e <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 800e386:	4b84      	ldr	r3, [pc, #528]	; (800e598 <LmHandlerConfigure+0x224>)
 800e388:	2200      	movs	r2, #0
 800e38a:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800e38c:	f7fe faa2 	bl	800c8d4 <LoraInfo_GetPtr>
 800e390:	6478      	str	r0, [r7, #68]	; 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800e392:	4b80      	ldr	r3, [pc, #512]	; (800e594 <LmHandlerConfigure+0x220>)
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	461a      	mov	r2, r3
 800e398:	2301      	movs	r3, #1
 800e39a:	4093      	lsls	r3, r2
 800e39c:	461a      	mov	r2, r3
 800e39e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3a0:	685b      	ldr	r3, [r3, #4]
 800e3a2:	4013      	ands	r3, r2
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d106      	bne.n	800e3b6 <LmHandlerConfigure+0x42>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800e3a8:	4b7c      	ldr	r3, [pc, #496]	; (800e59c <LmHandlerConfigure+0x228>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	2000      	movs	r0, #0
 800e3b0:	f00f fadc 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800e3b4:	e7fe      	b.n	800e3b4 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800e3b6:	4b77      	ldr	r3, [pc, #476]	; (800e594 <LmHandlerConfigure+0x220>)
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	4978      	ldr	r1, [pc, #480]	; (800e5a0 <LmHandlerConfigure+0x22c>)
 800e3be:	4879      	ldr	r0, [pc, #484]	; (800e5a4 <LmHandlerConfigure+0x230>)
 800e3c0:	f004 ffd4 	bl	801336c <LoRaMacInitialization>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d002      	beq.n	800e3d0 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800e3ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e3ce:	e0dc      	b.n	800e58a <LmHandlerConfigure+0x216>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800e3d0:	2327      	movs	r3, #39	; 0x27
 800e3d2:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e3d4:	f107 0318 	add.w	r3, r7, #24
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f005 fd53 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d103      	bne.n	800e3ec <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800e3e4:	4b70      	ldr	r3, [pc, #448]	; (800e5a8 <LmHandlerConfigure+0x234>)
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	701a      	strb	r2, [r3, #0]
 800e3ea:	e02a      	b.n	800e442 <LmHandlerConfigure+0xce>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800e3ec:	2328      	movs	r3, #40	; 0x28
 800e3ee:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800e3f0:	4b6e      	ldr	r3, [pc, #440]	; (800e5ac <LmHandlerConfigure+0x238>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	691b      	ldr	r3, [r3, #16]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d00c      	beq.n	800e414 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e3fa:	f107 0318 	add.w	r3, r7, #24
 800e3fe:	4618      	mov	r0, r3
 800e400:	f005 fb68 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800e404:	4b69      	ldr	r3, [pc, #420]	; (800e5ac <LmHandlerConfigure+0x238>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	691b      	ldr	r3, [r3, #16]
 800e40a:	69fa      	ldr	r2, [r7, #28]
 800e40c:	f240 51cc 	movw	r1, #1484	; 0x5cc
 800e410:	4610      	mov	r0, r2
 800e412:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800e414:	2327      	movs	r3, #39	; 0x27
 800e416:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800e418:	f107 0318 	add.w	r3, r7, #24
 800e41c:	4618      	mov	r0, r3
 800e41e:	f005 fd31 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10c      	bne.n	800e442 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e428:	2301      	movs	r3, #1
 800e42a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800e42c:	f107 0318 	add.w	r3, r7, #24
 800e430:	4618      	mov	r0, r3
 800e432:	f005 fb4f 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e436:	7f3b      	ldrb	r3, [r7, #28]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d002      	beq.n	800e442 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800e43c:	4b5a      	ldr	r3, [pc, #360]	; (800e5a8 <LmHandlerConfigure+0x234>)
 800e43e:	2201      	movs	r2, #1
 800e440:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800e442:	4b59      	ldr	r3, [pc, #356]	; (800e5a8 <LmHandlerConfigure+0x234>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d022      	beq.n	800e490 <LmHandlerConfigure+0x11c>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800e44a:	4b58      	ldr	r3, [pc, #352]	; (800e5ac <LmHandlerConfigure+0x238>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	69db      	ldr	r3, [r3, #28]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d004      	beq.n	800e45e <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800e454:	4b55      	ldr	r3, [pc, #340]	; (800e5ac <LmHandlerConfigure+0x238>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	69db      	ldr	r3, [r3, #28]
 800e45a:	2000      	movs	r0, #0
 800e45c:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800e45e:	2327      	movs	r3, #39	; 0x27
 800e460:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800e462:	f107 0318 	add.w	r3, r7, #24
 800e466:	4618      	mov	r0, r3
 800e468:	f005 fb34 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	643b      	str	r3, [r7, #64]	; 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800e470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e472:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800e476:	4b47      	ldr	r3, [pc, #284]	; (800e594 <LmHandlerConfigure+0x220>)
 800e478:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800e47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e47c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 800e480:	4b44      	ldr	r3, [pc, #272]	; (800e594 <LmHandlerConfigure+0x220>)
 800e482:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800e484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e486:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800e48a:	4b42      	ldr	r3, [pc, #264]	; (800e594 <LmHandlerConfigure+0x220>)
 800e48c:	709a      	strb	r2, [r3, #2]
 800e48e:	e008      	b.n	800e4a2 <LmHandlerConfigure+0x12e>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800e490:	2305      	movs	r3, #5
 800e492:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800e494:	2300      	movs	r3, #0
 800e496:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e498:	f107 0318 	add.w	r3, r7, #24
 800e49c:	4618      	mov	r0, r3
 800e49e:	f005 fcf1 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800e4a2:	4b3f      	ldr	r3, [pc, #252]	; (800e5a0 <LmHandlerConfigure+0x22c>)
 800e4a4:	689b      	ldr	r3, [r3, #8]
 800e4a6:	4a3e      	ldr	r2, [pc, #248]	; (800e5a0 <LmHandlerConfigure+0x22c>)
 800e4a8:	68d2      	ldr	r2, [r2, #12]
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7ff fbcb 	bl	800dc48 <SecureElementInitMcuID>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d002      	beq.n	800e4be <LmHandlerConfigure+0x14a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4bc:	e065      	b.n	800e58a <LmHandlerConfigure+0x216>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800e4be:	2306      	movs	r3, #6
 800e4c0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e4c2:	f107 0318 	add.w	r3, r7, #24
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f005 fb04 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	4a38      	ldr	r2, [pc, #224]	; (800e5b0 <LmHandlerConfigure+0x23c>)
 800e4d0:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e4d2:	f107 0318 	add.w	r3, r7, #24
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f005 fcd4 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800e4dc:	2302      	movs	r3, #2
 800e4de:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800e4e0:	4b33      	ldr	r3, [pc, #204]	; (800e5b0 <LmHandlerConfigure+0x23c>)
 800e4e2:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e4e4:	f107 0318 	add.w	r3, r7, #24
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f005 faf3 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800e4f2:	4b30      	ldr	r3, [pc, #192]	; (800e5b4 <LmHandlerConfigure+0x240>)
 800e4f4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800e4f6:	f107 0318 	add.w	r3, r7, #24
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f005 faea 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800e500:	f7ff fc22 	bl	800dd48 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800e504:	230f      	movs	r3, #15
 800e506:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800e508:	2301      	movs	r3, #1
 800e50a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e50c:	f107 0318 	add.w	r3, r7, #24
 800e510:	4618      	mov	r0, r3
 800e512:	f005 fcb7 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800e516:	2310      	movs	r3, #16
 800e518:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800e51a:	2300      	movs	r3, #0
 800e51c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e51e:	f107 0318 	add.w	r3, r7, #24
 800e522:	4618      	mov	r0, r3
 800e524:	f005 fcae 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800e528:	2304      	movs	r3, #4
 800e52a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800e52c:	4b19      	ldr	r3, [pc, #100]	; (800e594 <LmHandlerConfigure+0x220>)
 800e52e:	789b      	ldrb	r3, [r3, #2]
 800e530:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e532:	f107 0318 	add.w	r3, r7, #24
 800e536:	4618      	mov	r0, r3
 800e538:	f005 fca4 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800e53c:	233a      	movs	r3, #58	; 0x3a
 800e53e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800e540:	4b14      	ldr	r3, [pc, #80]	; (800e594 <LmHandlerConfigure+0x220>)
 800e542:	695b      	ldr	r3, [r3, #20]
 800e544:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800e546:	f107 0318 	add.w	r3, r7, #24
 800e54a:	4618      	mov	r0, r3
 800e54c:	f005 fc9a 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e550:	230f      	movs	r3, #15
 800e552:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800e554:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <LmHandlerConfigure+0x220>)
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	f107 0210 	add.w	r2, r7, #16
 800e55c:	4611      	mov	r1, r2
 800e55e:	4618      	mov	r0, r3
 800e560:	f008 fbe5 	bl	8016d2e <RegionGetPhyParam>
 800e564:	4603      	mov	r3, r0
 800e566:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	bf14      	ite	ne
 800e56e:	2301      	movne	r3, #1
 800e570:	2300      	moveq	r3, #0
 800e572:	b2da      	uxtb	r2, r3
 800e574:	4b07      	ldr	r3, [pc, #28]	; (800e594 <LmHandlerConfigure+0x220>)
 800e576:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800e578:	2014      	movs	r0, #20
 800e57a:	f000 fad7 	bl	800eb2c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800e57e:	4b05      	ldr	r3, [pc, #20]	; (800e594 <LmHandlerConfigure+0x220>)
 800e580:	79db      	ldrb	r3, [r3, #7]
 800e582:	4618      	mov	r0, r3
 800e584:	f006 faf8 	bl	8014b78 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800e588:	2300      	movs	r3, #0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3748      	adds	r7, #72	; 0x48
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	2000053c 	.word	0x2000053c
 800e598:	20000584 	.word	0x20000584
 800e59c:	0801e6dc 	.word	0x0801e6dc
 800e5a0:	20000568 	.word	0x20000568
 800e5a4:	20000558 	.word	0x20000558
 800e5a8:	2000067a 	.word	0x2000067a
 800e5ac:	20000554 	.word	0x20000554
 800e5b0:	20000500 	.word	0x20000500
 800e5b4:	20000508 	.word	0x20000508

0800e5b8 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800e5be:	f002 fe49 	bl	8011254 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800e5c2:	f000 fd8b 	bl	800f0dc <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800e5c6:	f000 fd5f 	bl	800f088 <LmHandlerPackageIsTxPending>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d117      	bne.n	800e600 <LmHandlerProcess+0x48>
        return;
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    /* If a MAC layer scheduled uplink is still pending try to send it. */
    if( IsUplinkTxPending == true )
 800e5d0:	4b0d      	ldr	r3, [pc, #52]	; (800e608 <LmHandlerProcess+0x50>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d014      	beq.n	800e602 <LmHandlerProcess+0x4a>
    {
        /* Send an empty message */
        LmHandlerAppData_t appData =
 800e5d8:	2300      	movs	r3, #0
 800e5da:	703b      	strb	r3, [r7, #0]
 800e5dc:	2300      	movs	r3, #0
 800e5de:	707b      	strb	r3, [r7, #1]
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800e5e4:	4b09      	ldr	r3, [pc, #36]	; (800e60c <LmHandlerProcess+0x54>)
 800e5e6:	78d9      	ldrb	r1, [r3, #3]
 800e5e8:	463b      	mov	r3, r7
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f000 f8d7 	bl	800e7a0 <LmHandlerSend>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d104      	bne.n	800e602 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800e5f8:	4b03      	ldr	r3, [pc, #12]	; (800e608 <LmHandlerProcess+0x50>)
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	701a      	strb	r2, [r3, #0]
 800e5fe:	e000      	b.n	800e602 <LmHandlerProcess+0x4a>
        return;
 800e600:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800e602:	3708      	adds	r7, #8
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}
 800e608:	20000584 	.word	0x20000584
 800e60c:	2000053c 	.word	0x2000053c

0800e610 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800e610:	b480      	push	{r7}
 800e612:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800e614:	4b02      	ldr	r3, [pc, #8]	; (800e620 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800e616:	681b      	ldr	r3, [r3, #0]
}
 800e618:	4618      	mov	r0, r3
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bc80      	pop	{r7}
 800e61e:	4770      	bx	lr
 800e620:	20000580 	.word	0x20000580

0800e624 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b092      	sub	sp, #72	; 0x48
 800e628:	af00      	add	r7, sp, #0
 800e62a:	4603      	mov	r3, r0
 800e62c:	460a      	mov	r2, r1
 800e62e:	71fb      	strb	r3, [r7, #7]
 800e630:	4613      	mov	r3, r2
 800e632:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800e634:	2301      	movs	r3, #1
 800e636:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800e63a:	4b46      	ldr	r3, [pc, #280]	; (800e754 <LmHandlerJoin+0x130>)
 800e63c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e640:	b2db      	uxtb	r3, r3
 800e642:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800e646:	4b43      	ldr	r3, [pc, #268]	; (800e754 <LmHandlerJoin+0x130>)
 800e648:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e64c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	2b02      	cmp	r3, #2
 800e654:	d10b      	bne.n	800e66e <LmHandlerJoin+0x4a>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e656:	2302      	movs	r3, #2
 800e658:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800e65c:	4b3e      	ldr	r3, [pc, #248]	; (800e758 <LmHandlerJoin+0x134>)
 800e65e:	2202      	movs	r2, #2
 800e660:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800e662:	4a3d      	ldr	r2, [pc, #244]	; (800e758 <LmHandlerJoin+0x134>)
 800e664:	79bb      	ldrb	r3, [r7, #6]
 800e666:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800e668:	f005 f936 	bl	80138d8 <LoRaMacStart>
 800e66c:	e05c      	b.n	800e728 <LmHandlerJoin+0x104>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e66e:	2301      	movs	r3, #1
 800e670:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800e674:	4b38      	ldr	r3, [pc, #224]	; (800e758 <LmHandlerJoin+0x134>)
 800e676:	2201      	movs	r2, #1
 800e678:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800e67a:	4b36      	ldr	r3, [pc, #216]	; (800e754 <LmHandlerJoin+0x130>)
 800e67c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e680:	4b35      	ldr	r3, [pc, #212]	; (800e758 <LmHandlerJoin+0x134>)
 800e682:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800e684:	4b33      	ldr	r3, [pc, #204]	; (800e754 <LmHandlerJoin+0x130>)
 800e686:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800e68a:	4b33      	ldr	r3, [pc, #204]	; (800e758 <LmHandlerJoin+0x134>)
 800e68c:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800e68e:	4b32      	ldr	r3, [pc, #200]	; (800e758 <LmHandlerJoin+0x134>)
 800e690:	2200      	movs	r2, #0
 800e692:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800e694:	4a30      	ldr	r2, [pc, #192]	; (800e758 <LmHandlerJoin+0x134>)
 800e696:	79bb      	ldrb	r3, [r7, #6]
 800e698:	7213      	strb	r3, [r2, #8]

        if( CtxRestoreDone == false )
 800e69a:	4b30      	ldr	r3, [pc, #192]	; (800e75c <LmHandlerJoin+0x138>)
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	f083 0301 	eor.w	r3, r3, #1
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d034      	beq.n	800e712 <LmHandlerJoin+0xee>
        {
            /* Configure the default datarate */
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800e6a8:	231f      	movs	r3, #31
 800e6aa:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800e6ac:	4b29      	ldr	r3, [pc, #164]	; (800e754 <LmHandlerJoin+0x130>)
 800e6ae:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e6b2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e6b4:	f107 030c 	add.w	r3, r7, #12
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f005 fbe3 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800e6be:	2320      	movs	r3, #32
 800e6c0:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800e6c2:	4b24      	ldr	r3, [pc, #144]	; (800e754 <LmHandlerJoin+0x130>)
 800e6c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e6c8:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e6ca:	f107 030c 	add.w	r3, r7, #12
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f005 fbd8 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

            /* Configure the default Tx Power */
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800e6d4:	2322      	movs	r3, #34	; 0x22
 800e6d6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800e6d8:	4b1e      	ldr	r3, [pc, #120]	; (800e754 <LmHandlerJoin+0x130>)
 800e6da:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e6de:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e6e0:	f107 030c 	add.w	r3, r7, #12
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f005 fbcd 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800e6ea:	2321      	movs	r3, #33	; 0x21
 800e6ec:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800e6ee:	4b19      	ldr	r3, [pc, #100]	; (800e754 <LmHandlerJoin+0x130>)
 800e6f0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800e6f4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e6f6:	f107 030c 	add.w	r3, r7, #12
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f005 fbc2 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800e700:	2329      	movs	r3, #41	; 0x29
 800e702:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800e704:	4b16      	ldr	r3, [pc, #88]	; (800e760 <LmHandlerJoin+0x13c>)
 800e706:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800e708:	f107 030c 	add.w	r3, r7, #12
 800e70c:	4618      	mov	r0, r3
 800e70e:	f005 fbb9 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
        }

        LoRaMacStart();
 800e712:	f005 f8e1 	bl	80138d8 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e716:	2301      	movs	r3, #1
 800e718:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800e71a:	2301      	movs	r3, #1
 800e71c:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e71e:	f107 030c 	add.w	r3, r7, #12
 800e722:	4618      	mov	r0, r3
 800e724:	f005 fbae 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
#endif /* LORAMAC_VERSION */
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800e728:	4b0c      	ldr	r3, [pc, #48]	; (800e75c <LmHandlerJoin+0x138>)
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	f083 0301 	eor.w	r3, r3, #1
 800e730:	b2db      	uxtb	r3, r3
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <LmHandlerJoin+0x118>
 800e736:	79bb      	ldrb	r3, [r7, #6]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d004      	beq.n	800e746 <LmHandlerJoin+0x122>
    {
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800e73c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e740:	4618      	mov	r0, r3
 800e742:	f005 ff49 	bl	80145d8 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e748:	4a06      	ldr	r2, [pc, #24]	; (800e764 <LmHandlerJoin+0x140>)
 800e74a:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800e74c:	bf00      	nop
 800e74e:	3748      	adds	r7, #72	; 0x48
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	2000053c 	.word	0x2000053c
 800e758:	20000094 	.word	0x20000094
 800e75c:	2000067a 	.word	0x2000067a
 800e760:	01000400 	.word	0x01000400
 800e764:	20000580 	.word	0x20000580

0800e768 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b08c      	sub	sp, #48	; 0x30
 800e76c:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800e76e:	2301      	movs	r3, #1
 800e770:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800e772:	1d3b      	adds	r3, r7, #4
 800e774:	4618      	mov	r0, r3
 800e776:	f005 f9ad 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
 800e77a:	4603      	mov	r3, r0
 800e77c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800e780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e784:	2b00      	cmp	r3, #0
 800e786:	d106      	bne.n	800e796 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e788:	7a3b      	ldrb	r3, [r7, #8]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d101      	bne.n	800e792 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800e78e:	2300      	movs	r3, #0
 800e790:	e002      	b.n	800e798 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800e792:	2301      	movs	r3, #1
 800e794:	e000      	b.n	800e798 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800e796:	2300      	movs	r3, #0
    }
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3730      	adds	r7, #48	; 0x30
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b08a      	sub	sp, #40	; 0x28
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	70fb      	strb	r3, [r7, #3]
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e7b0:	23ff      	movs	r3, #255	; 0xff
 800e7b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800e7b6:	f002 faa7 	bl	8010d08 <LoRaMacIsBusy>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d002      	beq.n	800e7c6 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e7c0:	f06f 0301 	mvn.w	r3, #1
 800e7c4:	e0ab      	b.n	800e91e <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800e7c6:	f002 fac7 	bl	8010d58 <LoRaMacIsStopped>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e7d0:	f06f 0302 	mvn.w	r3, #2
 800e7d4:	e0a3      	b.n	800e91e <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800e7d6:	f7ff ffc7 	bl	800e768 <LmHandlerJoinStatus>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d00a      	beq.n	800e7f6 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800e7e0:	4b51      	ldr	r3, [pc, #324]	; (800e928 <LmHandlerSend+0x188>)
 800e7e2:	79db      	ldrb	r3, [r3, #7]
 800e7e4:	4a50      	ldr	r2, [pc, #320]	; (800e928 <LmHandlerSend+0x188>)
 800e7e6:	7a12      	ldrb	r2, [r2, #8]
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7ff ff1a 	bl	800e624 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e7f0:	f06f 0302 	mvn.w	r3, #2
 800e7f4:	e093      	b.n	800e91e <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800e7f6:	4a4d      	ldr	r2, [pc, #308]	; (800e92c <LmHandlerSend+0x18c>)
 800e7f8:	78fb      	ldrb	r3, [r7, #3]
 800e7fa:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800e7fc:	78fb      	ldrb	r3, [r7, #3]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	bf14      	ite	ne
 800e802:	2301      	movne	r3, #1
 800e804:	2300      	moveq	r3, #0
 800e806:	b2db      	uxtb	r3, r3
 800e808:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800e80a:	4b49      	ldr	r3, [pc, #292]	; (800e930 <LmHandlerSend+0x190>)
 800e80c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e810:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	785b      	ldrb	r3, [r3, #1]
 800e816:	f107 020c 	add.w	r2, r7, #12
 800e81a:	4611      	mov	r1, r2
 800e81c:	4618      	mov	r0, r3
 800e81e:	f005 f8c9 	bl	80139b4 <LoRaMacQueryTxPossible>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d009      	beq.n	800e83c <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800e828:	2300      	movs	r3, #0
 800e82a:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800e82c:	2300      	movs	r3, #0
 800e82e:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800e834:	23f9      	movs	r3, #249	; 0xf9
 800e836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e83a:	e009      	b.n	800e850 <LmHandlerSend+0xb0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	785b      	ldrb	r3, [r3, #1]
 800e846:	b29b      	uxth	r3, r3
 800e848:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800e850:	4b36      	ldr	r3, [pc, #216]	; (800e92c <LmHandlerSend+0x18c>)
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	3310      	adds	r3, #16
 800e856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e85a:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800e85e:	4b34      	ldr	r3, [pc, #208]	; (800e930 <LmHandlerSend+0x190>)
 800e860:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800e864:	4b31      	ldr	r3, [pc, #196]	; (800e92c <LmHandlerSend+0x18c>)
 800e866:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800e868:	78ba      	ldrb	r2, [r7, #2]
 800e86a:	f107 0310 	add.w	r3, r7, #16
 800e86e:	4611      	mov	r1, r2
 800e870:	4618      	mov	r0, r3
 800e872:	f006 f849 	bl	8014908 <LoRaMacMcpsRequest>
 800e876:	4603      	mov	r3, r0
 800e878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800e87c:	6a3b      	ldr	r3, [r7, #32]
 800e87e:	4a2d      	ldr	r2, [pc, #180]	; (800e934 <LmHandlerSend+0x194>)
 800e880:	6013      	str	r3, [r2, #0]

    switch( status )
 800e882:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e886:	2b11      	cmp	r3, #17
 800e888:	d842      	bhi.n	800e910 <LmHandlerSend+0x170>
 800e88a:	a201      	add	r2, pc, #4	; (adr r2, 800e890 <LmHandlerSend+0xf0>)
 800e88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e890:	0800e8d9 	.word	0x0800e8d9
 800e894:	0800e8f1 	.word	0x0800e8f1
 800e898:	0800e911 	.word	0x0800e911
 800e89c:	0800e911 	.word	0x0800e911
 800e8a0:	0800e911 	.word	0x0800e911
 800e8a4:	0800e911 	.word	0x0800e911
 800e8a8:	0800e911 	.word	0x0800e911
 800e8ac:	0800e8f9 	.word	0x0800e8f9
 800e8b0:	0800e911 	.word	0x0800e911
 800e8b4:	0800e911 	.word	0x0800e911
 800e8b8:	0800e911 	.word	0x0800e911
 800e8bc:	0800e909 	.word	0x0800e909
 800e8c0:	0800e911 	.word	0x0800e911
 800e8c4:	0800e911 	.word	0x0800e911
 800e8c8:	0800e8f1 	.word	0x0800e8f1
 800e8cc:	0800e8f1 	.word	0x0800e8f1
 800e8d0:	0800e8f1 	.word	0x0800e8f1
 800e8d4:	0800e901 	.word	0x0800e901
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800e8d8:	4b17      	ldr	r3, [pc, #92]	; (800e938 <LmHandlerSend+0x198>)
 800e8da:	2200      	movs	r2, #0
 800e8dc:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800e8de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8e2:	f113 0f07 	cmn.w	r3, #7
 800e8e6:	d017      	beq.n	800e918 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800e8ee:	e013      	b.n	800e918 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800e8f0:	23fe      	movs	r3, #254	; 0xfe
 800e8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e8f6:	e010      	b.n	800e91a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e8f8:	23fd      	movs	r3, #253	; 0xfd
 800e8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e8fe:	e00c      	b.n	800e91a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800e900:	23fb      	movs	r3, #251	; 0xfb
 800e902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e906:	e008      	b.n	800e91a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800e908:	23fa      	movs	r3, #250	; 0xfa
 800e90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e90e:	e004      	b.n	800e91a <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800e910:	23ff      	movs	r3, #255	; 0xff
 800e912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800e916:	e000      	b.n	800e91a <LmHandlerSend+0x17a>
            break;
 800e918:	bf00      	nop
    }

    return lmhStatus;
 800e91a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3728      	adds	r7, #40	; 0x28
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	20000094 	.word	0x20000094
 800e92c:	200000a0 	.word	0x200000a0
 800e930:	2000053c 	.word	0x2000053c
 800e934:	20000580 	.word	0x20000580
 800e938:	20000584 	.word	0x20000584

0800e93c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b086      	sub	sp, #24
 800e940:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800e942:	2309      	movs	r3, #9
 800e944:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800e946:	463b      	mov	r3, r7
 800e948:	4618      	mov	r0, r3
 800e94a:	f005 fe45 	bl	80145d8 <LoRaMacMlmeRequest>
 800e94e:	4603      	mov	r3, r0
 800e950:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	4a06      	ldr	r2, [pc, #24]	; (800e970 <LmHandlerDeviceTimeReq+0x34>)
 800e956:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800e958:	7dfb      	ldrb	r3, [r7, #23]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d101      	bne.n	800e962 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800e95e:	2300      	movs	r3, #0
 800e960:	e001      	b.n	800e966 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800e962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800e966:	4618      	mov	r0, r3
 800e968:	3718      	adds	r7, #24
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	20000580 	.word	0x20000580

0800e974 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800e97e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800e982:	4618      	mov	r0, r3
 800e984:	370c      	adds	r7, #12
 800e986:	46bd      	mov	sp, r7
 800e988:	bc80      	pop	{r7}
 800e98a:	4770      	bx	lr

0800e98c <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b08e      	sub	sp, #56	; 0x38
 800e990:	af00      	add	r7, sp, #0
 800e992:	4603      	mov	r3, r0
 800e994:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800e996:	2300      	movs	r3, #0
 800e998:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800e99c:	f002 f9b4 	bl	8010d08 <LoRaMacIsBusy>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d002      	beq.n	800e9ac <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800e9a6:	f06f 0301 	mvn.w	r3, #1
 800e9aa:	e071      	b.n	800ea90 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800e9ac:	f7ff fedc 	bl	800e768 <LmHandlerJoinStatus>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d002      	beq.n	800e9bc <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800e9b6:	f06f 0302 	mvn.w	r3, #2
 800e9ba:	e069      	b.n	800ea90 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800e9c0:	f107 030c 	add.w	r3, r7, #12
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f005 f885 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d002      	beq.n	800e9d6 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800e9d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9d4:	e05c      	b.n	800ea90 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800e9d6:	7c3b      	ldrb	r3, [r7, #16]
 800e9d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800e9dc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800e9e0:	79fb      	ldrb	r3, [r7, #7]
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	d052      	beq.n	800ea8c <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800e9e6:	79fb      	ldrb	r3, [r7, #7]
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d028      	beq.n	800ea3e <LmHandlerRequestClass+0xb2>
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	dc48      	bgt.n	800ea82 <LmHandlerRequestClass+0xf6>
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d002      	beq.n	800e9fa <LmHandlerRequestClass+0x6e>
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d01e      	beq.n	800ea36 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800e9f8:	e043      	b.n	800ea82 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800e9fa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d041      	beq.n	800ea86 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800ea02:	79fb      	ldrb	r3, [r7, #7]
 800ea04:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ea06:	f107 030c 	add.w	r3, r7, #12
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f005 fa3a 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d10b      	bne.n	800ea2e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ea16:	4b20      	ldr	r3, [pc, #128]	; (800ea98 <LmHandlerRequestClass+0x10c>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d032      	beq.n	800ea86 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ea20:	4b1d      	ldr	r3, [pc, #116]	; (800ea98 <LmHandlerRequestClass+0x10c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea26:	79fa      	ldrb	r2, [r7, #7]
 800ea28:	4610      	mov	r0, r2
 800ea2a:	4798      	blx	r3
                break;
 800ea2c:	e02b      	b.n	800ea86 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ea2e:	23ff      	movs	r3, #255	; 0xff
 800ea30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ea34:	e027      	b.n	800ea86 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800ea36:	23ff      	movs	r3, #255	; 0xff
 800ea38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ea3c:	e026      	b.n	800ea8c <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800ea3e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d003      	beq.n	800ea4e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ea46:	23ff      	movs	r3, #255	; 0xff
 800ea48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ea4c:	e01d      	b.n	800ea8a <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800ea4e:	79fb      	ldrb	r3, [r7, #7]
 800ea50:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ea52:	f107 030c 	add.w	r3, r7, #12
 800ea56:	4618      	mov	r0, r3
 800ea58:	f005 fa14 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d10b      	bne.n	800ea7a <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ea62:	4b0d      	ldr	r3, [pc, #52]	; (800ea98 <LmHandlerRequestClass+0x10c>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d00e      	beq.n	800ea8a <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ea6c:	4b0a      	ldr	r3, [pc, #40]	; (800ea98 <LmHandlerRequestClass+0x10c>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea72:	79fa      	ldrb	r2, [r7, #7]
 800ea74:	4610      	mov	r0, r2
 800ea76:	4798      	blx	r3
                break;
 800ea78:	e007      	b.n	800ea8a <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ea7a:	23ff      	movs	r3, #255	; 0xff
 800ea7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800ea80:	e003      	b.n	800ea8a <LmHandlerRequestClass+0xfe>
                break;
 800ea82:	bf00      	nop
 800ea84:	e002      	b.n	800ea8c <LmHandlerRequestClass+0x100>
                break;
 800ea86:	bf00      	nop
 800ea88:	e000      	b.n	800ea8c <LmHandlerRequestClass+0x100>
                break;
 800ea8a:	bf00      	nop
        }
    }
    return errorStatus;
 800ea8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3738      	adds	r7, #56	; 0x38
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	20000554 	.word	0x20000554

0800ea9c <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b08c      	sub	sp, #48	; 0x30
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d102      	bne.n	800eab0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800eaaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaae:	e010      	b.n	800ead2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800eab0:	2300      	movs	r3, #0
 800eab2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800eab4:	f107 0308 	add.w	r3, r7, #8
 800eab8:	4618      	mov	r0, r3
 800eaba:	f005 f80b 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d002      	beq.n	800eaca <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800eac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eac8:	e003      	b.n	800ead2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800eaca:	7b3a      	ldrb	r2, [r7, #12]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3730      	adds	r7, #48	; 0x30
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
	...

0800eadc <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b08c      	sub	sp, #48	; 0x30
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d102      	bne.n	800eaf0 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800eaea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eaee:	e016      	b.n	800eb1e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800eaf0:	2320      	movs	r3, #32
 800eaf2:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800eaf4:	f107 0308 	add.w	r3, r7, #8
 800eaf8:	4618      	mov	r0, r3
 800eafa:	f004 ffeb 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d002      	beq.n	800eb0a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800eb04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb08:	e009      	b.n	800eb1e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800eb0a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f993 2000 	ldrsb.w	r2, [r3]
 800eb18:	4b03      	ldr	r3, [pc, #12]	; (800eb28 <LmHandlerGetTxDatarate+0x4c>)
 800eb1a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3730      	adds	r7, #48	; 0x30
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	2000053c 	.word	0x2000053c

0800eb2c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b08c      	sub	sp, #48	; 0x30
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800eb34:	2323      	movs	r3, #35	; 0x23
 800eb36:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800eb3c:	f107 0308 	add.w	r3, r7, #8
 800eb40:	4618      	mov	r0, r3
 800eb42:	f005 f99f 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d002      	beq.n	800eb52 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800eb4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb50:	e000      	b.n	800eb54 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3730      	adds	r7, #48	; 0x30
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b082      	sub	sp, #8
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800eb64:	4b18      	ldr	r3, [pc, #96]	; (800ebc8 <McpsConfirm+0x6c>)
 800eb66:	2201      	movs	r2, #1
 800eb68:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	785a      	ldrb	r2, [r3, #1]
 800eb6e:	4b16      	ldr	r3, [pc, #88]	; (800ebc8 <McpsConfirm+0x6c>)
 800eb70:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	789b      	ldrb	r3, [r3, #2]
 800eb76:	b25a      	sxtb	r2, r3
 800eb78:	4b13      	ldr	r3, [pc, #76]	; (800ebc8 <McpsConfirm+0x6c>)
 800eb7a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	4a11      	ldr	r2, [pc, #68]	; (800ebc8 <McpsConfirm+0x6c>)
 800eb82:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800eb8a:	4b0f      	ldr	r3, [pc, #60]	; (800ebc8 <McpsConfirm+0x6c>)
 800eb8c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	691b      	ldr	r3, [r3, #16]
 800eb92:	b2da      	uxtb	r2, r3
 800eb94:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <McpsConfirm+0x6c>)
 800eb96:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	791b      	ldrb	r3, [r3, #4]
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <McpsConfirm+0x6c>)
 800eba0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800eba2:	4b0a      	ldr	r3, [pc, #40]	; (800ebcc <McpsConfirm+0x70>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d004      	beq.n	800ebb6 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ebac:	4b07      	ldr	r3, [pc, #28]	; (800ebcc <McpsConfirm+0x70>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebb2:	4805      	ldr	r0, [pc, #20]	; (800ebc8 <McpsConfirm+0x6c>)
 800ebb4:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ebb6:	6879      	ldr	r1, [r7, #4]
 800ebb8:	2000      	movs	r0, #0
 800ebba:	f000 f9e9 	bl	800ef90 <LmHandlerPackagesNotify>
}
 800ebbe:	bf00      	nop
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	200000a0 	.word	0x200000a0
 800ebcc:	20000554 	.word	0x20000554

0800ebd0 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b086      	sub	sp, #24
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800ebde:	4b2d      	ldr	r3, [pc, #180]	; (800ec94 <McpsIndication+0xc4>)
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	785a      	ldrb	r2, [r3, #1]
 800ebe8:	4b2a      	ldr	r3, [pc, #168]	; (800ec94 <McpsIndication+0xc4>)
 800ebea:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ebec:	4b29      	ldr	r3, [pc, #164]	; (800ec94 <McpsIndication+0xc4>)
 800ebee:	785b      	ldrb	r3, [r3, #1]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d14b      	bne.n	800ec8c <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	791b      	ldrb	r3, [r3, #4]
 800ebf8:	b25a      	sxtb	r2, r3
 800ebfa:	4b26      	ldr	r3, [pc, #152]	; (800ec94 <McpsIndication+0xc4>)
 800ebfc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ec04:	b25a      	sxtb	r2, r3
 800ec06:	4b23      	ldr	r3, [pc, #140]	; (800ec94 <McpsIndication+0xc4>)
 800ec08:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ec10:	4b20      	ldr	r3, [pc, #128]	; (800ec94 <McpsIndication+0xc4>)
 800ec12:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	78da      	ldrb	r2, [r3, #3]
 800ec18:	4b1e      	ldr	r3, [pc, #120]	; (800ec94 <McpsIndication+0xc4>)
 800ec1a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	4a1c      	ldr	r2, [pc, #112]	; (800ec94 <McpsIndication+0xc4>)
 800ec22:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	78db      	ldrb	r3, [r3, #3]
 800ec28:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	7b1b      	ldrb	r3, [r3, #12]
 800ec2e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800ec36:	4b18      	ldr	r3, [pc, #96]	; (800ec98 <McpsIndication+0xc8>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d007      	beq.n	800ec50 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ec40:	4b15      	ldr	r3, [pc, #84]	; (800ec98 <McpsIndication+0xc8>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec46:	f107 0210 	add.w	r2, r7, #16
 800ec4a:	4912      	ldr	r1, [pc, #72]	; (800ec94 <McpsIndication+0xc4>)
 800ec4c:	4610      	mov	r0, r2
 800ec4e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ec50:	4b11      	ldr	r3, [pc, #68]	; (800ec98 <McpsIndication+0xc8>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d007      	beq.n	800ec6a <McpsIndication+0x9a>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	7e1b      	ldrb	r3, [r3, #24]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d003      	beq.n	800ec6a <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ec62:	4b0d      	ldr	r3, [pc, #52]	; (800ec98 <McpsIndication+0xc8>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec68:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ec6a:	6879      	ldr	r1, [r7, #4]
 800ec6c:	2001      	movs	r0, #1
 800ec6e:	f000 f98f 	bl	800ef90 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ec72:	f107 030f 	add.w	r3, r7, #15
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff ff10 	bl	800ea9c <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	795b      	ldrb	r3, [r3, #5]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d004      	beq.n	800ec8e <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800ec84:	4b05      	ldr	r3, [pc, #20]	; (800ec9c <McpsIndication+0xcc>)
 800ec86:	2201      	movs	r2, #1
 800ec88:	701a      	strb	r2, [r3, #0]
 800ec8a:	e000      	b.n	800ec8e <McpsIndication+0xbe>
        return;
 800ec8c:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800ec8e:	3718      	adds	r7, #24
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}
 800ec94:	200000bc 	.word	0x200000bc
 800ec98:	20000554 	.word	0x20000554
 800ec9c:	20000584 	.word	0x20000584

0800eca0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b08c      	sub	sp, #48	; 0x30
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800eca8:	4b49      	ldr	r3, [pc, #292]	; (800edd0 <MlmeConfirm+0x130>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	785a      	ldrb	r2, [r3, #1]
 800ecb2:	4b47      	ldr	r3, [pc, #284]	; (800edd0 <MlmeConfirm+0x130>)
 800ecb4:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800ecb6:	4b47      	ldr	r3, [pc, #284]	; (800edd4 <MlmeConfirm+0x134>)
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ecc0:	4b44      	ldr	r3, [pc, #272]	; (800edd4 <MlmeConfirm+0x134>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc6:	4842      	ldr	r0, [pc, #264]	; (800edd0 <MlmeConfirm+0x130>)
 800ecc8:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800ecca:	6879      	ldr	r1, [r7, #4]
 800eccc:	2002      	movs	r0, #2
 800ecce:	f000 f95f 	bl	800ef90 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	3b01      	subs	r3, #1
 800ecd8:	2b0b      	cmp	r3, #11
 800ecda:	d872      	bhi.n	800edc2 <MlmeConfirm+0x122>
 800ecdc:	a201      	add	r2, pc, #4	; (adr r2, 800ece4 <MlmeConfirm+0x44>)
 800ecde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece2:	bf00      	nop
 800ece4:	0800ed15 	.word	0x0800ed15
 800ece8:	0800edc3 	.word	0x0800edc3
 800ecec:	0800edc3 	.word	0x0800edc3
 800ecf0:	0800edc3 	.word	0x0800edc3
 800ecf4:	0800ed91 	.word	0x0800ed91
 800ecf8:	0800edc3 	.word	0x0800edc3
 800ecfc:	0800edc3 	.word	0x0800edc3
 800ed00:	0800edc3 	.word	0x0800edc3
 800ed04:	0800edc3 	.word	0x0800edc3
 800ed08:	0800edc3 	.word	0x0800edc3
 800ed0c:	0800eda9 	.word	0x0800eda9
 800ed10:	0800edc3 	.word	0x0800edc3
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800ed14:	2306      	movs	r3, #6
 800ed16:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800ed18:	f107 0308 	add.w	r3, r7, #8
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f004 fed9 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800ed22:	4b2d      	ldr	r3, [pc, #180]	; (800edd8 <MlmeConfirm+0x138>)
 800ed24:	79db      	ldrb	r3, [r3, #7]
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	4611      	mov	r1, r2
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7ff fa78 	bl	800e220 <SecureElementSetDevAddr>
 800ed30:	4603      	mov	r3, r0
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d102      	bne.n	800ed3c <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	4a28      	ldr	r2, [pc, #160]	; (800eddc <MlmeConfirm+0x13c>)
 800ed3a:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800ed3c:	4828      	ldr	r0, [pc, #160]	; (800ede0 <MlmeConfirm+0x140>)
 800ed3e:	f7ff fecd 	bl	800eadc <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800ed42:	4828      	ldr	r0, [pc, #160]	; (800ede4 <MlmeConfirm+0x144>)
 800ed44:	f000 fa74 	bl	800f230 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ed48:	4b21      	ldr	r3, [pc, #132]	; (800edd0 <MlmeConfirm+0x130>)
 800ed4a:	785b      	ldrb	r3, [r3, #1]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d108      	bne.n	800ed62 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ed50:	4b21      	ldr	r3, [pc, #132]	; (800edd8 <MlmeConfirm+0x138>)
 800ed52:	2200      	movs	r2, #0
 800ed54:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800ed56:	4b24      	ldr	r3, [pc, #144]	; (800ede8 <MlmeConfirm+0x148>)
 800ed58:	785b      	ldrb	r3, [r3, #1]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7ff fe16 	bl	800e98c <LmHandlerRequestClass>
 800ed60:	e002      	b.n	800ed68 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ed62:	4b1d      	ldr	r3, [pc, #116]	; (800edd8 <MlmeConfirm+0x138>)
 800ed64:	22ff      	movs	r2, #255	; 0xff
 800ed66:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800ed68:	4b1a      	ldr	r3, [pc, #104]	; (800edd4 <MlmeConfirm+0x134>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d004      	beq.n	800ed7c <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ed72:	4b18      	ldr	r3, [pc, #96]	; (800edd4 <MlmeConfirm+0x134>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed78:	4817      	ldr	r0, [pc, #92]	; (800edd8 <MlmeConfirm+0x138>)
 800ed7a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ed7c:	4b14      	ldr	r3, [pc, #80]	; (800edd0 <MlmeConfirm+0x130>)
 800ed7e:	785b      	ldrb	r3, [r3, #1]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d120      	bne.n	800edc6 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800ed84:	4b14      	ldr	r3, [pc, #80]	; (800edd8 <MlmeConfirm+0x138>)
 800ed86:	79db      	ldrb	r3, [r3, #7]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7fe fff1 	bl	800dd70 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800ed8e:	e01a      	b.n	800edc6 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800ed90:	4b16      	ldr	r3, [pc, #88]	; (800edec <MlmeConfirm+0x14c>)
 800ed92:	2201      	movs	r2, #1
 800ed94:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	7a1a      	ldrb	r2, [r3, #8]
 800ed9a:	4b14      	ldr	r3, [pc, #80]	; (800edec <MlmeConfirm+0x14c>)
 800ed9c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	7a5a      	ldrb	r2, [r3, #9]
 800eda2:	4b12      	ldr	r3, [pc, #72]	; (800edec <MlmeConfirm+0x14c>)
 800eda4:	74da      	strb	r2, [r3, #19]
            }
            break;
 800eda6:	e00f      	b.n	800edc8 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	785b      	ldrb	r3, [r3, #1]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d105      	bne.n	800edbc <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800edb0:	4b0d      	ldr	r3, [pc, #52]	; (800ede8 <MlmeConfirm+0x148>)
 800edb2:	7c1b      	ldrb	r3, [r3, #16]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7ff fddd 	bl	800e974 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800edba:	e005      	b.n	800edc8 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800edbc:	f7ff fdbe 	bl	800e93c <LmHandlerDeviceTimeReq>
            break;
 800edc0:	e002      	b.n	800edc8 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800edc2:	bf00      	nop
 800edc4:	e000      	b.n	800edc8 <MlmeConfirm+0x128>
            break;
 800edc6:	bf00      	nop
    }
}
 800edc8:	bf00      	nop
 800edca:	3730      	adds	r7, #48	; 0x30
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	200000a0 	.word	0x200000a0
 800edd4:	20000554 	.word	0x20000554
 800edd8:	20000094 	.word	0x20000094
 800eddc:	20000500 	.word	0x20000500
 800ede0:	20000098 	.word	0x20000098
 800ede4:	20000099 	.word	0x20000099
 800ede8:	2000053c 	.word	0x2000053c
 800edec:	200000bc 	.word	0x200000bc

0800edf0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800edfa:	4b20      	ldr	r3, [pc, #128]	; (800ee7c <MlmeIndication+0x8c>)
 800edfc:	2200      	movs	r2, #0
 800edfe:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	785a      	ldrb	r2, [r3, #1]
 800ee04:	4b1d      	ldr	r3, [pc, #116]	; (800ee7c <MlmeIndication+0x8c>)
 800ee06:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	789b      	ldrb	r3, [r3, #2]
 800ee0c:	b25a      	sxtb	r2, r3
 800ee0e:	4b1b      	ldr	r3, [pc, #108]	; (800ee7c <MlmeIndication+0x8c>)
 800ee10:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee18:	b25a      	sxtb	r2, r3
 800ee1a:	4b18      	ldr	r3, [pc, #96]	; (800ee7c <MlmeIndication+0x8c>)
 800ee1c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ee24:	4b15      	ldr	r3, [pc, #84]	; (800ee7c <MlmeIndication+0x8c>)
 800ee26:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	78da      	ldrb	r2, [r3, #3]
 800ee2c:	4b13      	ldr	r3, [pc, #76]	; (800ee7c <MlmeIndication+0x8c>)
 800ee2e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	4a11      	ldr	r2, [pc, #68]	; (800ee7c <MlmeIndication+0x8c>)
 800ee36:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800ee38:	4b11      	ldr	r3, [pc, #68]	; (800ee80 <MlmeIndication+0x90>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00d      	beq.n	800ee5e <MlmeIndication+0x6e>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	2b0a      	cmp	r3, #10
 800ee48:	d009      	beq.n	800ee5e <MlmeIndication+0x6e>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	2b0e      	cmp	r3, #14
 800ee50:	d005      	beq.n	800ee5e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ee52:	4b0b      	ldr	r3, [pc, #44]	; (800ee80 <MlmeIndication+0x90>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee58:	4908      	ldr	r1, [pc, #32]	; (800ee7c <MlmeIndication+0x8c>)
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ee5e:	6879      	ldr	r1, [r7, #4]
 800ee60:	2003      	movs	r0, #3
 800ee62:	f000 f895 	bl	800ef90 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	2b0a      	cmp	r3, #10
 800ee6c:	d001      	beq.n	800ee72 <MlmeIndication+0x82>
 800ee6e:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800ee70:	e000      	b.n	800ee74 <MlmeIndication+0x84>
            break;
 800ee72:	bf00      	nop
    }
}
 800ee74:	bf00      	nop
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	200000bc 	.word	0x200000bc
 800ee80:	20000554 	.word	0x20000554

0800ee84 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b084      	sub	sp, #16
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	6039      	str	r1, [r7, #0]
 800ee8e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800ee90:	2300      	movs	r3, #0
 800ee92:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d104      	bne.n	800eea4 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800ee9a:	f000 fa8b 	bl	800f3b4 <LmhpCompliancePackageFactory>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	60fb      	str	r3, [r7, #12]
                break;
 800eea2:	e00d      	b.n	800eec0 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800eea4:	f107 020c 	add.w	r2, r7, #12
 800eea8:	79fb      	ldrb	r3, [r7, #7]
 800eeaa:	4611      	mov	r1, r2
 800eeac:	4618      	mov	r0, r3
 800eeae:	f000 ff73 	bl	800fd98 <LmhpPackagesRegister>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d002      	beq.n	800eebe <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800eeb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eebc:	e03b      	b.n	800ef36 <LmHandlerPackageRegister+0xb2>
                }
                break;
 800eebe:	bf00      	nop
            }
    }
    if( package != NULL )
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d035      	beq.n	800ef32 <LmHandlerPackageRegister+0xae>
    {
        LmHandlerPackages[id] = package;
 800eec6:	79fb      	ldrb	r3, [r7, #7]
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	491d      	ldr	r1, [pc, #116]	; (800ef40 <LmHandlerPackageRegister+0xbc>)
 800eecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800eed0:	79fb      	ldrb	r3, [r7, #7]
 800eed2:	4a1b      	ldr	r2, [pc, #108]	; (800ef40 <LmHandlerPackageRegister+0xbc>)
 800eed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eed8:	4a1a      	ldr	r2, [pc, #104]	; (800ef44 <LmHandlerPackageRegister+0xc0>)
 800eeda:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800eedc:	4b1a      	ldr	r3, [pc, #104]	; (800ef48 <LmHandlerPackageRegister+0xc4>)
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	79fb      	ldrb	r3, [r7, #7]
 800eee2:	4917      	ldr	r1, [pc, #92]	; (800ef40 <LmHandlerPackageRegister+0xbc>)
 800eee4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eee8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800eeea:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800eeec:	4b16      	ldr	r3, [pc, #88]	; (800ef48 <LmHandlerPackageRegister+0xc4>)
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	79fb      	ldrb	r3, [r7, #7]
 800eef2:	4913      	ldr	r1, [pc, #76]	; (800ef40 <LmHandlerPackageRegister+0xbc>)
 800eef4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800eefa:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800eefc:	79fb      	ldrb	r3, [r7, #7]
 800eefe:	4a10      	ldr	r2, [pc, #64]	; (800ef40 <LmHandlerPackageRegister+0xbc>)
 800ef00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef04:	4a11      	ldr	r2, [pc, #68]	; (800ef4c <LmHandlerPackageRegister+0xc8>)
 800ef06:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800ef08:	4b0f      	ldr	r3, [pc, #60]	; (800ef48 <LmHandlerPackageRegister+0xc4>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	79fb      	ldrb	r3, [r7, #7]
 800ef0e:	490c      	ldr	r1, [pc, #48]	; (800ef40 <LmHandlerPackageRegister+0xbc>)
 800ef10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ef14:	6992      	ldr	r2, [r2, #24]
 800ef16:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800ef18:	79fb      	ldrb	r3, [r7, #7]
 800ef1a:	4a09      	ldr	r2, [pc, #36]	; (800ef40 <LmHandlerPackageRegister+0xbc>)
 800ef1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	4a0b      	ldr	r2, [pc, #44]	; (800ef50 <LmHandlerPackageRegister+0xcc>)
 800ef24:	6851      	ldr	r1, [r2, #4]
 800ef26:	4a0a      	ldr	r2, [pc, #40]	; (800ef50 <LmHandlerPackageRegister+0xcc>)
 800ef28:	7852      	ldrb	r2, [r2, #1]
 800ef2a:	6838      	ldr	r0, [r7, #0]
 800ef2c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	e001      	b.n	800ef36 <LmHandlerPackageRegister+0xb2>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800ef32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3710      	adds	r7, #16
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	20000528 	.word	0x20000528
 800ef44:	0800e625 	.word	0x0800e625
 800ef48:	20000554 	.word	0x20000554
 800ef4c:	0800e93d 	.word	0x0800e93d
 800ef50:	200000d0 	.word	0x200000d0

0800ef54 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800ef5e:	79fb      	ldrb	r3, [r7, #7]
 800ef60:	2b04      	cmp	r3, #4
 800ef62:	d80e      	bhi.n	800ef82 <LmHandlerPackageIsInitialized+0x2e>
 800ef64:	79fb      	ldrb	r3, [r7, #7]
 800ef66:	4a09      	ldr	r2, [pc, #36]	; (800ef8c <LmHandlerPackageIsInitialized+0x38>)
 800ef68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d007      	beq.n	800ef82 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800ef72:	79fb      	ldrb	r3, [r7, #7]
 800ef74:	4a05      	ldr	r2, [pc, #20]	; (800ef8c <LmHandlerPackageIsInitialized+0x38>)
 800ef76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef7a:	689b      	ldr	r3, [r3, #8]
 800ef7c:	4798      	blx	r3
 800ef7e:	4603      	mov	r3, r0
 800ef80:	e000      	b.n	800ef84 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800ef82:	2300      	movs	r3, #0
    }
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3708      	adds	r7, #8
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	20000528 	.word	0x20000528

0800ef90 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	4603      	mov	r3, r0
 800ef98:	6039      	str	r1, [r7, #0]
 800ef9a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	73fb      	strb	r3, [r7, #15]
 800efa0:	e067      	b.n	800f072 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800efa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efa6:	4a37      	ldr	r2, [pc, #220]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800efa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d05a      	beq.n	800f066 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800efb0:	79fb      	ldrb	r3, [r7, #7]
 800efb2:	2b03      	cmp	r3, #3
 800efb4:	d84e      	bhi.n	800f054 <LmHandlerPackagesNotify+0xc4>
 800efb6:	a201      	add	r2, pc, #4	; (adr r2, 800efbc <LmHandlerPackagesNotify+0x2c>)
 800efb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efbc:	0800efcd 	.word	0x0800efcd
 800efc0:	0800efef 	.word	0x0800efef
 800efc4:	0800f011 	.word	0x0800f011
 800efc8:	0800f033 	.word	0x0800f033
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800efcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efd0:	4a2c      	ldr	r2, [pc, #176]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800efd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efd6:	699b      	ldr	r3, [r3, #24]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d03d      	beq.n	800f058 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800efdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efe0:	4a28      	ldr	r2, [pc, #160]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800efe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efe6:	699b      	ldr	r3, [r3, #24]
 800efe8:	6838      	ldr	r0, [r7, #0]
 800efea:	4798      	blx	r3
                        }
                        break;
 800efec:	e034      	b.n	800f058 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800efee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eff2:	4a24      	ldr	r2, [pc, #144]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800eff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eff8:	69db      	ldr	r3, [r3, #28]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d02e      	beq.n	800f05c <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800effe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f002:	4a20      	ldr	r2, [pc, #128]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800f004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f008:	69db      	ldr	r3, [r3, #28]
 800f00a:	6838      	ldr	r0, [r7, #0]
 800f00c:	4798      	blx	r3
                        }
                        break;
 800f00e:	e025      	b.n	800f05c <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800f010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f014:	4a1b      	ldr	r2, [pc, #108]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800f016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d01f      	beq.n	800f060 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800f020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f024:	4a17      	ldr	r2, [pc, #92]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800f026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f02a:	6a1b      	ldr	r3, [r3, #32]
 800f02c:	6838      	ldr	r0, [r7, #0]
 800f02e:	4798      	blx	r3
                        }
                        break;
 800f030:	e016      	b.n	800f060 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800f032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f036:	4a13      	ldr	r2, [pc, #76]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800f038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d010      	beq.n	800f064 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800f042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f046:	4a0f      	ldr	r2, [pc, #60]	; (800f084 <LmHandlerPackagesNotify+0xf4>)
 800f048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04e:	6838      	ldr	r0, [r7, #0]
 800f050:	4798      	blx	r3
                        }
                        break;
 800f052:	e007      	b.n	800f064 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800f054:	bf00      	nop
 800f056:	e006      	b.n	800f066 <LmHandlerPackagesNotify+0xd6>
                        break;
 800f058:	bf00      	nop
 800f05a:	e004      	b.n	800f066 <LmHandlerPackagesNotify+0xd6>
                        break;
 800f05c:	bf00      	nop
 800f05e:	e002      	b.n	800f066 <LmHandlerPackagesNotify+0xd6>
                        break;
 800f060:	bf00      	nop
 800f062:	e000      	b.n	800f066 <LmHandlerPackagesNotify+0xd6>
                        break;
 800f064:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	3301      	adds	r3, #1
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	73fb      	strb	r3, [r7, #15]
 800f072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f076:	2b04      	cmp	r3, #4
 800f078:	dd93      	ble.n	800efa2 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800f07a:	bf00      	nop
 800f07c:	bf00      	nop
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	20000528 	.word	0x20000528

0800f088 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b082      	sub	sp, #8
 800f08c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f08e:	2300      	movs	r3, #0
 800f090:	71fb      	strb	r3, [r7, #7]
 800f092:	e018      	b.n	800f0c6 <LmHandlerPackageIsTxPending+0x3e>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800f094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f098:	4a0f      	ldr	r2, [pc, #60]	; (800f0d8 <LmHandlerPackageIsTxPending+0x50>)
 800f09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00b      	beq.n	800f0ba <LmHandlerPackageIsTxPending+0x32>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800f0a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0a6:	4a0c      	ldr	r2, [pc, #48]	; (800f0d8 <LmHandlerPackageIsTxPending+0x50>)
 800f0a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	4798      	blx	r3
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d001      	beq.n	800f0ba <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e00a      	b.n	800f0d0 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f0ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	71fb      	strb	r3, [r7, #7]
 800f0c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0ca:	2b04      	cmp	r3, #4
 800f0cc:	dde2      	ble.n	800f094 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	20000528 	.word	0x20000528

0800f0dc <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b082      	sub	sp, #8
 800f0e0:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	71fb      	strb	r3, [r7, #7]
 800f0e6:	e022      	b.n	800f12e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f0e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0ec:	4a14      	ldr	r2, [pc, #80]	; (800f140 <LmHandlerPackagesProcess+0x64>)
 800f0ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d015      	beq.n	800f122 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f0f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f0fa:	4a11      	ldr	r2, [pc, #68]	; (800f140 <LmHandlerPackagesProcess+0x64>)
 800f0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f100:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00d      	beq.n	800f122 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800f106:	79fb      	ldrb	r3, [r7, #7]
 800f108:	4618      	mov	r0, r3
 800f10a:	f7ff ff23 	bl	800ef54 <LmHandlerPackageIsInitialized>
 800f10e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800f110:	2b00      	cmp	r3, #0
 800f112:	d006      	beq.n	800f122 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800f114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f118:	4a09      	ldr	r2, [pc, #36]	; (800f140 <LmHandlerPackagesProcess+0x64>)
 800f11a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f11e:	691b      	ldr	r3, [r3, #16]
 800f120:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800f122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f126:	b2db      	uxtb	r3, r3
 800f128:	3301      	adds	r3, #1
 800f12a:	b2db      	uxtb	r3, r3
 800f12c:	71fb      	strb	r3, [r7, #7]
 800f12e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f132:	2b04      	cmp	r3, #4
 800f134:	ddd8      	ble.n	800f0e8 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	20000528 	.word	0x20000528

0800f144 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	4603      	mov	r3, r0
 800f14c:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800f14e:	4a09      	ldr	r2, [pc, #36]	; (800f174 <LmHandlerOnTxFrameCtrlChanged+0x30>)
 800f150:	79fb      	ldrb	r3, [r7, #7]
 800f152:	70d3      	strb	r3, [r2, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800f154:	4b08      	ldr	r3, [pc, #32]	; (800f178 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d005      	beq.n	800f16a <LmHandlerOnTxFrameCtrlChanged+0x26>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800f15e:	4b06      	ldr	r3, [pc, #24]	; (800f178 <LmHandlerOnTxFrameCtrlChanged+0x34>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f164:	79fa      	ldrb	r2, [r7, #7]
 800f166:	4610      	mov	r0, r2
 800f168:	4798      	blx	r3
    }
}
 800f16a:	bf00      	nop
 800f16c:	3708      	adds	r7, #8
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	2000053c 	.word	0x2000053c
 800f178:	20000554 	.word	0x20000554

0800f17c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b082      	sub	sp, #8
 800f180:	af00      	add	r7, sp, #0
 800f182:	4603      	mov	r3, r0
 800f184:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800f186:	4a09      	ldr	r2, [pc, #36]	; (800f1ac <LmHandlerOnPingSlotPeriodicityChanged+0x30>)
 800f188:	79fb      	ldrb	r3, [r7, #7]
 800f18a:	7413      	strb	r3, [r2, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800f18c:	4b08      	ldr	r3, [pc, #32]	; (800f1b0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f192:	2b00      	cmp	r3, #0
 800f194:	d005      	beq.n	800f1a2 <LmHandlerOnPingSlotPeriodicityChanged+0x26>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800f196:	4b06      	ldr	r3, [pc, #24]	; (800f1b0 <LmHandlerOnPingSlotPeriodicityChanged+0x34>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f19c:	79fa      	ldrb	r2, [r7, #7]
 800f19e:	4610      	mov	r0, r2
 800f1a0:	4798      	blx	r3
    }
}
 800f1a2:	bf00      	nop
 800f1a4:	3708      	adds	r7, #8
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	2000053c 	.word	0x2000053c
 800f1b0:	20000554 	.word	0x20000554

0800f1b4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	6039      	str	r1, [r7, #0]
 800f1be:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d102      	bne.n	800f1cc <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800f1c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1ca:	e00e      	b.n	800f1ea <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 800f1cc:	79fb      	ldrb	r3, [r7, #7]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d002      	beq.n	800f1d8 <LmHandlerGetVersion+0x24>
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d004      	beq.n	800f1e0 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 800f1d6:	e007      	b.n	800f1e8 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	4a06      	ldr	r2, [pc, #24]	; (800f1f4 <LmHandlerGetVersion+0x40>)
 800f1dc:	601a      	str	r2, [r3, #0]
            break;
 800f1de:	e003      	b.n	800f1e8 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	4a05      	ldr	r2, [pc, #20]	; (800f1f8 <LmHandlerGetVersion+0x44>)
 800f1e4:	601a      	str	r2, [r3, #0]
            break;
 800f1e6:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f1e8:	2300      	movs	r3, #0
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	370c      	adds	r7, #12
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bc80      	pop	{r7}
 800f1f2:	4770      	bx	lr
 800f1f4:	01000400 	.word	0x01000400
 800f1f8:	02010001 	.word	0x02010001

0800f1fc <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800f200:	f005 fce0 	bl	8014bc4 <LoRaMacDeInitialization>
 800f204:	4603      	mov	r3, r0
 800f206:	2b00      	cmp	r3, #0
 800f208:	d101      	bne.n	800f20e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f20a:	2300      	movs	r3, #0
 800f20c:	e001      	b.n	800f212 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f20e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f212:	4618      	mov	r0, r3
 800f214:	bd80      	pop	{r7, pc}

0800f216 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800f216:	b580      	push	{r7, lr}
 800f218:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800f21a:	f004 fb93 	bl	8013944 <LoRaMacHalt>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d101      	bne.n	800f228 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f224:	2300      	movs	r3, #0
 800f226:	e001      	b.n	800f22c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f228:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b08c      	sub	sp, #48	; 0x30
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d102      	bne.n	800f244 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800f23e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f242:	e016      	b.n	800f272 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800f244:	2321      	movs	r3, #33	; 0x21
 800f246:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f248:	f107 0308 	add.w	r3, r7, #8
 800f24c:	4618      	mov	r0, r3
 800f24e:	f004 fc41 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d002      	beq.n	800f25e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800f258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f25c:	e009      	b.n	800f272 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800f25e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f993 2000 	ldrsb.w	r2, [r3]
 800f26c:	4b03      	ldr	r3, [pc, #12]	; (800f27c <LmHandlerGetTxPower+0x4c>)
 800f26e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800f270:	2300      	movs	r3, #0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3730      	adds	r7, #48	; 0x30
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	2000053c 	.word	0x2000053c

0800f280 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b08e      	sub	sp, #56	; 0x38
 800f284:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f286:	2300      	movs	r3, #0
 800f288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800f28c:	2300      	movs	r3, #0
 800f28e:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800f290:	f7ff ffc1 	bl	800f216 <LmHandlerHalt>
 800f294:	4603      	mov	r3, r0
 800f296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800f29a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d12f      	bne.n	800f302 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800f2a2:	f000 f859 	bl	800f358 <NvmDataMgmtStoreBegin>
 800f2a6:	6338      	str	r0, [r7, #48]	; 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800f2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2aa:	f113 0f02 	cmn.w	r3, #2
 800f2ae:	d103      	bne.n	800f2b8 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800f2b0:	23f8      	movs	r3, #248	; 0xf8
 800f2b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f2b6:	e01c      	b.n	800f2f2 <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800f2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d104      	bne.n	800f2c8 <LmHandlerNvmDataStore+0x48>
 800f2be:	4b1b      	ldr	r3, [pc, #108]	; (800f32c <LmHandlerNvmDataStore+0xac>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	695b      	ldr	r3, [r3, #20]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d103      	bne.n	800f2d0 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f2c8:	23ff      	movs	r3, #255	; 0xff
 800f2ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f2ce:	e010      	b.n	800f2f2 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800f2d0:	2327      	movs	r3, #39	; 0x27
 800f2d2:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800f2d4:	463b      	mov	r3, r7
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f004 fbfc 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	62fb      	str	r3, [r7, #44]	; 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800f2e0:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800f2e4:	62bb      	str	r3, [r7, #40]	; 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800f2e6:	4b11      	ldr	r3, [pc, #68]	; (800f32c <LmHandlerNvmDataStore+0xac>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	695b      	ldr	r3, [r3, #20]
 800f2ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f2f0:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800f2f2:	f000 f847 	bl	800f384 <NvmDataMgmtStoreEnd>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d002      	beq.n	800f302 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f2fc:	23ff      	movs	r3, #255	; 0xff
 800f2fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800f302:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f306:	2b00      	cmp	r3, #0
 800f308:	d109      	bne.n	800f31e <LmHandlerNvmDataStore+0x9e>
 800f30a:	4b08      	ldr	r3, [pc, #32]	; (800f32c <LmHandlerNvmDataStore+0xac>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	69db      	ldr	r3, [r3, #28]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d004      	beq.n	800f31e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800f314:	4b05      	ldr	r3, [pc, #20]	; (800f32c <LmHandlerNvmDataStore+0xac>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	69db      	ldr	r3, [r3, #28]
 800f31a:	2001      	movs	r0, #1
 800f31c:	4798      	blx	r3
    }

    return lmhStatus;
 800f31e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f322:	4618      	mov	r0, r3
 800f324:	3738      	adds	r7, #56	; 0x38
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
 800f32a:	bf00      	nop
 800f32c:	20000554 	.word	0x20000554

0800f330 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	4603      	mov	r3, r0
 800f338:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800f33a:	4b06      	ldr	r3, [pc, #24]	; (800f354 <NvmDataMgmtEvent+0x24>)
 800f33c:	881a      	ldrh	r2, [r3, #0]
 800f33e:	88fb      	ldrh	r3, [r7, #6]
 800f340:	4313      	orrs	r3, r2
 800f342:	b29a      	uxth	r2, r3
 800f344:	4b03      	ldr	r3, [pc, #12]	; (800f354 <NvmDataMgmtEvent+0x24>)
 800f346:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800f348:	bf00      	nop
 800f34a:	370c      	adds	r7, #12
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bc80      	pop	{r7}
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	2000067c 	.word	0x2000067c

0800f358 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800f35c:	4b08      	ldr	r3, [pc, #32]	; (800f380 <NvmDataMgmtStoreBegin+0x28>)
 800f35e:	881b      	ldrh	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800f364:	f06f 0301 	mvn.w	r3, #1
 800f368:	e008      	b.n	800f37c <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800f36a:	f004 fac3 	bl	80138f4 <LoRaMacStop>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800f374:	f06f 0302 	mvn.w	r3, #2
 800f378:	e000      	b.n	800f37c <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800f37a:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	2000067c 	.word	0x2000067c

0800f384 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f388:	4b03      	ldr	r3, [pc, #12]	; (800f398 <NvmDataMgmtStoreEnd+0x14>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800f38e:	f004 faa3 	bl	80138d8 <LoRaMacStart>
    return NVM_DATA_OK;
 800f392:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800f394:	4618      	mov	r0, r3
 800f396:	bd80      	pop	{r7, pc}
 800f398:	2000067c 	.word	0x2000067c

0800f39c <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	af00      	add	r7, sp, #0
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800f3a0:	2220      	movs	r2, #32
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	4802      	ldr	r0, [pc, #8]	; (800f3b0 <ClassBStatusReset+0x14>)
 800f3a6:	f00a f8b5 	bl	8019514 <memset1>
}
 800f3aa:	bf00      	nop
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	20000694 	.word	0x20000694

0800f3b4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  /* To be initialized by LmHandler */
    .OnSystemReset           = NULL,  /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800f3b8:	4b02      	ldr	r3, [pc, #8]	; (800f3c4 <LmhpCompliancePackageFactory+0x10>)
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bc80      	pop	{r7}
 800f3c0:	4770      	bx	lr
 800f3c2:	bf00      	nop
 800f3c4:	200000d8 	.word	0x200000d8

0800f3c8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d018      	beq.n	800f40e <LmhpComplianceInit+0x46>
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d015      	beq.n	800f40e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800f3e2:	4a19      	ldr	r2, [pc, #100]	; (800f448 <LmhpComplianceInit+0x80>)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800f3e8:	4a18      	ldr	r2, [pc, #96]	; (800f44c <LmhpComplianceInit+0x84>)
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800f3ee:	4a17      	ldr	r2, [pc, #92]	; (800f44c <LmhpComplianceInit+0x84>)
 800f3f0:	79fb      	ldrb	r3, [r7, #7]
 800f3f2:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800f3f4:	4b15      	ldr	r3, [pc, #84]	; (800f44c <LmhpComplianceInit+0x84>)
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	9300      	str	r3, [sp, #0]
 800f3fe:	4b14      	ldr	r3, [pc, #80]	; (800f450 <LmhpComplianceInit+0x88>)
 800f400:	2200      	movs	r2, #0
 800f402:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f406:	4813      	ldr	r0, [pc, #76]	; (800f454 <LmhpComplianceInit+0x8c>)
 800f408:	f00e f802 	bl	801d410 <UTIL_TIMER_Create>
 800f40c:	e005      	b.n	800f41a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800f40e:	4b0e      	ldr	r3, [pc, #56]	; (800f448 <LmhpComplianceInit+0x80>)
 800f410:	2200      	movs	r2, #0
 800f412:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800f414:	4b0d      	ldr	r3, [pc, #52]	; (800f44c <LmhpComplianceInit+0x84>)
 800f416:	2200      	movs	r2, #0
 800f418:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800f41a:	4b0c      	ldr	r3, [pc, #48]	; (800f44c <LmhpComplianceInit+0x84>)
 800f41c:	2200      	movs	r2, #0
 800f41e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800f420:	f7ff ffbc 	bl	800f39c <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800f424:	4b09      	ldr	r3, [pc, #36]	; (800f44c <LmhpComplianceInit+0x84>)
 800f426:	2200      	movs	r2, #0
 800f428:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800f42a:	4b08      	ldr	r3, [pc, #32]	; (800f44c <LmhpComplianceInit+0x84>)
 800f42c:	2200      	movs	r2, #0
 800f42e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800f430:	4b06      	ldr	r3, [pc, #24]	; (800f44c <LmhpComplianceInit+0x84>)
 800f432:	2200      	movs	r2, #0
 800f434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800f438:	4b04      	ldr	r3, [pc, #16]	; (800f44c <LmhpComplianceInit+0x84>)
 800f43a:	2200      	movs	r2, #0
 800f43c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800f440:	bf00      	nop
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	200006b8 	.word	0x200006b8
 800f44c:	20000680 	.word	0x20000680
 800f450:	0800fd51 	.word	0x0800fd51
 800f454:	200006bc 	.word	0x200006bc

0800f458 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800f458:	b480      	push	{r7}
 800f45a:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800f45c:	4b02      	ldr	r3, [pc, #8]	; (800f468 <LmhpComplianceIsInitialized+0x10>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
}
 800f460:	4618      	mov	r0, r3
 800f462:	46bd      	mov	sp, r7
 800f464:	bc80      	pop	{r7}
 800f466:	4770      	bx	lr
 800f468:	20000680 	.word	0x20000680

0800f46c <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800f46c:	b480      	push	{r7}
 800f46e:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800f470:	4b02      	ldr	r3, [pc, #8]	; (800f47c <LmhpComplianceIsTxPending+0x10>)
 800f472:	785b      	ldrb	r3, [r3, #1]
}
 800f474:	4618      	mov	r0, r3
 800f476:	46bd      	mov	sp, r7
 800f478:	bc80      	pop	{r7}
 800f47a:	4770      	bx	lr
 800f47c:	20000680 	.word	0x20000680

0800f480 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800f480:	b590      	push	{r4, r7, lr}
 800f482:	b085      	sub	sp, #20
 800f484:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800f486:	4b33      	ldr	r3, [pc, #204]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f488:	785b      	ldrb	r3, [r3, #1]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d03e      	beq.n	800f50c <LmhpComplianceProcess+0x8c>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800f48e:	f00e f97d 	bl	801d78c <UTIL_TIMER_GetCurrentTime>
 800f492:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800f494:	4b2f      	ldr	r3, [pc, #188]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f496:	685c      	ldr	r4, [r3, #4]
 800f498:	f7ff f8ba 	bl	800e610 <LmHandlerGetDutyCycleWaitTime>
 800f49c:	4603      	mov	r3, r0
 800f49e:	4423      	add	r3, r4
 800f4a0:	68fa      	ldr	r2, [r7, #12]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d941      	bls.n	800f52a <LmhpComplianceProcess+0xaa>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800f4a6:	4b2b      	ldr	r3, [pc, #172]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f4a8:	7a9b      	ldrb	r3, [r3, #10]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d03d      	beq.n	800f52a <LmhpComplianceProcess+0xaa>
            {
                /* Answer commands */
                LmHandlerAppData_t appData =
 800f4ae:	23e0      	movs	r3, #224	; 0xe0
 800f4b0:	703b      	strb	r3, [r7, #0]
                {
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800f4b2:	4b28      	ldr	r3, [pc, #160]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f4b4:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData =
 800f4b6:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800f4b8:	4b26      	ldr	r3, [pc, #152]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f4ba:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData =
 800f4bc:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };

                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f4be:	23ff      	movs	r3, #255	; 0xff
 800f4c0:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800f4c2:	4b24      	ldr	r3, [pc, #144]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f4c4:	7a19      	ldrb	r1, [r3, #8]
 800f4c6:	463b      	mov	r3, r7
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7ff f968 	bl	800e7a0 <LmHandlerSend>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	72fb      	strb	r3, [r7, #11]
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800f4d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d004      	beq.n	800f4e6 <LmhpComplianceProcess+0x66>
 800f4dc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f4e0:	f113 0f07 	cmn.w	r3, #7
 800f4e4:	d106      	bne.n	800f4f4 <LmhpComplianceProcess+0x74>
                {
                    ComplianceTestState.IsTxPending = false;
 800f4e6:	4b1b      	ldr	r3, [pc, #108]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800f4ec:	4b19      	ldr	r3, [pc, #100]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	729a      	strb	r2, [r3, #10]
 800f4f2:	e007      	b.n	800f504 <LmhpComplianceProcess+0x84>
                }
                else
                {
                    /* try to send the message again */
                    TimerSetValue( &ProcessTimer, 1500 );
 800f4f4:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800f4f8:	4817      	ldr	r0, [pc, #92]	; (800f558 <LmhpComplianceProcess+0xd8>)
 800f4fa:	f00e f89d 	bl	801d638 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800f4fe:	4816      	ldr	r0, [pc, #88]	; (800f558 <LmhpComplianceProcess+0xd8>)
 800f500:	f00d ffbc 	bl	801d47c <UTIL_TIMER_Start>
                }

                ComplianceTestState.TxPendingTimestamp = now;
 800f504:	4a13      	ldr	r2, [pc, #76]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	6053      	str	r3, [r2, #4]
 800f50a:	e00e      	b.n	800f52a <LmhpComplianceProcess+0xaa>
        }
    }
    else
    {
        /* If no Tx is pending process other commands */
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800f50c:	4b11      	ldr	r3, [pc, #68]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f50e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800f512:	2b00      	cmp	r3, #0
 800f514:	d009      	beq.n	800f52a <LmhpComplianceProcess+0xaa>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800f516:	4b0f      	ldr	r3, [pc, #60]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f518:	2200      	movs	r2, #0
 800f51a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800f51e:	4b0d      	ldr	r3, [pc, #52]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f520:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800f524:	4618      	mov	r0, r3
 800f526:	f7ff fa31 	bl	800e98c <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800f52a:	4b0a      	ldr	r3, [pc, #40]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f52c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00a      	beq.n	800f54a <LmhpComplianceProcess+0xca>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800f534:	4b07      	ldr	r3, [pc, #28]	; (800f554 <LmhpComplianceProcess+0xd4>)
 800f536:	2200      	movs	r2, #0
 800f538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Call platform MCU reset API */
        if( CompliancePackage.OnSystemReset != NULL )
 800f53c:	4b07      	ldr	r3, [pc, #28]	; (800f55c <LmhpComplianceProcess+0xdc>)
 800f53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f540:	2b00      	cmp	r3, #0
 800f542:	d002      	beq.n	800f54a <LmhpComplianceProcess+0xca>
        {
            CompliancePackage.OnSystemReset( );
 800f544:	4b05      	ldr	r3, [pc, #20]	; (800f55c <LmhpComplianceProcess+0xdc>)
 800f546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f548:	4798      	blx	r3
        }
    }
}
 800f54a:	bf00      	nop
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd90      	pop	{r4, r7, pc}
 800f552:	bf00      	nop
 800f554:	20000680 	.word	0x20000680
 800f558:	200006bc 	.word	0x200006bc
 800f55c:	200000d8 	.word	0x200000d8

0800f560 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800f560:	b5b0      	push	{r4, r5, r7, lr}
 800f562:	b0a4      	sub	sp, #144	; 0x90
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800f568:	2300      	movs	r3, #0
 800f56a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800f56e:	4bd0      	ldr	r3, [pc, #832]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	f083 0301 	eor.w	r3, r3, #1
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b00      	cmp	r3, #0
 800f57a:	f040 83bf 	bne.w	800fcfc <LmhpComplianceOnMcpsIndication+0x79c>
        return;
    }

    /* Increment the compliance certification protocol downlink counter */
    /* Not counting downlinks on FPort 0 */
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	78db      	ldrb	r3, [r3, #3]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d103      	bne.n	800f58e <LmhpComplianceOnMcpsIndication+0x2e>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	7b9b      	ldrb	r3, [r3, #14]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d005      	beq.n	800f59a <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800f58e:	4bc8      	ldr	r3, [pc, #800]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f590:	8a1b      	ldrh	r3, [r3, #16]
 800f592:	3301      	adds	r3, #1
 800f594:	b29a      	uxth	r2, r3
 800f596:	4bc6      	ldr	r3, [pc, #792]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f598:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	7b5b      	ldrb	r3, [r3, #13]
 800f59e:	f083 0301 	eor.w	r3, r3, #1
 800f5a2:	b2db      	uxtb	r3, r3
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	f040 83ab 	bne.w	800fd00 <LmhpComplianceOnMcpsIndication+0x7a0>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	78db      	ldrb	r3, [r3, #3]
 800f5ae:	2be0      	cmp	r3, #224	; 0xe0
 800f5b0:	f040 83a8 	bne.w	800fd04 <LmhpComplianceOnMcpsIndication+0x7a4>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800f5b4:	4bbe      	ldr	r3, [pc, #760]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	689a      	ldr	r2, [r3, #8]
 800f5be:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f5c2:	1c59      	adds	r1, r3, #1
 800f5c4:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f5c8:	4413      	add	r3, r2
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	2b7f      	cmp	r3, #127	; 0x7f
 800f5ce:	f200 8372 	bhi.w	800fcb6 <LmhpComplianceOnMcpsIndication+0x756>
 800f5d2:	a201      	add	r2, pc, #4	; (adr r2, 800f5d8 <LmhpComplianceOnMcpsIndication+0x78>)
 800f5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d8:	0800f7d9 	.word	0x0800f7d9
 800f5dc:	0800f81d 	.word	0x0800f81d
 800f5e0:	0800f827 	.word	0x0800f827
 800f5e4:	0800f83d 	.word	0x0800f83d
 800f5e8:	0800f85f 	.word	0x0800f85f
 800f5ec:	0800f88d 	.word	0x0800f88d
 800f5f0:	0800f8b9 	.word	0x0800f8b9
 800f5f4:	0800f917 	.word	0x0800f917
 800f5f8:	0800f96f 	.word	0x0800f96f
 800f5fc:	0800f9db 	.word	0x0800f9db
 800f600:	0800fa2b 	.word	0x0800fa2b
 800f604:	0800fcb7 	.word	0x0800fcb7
 800f608:	0800fcb7 	.word	0x0800fcb7
 800f60c:	0800fcb7 	.word	0x0800fcb7
 800f610:	0800fcb7 	.word	0x0800fcb7
 800f614:	0800fcb7 	.word	0x0800fcb7
 800f618:	0800fcb7 	.word	0x0800fcb7
 800f61c:	0800fcb7 	.word	0x0800fcb7
 800f620:	0800fcb7 	.word	0x0800fcb7
 800f624:	0800fcb7 	.word	0x0800fcb7
 800f628:	0800fcb7 	.word	0x0800fcb7
 800f62c:	0800fcb7 	.word	0x0800fcb7
 800f630:	0800fcb7 	.word	0x0800fcb7
 800f634:	0800fcb7 	.word	0x0800fcb7
 800f638:	0800fcb7 	.word	0x0800fcb7
 800f63c:	0800fcb7 	.word	0x0800fcb7
 800f640:	0800fcb7 	.word	0x0800fcb7
 800f644:	0800fcb7 	.word	0x0800fcb7
 800f648:	0800fcb7 	.word	0x0800fcb7
 800f64c:	0800fcb7 	.word	0x0800fcb7
 800f650:	0800fcb7 	.word	0x0800fcb7
 800f654:	0800fcb7 	.word	0x0800fcb7
 800f658:	0800fa33 	.word	0x0800fa33
 800f65c:	0800fa45 	.word	0x0800fa45
 800f660:	0800fa4d 	.word	0x0800fa4d
 800f664:	0800fcb7 	.word	0x0800fcb7
 800f668:	0800fcb7 	.word	0x0800fcb7
 800f66c:	0800fcb7 	.word	0x0800fcb7
 800f670:	0800fcb7 	.word	0x0800fcb7
 800f674:	0800fcb7 	.word	0x0800fcb7
 800f678:	0800fcb7 	.word	0x0800fcb7
 800f67c:	0800fcb7 	.word	0x0800fcb7
 800f680:	0800fcb7 	.word	0x0800fcb7
 800f684:	0800fcb7 	.word	0x0800fcb7
 800f688:	0800fcb7 	.word	0x0800fcb7
 800f68c:	0800fcb7 	.word	0x0800fcb7
 800f690:	0800fcb7 	.word	0x0800fcb7
 800f694:	0800fcb7 	.word	0x0800fcb7
 800f698:	0800fcb7 	.word	0x0800fcb7
 800f69c:	0800fcb7 	.word	0x0800fcb7
 800f6a0:	0800fcb7 	.word	0x0800fcb7
 800f6a4:	0800fcb7 	.word	0x0800fcb7
 800f6a8:	0800fcb7 	.word	0x0800fcb7
 800f6ac:	0800fcb7 	.word	0x0800fcb7
 800f6b0:	0800fcb7 	.word	0x0800fcb7
 800f6b4:	0800fcb7 	.word	0x0800fcb7
 800f6b8:	0800fcb7 	.word	0x0800fcb7
 800f6bc:	0800fcb7 	.word	0x0800fcb7
 800f6c0:	0800fcb7 	.word	0x0800fcb7
 800f6c4:	0800fcb7 	.word	0x0800fcb7
 800f6c8:	0800fcb7 	.word	0x0800fcb7
 800f6cc:	0800fcb7 	.word	0x0800fcb7
 800f6d0:	0800fcb7 	.word	0x0800fcb7
 800f6d4:	0800fcb7 	.word	0x0800fcb7
 800f6d8:	0800fcb7 	.word	0x0800fcb7
 800f6dc:	0800fcb7 	.word	0x0800fcb7
 800f6e0:	0800fcb7 	.word	0x0800fcb7
 800f6e4:	0800fcb7 	.word	0x0800fcb7
 800f6e8:	0800fcb7 	.word	0x0800fcb7
 800f6ec:	0800fcb7 	.word	0x0800fcb7
 800f6f0:	0800fcb7 	.word	0x0800fcb7
 800f6f4:	0800fcb7 	.word	0x0800fcb7
 800f6f8:	0800fcb7 	.word	0x0800fcb7
 800f6fc:	0800fcb7 	.word	0x0800fcb7
 800f700:	0800fcb7 	.word	0x0800fcb7
 800f704:	0800fcb7 	.word	0x0800fcb7
 800f708:	0800fcb7 	.word	0x0800fcb7
 800f70c:	0800fcb7 	.word	0x0800fcb7
 800f710:	0800fcb7 	.word	0x0800fcb7
 800f714:	0800fcb7 	.word	0x0800fcb7
 800f718:	0800fcb7 	.word	0x0800fcb7
 800f71c:	0800fcb7 	.word	0x0800fcb7
 800f720:	0800fcb7 	.word	0x0800fcb7
 800f724:	0800fcb7 	.word	0x0800fcb7
 800f728:	0800fcb7 	.word	0x0800fcb7
 800f72c:	0800fcb7 	.word	0x0800fcb7
 800f730:	0800fcb7 	.word	0x0800fcb7
 800f734:	0800fcb7 	.word	0x0800fcb7
 800f738:	0800fcb7 	.word	0x0800fcb7
 800f73c:	0800fcb7 	.word	0x0800fcb7
 800f740:	0800fcb7 	.word	0x0800fcb7
 800f744:	0800fcb7 	.word	0x0800fcb7
 800f748:	0800fcb7 	.word	0x0800fcb7
 800f74c:	0800fcb7 	.word	0x0800fcb7
 800f750:	0800fcb7 	.word	0x0800fcb7
 800f754:	0800fcb7 	.word	0x0800fcb7
 800f758:	0800fcb7 	.word	0x0800fcb7
 800f75c:	0800fcb7 	.word	0x0800fcb7
 800f760:	0800fcb7 	.word	0x0800fcb7
 800f764:	0800fcb7 	.word	0x0800fcb7
 800f768:	0800fcb7 	.word	0x0800fcb7
 800f76c:	0800fcb7 	.word	0x0800fcb7
 800f770:	0800fcb7 	.word	0x0800fcb7
 800f774:	0800fcb7 	.word	0x0800fcb7
 800f778:	0800fcb7 	.word	0x0800fcb7
 800f77c:	0800fcb7 	.word	0x0800fcb7
 800f780:	0800fcb7 	.word	0x0800fcb7
 800f784:	0800fcb7 	.word	0x0800fcb7
 800f788:	0800fcb7 	.word	0x0800fcb7
 800f78c:	0800fcb7 	.word	0x0800fcb7
 800f790:	0800fcb7 	.word	0x0800fcb7
 800f794:	0800fcb7 	.word	0x0800fcb7
 800f798:	0800fcb7 	.word	0x0800fcb7
 800f79c:	0800fcb7 	.word	0x0800fcb7
 800f7a0:	0800fcb7 	.word	0x0800fcb7
 800f7a4:	0800fcb7 	.word	0x0800fcb7
 800f7a8:	0800fcb7 	.word	0x0800fcb7
 800f7ac:	0800fcb7 	.word	0x0800fcb7
 800f7b0:	0800fcb7 	.word	0x0800fcb7
 800f7b4:	0800fcb7 	.word	0x0800fcb7
 800f7b8:	0800fcb7 	.word	0x0800fcb7
 800f7bc:	0800fcb7 	.word	0x0800fcb7
 800f7c0:	0800fcb7 	.word	0x0800fcb7
 800f7c4:	0800fcb7 	.word	0x0800fcb7
 800f7c8:	0800fcb7 	.word	0x0800fcb7
 800f7cc:	0800fa7f 	.word	0x0800fa7f
 800f7d0:	0800fb2f 	.word	0x0800fb2f
 800f7d4:	0800fb61 	.word	0x0800fb61
    {
        case COMPLIANCE_PKG_VERSION_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800f7d8:	4b35      	ldr	r3, [pc, #212]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f7da:	68da      	ldr	r2, [r3, #12]
 800f7dc:	4b34      	ldr	r3, [pc, #208]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f7de:	7a9b      	ldrb	r3, [r3, #10]
 800f7e0:	1c59      	adds	r1, r3, #1
 800f7e2:	b2c8      	uxtb	r0, r1
 800f7e4:	4932      	ldr	r1, [pc, #200]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f7e6:	7288      	strb	r0, [r1, #10]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800f7ee:	4b30      	ldr	r3, [pc, #192]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f7f0:	68da      	ldr	r2, [r3, #12]
 800f7f2:	4b2f      	ldr	r3, [pc, #188]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f7f4:	7a9b      	ldrb	r3, [r3, #10]
 800f7f6:	1c59      	adds	r1, r3, #1
 800f7f8:	b2c8      	uxtb	r0, r1
 800f7fa:	492d      	ldr	r1, [pc, #180]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f7fc:	7288      	strb	r0, [r1, #10]
 800f7fe:	4413      	add	r3, r2
 800f800:	2206      	movs	r2, #6
 800f802:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800f804:	4b2a      	ldr	r3, [pc, #168]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f806:	68da      	ldr	r2, [r3, #12]
 800f808:	4b29      	ldr	r3, [pc, #164]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f80a:	7a9b      	ldrb	r3, [r3, #10]
 800f80c:	1c59      	adds	r1, r3, #1
 800f80e:	b2c8      	uxtb	r0, r1
 800f810:	4927      	ldr	r1, [pc, #156]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f812:	7288      	strb	r0, [r1, #10]
 800f814:	4413      	add	r3, r2
 800f816:	2201      	movs	r2, #1
 800f818:	701a      	strb	r2, [r3, #0]
                break;
 800f81a:	e257      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_RESET_REQ:
            {
                ComplianceTestState.IsResetCmdPending = true;
 800f81c:	4b24      	ldr	r3, [pc, #144]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f81e:	2201      	movs	r2, #1
 800f820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800f824:	e252      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DUT_JOIN_REQ:
            {
                if( CompliancePackage.OnJoinRequest != NULL )
 800f826:	4b23      	ldr	r3, [pc, #140]	; (800f8b4 <LmhpComplianceOnMcpsIndication+0x354>)
 800f828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 8245 	beq.w	800fcba <LmhpComplianceOnMcpsIndication+0x75a>
                {
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800f830:	4b20      	ldr	r3, [pc, #128]	; (800f8b4 <LmhpComplianceOnMcpsIndication+0x354>)
 800f832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f834:	2101      	movs	r1, #1
 800f836:	2002      	movs	r0, #2
 800f838:	4798      	blx	r3
                }
                break;
 800f83a:	e23e      	b.n	800fcba <LmhpComplianceOnMcpsIndication+0x75a>
            }
        case COMPLIANCE_SWITCH_CLASS_REQ:
            {
                /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	689a      	ldr	r2, [r3, #8]
 800f840:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f844:	1c59      	adds	r1, r3, #1
 800f846:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f84a:	4413      	add	r3, r2
 800f84c:	781a      	ldrb	r2, [r3, #0]
 800f84e:	4b18      	ldr	r3, [pc, #96]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f850:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800f854:	4b16      	ldr	r3, [pc, #88]	; (800f8b0 <LmhpComplianceOnMcpsIndication+0x350>)
 800f856:	2201      	movs	r2, #1
 800f858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800f85c:	e236      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_ADR_BIT_CHANGE_REQ:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type            = MIB_ADR;
 800f85e:	2304      	movs	r3, #4
 800f860:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	689a      	ldr	r2, [r3, #8]
 800f866:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f86a:	1c59      	adds	r1, r3, #1
 800f86c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f870:	4413      	add	r3, r2
 800f872:	781b      	ldrb	r3, [r3, #0]
 800f874:	2b00      	cmp	r3, #0
 800f876:	bf14      	ite	ne
 800f878:	2301      	movne	r3, #1
 800f87a:	2300      	moveq	r3, #0
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	733b      	strb	r3, [r7, #12]

                LoRaMacMibSetRequestConfirm( &mibReq );
 800f880:	f107 0308 	add.w	r3, r7, #8
 800f884:	4618      	mov	r0, r3
 800f886:	f004 fafd 	bl	8013e84 <LoRaMacMibSetRequestConfirm>
                break;
 800f88a:	e21f      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
            {
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	689a      	ldr	r2, [r3, #8]
 800f890:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f894:	1c59      	adds	r1, r3, #1
 800f896:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f89a:	4413      	add	r3, r2
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	bf14      	ite	ne
 800f8a2:	2301      	movne	r3, #1
 800f8a4:	2300      	moveq	r3, #0
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f005 f965 	bl	8014b78 <LoRaMacTestSetDutyCycleOn>
                break;
 800f8ae:	e20d      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
 800f8b0:	20000680 	.word	0x20000680
 800f8b4:	200000d8 	.word	0x200000d8
            }
        case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
            {
                /* Periodicity in milli-seconds */
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800f8b8:	4ba5      	ldr	r3, [pc, #660]	; (800fb50 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800f8ba:	f107 0408 	add.w	r4, r7, #8
 800f8be:	461d      	mov	r5, r3
 800f8c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f8cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	689a      	ldr	r2, [r3, #8]
 800f8d4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f8d8:	1c59      	adds	r1, r3, #1
 800f8da:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f8de:	4413      	add	r3, r2
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800f8e6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800f8ea:	2b0a      	cmp	r3, #10
 800f8ec:	f200 81e7 	bhi.w	800fcbe <LmhpComplianceOnMcpsIndication+0x75e>
                {
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800f8f0:	4b98      	ldr	r3, [pc, #608]	; (800fb54 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f000 81e1 	beq.w	800fcbe <LmhpComplianceOnMcpsIndication+0x75e>
                    {
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800f8fc:	4b95      	ldr	r3, [pc, #596]	; (800fb54 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	3390      	adds	r3, #144	; 0x90
 800f90a:	443b      	add	r3, r7
 800f90c:	f853 3c88 	ldr.w	r3, [r3, #-136]
 800f910:	4618      	mov	r0, r3
 800f912:	4790      	blx	r2
                    }
                }
                break;
 800f914:	e1d3      	b.n	800fcbe <LmhpComplianceOnMcpsIndication+0x75e>
            }
        case COMPLIANCE_TX_FRAMES_CTRL_REQ:
            {
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	689a      	ldr	r2, [r3, #8]
 800f91a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f91e:	1c59      	adds	r1, r3, #1
 800f920:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f924:	4413      	add	r3, r2
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800f92c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f930:	2b01      	cmp	r3, #1
 800f932:	d004      	beq.n	800f93e <LmhpComplianceOnMcpsIndication+0x3de>
 800f934:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f938:	2b02      	cmp	r3, #2
 800f93a:	f040 81c2 	bne.w	800fcc2 <LmhpComplianceOnMcpsIndication+0x762>
                {
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f93e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800f942:	2b01      	cmp	r3, #1
 800f944:	bf14      	ite	ne
 800f946:	2301      	movne	r3, #1
 800f948:	2300      	moveq	r3, #0
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	461a      	mov	r2, r3
 800f94e:	4b82      	ldr	r3, [pc, #520]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f950:	721a      	strb	r2, [r3, #8]

                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800f952:	4b80      	ldr	r3, [pc, #512]	; (800fb54 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	689b      	ldr	r3, [r3, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f000 81b2 	beq.w	800fcc2 <LmhpComplianceOnMcpsIndication+0x762>
                    {
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800f95e:	4b7d      	ldr	r3, [pc, #500]	; (800fb54 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	4a7c      	ldr	r2, [pc, #496]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f966:	7a12      	ldrb	r2, [r2, #8]
 800f968:	4610      	mov	r0, r2
 800f96a:	4798      	blx	r3
                    }
                }
                break;
 800f96c:	e1a9      	b.n	800fcc2 <LmhpComplianceOnMcpsIndication+0x762>
            }
        case COMPLIANCE_ECHO_PAYLOAD_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800f96e:	4b7a      	ldr	r3, [pc, #488]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f970:	68da      	ldr	r2, [r3, #12]
 800f972:	4b79      	ldr	r3, [pc, #484]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f974:	7a9b      	ldrb	r3, [r3, #10]
 800f976:	1c59      	adds	r1, r3, #1
 800f978:	b2c8      	uxtb	r0, r1
 800f97a:	4977      	ldr	r1, [pc, #476]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f97c:	7288      	strb	r0, [r1, #10]
 800f97e:	4413      	add	r3, r2
 800f980:	2208      	movs	r2, #8
 800f982:	701a      	strb	r2, [r3, #0]

                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f984:	2301      	movs	r3, #1
 800f986:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800f98a:	e019      	b.n	800f9c0 <LmhpComplianceOnMcpsIndication+0x460>
                     i++ )
                {
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	689a      	ldr	r2, [r3, #8]
 800f990:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800f994:	1c59      	adds	r1, r3, #1
 800f996:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800f99a:	4413      	add	r3, r2
 800f99c:	781a      	ldrb	r2, [r3, #0]
 800f99e:	4b6e      	ldr	r3, [pc, #440]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9a0:	68d9      	ldr	r1, [r3, #12]
 800f9a2:	4b6d      	ldr	r3, [pc, #436]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9a4:	7a9b      	ldrb	r3, [r3, #10]
 800f9a6:	1c58      	adds	r0, r3, #1
 800f9a8:	b2c4      	uxtb	r4, r0
 800f9aa:	486b      	ldr	r0, [pc, #428]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9ac:	7284      	strb	r4, [r0, #10]
 800f9ae:	440b      	add	r3, r1
 800f9b0:	3201      	adds	r2, #1
 800f9b2:	b2d2      	uxtb	r2, r2
 800f9b4:	701a      	strb	r2, [r3, #0]
                     i++ )
 800f9b6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800f9c0:	4b65      	ldr	r3, [pc, #404]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9c2:	7a5a      	ldrb	r2, [r3, #9]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	7b1b      	ldrb	r3, [r3, #12]
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	bf28      	it	cs
 800f9cc:	4613      	movcs	r3, r2
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d3d9      	bcc.n	800f98c <LmhpComplianceOnMcpsIndication+0x42c>
                }
                break;
 800f9d8:	e178      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_REQ:
            {
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800f9da:	4b5f      	ldr	r3, [pc, #380]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9dc:	68da      	ldr	r2, [r3, #12]
 800f9de:	4b5e      	ldr	r3, [pc, #376]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9e0:	7a9b      	ldrb	r3, [r3, #10]
 800f9e2:	1c59      	adds	r1, r3, #1
 800f9e4:	b2c8      	uxtb	r0, r1
 800f9e6:	495c      	ldr	r1, [pc, #368]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9e8:	7288      	strb	r0, [r1, #10]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	2209      	movs	r2, #9
 800f9ee:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800f9f0:	4b59      	ldr	r3, [pc, #356]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9f2:	8a18      	ldrh	r0, [r3, #16]
 800f9f4:	4b58      	ldr	r3, [pc, #352]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9f6:	68da      	ldr	r2, [r3, #12]
 800f9f8:	4b57      	ldr	r3, [pc, #348]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800f9fa:	7a9b      	ldrb	r3, [r3, #10]
 800f9fc:	1c59      	adds	r1, r3, #1
 800f9fe:	b2cc      	uxtb	r4, r1
 800fa00:	4955      	ldr	r1, [pc, #340]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa02:	728c      	strb	r4, [r1, #10]
 800fa04:	4413      	add	r3, r2
 800fa06:	b2c2      	uxtb	r2, r0
 800fa08:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800fa0a:	4b53      	ldr	r3, [pc, #332]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa0c:	8a1b      	ldrh	r3, [r3, #16]
 800fa0e:	0a1b      	lsrs	r3, r3, #8
 800fa10:	b298      	uxth	r0, r3
 800fa12:	4b51      	ldr	r3, [pc, #324]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa14:	68da      	ldr	r2, [r3, #12]
 800fa16:	4b50      	ldr	r3, [pc, #320]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa18:	7a9b      	ldrb	r3, [r3, #10]
 800fa1a:	1c59      	adds	r1, r3, #1
 800fa1c:	b2cc      	uxtb	r4, r1
 800fa1e:	494e      	ldr	r1, [pc, #312]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa20:	728c      	strb	r4, [r1, #10]
 800fa22:	4413      	add	r3, r2
 800fa24:	b2c2      	uxtb	r2, r0
 800fa26:	701a      	strb	r2, [r3, #0]
                break;
 800fa28:	e150      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_RX_APP_CNT_RESET_REQ:
            {
                ComplianceTestState.RxAppCnt = 0;
 800fa2a:	4b4b      	ldr	r3, [pc, #300]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	821a      	strh	r2, [r3, #16]
                break;
 800fa30:	e14c      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_LINK_CHECK_REQ:
            {
                MlmeReq_t mlmeReq;
                mlmeReq.Type = MLME_LINK_CHECK;
 800fa32:	2305      	movs	r3, #5
 800fa34:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

                LoRaMacMlmeRequest( &mlmeReq );
 800fa38:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f004 fdcb 	bl	80145d8 <LoRaMacMlmeRequest>
                break;
 800fa42:	e143      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_DEVICE_TIME_REQ:
            {
                CompliancePackage.OnDeviceTimeRequest( );
 800fa44:	4b45      	ldr	r3, [pc, #276]	; (800fb5c <LmhpComplianceOnMcpsIndication+0x5fc>)
 800fa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa48:	4798      	blx	r3
                break;
 800fa4a:	e13f      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        case COMPLIANCE_PING_SLOT_INFO_REQ:
            {
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	689a      	ldr	r2, [r3, #8]
 800fa50:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fa54:	1c59      	adds	r1, r3, #1
 800fa56:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fa5a:	4413      	add	r3, r2
 800fa5c:	781a      	ldrb	r2, [r3, #0]
 800fa5e:	4b3e      	ldr	r3, [pc, #248]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa60:	755a      	strb	r2, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800fa62:	4b3c      	ldr	r3, [pc, #240]	; (800fb54 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f000 812c 	beq.w	800fcc6 <LmhpComplianceOnMcpsIndication+0x766>
                {
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800fa6e:	4b39      	ldr	r3, [pc, #228]	; (800fb54 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	68db      	ldr	r3, [r3, #12]
 800fa74:	4a38      	ldr	r2, [pc, #224]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fa76:	7d52      	ldrb	r2, [r2, #21]
 800fa78:	4610      	mov	r0, r2
 800fa7a:	4798      	blx	r3
                }
                break;
 800fa7c:	e123      	b.n	800fcc6 <LmhpComplianceOnMcpsIndication+0x766>
            }
#endif /* CLASS_B not available */
        case COMPLIANCE_TX_CW_REQ:
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 7 )
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	7b1b      	ldrb	r3, [r3, #12]
 800fa82:	2b07      	cmp	r3, #7
 800fa84:	f040 8121 	bne.w	800fcca <LmhpComplianceOnMcpsIndication+0x76a>
                {
                    mlmeReq.Type = MLME_TXCW;
 800fa88:	2306      	movs	r3, #6
 800fa8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
                    mlmeReq.Req.TxCw.Timeout =
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	689a      	ldr	r2, [r3, #8]
 800fa92:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fa96:	4413      	add	r3, r2
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	b21a      	sxth	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6899      	ldr	r1, [r3, #8]
 800faa0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800faa4:	3301      	adds	r3, #1
 800faa6:	440b      	add	r3, r1
 800faa8:	781b      	ldrb	r3, [r3, #0]
 800faaa:	021b      	lsls	r3, r3, #8
 800faac:	b21b      	sxth	r3, r3
 800faae:	4313      	orrs	r3, r2
 800fab0:	b21b      	sxth	r3, r3
 800fab2:	b29b      	uxth	r3, r3
                    mlmeReq.Req.TxCw.Timeout =
 800fab4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                    cmdIndex += 2;
 800fab8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fabc:	3302      	adds	r3, #2
 800fabe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Frequency =
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	689a      	ldr	r2, [r3, #8]
 800fac6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800faca:	4413      	add	r3, r2
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	4619      	mov	r1, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	689a      	ldr	r2, [r3, #8]
 800fad4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fad8:	3301      	adds	r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	021b      	lsls	r3, r3, #8
 800fae0:	ea41 0203 	orr.w	r2, r1, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6899      	ldr	r1, [r3, #8]
 800fae8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800faec:	3302      	adds	r3, #2
 800faee:	440b      	add	r3, r1
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	041b      	lsls	r3, r3, #16
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800faf4:	4313      	orrs	r3, r2
 800faf6:	461a      	mov	r2, r3
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800faf8:	2364      	movs	r3, #100	; 0x64
 800fafa:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800fafe:	647b      	str	r3, [r7, #68]	; 0x44
                        100;
                    cmdIndex += 3;
 800fb00:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fb04:	3303      	adds	r3, #3
 800fb06:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	689a      	ldr	r2, [r3, #8]
 800fb0e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fb12:	1c59      	adds	r1, r3, #1
 800fb14:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800fb18:	4413      	add	r3, r2
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	b25b      	sxtb	r3, r3
 800fb1e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800fb22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fb26:	4618      	mov	r0, r3
 800fb28:	f004 fd56 	bl	80145d8 <LoRaMacMlmeRequest>
                }
                break;
 800fb2c:	e0cd      	b.n	800fcca <LmhpComplianceOnMcpsIndication+0x76a>
            }
        case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
            {
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800fb2e:	233b      	movs	r3, #59	; 0x3b
 800fb30:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                mibReq.Param.IsCertPortOn = false;
 800fb34:	2300      	movs	r3, #0
 800fb36:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacMibSetRequestConfirm( &mibReq );
 800fb3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f004 f9a0 	bl	8013e84 <LoRaMacMibSetRequestConfirm>

                ComplianceTestState.IsResetCmdPending = true;
 800fb44:	4b04      	ldr	r3, [pc, #16]	; (800fb58 <LmhpComplianceOnMcpsIndication+0x5f8>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800fb4c:	e0be      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
 800fb4e:	bf00      	nop
 800fb50:	0801e728 	.word	0x0801e728
 800fb54:	200006b8 	.word	0x200006b8
 800fb58:	20000680 	.word	0x20000680
 800fb5c:	200000d8 	.word	0x200000d8
            {
                Version_t           lrwanVersion;
                Version_t           lrwanRpVersion;
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_LORAWAN_VERSION;
 800fb60:	232a      	movs	r3, #42	; 0x2a
 800fb62:	723b      	strb	r3, [r7, #8]

                LoRaMacMibGetRequestConfirm( &mibReq );
 800fb64:	f107 0308 	add.w	r3, r7, #8
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f003 ffb3 	bl	8013ad4 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	63bb      	str	r3, [r7, #56]	; 0x38
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	637b      	str	r3, [r7, #52]	; 0x34

                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800fb76:	4b65      	ldr	r3, [pc, #404]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb78:	68da      	ldr	r2, [r3, #12]
 800fb7a:	4b64      	ldr	r3, [pc, #400]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb7c:	7a9b      	ldrb	r3, [r3, #10]
 800fb7e:	1c59      	adds	r1, r3, #1
 800fb80:	b2c8      	uxtb	r0, r1
 800fb82:	4962      	ldr	r1, [pc, #392]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb84:	7288      	strb	r0, [r1, #10]
 800fb86:	4413      	add	r3, r2
 800fb88:	227f      	movs	r2, #127	; 0x7f
 800fb8a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800fb8c:	4b60      	ldr	r3, [pc, #384]	; (800fd10 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	4b5e      	ldr	r3, [pc, #376]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb92:	68d9      	ldr	r1, [r3, #12]
 800fb94:	4b5d      	ldr	r3, [pc, #372]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb96:	7a9b      	ldrb	r3, [r3, #10]
 800fb98:	1c58      	adds	r0, r3, #1
 800fb9a:	b2c4      	uxtb	r4, r0
 800fb9c:	485b      	ldr	r0, [pc, #364]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fb9e:	7284      	strb	r4, [r0, #10]
 800fba0:	440b      	add	r3, r1
 800fba2:	78d2      	ldrb	r2, [r2, #3]
 800fba4:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800fba6:	4b5a      	ldr	r3, [pc, #360]	; (800fd10 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	4b58      	ldr	r3, [pc, #352]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbac:	68d9      	ldr	r1, [r3, #12]
 800fbae:	4b57      	ldr	r3, [pc, #348]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbb0:	7a9b      	ldrb	r3, [r3, #10]
 800fbb2:	1c58      	adds	r0, r3, #1
 800fbb4:	b2c4      	uxtb	r4, r0
 800fbb6:	4855      	ldr	r0, [pc, #340]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbb8:	7284      	strb	r4, [r0, #10]
 800fbba:	440b      	add	r3, r1
 800fbbc:	7892      	ldrb	r2, [r2, #2]
 800fbbe:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800fbc0:	4b53      	ldr	r3, [pc, #332]	; (800fd10 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	4b51      	ldr	r3, [pc, #324]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbc6:	68d9      	ldr	r1, [r3, #12]
 800fbc8:	4b50      	ldr	r3, [pc, #320]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbca:	7a9b      	ldrb	r3, [r3, #10]
 800fbcc:	1c58      	adds	r0, r3, #1
 800fbce:	b2c4      	uxtb	r4, r0
 800fbd0:	484e      	ldr	r0, [pc, #312]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbd2:	7284      	strb	r4, [r0, #10]
 800fbd4:	440b      	add	r3, r1
 800fbd6:	7852      	ldrb	r2, [r2, #1]
 800fbd8:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800fbda:	4b4d      	ldr	r3, [pc, #308]	; (800fd10 <LmhpComplianceOnMcpsIndication+0x7b0>)
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	4b4b      	ldr	r3, [pc, #300]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbe0:	68d9      	ldr	r1, [r3, #12]
 800fbe2:	4b4a      	ldr	r3, [pc, #296]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbe4:	7a9b      	ldrb	r3, [r3, #10]
 800fbe6:	1c58      	adds	r0, r3, #1
 800fbe8:	b2c4      	uxtb	r4, r0
 800fbea:	4848      	ldr	r0, [pc, #288]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbec:	7284      	strb	r4, [r0, #10]
 800fbee:	440b      	add	r3, r1
 800fbf0:	7812      	ldrb	r2, [r2, #0]
 800fbf2:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800fbf4:	4b45      	ldr	r3, [pc, #276]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbf6:	68da      	ldr	r2, [r3, #12]
 800fbf8:	4b44      	ldr	r3, [pc, #272]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fbfa:	7a9b      	ldrb	r3, [r3, #10]
 800fbfc:	1c59      	adds	r1, r3, #1
 800fbfe:	b2c8      	uxtb	r0, r1
 800fc00:	4942      	ldr	r1, [pc, #264]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc02:	7288      	strb	r0, [r1, #10]
 800fc04:	4413      	add	r3, r2
 800fc06:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800fc0a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800fc0c:	4b3f      	ldr	r3, [pc, #252]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc0e:	68da      	ldr	r2, [r3, #12]
 800fc10:	4b3e      	ldr	r3, [pc, #248]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc12:	7a9b      	ldrb	r3, [r3, #10]
 800fc14:	1c59      	adds	r1, r3, #1
 800fc16:	b2c8      	uxtb	r0, r1
 800fc18:	493c      	ldr	r1, [pc, #240]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc1a:	7288      	strb	r0, [r1, #10]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800fc22:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800fc24:	4b39      	ldr	r3, [pc, #228]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc26:	68da      	ldr	r2, [r3, #12]
 800fc28:	4b38      	ldr	r3, [pc, #224]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc2a:	7a9b      	ldrb	r3, [r3, #10]
 800fc2c:	1c59      	adds	r1, r3, #1
 800fc2e:	b2c8      	uxtb	r0, r1
 800fc30:	4936      	ldr	r1, [pc, #216]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc32:	7288      	strb	r0, [r1, #10]
 800fc34:	4413      	add	r3, r2
 800fc36:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800fc3a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800fc3c:	4b33      	ldr	r3, [pc, #204]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc3e:	68da      	ldr	r2, [r3, #12]
 800fc40:	4b32      	ldr	r3, [pc, #200]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc42:	7a9b      	ldrb	r3, [r3, #10]
 800fc44:	1c59      	adds	r1, r3, #1
 800fc46:	b2c8      	uxtb	r0, r1
 800fc48:	4930      	ldr	r1, [pc, #192]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc4a:	7288      	strb	r0, [r1, #10]
 800fc4c:	4413      	add	r3, r2
 800fc4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fc52:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800fc54:	4b2d      	ldr	r3, [pc, #180]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc56:	68da      	ldr	r2, [r3, #12]
 800fc58:	4b2c      	ldr	r3, [pc, #176]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc5a:	7a9b      	ldrb	r3, [r3, #10]
 800fc5c:	1c59      	adds	r1, r3, #1
 800fc5e:	b2c8      	uxtb	r0, r1
 800fc60:	492a      	ldr	r1, [pc, #168]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc62:	7288      	strb	r0, [r1, #10]
 800fc64:	4413      	add	r3, r2
 800fc66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fc6a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800fc6c:	4b27      	ldr	r3, [pc, #156]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc6e:	68da      	ldr	r2, [r3, #12]
 800fc70:	4b26      	ldr	r3, [pc, #152]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc72:	7a9b      	ldrb	r3, [r3, #10]
 800fc74:	1c59      	adds	r1, r3, #1
 800fc76:	b2c8      	uxtb	r0, r1
 800fc78:	4924      	ldr	r1, [pc, #144]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc7a:	7288      	strb	r0, [r1, #10]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fc82:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800fc84:	4b21      	ldr	r3, [pc, #132]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc86:	68da      	ldr	r2, [r3, #12]
 800fc88:	4b20      	ldr	r3, [pc, #128]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc8a:	7a9b      	ldrb	r3, [r3, #10]
 800fc8c:	1c59      	adds	r1, r3, #1
 800fc8e:	b2c8      	uxtb	r0, r1
 800fc90:	491e      	ldr	r1, [pc, #120]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc92:	7288      	strb	r0, [r1, #10]
 800fc94:	4413      	add	r3, r2
 800fc96:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800fc9a:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800fc9c:	4b1b      	ldr	r3, [pc, #108]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fc9e:	68da      	ldr	r2, [r3, #12]
 800fca0:	4b1a      	ldr	r3, [pc, #104]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fca2:	7a9b      	ldrb	r3, [r3, #10]
 800fca4:	1c59      	adds	r1, r3, #1
 800fca6:	b2c8      	uxtb	r0, r1
 800fca8:	4918      	ldr	r1, [pc, #96]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fcaa:	7288      	strb	r0, [r1, #10]
 800fcac:	4413      	add	r3, r2
 800fcae:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800fcb2:	701a      	strb	r2, [r3, #0]
                break;
 800fcb4:	e00a      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
            }
        default:
            {
                break;
 800fcb6:	bf00      	nop
 800fcb8:	e008      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fcba:	bf00      	nop
 800fcbc:	e006      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fcbe:	bf00      	nop
 800fcc0:	e004      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fcc2:	bf00      	nop
 800fcc4:	e002      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fcc6:	bf00      	nop
 800fcc8:	e000      	b.n	800fccc <LmhpComplianceOnMcpsIndication+0x76c>
                break;
 800fcca:	bf00      	nop
            }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800fccc:	4b0f      	ldr	r3, [pc, #60]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fcce:	7a9b      	ldrb	r3, [r3, #10]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d00c      	beq.n	800fcee <LmhpComplianceOnMcpsIndication+0x78e>
    {
        if( ProcessTimer.IsRunning == 0U)
 800fcd4:	4b0f      	ldr	r3, [pc, #60]	; (800fd14 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800fcd6:	7a5b      	ldrb	r3, [r3, #9]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d114      	bne.n	800fd06 <LmhpComplianceOnMcpsIndication+0x7a6>
        {
            TimerSetValue( &ProcessTimer, 1000 );
 800fcdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fce0:	480c      	ldr	r0, [pc, #48]	; (800fd14 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800fce2:	f00d fca9 	bl	801d638 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800fce6:	480b      	ldr	r0, [pc, #44]	; (800fd14 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800fce8:	f00d fbc8 	bl	801d47c <UTIL_TIMER_Start>
 800fcec:	e00b      	b.n	800fd06 <LmhpComplianceOnMcpsIndication+0x7a6>
        }
    }
    else
    {
        /* Abort any pending Tx as a new command has been processed */
        TimerStop( &ProcessTimer );
 800fcee:	4809      	ldr	r0, [pc, #36]	; (800fd14 <LmhpComplianceOnMcpsIndication+0x7b4>)
 800fcf0:	f00d fc32 	bl	801d558 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800fcf4:	4b05      	ldr	r3, [pc, #20]	; (800fd0c <LmhpComplianceOnMcpsIndication+0x7ac>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	705a      	strb	r2, [r3, #1]
 800fcfa:	e004      	b.n	800fd06 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800fcfc:	bf00      	nop
 800fcfe:	e002      	b.n	800fd06 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800fd00:	bf00      	nop
 800fd02:	e000      	b.n	800fd06 <LmhpComplianceOnMcpsIndication+0x7a6>
        return;
 800fd04:	bf00      	nop
    }
}
 800fd06:	3790      	adds	r7, #144	; 0x90
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bdb0      	pop	{r4, r5, r7, pc}
 800fd0c:	20000680 	.word	0x20000680
 800fd10:	200006b8 	.word	0x200006b8
 800fd14:	200006bc 	.word	0x200006bc

0800fd18 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
                }
                break;
            }
#endif /* CLASS_B not available */
        default:
            break;
 800fd20:	bf00      	nop
    }
}
 800fd22:	bf00      	nop
 800fd24:	370c      	adds	r7, #12
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bc80      	pop	{r7}
 800fd2a:	4770      	bx	lr

0800fd2c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t *mlmeIndication )
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800fd34:	4b05      	ldr	r3, [pc, #20]	; (800fd4c <LmhpComplianceOnMlmeIndication+0x20>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	f083 0301 	eor.w	r3, r3, #1
 800fd3c:	b2db      	uxtb	r3, r3
 800fd3e:	2b00      	cmp	r3, #0
    {
        return;
 800fd40:	bf00      	nop
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bc80      	pop	{r7}
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	20000680 	.word	0x20000680

0800fd50 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.DataBufferSize != 0 )
 800fd58:	4b08      	ldr	r3, [pc, #32]	; (800fd7c <OnProcessTimer+0x2c>)
 800fd5a:	7a9b      	ldrb	r3, [r3, #10]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d002      	beq.n	800fd66 <OnProcessTimer+0x16>
    {
        ComplianceTestState.IsTxPending = true;
 800fd60:	4b06      	ldr	r3, [pc, #24]	; (800fd7c <OnProcessTimer+0x2c>)
 800fd62:	2201      	movs	r2, #1
 800fd64:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800fd66:	4b06      	ldr	r3, [pc, #24]	; (800fd80 <OnProcessTimer+0x30>)
 800fd68:	695b      	ldr	r3, [r3, #20]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d002      	beq.n	800fd74 <OnProcessTimer+0x24>
    {
        CompliancePackage.OnPackageProcessEvent();
 800fd6e:	4b04      	ldr	r3, [pc, #16]	; (800fd80 <OnProcessTimer+0x30>)
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	4798      	blx	r3
    }
}
 800fd74:	bf00      	nop
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	20000680 	.word	0x20000680
 800fd80:	200000d8 	.word	0x200000d8

0800fd84 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	370c      	adds	r7, #12
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bc80      	pop	{r7}
 800fd96:	4770      	bx	lr

0800fd98 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	4603      	mov	r3, r0
 800fda0:	6039      	str	r1, [r7, #0]
 800fda2:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800fda4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	370c      	adds	r7, #12
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bc80      	pop	{r7}
 800fdb0:	4770      	bx	lr
	...

0800fdb4 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800fdb4:	b590      	push	{r4, r7, lr}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800fdba:	f00d fce7 	bl	801d78c <UTIL_TIMER_GetCurrentTime>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	4a0f      	ldr	r2, [pc, #60]	; (800fe00 <OnRadioTxDone+0x4c>)
 800fdc2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800fdc4:	4c0f      	ldr	r4, [pc, #60]	; (800fe04 <OnRadioTxDone+0x50>)
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f00c ff65 	bl	801cc98 <SysTimeGet>
 800fdce:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800fdd2:	463a      	mov	r2, r7
 800fdd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fdd8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800fddc:	4a0a      	ldr	r2, [pc, #40]	; (800fe08 <OnRadioTxDone+0x54>)
 800fdde:	7813      	ldrb	r3, [r2, #0]
 800fde0:	f043 0320 	orr.w	r3, r3, #32
 800fde4:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fde6:	f003 fa71 	bl	80132cc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800fdea:	4b08      	ldr	r3, [pc, #32]	; (800fe0c <OnRadioTxDone+0x58>)
 800fdec:	2201      	movs	r2, #1
 800fdee:	2100      	movs	r1, #0
 800fdf0:	2002      	movs	r0, #2
 800fdf2:	f00d fdbb 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 800fdf6:	bf00      	nop
 800fdf8:	370c      	adds	r7, #12
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd90      	pop	{r4, r7, pc}
 800fdfe:	bf00      	nop
 800fe00:	2000181c 	.word	0x2000181c
 800fe04:	200006d4 	.word	0x200006d4
 800fe08:	20001818 	.word	0x20001818
 800fe0c:	0801e754 	.word	0x0801e754

0800fe10 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	4608      	mov	r0, r1
 800fe1a:	4611      	mov	r1, r2
 800fe1c:	461a      	mov	r2, r3
 800fe1e:	4603      	mov	r3, r0
 800fe20:	817b      	strh	r3, [r7, #10]
 800fe22:	460b      	mov	r3, r1
 800fe24:	813b      	strh	r3, [r7, #8]
 800fe26:	4613      	mov	r3, r2
 800fe28:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800fe2a:	f00d fcaf 	bl	801d78c <UTIL_TIMER_GetCurrentTime>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	4a11      	ldr	r2, [pc, #68]	; (800fe78 <OnRadioRxDone+0x68>)
 800fe32:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800fe34:	4a10      	ldr	r2, [pc, #64]	; (800fe78 <OnRadioRxDone+0x68>)
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800fe3a:	4a0f      	ldr	r2, [pc, #60]	; (800fe78 <OnRadioRxDone+0x68>)
 800fe3c:	897b      	ldrh	r3, [r7, #10]
 800fe3e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800fe40:	4a0d      	ldr	r2, [pc, #52]	; (800fe78 <OnRadioRxDone+0x68>)
 800fe42:	893b      	ldrh	r3, [r7, #8]
 800fe44:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800fe46:	4a0c      	ldr	r2, [pc, #48]	; (800fe78 <OnRadioRxDone+0x68>)
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800fe4c:	4a0b      	ldr	r2, [pc, #44]	; (800fe7c <OnRadioRxDone+0x6c>)
 800fe4e:	7813      	ldrb	r3, [r2, #0]
 800fe50:	f043 0310 	orr.w	r3, r3, #16
 800fe54:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800fe56:	4a09      	ldr	r2, [pc, #36]	; (800fe7c <OnRadioRxDone+0x6c>)
 800fe58:	7813      	ldrb	r3, [r2, #0]
 800fe5a:	f043 0301 	orr.w	r3, r3, #1
 800fe5e:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800fe60:	f003 fa34 	bl	80132cc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800fe64:	4b06      	ldr	r3, [pc, #24]	; (800fe80 <OnRadioRxDone+0x70>)
 800fe66:	2201      	movs	r2, #1
 800fe68:	2100      	movs	r1, #0
 800fe6a:	2002      	movs	r0, #2
 800fe6c:	f00d fd7e 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 800fe70:	bf00      	nop
 800fe72:	3710      	adds	r7, #16
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	20001820 	.word	0x20001820
 800fe7c:	20001818 	.word	0x20001818
 800fe80:	0801e764 	.word	0x0801e764

0800fe84 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800fe88:	4a07      	ldr	r2, [pc, #28]	; (800fea8 <OnRadioTxTimeout+0x24>)
 800fe8a:	7813      	ldrb	r3, [r2, #0]
 800fe8c:	f043 0308 	orr.w	r3, r3, #8
 800fe90:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800fe92:	f003 fa1b 	bl	80132cc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800fe96:	4b05      	ldr	r3, [pc, #20]	; (800feac <OnRadioTxTimeout+0x28>)
 800fe98:	2201      	movs	r2, #1
 800fe9a:	2100      	movs	r1, #0
 800fe9c:	2002      	movs	r0, #2
 800fe9e:	f00d fd65 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 800fea2:	bf00      	nop
 800fea4:	bd80      	pop	{r7, pc}
 800fea6:	bf00      	nop
 800fea8:	20001818 	.word	0x20001818
 800feac:	0801e774 	.word	0x0801e774

0800feb0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800feb4:	4a04      	ldr	r2, [pc, #16]	; (800fec8 <OnRadioRxError+0x18>)
 800feb6:	7813      	ldrb	r3, [r2, #0]
 800feb8:	f043 0304 	orr.w	r3, r3, #4
 800febc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800febe:	f003 fa05 	bl	80132cc <OnMacProcessNotify>
}
 800fec2:	bf00      	nop
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	20001818 	.word	0x20001818

0800fecc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800fed0:	4a07      	ldr	r2, [pc, #28]	; (800fef0 <OnRadioRxTimeout+0x24>)
 800fed2:	7813      	ldrb	r3, [r2, #0]
 800fed4:	f043 0302 	orr.w	r3, r3, #2
 800fed8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800feda:	f003 f9f7 	bl	80132cc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800fede:	4b05      	ldr	r3, [pc, #20]	; (800fef4 <OnRadioRxTimeout+0x28>)
 800fee0:	2201      	movs	r2, #1
 800fee2:	2100      	movs	r1, #0
 800fee4:	2002      	movs	r0, #2
 800fee6:	f00d fd41 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 800feea:	bf00      	nop
 800feec:	bd80      	pop	{r7, pc}
 800feee:	bf00      	nop
 800fef0:	20001818 	.word	0x20001818
 800fef4:	0801e784 	.word	0x0801e784

0800fef8 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800fef8:	b480      	push	{r7}
 800fefa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800fefc:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <UpdateRxSlotIdleState+0x28>)
 800fefe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ff02:	2b02      	cmp	r3, #2
 800ff04:	d004      	beq.n	800ff10 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800ff06:	4b07      	ldr	r3, [pc, #28]	; (800ff24 <UpdateRxSlotIdleState+0x2c>)
 800ff08:	2206      	movs	r2, #6
 800ff0a:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800ff0e:	e003      	b.n	800ff18 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ff10:	4b04      	ldr	r3, [pc, #16]	; (800ff24 <UpdateRxSlotIdleState+0x2c>)
 800ff12:	2202      	movs	r2, #2
 800ff14:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
}
 800ff18:	bf00      	nop
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bc80      	pop	{r7}
 800ff1e:	4770      	bx	lr
 800ff20:	20000bf0 	.word	0x20000bf0
 800ff24:	200006d4 	.word	0x200006d4

0800ff28 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b092      	sub	sp, #72	; 0x48
 800ff2c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ff2e:	4b4a      	ldr	r3, [pc, #296]	; (8010058 <ProcessRadioTxDone+0x130>)
 800ff30:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ff34:	2b02      	cmp	r3, #2
 800ff36:	d002      	beq.n	800ff3e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800ff38:	4b48      	ldr	r3, [pc, #288]	; (801005c <ProcessRadioTxDone+0x134>)
 800ff3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff3c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff42:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800ff44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800ff46:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800ff48:	b672      	cpsid	i
}
 800ff4a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800ff4c:	f00d fc1e 	bl	801d78c <UTIL_TIMER_GetCurrentTime>
 800ff50:	4602      	mov	r2, r0
 800ff52:	4b43      	ldr	r3, [pc, #268]	; (8010060 <ProcessRadioTxDone+0x138>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800ff5a:	4b42      	ldr	r3, [pc, #264]	; (8010064 <ProcessRadioTxDone+0x13c>)
 800ff5c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	1ad3      	subs	r3, r2, r3
 800ff64:	4619      	mov	r1, r3
 800ff66:	4840      	ldr	r0, [pc, #256]	; (8010068 <ProcessRadioTxDone+0x140>)
 800ff68:	f00d fb66 	bl	801d638 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800ff6c:	483e      	ldr	r0, [pc, #248]	; (8010068 <ProcessRadioTxDone+0x140>)
 800ff6e:	f00d fa85 	bl	801d47c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800ff72:	4b3c      	ldr	r3, [pc, #240]	; (8010064 <ProcessRadioTxDone+0x13c>)
 800ff74:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800ff78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7a:	1ad3      	subs	r3, r2, r3
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	483b      	ldr	r0, [pc, #236]	; (801006c <ProcessRadioTxDone+0x144>)
 800ff80:	f00d fb5a 	bl	801d638 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800ff84:	4839      	ldr	r0, [pc, #228]	; (801006c <ProcessRadioTxDone+0x144>)
 800ff86:	f00d fa79 	bl	801d47c <UTIL_TIMER_Start>
 800ff8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff8c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff90:	f383 8810 	msr	PRIMASK, r3
}
 800ff94:	bf00      	nop
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800ff96:	4b33      	ldr	r3, [pc, #204]	; (8010064 <ProcessRadioTxDone+0x13c>)
 800ff98:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d01a      	beq.n	800ffd6 <ProcessRadioTxDone+0xae>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800ffa0:	2315      	movs	r3, #21
 800ffa2:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffa6:	4b2c      	ldr	r3, [pc, #176]	; (8010058 <ProcessRadioTxDone+0x130>)
 800ffa8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ffac:	f107 0220 	add.w	r2, r7, #32
 800ffb0:	4611      	mov	r1, r2
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	f006 febb 	bl	8016d2e <RegionGetPhyParam>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ffbc:	4b29      	ldr	r3, [pc, #164]	; (8010064 <ProcessRadioTxDone+0x13c>)
 800ffbe:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	4829      	ldr	r0, [pc, #164]	; (8010070 <ProcessRadioTxDone+0x148>)
 800ffca:	f00d fb35 	bl	801d638 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800ffce:	4828      	ldr	r0, [pc, #160]	; (8010070 <ProcessRadioTxDone+0x148>)
 800ffd0:	f00d fa54 	bl	801d47c <UTIL_TIMER_Start>
 800ffd4:	e003      	b.n	800ffde <ProcessRadioTxDone+0xb6>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ffd6:	4b23      	ldr	r3, [pc, #140]	; (8010064 <ProcessRadioTxDone+0x13c>)
 800ffd8:	2200      	movs	r2, #0
 800ffda:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800ffde:	4b20      	ldr	r3, [pc, #128]	; (8010060 <ProcessRadioTxDone+0x138>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4a1d      	ldr	r2, [pc, #116]	; (8010058 <ProcessRadioTxDone+0x130>)
 800ffe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ffe6:	4b1f      	ldr	r3, [pc, #124]	; (8010064 <ProcessRadioTxDone+0x13c>)
 800ffe8:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800ffec:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ffee:	4b1c      	ldr	r3, [pc, #112]	; (8010060 <ProcessRadioTxDone+0x138>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800fff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fff8:	4618      	mov	r0, r3
 800fffa:	f00c fe85 	bl	801cd08 <SysTimeGetMcuTime>
 800fffe:	4638      	mov	r0, r7
 8010000:	4b15      	ldr	r3, [pc, #84]	; (8010058 <ProcessRadioTxDone+0x130>)
 8010002:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8010006:	9200      	str	r2, [sp, #0]
 8010008:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801000c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010010:	ca06      	ldmia	r2, {r1, r2}
 8010012:	f00c fdda 	bl	801cbca <SysTimeSub>
 8010016:	f107 0314 	add.w	r3, r7, #20
 801001a:	463a      	mov	r2, r7
 801001c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010020:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010024:	4b0f      	ldr	r3, [pc, #60]	; (8010064 <ProcessRadioTxDone+0x13c>)
 8010026:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 801002a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 801002c:	2301      	movs	r3, #1
 801002e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010030:	4b09      	ldr	r3, [pc, #36]	; (8010058 <ProcessRadioTxDone+0x130>)
 8010032:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010036:	2b00      	cmp	r3, #0
 8010038:	d101      	bne.n	801003e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 801003a:	2300      	movs	r3, #0
 801003c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 801003e:	4b06      	ldr	r3, [pc, #24]	; (8010058 <ProcessRadioTxDone+0x130>)
 8010040:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010044:	f107 0208 	add.w	r2, r7, #8
 8010048:	4611      	mov	r1, r2
 801004a:	4618      	mov	r0, r3
 801004c:	f006 fe87 	bl	8016d5e <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 8010050:	bf00      	nop
 8010052:	3740      	adds	r7, #64	; 0x40
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	20000bf0 	.word	0x20000bf0
 801005c:	0801ee44 	.word	0x0801ee44
 8010060:	2000181c 	.word	0x2000181c
 8010064:	200006d4 	.word	0x200006d4
 8010068:	20000a54 	.word	0x20000a54
 801006c:	20000a6c 	.word	0x20000a6c
 8010070:	20000ad4 	.word	0x20000ad4

08010074 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010074:	b580      	push	{r7, lr}
 8010076:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010078:	4b10      	ldr	r3, [pc, #64]	; (80100bc <PrepareRxDoneAbort+0x48>)
 801007a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801007e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010082:	4a0e      	ldr	r2, [pc, #56]	; (80100bc <PrepareRxDoneAbort+0x48>)
 8010084:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010088:	4b0c      	ldr	r3, [pc, #48]	; (80100bc <PrepareRxDoneAbort+0x48>)
 801008a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 801008e:	2b00      	cmp	r3, #0
 8010090:	d002      	beq.n	8010098 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 8010092:	2000      	movs	r0, #0
 8010094:	f001 f9fa 	bl	801148c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010098:	4a08      	ldr	r2, [pc, #32]	; (80100bc <PrepareRxDoneAbort+0x48>)
 801009a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801009e:	f043 0302 	orr.w	r3, r3, #2
 80100a2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 80100a6:	4a05      	ldr	r2, [pc, #20]	; (80100bc <PrepareRxDoneAbort+0x48>)
 80100a8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80100ac:	f043 0310 	orr.w	r3, r3, #16
 80100b0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

    UpdateRxSlotIdleState( );
 80100b4:	f7ff ff20 	bl	800fef8 <UpdateRxSlotIdleState>
}
 80100b8:	bf00      	nop
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	200006d4 	.word	0x200006d4

080100c0 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 80100c0:	b590      	push	{r4, r7, lr}
 80100c2:	b0ab      	sub	sp, #172	; 0xac
 80100c4:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80100c6:	2312      	movs	r3, #18
 80100c8:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 80100cc:	4b81      	ldr	r3, [pc, #516]	; (80102d4 <ProcessRadioRxDone+0x214>)
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint16_t size = RxDoneParams.Size;
 80100d4:	4b7f      	ldr	r3, [pc, #508]	; (80102d4 <ProcessRadioRxDone+0x214>)
 80100d6:	891b      	ldrh	r3, [r3, #8]
 80100d8:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
    int16_t rssi = RxDoneParams.Rssi;
 80100dc:	4b7d      	ldr	r3, [pc, #500]	; (80102d4 <ProcessRadioRxDone+0x214>)
 80100de:	895b      	ldrh	r3, [r3, #10]
 80100e0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    int8_t snr = RxDoneParams.Snr;
 80100e4:	4b7b      	ldr	r3, [pc, #492]	; (80102d4 <ProcessRadioRxDone+0x214>)
 80100e6:	7b1b      	ldrb	r3, [r3, #12]
 80100e8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

    uint8_t pktHeaderLen = 0;
 80100ec:	2300      	movs	r3, #0
 80100ee:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

    uint32_t downLinkCounter = 0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80100f6:	4b78      	ldr	r3, [pc, #480]	; (80102d8 <ProcessRadioRxDone+0x218>)
 80100f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80100fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    uint8_t multicast = 0;
 8010100:	2300      	movs	r3, #0
 8010102:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010106:	2301      	movs	r3, #1
 8010108:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 801010c:	2301      	movs	r3, #1
 801010e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8010112:	4a72      	ldr	r2, [pc, #456]	; (80102dc <ProcessRadioRxDone+0x21c>)
 8010114:	7813      	ldrb	r3, [r2, #0]
 8010116:	f36f 0300 	bfc	r3, #0, #1
 801011a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 801011c:	4b70      	ldr	r3, [pc, #448]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801011e:	2200      	movs	r2, #0
 8010120:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8010124:	4a6e      	ldr	r2, [pc, #440]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010126:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 801012a:	f8a2 348c 	strh.w	r3, [r2, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 801012e:	4a6c      	ldr	r2, [pc, #432]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010130:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010134:	f882 348e 	strb.w	r3, [r2, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010138:	4b69      	ldr	r3, [pc, #420]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801013a:	f893 2490 	ldrb.w	r2, [r3, #1168]	; 0x490
 801013e:	4b68      	ldr	r3, [pc, #416]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010140:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8010144:	4b66      	ldr	r3, [pc, #408]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010146:	2200      	movs	r2, #0
 8010148:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 801014c:	4b64      	ldr	r3, [pc, #400]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801014e:	2200      	movs	r2, #0
 8010150:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010154:	4b62      	ldr	r3, [pc, #392]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010156:	2200      	movs	r2, #0
 8010158:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 801015c:	4b60      	ldr	r3, [pc, #384]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801015e:	2200      	movs	r2, #0
 8010160:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8010164:	4b5e      	ldr	r3, [pc, #376]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010166:	2200      	movs	r2, #0
 8010168:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 801016c:	4b5c      	ldr	r3, [pc, #368]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801016e:	2200      	movs	r2, #0
 8010170:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8010174:	4b5a      	ldr	r3, [pc, #360]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010176:	2200      	movs	r2, #0
 8010178:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 801017c:	4b58      	ldr	r3, [pc, #352]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801017e:	2200      	movs	r2, #0
 8010180:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010184:	4b56      	ldr	r3, [pc, #344]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010186:	2200      	movs	r2, #0
 8010188:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 801018c:	4b54      	ldr	r3, [pc, #336]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801018e:	2200      	movs	r2, #0
 8010190:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010194:	4b52      	ldr	r3, [pc, #328]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010196:	2200      	movs	r2, #0
 8010198:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 801019c:	4b50      	ldr	r3, [pc, #320]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801019e:	2200      	movs	r2, #0
 80101a0:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 80101a4:	4b4f      	ldr	r3, [pc, #316]	; (80102e4 <ProcessRadioRxDone+0x224>)
 80101a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a8:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 80101aa:	4b4d      	ldr	r3, [pc, #308]	; (80102e0 <ProcessRadioRxDone+0x220>)
 80101ac:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d102      	bne.n	80101ba <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 80101b4:	484c      	ldr	r0, [pc, #304]	; (80102e8 <ProcessRadioRxDone+0x228>)
 80101b6:	f00d f9cf 	bl	801d558 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80101ba:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80101be:	4619      	mov	r1, r3
 80101c0:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80101c4:	f004 fe28 	bl	8014e18 <LoRaMacClassBRxBeacon>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00b      	beq.n	80101e6 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80101ce:	4a44      	ldr	r2, [pc, #272]	; (80102e0 <ProcessRadioRxDone+0x220>)
 80101d0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80101d4:	f8a2 347e 	strh.w	r3, [r2, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80101d8:	4a41      	ldr	r2, [pc, #260]	; (80102e0 <ProcessRadioRxDone+0x220>)
 80101da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80101de:	f882 3480 	strb.w	r3, [r2, #1152]	; 0x480
        return;
 80101e2:	f000 bc75 	b.w	8010ad0 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80101e6:	4b3c      	ldr	r3, [pc, #240]	; (80102d8 <ProcessRadioRxDone+0x218>)
 80101e8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d11e      	bne.n	801022e <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80101f0:	f004 fe25 	bl	8014e3e <LoRaMacClassBIsPingExpected>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00a      	beq.n	8010210 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80101fa:	2000      	movs	r0, #0
 80101fc:	f004 fdd6 	bl	8014dac <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010200:	2000      	movs	r0, #0
 8010202:	f004 fdf7 	bl	8014df4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8010206:	4b36      	ldr	r3, [pc, #216]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010208:	2204      	movs	r2, #4
 801020a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 801020e:	e00e      	b.n	801022e <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010210:	f004 fe1c 	bl	8014e4c <LoRaMacClassBIsMulticastExpected>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d009      	beq.n	801022e <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801021a:	2000      	movs	r0, #0
 801021c:	f004 fdd0 	bl	8014dc0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010220:	2000      	movs	r0, #0
 8010222:	f004 fdf0 	bl	8014e06 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8010226:	4b2e      	ldr	r3, [pc, #184]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010228:	2205      	movs	r2, #5
 801022a:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 801022e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010232:	2b00      	cmp	r3, #0
 8010234:	d107      	bne.n	8010246 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010236:	4b2a      	ldr	r3, [pc, #168]	; (80102e0 <ProcessRadioRxDone+0x220>)
 8010238:	2201      	movs	r2, #1
 801023a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 801023e:	f7ff ff19 	bl	8010074 <PrepareRxDoneAbort>
        return;
 8010242:	f000 bc45 	b.w	8010ad0 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8010246:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 801024a:	1c5a      	adds	r2, r3, #1
 801024c:	f887 208e 	strb.w	r2, [r7, #142]	; 0x8e
 8010250:	461a      	mov	r2, r3
 8010252:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010256:	4413      	add	r3, r2
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 801025e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010262:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8010266:	b2db      	uxtb	r3, r3
 8010268:	3b01      	subs	r3, #1
 801026a:	2b06      	cmp	r3, #6
 801026c:	f200 8403 	bhi.w	8010a76 <ProcessRadioRxDone+0x9b6>
 8010270:	a201      	add	r2, pc, #4	; (adr r2, 8010278 <ProcessRadioRxDone+0x1b8>)
 8010272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010276:	bf00      	nop
 8010278:	08010295 	.word	0x08010295
 801027c:	08010a77 	.word	0x08010a77
 8010280:	08010493 	.word	0x08010493
 8010284:	08010a77 	.word	0x08010a77
 8010288:	0801048b 	.word	0x0801048b
 801028c:	08010a77 	.word	0x08010a77
 8010290:	08010a1b 	.word	0x08010a1b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8010294:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010298:	2b10      	cmp	r3, #16
 801029a:	d807      	bhi.n	80102ac <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801029c:	4b10      	ldr	r3, [pc, #64]	; (80102e0 <ProcessRadioRxDone+0x220>)
 801029e:	2201      	movs	r2, #1
 80102a0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80102a4:	f7ff fee6 	bl	8010074 <PrepareRxDoneAbort>
                return;
 80102a8:	f000 bc12 	b.w	8010ad0 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 80102ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102b0:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 80102b2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80102b6:	b2db      	uxtb	r3, r3
 80102b8:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80102ba:	4b07      	ldr	r3, [pc, #28]	; (80102d8 <ProcessRadioRxDone+0x218>)
 80102bc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d013      	beq.n	80102ec <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80102c4:	4b06      	ldr	r3, [pc, #24]	; (80102e0 <ProcessRadioRxDone+0x220>)
 80102c6:	2201      	movs	r2, #1
 80102c8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80102cc:	f7ff fed2 	bl	8010074 <PrepareRxDoneAbort>
                return;
 80102d0:	e3fe      	b.n	8010ad0 <ProcessRadioRxDone+0xa10>
 80102d2:	bf00      	nop
 80102d4:	20001820 	.word	0x20001820
 80102d8:	20000bf0 	.word	0x20000bf0
 80102dc:	20001818 	.word	0x20001818
 80102e0:	200006d4 	.word	0x200006d4
 80102e4:	0801ee44 	.word	0x0801ee44
 80102e8:	20000a6c 	.word	0x20000a6c
            }

            SecureElementGetJoinEui( joinEui );
 80102ec:	f107 0308 	add.w	r3, r7, #8
 80102f0:	4618      	mov	r0, r3
 80102f2:	f7fd ff7d 	bl	800e1f0 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 80102f6:	f107 0218 	add.w	r2, r7, #24
 80102fa:	f107 0308 	add.w	r3, r7, #8
 80102fe:	4619      	mov	r1, r3
 8010300:	20ff      	movs	r0, #255	; 0xff
 8010302:	f005 ff95 	bl	8016230 <LoRaMacCryptoHandleJoinAccept>
 8010306:	4603      	mov	r3, r0
 8010308:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 801030c:	2300      	movs	r3, #0
 801030e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8010312:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010316:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801031a:	b2db      	uxtb	r3, r3
 801031c:	b25b      	sxtb	r3, r3
 801031e:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010320:	4bb1      	ldr	r3, [pc, #708]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010322:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010326:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8010328:	4baf      	ldr	r3, [pc, #700]	; (80105e8 <ProcessRadioRxDone+0x528>)
 801032a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801032e:	1d39      	adds	r1, r7, #4
 8010330:	2207      	movs	r2, #7
 8010332:	4618      	mov	r0, r3
 8010334:	f006 fd36 	bl	8016da4 <RegionVerify>
 8010338:	4603      	mov	r3, r0
 801033a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 801033e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010342:	2b00      	cmp	r3, #0
 8010344:	f040 8095 	bne.w	8010472 <ProcessRadioRxDone+0x3b2>
 8010348:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 801034c:	2b00      	cmp	r3, #0
 801034e:	f000 8090 	beq.w	8010472 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8010352:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010356:	461a      	mov	r2, r3
 8010358:	4ba3      	ldr	r3, [pc, #652]	; (80105e8 <ProcessRadioRxDone+0x528>)
 801035a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 801035e:	4ba2      	ldr	r3, [pc, #648]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010360:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010364:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010368:	021b      	lsls	r3, r3, #8
 801036a:	4313      	orrs	r3, r2
 801036c:	4a9e      	ldr	r2, [pc, #632]	; (80105e8 <ProcessRadioRxDone+0x528>)
 801036e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8010372:	4b9d      	ldr	r3, [pc, #628]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010374:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8010378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801037c:	041b      	lsls	r3, r3, #16
 801037e:	4313      	orrs	r3, r2
 8010380:	4a99      	ldr	r2, [pc, #612]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010382:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	4a97      	ldr	r2, [pc, #604]	; (80105e8 <ProcessRadioRxDone+0x528>)
 801038a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 801038e:	4b96      	ldr	r3, [pc, #600]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010390:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010394:	4619      	mov	r1, r3
 8010396:	2002      	movs	r0, #2
 8010398:	f7fd ff42 	bl	800e220 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 801039c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	461a      	mov	r2, r3
 80103a8:	4b8f      	ldr	r3, [pc, #572]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103aa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80103ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	461a      	mov	r2, r3
 80103ba:	4b8b      	ldr	r3, [pc, #556]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80103c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103c4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	461a      	mov	r2, r3
 80103cc:	4b86      	ldr	r3, [pc, #536]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80103d2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80103d6:	461a      	mov	r2, r3
 80103d8:	4b83      	ldr	r3, [pc, #524]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103da:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80103dc:	4b82      	ldr	r3, [pc, #520]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d102      	bne.n	80103ea <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80103e4:	4b80      	ldr	r3, [pc, #512]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103e6:	2201      	movs	r2, #1
 80103e8:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 80103ea:	4b7f      	ldr	r3, [pc, #508]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80103f2:	fb02 f303 	mul.w	r3, r2, r3
 80103f6:	4a7c      	ldr	r2, [pc, #496]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103f8:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80103fa:	4b7b      	ldr	r3, [pc, #492]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80103fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8010402:	4a79      	ldr	r2, [pc, #484]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010404:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8010406:	4b78      	ldr	r3, [pc, #480]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010408:	2201      	movs	r2, #1
 801040a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 801040e:	4b76      	ldr	r3, [pc, #472]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010410:	2200      	movs	r2, #0
 8010412:	f883 212e 	strb.w	r2, [r3, #302]	; 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8010416:	f107 0318 	add.w	r3, r7, #24
 801041a:	3312      	adds	r3, #18
 801041c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8010420:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010424:	b2db      	uxtb	r3, r3
 8010426:	3b11      	subs	r3, #17
 8010428:	b2db      	uxtb	r3, r3
 801042a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 801042e:	4b6f      	ldr	r3, [pc, #444]	; (80105ec <ProcessRadioRxDone+0x52c>)
 8010430:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8010434:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8010438:	4b6b      	ldr	r3, [pc, #428]	; (80105e8 <ProcessRadioRxDone+0x528>)
 801043a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801043e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8010442:	4611      	mov	r1, r2
 8010444:	4618      	mov	r0, r3
 8010446:	f006 fcc4 	bl	8016dd2 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 801044a:	4b67      	ldr	r3, [pc, #412]	; (80105e8 <ProcessRadioRxDone+0x528>)
 801044c:	2202      	movs	r2, #2
 801044e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010452:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010456:	4618      	mov	r0, r3
 8010458:	f005 f9f4 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 801045c:	4603      	mov	r3, r0
 801045e:	2b00      	cmp	r3, #0
 8010460:	f000 8311 	beq.w	8010a86 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8010464:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010468:	4619      	mov	r1, r3
 801046a:	2000      	movs	r0, #0
 801046c:	f005 f95e 	bl	801572c <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8010470:	e309      	b.n	8010a86 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010472:	2001      	movs	r0, #1
 8010474:	f005 f9e6 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	f000 8302 	beq.w	8010a84 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8010480:	2101      	movs	r1, #1
 8010482:	2007      	movs	r0, #7
 8010484:	f005 f952 	bl	801572c <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8010488:	e2fc      	b.n	8010a84 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801048a:	4b58      	ldr	r3, [pc, #352]	; (80105ec <ProcessRadioRxDone+0x52c>)
 801048c:	2201      	movs	r2, #1
 801048e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010492:	4b55      	ldr	r3, [pc, #340]	; (80105e8 <ProcessRadioRxDone+0x528>)
 8010494:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8010498:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 801049c:	4b53      	ldr	r3, [pc, #332]	; (80105ec <ProcessRadioRxDone+0x52c>)
 801049e:	f893 3424 	ldrb.w	r3, [r3, #1060]	; 0x424
 80104a2:	b25b      	sxtb	r3, r3
 80104a4:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80104a8:	230d      	movs	r3, #13
 80104aa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80104ae:	4b4e      	ldr	r3, [pc, #312]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80104b0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80104b8:	230e      	movs	r3, #14
 80104ba:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104be:	4b4a      	ldr	r3, [pc, #296]	; (80105e8 <ProcessRadioRxDone+0x528>)
 80104c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80104c4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80104c8:	4611      	mov	r1, r2
 80104ca:	4618      	mov	r0, r3
 80104cc:	f006 fc2f 	bl	8016d2e <RegionGetPhyParam>
 80104d0:	4603      	mov	r3, r0
 80104d2:	673b      	str	r3, [r7, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80104d4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80104d8:	3b0d      	subs	r3, #13
 80104da:	b29b      	uxth	r3, r3
 80104dc:	b21b      	sxth	r3, r3
 80104de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80104e2:	b21a      	sxth	r2, r3
 80104e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104e6:	b21b      	sxth	r3, r3
 80104e8:	429a      	cmp	r2, r3
 80104ea:	dc03      	bgt.n	80104f4 <ProcessRadioRxDone+0x434>
 80104ec:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80104f0:	2b0b      	cmp	r3, #11
 80104f2:	d806      	bhi.n	8010502 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80104f4:	4b3d      	ldr	r3, [pc, #244]	; (80105ec <ProcessRadioRxDone+0x52c>)
 80104f6:	2201      	movs	r2, #1
 80104f8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80104fc:	f7ff fdba 	bl	8010074 <PrepareRxDoneAbort>
                return;
 8010500:	e2e6      	b.n	8010ad0 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 8010502:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010506:	643b      	str	r3, [r7, #64]	; 0x40
            macMsgData.BufSize = size;
 8010508:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 801050c:	b2db      	uxtb	r3, r3
 801050e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8010512:	4b37      	ldr	r3, [pc, #220]	; (80105f0 <ProcessRadioRxDone+0x530>)
 8010514:	667b      	str	r3, [r7, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8010516:	23ff      	movs	r3, #255	; 0xff
 8010518:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801051c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010520:	4618      	mov	r0, r3
 8010522:	f006 f987 	bl	8016834 <LoRaMacParserData>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d006      	beq.n	801053a <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801052c:	4b2f      	ldr	r3, [pc, #188]	; (80105ec <ProcessRadioRxDone+0x52c>)
 801052e:	2201      	movs	r2, #1
 8010530:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8010534:	f7ff fd9e 	bl	8010074 <PrepareRxDoneAbort>
                return;
 8010538:	e2ca      	b.n	8010ad0 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801053a:	4b2b      	ldr	r3, [pc, #172]	; (80105e8 <ProcessRadioRxDone+0x528>)
 801053c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010540:	2b01      	cmp	r3, #1
 8010542:	d132      	bne.n	80105aa <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 8010544:	f004 fc7b 	bl	8014e3e <LoRaMacClassBIsPingExpected>
 8010548:	4603      	mov	r3, r0
 801054a:	2b00      	cmp	r3, #0
 801054c:	d014      	beq.n	8010578 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801054e:	2000      	movs	r0, #0
 8010550:	f004 fc2c 	bl	8014dac <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8010554:	2000      	movs	r0, #0
 8010556:	f004 fc4d 	bl	8014df4 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801055a:	4b24      	ldr	r3, [pc, #144]	; (80105ec <ProcessRadioRxDone+0x52c>)
 801055c:	2204      	movs	r2, #4
 801055e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8010562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010564:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010568:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801056c:	b2db      	uxtb	r3, r3
 801056e:	4619      	mov	r1, r3
 8010570:	4610      	mov	r0, r2
 8010572:	f004 fced 	bl	8014f50 <LoRaMacClassBSetFPendingBit>
 8010576:	e018      	b.n	80105aa <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010578:	f004 fc68 	bl	8014e4c <LoRaMacClassBIsMulticastExpected>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d013      	beq.n	80105aa <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010582:	2000      	movs	r0, #0
 8010584:	f004 fc1c 	bl	8014dc0 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010588:	2000      	movs	r0, #0
 801058a:	f004 fc3c 	bl	8014e06 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801058e:	4b17      	ldr	r3, [pc, #92]	; (80105ec <ProcessRadioRxDone+0x52c>)
 8010590:	2205      	movs	r2, #5
 8010592:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8010596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010598:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801059c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	4619      	mov	r1, r3
 80105a4:	4610      	mov	r0, r2
 80105a6:	f004 fcd3 	bl	8014f50 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80105aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105ac:	4a0f      	ldr	r2, [pc, #60]	; (80105ec <ProcessRadioRxDone+0x52c>)
 80105ae:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80105b2:	f107 0212 	add.w	r2, r7, #18
 80105b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80105ba:	4611      	mov	r1, r2
 80105bc:	4618      	mov	r0, r3
 80105be:	f002 fd81 	bl	80130c4 <DetermineFrameType>
 80105c2:	4603      	mov	r3, r0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d006      	beq.n	80105d6 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80105c8:	4b08      	ldr	r3, [pc, #32]	; (80105ec <ProcessRadioRxDone+0x52c>)
 80105ca:	2201      	movs	r2, #1
 80105cc:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80105d0:	f7ff fd50 	bl	8010074 <PrepareRxDoneAbort>
                return;
 80105d4:	e27c      	b.n	8010ad0 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            downLinkCounter = 0;
 80105dc:	2300      	movs	r3, #0
 80105de:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80105e0:	2300      	movs	r3, #0
 80105e2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 80105e6:	e055      	b.n	8010694 <ProcessRadioRxDone+0x5d4>
 80105e8:	20000bf0 	.word	0x20000bf0
 80105ec:	200006d4 	.word	0x200006d4
 80105f0:	2000090c 	.word	0x2000090c
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80105f4:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 80105f8:	499f      	ldr	r1, [pc, #636]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 80105fa:	4613      	mov	r3, r2
 80105fc:	005b      	lsls	r3, r3, #1
 80105fe:	4413      	add	r3, r2
 8010600:	011b      	lsls	r3, r3, #4
 8010602:	440b      	add	r3, r1
 8010604:	33ec      	adds	r3, #236	; 0xec
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801060a:	429a      	cmp	r2, r3
 801060c:	d13d      	bne.n	801068a <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 801060e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8010612:	4999      	ldr	r1, [pc, #612]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010614:	4613      	mov	r3, r2
 8010616:	005b      	lsls	r3, r3, #1
 8010618:	4413      	add	r3, r2
 801061a:	011b      	lsls	r3, r3, #4
 801061c:	440b      	add	r3, r1
 801061e:	33e9      	adds	r3, #233	; 0xe9
 8010620:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8010622:	2b00      	cmp	r3, #0
 8010624:	d031      	beq.n	801068a <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 8010626:	2301      	movs	r3, #1
 8010628:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 801062c:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8010630:	4991      	ldr	r1, [pc, #580]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010632:	4613      	mov	r3, r2
 8010634:	005b      	lsls	r3, r3, #1
 8010636:	4413      	add	r3, r2
 8010638:	011b      	lsls	r3, r3, #4
 801063a:	440b      	add	r3, r1
 801063c:	33ea      	adds	r3, #234	; 0xea
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8010644:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8010648:	498b      	ldr	r1, [pc, #556]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 801064a:	4613      	mov	r3, r2
 801064c:	005b      	lsls	r3, r3, #1
 801064e:	4413      	add	r3, r2
 8010650:	011b      	lsls	r3, r3, #4
 8010652:	440b      	add	r3, r1
 8010654:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 801065e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
 8010662:	4985      	ldr	r1, [pc, #532]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010664:	4613      	mov	r3, r2
 8010666:	005b      	lsls	r3, r3, #1
 8010668:	4413      	add	r3, r2
 801066a:	011b      	lsls	r3, r3, #4
 801066c:	440b      	add	r3, r1
 801066e:	33ec      	adds	r3, #236	; 0xec
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010676:	4b80      	ldr	r3, [pc, #512]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010678:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801067c:	2b02      	cmp	r3, #2
 801067e:	d10e      	bne.n	801069e <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8010680:	4b7e      	ldr	r3, [pc, #504]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010682:	2203      	movs	r2, #3
 8010684:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    }
                    break;
 8010688:	e009      	b.n	801069e <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801068a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 801068e:	3301      	adds	r3, #1
 8010690:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
 8010694:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
 8010698:	2b00      	cmp	r3, #0
 801069a:	d0ab      	beq.n	80105f4 <ProcessRadioRxDone+0x534>
 801069c:	e000      	b.n	80106a0 <ProcessRadioRxDone+0x5e0>
                    break;
 801069e:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80106a0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d117      	bne.n	80106d8 <ProcessRadioRxDone+0x618>
 80106a8:	7cbb      	ldrb	r3, [r7, #18]
 80106aa:	2b03      	cmp	r3, #3
 80106ac:	d10d      	bne.n	80106ca <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80106ae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80106b2:	f003 0320 	and.w	r3, r3, #32
 80106b6:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d106      	bne.n	80106ca <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 80106bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80106c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106c4:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d006      	beq.n	80106d8 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80106ca:	4b6c      	ldr	r3, [pc, #432]	; (801087c <ProcessRadioRxDone+0x7bc>)
 80106cc:	2201      	movs	r2, #1
 80106ce:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80106d2:	f7ff fccf 	bl	8010074 <PrepareRxDoneAbort>
                return;
 80106d6:	e1fb      	b.n	8010ad0 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 80106d8:	7cb9      	ldrb	r1, [r7, #18]
 80106da:	4c67      	ldr	r4, [pc, #412]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 80106dc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80106e0:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 80106e4:	f107 0314 	add.w	r3, r7, #20
 80106e8:	9301      	str	r3, [sp, #4]
 80106ea:	f107 0313 	add.w	r3, r7, #19
 80106ee:	9300      	str	r3, [sp, #0]
 80106f0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 80106f4:	f000 fee4 	bl	80114c0 <GetFCntDown>
 80106f8:	4603      	mov	r3, r0
 80106fa:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80106fe:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010702:	2b00      	cmp	r3, #0
 8010704:	d017      	beq.n	8010736 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8010706:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801070a:	2b07      	cmp	r3, #7
 801070c:	d104      	bne.n	8010718 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 801070e:	4b5b      	ldr	r3, [pc, #364]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010710:	2208      	movs	r2, #8
 8010712:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8010716:	e003      	b.n	8010720 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010718:	4b58      	ldr	r3, [pc, #352]	; (801087c <ProcessRadioRxDone+0x7bc>)
 801071a:	2201      	movs	r2, #1
 801071c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	4a56      	ldr	r2, [pc, #344]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010724:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	4a54      	ldr	r2, [pc, #336]	; (801087c <ProcessRadioRxDone+0x7bc>)
 801072c:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8010730:	f7ff fca0 	bl	8010074 <PrepareRxDoneAbort>
                return;
 8010734:	e1cc      	b.n	8010ad0 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8010736:	7cfa      	ldrb	r2, [r7, #19]
 8010738:	6979      	ldr	r1, [r7, #20]
 801073a:	f897 009a 	ldrb.w	r0, [r7, #154]	; 0x9a
 801073e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	460b      	mov	r3, r1
 8010746:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801074a:	f005 fed3 	bl	80164f4 <LoRaMacCryptoUnsecureMessage>
 801074e:	4603      	mov	r3, r0
 8010750:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010754:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010758:	2b00      	cmp	r3, #0
 801075a:	d00f      	beq.n	801077c <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801075c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010760:	2b02      	cmp	r3, #2
 8010762:	d104      	bne.n	801076e <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8010764:	4b45      	ldr	r3, [pc, #276]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010766:	220a      	movs	r2, #10
 8010768:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 801076c:	e003      	b.n	8010776 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 801076e:	4b43      	ldr	r3, [pc, #268]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010770:	220b      	movs	r2, #11
 8010772:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                }
                PrepareRxDoneAbort( );
 8010776:	f7ff fc7d 	bl	8010074 <PrepareRxDoneAbort>
                return;
 801077a:	e1a9      	b.n	8010ad0 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801077c:	4b3f      	ldr	r3, [pc, #252]	; (801087c <ProcessRadioRxDone+0x7bc>)
 801077e:	2200      	movs	r2, #0
 8010780:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8010784:	4a3d      	ldr	r2, [pc, #244]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010786:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 801078a:	f882 3422 	strb.w	r3, [r2, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 801078e:	4b3b      	ldr	r3, [pc, #236]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010790:	2200      	movs	r2, #0
 8010792:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8010796:	4b39      	ldr	r3, [pc, #228]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010798:	2200      	movs	r2, #0
 801079a:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	4a36      	ldr	r2, [pc, #216]	; (801087c <ProcessRadioRxDone+0x7bc>)
 80107a2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	4a34      	ldr	r2, [pc, #208]	; (801087c <ProcessRadioRxDone+0x7bc>)
 80107aa:	f8c2 346c 	str.w	r3, [r2, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80107ae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80107b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80107b6:	b2db      	uxtb	r3, r3
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	bf14      	ite	ne
 80107bc:	2301      	movne	r3, #1
 80107be:	2300      	moveq	r3, #0
 80107c0:	b2da      	uxtb	r2, r3
 80107c2:	4b2e      	ldr	r3, [pc, #184]	; (801087c <ProcessRadioRxDone+0x7bc>)
 80107c4:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80107c8:	4b2c      	ldr	r3, [pc, #176]	; (801087c <ProcessRadioRxDone+0x7bc>)
 80107ca:	2200      	movs	r2, #0
 80107cc:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80107d0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80107d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	bf14      	ite	ne
 80107de:	2301      	movne	r3, #1
 80107e0:	2300      	moveq	r3, #0
 80107e2:	b2da      	uxtb	r2, r3
 80107e4:	4b25      	ldr	r3, [pc, #148]	; (801087c <ProcessRadioRxDone+0x7bc>)
 80107e6:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80107ea:	4b24      	ldr	r3, [pc, #144]	; (801087c <ProcessRadioRxDone+0x7bc>)
 80107ec:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d004      	beq.n	80107fe <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80107f4:	4b21      	ldr	r3, [pc, #132]	; (801087c <ProcessRadioRxDone+0x7bc>)
 80107f6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	d106      	bne.n	801080c <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 80107fe:	4b1e      	ldr	r3, [pc, #120]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010800:	2200      	movs	r2, #0
 8010802:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 8010804:	4b1c      	ldr	r3, [pc, #112]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010806:	2201      	movs	r2, #1
 8010808:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 801080c:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8010810:	2b01      	cmp	r3, #1
 8010812:	d104      	bne.n	801081e <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8010814:	4b19      	ldr	r3, [pc, #100]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010816:	2202      	movs	r2, #2
 8010818:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 801081c:	e03a      	b.n	8010894 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 801081e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8010822:	f023 031f 	bic.w	r3, r3, #31
 8010826:	b2db      	uxtb	r3, r3
 8010828:	2ba0      	cmp	r3, #160	; 0xa0
 801082a:	d12b      	bne.n	8010884 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 801082c:	4b12      	ldr	r3, [pc, #72]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 801082e:	2201      	movs	r2, #1
 8010830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8010834:	4b10      	ldr	r3, [pc, #64]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010836:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 801083a:	2b00      	cmp	r3, #0
 801083c:	d102      	bne.n	8010844 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 801083e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010840:	4a0d      	ldr	r2, [pc, #52]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010842:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8010844:	4b0d      	ldr	r3, [pc, #52]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010846:	2201      	movs	r2, #1
 8010848:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801084c:	4b0b      	ldr	r3, [pc, #44]	; (801087c <ProcessRadioRxDone+0x7bc>)
 801084e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010852:	2b00      	cmp	r3, #0
 8010854:	d01e      	beq.n	8010894 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 8010856:	4b09      	ldr	r3, [pc, #36]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010858:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801085c:	2b01      	cmp	r3, #1
 801085e:	d019      	beq.n	8010894 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8010860:	4b05      	ldr	r3, [pc, #20]	; (8010878 <ProcessRadioRxDone+0x7b8>)
 8010862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010866:	4a05      	ldr	r2, [pc, #20]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010868:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 801086c:	4b04      	ldr	r3, [pc, #16]	; (8010880 <ProcessRadioRxDone+0x7c0>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a02      	ldr	r2, [pc, #8]	; (801087c <ProcessRadioRxDone+0x7bc>)
 8010872:	f8c2 3498 	str.w	r3, [r2, #1176]	; 0x498
 8010876:	e00d      	b.n	8010894 <ProcessRadioRxDone+0x7d4>
 8010878:	20000bf0 	.word	0x20000bf0
 801087c:	200006d4 	.word	0x200006d4
 8010880:	20001820 	.word	0x20001820
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8010884:	4b94      	ldr	r3, [pc, #592]	; (8010ad8 <ProcessRadioRxDone+0xa18>)
 8010886:	2200      	movs	r2, #0
 8010888:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 801088c:	4b93      	ldr	r3, [pc, #588]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 801088e:	2200      	movs	r2, #0
 8010890:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8010894:	4b90      	ldr	r3, [pc, #576]	; (8010ad8 <ProcessRadioRxDone+0xa18>)
 8010896:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801089a:	2b00      	cmp	r3, #0
 801089c:	d106      	bne.n	80108ac <ProcessRadioRxDone+0x7ec>
 801089e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80108a2:	f003 0310 	and.w	r3, r3, #16
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d008      	beq.n	80108be <ProcessRadioRxDone+0x7fe>
 80108ac:	4b8a      	ldr	r3, [pc, #552]	; (8010ad8 <ProcessRadioRxDone+0xa18>)
 80108ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d103      	bne.n	80108be <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 80108b6:	4b89      	ldr	r3, [pc, #548]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80108b8:	2201      	movs	r2, #1
 80108ba:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80108be:	4b87      	ldr	r3, [pc, #540]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80108c0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80108c4:	4a85      	ldr	r2, [pc, #532]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80108c6:	f892 2440 	ldrb.w	r2, [r2, #1088]	; 0x440
 80108ca:	f897 104c 	ldrb.w	r1, [r7, #76]	; 0x4c
 80108ce:	4618      	mov	r0, r3
 80108d0:	f001 ff8a 	bl	80127e8 <RemoveMacCommands>

            switch( fType )
 80108d4:	7cbb      	ldrb	r3, [r7, #18]
 80108d6:	2b03      	cmp	r3, #3
 80108d8:	d873      	bhi.n	80109c2 <ProcessRadioRxDone+0x902>
 80108da:	a201      	add	r2, pc, #4	; (adr r2, 80108e0 <ProcessRadioRxDone+0x820>)
 80108dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e0:	080108f1 	.word	0x080108f1
 80108e4:	08010941 	.word	0x08010941
 80108e8:	08010977 	.word	0x08010977
 80108ec:	0801099d 	.word	0x0801099d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80108f0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80108f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	461c      	mov	r4, r3
 80108fc:	4b77      	ldr	r3, [pc, #476]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80108fe:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010902:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8010906:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801090a:	f102 0010 	add.w	r0, r2, #16
 801090e:	9300      	str	r3, [sp, #0]
 8010910:	460b      	mov	r3, r1
 8010912:	4622      	mov	r2, r4
 8010914:	2100      	movs	r1, #0
 8010916:	f000 ff4f 	bl	80117b8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801091a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801091e:	4b6f      	ldr	r3, [pc, #444]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010920:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8010924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010926:	4a6d      	ldr	r2, [pc, #436]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010928:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801092c:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8010930:	4b6a      	ldr	r3, [pc, #424]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010932:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8010936:	4b69      	ldr	r3, [pc, #420]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010938:	2201      	movs	r2, #1
 801093a:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 801093e:	e047      	b.n	80109d0 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8010940:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8010944:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8010948:	b2db      	uxtb	r3, r3
 801094a:	461c      	mov	r4, r3
 801094c:	4b63      	ldr	r3, [pc, #396]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 801094e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010952:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8010956:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801095a:	f102 0010 	add.w	r0, r2, #16
 801095e:	9300      	str	r3, [sp, #0]
 8010960:	460b      	mov	r3, r1
 8010962:	4622      	mov	r2, r4
 8010964:	2100      	movs	r1, #0
 8010966:	f000 ff27 	bl	80117b8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801096a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 801096e:	4b5b      	ldr	r3, [pc, #364]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010970:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 8010974:	e02c      	b.n	80109d0 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8010976:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010978:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 801097c:	4b57      	ldr	r3, [pc, #348]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 801097e:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010982:	f997 108f 	ldrsb.w	r1, [r7, #143]	; 0x8f
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	460b      	mov	r3, r1
 801098a:	2100      	movs	r1, #0
 801098c:	f000 ff14 	bl	80117b8 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8010990:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8010994:	4b51      	ldr	r3, [pc, #324]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010996:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    break;
 801099a:	e019      	b.n	80109d0 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801099c:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80109a0:	4b4e      	ldr	r3, [pc, #312]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80109a2:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80109a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109a8:	4a4c      	ldr	r2, [pc, #304]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80109aa:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80109ae:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 80109b2:	4b4a      	ldr	r3, [pc, #296]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80109b4:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 80109b8:	4b48      	ldr	r3, [pc, #288]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80109ba:	2201      	movs	r2, #1
 80109bc:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 80109c0:	e006      	b.n	80109d0 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80109c2:	4b46      	ldr	r3, [pc, #280]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80109c4:	2201      	movs	r2, #1
 80109c6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 80109ca:	f7ff fb53 	bl	8010074 <PrepareRxDoneAbort>
                    break;
 80109ce:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 80109d0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80109d4:	2be0      	cmp	r3, #224	; 0xe0
 80109d6:	d118      	bne.n	8010a0a <ProcessRadioRxDone+0x94a>
 80109d8:	4b3f      	ldr	r3, [pc, #252]	; (8010ad8 <ProcessRadioRxDone+0xa18>)
 80109da:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 80109de:	f083 0301 	eor.w	r3, r3, #1
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d010      	beq.n	8010a0a <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 80109e8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80109ec:	4b3b      	ldr	r3, [pc, #236]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80109ee:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 80109f2:	4b3a      	ldr	r3, [pc, #232]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80109f4:	2200      	movs	r2, #0
 80109f6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 80109fa:	4b38      	ldr	r3, [pc, #224]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 80109fc:	2200      	movs	r2, #0
 80109fe:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8010a02:	4b36      	ldr	r3, [pc, #216]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a04:	2200      	movs	r2, #0
 8010a06:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010a0a:	4a34      	ldr	r2, [pc, #208]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a0c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010a10:	f043 0302 	orr.w	r3, r3, #2
 8010a14:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491

            break;
 8010a18:	e035      	b.n	8010a86 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8010a1a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010a1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010a22:	18d1      	adds	r1, r2, r3
 8010a24:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8010a2e:	1ad3      	subs	r3, r2, r3
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	461a      	mov	r2, r3
 8010a34:	482a      	ldr	r0, [pc, #168]	; (8010ae0 <ProcessRadioRxDone+0xa20>)
 8010a36:	f008 fd32 	bl	801949e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8010a3a:	4b28      	ldr	r3, [pc, #160]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a3c:	2203      	movs	r2, #3
 8010a3e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010a42:	4b26      	ldr	r3, [pc, #152]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a44:	2200      	movs	r2, #0
 8010a46:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8010a4a:	4b24      	ldr	r3, [pc, #144]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a4c:	4a24      	ldr	r2, [pc, #144]	; (8010ae0 <ProcessRadioRxDone+0xa20>)
 8010a4e:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8010a52:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010a56:	b2da      	uxtb	r2, r3
 8010a58:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010a5c:	1ad3      	subs	r3, r2, r3
 8010a5e:	b2da      	uxtb	r2, r3
 8010a60:	4b1e      	ldr	r3, [pc, #120]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a62:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8010a66:	4a1d      	ldr	r2, [pc, #116]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a68:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010a6c:	f043 0302 	orr.w	r3, r3, #2
 8010a70:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 8010a74:	e007      	b.n	8010a86 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010a76:	4b19      	ldr	r3, [pc, #100]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a78:	2201      	movs	r2, #1
 8010a7a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8010a7e:	f7ff faf9 	bl	8010074 <PrepareRxDoneAbort>
            break;
 8010a82:	e000      	b.n	8010a86 <ProcessRadioRxDone+0x9c6>
            break;
 8010a84:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010a86:	4b15      	ldr	r3, [pc, #84]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a88:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d004      	beq.n	8010a9a <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010a90:	4b12      	ldr	r3, [pc, #72]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a92:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d10c      	bne.n	8010ab4 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 8010a9a:	4b10      	ldr	r3, [pc, #64]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010a9c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d007      	beq.n	8010ab4 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 8010aa4:	4b0d      	ldr	r3, [pc, #52]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010aa6:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d002      	beq.n	8010ab4 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 8010aae:	2000      	movs	r0, #0
 8010ab0:	f000 fcec 	bl	801148c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 8010ab4:	4b09      	ldr	r3, [pc, #36]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010ab6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	d006      	beq.n	8010acc <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 8010abe:	4a07      	ldr	r2, [pc, #28]	; (8010adc <ProcessRadioRxDone+0xa1c>)
 8010ac0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010ac4:	f043 0310 	orr.w	r3, r3, #16
 8010ac8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8010acc:	f7ff fa14 	bl	800fef8 <UpdateRxSlotIdleState>
}
 8010ad0:	37a4      	adds	r7, #164	; 0xa4
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd90      	pop	{r4, r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	20000bf0 	.word	0x20000bf0
 8010adc:	200006d4 	.word	0x200006d4
 8010ae0:	2000090c 	.word	0x2000090c

08010ae4 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010ae8:	4b11      	ldr	r3, [pc, #68]	; (8010b30 <ProcessRadioTxTimeout+0x4c>)
 8010aea:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010aee:	2b02      	cmp	r3, #2
 8010af0:	d002      	beq.n	8010af8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8010af2:	4b10      	ldr	r3, [pc, #64]	; (8010b34 <ProcessRadioTxTimeout+0x50>)
 8010af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010af6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8010af8:	f7ff f9fe 	bl	800fef8 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8010afc:	4b0e      	ldr	r3, [pc, #56]	; (8010b38 <ProcessRadioTxTimeout+0x54>)
 8010afe:	2202      	movs	r2, #2
 8010b00:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8010b04:	2002      	movs	r0, #2
 8010b06:	f004 fe69 	bl	80157dc <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8010b0a:	4b0b      	ldr	r3, [pc, #44]	; (8010b38 <ProcessRadioTxTimeout+0x54>)
 8010b0c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d003      	beq.n	8010b1c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 8010b14:	4b08      	ldr	r3, [pc, #32]	; (8010b38 <ProcessRadioTxTimeout+0x54>)
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010b1c:	4a06      	ldr	r2, [pc, #24]	; (8010b38 <ProcessRadioTxTimeout+0x54>)
 8010b1e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010b22:	f043 0310 	orr.w	r3, r3, #16
 8010b26:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 8010b2a:	bf00      	nop
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	20000bf0 	.word	0x20000bf0
 8010b34:	0801ee44 	.word	0x0801ee44
 8010b38:	200006d4 	.word	0x200006d4

08010b3c <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b084      	sub	sp, #16
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	4603      	mov	r3, r0
 8010b44:	460a      	mov	r2, r1
 8010b46:	71fb      	strb	r3, [r7, #7]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010b50:	4b3d      	ldr	r3, [pc, #244]	; (8010c48 <HandleRadioRxErrorTimeout+0x10c>)
 8010b52:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	d002      	beq.n	8010b60 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8010b5a:	4b3c      	ldr	r3, [pc, #240]	; (8010c4c <HandleRadioRxErrorTimeout+0x110>)
 8010b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b5e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010b60:	f004 f966 	bl	8014e30 <LoRaMacClassBIsBeaconExpected>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d007      	beq.n	8010b7a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8010b6a:	2002      	movs	r0, #2
 8010b6c:	f004 f914 	bl	8014d98 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8010b70:	2000      	movs	r0, #0
 8010b72:	f004 f936 	bl	8014de2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8010b76:	2301      	movs	r3, #1
 8010b78:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010b7a:	4b33      	ldr	r3, [pc, #204]	; (8010c48 <HandleRadioRxErrorTimeout+0x10c>)
 8010b7c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010b80:	2b01      	cmp	r3, #1
 8010b82:	d119      	bne.n	8010bb8 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010b84:	f004 f95b 	bl	8014e3e <LoRaMacClassBIsPingExpected>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d007      	beq.n	8010b9e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010b8e:	2000      	movs	r0, #0
 8010b90:	f004 f90c 	bl	8014dac <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8010b94:	2000      	movs	r0, #0
 8010b96:	f004 f92d 	bl	8014df4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010b9e:	f004 f955 	bl	8014e4c <LoRaMacClassBIsMulticastExpected>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d007      	beq.n	8010bb8 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8010ba8:	2000      	movs	r0, #0
 8010baa:	f004 f909 	bl	8014dc0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8010bae:	2000      	movs	r0, #0
 8010bb0:	f004 f929 	bl	8014e06 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
 8010bba:	f083 0301 	eor.w	r3, r3, #1
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d03b      	beq.n	8010c3c <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8010bc4:	4b22      	ldr	r3, [pc, #136]	; (8010c50 <HandleRadioRxErrorTimeout+0x114>)
 8010bc6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d122      	bne.n	8010c14 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8010bce:	4b20      	ldr	r3, [pc, #128]	; (8010c50 <HandleRadioRxErrorTimeout+0x114>)
 8010bd0:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d003      	beq.n	8010be0 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8010bd8:	4a1d      	ldr	r2, [pc, #116]	; (8010c50 <HandleRadioRxErrorTimeout+0x114>)
 8010bda:	79fb      	ldrb	r3, [r7, #7]
 8010bdc:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8010be0:	79fb      	ldrb	r3, [r7, #7]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f004 fdfa 	bl	80157dc <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8010be8:	4b17      	ldr	r3, [pc, #92]	; (8010c48 <HandleRadioRxErrorTimeout+0x10c>)
 8010bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bec:	4618      	mov	r0, r3
 8010bee:	f00c fddf 	bl	801d7b0 <UTIL_TIMER_GetElapsedTime>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	4b16      	ldr	r3, [pc, #88]	; (8010c50 <HandleRadioRxErrorTimeout+0x114>)
 8010bf6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d31e      	bcc.n	8010c3c <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8010bfe:	4815      	ldr	r0, [pc, #84]	; (8010c54 <HandleRadioRxErrorTimeout+0x118>)
 8010c00:	f00c fcaa 	bl	801d558 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010c04:	4a12      	ldr	r2, [pc, #72]	; (8010c50 <HandleRadioRxErrorTimeout+0x114>)
 8010c06:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010c0a:	f043 0310 	orr.w	r3, r3, #16
 8010c0e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8010c12:	e013      	b.n	8010c3c <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8010c14:	4b0e      	ldr	r3, [pc, #56]	; (8010c50 <HandleRadioRxErrorTimeout+0x114>)
 8010c16:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d003      	beq.n	8010c26 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8010c1e:	4a0c      	ldr	r2, [pc, #48]	; (8010c50 <HandleRadioRxErrorTimeout+0x114>)
 8010c20:	79bb      	ldrb	r3, [r7, #6]
 8010c22:	f882 3441 	strb.w	r3, [r2, #1089]	; 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8010c26:	79bb      	ldrb	r3, [r7, #6]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f004 fdd7 	bl	80157dc <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 8010c2e:	4a08      	ldr	r2, [pc, #32]	; (8010c50 <HandleRadioRxErrorTimeout+0x114>)
 8010c30:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010c34:	f043 0310 	orr.w	r3, r3, #16
 8010c38:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 8010c3c:	f7ff f95c 	bl	800fef8 <UpdateRxSlotIdleState>
}
 8010c40:	bf00      	nop
 8010c42:	3710      	adds	r7, #16
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd80      	pop	{r7, pc}
 8010c48:	20000bf0 	.word	0x20000bf0
 8010c4c:	0801ee44 	.word	0x0801ee44
 8010c50:	200006d4 	.word	0x200006d4
 8010c54:	20000a6c 	.word	0x20000a6c

08010c58 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8010c5c:	2106      	movs	r1, #6
 8010c5e:	2005      	movs	r0, #5
 8010c60:	f7ff ff6c 	bl	8010b3c <HandleRadioRxErrorTimeout>
}
 8010c64:	bf00      	nop
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8010c6c:	2104      	movs	r1, #4
 8010c6e:	2003      	movs	r0, #3
 8010c70:	f7ff ff64 	bl	8010b3c <HandleRadioRxErrorTimeout>
}
 8010c74:	bf00      	nop
 8010c76:	bd80      	pop	{r7, pc}

08010c78 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8010c82:	607b      	str	r3, [r7, #4]
  return(result);
 8010c84:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8010c86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010c88:	b672      	cpsid	i
}
 8010c8a:	bf00      	nop
    events = LoRaMacRadioEvents;
 8010c8c:	4b1d      	ldr	r3, [pc, #116]	; (8010d04 <LoRaMacHandleIrqEvents+0x8c>)
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8010c92:	4b1c      	ldr	r3, [pc, #112]	; (8010d04 <LoRaMacHandleIrqEvents+0x8c>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	601a      	str	r2, [r3, #0]
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c9c:	68bb      	ldr	r3, [r7, #8]
 8010c9e:	f383 8810 	msr	PRIMASK, r3
}
 8010ca2:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d027      	beq.n	8010cfa <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8010caa:	783b      	ldrb	r3, [r7, #0]
 8010cac:	f003 0320 	and.w	r3, r3, #32
 8010cb0:	b2db      	uxtb	r3, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d001      	beq.n	8010cba <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8010cb6:	f7ff f937 	bl	800ff28 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8010cba:	783b      	ldrb	r3, [r7, #0]
 8010cbc:	f003 0310 	and.w	r3, r3, #16
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d001      	beq.n	8010cca <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8010cc6:	f7ff f9fb 	bl	80100c0 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8010cca:	783b      	ldrb	r3, [r7, #0]
 8010ccc:	f003 0308 	and.w	r3, r3, #8
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d001      	beq.n	8010cda <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8010cd6:	f7ff ff05 	bl	8010ae4 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8010cda:	783b      	ldrb	r3, [r7, #0]
 8010cdc:	f003 0304 	and.w	r3, r3, #4
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d001      	beq.n	8010cea <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8010ce6:	f7ff ffb7 	bl	8010c58 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8010cea:	783b      	ldrb	r3, [r7, #0]
 8010cec:	f003 0302 	and.w	r3, r3, #2
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d001      	beq.n	8010cfa <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8010cf6:	f7ff ffb7 	bl	8010c68 <ProcessRadioRxTimeout>
        }
    }
}
 8010cfa:	bf00      	nop
 8010cfc:	3710      	adds	r7, #16
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	20001818 	.word	0x20001818

08010d08 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8010d08:	b480      	push	{r7}
 8010d0a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8010d0c:	4b10      	ldr	r3, [pc, #64]	; (8010d50 <LoRaMacIsBusy+0x48>)
 8010d0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	d101      	bne.n	8010d1a <LoRaMacIsBusy+0x12>
    {
        return false;
 8010d16:	2300      	movs	r3, #0
 8010d18:	e015      	b.n	8010d46 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 8010d1a:	4b0e      	ldr	r3, [pc, #56]	; (8010d54 <LoRaMacIsBusy+0x4c>)
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	f003 0301 	and.w	r3, r3, #1
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <LoRaMacIsBusy+0x24>
    {
        return true;
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e00c      	b.n	8010d46 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010d2c:	4b08      	ldr	r3, [pc, #32]	; (8010d50 <LoRaMacIsBusy+0x48>)
 8010d2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d106      	bne.n	8010d44 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8010d36:	4b06      	ldr	r3, [pc, #24]	; (8010d50 <LoRaMacIsBusy+0x48>)
 8010d38:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d101      	bne.n	8010d44 <LoRaMacIsBusy+0x3c>
    {
        return false;
 8010d40:	2300      	movs	r3, #0
 8010d42:	e000      	b.n	8010d46 <LoRaMacIsBusy+0x3e>
    }
    return true;
 8010d44:	2301      	movs	r3, #1
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bc80      	pop	{r7}
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop
 8010d50:	200006d4 	.word	0x200006d4
 8010d54:	20001818 	.word	0x20001818

08010d58 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8010d58:	b480      	push	{r7}
 8010d5a:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8010d5c:	4b05      	ldr	r3, [pc, #20]	; (8010d74 <LoRaMacIsStopped+0x1c>)
 8010d5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d101      	bne.n	8010d6a <LoRaMacIsStopped+0x12>
    {
        return true;
 8010d66:	2301      	movs	r3, #1
 8010d68:	e000      	b.n	8010d6c <LoRaMacIsStopped+0x14>
    }
    return false;
 8010d6a:	2300      	movs	r3, #0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bc80      	pop	{r7}
 8010d72:	4770      	bx	lr
 8010d74:	200006d4 	.word	0x200006d4

08010d78 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b083      	sub	sp, #12
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	4603      	mov	r3, r0
 8010d80:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8010d82:	4a04      	ldr	r2, [pc, #16]	; (8010d94 <LoRaMacEnableRequests+0x1c>)
 8010d84:	79fb      	ldrb	r3, [r7, #7]
 8010d86:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
}
 8010d8a:	bf00      	nop
 8010d8c:	370c      	adds	r7, #12
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bc80      	pop	{r7}
 8010d92:	4770      	bx	lr
 8010d94:	200006d4 	.word	0x200006d4

08010d98 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b082      	sub	sp, #8
 8010d9c:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8010d9e:	4b2c      	ldr	r3, [pc, #176]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010da0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010da4:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8010da6:	4b2a      	ldr	r3, [pc, #168]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010da8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d14a      	bne.n	8010e46 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010db0:	4b27      	ldr	r3, [pc, #156]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010db2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010db6:	f003 0301 	and.w	r3, r3, #1
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d006      	beq.n	8010dce <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8010dc0:	4a23      	ldr	r2, [pc, #140]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010dc2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010dc6:	f36f 0300 	bfc	r3, #0, #1
 8010dca:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010dce:	4b20      	ldr	r3, [pc, #128]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010dd0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010dd4:	f003 0304 	and.w	r3, r3, #4
 8010dd8:	b2db      	uxtb	r3, r3
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d006      	beq.n	8010dec <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010dde:	4a1c      	ldr	r2, [pc, #112]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010de0:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010de4:	f36f 0382 	bfc	r3, #2, #1
 8010de8:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010dec:	2001      	movs	r0, #1
 8010dee:	f7ff ffc3 	bl	8010d78 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8010df2:	793b      	ldrb	r3, [r7, #4]
 8010df4:	f003 0301 	and.w	r3, r3, #1
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d005      	beq.n	8010e0a <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8010dfe:	4b14      	ldr	r3, [pc, #80]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010e00:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4813      	ldr	r0, [pc, #76]	; (8010e54 <LoRaMacHandleRequestEvents+0xbc>)
 8010e08:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8010e0a:	793b      	ldrb	r3, [r7, #4]
 8010e0c:	f003 0304 	and.w	r3, r3, #4
 8010e10:	b2db      	uxtb	r3, r3
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d00e      	beq.n	8010e34 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8010e16:	4810      	ldr	r0, [pc, #64]	; (8010e58 <LoRaMacHandleRequestEvents+0xc0>)
 8010e18:	f004 fd2e 	bl	8015878 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8010e1c:	f004 fd7e 	bl	801591c <LoRaMacConfirmQueueGetCnt>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d006      	beq.n	8010e34 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010e26:	4a0a      	ldr	r2, [pc, #40]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010e28:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010e2c:	f043 0304 	orr.w	r3, r3, #4
 8010e30:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8010e34:	f004 f828 	bl	8014e88 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8010e38:	4a05      	ldr	r2, [pc, #20]	; (8010e50 <LoRaMacHandleRequestEvents+0xb8>)
 8010e3a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010e3e:	f36f 1304 	bfc	r3, #4, #1
 8010e42:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8010e46:	bf00      	nop
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	200006d4 	.word	0x200006d4
 8010e54:	20000b14 	.word	0x20000b14
 8010e58:	20000b28 	.word	0x20000b28

08010e5c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8010e60:	4b16      	ldr	r3, [pc, #88]	; (8010ebc <LoRaMacHandleIndicationEvents+0x60>)
 8010e62:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010e66:	f003 0308 	and.w	r3, r3, #8
 8010e6a:	b2db      	uxtb	r3, r3
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00d      	beq.n	8010e8c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8010e70:	4a12      	ldr	r2, [pc, #72]	; (8010ebc <LoRaMacHandleIndicationEvents+0x60>)
 8010e72:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010e76:	f36f 03c3 	bfc	r3, #3, #1
 8010e7a:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8010e7e:	4b0f      	ldr	r3, [pc, #60]	; (8010ebc <LoRaMacHandleIndicationEvents+0x60>)
 8010e80:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010e84:	68db      	ldr	r3, [r3, #12]
 8010e86:	490e      	ldr	r1, [pc, #56]	; (8010ec0 <LoRaMacHandleIndicationEvents+0x64>)
 8010e88:	480e      	ldr	r0, [pc, #56]	; (8010ec4 <LoRaMacHandleIndicationEvents+0x68>)
 8010e8a:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010e8c:	4b0b      	ldr	r3, [pc, #44]	; (8010ebc <LoRaMacHandleIndicationEvents+0x60>)
 8010e8e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010e92:	f003 0302 	and.w	r3, r3, #2
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d00d      	beq.n	8010eb8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8010e9c:	4a07      	ldr	r2, [pc, #28]	; (8010ebc <LoRaMacHandleIndicationEvents+0x60>)
 8010e9e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010ea2:	f36f 0341 	bfc	r3, #1, #1
 8010ea6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8010eaa:	4b04      	ldr	r3, [pc, #16]	; (8010ebc <LoRaMacHandleIndicationEvents+0x60>)
 8010eac:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	4903      	ldr	r1, [pc, #12]	; (8010ec0 <LoRaMacHandleIndicationEvents+0x64>)
 8010eb4:	4804      	ldr	r0, [pc, #16]	; (8010ec8 <LoRaMacHandleIndicationEvents+0x6c>)
 8010eb6:	4798      	blx	r3
    }
}
 8010eb8:	bf00      	nop
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	200006d4 	.word	0x200006d4
 8010ec0:	20000b60 	.word	0x20000b60
 8010ec4:	20000b3c 	.word	0x20000b3c
 8010ec8:	20000af4 	.word	0x20000af4

08010ecc <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8010ed2:	4b2a      	ldr	r3, [pc, #168]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010ed4:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d048      	beq.n	8010f74 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010eea:	4b24      	ldr	r3, [pc, #144]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010eec:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d004      	beq.n	8010efe <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8010ef4:	4b21      	ldr	r3, [pc, #132]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010ef6:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8010efa:	2b03      	cmp	r3, #3
 8010efc:	d104      	bne.n	8010f08 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8010efe:	f002 f943 	bl	8013188 <CheckRetransUnconfirmedUplink>
 8010f02:	4603      	mov	r3, r0
 8010f04:	71fb      	strb	r3, [r7, #7]
 8010f06:	e010      	b.n	8010f2a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8010f08:	4b1c      	ldr	r3, [pc, #112]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010f0a:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 8010f0e:	2b01      	cmp	r3, #1
 8010f10:	d10b      	bne.n	8010f2a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 8010f12:	4b1a      	ldr	r3, [pc, #104]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010f14:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d004      	beq.n	8010f26 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8010f1c:	f002 f960 	bl	80131e0 <CheckRetransConfirmedUplink>
 8010f20:	4603      	mov	r3, r0
 8010f22:	71fb      	strb	r3, [r7, #7]
 8010f24:	e001      	b.n	8010f2a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 8010f26:	2301      	movs	r3, #1
 8010f28:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8010f2a:	79fb      	ldrb	r3, [r7, #7]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d00d      	beq.n	8010f4c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8010f30:	4813      	ldr	r0, [pc, #76]	; (8010f80 <LoRaMacHandleMcpsRequest+0xb4>)
 8010f32:	f00c fb11 	bl	801d558 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8010f36:	4b11      	ldr	r3, [pc, #68]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010f38:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010f3c:	f023 0320 	bic.w	r3, r3, #32
 8010f40:	4a0e      	ldr	r2, [pc, #56]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010f42:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8010f46:	f002 f985 	bl	8013254 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8010f4a:	e013      	b.n	8010f74 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 8010f4c:	79bb      	ldrb	r3, [r7, #6]
 8010f4e:	f083 0301 	eor.w	r3, r3, #1
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00d      	beq.n	8010f74 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8010f58:	4a08      	ldr	r2, [pc, #32]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010f5a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010f5e:	f36f 1304 	bfc	r3, #4, #1
 8010f62:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 8010f66:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <LoRaMacHandleMcpsRequest+0xb0>)
 8010f68:	2200      	movs	r2, #0
 8010f6a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 8010f6e:	2000      	movs	r0, #0
 8010f70:	f000 f9c8 	bl	8011304 <OnTxDelayedTimerEvent>
}
 8010f74:	bf00      	nop
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	200006d4 	.word	0x200006d4
 8010f80:	20000a3c 	.word	0x20000a3c

08010f84 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8010f84:	b580      	push	{r7, lr}
 8010f86:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8010f88:	4b18      	ldr	r3, [pc, #96]	; (8010fec <LoRaMacHandleMlmeRequest+0x68>)
 8010f8a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8010f8e:	f003 0304 	and.w	r3, r3, #4
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d026      	beq.n	8010fe6 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8010f98:	2001      	movs	r0, #1
 8010f9a:	f004 fc53 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d012      	beq.n	8010fca <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8010fa4:	2001      	movs	r0, #1
 8010fa6:	f004 fbef 	bl	8015788 <LoRaMacConfirmQueueGetStatus>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d103      	bne.n	8010fb8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8010fb0:	4b0e      	ldr	r3, [pc, #56]	; (8010fec <LoRaMacHandleMlmeRequest+0x68>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010fb8:	4b0c      	ldr	r3, [pc, #48]	; (8010fec <LoRaMacHandleMlmeRequest+0x68>)
 8010fba:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010fbe:	f023 0302 	bic.w	r3, r3, #2
 8010fc2:	4a0a      	ldr	r2, [pc, #40]	; (8010fec <LoRaMacHandleMlmeRequest+0x68>)
 8010fc4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8010fc8:	e00d      	b.n	8010fe6 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 8010fca:	2006      	movs	r0, #6
 8010fcc:	f004 fc3a 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d007      	beq.n	8010fe6 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010fd6:	4b05      	ldr	r3, [pc, #20]	; (8010fec <LoRaMacHandleMlmeRequest+0x68>)
 8010fd8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010fdc:	f023 0302 	bic.w	r3, r3, #2
 8010fe0:	4a02      	ldr	r2, [pc, #8]	; (8010fec <LoRaMacHandleMlmeRequest+0x68>)
 8010fe2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8010fe6:	bf00      	nop
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	200006d4 	.word	0x200006d4

08010ff0 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8010ff4:	200b      	movs	r0, #11
 8010ff6:	f004 fc25 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d019      	beq.n	8011034 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011000:	4b0e      	ldr	r3, [pc, #56]	; (801103c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011002:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011006:	f003 0301 	and.w	r3, r3, #1
 801100a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801100c:	2b00      	cmp	r3, #0
 801100e:	d111      	bne.n	8011034 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011010:	4b0a      	ldr	r3, [pc, #40]	; (801103c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011012:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8011016:	f003 0304 	and.w	r3, r3, #4
 801101a:	b2db      	uxtb	r3, r3
 801101c:	2b00      	cmp	r3, #0
 801101e:	d009      	beq.n	8011034 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011020:	4b06      	ldr	r3, [pc, #24]	; (801103c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011022:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011026:	f023 0302 	bic.w	r3, r3, #2
 801102a:	4a04      	ldr	r2, [pc, #16]	; (801103c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801102c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011030:	2301      	movs	r3, #1
 8011032:	e000      	b.n	8011036 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011034:	2300      	movs	r3, #0
}
 8011036:	4618      	mov	r0, r3
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	200006d4 	.word	0x200006d4

08011040 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	4603      	mov	r3, r0
 8011048:	71fb      	strb	r3, [r7, #7]
 801104a:	460b      	mov	r3, r1
 801104c:	71bb      	strb	r3, [r7, #6]
 801104e:	4613      	mov	r3, r2
 8011050:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 8011052:	79fb      	ldrb	r3, [r7, #7]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d00a      	beq.n	801106e <CheckForMinimumAbpDatarate+0x2e>
 8011058:	79bb      	ldrb	r3, [r7, #6]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d107      	bne.n	801106e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 801105e:	797b      	ldrb	r3, [r7, #5]
 8011060:	f083 0301 	eor.w	r3, r3, #1
 8011064:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8011066:	2b00      	cmp	r3, #0
 8011068:	d001      	beq.n	801106e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 801106a:	2301      	movs	r3, #1
 801106c:	e000      	b.n	8011070 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 801106e:	2300      	movs	r3, #0
}
 8011070:	4618      	mov	r0, r3
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	bc80      	pop	{r7}
 8011078:	4770      	bx	lr
	...

0801107c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 801107c:	b480      	push	{r7}
 801107e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011080:	4b0d      	ldr	r3, [pc, #52]	; (80110b8 <LoRaMacCheckForRxAbort+0x3c>)
 8011082:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801108a:	2b00      	cmp	r3, #0
 801108c:	d00f      	beq.n	80110ae <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801108e:	4b0a      	ldr	r3, [pc, #40]	; (80110b8 <LoRaMacCheckForRxAbort+0x3c>)
 8011090:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011098:	4a07      	ldr	r2, [pc, #28]	; (80110b8 <LoRaMacCheckForRxAbort+0x3c>)
 801109a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801109e:	4b06      	ldr	r3, [pc, #24]	; (80110b8 <LoRaMacCheckForRxAbort+0x3c>)
 80110a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80110a4:	f023 0302 	bic.w	r3, r3, #2
 80110a8:	4a03      	ldr	r2, [pc, #12]	; (80110b8 <LoRaMacCheckForRxAbort+0x3c>)
 80110aa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 80110ae:	bf00      	nop
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bc80      	pop	{r7}
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	200006d4 	.word	0x200006d4

080110bc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80110c4:	2300      	movs	r3, #0
 80110c6:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80110c8:	2300      	movs	r3, #0
 80110ca:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 80110cc:	4b51      	ldr	r3, [pc, #324]	; (8011214 <LoRaMacHandleNvm+0x158>)
 80110ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f040 8099 	bne.w	801120a <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	2124      	movs	r1, #36	; 0x24
 80110dc:	4618      	mov	r0, r3
 80110de:	f008 fa33 	bl	8019548 <Crc32>
 80110e2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e8:	68ba      	ldr	r2, [r7, #8]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d006      	beq.n	80110fc <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	68ba      	ldr	r2, [r7, #8]
 80110f2:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80110f4:	89fb      	ldrh	r3, [r7, #14]
 80110f6:	f043 0301 	orr.w	r3, r3, #1
 80110fa:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	3328      	adds	r3, #40	; 0x28
 8011100:	211c      	movs	r1, #28
 8011102:	4618      	mov	r0, r3
 8011104:	f008 fa20 	bl	8019548 <Crc32>
 8011108:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801110e:	68ba      	ldr	r2, [r7, #8]
 8011110:	429a      	cmp	r2, r3
 8011112:	d006      	beq.n	8011122 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	68ba      	ldr	r2, [r7, #8]
 8011118:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 801111a:	89fb      	ldrh	r3, [r7, #14]
 801111c:	f043 0302 	orr.w	r3, r3, #2
 8011120:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	3348      	adds	r3, #72	; 0x48
 8011126:	f44f 7180 	mov.w	r1, #256	; 0x100
 801112a:	4618      	mov	r0, r3
 801112c:	f008 fa0c 	bl	8019548 <Crc32>
 8011130:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8011138:	68ba      	ldr	r2, [r7, #8]
 801113a:	429a      	cmp	r2, r3
 801113c:	d007      	beq.n	801114e <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	68ba      	ldr	r2, [r7, #8]
 8011142:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011146:	89fb      	ldrh	r3, [r7, #14]
 8011148:	f043 0304 	orr.w	r3, r3, #4
 801114c:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8011154:	21d4      	movs	r1, #212	; 0xd4
 8011156:	4618      	mov	r0, r3
 8011158:	f008 f9f6 	bl	8019548 <Crc32>
 801115c:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8011164:	68ba      	ldr	r2, [r7, #8]
 8011166:	429a      	cmp	r2, r3
 8011168:	d007      	beq.n	801117a <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	68ba      	ldr	r2, [r7, #8]
 801116e:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011172:	89fb      	ldrh	r3, [r7, #14]
 8011174:	f043 0308 	orr.w	r3, r3, #8
 8011178:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8011180:	2110      	movs	r1, #16
 8011182:	4618      	mov	r0, r3
 8011184:	f008 f9e0 	bl	8019548 <Crc32>
 8011188:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8011190:	68ba      	ldr	r2, [r7, #8]
 8011192:	429a      	cmp	r2, r3
 8011194:	d007      	beq.n	80111a6 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	68ba      	ldr	r2, [r7, #8]
 801119a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 801119e:	89fb      	ldrh	r3, [r7, #14]
 80111a0:	f043 0310 	orr.w	r3, r3, #16
 80111a4:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80111ac:	f44f 715e 	mov.w	r1, #888	; 0x378
 80111b0:	4618      	mov	r0, r3
 80111b2:	f008 f9c9 	bl	8019548 <Crc32>
 80111b6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 80111be:	68ba      	ldr	r2, [r7, #8]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d007      	beq.n	80111d4 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	68ba      	ldr	r2, [r7, #8]
 80111c8:	f8c3 25b0 	str.w	r2, [r3, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80111cc:	89fb      	ldrh	r3, [r7, #14]
 80111ce:	f043 0320 	orr.w	r3, r3, #32
 80111d2:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 80111da:	2114      	movs	r1, #20
 80111dc:	4618      	mov	r0, r3
 80111de:	f008 f9b3 	bl	8019548 <Crc32>
 80111e2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 80111ea:	68ba      	ldr	r2, [r7, #8]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d007      	beq.n	8011200 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	68ba      	ldr	r2, [r7, #8]
 80111f4:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80111f8:	89fb      	ldrh	r3, [r7, #14]
 80111fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111fe:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011200:	89fb      	ldrh	r3, [r7, #14]
 8011202:	4618      	mov	r0, r3
 8011204:	f002 f878 	bl	80132f8 <CallNvmDataChangeCallback>
 8011208:	e000      	b.n	801120c <LoRaMacHandleNvm+0x150>
        return;
 801120a:	bf00      	nop
}
 801120c:	3710      	adds	r7, #16
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	200006d4 	.word	0x200006d4

08011218 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 8011222:	683b      	ldr	r3, [r7, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d00d      	beq.n	8011244 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 8011228:	6838      	ldr	r0, [r7, #0]
 801122a:	f00c fac1 	bl	801d7b0 <UTIL_TIMER_GetElapsedTime>
 801122e:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	429a      	cmp	r2, r3
 8011236:	d905      	bls.n	8011244 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 8011238:	4b05      	ldr	r3, [pc, #20]	; (8011250 <LoRaMacHandleResponseTimeout+0x38>)
 801123a:	2200      	movs	r2, #0
 801123c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 8011240:	2301      	movs	r3, #1
 8011242:	e000      	b.n	8011246 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 8011244:	2300      	movs	r3, #0
}
 8011246:	4618      	mov	r0, r3
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	20000bf0 	.word	0x20000bf0

08011254 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 801125a:	2300      	movs	r3, #0
 801125c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 801125e:	f7ff fd0b 	bl	8010c78 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011262:	f003 fe80 	bl	8014f66 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011266:	4b25      	ldr	r3, [pc, #148]	; (80112fc <LoRaMacProcess+0xa8>)
 8011268:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801126c:	f003 0310 	and.w	r3, r3, #16
 8011270:	b2db      	uxtb	r3, r3
 8011272:	2b00      	cmp	r3, #0
 8011274:	d023      	beq.n	80112be <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011276:	2000      	movs	r0, #0
 8011278:	f7ff fd7e 	bl	8010d78 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 801127c:	f7ff fefe 	bl	801107c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011280:	f002 f858 	bl	8013334 <IsRequestPending>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d006      	beq.n	8011298 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 801128a:	f7ff feb1 	bl	8010ff0 <LoRaMacCheckForBeaconAcquisition>
 801128e:	4603      	mov	r3, r0
 8011290:	461a      	mov	r2, r3
 8011292:	79fb      	ldrb	r3, [r7, #7]
 8011294:	4313      	orrs	r3, r2
 8011296:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011298:	79fb      	ldrb	r3, [r7, #7]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d103      	bne.n	80112a6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801129e:	f7ff fe71 	bl	8010f84 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 80112a2:	f7ff fe13 	bl	8010ecc <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 80112a6:	f7ff fd77 	bl	8010d98 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80112aa:	2001      	movs	r0, #1
 80112ac:	f7ff fd64 	bl	8010d78 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80112b0:	4a12      	ldr	r2, [pc, #72]	; (80112fc <LoRaMacProcess+0xa8>)
 80112b2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80112b6:	f043 0320 	orr.w	r3, r3, #32
 80112ba:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
    LoRaMacHandleIndicationEvents( );
 80112be:	f7ff fdcd 	bl	8010e5c <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 80112c2:	4b0e      	ldr	r3, [pc, #56]	; (80112fc <LoRaMacProcess+0xa8>)
 80112c4:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	d101      	bne.n	80112d0 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 80112cc:	f001 fc1a 	bl	8012b04 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 80112d0:	4b0a      	ldr	r3, [pc, #40]	; (80112fc <LoRaMacProcess+0xa8>)
 80112d2:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80112d6:	f003 0320 	and.w	r3, r3, #32
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d009      	beq.n	80112f4 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 80112e0:	4a06      	ldr	r2, [pc, #24]	; (80112fc <LoRaMacProcess+0xa8>)
 80112e2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80112e6:	f36f 1345 	bfc	r3, #5, #1
 80112ea:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 80112ee:	4804      	ldr	r0, [pc, #16]	; (8011300 <LoRaMacProcess+0xac>)
 80112f0:	f7ff fee4 	bl	80110bc <LoRaMacHandleNvm>
    }
}
 80112f4:	bf00      	nop
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}
 80112fc:	200006d4 	.word	0x200006d4
 8011300:	20000bf0 	.word	0x20000bf0

08011304 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 801130c:	481e      	ldr	r0, [pc, #120]	; (8011388 <OnTxDelayedTimerEvent+0x84>)
 801130e:	f00c f923 	bl	801d558 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011312:	4b1e      	ldr	r3, [pc, #120]	; (801138c <OnTxDelayedTimerEvent+0x88>)
 8011314:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011318:	f023 0320 	bic.w	r3, r3, #32
 801131c:	4a1b      	ldr	r2, [pc, #108]	; (801138c <OnTxDelayedTimerEvent+0x88>)
 801131e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8011322:	4b1b      	ldr	r3, [pc, #108]	; (8011390 <OnTxDelayedTimerEvent+0x8c>)
 8011324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011328:	4a18      	ldr	r2, [pc, #96]	; (801138c <OnTxDelayedTimerEvent+0x88>)
 801132a:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 801132e:	4611      	mov	r1, r2
 8011330:	4618      	mov	r0, r3
 8011332:	f7ff ff71 	bl	8011218 <LoRaMacHandleResponseTimeout>
 8011336:	4603      	mov	r3, r0
 8011338:	2b00      	cmp	r3, #0
 801133a:	d11e      	bne.n	801137a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801133c:	2001      	movs	r0, #1
 801133e:	f001 f92b 	bl	8012598 <ScheduleTx>
 8011342:	4603      	mov	r3, r0
 8011344:	2b00      	cmp	r3, #0
 8011346:	d01a      	beq.n	801137e <OnTxDelayedTimerEvent+0x7a>
 8011348:	2b0b      	cmp	r3, #11
 801134a:	d018      	beq.n	801137e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801134c:	4b10      	ldr	r3, [pc, #64]	; (8011390 <OnTxDelayedTimerEvent+0x8c>)
 801134e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011352:	b2da      	uxtb	r2, r3
 8011354:	4b0d      	ldr	r3, [pc, #52]	; (801138c <OnTxDelayedTimerEvent+0x88>)
 8011356:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 801135a:	4b0c      	ldr	r3, [pc, #48]	; (801138c <OnTxDelayedTimerEvent+0x88>)
 801135c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8011360:	4b0a      	ldr	r3, [pc, #40]	; (801138c <OnTxDelayedTimerEvent+0x88>)
 8011362:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8011366:	4b09      	ldr	r3, [pc, #36]	; (801138c <OnTxDelayedTimerEvent+0x88>)
 8011368:	2209      	movs	r2, #9
 801136a:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801136e:	2009      	movs	r0, #9
 8011370:	f004 fa34 	bl	80157dc <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8011374:	f001 ff6e 	bl	8013254 <StopRetransmission>
            break;
 8011378:	e002      	b.n	8011380 <OnTxDelayedTimerEvent+0x7c>
        return;
 801137a:	bf00      	nop
 801137c:	e000      	b.n	8011380 <OnTxDelayedTimerEvent+0x7c>
            break;
 801137e:	bf00      	nop
        }
    }
}
 8011380:	3708      	adds	r7, #8
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	20000a3c 	.word	0x20000a3c
 801138c:	200006d4 	.word	0x200006d4
 8011390:	20000bf0 	.word	0x20000bf0

08011394 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 801139c:	4b17      	ldr	r3, [pc, #92]	; (80113fc <OnRxWindow1TimerEvent+0x68>)
 801139e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 80113a2:	4b16      	ldr	r3, [pc, #88]	; (80113fc <OnRxWindow1TimerEvent+0x68>)
 80113a4:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80113a8:	4b15      	ldr	r3, [pc, #84]	; (8011400 <OnRxWindow1TimerEvent+0x6c>)
 80113aa:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80113ae:	b25a      	sxtb	r2, r3
 80113b0:	4b12      	ldr	r3, [pc, #72]	; (80113fc <OnRxWindow1TimerEvent+0x68>)
 80113b2:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80113b6:	4b12      	ldr	r3, [pc, #72]	; (8011400 <OnRxWindow1TimerEvent+0x6c>)
 80113b8:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80113bc:	4b0f      	ldr	r3, [pc, #60]	; (80113fc <OnRxWindow1TimerEvent+0x68>)
 80113be:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80113c2:	4b0f      	ldr	r3, [pc, #60]	; (8011400 <OnRxWindow1TimerEvent+0x6c>)
 80113c4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80113c8:	4b0c      	ldr	r3, [pc, #48]	; (80113fc <OnRxWindow1TimerEvent+0x68>)
 80113ca:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80113ce:	4b0b      	ldr	r3, [pc, #44]	; (80113fc <OnRxWindow1TimerEvent+0x68>)
 80113d0:	2200      	movs	r2, #0
 80113d2:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80113d6:	4b09      	ldr	r3, [pc, #36]	; (80113fc <OnRxWindow1TimerEvent+0x68>)
 80113d8:	2200      	movs	r2, #0
 80113da:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80113de:	4b08      	ldr	r3, [pc, #32]	; (8011400 <OnRxWindow1TimerEvent+0x6c>)
 80113e0:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80113e4:	4b05      	ldr	r3, [pc, #20]	; (80113fc <OnRxWindow1TimerEvent+0x68>)
 80113e6:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80113ea:	4906      	ldr	r1, [pc, #24]	; (8011404 <OnRxWindow1TimerEvent+0x70>)
 80113ec:	4806      	ldr	r0, [pc, #24]	; (8011408 <OnRxWindow1TimerEvent+0x74>)
 80113ee:	f001 fb55 	bl	8012a9c <RxWindowSetup>
}
 80113f2:	bf00      	nop
 80113f4:	3708      	adds	r7, #8
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	200006d4 	.word	0x200006d4
 8011400:	20000bf0 	.word	0x20000bf0
 8011404:	20000a8c 	.word	0x20000a8c
 8011408:	20000a54 	.word	0x20000a54

0801140c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b082      	sub	sp, #8
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011414:	4b19      	ldr	r3, [pc, #100]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 8011416:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 801141a:	2b00      	cmp	r3, #0
 801141c:	d029      	beq.n	8011472 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801141e:	4b17      	ldr	r3, [pc, #92]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 8011420:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011424:	4b15      	ldr	r3, [pc, #84]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 8011426:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801142a:	4b15      	ldr	r3, [pc, #84]	; (8011480 <OnRxWindow2TimerEvent+0x74>)
 801142c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801142e:	4a13      	ldr	r2, [pc, #76]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 8011430:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011434:	4b12      	ldr	r3, [pc, #72]	; (8011480 <OnRxWindow2TimerEvent+0x74>)
 8011436:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801143a:	4b10      	ldr	r3, [pc, #64]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 801143c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8011440:	4b0f      	ldr	r3, [pc, #60]	; (8011480 <OnRxWindow2TimerEvent+0x74>)
 8011442:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011446:	4b0d      	ldr	r3, [pc, #52]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 8011448:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 801144c:	4b0b      	ldr	r3, [pc, #44]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 801144e:	2200      	movs	r2, #0
 8011450:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8011454:	4b09      	ldr	r3, [pc, #36]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 8011456:	2201      	movs	r2, #1
 8011458:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801145c:	4b08      	ldr	r3, [pc, #32]	; (8011480 <OnRxWindow2TimerEvent+0x74>)
 801145e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8011462:	4b06      	ldr	r3, [pc, #24]	; (801147c <OnRxWindow2TimerEvent+0x70>)
 8011464:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8011468:	4906      	ldr	r1, [pc, #24]	; (8011484 <OnRxWindow2TimerEvent+0x78>)
 801146a:	4807      	ldr	r0, [pc, #28]	; (8011488 <OnRxWindow2TimerEvent+0x7c>)
 801146c:	f001 fb16 	bl	8012a9c <RxWindowSetup>
 8011470:	e000      	b.n	8011474 <OnRxWindow2TimerEvent+0x68>
        return;
 8011472:	bf00      	nop
}
 8011474:	3708      	adds	r7, #8
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	200006d4 	.word	0x200006d4
 8011480:	20000bf0 	.word	0x20000bf0
 8011484:	20000aa4 	.word	0x20000aa4
 8011488:	20000a6c 	.word	0x20000a6c

0801148c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011494:	4808      	ldr	r0, [pc, #32]	; (80114b8 <OnRetransmitTimeoutTimerEvent+0x2c>)
 8011496:	f00c f85f 	bl	801d558 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801149a:	4b08      	ldr	r3, [pc, #32]	; (80114bc <OnRetransmitTimeoutTimerEvent+0x30>)
 801149c:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d003      	beq.n	80114ac <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 80114a4:	4b05      	ldr	r3, [pc, #20]	; (80114bc <OnRetransmitTimeoutTimerEvent+0x30>)
 80114a6:	2201      	movs	r2, #1
 80114a8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    }
    OnMacProcessNotify( );
 80114ac:	f001 ff0e 	bl	80132cc <OnMacProcessNotify>
}
 80114b0:	bf00      	nop
 80114b2:	3708      	adds	r7, #8
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}
 80114b8:	20000ad4 	.word	0x20000ad4
 80114bc:	200006d4 	.word	0x200006d4

080114c0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60ba      	str	r2, [r7, #8]
 80114c8:	607b      	str	r3, [r7, #4]
 80114ca:	4603      	mov	r3, r0
 80114cc:	73fb      	strb	r3, [r7, #15]
 80114ce:	460b      	mov	r3, r1
 80114d0:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d005      	beq.n	80114e4 <GetFCntDown+0x24>
 80114d8:	69bb      	ldr	r3, [r7, #24]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d002      	beq.n	80114e4 <GetFCntDown+0x24>
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d101      	bne.n	80114e8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80114e4:	2309      	movs	r3, #9
 80114e6:	e028      	b.n	801153a <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80114e8:	7bfb      	ldrb	r3, [r7, #15]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d016      	beq.n	801151c <GetFCntDown+0x5c>
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d118      	bne.n	8011524 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80114f2:	79bb      	ldrb	r3, [r7, #6]
 80114f4:	2b01      	cmp	r3, #1
 80114f6:	d10d      	bne.n	8011514 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80114f8:	7bbb      	ldrb	r3, [r7, #14]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <GetFCntDown+0x44>
 80114fe:	7bbb      	ldrb	r3, [r7, #14]
 8011500:	2b03      	cmp	r3, #3
 8011502:	d103      	bne.n	801150c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	2202      	movs	r2, #2
 8011508:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801150a:	e00d      	b.n	8011528 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 801150c:	69bb      	ldr	r3, [r7, #24]
 801150e:	2201      	movs	r2, #1
 8011510:	701a      	strb	r2, [r3, #0]
            break;
 8011512:	e009      	b.n	8011528 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	2203      	movs	r2, #3
 8011518:	701a      	strb	r2, [r3, #0]
            break;
 801151a:	e005      	b.n	8011528 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 801151c:	69bb      	ldr	r3, [r7, #24]
 801151e:	2204      	movs	r2, #4
 8011520:	701a      	strb	r2, [r3, #0]
            break;
 8011522:	e001      	b.n	8011528 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8011524:	2305      	movs	r3, #5
 8011526:	e008      	b.n	801153a <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8011528:	69bb      	ldr	r3, [r7, #24]
 801152a:	7818      	ldrb	r0, [r3, #0]
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	89db      	ldrh	r3, [r3, #14]
 8011530:	69fa      	ldr	r2, [r7, #28]
 8011532:	4619      	mov	r1, r3
 8011534:	f004 fd90 	bl	8016058 <LoRaMacCryptoGetFCntDown>
 8011538:	4603      	mov	r3, r0
}
 801153a:	4618      	mov	r0, r3
 801153c:	3710      	adds	r7, #16
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
	...

08011544 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8011544:	b5b0      	push	{r4, r5, r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	4603      	mov	r3, r0
 801154c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801154e:	2303      	movs	r3, #3
 8011550:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8011552:	4b6e      	ldr	r3, [pc, #440]	; (801170c <SwitchClass+0x1c8>)
 8011554:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011558:	2b02      	cmp	r3, #2
 801155a:	f000 80bb 	beq.w	80116d4 <SwitchClass+0x190>
 801155e:	2b02      	cmp	r3, #2
 8011560:	f300 80ce 	bgt.w	8011700 <SwitchClass+0x1bc>
 8011564:	2b00      	cmp	r3, #0
 8011566:	d003      	beq.n	8011570 <SwitchClass+0x2c>
 8011568:	2b01      	cmp	r3, #1
 801156a:	f000 80a5 	beq.w	80116b8 <SwitchClass+0x174>
 801156e:	e0c7      	b.n	8011700 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8011570:	79fb      	ldrb	r3, [r7, #7]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d109      	bne.n	801158a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8011576:	4b65      	ldr	r3, [pc, #404]	; (801170c <SwitchClass+0x1c8>)
 8011578:	4a64      	ldr	r2, [pc, #400]	; (801170c <SwitchClass+0x1c8>)
 801157a:	3374      	adds	r3, #116	; 0x74
 801157c:	326c      	adds	r2, #108	; 0x6c
 801157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011582:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8011586:	2300      	movs	r3, #0
 8011588:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 801158a:	79fb      	ldrb	r3, [r7, #7]
 801158c:	2b01      	cmp	r3, #1
 801158e:	d10c      	bne.n	80115aa <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8011590:	79fb      	ldrb	r3, [r7, #7]
 8011592:	4618      	mov	r0, r3
 8011594:	f003 fc7e 	bl	8014e94 <LoRaMacClassBSwitchClass>
 8011598:	4603      	mov	r3, r0
 801159a:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 801159c:	7bfb      	ldrb	r3, [r7, #15]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d103      	bne.n	80115aa <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80115a2:	4a5a      	ldr	r2, [pc, #360]	; (801170c <SwitchClass+0x1c8>)
 80115a4:	79fb      	ldrb	r3, [r7, #7]
 80115a6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80115aa:	79fb      	ldrb	r3, [r7, #7]
 80115ac:	2b02      	cmp	r3, #2
 80115ae:	f040 80a2 	bne.w	80116f6 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80115b2:	4a56      	ldr	r2, [pc, #344]	; (801170c <SwitchClass+0x1c8>)
 80115b4:	79fb      	ldrb	r3, [r7, #7]
 80115b6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80115ba:	4a55      	ldr	r2, [pc, #340]	; (8011710 <SwitchClass+0x1cc>)
 80115bc:	4b54      	ldr	r3, [pc, #336]	; (8011710 <SwitchClass+0x1cc>)
 80115be:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 80115c2:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 80115c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80115ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80115ce:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80115d2:	4b4f      	ldr	r3, [pc, #316]	; (8011710 <SwitchClass+0x1cc>)
 80115d4:	2202      	movs	r2, #2
 80115d6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80115da:	2300      	movs	r3, #0
 80115dc:	73bb      	strb	r3, [r7, #14]
 80115de:	e05b      	b.n	8011698 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80115e0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80115e4:	4949      	ldr	r1, [pc, #292]	; (801170c <SwitchClass+0x1c8>)
 80115e6:	4613      	mov	r3, r2
 80115e8:	005b      	lsls	r3, r3, #1
 80115ea:	4413      	add	r3, r2
 80115ec:	011b      	lsls	r3, r3, #4
 80115ee:	440b      	add	r3, r1
 80115f0:	33e9      	adds	r3, #233	; 0xe9
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d049      	beq.n	801168c <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 80115f8:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80115fc:	4943      	ldr	r1, [pc, #268]	; (801170c <SwitchClass+0x1c8>)
 80115fe:	4613      	mov	r3, r2
 8011600:	005b      	lsls	r3, r3, #1
 8011602:	4413      	add	r3, r2
 8011604:	011b      	lsls	r3, r3, #4
 8011606:	440b      	add	r3, r1
 8011608:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801160c:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801160e:	2b02      	cmp	r3, #2
 8011610:	d13c      	bne.n	801168c <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8011612:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011616:	493d      	ldr	r1, [pc, #244]	; (801170c <SwitchClass+0x1c8>)
 8011618:	4613      	mov	r3, r2
 801161a:	005b      	lsls	r3, r3, #1
 801161c:	4413      	add	r3, r2
 801161e:	011b      	lsls	r3, r3, #4
 8011620:	440b      	add	r3, r1
 8011622:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4a38      	ldr	r2, [pc, #224]	; (801170c <SwitchClass+0x1c8>)
 801162a:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 801162c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8011630:	4936      	ldr	r1, [pc, #216]	; (801170c <SwitchClass+0x1c8>)
 8011632:	4613      	mov	r3, r2
 8011634:	005b      	lsls	r3, r3, #1
 8011636:	4413      	add	r3, r2
 8011638:	011b      	lsls	r3, r3, #4
 801163a:	440b      	add	r3, r1
 801163c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8011640:	f993 3000 	ldrsb.w	r3, [r3]
 8011644:	b2da      	uxtb	r2, r3
 8011646:	4b31      	ldr	r3, [pc, #196]	; (801170c <SwitchClass+0x1c8>)
 8011648:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801164c:	4b30      	ldr	r3, [pc, #192]	; (8011710 <SwitchClass+0x1cc>)
 801164e:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8011652:	4b2f      	ldr	r3, [pc, #188]	; (8011710 <SwitchClass+0x1cc>)
 8011654:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011658:	4b2c      	ldr	r3, [pc, #176]	; (801170c <SwitchClass+0x1c8>)
 801165a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801165c:	4a2c      	ldr	r2, [pc, #176]	; (8011710 <SwitchClass+0x1cc>)
 801165e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011662:	4b2a      	ldr	r3, [pc, #168]	; (801170c <SwitchClass+0x1c8>)
 8011664:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8011668:	4b29      	ldr	r3, [pc, #164]	; (8011710 <SwitchClass+0x1cc>)
 801166a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801166e:	4b27      	ldr	r3, [pc, #156]	; (801170c <SwitchClass+0x1c8>)
 8011670:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011674:	4b26      	ldr	r3, [pc, #152]	; (8011710 <SwitchClass+0x1cc>)
 8011676:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801167a:	4b25      	ldr	r3, [pc, #148]	; (8011710 <SwitchClass+0x1cc>)
 801167c:	2203      	movs	r2, #3
 801167e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8011682:	4b23      	ldr	r3, [pc, #140]	; (8011710 <SwitchClass+0x1cc>)
 8011684:	2201      	movs	r2, #1
 8011686:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 801168a:	e009      	b.n	80116a0 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801168c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011690:	b2db      	uxtb	r3, r3
 8011692:	3301      	adds	r3, #1
 8011694:	b2db      	uxtb	r3, r3
 8011696:	73bb      	strb	r3, [r7, #14]
 8011698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801169c:	2b00      	cmp	r3, #0
 801169e:	dd9f      	ble.n	80115e0 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80116a0:	4b1b      	ldr	r3, [pc, #108]	; (8011710 <SwitchClass+0x1cc>)
 80116a2:	2200      	movs	r2, #0
 80116a4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80116a8:	4b1a      	ldr	r3, [pc, #104]	; (8011714 <SwitchClass+0x1d0>)
 80116aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ac:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80116ae:	f001 fa29 	bl	8012b04 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80116b2:	2300      	movs	r3, #0
 80116b4:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80116b6:	e01e      	b.n	80116f6 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80116b8:	79fb      	ldrb	r3, [r7, #7]
 80116ba:	4618      	mov	r0, r3
 80116bc:	f003 fbea 	bl	8014e94 <LoRaMacClassBSwitchClass>
 80116c0:	4603      	mov	r3, r0
 80116c2:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80116c4:	7bfb      	ldrb	r3, [r7, #15]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d117      	bne.n	80116fa <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80116ca:	4a10      	ldr	r2, [pc, #64]	; (801170c <SwitchClass+0x1c8>)
 80116cc:	79fb      	ldrb	r3, [r7, #7]
 80116ce:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80116d2:	e012      	b.n	80116fa <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80116d4:	79fb      	ldrb	r3, [r7, #7]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d111      	bne.n	80116fe <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 80116da:	4b0d      	ldr	r3, [pc, #52]	; (8011710 <SwitchClass+0x1cc>)
 80116dc:	2206      	movs	r2, #6
 80116de:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 80116e2:	4a0a      	ldr	r2, [pc, #40]	; (801170c <SwitchClass+0x1c8>)
 80116e4:	79fb      	ldrb	r3, [r7, #7]
 80116e6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80116ea:	4b0a      	ldr	r3, [pc, #40]	; (8011714 <SwitchClass+0x1d0>)
 80116ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ee:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80116f0:	2300      	movs	r3, #0
 80116f2:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 80116f4:	e003      	b.n	80116fe <SwitchClass+0x1ba>
            break;
 80116f6:	bf00      	nop
 80116f8:	e002      	b.n	8011700 <SwitchClass+0x1bc>
            break;
 80116fa:	bf00      	nop
 80116fc:	e000      	b.n	8011700 <SwitchClass+0x1bc>
            break;
 80116fe:	bf00      	nop
        }
    }

    return status;
 8011700:	7bfb      	ldrb	r3, [r7, #15]
}
 8011702:	4618      	mov	r0, r3
 8011704:	3710      	adds	r7, #16
 8011706:	46bd      	mov	sp, r7
 8011708:	bdb0      	pop	{r4, r5, r7, pc}
 801170a:	bf00      	nop
 801170c:	20000bf0 	.word	0x20000bf0
 8011710:	200006d4 	.word	0x200006d4
 8011714:	0801ee44 	.word	0x0801ee44

08011718 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b086      	sub	sp, #24
 801171c:	af00      	add	r7, sp, #0
 801171e:	4603      	mov	r3, r0
 8011720:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011722:	4b10      	ldr	r3, [pc, #64]	; (8011764 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011724:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011728:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801172a:	79fb      	ldrb	r3, [r7, #7]
 801172c:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801172e:	230d      	movs	r3, #13
 8011730:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011732:	4b0c      	ldr	r3, [pc, #48]	; (8011764 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011734:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8011738:	2b00      	cmp	r3, #0
 801173a:	d001      	beq.n	8011740 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801173c:	230e      	movs	r3, #14
 801173e:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011740:	4b08      	ldr	r3, [pc, #32]	; (8011764 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8011742:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011746:	f107 0210 	add.w	r2, r7, #16
 801174a:	4611      	mov	r1, r2
 801174c:	4618      	mov	r0, r3
 801174e:	f005 faee 	bl	8016d2e <RegionGetPhyParam>
 8011752:	4603      	mov	r3, r0
 8011754:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	b2db      	uxtb	r3, r3
}
 801175a:	4618      	mov	r0, r3
 801175c:	3718      	adds	r7, #24
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	20000bf0 	.word	0x20000bf0

08011768 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	4603      	mov	r3, r0
 8011770:	71fb      	strb	r3, [r7, #7]
 8011772:	460b      	mov	r3, r1
 8011774:	71bb      	strb	r3, [r7, #6]
 8011776:	4613      	mov	r3, r2
 8011778:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801177a:	2300      	movs	r3, #0
 801177c:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011782:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011786:	4618      	mov	r0, r3
 8011788:	f7ff ffc6 	bl	8011718 <GetMaxAppPayloadWithoutFOptsLength>
 801178c:	4603      	mov	r3, r0
 801178e:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8011790:	79fb      	ldrb	r3, [r7, #7]
 8011792:	b29a      	uxth	r2, r3
 8011794:	797b      	ldrb	r3, [r7, #5]
 8011796:	b29b      	uxth	r3, r3
 8011798:	4413      	add	r3, r2
 801179a:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 801179c:	89ba      	ldrh	r2, [r7, #12]
 801179e:	89fb      	ldrh	r3, [r7, #14]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	d804      	bhi.n	80117ae <ValidatePayloadLength+0x46>
 80117a4:	89bb      	ldrh	r3, [r7, #12]
 80117a6:	2bff      	cmp	r3, #255	; 0xff
 80117a8:	d801      	bhi.n	80117ae <ValidatePayloadLength+0x46>
    {
        return true;
 80117aa:	2301      	movs	r3, #1
 80117ac:	e000      	b.n	80117b0 <ValidatePayloadLength+0x48>
    }
    return false;
 80117ae:	2300      	movs	r3, #0
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3710      	adds	r7, #16
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}

080117b8 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80117b8:	b590      	push	{r4, r7, lr}
 80117ba:	b0a5      	sub	sp, #148	; 0x94
 80117bc:	af02      	add	r7, sp, #8
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	4608      	mov	r0, r1
 80117c2:	4611      	mov	r1, r2
 80117c4:	461a      	mov	r2, r3
 80117c6:	4603      	mov	r3, r0
 80117c8:	70fb      	strb	r3, [r7, #3]
 80117ca:	460b      	mov	r3, r1
 80117cc:	70bb      	strb	r3, [r7, #2]
 80117ce:	4613      	mov	r3, r2
 80117d0:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80117d2:	2300      	movs	r3, #0
 80117d4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 80117d8:	2300      	movs	r3, #0
 80117da:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80117de:	2300      	movs	r3, #0
 80117e0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80117e4:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f000 84ab 	beq.w	8012144 <ProcessMacCommands+0x98c>
 80117ee:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	f040 84ac 	bne.w	8012150 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 80117f8:	f000 bca4 	b.w	8012144 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80117fc:	78fb      	ldrb	r3, [r7, #3]
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	4413      	add	r3, r2
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	4618      	mov	r0, r3
 8011806:	f003 fe45 	bl	8015494 <LoRaMacCommandsGetCmdSize>
 801180a:	4603      	mov	r3, r0
 801180c:	461a      	mov	r2, r3
 801180e:	78fb      	ldrb	r3, [r7, #3]
 8011810:	441a      	add	r2, r3
 8011812:	78bb      	ldrb	r3, [r7, #2]
 8011814:	429a      	cmp	r2, r3
 8011816:	f300 849d 	bgt.w	8012154 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801181a:	78fb      	ldrb	r3, [r7, #3]
 801181c:	1c5a      	adds	r2, r3, #1
 801181e:	70fa      	strb	r2, [r7, #3]
 8011820:	461a      	mov	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4413      	add	r3, r2
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	3b02      	subs	r3, #2
 801182a:	2b11      	cmp	r3, #17
 801182c:	f200 8494 	bhi.w	8012158 <ProcessMacCommands+0x9a0>
 8011830:	a201      	add	r2, pc, #4	; (adr r2, 8011838 <ProcessMacCommands+0x80>)
 8011832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011836:	bf00      	nop
 8011838:	08011881 	.word	0x08011881
 801183c:	080118c3 	.word	0x080118c3
 8011840:	08011a3f 	.word	0x08011a3f
 8011844:	08011a7d 	.word	0x08011a7d
 8011848:	08011b75 	.word	0x08011b75
 801184c:	08011bc5 	.word	0x08011bc5
 8011850:	08011c81 	.word	0x08011c81
 8011854:	08011cd7 	.word	0x08011cd7
 8011858:	08011dbd 	.word	0x08011dbd
 801185c:	08012159 	.word	0x08012159
 8011860:	08012159 	.word	0x08012159
 8011864:	08011e65 	.word	0x08011e65
 8011868:	08012159 	.word	0x08012159
 801186c:	08012159 	.word	0x08012159
 8011870:	08011f85 	.word	0x08011f85
 8011874:	08011fb9 	.word	0x08011fb9
 8011878:	08012049 	.word	0x08012049
 801187c:	080120bf 	.word	0x080120bf
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8011880:	2005      	movs	r0, #5
 8011882:	f003 ffdf 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 8011886:	4603      	mov	r3, r0
 8011888:	2b00      	cmp	r3, #0
 801188a:	f000 845b 	beq.w	8012144 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801188e:	2105      	movs	r1, #5
 8011890:	2000      	movs	r0, #0
 8011892:	f003 ff4b 	bl	801572c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8011896:	78fb      	ldrb	r3, [r7, #3]
 8011898:	1c5a      	adds	r2, r3, #1
 801189a:	70fa      	strb	r2, [r7, #3]
 801189c:	461a      	mov	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4413      	add	r3, r2
 80118a2:	781a      	ldrb	r2, [r3, #0]
 80118a4:	4bb0      	ldr	r3, [pc, #704]	; (8011b68 <ProcessMacCommands+0x3b0>)
 80118a6:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80118aa:	78fb      	ldrb	r3, [r7, #3]
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	70fa      	strb	r2, [r7, #3]
 80118b0:	461a      	mov	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	4413      	add	r3, r2
 80118b6:	781a      	ldrb	r2, [r3, #0]
 80118b8:	4bab      	ldr	r3, [pc, #684]	; (8011b68 <ProcessMacCommands+0x3b0>)
 80118ba:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
                }
                break;
 80118be:	f000 bc41 	b.w	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80118c2:	2300      	movs	r3, #0
 80118c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80118c8:	2300      	movs	r3, #0
 80118ca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80118d4:	2300      	movs	r3, #0
 80118d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 80118da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80118de:	f083 0301 	eor.w	r3, r3, #1
 80118e2:	b2db      	uxtb	r3, r3
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	f000 80a5 	beq.w	8011a34 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 80118ea:	2301      	movs	r3, #1
 80118ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80118f0:	78fb      	ldrb	r3, [r7, #3]
 80118f2:	3b01      	subs	r3, #1
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	4413      	add	r3, r2
 80118f8:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80118fa:	4b9c      	ldr	r3, [pc, #624]	; (8011b6c <ProcessMacCommands+0x3b4>)
 80118fc:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8011900:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011904:	4b99      	ldr	r3, [pc, #612]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011906:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801190a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801190e:	4b97      	ldr	r3, [pc, #604]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011910:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011914:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011918:	4b94      	ldr	r3, [pc, #592]	; (8011b6c <ProcessMacCommands+0x3b4>)
 801191a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801191e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011922:	4b92      	ldr	r3, [pc, #584]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011924:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8011928:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 801192c:	4b8f      	ldr	r3, [pc, #572]	; (8011b6c <ProcessMacCommands+0x3b4>)
 801192e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8011932:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011934:	4b8d      	ldr	r3, [pc, #564]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011936:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801193a:	2b00      	cmp	r3, #0
 801193c:	d008      	beq.n	8011950 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 801193e:	78ba      	ldrb	r2, [r7, #2]
 8011940:	78fb      	ldrb	r3, [r7, #3]
 8011942:	1ad3      	subs	r3, r2, r3
 8011944:	b2db      	uxtb	r3, r3
 8011946:	3301      	adds	r3, #1
 8011948:	b2db      	uxtb	r3, r3
 801194a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 801194e:	e002      	b.n	8011956 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 8011950:	2305      	movs	r3, #5
 8011952:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8011956:	4b85      	ldr	r3, [pc, #532]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011958:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801195c:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8011960:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8011964:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011968:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801196c:	9301      	str	r3, [sp, #4]
 801196e:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8011972:	9300      	str	r3, [sp, #0]
 8011974:	4623      	mov	r3, r4
 8011976:	f005 fa97 	bl	8016ea8 <RegionLinkAdrReq>
 801197a:	4603      	mov	r3, r0
 801197c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8011980:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011984:	f003 0307 	and.w	r3, r3, #7
 8011988:	2b07      	cmp	r3, #7
 801198a:	d119      	bne.n	80119c0 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 801198c:	4b77      	ldr	r3, [pc, #476]	; (8011b6c <ProcessMacCommands+0x3b4>)
 801198e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8011992:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8011996:	429a      	cmp	r2, r3
 8011998:	da03      	bge.n	80119a2 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 801199a:	4b74      	ldr	r3, [pc, #464]	; (8011b6c <ProcessMacCommands+0x3b4>)
 801199c:	2201      	movs	r2, #1
 801199e:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80119a2:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80119a6:	4b71      	ldr	r3, [pc, #452]	; (8011b6c <ProcessMacCommands+0x3b4>)
 80119a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80119ac:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80119b0:	4b6e      	ldr	r3, [pc, #440]	; (8011b6c <ProcessMacCommands+0x3b4>)
 80119b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80119b6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80119ba:	4b6c      	ldr	r3, [pc, #432]	; (8011b6c <ProcessMacCommands+0x3b4>)
 80119bc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80119c0:	2300      	movs	r3, #0
 80119c2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80119c6:	e00b      	b.n	80119e0 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80119c8:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80119cc:	2201      	movs	r2, #1
 80119ce:	4619      	mov	r1, r3
 80119d0:	2003      	movs	r0, #3
 80119d2:	f003 fbff 	bl	80151d4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80119d6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80119da:	3301      	adds	r3, #1
 80119dc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80119e0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80119e4:	4a62      	ldr	r2, [pc, #392]	; (8011b70 <ProcessMacCommands+0x3b8>)
 80119e6:	fba2 2303 	umull	r2, r3, r2, r3
 80119ea:	089b      	lsrs	r3, r3, #2
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d3e8      	bcc.n	80119c8 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 80119f6:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80119fa:	78fb      	ldrb	r3, [r7, #3]
 80119fc:	4413      	add	r3, r2
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	3b01      	subs	r3, #1
 8011a02:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8011a04:	78fa      	ldrb	r2, [r7, #3]
 8011a06:	78bb      	ldrb	r3, [r7, #2]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d20a      	bcs.n	8011a22 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8011a0c:	78fb      	ldrb	r3, [r7, #3]
 8011a0e:	1c5a      	adds	r2, r3, #1
 8011a10:	70fa      	strb	r2, [r7, #3]
 8011a12:	461a      	mov	r2, r3
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	4413      	add	r3, r2
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	2b03      	cmp	r3, #3
 8011a1c:	f43f af68 	beq.w	80118f0 <ProcessMacCommands+0x138>
 8011a20:	e000      	b.n	8011a24 <ProcessMacCommands+0x26c>
                            break;
 8011a22:	bf00      	nop

                    if( macIndex < commandsSize )
 8011a24:	78fa      	ldrb	r2, [r7, #3]
 8011a26:	78bb      	ldrb	r3, [r7, #2]
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d206      	bcs.n	8011a3a <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 8011a2c:	78fb      	ldrb	r3, [r7, #3]
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 8011a32:	e002      	b.n	8011a3a <ProcessMacCommands+0x282>
                    macIndex += 4;
 8011a34:	78fb      	ldrb	r3, [r7, #3]
 8011a36:	3304      	adds	r3, #4
 8011a38:	70fb      	strb	r3, [r7, #3]
                break;
 8011a3a:	bf00      	nop
 8011a3c:	e382      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8011a3e:	78fb      	ldrb	r3, [r7, #3]
 8011a40:	1c5a      	adds	r2, r3, #1
 8011a42:	70fa      	strb	r2, [r7, #3]
 8011a44:	461a      	mov	r2, r3
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	4413      	add	r3, r2
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	f003 030f 	and.w	r3, r3, #15
 8011a50:	b2da      	uxtb	r2, r3
 8011a52:	4b46      	ldr	r3, [pc, #280]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011a54:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8011a58:	4b44      	ldr	r3, [pc, #272]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011a5a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8011a5e:	461a      	mov	r2, r3
 8011a60:	2301      	movs	r3, #1
 8011a62:	4093      	lsls	r3, r2
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	4b41      	ldr	r3, [pc, #260]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011a68:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8011a6c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011a70:	2200      	movs	r2, #0
 8011a72:	4619      	mov	r1, r3
 8011a74:	2004      	movs	r0, #4
 8011a76:	f003 fbad 	bl	80151d4 <LoRaMacCommandsAddCmd>
                break;
 8011a7a:	e363      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8011a7c:	2307      	movs	r3, #7
 8011a7e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8011a82:	78fb      	ldrb	r3, [r7, #3]
 8011a84:	687a      	ldr	r2, [r7, #4]
 8011a86:	4413      	add	r3, r2
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	091b      	lsrs	r3, r3, #4
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	b25b      	sxtb	r3, r3
 8011a90:	f003 0307 	and.w	r3, r3, #7
 8011a94:	b25b      	sxtb	r3, r3
 8011a96:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8011a9a:	78fb      	ldrb	r3, [r7, #3]
 8011a9c:	687a      	ldr	r2, [r7, #4]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	b25b      	sxtb	r3, r3
 8011aa4:	f003 030f 	and.w	r3, r3, #15
 8011aa8:	b25b      	sxtb	r3, r3
 8011aaa:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8011aae:	78fb      	ldrb	r3, [r7, #3]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8011ab4:	78fb      	ldrb	r3, [r7, #3]
 8011ab6:	1c5a      	adds	r2, r3, #1
 8011ab8:	70fa      	strb	r2, [r7, #3]
 8011aba:	461a      	mov	r2, r3
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4413      	add	r3, r2
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011ac4:	78fb      	ldrb	r3, [r7, #3]
 8011ac6:	1c5a      	adds	r2, r3, #1
 8011ac8:	70fa      	strb	r2, [r7, #3]
 8011aca:	461a      	mov	r2, r3
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4413      	add	r3, r2
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	021a      	lsls	r2, r3, #8
 8011ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ad6:	4313      	orrs	r3, r2
 8011ad8:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011ada:	78fb      	ldrb	r3, [r7, #3]
 8011adc:	1c5a      	adds	r2, r3, #1
 8011ade:	70fa      	strb	r2, [r7, #3]
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4413      	add	r3, r2
 8011ae6:	781b      	ldrb	r3, [r3, #0]
 8011ae8:	041a      	lsls	r2, r3, #16
 8011aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aec:	4313      	orrs	r3, r2
 8011aee:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8011af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011af2:	2264      	movs	r2, #100	; 0x64
 8011af4:	fb02 f303 	mul.w	r3, r2, r3
 8011af8:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8011afa:	4b1c      	ldr	r3, [pc, #112]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011afc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011b00:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8011b04:	4611      	mov	r1, r2
 8011b06:	4618      	mov	r0, r3
 8011b08:	f005 f9e8 	bl	8016edc <RegionRxParamSetupReq>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8011b12:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011b16:	f003 0307 	and.w	r3, r3, #7
 8011b1a:	2b07      	cmp	r3, #7
 8011b1c:	d117      	bne.n	8011b4e <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8011b1e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8011b22:	b2da      	uxtb	r2, r3
 8011b24:	4b11      	ldr	r3, [pc, #68]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011b26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8011b2a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	4b0e      	ldr	r3, [pc, #56]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8011b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b38:	4a0c      	ldr	r2, [pc, #48]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011b3a:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8011b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b3e:	4a0b      	ldr	r2, [pc, #44]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011b40:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8011b42:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8011b46:	b2da      	uxtb	r2, r3
 8011b48:	4b08      	ldr	r3, [pc, #32]	; (8011b6c <ProcessMacCommands+0x3b4>)
 8011b4a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 8011b4e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011b52:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8011b56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	2005      	movs	r0, #5
 8011b60:	f003 fb38 	bl	80151d4 <LoRaMacCommandsAddCmd>
                break;
 8011b64:	bf00      	nop
 8011b66:	e2ed      	b.n	8012144 <ProcessMacCommands+0x98c>
 8011b68:	200006d4 	.word	0x200006d4
 8011b6c:	20000bf0 	.word	0x20000bf0
 8011b70:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8011b74:	23ff      	movs	r3, #255	; 0xff
 8011b76:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8011b7a:	4bb7      	ldr	r3, [pc, #732]	; (8011e58 <ProcessMacCommands+0x6a0>)
 8011b7c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00d      	beq.n	8011ba0 <ProcessMacCommands+0x3e8>
 8011b84:	4bb4      	ldr	r3, [pc, #720]	; (8011e58 <ProcessMacCommands+0x6a0>)
 8011b86:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d007      	beq.n	8011ba0 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8011b90:	4bb1      	ldr	r3, [pc, #708]	; (8011e58 <ProcessMacCommands+0x6a0>)
 8011b92:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	4798      	blx	r3
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8011ba0:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011ba4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8011ba8:	787b      	ldrb	r3, [r7, #1]
 8011baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8011bb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011bb8:	2202      	movs	r2, #2
 8011bba:	4619      	mov	r1, r3
 8011bbc:	2006      	movs	r0, #6
 8011bbe:	f003 fb09 	bl	80151d4 <LoRaMacCommandsAddCmd>
                break;
 8011bc2:	e2bf      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8011bc4:	2303      	movs	r3, #3
 8011bc6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8011bca:	78fb      	ldrb	r3, [r7, #3]
 8011bcc:	1c5a      	adds	r2, r3, #1
 8011bce:	70fa      	strb	r2, [r7, #3]
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	b25b      	sxtb	r3, r3
 8011bda:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8011bde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011be2:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8011be4:	78fb      	ldrb	r3, [r7, #3]
 8011be6:	1c5a      	adds	r2, r3, #1
 8011be8:	70fa      	strb	r2, [r7, #3]
 8011bea:	461a      	mov	r2, r3
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	4413      	add	r3, r2
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011bf4:	78fb      	ldrb	r3, [r7, #3]
 8011bf6:	1c5a      	adds	r2, r3, #1
 8011bf8:	70fa      	strb	r2, [r7, #3]
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	4413      	add	r3, r2
 8011c00:	781b      	ldrb	r3, [r3, #0]
 8011c02:	021a      	lsls	r2, r3, #8
 8011c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c06:	4313      	orrs	r3, r2
 8011c08:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011c0a:	78fb      	ldrb	r3, [r7, #3]
 8011c0c:	1c5a      	adds	r2, r3, #1
 8011c0e:	70fa      	strb	r2, [r7, #3]
 8011c10:	461a      	mov	r2, r3
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	4413      	add	r3, r2
 8011c16:	781b      	ldrb	r3, [r3, #0]
 8011c18:	041a      	lsls	r2, r3, #16
 8011c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	2264      	movs	r2, #100	; 0x64
 8011c24:	fb02 f303 	mul.w	r3, r2, r3
 8011c28:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8011c2e:	78fb      	ldrb	r3, [r7, #3]
 8011c30:	1c5a      	adds	r2, r3, #1
 8011c32:	70fa      	strb	r2, [r7, #3]
 8011c34:	461a      	mov	r2, r3
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	4413      	add	r3, r2
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	b25b      	sxtb	r3, r3
 8011c3e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8011c42:	4b86      	ldr	r3, [pc, #536]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011c44:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011c48:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8011c4c:	4611      	mov	r1, r2
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f005 f957 	bl	8016f02 <RegionNewChannelReq>
 8011c54:	4603      	mov	r3, r0
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8011c5c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011c60:	b25b      	sxtb	r3, r3
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	db0a      	blt.n	8011c7c <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 8011c66:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011c6a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8011c6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011c72:	2201      	movs	r2, #1
 8011c74:	4619      	mov	r1, r3
 8011c76:	2007      	movs	r0, #7
 8011c78:	f003 faac 	bl	80151d4 <LoRaMacCommandsAddCmd>
                }
                break;
 8011c7c:	bf00      	nop
 8011c7e:	e261      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8011c80:	78fb      	ldrb	r3, [r7, #3]
 8011c82:	1c5a      	adds	r2, r3, #1
 8011c84:	70fa      	strb	r2, [r7, #3]
 8011c86:	461a      	mov	r2, r3
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	4413      	add	r3, r2
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	f003 030f 	and.w	r3, r3, #15
 8011c92:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8011c96:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d104      	bne.n	8011ca8 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8011c9e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8011ca8:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011cb0:	fb02 f303 	mul.w	r3, r2, r3
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	4b69      	ldr	r3, [pc, #420]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011cb8:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011cba:	4b68      	ldr	r3, [pc, #416]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cbe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011cc2:	4a66      	ldr	r2, [pc, #408]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011cc4:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8011cc6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011cca:	2200      	movs	r2, #0
 8011ccc:	4619      	mov	r1, r3
 8011cce:	2008      	movs	r0, #8
 8011cd0:	f003 fa80 	bl	80151d4 <LoRaMacCommandsAddCmd>
                break;
 8011cd4:	e236      	b.n	8012144 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8011cd6:	78fb      	ldrb	r3, [r7, #3]
 8011cd8:	1c5a      	adds	r2, r3, #1
 8011cda:	70fa      	strb	r2, [r7, #3]
 8011cdc:	461a      	mov	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	781b      	ldrb	r3, [r3, #0]
 8011ce4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8011cf4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011cf8:	f003 0320 	and.w	r3, r3, #32
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8011d00:	2301      	movs	r3, #1
 8011d02:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8011d06:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011d0a:	f003 0310 	and.w	r3, r3, #16
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d002      	beq.n	8011d18 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8011d12:	2301      	movs	r3, #1
 8011d14:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8011d18:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011d1c:	f003 030f 	and.w	r3, r3, #15
 8011d20:	b2db      	uxtb	r3, r3
 8011d22:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8011d26:	4b4d      	ldr	r3, [pc, #308]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011d28:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011d2c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8011d30:	4611      	mov	r1, r2
 8011d32:	4618      	mov	r0, r3
 8011d34:	f005 f8f8 	bl	8016f28 <RegionTxParamSetupReq>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d3e:	d03b      	beq.n	8011db8 <ProcessMacCommands+0x600>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8011d40:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8011d44:	4b45      	ldr	r3, [pc, #276]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011d46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8011d4a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8011d4e:	4b43      	ldr	r3, [pc, #268]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011d50:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8011d54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011d58:	461a      	mov	r2, r3
 8011d5a:	4b41      	ldr	r3, [pc, #260]	; (8011e60 <ProcessMacCommands+0x6a8>)
 8011d5c:	5c9b      	ldrb	r3, [r3, r2]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7ee ff46 	bl	8000bf0 <__aeabi_ui2f>
 8011d64:	4603      	mov	r3, r0
 8011d66:	4a3d      	ldr	r2, [pc, #244]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011d68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8011d6c:	2302      	movs	r3, #2
 8011d6e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011d72:	4b3a      	ldr	r3, [pc, #232]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011d74:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011d78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011d7c:	4b37      	ldr	r3, [pc, #220]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011d7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011d82:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8011d86:	4611      	mov	r1, r2
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f004 ffd0 	bl	8016d2e <RegionGetPhyParam>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8011d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d94:	b25a      	sxtb	r2, r3
 8011d96:	4b31      	ldr	r3, [pc, #196]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011d98:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	bfb8      	it	lt
 8011da0:	4613      	movlt	r3, r2
 8011da2:	b25a      	sxtb	r2, r3
 8011da4:	4b2d      	ldr	r3, [pc, #180]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011da6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8011daa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011dae:	2200      	movs	r2, #0
 8011db0:	4619      	mov	r1, r3
 8011db2:	2009      	movs	r0, #9
 8011db4:	f003 fa0e 	bl	80151d4 <LoRaMacCommandsAddCmd>
                }
                break;
 8011db8:	bf00      	nop
 8011dba:	e1c3      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8011dbc:	2303      	movs	r3, #3
 8011dbe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8011dc2:	78fb      	ldrb	r3, [r7, #3]
 8011dc4:	1c5a      	adds	r2, r3, #1
 8011dc6:	70fa      	strb	r2, [r7, #3]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	4413      	add	r3, r2
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8011dd4:	78fb      	ldrb	r3, [r7, #3]
 8011dd6:	1c5a      	adds	r2, r3, #1
 8011dd8:	70fa      	strb	r2, [r7, #3]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	4413      	add	r3, r2
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8011de4:	78fb      	ldrb	r3, [r7, #3]
 8011de6:	1c5a      	adds	r2, r3, #1
 8011de8:	70fa      	strb	r2, [r7, #3]
 8011dea:	461a      	mov	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	4413      	add	r3, r2
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	021a      	lsls	r2, r3, #8
 8011df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df6:	4313      	orrs	r3, r2
 8011df8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8011dfa:	78fb      	ldrb	r3, [r7, #3]
 8011dfc:	1c5a      	adds	r2, r3, #1
 8011dfe:	70fa      	strb	r2, [r7, #3]
 8011e00:	461a      	mov	r2, r3
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	4413      	add	r3, r2
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	041a      	lsls	r2, r3, #16
 8011e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8011e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e12:	2264      	movs	r2, #100	; 0x64
 8011e14:	fb02 f303 	mul.w	r3, r2, r3
 8011e18:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8011e1a:	4b10      	ldr	r3, [pc, #64]	; (8011e5c <ProcessMacCommands+0x6a4>)
 8011e1c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011e20:	f107 0220 	add.w	r2, r7, #32
 8011e24:	4611      	mov	r1, r2
 8011e26:	4618      	mov	r0, r3
 8011e28:	f005 f891 	bl	8016f4e <RegionDlChannelReq>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8011e34:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011e38:	b25b      	sxtb	r3, r3
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	db0a      	blt.n	8011e54 <ProcessMacCommands+0x69c>
                {
                    macCmdPayload[0] = status;
 8011e3e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8011e42:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8011e46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011e4a:	2201      	movs	r2, #1
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	200a      	movs	r0, #10
 8011e50:	f003 f9c0 	bl	80151d4 <LoRaMacCommandsAddCmd>
                }
                break;
 8011e54:	bf00      	nop
 8011e56:	e175      	b.n	8012144 <ProcessMacCommands+0x98c>
 8011e58:	200006d4 	.word	0x200006d4
 8011e5c:	20000bf0 	.word	0x20000bf0
 8011e60:	0801edb0 	.word	0x0801edb0
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8011e64:	2009      	movs	r0, #9
 8011e66:	f003 fced 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	f000 8084 	beq.w	8011f7a <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8011e72:	2109      	movs	r1, #9
 8011e74:	2000      	movs	r0, #0
 8011e76:	f003 fc59 	bl	801572c <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8011e7a:	f107 0318 	add.w	r3, r7, #24
 8011e7e:	2200      	movs	r2, #0
 8011e80:	601a      	str	r2, [r3, #0]
 8011e82:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8011e84:	f107 0310 	add.w	r3, r7, #16
 8011e88:	2200      	movs	r2, #0
 8011e8a:	601a      	str	r2, [r3, #0]
 8011e8c:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8011e8e:	f107 0308 	add.w	r3, r7, #8
 8011e92:	2200      	movs	r2, #0
 8011e94:	601a      	str	r2, [r3, #0]
 8011e96:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8011e98:	78fb      	ldrb	r3, [r7, #3]
 8011e9a:	1c5a      	adds	r2, r3, #1
 8011e9c:	70fa      	strb	r2, [r7, #3]
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	781b      	ldrb	r3, [r3, #0]
 8011ea6:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8011ea8:	78fb      	ldrb	r3, [r7, #3]
 8011eaa:	1c5a      	adds	r2, r3, #1
 8011eac:	70fa      	strb	r2, [r7, #3]
 8011eae:	461a      	mov	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	4413      	add	r3, r2
 8011eb4:	781b      	ldrb	r3, [r3, #0]
 8011eb6:	021a      	lsls	r2, r3, #8
 8011eb8:	69bb      	ldr	r3, [r7, #24]
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8011ebe:	78fb      	ldrb	r3, [r7, #3]
 8011ec0:	1c5a      	adds	r2, r3, #1
 8011ec2:	70fa      	strb	r2, [r7, #3]
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	4413      	add	r3, r2
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	041a      	lsls	r2, r3, #16
 8011ece:	69bb      	ldr	r3, [r7, #24]
 8011ed0:	4313      	orrs	r3, r2
 8011ed2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8011ed4:	78fb      	ldrb	r3, [r7, #3]
 8011ed6:	1c5a      	adds	r2, r3, #1
 8011ed8:	70fa      	strb	r2, [r7, #3]
 8011eda:	461a      	mov	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	4413      	add	r3, r2
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	061a      	lsls	r2, r3, #24
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	4313      	orrs	r3, r2
 8011ee8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8011eea:	78fb      	ldrb	r3, [r7, #3]
 8011eec:	1c5a      	adds	r2, r3, #1
 8011eee:	70fa      	strb	r2, [r7, #3]
 8011ef0:	461a      	mov	r2, r3
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	4413      	add	r3, r2
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	b21b      	sxth	r3, r3
 8011efa:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8011efc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8011f00:	461a      	mov	r2, r3
 8011f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011f06:	fb02 f303 	mul.w	r3, r2, r3
 8011f0a:	121b      	asrs	r3, r3, #8
 8011f0c:	b21b      	sxth	r3, r3
 8011f0e:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8011f10:	f107 0310 	add.w	r3, r7, #16
 8011f14:	f107 0218 	add.w	r2, r7, #24
 8011f18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f1c:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8011f20:	693a      	ldr	r2, [r7, #16]
 8011f22:	4b8f      	ldr	r3, [pc, #572]	; (8012160 <ProcessMacCommands+0x9a8>)
 8011f24:	4413      	add	r3, r2
 8011f26:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8011f28:	f107 0308 	add.w	r3, r7, #8
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f00a feb3 	bl	801cc98 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8011f32:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8011f36:	4b8b      	ldr	r3, [pc, #556]	; (8012164 <ProcessMacCommands+0x9ac>)
 8011f38:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8011f3c:	9200      	str	r2, [sp, #0]
 8011f3e:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8011f42:	f107 0210 	add.w	r2, r7, #16
 8011f46:	ca06      	ldmia	r2, {r1, r2}
 8011f48:	f00a fe3f 	bl	801cbca <SysTimeSub>
 8011f4c:	f107 0010 	add.w	r0, r7, #16
 8011f50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f52:	9300      	str	r3, [sp, #0]
 8011f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f56:	f107 0208 	add.w	r2, r7, #8
 8011f5a:	ca06      	ldmia	r2, {r1, r2}
 8011f5c:	f00a fdfc 	bl	801cb58 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8011f60:	f107 0310 	add.w	r3, r7, #16
 8011f64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011f68:	f00a fe68 	bl	801cc3c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8011f6c:	f002 ffd0 	bl	8014f10 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8011f70:	4b7c      	ldr	r3, [pc, #496]	; (8012164 <ProcessMacCommands+0x9ac>)
 8011f72:	2201      	movs	r2, #1
 8011f74:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
 8011f78:	e0e4      	b.n	8012144 <ProcessMacCommands+0x98c>
                }
                else
                {
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8011f7a:	4b7a      	ldr	r3, [pc, #488]	; (8012164 <ProcessMacCommands+0x9ac>)
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
#endif /* LORAMAC_VERSION */
                }
                break;
 8011f82:	e0df      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8011f84:	200c      	movs	r0, #12
 8011f86:	f003 fc5d 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f000 80d9 	beq.w	8012144 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8011f92:	210c      	movs	r1, #12
 8011f94:	2000      	movs	r0, #0
 8011f96:	f003 fbc9 	bl	801572c <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8011f9a:	4b72      	ldr	r3, [pc, #456]	; (8012164 <ProcessMacCommands+0x9ac>)
 8011f9c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011fa0:	2b04      	cmp	r3, #4
 8011fa2:	f000 80cf 	beq.w	8012144 <ProcessMacCommands+0x98c>
 8011fa6:	4b6f      	ldr	r3, [pc, #444]	; (8012164 <ProcessMacCommands+0x9ac>)
 8011fa8:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8011fac:	2b05      	cmp	r3, #5
 8011fae:	f000 80c9 	beq.w	8012144 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8011fb2:	f002 ff8e 	bl	8014ed2 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8011fb6:	e0c5      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8011fb8:	2303      	movs	r3, #3
 8011fba:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8011fc2:	78fb      	ldrb	r3, [r7, #3]
 8011fc4:	1c5a      	adds	r2, r3, #1
 8011fc6:	70fa      	strb	r2, [r7, #3]
 8011fc8:	461a      	mov	r2, r3
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	4413      	add	r3, r2
 8011fce:	781b      	ldrb	r3, [r3, #0]
 8011fd0:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8011fd2:	78fb      	ldrb	r3, [r7, #3]
 8011fd4:	1c5a      	adds	r2, r3, #1
 8011fd6:	70fa      	strb	r2, [r7, #3]
 8011fd8:	461a      	mov	r2, r3
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	4413      	add	r3, r2
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	021b      	lsls	r3, r3, #8
 8011fe2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011fe4:	4313      	orrs	r3, r2
 8011fe6:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8011fe8:	78fb      	ldrb	r3, [r7, #3]
 8011fea:	1c5a      	adds	r2, r3, #1
 8011fec:	70fa      	strb	r2, [r7, #3]
 8011fee:	461a      	mov	r2, r3
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	4413      	add	r3, r2
 8011ff4:	781b      	ldrb	r3, [r3, #0]
 8011ff6:	041b      	lsls	r3, r3, #16
 8011ff8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011ffa:	4313      	orrs	r3, r2
 8011ffc:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8011ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012000:	2264      	movs	r2, #100	; 0x64
 8012002:	fb02 f303 	mul.w	r3, r2, r3
 8012006:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012008:	78fb      	ldrb	r3, [r7, #3]
 801200a:	1c5a      	adds	r2, r3, #1
 801200c:	70fa      	strb	r2, [r7, #3]
 801200e:	461a      	mov	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	4413      	add	r3, r2
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	f003 030f 	and.w	r3, r3, #15
 801201a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 801201e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012022:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012024:	4618      	mov	r0, r3
 8012026:	f002 ff5a 	bl	8014ede <LoRaMacClassBPingSlotChannelReq>
 801202a:	4603      	mov	r3, r0
 801202c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012030:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012034:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8012038:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801203c:	2201      	movs	r2, #1
 801203e:	4619      	mov	r1, r3
 8012040:	2011      	movs	r0, #17
 8012042:	f003 f8c7 	bl	80151d4 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 8012046:	e07d      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012048:	200d      	movs	r0, #13
 801204a:	f003 fbfb 	bl	8015844 <LoRaMacConfirmQueueIsCmdActive>
 801204e:	4603      	mov	r3, r0
 8012050:	2b00      	cmp	r3, #0
 8012052:	d077      	beq.n	8012144 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012054:	210d      	movs	r1, #13
 8012056:	2000      	movs	r0, #0
 8012058:	f003 fb68 	bl	801572c <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 801205c:	2300      	movs	r3, #0
 801205e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012062:	2300      	movs	r3, #0
 8012064:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012068:	78fb      	ldrb	r3, [r7, #3]
 801206a:	1c5a      	adds	r2, r3, #1
 801206c:	70fa      	strb	r2, [r7, #3]
 801206e:	461a      	mov	r2, r3
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	4413      	add	r3, r2
 8012074:	781b      	ldrb	r3, [r3, #0]
 8012076:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 801207a:	78fb      	ldrb	r3, [r7, #3]
 801207c:	1c5a      	adds	r2, r3, #1
 801207e:	70fa      	strb	r2, [r7, #3]
 8012080:	461a      	mov	r2, r3
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	4413      	add	r3, r2
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	021b      	lsls	r3, r3, #8
 801208a:	b21a      	sxth	r2, r3
 801208c:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012090:	4313      	orrs	r3, r2
 8012092:	b21b      	sxth	r3, r3
 8012094:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012098:	78fb      	ldrb	r3, [r7, #3]
 801209a:	1c5a      	adds	r2, r3, #1
 801209c:	70fa      	strb	r2, [r7, #3]
 801209e:	461a      	mov	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	4413      	add	r3, r2
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80120aa:	4b2f      	ldr	r3, [pc, #188]	; (8012168 <ProcessMacCommands+0x9b0>)
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 80120b2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80120b6:	4618      	mov	r0, r3
 80120b8:	f002 ff1d 	bl	8014ef6 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 80120bc:	e042      	b.n	8012144 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 80120be:	2300      	movs	r3, #0
 80120c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 80120c4:	78fb      	ldrb	r3, [r7, #3]
 80120c6:	1c5a      	adds	r2, r3, #1
 80120c8:	70fa      	strb	r2, [r7, #3]
 80120ca:	461a      	mov	r2, r3
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	4413      	add	r3, r2
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80120d6:	78fb      	ldrb	r3, [r7, #3]
 80120d8:	1c5a      	adds	r2, r3, #1
 80120da:	70fa      	strb	r2, [r7, #3]
 80120dc:	461a      	mov	r2, r3
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	4413      	add	r3, r2
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	021b      	lsls	r3, r3, #8
 80120e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80120ea:	4313      	orrs	r3, r2
 80120ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80120f0:	78fb      	ldrb	r3, [r7, #3]
 80120f2:	1c5a      	adds	r2, r3, #1
 80120f4:	70fa      	strb	r2, [r7, #3]
 80120f6:	461a      	mov	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	4413      	add	r3, r2
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	041b      	lsls	r3, r3, #16
 8012100:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012104:	4313      	orrs	r3, r2
 8012106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 801210a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801210e:	2264      	movs	r2, #100	; 0x64
 8012110:	fb02 f303 	mul.w	r3, r2, r3
 8012114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012118:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801211c:	f002 fefe 	bl	8014f1c <LoRaMacClassBBeaconFreqReq>
 8012120:	4603      	mov	r3, r0
 8012122:	2b00      	cmp	r3, #0
 8012124:	d003      	beq.n	801212e <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8012126:	2301      	movs	r3, #1
 8012128:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 801212c:	e002      	b.n	8012134 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801212e:	2300      	movs	r3, #0
 8012130:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012134:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012138:	2201      	movs	r2, #1
 801213a:	4619      	mov	r1, r3
 801213c:	2013      	movs	r0, #19
 801213e:	f003 f849 	bl	80151d4 <LoRaMacCommandsAddCmd>
                }
                break;
 8012142:	bf00      	nop
    while( macIndex < commandsSize )
 8012144:	78fa      	ldrb	r2, [r7, #3]
 8012146:	78bb      	ldrb	r3, [r7, #2]
 8012148:	429a      	cmp	r2, r3
 801214a:	f4ff ab57 	bcc.w	80117fc <ProcessMacCommands+0x44>
 801214e:	e004      	b.n	801215a <ProcessMacCommands+0x9a2>
        return;
 8012150:	bf00      	nop
 8012152:	e002      	b.n	801215a <ProcessMacCommands+0x9a2>
            return;
 8012154:	bf00      	nop
 8012156:	e000      	b.n	801215a <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012158:	bf00      	nop
        }
    }
}
 801215a:	378c      	adds	r7, #140	; 0x8c
 801215c:	46bd      	mov	sp, r7
 801215e:	bd90      	pop	{r4, r7, pc}
 8012160:	12d53d80 	.word	0x12d53d80
 8012164:	200006d4 	.word	0x200006d4
 8012168:	20001820 	.word	0x20001820

0801216c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b08e      	sub	sp, #56	; 0x38
 8012170:	af02      	add	r7, sp, #8
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	607a      	str	r2, [r7, #4]
 8012176:	461a      	mov	r2, r3
 8012178:	460b      	mov	r3, r1
 801217a:	72fb      	strb	r3, [r7, #11]
 801217c:	4613      	mov	r3, r2
 801217e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012180:	2303      	movs	r3, #3
 8012182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012186:	4b66      	ldr	r3, [pc, #408]	; (8012320 <Send+0x1b4>)
 8012188:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801218c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012190:	4b63      	ldr	r3, [pc, #396]	; (8012320 <Send+0x1b4>)
 8012192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012196:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801219a:	4b61      	ldr	r3, [pc, #388]	; (8012320 <Send+0x1b4>)
 801219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801219e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80121a0:	4b5f      	ldr	r3, [pc, #380]	; (8012320 <Send+0x1b4>)
 80121a2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d101      	bne.n	80121ae <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 80121aa:	2307      	movs	r3, #7
 80121ac:	e0b4      	b.n	8012318 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 80121ae:	4b5c      	ldr	r3, [pc, #368]	; (8012320 <Send+0x1b4>)
 80121b0:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d102      	bne.n	80121be <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80121b8:	4b59      	ldr	r3, [pc, #356]	; (8012320 <Send+0x1b4>)
 80121ba:	2200      	movs	r2, #0
 80121bc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80121c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80121c8:	f36f 0303 	bfc	r3, #0, #4
 80121cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80121d0:	4b53      	ldr	r3, [pc, #332]	; (8012320 <Send+0x1b4>)
 80121d2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80121d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80121da:	f362 13c7 	bfi	r3, r2, #7, #1
 80121de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80121e2:	4b4f      	ldr	r3, [pc, #316]	; (8012320 <Send+0x1b4>)
 80121e4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d106      	bne.n	80121fa <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80121ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80121f0:	f043 0310 	orr.w	r3, r3, #16
 80121f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80121f8:	e005      	b.n	8012206 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80121fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80121fe:	f36f 1304 	bfc	r3, #4, #1
 8012202:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012206:	4b46      	ldr	r3, [pc, #280]	; (8012320 <Send+0x1b4>)
 8012208:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801220c:	2b00      	cmp	r3, #0
 801220e:	d005      	beq.n	801221c <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012210:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012214:	f043 0320 	orr.w	r3, r3, #32
 8012218:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 801221c:	2301      	movs	r3, #1
 801221e:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012224:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012228:	b2db      	uxtb	r3, r3
 801222a:	2b00      	cmp	r3, #0
 801222c:	bf14      	ite	ne
 801222e:	2301      	movne	r3, #1
 8012230:	2300      	moveq	r3, #0
 8012232:	b2db      	uxtb	r3, r3
 8012234:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012236:	4b3a      	ldr	r3, [pc, #232]	; (8012320 <Send+0x1b4>)
 8012238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801223a:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801223c:	4b38      	ldr	r3, [pc, #224]	; (8012320 <Send+0x1b4>)
 801223e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012242:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012244:	4b36      	ldr	r3, [pc, #216]	; (8012320 <Send+0x1b4>)
 8012246:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 801224a:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801224c:	4b34      	ldr	r3, [pc, #208]	; (8012320 <Send+0x1b4>)
 801224e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012252:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012256:	4b32      	ldr	r3, [pc, #200]	; (8012320 <Send+0x1b4>)
 8012258:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801225c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012260:	4b2f      	ldr	r3, [pc, #188]	; (8012320 <Send+0x1b4>)
 8012262:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 801226a:	4b2d      	ldr	r3, [pc, #180]	; (8012320 <Send+0x1b4>)
 801226c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012270:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012274:	4b2a      	ldr	r3, [pc, #168]	; (8012320 <Send+0x1b4>)
 8012276:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801227a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801227e:	f107 0014 	add.w	r0, r7, #20
 8012282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	4b26      	ldr	r3, [pc, #152]	; (8012324 <Send+0x1b8>)
 801228a:	4a27      	ldr	r2, [pc, #156]	; (8012328 <Send+0x1bc>)
 801228c:	4927      	ldr	r1, [pc, #156]	; (801232c <Send+0x1c0>)
 801228e:	f002 fcbf 	bl	8014c10 <LoRaMacAdrCalcNext>
 8012292:	4603      	mov	r3, r0
 8012294:	461a      	mov	r2, r3
 8012296:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801229a:	f362 1386 	bfi	r3, r2, #6, #1
 801229e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 80122a2:	7afa      	ldrb	r2, [r7, #11]
 80122a4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80122a8:	893b      	ldrh	r3, [r7, #8]
 80122aa:	9300      	str	r3, [sp, #0]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	f000 fc72 	bl	8012b98 <PrepareFrame>
 80122b4:	4603      	mov	r3, r0
 80122b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80122ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d003      	beq.n	80122ca <Send+0x15e>
 80122c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122c6:	2b0a      	cmp	r3, #10
 80122c8:	d107      	bne.n	80122da <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 80122ca:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80122ce:	4618      	mov	r0, r3
 80122d0:	f000 f962 	bl	8012598 <ScheduleTx>
 80122d4:	4603      	mov	r3, r0
 80122d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80122da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d00a      	beq.n	80122f8 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80122e2:	4a0f      	ldr	r2, [pc, #60]	; (8012320 <Send+0x1b4>)
 80122e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80122e8:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80122ec:	4a0c      	ldr	r2, [pc, #48]	; (8012320 <Send+0x1b4>)
 80122ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80122f2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 80122f6:	e00d      	b.n	8012314 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80122f8:	4b09      	ldr	r3, [pc, #36]	; (8012320 <Send+0x1b4>)
 80122fa:	2200      	movs	r2, #0
 80122fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012302:	4a07      	ldr	r2, [pc, #28]	; (8012320 <Send+0x1b4>)
 8012304:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012306:	f003 f80b 	bl	8015320 <LoRaMacCommandsRemoveNoneStickyCmds>
 801230a:	4603      	mov	r3, r0
 801230c:	2b00      	cmp	r3, #0
 801230e:	d001      	beq.n	8012314 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012310:	2313      	movs	r3, #19
 8012312:	e001      	b.n	8012318 <Send+0x1ac>
        }
    }
    return status;
 8012314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012318:	4618      	mov	r0, r3
 801231a:	3730      	adds	r7, #48	; 0x30
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}
 8012320:	20000bf0 	.word	0x20000bf0
 8012324:	20000c58 	.word	0x20000c58
 8012328:	20000c28 	.word	0x20000c28
 801232c:	20000c29 	.word	0x20000c29

08012330 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	4603      	mov	r3, r0
 8012338:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801233a:	2300      	movs	r3, #0
 801233c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 801233e:	2300      	movs	r3, #0
 8012340:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012342:	2301      	movs	r3, #1
 8012344:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012346:	79fb      	ldrb	r3, [r7, #7]
 8012348:	2bff      	cmp	r3, #255	; 0xff
 801234a:	d11f      	bne.n	801238c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 801234c:	2000      	movs	r0, #0
 801234e:	f7ff f8f9 	bl	8011544 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012352:	4b15      	ldr	r3, [pc, #84]	; (80123a8 <SendReJoinReq+0x78>)
 8012354:	2200      	movs	r2, #0
 8012356:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 801235a:	4b13      	ldr	r3, [pc, #76]	; (80123a8 <SendReJoinReq+0x78>)
 801235c:	4a13      	ldr	r2, [pc, #76]	; (80123ac <SendReJoinReq+0x7c>)
 801235e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012362:	4b11      	ldr	r3, [pc, #68]	; (80123a8 <SendReJoinReq+0x78>)
 8012364:	22ff      	movs	r2, #255	; 0xff
 8012366:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801236a:	7b3b      	ldrb	r3, [r7, #12]
 801236c:	f36f 1347 	bfc	r3, #5, #3
 8012370:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012372:	7b3a      	ldrb	r2, [r7, #12]
 8012374:	4b0c      	ldr	r3, [pc, #48]	; (80123a8 <SendReJoinReq+0x78>)
 8012376:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 801237a:	480d      	ldr	r0, [pc, #52]	; (80123b0 <SendReJoinReq+0x80>)
 801237c:	f7fb ff38 	bl	800e1f0 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8012380:	480c      	ldr	r0, [pc, #48]	; (80123b4 <SendReJoinReq+0x84>)
 8012382:	f7fb ff05 	bl	800e190 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8012386:	2300      	movs	r3, #0
 8012388:	73fb      	strb	r3, [r7, #15]

            break;
 801238a:	e002      	b.n	8012392 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801238c:	2302      	movs	r3, #2
 801238e:	73bb      	strb	r3, [r7, #14]
            break;
 8012390:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8012392:	7bfb      	ldrb	r3, [r7, #15]
 8012394:	4618      	mov	r0, r3
 8012396:	f000 f8ff 	bl	8012598 <ScheduleTx>
 801239a:	4603      	mov	r3, r0
 801239c:	73bb      	strb	r3, [r7, #14]
    return status;
 801239e:	7bbb      	ldrb	r3, [r7, #14]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	200006d4 	.word	0x200006d4
 80123ac:	200006d6 	.word	0x200006d6
 80123b0:	200007e2 	.word	0x200007e2
 80123b4:	200007ea 	.word	0x200007ea

080123b8 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80123bc:	f002 fd38 	bl	8014e30 <LoRaMacClassBIsBeaconExpected>
 80123c0:	4603      	mov	r3, r0
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d001      	beq.n	80123ca <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80123c6:	230e      	movs	r3, #14
 80123c8:	e013      	b.n	80123f2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80123ca:	4b0b      	ldr	r3, [pc, #44]	; (80123f8 <CheckForClassBCollision+0x40>)
 80123cc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80123d0:	2b01      	cmp	r3, #1
 80123d2:	d10d      	bne.n	80123f0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80123d4:	f002 fd33 	bl	8014e3e <LoRaMacClassBIsPingExpected>
 80123d8:	4603      	mov	r3, r0
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d001      	beq.n	80123e2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80123de:	230f      	movs	r3, #15
 80123e0:	e007      	b.n	80123f2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80123e2:	f002 fd33 	bl	8014e4c <LoRaMacClassBIsMulticastExpected>
 80123e6:	4603      	mov	r3, r0
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d001      	beq.n	80123f0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80123ec:	230f      	movs	r3, #15
 80123ee:	e000      	b.n	80123f2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80123f0:	2300      	movs	r3, #0
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	20000bf0 	.word	0x20000bf0

080123fc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80123fc:	b590      	push	{r4, r7, lr}
 80123fe:	b083      	sub	sp, #12
 8012400:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012402:	4b2d      	ldr	r3, [pc, #180]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012404:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012408:	4b2b      	ldr	r3, [pc, #172]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 801240a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801240e:	4b2a      	ldr	r3, [pc, #168]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012410:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8012414:	4b28      	ldr	r3, [pc, #160]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012416:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801241a:	4b27      	ldr	r3, [pc, #156]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 801241c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8012420:	b25b      	sxtb	r3, r3
 8012422:	f004 fdd9 	bl	8016fd8 <RegionApplyDrOffset>
 8012426:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012428:	b259      	sxtb	r1, r3
 801242a:	4b23      	ldr	r3, [pc, #140]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 801242c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012430:	4b21      	ldr	r3, [pc, #132]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012434:	4821      	ldr	r0, [pc, #132]	; (80124bc <ComputeRxWindowParameters+0xc0>)
 8012436:	9000      	str	r0, [sp, #0]
 8012438:	4620      	mov	r0, r4
 801243a:	f004 fcef 	bl	8016e1c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801243e:	4b1e      	ldr	r3, [pc, #120]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012440:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8012444:	4b1c      	ldr	r3, [pc, #112]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012446:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801244a:	b259      	sxtb	r1, r3
 801244c:	4b1a      	ldr	r3, [pc, #104]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 801244e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012452:	4b19      	ldr	r3, [pc, #100]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012456:	4c1a      	ldr	r4, [pc, #104]	; (80124c0 <ComputeRxWindowParameters+0xc4>)
 8012458:	9400      	str	r4, [sp, #0]
 801245a:	f004 fcdf 	bl	8016e1c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801245e:	4b16      	ldr	r3, [pc, #88]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012462:	4a18      	ldr	r2, [pc, #96]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 8012464:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012468:	4413      	add	r3, r2
 801246a:	4a16      	ldr	r2, [pc, #88]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 801246c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8012470:	4b11      	ldr	r3, [pc, #68]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 8012472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012474:	4a13      	ldr	r2, [pc, #76]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 8012476:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 801247a:	4413      	add	r3, r2
 801247c:	4a11      	ldr	r2, [pc, #68]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 801247e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8012482:	4b10      	ldr	r3, [pc, #64]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 8012484:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012488:	2b04      	cmp	r3, #4
 801248a:	d011      	beq.n	80124b0 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801248c:	4b0a      	ldr	r3, [pc, #40]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 801248e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012490:	4a0c      	ldr	r2, [pc, #48]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 8012492:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8012496:	4413      	add	r3, r2
 8012498:	4a0a      	ldr	r2, [pc, #40]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 801249a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801249e:	4b06      	ldr	r3, [pc, #24]	; (80124b8 <ComputeRxWindowParameters+0xbc>)
 80124a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80124a2:	4a08      	ldr	r2, [pc, #32]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 80124a4:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 80124a8:	4413      	add	r3, r2
 80124aa:	4a06      	ldr	r2, [pc, #24]	; (80124c4 <ComputeRxWindowParameters+0xc8>)
 80124ac:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 80124b0:	bf00      	nop
 80124b2:	3704      	adds	r7, #4
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd90      	pop	{r4, r7, pc}
 80124b8:	20000bf0 	.word	0x20000bf0
 80124bc:	20000a8c 	.word	0x20000a8c
 80124c0:	20000aa4 	.word	0x20000aa4
 80124c4:	200006d4 	.word	0x200006d4

080124c8 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80124ce:	2300      	movs	r3, #0
 80124d0:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80124d2:	4b13      	ldr	r3, [pc, #76]	; (8012520 <VerifyTxFrame+0x58>)
 80124d4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d01b      	beq.n	8012514 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80124dc:	1d3b      	adds	r3, r7, #4
 80124de:	4618      	mov	r0, r3
 80124e0:	f002 ff6e 	bl	80153c0 <LoRaMacCommandsGetSizeSerializedCmds>
 80124e4:	4603      	mov	r3, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d001      	beq.n	80124ee <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80124ea:	2313      	movs	r3, #19
 80124ec:	e013      	b.n	8012516 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80124ee:	4b0d      	ldr	r3, [pc, #52]	; (8012524 <VerifyTxFrame+0x5c>)
 80124f0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80124f4:	4a0a      	ldr	r2, [pc, #40]	; (8012520 <VerifyTxFrame+0x58>)
 80124f6:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	b2d2      	uxtb	r2, r2
 80124fe:	4618      	mov	r0, r3
 8012500:	f7ff f932 	bl	8011768 <ValidatePayloadLength>
 8012504:	4603      	mov	r3, r0
 8012506:	f083 0301 	eor.w	r3, r3, #1
 801250a:	b2db      	uxtb	r3, r3
 801250c:	2b00      	cmp	r3, #0
 801250e:	d001      	beq.n	8012514 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8012510:	2308      	movs	r3, #8
 8012512:	e000      	b.n	8012516 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	3708      	adds	r7, #8
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	20000bf0 	.word	0x20000bf0
 8012524:	200006d4 	.word	0x200006d4

08012528 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8012528:	b580      	push	{r7, lr}
 801252a:	b082      	sub	sp, #8
 801252c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801252e:	4b18      	ldr	r3, [pc, #96]	; (8012590 <SerializeTxFrame+0x68>)
 8012530:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <SerializeTxFrame+0x16>
 8012538:	2b04      	cmp	r3, #4
 801253a:	d011      	beq.n	8012560 <SerializeTxFrame+0x38>
 801253c:	e021      	b.n	8012582 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801253e:	4815      	ldr	r0, [pc, #84]	; (8012594 <SerializeTxFrame+0x6c>)
 8012540:	f004 fa6c 	bl	8016a1c <LoRaMacSerializerJoinRequest>
 8012544:	4603      	mov	r3, r0
 8012546:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8012548:	79fb      	ldrb	r3, [r7, #7]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d001      	beq.n	8012552 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801254e:	2311      	movs	r3, #17
 8012550:	e01a      	b.n	8012588 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012552:	4b0f      	ldr	r3, [pc, #60]	; (8012590 <SerializeTxFrame+0x68>)
 8012554:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012558:	b29a      	uxth	r2, r3
 801255a:	4b0d      	ldr	r3, [pc, #52]	; (8012590 <SerializeTxFrame+0x68>)
 801255c:	801a      	strh	r2, [r3, #0]
            break;
 801255e:	e012      	b.n	8012586 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8012560:	480c      	ldr	r0, [pc, #48]	; (8012594 <SerializeTxFrame+0x6c>)
 8012562:	f004 fadd 	bl	8016b20 <LoRaMacSerializerData>
 8012566:	4603      	mov	r3, r0
 8012568:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801256a:	79fb      	ldrb	r3, [r7, #7]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d001      	beq.n	8012574 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012570:	2311      	movs	r3, #17
 8012572:	e009      	b.n	8012588 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012574:	4b06      	ldr	r3, [pc, #24]	; (8012590 <SerializeTxFrame+0x68>)
 8012576:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801257a:	b29a      	uxth	r2, r3
 801257c:	4b04      	ldr	r3, [pc, #16]	; (8012590 <SerializeTxFrame+0x68>)
 801257e:	801a      	strh	r2, [r3, #0]
            break;
 8012580:	e001      	b.n	8012586 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8012582:	2303      	movs	r3, #3
 8012584:	e000      	b.n	8012588 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8012586:	2300      	movs	r3, #0
}
 8012588:	4618      	mov	r0, r3
 801258a:	3708      	adds	r7, #8
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}
 8012590:	200006d4 	.word	0x200006d4
 8012594:	200007dc 	.word	0x200007dc

08012598 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b090      	sub	sp, #64	; 0x40
 801259c:	af02      	add	r7, sp, #8
 801259e:	4603      	mov	r3, r0
 80125a0:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125a2:	2303      	movs	r3, #3
 80125a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80125a8:	f7ff ff06 	bl	80123b8 <CheckForClassBCollision>
 80125ac:	4603      	mov	r3, r0
 80125ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80125b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d002      	beq.n	80125c0 <ScheduleTx+0x28>
    {
        return status;
 80125ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125be:	e092      	b.n	80126e6 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 80125c0:	f000 f8f8 	bl	80127b4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80125c4:	f7ff ffb0 	bl	8012528 <SerializeTxFrame>
 80125c8:	4603      	mov	r3, r0
 80125ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80125ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d002      	beq.n	80125dc <ScheduleTx+0x44>
    {
        return status;
 80125d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125da:	e084      	b.n	80126e6 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80125dc:	4b44      	ldr	r3, [pc, #272]	; (80126f0 <ScheduleTx+0x158>)
 80125de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80125e0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80125e2:	4b43      	ldr	r3, [pc, #268]	; (80126f0 <ScheduleTx+0x158>)
 80125e4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80125e8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80125ea:	4b41      	ldr	r3, [pc, #260]	; (80126f0 <ScheduleTx+0x158>)
 80125ec:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80125f0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80125f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80125f6:	4618      	mov	r0, r3
 80125f8:	f00a fb86 	bl	801cd08 <SysTimeGetMcuTime>
 80125fc:	4638      	mov	r0, r7
 80125fe:	4b3c      	ldr	r3, [pc, #240]	; (80126f0 <ScheduleTx+0x158>)
 8012600:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8012604:	9200      	str	r2, [sp, #0]
 8012606:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 801260a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801260e:	ca06      	ldmia	r2, {r1, r2}
 8012610:	f00a fadb 	bl	801cbca <SysTimeSub>
 8012614:	f107 0320 	add.w	r3, r7, #32
 8012618:	463a      	mov	r2, r7
 801261a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801261e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8012622:	4b33      	ldr	r3, [pc, #204]	; (80126f0 <ScheduleTx+0x158>)
 8012624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012626:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8012628:	2300      	movs	r3, #0
 801262a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 801262e:	2301      	movs	r3, #1
 8012630:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8012632:	4b30      	ldr	r3, [pc, #192]	; (80126f4 <ScheduleTx+0x15c>)
 8012634:	881b      	ldrh	r3, [r3, #0]
 8012636:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012638:	4b2d      	ldr	r3, [pc, #180]	; (80126f0 <ScheduleTx+0x158>)
 801263a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801263e:	2b00      	cmp	r3, #0
 8012640:	d104      	bne.n	801264c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8012642:	2301      	movs	r3, #1
 8012644:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8012648:	2300      	movs	r3, #0
 801264a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801264c:	4b28      	ldr	r3, [pc, #160]	; (80126f0 <ScheduleTx+0x158>)
 801264e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012652:	f107 0114 	add.w	r1, r7, #20
 8012656:	4b28      	ldr	r3, [pc, #160]	; (80126f8 <ScheduleTx+0x160>)
 8012658:	9300      	str	r3, [sp, #0]
 801265a:	4b28      	ldr	r3, [pc, #160]	; (80126fc <ScheduleTx+0x164>)
 801265c:	4a28      	ldr	r2, [pc, #160]	; (8012700 <ScheduleTx+0x168>)
 801265e:	f004 fca3 	bl	8016fa8 <RegionNextChannel>
 8012662:	4603      	mov	r3, r0
 8012664:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8012668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801266c:	2b00      	cmp	r3, #0
 801266e:	d025      	beq.n	80126bc <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8012670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012674:	2b0b      	cmp	r3, #11
 8012676:	d11e      	bne.n	80126b6 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8012678:	4b1e      	ldr	r3, [pc, #120]	; (80126f4 <ScheduleTx+0x15c>)
 801267a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801267e:	2b00      	cmp	r3, #0
 8012680:	d01c      	beq.n	80126bc <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8012682:	7bfb      	ldrb	r3, [r7, #15]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d013      	beq.n	80126b0 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8012688:	4b1a      	ldr	r3, [pc, #104]	; (80126f4 <ScheduleTx+0x15c>)
 801268a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801268e:	f043 0320 	orr.w	r3, r3, #32
 8012692:	4a18      	ldr	r2, [pc, #96]	; (80126f4 <ScheduleTx+0x15c>)
 8012694:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8012698:	4b16      	ldr	r3, [pc, #88]	; (80126f4 <ScheduleTx+0x15c>)
 801269a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 801269e:	4619      	mov	r1, r3
 80126a0:	4818      	ldr	r0, [pc, #96]	; (8012704 <ScheduleTx+0x16c>)
 80126a2:	f00a ffc9 	bl	801d638 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 80126a6:	4817      	ldr	r0, [pc, #92]	; (8012704 <ScheduleTx+0x16c>)
 80126a8:	f00a fee8 	bl	801d47c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 80126ac:	2300      	movs	r3, #0
 80126ae:	e01a      	b.n	80126e6 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 80126b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126b4:	e017      	b.n	80126e6 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80126b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126ba:	e014      	b.n	80126e6 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80126bc:	f7ff fe9e 	bl	80123fc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80126c0:	f7ff ff02 	bl	80124c8 <VerifyTxFrame>
 80126c4:	4603      	mov	r3, r0
 80126c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80126ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d002      	beq.n	80126d8 <ScheduleTx+0x140>
    {
        return status;
 80126d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126d6:	e006      	b.n	80126e6 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80126d8:	4b06      	ldr	r3, [pc, #24]	; (80126f4 <ScheduleTx+0x15c>)
 80126da:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 80126de:	4618      	mov	r0, r3
 80126e0:	f000 fb76 	bl	8012dd0 <SendFrameOnChannel>
 80126e4:	4603      	mov	r3, r0
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3738      	adds	r7, #56	; 0x38
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	20000bf0 	.word	0x20000bf0
 80126f4:	200006d4 	.word	0x200006d4
 80126f8:	20000c20 	.word	0x20000c20
 80126fc:	20000b68 	.word	0x20000b68
 8012700:	20000aef 	.word	0x20000aef
 8012704:	20000a3c 	.word	0x20000a3c

08012708 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af00      	add	r7, sp, #0
 801270e:	4603      	mov	r3, r0
 8012710:	460a      	mov	r2, r1
 8012712:	71fb      	strb	r3, [r7, #7]
 8012714:	4613      	mov	r3, r2
 8012716:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012718:	2312      	movs	r3, #18
 801271a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 801271c:	2300      	movs	r3, #0
 801271e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8012720:	4b22      	ldr	r3, [pc, #136]	; (80127ac <SecureFrame+0xa4>)
 8012722:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012726:	2b00      	cmp	r3, #0
 8012728:	d002      	beq.n	8012730 <SecureFrame+0x28>
 801272a:	2b04      	cmp	r3, #4
 801272c:	d011      	beq.n	8012752 <SecureFrame+0x4a>
 801272e:	e036      	b.n	801279e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8012730:	481f      	ldr	r0, [pc, #124]	; (80127b0 <SecureFrame+0xa8>)
 8012732:	f003 fd3f 	bl	80161b4 <LoRaMacCryptoPrepareJoinRequest>
 8012736:	4603      	mov	r3, r0
 8012738:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801273a:	7bfb      	ldrb	r3, [r7, #15]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d001      	beq.n	8012744 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8012740:	2311      	movs	r3, #17
 8012742:	e02f      	b.n	80127a4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8012744:	4b19      	ldr	r3, [pc, #100]	; (80127ac <SecureFrame+0xa4>)
 8012746:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801274a:	b29a      	uxth	r2, r3
 801274c:	4b17      	ldr	r3, [pc, #92]	; (80127ac <SecureFrame+0xa4>)
 801274e:	801a      	strh	r2, [r3, #0]
            break;
 8012750:	e027      	b.n	80127a2 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012752:	f107 0308 	add.w	r3, r7, #8
 8012756:	4618      	mov	r0, r3
 8012758:	f003 fc66 	bl	8016028 <LoRaMacCryptoGetFCntUp>
 801275c:	4603      	mov	r3, r0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d001      	beq.n	8012766 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012762:	2312      	movs	r3, #18
 8012764:	e01e      	b.n	80127a4 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8012766:	4b11      	ldr	r3, [pc, #68]	; (80127ac <SecureFrame+0xa4>)
 8012768:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801276c:	2b00      	cmp	r3, #0
 801276e:	d002      	beq.n	8012776 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	3b01      	subs	r3, #1
 8012774:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8012776:	68b8      	ldr	r0, [r7, #8]
 8012778:	79ba      	ldrb	r2, [r7, #6]
 801277a:	79f9      	ldrb	r1, [r7, #7]
 801277c:	4b0c      	ldr	r3, [pc, #48]	; (80127b0 <SecureFrame+0xa8>)
 801277e:	f003 fe41 	bl	8016404 <LoRaMacCryptoSecureMessage>
 8012782:	4603      	mov	r3, r0
 8012784:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8012786:	7bfb      	ldrb	r3, [r7, #15]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d001      	beq.n	8012790 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801278c:	2311      	movs	r3, #17
 801278e:	e009      	b.n	80127a4 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8012790:	4b06      	ldr	r3, [pc, #24]	; (80127ac <SecureFrame+0xa4>)
 8012792:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8012796:	b29a      	uxth	r2, r3
 8012798:	4b04      	ldr	r3, [pc, #16]	; (80127ac <SecureFrame+0xa4>)
 801279a:	801a      	strh	r2, [r3, #0]
            break;
 801279c:	e001      	b.n	80127a2 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801279e:	2303      	movs	r3, #3
 80127a0:	e000      	b.n	80127a4 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80127a2:	2300      	movs	r3, #0
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3710      	adds	r7, #16
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	200006d4 	.word	0x200006d4
 80127b0:	200007dc 	.word	0x200007dc

080127b4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80127b4:	b480      	push	{r7}
 80127b6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80127b8:	4b09      	ldr	r3, [pc, #36]	; (80127e0 <CalculateBackOff+0x2c>)
 80127ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d10a      	bne.n	80127d6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80127c0:	4b07      	ldr	r3, [pc, #28]	; (80127e0 <CalculateBackOff+0x2c>)
 80127c2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80127c6:	3b01      	subs	r3, #1
 80127c8:	4a06      	ldr	r2, [pc, #24]	; (80127e4 <CalculateBackOff+0x30>)
 80127ca:	f8d2 241c 	ldr.w	r2, [r2, #1052]	; 0x41c
 80127ce:	fb02 f303 	mul.w	r3, r2, r3
 80127d2:	4a03      	ldr	r2, [pc, #12]	; (80127e0 <CalculateBackOff+0x2c>)
 80127d4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80127d6:	bf00      	nop
 80127d8:	46bd      	mov	sp, r7
 80127da:	bc80      	pop	{r7}
 80127dc:	4770      	bx	lr
 80127de:	bf00      	nop
 80127e0:	20000bf0 	.word	0x20000bf0
 80127e4:	200006d4 	.word	0x200006d4

080127e8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	4603      	mov	r3, r0
 80127f0:	7139      	strb	r1, [r7, #4]
 80127f2:	71fb      	strb	r3, [r7, #7]
 80127f4:	4613      	mov	r3, r2
 80127f6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80127f8:	79fb      	ldrb	r3, [r7, #7]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d002      	beq.n	8012804 <RemoveMacCommands+0x1c>
 80127fe:	79fb      	ldrb	r3, [r7, #7]
 8012800:	2b01      	cmp	r3, #1
 8012802:	d10d      	bne.n	8012820 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8012804:	79bb      	ldrb	r3, [r7, #6]
 8012806:	2b01      	cmp	r3, #1
 8012808:	d108      	bne.n	801281c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801280a:	793b      	ldrb	r3, [r7, #4]
 801280c:	f003 0320 	and.w	r3, r3, #32
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b00      	cmp	r3, #0
 8012814:	d004      	beq.n	8012820 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8012816:	f002 fda7 	bl	8015368 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801281a:	e001      	b.n	8012820 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801281c:	f002 fda4 	bl	8015368 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8012820:	bf00      	nop
 8012822:	3708      	adds	r7, #8
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 8012828:	b5b0      	push	{r4, r5, r7, lr}
 801282a:	b092      	sub	sp, #72	; 0x48
 801282c:	af00      	add	r7, sp, #0
 801282e:	4603      	mov	r3, r0
 8012830:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 8012832:	79fb      	ldrb	r3, [r7, #7]
 8012834:	f083 0301 	eor.w	r3, r3, #1
 8012838:	b2db      	uxtb	r3, r3
 801283a:	2b00      	cmp	r3, #0
 801283c:	d003      	beq.n	8012846 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801283e:	4b88      	ldr	r3, [pc, #544]	; (8012a60 <ResetMacParameters+0x238>)
 8012840:	2200      	movs	r2, #0
 8012842:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8012846:	4b86      	ldr	r3, [pc, #536]	; (8012a60 <ResetMacParameters+0x238>)
 8012848:	2200      	movs	r2, #0
 801284a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801284c:	4b85      	ldr	r3, [pc, #532]	; (8012a64 <ResetMacParameters+0x23c>)
 801284e:	2200      	movs	r2, #0
 8012850:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 8012854:	4b83      	ldr	r3, [pc, #524]	; (8012a64 <ResetMacParameters+0x23c>)
 8012856:	2200      	movs	r2, #0
 8012858:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 801285c:	4b81      	ldr	r3, [pc, #516]	; (8012a64 <ResetMacParameters+0x23c>)
 801285e:	2200      	movs	r2, #0
 8012860:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8012864:	4b7e      	ldr	r3, [pc, #504]	; (8012a60 <ResetMacParameters+0x238>)
 8012866:	2200      	movs	r2, #0
 8012868:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 801286c:	4b7c      	ldr	r3, [pc, #496]	; (8012a60 <ResetMacParameters+0x238>)
 801286e:	2201      	movs	r2, #1
 8012870:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012874:	4b7a      	ldr	r3, [pc, #488]	; (8012a60 <ResetMacParameters+0x238>)
 8012876:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801287a:	4b79      	ldr	r3, [pc, #484]	; (8012a60 <ResetMacParameters+0x238>)
 801287c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012880:	4b77      	ldr	r3, [pc, #476]	; (8012a60 <ResetMacParameters+0x238>)
 8012882:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8012886:	4b76      	ldr	r3, [pc, #472]	; (8012a60 <ResetMacParameters+0x238>)
 8012888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 801288c:	4b74      	ldr	r3, [pc, #464]	; (8012a60 <ResetMacParameters+0x238>)
 801288e:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8012892:	4b73      	ldr	r3, [pc, #460]	; (8012a60 <ResetMacParameters+0x238>)
 8012894:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012898:	4b71      	ldr	r3, [pc, #452]	; (8012a60 <ResetMacParameters+0x238>)
 801289a:	4a71      	ldr	r2, [pc, #452]	; (8012a60 <ResetMacParameters+0x238>)
 801289c:	336c      	adds	r3, #108	; 0x6c
 801289e:	32b4      	adds	r2, #180	; 0xb4
 80128a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80128a4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80128a8:	4b6d      	ldr	r3, [pc, #436]	; (8012a60 <ResetMacParameters+0x238>)
 80128aa:	4a6d      	ldr	r2, [pc, #436]	; (8012a60 <ResetMacParameters+0x238>)
 80128ac:	3374      	adds	r3, #116	; 0x74
 80128ae:	32bc      	adds	r2, #188	; 0xbc
 80128b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80128b4:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80128b8:	4b69      	ldr	r3, [pc, #420]	; (8012a60 <ResetMacParameters+0x238>)
 80128ba:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 80128be:	4b68      	ldr	r3, [pc, #416]	; (8012a60 <ResetMacParameters+0x238>)
 80128c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80128c4:	4b66      	ldr	r3, [pc, #408]	; (8012a60 <ResetMacParameters+0x238>)
 80128c6:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 80128ca:	4b65      	ldr	r3, [pc, #404]	; (8012a60 <ResetMacParameters+0x238>)
 80128cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80128d0:	4b63      	ldr	r3, [pc, #396]	; (8012a60 <ResetMacParameters+0x238>)
 80128d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80128d6:	4a62      	ldr	r2, [pc, #392]	; (8012a60 <ResetMacParameters+0x238>)
 80128d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80128dc:	4b60      	ldr	r3, [pc, #384]	; (8012a60 <ResetMacParameters+0x238>)
 80128de:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80128e2:	4a5f      	ldr	r2, [pc, #380]	; (8012a60 <ResetMacParameters+0x238>)
 80128e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80128e8:	4b5d      	ldr	r3, [pc, #372]	; (8012a60 <ResetMacParameters+0x238>)
 80128ea:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80128ee:	4b5c      	ldr	r3, [pc, #368]	; (8012a60 <ResetMacParameters+0x238>)
 80128f0:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80128f4:	4b5a      	ldr	r3, [pc, #360]	; (8012a60 <ResetMacParameters+0x238>)
 80128f6:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80128fa:	4b59      	ldr	r3, [pc, #356]	; (8012a60 <ResetMacParameters+0x238>)
 80128fc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8012900:	4b58      	ldr	r3, [pc, #352]	; (8012a64 <ResetMacParameters+0x23c>)
 8012902:	2200      	movs	r2, #0
 8012904:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 8012908:	4b55      	ldr	r3, [pc, #340]	; (8012a60 <ResetMacParameters+0x238>)
 801290a:	2200      	movs	r2, #0
 801290c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012910:	4b53      	ldr	r3, [pc, #332]	; (8012a60 <ResetMacParameters+0x238>)
 8012912:	2200      	movs	r2, #0
 8012914:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 8012918:	4b51      	ldr	r3, [pc, #324]	; (8012a60 <ResetMacParameters+0x238>)
 801291a:	2200      	movs	r2, #0
 801291c:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 8012920:	4b4f      	ldr	r3, [pc, #316]	; (8012a60 <ResetMacParameters+0x238>)
 8012922:	2200      	movs	r2, #0
 8012924:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 8012928:	4b4d      	ldr	r3, [pc, #308]	; (8012a60 <ResetMacParameters+0x238>)
 801292a:	2200      	movs	r2, #0
 801292c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 8012930:	4b4b      	ldr	r3, [pc, #300]	; (8012a60 <ResetMacParameters+0x238>)
 8012932:	2200      	movs	r2, #0
 8012934:	f883 2139 	strb.w	r2, [r3, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 8012938:	4b49      	ldr	r3, [pc, #292]	; (8012a60 <ResetMacParameters+0x238>)
 801293a:	2200      	movs	r2, #0
 801293c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 8012940:	4b47      	ldr	r3, [pc, #284]	; (8012a60 <ResetMacParameters+0x238>)
 8012942:	2200      	movs	r2, #0
 8012944:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 8012948:	4b45      	ldr	r3, [pc, #276]	; (8012a60 <ResetMacParameters+0x238>)
 801294a:	2200      	movs	r2, #0
 801294c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 8012950:	4b43      	ldr	r3, [pc, #268]	; (8012a60 <ResetMacParameters+0x238>)
 8012952:	2200      	movs	r2, #0
 8012954:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 8012958:	4b41      	ldr	r3, [pc, #260]	; (8012a60 <ResetMacParameters+0x238>)
 801295a:	2200      	movs	r2, #0
 801295c:	f883 2147 	strb.w	r2, [r3, #327]	; 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8012960:	2301      	movs	r3, #1
 8012962:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8012964:	4b40      	ldr	r3, [pc, #256]	; (8012a68 <ResetMacParameters+0x240>)
 8012966:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8012968:	4b40      	ldr	r3, [pc, #256]	; (8012a6c <ResetMacParameters+0x244>)
 801296a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 801296c:	4b40      	ldr	r3, [pc, #256]	; (8012a70 <ResetMacParameters+0x248>)
 801296e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012970:	4b3b      	ldr	r3, [pc, #236]	; (8012a60 <ResetMacParameters+0x238>)
 8012972:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012976:	f107 020c 	add.w	r2, r7, #12
 801297a:	4611      	mov	r1, r2
 801297c:	4618      	mov	r0, r3
 801297e:	f004 f9ff 	bl	8016d80 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8012982:	4b38      	ldr	r3, [pc, #224]	; (8012a64 <ResetMacParameters+0x23c>)
 8012984:	2200      	movs	r2, #0
 8012986:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801298a:	4b36      	ldr	r3, [pc, #216]	; (8012a64 <ResetMacParameters+0x23c>)
 801298c:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8012990:	4b34      	ldr	r3, [pc, #208]	; (8012a64 <ResetMacParameters+0x23c>)
 8012992:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012996:	4b32      	ldr	r3, [pc, #200]	; (8012a60 <ResetMacParameters+0x238>)
 8012998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801299a:	4a32      	ldr	r2, [pc, #200]	; (8012a64 <ResetMacParameters+0x23c>)
 801299c:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80129a0:	4b2f      	ldr	r3, [pc, #188]	; (8012a60 <ResetMacParameters+0x238>)
 80129a2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80129a6:	4b2f      	ldr	r3, [pc, #188]	; (8012a64 <ResetMacParameters+0x23c>)
 80129a8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80129ac:	4b2c      	ldr	r3, [pc, #176]	; (8012a60 <ResetMacParameters+0x238>)
 80129ae:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80129b2:	4b2c      	ldr	r3, [pc, #176]	; (8012a64 <ResetMacParameters+0x23c>)
 80129b4:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80129b8:	4b2a      	ldr	r3, [pc, #168]	; (8012a64 <ResetMacParameters+0x23c>)
 80129ba:	2200      	movs	r2, #0
 80129bc:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80129c0:	4b28      	ldr	r3, [pc, #160]	; (8012a64 <ResetMacParameters+0x23c>)
 80129c2:	2201      	movs	r2, #1
 80129c4:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80129c8:	4b25      	ldr	r3, [pc, #148]	; (8012a60 <ResetMacParameters+0x238>)
 80129ca:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 80129ce:	4b25      	ldr	r3, [pc, #148]	; (8012a64 <ResetMacParameters+0x23c>)
 80129d0:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80129d4:	4a23      	ldr	r2, [pc, #140]	; (8012a64 <ResetMacParameters+0x23c>)
 80129d6:	4b23      	ldr	r3, [pc, #140]	; (8012a64 <ResetMacParameters+0x23c>)
 80129d8:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 80129dc:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 80129e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80129e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80129e4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80129e8:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80129ec:	4b1d      	ldr	r3, [pc, #116]	; (8012a64 <ResetMacParameters+0x23c>)
 80129ee:	2201      	movs	r2, #1
 80129f0:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80129f4:	4b1b      	ldr	r3, [pc, #108]	; (8012a64 <ResetMacParameters+0x23c>)
 80129f6:	2202      	movs	r2, #2
 80129f8:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80129fc:	2300      	movs	r3, #0
 80129fe:	643b      	str	r3, [r7, #64]	; 0x40
    classBCallbacks.MacProcessNotify = NULL;
 8012a00:	2300      	movs	r3, #0
 8012a02:	647b      	str	r3, [r7, #68]	; 0x44

    if( MacCtx.MacCallbacks != NULL )
 8012a04:	4b17      	ldr	r3, [pc, #92]	; (8012a64 <ResetMacParameters+0x23c>)
 8012a06:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d009      	beq.n	8012a22 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8012a0e:	4b15      	ldr	r3, [pc, #84]	; (8012a64 <ResetMacParameters+0x23c>)
 8012a10:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	643b      	str	r3, [r7, #64]	; 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8012a18:	4b12      	ldr	r3, [pc, #72]	; (8012a64 <ResetMacParameters+0x23c>)
 8012a1a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a1e:	695b      	ldr	r3, [r3, #20]
 8012a20:	647b      	str	r3, [r7, #68]	; 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8012a22:	4b14      	ldr	r3, [pc, #80]	; (8012a74 <ResetMacParameters+0x24c>)
 8012a24:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8012a26:	4b14      	ldr	r3, [pc, #80]	; (8012a78 <ResetMacParameters+0x250>)
 8012a28:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8012a2a:	4b14      	ldr	r3, [pc, #80]	; (8012a7c <ResetMacParameters+0x254>)
 8012a2c:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8012a2e:	4b14      	ldr	r3, [pc, #80]	; (8012a80 <ResetMacParameters+0x258>)
 8012a30:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8012a32:	4b14      	ldr	r3, [pc, #80]	; (8012a84 <ResetMacParameters+0x25c>)
 8012a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8012a36:	4b14      	ldr	r3, [pc, #80]	; (8012a88 <ResetMacParameters+0x260>)
 8012a38:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8012a3a:	4b14      	ldr	r3, [pc, #80]	; (8012a8c <ResetMacParameters+0x264>)
 8012a3c:	637b      	str	r3, [r7, #52]	; 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8012a3e:	4b14      	ldr	r3, [pc, #80]	; (8012a90 <ResetMacParameters+0x268>)
 8012a40:	63bb      	str	r3, [r7, #56]	; 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8012a42:	4b14      	ldr	r3, [pc, #80]	; (8012a94 <ResetMacParameters+0x26c>)
 8012a44:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8012a46:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012a4a:	f107 031c 	add.w	r3, r7, #28
 8012a4e:	4a12      	ldr	r2, [pc, #72]	; (8012a98 <ResetMacParameters+0x270>)
 8012a50:	4618      	mov	r0, r3
 8012a52:	f002 f996 	bl	8014d82 <LoRaMacClassBInit>
}
 8012a56:	bf00      	nop
 8012a58:	3748      	adds	r7, #72	; 0x48
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8012a5e:	bf00      	nop
 8012a60:	20000bf0 	.word	0x20000bf0
 8012a64:	200006d4 	.word	0x200006d4
 8012a68:	20000e14 	.word	0x20000e14
 8012a6c:	20000e28 	.word	0x20000e28
 8012a70:	20001788 	.word	0x20001788
 8012a74:	20000b3c 	.word	0x20000b3c
 8012a78:	20000af4 	.word	0x20000af4
 8012a7c:	20000b28 	.word	0x20000b28
 8012a80:	20000b65 	.word	0x20000b65
 8012a84:	20000cd4 	.word	0x20000cd4
 8012a88:	20000c38 	.word	0x20000c38
 8012a8c:	20000c3c 	.word	0x20000c3c
 8012a90:	20000cd8 	.word	0x20000cd8
 8012a94:	20000d20 	.word	0x20000d20
 8012a98:	200011a4 	.word	0x200011a4

08012a9c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b082      	sub	sp, #8
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f00a fd56 	bl	801d558 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8012aac:	4b11      	ldr	r3, [pc, #68]	; (8012af4 <RxWindowSetup+0x58>)
 8012aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ab0:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012ab2:	4b11      	ldr	r3, [pc, #68]	; (8012af8 <RxWindowSetup+0x5c>)
 8012ab4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ab8:	4a10      	ldr	r2, [pc, #64]	; (8012afc <RxWindowSetup+0x60>)
 8012aba:	6839      	ldr	r1, [r7, #0]
 8012abc:	4618      	mov	r0, r3
 8012abe:	f004 f9c7 	bl	8016e50 <RegionRxConfig>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d010      	beq.n	8012aea <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012ac8:	4b0d      	ldr	r3, [pc, #52]	; (8012b00 <RxWindowSetup+0x64>)
 8012aca:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8012ace:	4b0c      	ldr	r3, [pc, #48]	; (8012b00 <RxWindowSetup+0x64>)
 8012ad0:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8012ad4:	4b07      	ldr	r3, [pc, #28]	; (8012af4 <RxWindowSetup+0x58>)
 8012ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ad8:	4a07      	ldr	r2, [pc, #28]	; (8012af8 <RxWindowSetup+0x5c>)
 8012ada:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012adc:	4610      	mov	r0, r2
 8012ade:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8012ae0:	683b      	ldr	r3, [r7, #0]
 8012ae2:	7cda      	ldrb	r2, [r3, #19]
 8012ae4:	4b06      	ldr	r3, [pc, #24]	; (8012b00 <RxWindowSetup+0x64>)
 8012ae6:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8012aea:	bf00      	nop
 8012aec:	3708      	adds	r7, #8
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bd80      	pop	{r7, pc}
 8012af2:	bf00      	nop
 8012af4:	0801ee44 	.word	0x0801ee44
 8012af8:	20000bf0 	.word	0x20000bf0
 8012afc:	20000af8 	.word	0x20000af8
 8012b00:	200006d4 	.word	0x200006d4

08012b04 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8012b04:	b590      	push	{r4, r7, lr}
 8012b06:	b083      	sub	sp, #12
 8012b08:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012b0a:	4b1e      	ldr	r3, [pc, #120]	; (8012b84 <OpenContinuousRxCWindow+0x80>)
 8012b0c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8012b10:	4b1c      	ldr	r3, [pc, #112]	; (8012b84 <OpenContinuousRxCWindow+0x80>)
 8012b12:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8012b16:	b259      	sxtb	r1, r3
 8012b18:	4b1a      	ldr	r3, [pc, #104]	; (8012b84 <OpenContinuousRxCWindow+0x80>)
 8012b1a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8012b1e:	4b19      	ldr	r3, [pc, #100]	; (8012b84 <OpenContinuousRxCWindow+0x80>)
 8012b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012b22:	4c19      	ldr	r4, [pc, #100]	; (8012b88 <OpenContinuousRxCWindow+0x84>)
 8012b24:	9400      	str	r4, [sp, #0]
 8012b26:	f004 f979 	bl	8016e1c <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012b2a:	4b18      	ldr	r3, [pc, #96]	; (8012b8c <OpenContinuousRxCWindow+0x88>)
 8012b2c:	2202      	movs	r2, #2
 8012b2e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012b32:	4b14      	ldr	r3, [pc, #80]	; (8012b84 <OpenContinuousRxCWindow+0x80>)
 8012b34:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8012b38:	4b14      	ldr	r3, [pc, #80]	; (8012b8c <OpenContinuousRxCWindow+0x88>)
 8012b3a:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8012b3e:	4b13      	ldr	r3, [pc, #76]	; (8012b8c <OpenContinuousRxCWindow+0x88>)
 8012b40:	2201      	movs	r2, #1
 8012b42:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8012b46:	4b0f      	ldr	r3, [pc, #60]	; (8012b84 <OpenContinuousRxCWindow+0x80>)
 8012b48:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012b4c:	4a10      	ldr	r2, [pc, #64]	; (8012b90 <OpenContinuousRxCWindow+0x8c>)
 8012b4e:	490e      	ldr	r1, [pc, #56]	; (8012b88 <OpenContinuousRxCWindow+0x84>)
 8012b50:	4618      	mov	r0, r3
 8012b52:	f004 f97d 	bl	8016e50 <RegionRxConfig>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d00f      	beq.n	8012b7c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8012b5c:	4b0b      	ldr	r3, [pc, #44]	; (8012b8c <OpenContinuousRxCWindow+0x88>)
 8012b5e:	f893 2424 	ldrb.w	r2, [r3, #1060]	; 0x424
 8012b62:	4b0a      	ldr	r3, [pc, #40]	; (8012b8c <OpenContinuousRxCWindow+0x88>)
 8012b64:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 8012b68:	4b0a      	ldr	r3, [pc, #40]	; (8012b94 <OpenContinuousRxCWindow+0x90>)
 8012b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b6c:	2000      	movs	r0, #0
 8012b6e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8012b70:	4b06      	ldr	r3, [pc, #24]	; (8012b8c <OpenContinuousRxCWindow+0x88>)
 8012b72:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8012b76:	4b05      	ldr	r3, [pc, #20]	; (8012b8c <OpenContinuousRxCWindow+0x88>)
 8012b78:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8012b7c:	bf00      	nop
 8012b7e:	3704      	adds	r7, #4
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd90      	pop	{r4, r7, pc}
 8012b84:	20000bf0 	.word	0x20000bf0
 8012b88:	20000abc 	.word	0x20000abc
 8012b8c:	200006d4 	.word	0x200006d4
 8012b90:	20000af8 	.word	0x20000af8
 8012b94:	0801ee44 	.word	0x0801ee44

08012b98 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b088      	sub	sp, #32
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	603b      	str	r3, [r7, #0]
 8012ba4:	4613      	mov	r3, r2
 8012ba6:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8012ba8:	4b82      	ldr	r3, [pc, #520]	; (8012db4 <PrepareFrame+0x21c>)
 8012baa:	2200      	movs	r2, #0
 8012bac:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8012bae:	4b81      	ldr	r3, [pc, #516]	; (8012db4 <PrepareFrame+0x21c>)
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d101      	bne.n	8012bcc <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8012bc8:	2300      	movs	r3, #0
 8012bca:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8012bcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012bce:	461a      	mov	r2, r3
 8012bd0:	6839      	ldr	r1, [r7, #0]
 8012bd2:	4879      	ldr	r0, [pc, #484]	; (8012db8 <PrepareFrame+0x220>)
 8012bd4:	f006 fc63 	bl	801949e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8012bd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012bda:	b2da      	uxtb	r2, r3
 8012bdc:	4b75      	ldr	r3, [pc, #468]	; (8012db4 <PrepareFrame+0x21c>)
 8012bde:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	781a      	ldrb	r2, [r3, #0]
 8012be6:	4b73      	ldr	r3, [pc, #460]	; (8012db4 <PrepareFrame+0x21c>)
 8012be8:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	2b07      	cmp	r3, #7
 8012bf6:	f000 80b9 	beq.w	8012d6c <PrepareFrame+0x1d4>
 8012bfa:	2b07      	cmp	r3, #7
 8012bfc:	f300 80d0 	bgt.w	8012da0 <PrepareFrame+0x208>
 8012c00:	2b02      	cmp	r3, #2
 8012c02:	d006      	beq.n	8012c12 <PrepareFrame+0x7a>
 8012c04:	2b04      	cmp	r3, #4
 8012c06:	f040 80cb 	bne.w	8012da0 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8012c0a:	4b6a      	ldr	r3, [pc, #424]	; (8012db4 <PrepareFrame+0x21c>)
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8012c12:	4b68      	ldr	r3, [pc, #416]	; (8012db4 <PrepareFrame+0x21c>)
 8012c14:	2204      	movs	r2, #4
 8012c16:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8012c1a:	4b66      	ldr	r3, [pc, #408]	; (8012db4 <PrepareFrame+0x21c>)
 8012c1c:	4a67      	ldr	r2, [pc, #412]	; (8012dbc <PrepareFrame+0x224>)
 8012c1e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012c22:	4b64      	ldr	r3, [pc, #400]	; (8012db4 <PrepareFrame+0x21c>)
 8012c24:	22ff      	movs	r2, #255	; 0xff
 8012c26:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	781a      	ldrb	r2, [r3, #0]
 8012c2e:	4b61      	ldr	r3, [pc, #388]	; (8012db4 <PrepareFrame+0x21c>)
 8012c30:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8012c34:	4a5f      	ldr	r2, [pc, #380]	; (8012db4 <PrepareFrame+0x21c>)
 8012c36:	79fb      	ldrb	r3, [r7, #7]
 8012c38:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8012c3c:	4b60      	ldr	r3, [pc, #384]	; (8012dc0 <PrepareFrame+0x228>)
 8012c3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8012c42:	4a5c      	ldr	r2, [pc, #368]	; (8012db4 <PrepareFrame+0x21c>)
 8012c44:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	781a      	ldrb	r2, [r3, #0]
 8012c4c:	4b59      	ldr	r3, [pc, #356]	; (8012db4 <PrepareFrame+0x21c>)
 8012c4e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8012c52:	4b58      	ldr	r3, [pc, #352]	; (8012db4 <PrepareFrame+0x21c>)
 8012c54:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8012c58:	4b56      	ldr	r3, [pc, #344]	; (8012db4 <PrepareFrame+0x21c>)
 8012c5a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8012c5e:	4b55      	ldr	r3, [pc, #340]	; (8012db4 <PrepareFrame+0x21c>)
 8012c60:	4a55      	ldr	r2, [pc, #340]	; (8012db8 <PrepareFrame+0x220>)
 8012c62:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8012c66:	f107 0318 	add.w	r3, r7, #24
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f003 f9dc 	bl	8016028 <LoRaMacCryptoGetFCntUp>
 8012c70:	4603      	mov	r3, r0
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d001      	beq.n	8012c7a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8012c76:	2312      	movs	r3, #18
 8012c78:	e098      	b.n	8012dac <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8012c7a:	69bb      	ldr	r3, [r7, #24]
 8012c7c:	b29a      	uxth	r2, r3
 8012c7e:	4b4d      	ldr	r3, [pc, #308]	; (8012db4 <PrepareFrame+0x21c>)
 8012c80:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 8012c84:	4b4b      	ldr	r3, [pc, #300]	; (8012db4 <PrepareFrame+0x21c>)
 8012c86:	2200      	movs	r2, #0
 8012c88:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8012c8c:	4b49      	ldr	r3, [pc, #292]	; (8012db4 <PrepareFrame+0x21c>)
 8012c8e:	2200      	movs	r2, #0
 8012c90:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8012c94:	69bb      	ldr	r3, [r7, #24]
 8012c96:	4a47      	ldr	r2, [pc, #284]	; (8012db4 <PrepareFrame+0x21c>)
 8012c98:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012c9c:	f107 0314 	add.w	r3, r7, #20
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f002 fb8d 	bl	80153c0 <LoRaMacCommandsGetSizeSerializedCmds>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d001      	beq.n	8012cb0 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cac:	2313      	movs	r3, #19
 8012cae:	e07d      	b.n	8012dac <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d076      	beq.n	8012da4 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8012cb6:	4b42      	ldr	r3, [pc, #264]	; (8012dc0 <PrepareFrame+0x228>)
 8012cb8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7fe fd2b 	bl	8011718 <GetMaxAppPayloadWithoutFOptsLength>
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012cc6:	4b3b      	ldr	r3, [pc, #236]	; (8012db4 <PrepareFrame+0x21c>)
 8012cc8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d01d      	beq.n	8012d0c <PrepareFrame+0x174>
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	2b0f      	cmp	r3, #15
 8012cd4:	d81a      	bhi.n	8012d0c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8012cd6:	f107 0314 	add.w	r3, r7, #20
 8012cda:	4a3a      	ldr	r2, [pc, #232]	; (8012dc4 <PrepareFrame+0x22c>)
 8012cdc:	4619      	mov	r1, r3
 8012cde:	200f      	movs	r0, #15
 8012ce0:	f002 fb84 	bl	80153ec <LoRaMacCommandsSerializeCmds>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d001      	beq.n	8012cee <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cea:	2313      	movs	r3, #19
 8012cec:	e05e      	b.n	8012dac <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	f003 030f 	and.w	r3, r3, #15
 8012cf4:	b2d9      	uxtb	r1, r3
 8012cf6:	68ba      	ldr	r2, [r7, #8]
 8012cf8:	7813      	ldrb	r3, [r2, #0]
 8012cfa:	f361 0303 	bfi	r3, r1, #0, #4
 8012cfe:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8012d00:	68bb      	ldr	r3, [r7, #8]
 8012d02:	781a      	ldrb	r2, [r3, #0]
 8012d04:	4b2b      	ldr	r3, [pc, #172]	; (8012db4 <PrepareFrame+0x21c>)
 8012d06:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8012d0a:	e04b      	b.n	8012da4 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8012d0c:	4b29      	ldr	r3, [pc, #164]	; (8012db4 <PrepareFrame+0x21c>)
 8012d0e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d010      	beq.n	8012d38 <PrepareFrame+0x1a0>
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	2b0f      	cmp	r3, #15
 8012d1a:	d90d      	bls.n	8012d38 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012d1c:	7ffb      	ldrb	r3, [r7, #31]
 8012d1e:	f107 0114 	add.w	r1, r7, #20
 8012d22:	4a29      	ldr	r2, [pc, #164]	; (8012dc8 <PrepareFrame+0x230>)
 8012d24:	4618      	mov	r0, r3
 8012d26:	f002 fb61 	bl	80153ec <LoRaMacCommandsSerializeCmds>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d001      	beq.n	8012d34 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d30:	2313      	movs	r3, #19
 8012d32:	e03b      	b.n	8012dac <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8012d34:	230a      	movs	r3, #10
 8012d36:	e039      	b.n	8012dac <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8012d38:	7ffb      	ldrb	r3, [r7, #31]
 8012d3a:	f107 0114 	add.w	r1, r7, #20
 8012d3e:	4a22      	ldr	r2, [pc, #136]	; (8012dc8 <PrepareFrame+0x230>)
 8012d40:	4618      	mov	r0, r3
 8012d42:	f002 fb53 	bl	80153ec <LoRaMacCommandsSerializeCmds>
 8012d46:	4603      	mov	r3, r0
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d001      	beq.n	8012d50 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d4c:	2313      	movs	r3, #19
 8012d4e:	e02d      	b.n	8012dac <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8012d50:	4b18      	ldr	r3, [pc, #96]	; (8012db4 <PrepareFrame+0x21c>)
 8012d52:	2200      	movs	r2, #0
 8012d54:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8012d58:	4b16      	ldr	r3, [pc, #88]	; (8012db4 <PrepareFrame+0x21c>)
 8012d5a:	4a1b      	ldr	r2, [pc, #108]	; (8012dc8 <PrepareFrame+0x230>)
 8012d5c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	b2da      	uxtb	r2, r3
 8012d64:	4b13      	ldr	r3, [pc, #76]	; (8012db4 <PrepareFrame+0x21c>)
 8012d66:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8012d6a:	e01b      	b.n	8012da4 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d01a      	beq.n	8012da8 <PrepareFrame+0x210>
 8012d72:	4b10      	ldr	r3, [pc, #64]	; (8012db4 <PrepareFrame+0x21c>)
 8012d74:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d015      	beq.n	8012da8 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8012d7c:	4813      	ldr	r0, [pc, #76]	; (8012dcc <PrepareFrame+0x234>)
 8012d7e:	4b0d      	ldr	r3, [pc, #52]	; (8012db4 <PrepareFrame+0x21c>)
 8012d80:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	461a      	mov	r2, r3
 8012d88:	6839      	ldr	r1, [r7, #0]
 8012d8a:	f006 fb88 	bl	801949e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8012d8e:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <PrepareFrame+0x21c>)
 8012d90:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8012d94:	b29b      	uxth	r3, r3
 8012d96:	3301      	adds	r3, #1
 8012d98:	b29a      	uxth	r2, r3
 8012d9a:	4b06      	ldr	r3, [pc, #24]	; (8012db4 <PrepareFrame+0x21c>)
 8012d9c:	801a      	strh	r2, [r3, #0]
            }
            break;
 8012d9e:	e003      	b.n	8012da8 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012da0:	2302      	movs	r3, #2
 8012da2:	e003      	b.n	8012dac <PrepareFrame+0x214>
            break;
 8012da4:	bf00      	nop
 8012da6:	e000      	b.n	8012daa <PrepareFrame+0x212>
            break;
 8012da8:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8012daa:	2300      	movs	r3, #0
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3720      	adds	r7, #32
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	200006d4 	.word	0x200006d4
 8012db8:	2000080c 	.word	0x2000080c
 8012dbc:	200006d6 	.word	0x200006d6
 8012dc0:	20000bf0 	.word	0x20000bf0
 8012dc4:	200007ec 	.word	0x200007ec
 8012dc8:	20000b70 	.word	0x20000b70
 8012dcc:	200006d7 	.word	0x200006d7

08012dd0 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b08a      	sub	sp, #40	; 0x28
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012dda:	2303      	movs	r3, #3
 8012ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8012de0:	2300      	movs	r3, #0
 8012de2:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8012de4:	79fb      	ldrb	r3, [r7, #7]
 8012de6:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012de8:	4b4b      	ldr	r3, [pc, #300]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012dea:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012dee:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012df0:	4b49      	ldr	r3, [pc, #292]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012df2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012df6:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8012df8:	4b47      	ldr	r3, [pc, #284]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012dfe:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012e00:	4b45      	ldr	r3, [pc, #276]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012e02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e06:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8012e08:	4b44      	ldr	r3, [pc, #272]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e0a:	881b      	ldrh	r3, [r3, #0]
 8012e0c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8012e0e:	4b42      	ldr	r3, [pc, #264]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012e10:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8012e14:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8012e16:	4b40      	ldr	r3, [pc, #256]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012e18:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012e1c:	f107 020f 	add.w	r2, r7, #15
 8012e20:	f107 0110 	add.w	r1, r7, #16
 8012e24:	4b3e      	ldr	r3, [pc, #248]	; (8012f20 <SendFrameOnChannel+0x150>)
 8012e26:	f004 f828 	bl	8016e7a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e2a:	4b3c      	ldr	r3, [pc, #240]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e2c:	2201      	movs	r2, #1
 8012e2e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e32:	4b39      	ldr	r3, [pc, #228]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012e34:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012e38:	b2da      	uxtb	r2, r3
 8012e3a:	4b38      	ldr	r3, [pc, #224]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e3c:	f883 2442 	strb.w	r2, [r3, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 8012e40:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012e44:	4b35      	ldr	r3, [pc, #212]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e46:	f883 2443 	strb.w	r2, [r3, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 8012e4a:	79fb      	ldrb	r3, [r7, #7]
 8012e4c:	4a33      	ldr	r2, [pc, #204]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e4e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012e52:	4b32      	ldr	r3, [pc, #200]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e54:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8012e58:	4a30      	ldr	r2, [pc, #192]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e5a:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8012e5e:	4b2f      	ldr	r3, [pc, #188]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e60:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8012e64:	4a2d      	ldr	r2, [pc, #180]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e66:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8012e6a:	f001 fff6 	bl	8014e5a <LoRaMacClassBIsBeaconModeActive>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d00b      	beq.n	8012e8c <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8012e74:	4b29      	ldr	r3, [pc, #164]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012e76:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f002 f858 	bl	8014f30 <LoRaMacClassBIsUplinkCollision>
 8012e80:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d001      	beq.n	8012e8c <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8012e88:	2310      	movs	r3, #16
 8012e8a:	e040      	b.n	8012f0e <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012e8c:	4b22      	ldr	r3, [pc, #136]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012e8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e92:	2b01      	cmp	r3, #1
 8012e94:	d101      	bne.n	8012e9a <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8012e96:	f002 f855 	bl	8014f44 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8012e9a:	f001 ffef 	bl	8014e7c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8012e9e:	4b1e      	ldr	r3, [pc, #120]	; (8012f18 <SendFrameOnChannel+0x148>)
 8012ea0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	4a1d      	ldr	r2, [pc, #116]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012ea8:	f892 241b 	ldrb.w	r2, [r2, #1051]	; 0x41b
 8012eac:	4611      	mov	r1, r2
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7ff fc2a 	bl	8012708 <SecureFrame>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8012eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d002      	beq.n	8012ec8 <SendFrameOnChannel+0xf8>
    {
        return status;
 8012ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ec6:	e022      	b.n	8012f0e <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012ec8:	4b14      	ldr	r3, [pc, #80]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012eca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012ece:	f043 0302 	orr.w	r3, r3, #2
 8012ed2:	4a12      	ldr	r2, [pc, #72]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012ed4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 8012ed8:	4b10      	ldr	r3, [pc, #64]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012eda:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8012ede:	3301      	adds	r3, #1
 8012ee0:	b2da      	uxtb	r2, r3
 8012ee2:	4b0e      	ldr	r3, [pc, #56]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012ee4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8012ee8:	4b0c      	ldr	r3, [pc, #48]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012eea:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8012eee:	4b0b      	ldr	r3, [pc, #44]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012ef0:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 8012ef4:	4b09      	ldr	r3, [pc, #36]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8012efc:	4b09      	ldr	r3, [pc, #36]	; (8012f24 <SendFrameOnChannel+0x154>)
 8012efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f00:	4a06      	ldr	r2, [pc, #24]	; (8012f1c <SendFrameOnChannel+0x14c>)
 8012f02:	8812      	ldrh	r2, [r2, #0]
 8012f04:	b2d2      	uxtb	r2, r2
 8012f06:	4611      	mov	r1, r2
 8012f08:	4807      	ldr	r0, [pc, #28]	; (8012f28 <SendFrameOnChannel+0x158>)
 8012f0a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8012f0c:	2300      	movs	r3, #0
}
 8012f0e:	4618      	mov	r0, r3
 8012f10:	3728      	adds	r7, #40	; 0x28
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}
 8012f16:	bf00      	nop
 8012f18:	20000bf0 	.word	0x20000bf0
 8012f1c:	200006d4 	.word	0x200006d4
 8012f20:	20000af0 	.word	0x20000af0
 8012f24:	0801ee44 	.word	0x0801ee44
 8012f28:	200006d6 	.word	0x200006d6

08012f2c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	4603      	mov	r3, r0
 8012f34:	6039      	str	r1, [r7, #0]
 8012f36:	80fb      	strh	r3, [r7, #6]
 8012f38:	4613      	mov	r3, r2
 8012f3a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8012f3c:	4b09      	ldr	r3, [pc, #36]	; (8012f64 <SetTxContinuousWave+0x38>)
 8012f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f40:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012f44:	88fa      	ldrh	r2, [r7, #6]
 8012f46:	6838      	ldr	r0, [r7, #0]
 8012f48:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8012f4a:	4b07      	ldr	r3, [pc, #28]	; (8012f68 <SetTxContinuousWave+0x3c>)
 8012f4c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012f50:	f043 0302 	orr.w	r3, r3, #2
 8012f54:	4a04      	ldr	r2, [pc, #16]	; (8012f68 <SetTxContinuousWave+0x3c>)
 8012f56:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8012f5a:	2300      	movs	r3, #0
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3708      	adds	r7, #8
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	0801ee44 	.word	0x0801ee44
 8012f68:	200006d4 	.word	0x200006d4

08012f6c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 8012f72:	2300      	movs	r3, #0
 8012f74:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8012f76:	4b49      	ldr	r3, [pc, #292]	; (801309c <RestoreNvmData+0x130>)
 8012f78:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d001      	beq.n	8012f84 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8012f80:	2301      	movs	r3, #1
 8012f82:	e087      	b.n	8013094 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8012f84:	2124      	movs	r1, #36	; 0x24
 8012f86:	4846      	ldr	r0, [pc, #280]	; (80130a0 <RestoreNvmData+0x134>)
 8012f88:	f006 fade 	bl	8019548 <Crc32>
 8012f8c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8012f8e:	4b44      	ldr	r3, [pc, #272]	; (80130a0 <RestoreNvmData+0x134>)
 8012f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	429a      	cmp	r2, r3
 8012f96:	d001      	beq.n	8012f9c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012f98:	2317      	movs	r3, #23
 8012f9a:	e07b      	b.n	8013094 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8012f9c:	211c      	movs	r1, #28
 8012f9e:	4841      	ldr	r0, [pc, #260]	; (80130a4 <RestoreNvmData+0x138>)
 8012fa0:	f006 fad2 	bl	8019548 <Crc32>
 8012fa4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8012fa6:	4b3e      	ldr	r3, [pc, #248]	; (80130a0 <RestoreNvmData+0x134>)
 8012fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012faa:	687a      	ldr	r2, [r7, #4]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d001      	beq.n	8012fb4 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012fb0:	2317      	movs	r3, #23
 8012fb2:	e06f      	b.n	8013094 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8012fb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012fb8:	483b      	ldr	r0, [pc, #236]	; (80130a8 <RestoreNvmData+0x13c>)
 8012fba:	f006 fac5 	bl	8019548 <Crc32>
 8012fbe:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8012fc0:	4b37      	ldr	r3, [pc, #220]	; (80130a0 <RestoreNvmData+0x134>)
 8012fc2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8012fc6:	687a      	ldr	r2, [r7, #4]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d001      	beq.n	8012fd0 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012fcc:	2317      	movs	r3, #23
 8012fce:	e061      	b.n	8013094 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8012fd0:	21d4      	movs	r1, #212	; 0xd4
 8012fd2:	4836      	ldr	r0, [pc, #216]	; (80130ac <RestoreNvmData+0x140>)
 8012fd4:	f006 fab8 	bl	8019548 <Crc32>
 8012fd8:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8012fda:	4b31      	ldr	r3, [pc, #196]	; (80130a0 <RestoreNvmData+0x134>)
 8012fdc:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d001      	beq.n	8012fea <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8012fe6:	2317      	movs	r3, #23
 8012fe8:	e054      	b.n	8013094 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8012fea:	2110      	movs	r1, #16
 8012fec:	4830      	ldr	r0, [pc, #192]	; (80130b0 <RestoreNvmData+0x144>)
 8012fee:	f006 faab 	bl	8019548 <Crc32>
 8012ff2:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8012ff4:	4b2a      	ldr	r3, [pc, #168]	; (80130a0 <RestoreNvmData+0x134>)
 8012ff6:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d001      	beq.n	8013004 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013000:	2317      	movs	r3, #23
 8013002:	e047      	b.n	8013094 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 8013004:	f44f 715e 	mov.w	r1, #888	; 0x378
 8013008:	482a      	ldr	r0, [pc, #168]	; (80130b4 <RestoreNvmData+0x148>)
 801300a:	f006 fa9d 	bl	8019548 <Crc32>
 801300e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 8013010:	4b23      	ldr	r3, [pc, #140]	; (80130a0 <RestoreNvmData+0x134>)
 8013012:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8013016:	687a      	ldr	r2, [r7, #4]
 8013018:	429a      	cmp	r2, r3
 801301a:	d001      	beq.n	8013020 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801301c:	2317      	movs	r3, #23
 801301e:	e039      	b.n	8013094 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8013020:	2114      	movs	r1, #20
 8013022:	4825      	ldr	r0, [pc, #148]	; (80130b8 <RestoreNvmData+0x14c>)
 8013024:	f006 fa90 	bl	8019548 <Crc32>
 8013028:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 801302a:	4b1d      	ldr	r3, [pc, #116]	; (80130a0 <RestoreNvmData+0x134>)
 801302c:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 8013030:	687a      	ldr	r2, [r7, #4]
 8013032:	429a      	cmp	r2, r3
 8013034:	d001      	beq.n	801303a <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8013036:	2317      	movs	r3, #23
 8013038:	e02c      	b.n	8013094 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 801303a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801303e:	4918      	ldr	r1, [pc, #96]	; (80130a0 <RestoreNvmData+0x134>)
 8013040:	481e      	ldr	r0, [pc, #120]	; (80130bc <RestoreNvmData+0x150>)
 8013042:	f006 fa2c 	bl	801949e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8013046:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801304a:	2100      	movs	r1, #0
 801304c:	4814      	ldr	r0, [pc, #80]	; (80130a0 <RestoreNvmData+0x134>)
 801304e:	f006 fa61 	bl	8019514 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013052:	4b12      	ldr	r3, [pc, #72]	; (801309c <RestoreNvmData+0x130>)
 8013054:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 8013058:	4b10      	ldr	r3, [pc, #64]	; (801309c <RestoreNvmData+0x130>)
 801305a:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801305e:	4b17      	ldr	r3, [pc, #92]	; (80130bc <RestoreNvmData+0x150>)
 8013060:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013062:	4a0e      	ldr	r2, [pc, #56]	; (801309c <RestoreNvmData+0x130>)
 8013064:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013068:	4b14      	ldr	r3, [pc, #80]	; (80130bc <RestoreNvmData+0x150>)
 801306a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801306e:	4b0b      	ldr	r3, [pc, #44]	; (801309c <RestoreNvmData+0x130>)
 8013070:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013074:	4b09      	ldr	r3, [pc, #36]	; (801309c <RestoreNvmData+0x130>)
 8013076:	2201      	movs	r2, #1
 8013078:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801307c:	4b07      	ldr	r3, [pc, #28]	; (801309c <RestoreNvmData+0x130>)
 801307e:	2202      	movs	r2, #2
 8013080:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013084:	4b0e      	ldr	r3, [pc, #56]	; (80130c0 <RestoreNvmData+0x154>)
 8013086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013088:	4a0c      	ldr	r2, [pc, #48]	; (80130bc <RestoreNvmData+0x150>)
 801308a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801308e:	4610      	mov	r0, r2
 8013090:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013092:	2300      	movs	r3, #0
}
 8013094:	4618      	mov	r0, r3
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	200006d4 	.word	0x200006d4
 80130a0:	200011bc 	.word	0x200011bc
 80130a4:	200011e4 	.word	0x200011e4
 80130a8:	20001204 	.word	0x20001204
 80130ac:	20001308 	.word	0x20001308
 80130b0:	200013e0 	.word	0x200013e0
 80130b4:	200013f4 	.word	0x200013f4
 80130b8:	20001770 	.word	0x20001770
 80130bc:	20000bf0 	.word	0x20000bf0
 80130c0:	0801ee44 	.word	0x0801ee44

080130c4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80130c4:	b480      	push	{r7}
 80130c6:	b083      	sub	sp, #12
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d002      	beq.n	80130da <DetermineFrameType+0x16>
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d101      	bne.n	80130de <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80130da:	2303      	movs	r3, #3
 80130dc:	e03b      	b.n	8013156 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	7b1b      	ldrb	r3, [r3, #12]
 80130e2:	f003 030f 	and.w	r3, r3, #15
 80130e6:	b2db      	uxtb	r3, r3
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d008      	beq.n	80130fe <DetermineFrameType+0x3a>
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d003      	beq.n	80130fe <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	2200      	movs	r2, #0
 80130fa:	701a      	strb	r2, [r3, #0]
 80130fc:	e02a      	b.n	8013154 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013104:	2b00      	cmp	r3, #0
 8013106:	d103      	bne.n	8013110 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	2201      	movs	r2, #1
 801310c:	701a      	strb	r2, [r3, #0]
 801310e:	e021      	b.n	8013154 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	7b1b      	ldrb	r3, [r3, #12]
 8013114:	f003 030f 	and.w	r3, r3, #15
 8013118:	b2db      	uxtb	r3, r3
 801311a:	2b00      	cmp	r3, #0
 801311c:	d108      	bne.n	8013130 <DetermineFrameType+0x6c>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d103      	bne.n	8013130 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	2202      	movs	r2, #2
 801312c:	701a      	strb	r2, [r3, #0]
 801312e:	e011      	b.n	8013154 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	7b1b      	ldrb	r3, [r3, #12]
 8013134:	f003 030f 	and.w	r3, r3, #15
 8013138:	b2db      	uxtb	r3, r3
 801313a:	2b00      	cmp	r3, #0
 801313c:	d108      	bne.n	8013150 <DetermineFrameType+0x8c>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d003      	beq.n	8013150 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	2203      	movs	r2, #3
 801314c:	701a      	strb	r2, [r3, #0]
 801314e:	e001      	b.n	8013154 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013150:	2318      	movs	r3, #24
 8013152:	e000      	b.n	8013156 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013154:	2300      	movs	r3, #0
}
 8013156:	4618      	mov	r0, r3
 8013158:	370c      	adds	r7, #12
 801315a:	46bd      	mov	sp, r7
 801315c:	bc80      	pop	{r7}
 801315e:	4770      	bx	lr

08013160 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8013160:	b480      	push	{r7}
 8013162:	b083      	sub	sp, #12
 8013164:	af00      	add	r7, sp, #0
 8013166:	4603      	mov	r3, r0
 8013168:	460a      	mov	r2, r1
 801316a:	71fb      	strb	r3, [r7, #7]
 801316c:	4613      	mov	r3, r2
 801316e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8013170:	79fa      	ldrb	r2, [r7, #7]
 8013172:	79bb      	ldrb	r3, [r7, #6]
 8013174:	429a      	cmp	r2, r3
 8013176:	d301      	bcc.n	801317c <CheckRetrans+0x1c>
    {
        return true;
 8013178:	2301      	movs	r3, #1
 801317a:	e000      	b.n	801317e <CheckRetrans+0x1e>
    }
    return false;
 801317c:	2300      	movs	r3, #0
}
 801317e:	4618      	mov	r0, r3
 8013180:	370c      	adds	r7, #12
 8013182:	46bd      	mov	sp, r7
 8013184:	bc80      	pop	{r7}
 8013186:	4770      	bx	lr

08013188 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8013188:	b580      	push	{r7, lr}
 801318a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 801318c:	4b12      	ldr	r3, [pc, #72]	; (80131d8 <CheckRetransUnconfirmedUplink+0x50>)
 801318e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013192:	4a12      	ldr	r2, [pc, #72]	; (80131dc <CheckRetransUnconfirmedUplink+0x54>)
 8013194:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 8013198:	4611      	mov	r1, r2
 801319a:	4618      	mov	r0, r3
 801319c:	f7ff ffe0 	bl	8013160 <CheckRetrans>
 80131a0:	4603      	mov	r3, r0
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d001      	beq.n	80131aa <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80131a6:	2301      	movs	r3, #1
 80131a8:	e014      	b.n	80131d4 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80131aa:	4b0b      	ldr	r3, [pc, #44]	; (80131d8 <CheckRetransUnconfirmedUplink+0x50>)
 80131ac:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80131b0:	f003 0302 	and.w	r3, r3, #2
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d00b      	beq.n	80131d2 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80131ba:	4b07      	ldr	r3, [pc, #28]	; (80131d8 <CheckRetransUnconfirmedUplink+0x50>)
 80131bc:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d004      	beq.n	80131ce <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80131c4:	4b04      	ldr	r3, [pc, #16]	; (80131d8 <CheckRetransUnconfirmedUplink+0x50>)
 80131c6:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80131ca:	2b01      	cmp	r3, #1
 80131cc:	d101      	bne.n	80131d2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80131ce:	2301      	movs	r3, #1
 80131d0:	e000      	b.n	80131d4 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80131d2:	2300      	movs	r3, #0
}
 80131d4:	4618      	mov	r0, r3
 80131d6:	bd80      	pop	{r7, pc}
 80131d8:	200006d4 	.word	0x200006d4
 80131dc:	20000bf0 	.word	0x20000bf0

080131e0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80131e4:	4b10      	ldr	r3, [pc, #64]	; (8013228 <CheckRetransConfirmedUplink+0x48>)
 80131e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80131ea:	4a10      	ldr	r2, [pc, #64]	; (801322c <CheckRetransConfirmedUplink+0x4c>)
 80131ec:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
 80131f0:	4611      	mov	r1, r2
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7ff ffb4 	bl	8013160 <CheckRetrans>
 80131f8:	4603      	mov	r3, r0
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d001      	beq.n	8013202 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80131fe:	2301      	movs	r3, #1
 8013200:	e00f      	b.n	8013222 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013202:	4b09      	ldr	r3, [pc, #36]	; (8013228 <CheckRetransConfirmedUplink+0x48>)
 8013204:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8013208:	f003 0302 	and.w	r3, r3, #2
 801320c:	b2db      	uxtb	r3, r3
 801320e:	2b00      	cmp	r3, #0
 8013210:	d006      	beq.n	8013220 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013212:	4b05      	ldr	r3, [pc, #20]	; (8013228 <CheckRetransConfirmedUplink+0x48>)
 8013214:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 8013218:	2b00      	cmp	r3, #0
 801321a:	d001      	beq.n	8013220 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 801321c:	2301      	movs	r3, #1
 801321e:	e000      	b.n	8013222 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8013220:	2300      	movs	r3, #0
}
 8013222:	4618      	mov	r0, r3
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	200006d4 	.word	0x200006d4
 801322c:	20000bf0 	.word	0x20000bf0

08013230 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8013230:	b480      	push	{r7}
 8013232:	b083      	sub	sp, #12
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801323e:	d002      	beq.n	8013246 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	3301      	adds	r3, #1
 8013244:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8013246:	687b      	ldr	r3, [r7, #4]
}
 8013248:	4618      	mov	r0, r3
 801324a:	370c      	adds	r7, #12
 801324c:	46bd      	mov	sp, r7
 801324e:	bc80      	pop	{r7}
 8013250:	4770      	bx	lr
	...

08013254 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013258:	4b1a      	ldr	r3, [pc, #104]	; (80132c4 <StopRetransmission+0x70>)
 801325a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801325e:	f003 0302 	and.w	r3, r3, #2
 8013262:	b2db      	uxtb	r3, r3
 8013264:	2b00      	cmp	r3, #0
 8013266:	d009      	beq.n	801327c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013268:	4b16      	ldr	r3, [pc, #88]	; (80132c4 <StopRetransmission+0x70>)
 801326a:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801326e:	2b00      	cmp	r3, #0
 8013270:	d011      	beq.n	8013296 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013272:	4b14      	ldr	r3, [pc, #80]	; (80132c4 <StopRetransmission+0x70>)
 8013274:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013278:	2b01      	cmp	r3, #1
 801327a:	d00c      	beq.n	8013296 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 801327c:	4b12      	ldr	r3, [pc, #72]	; (80132c8 <StopRetransmission+0x74>)
 801327e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013282:	2b00      	cmp	r3, #0
 8013284:	d007      	beq.n	8013296 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8013286:	4b10      	ldr	r3, [pc, #64]	; (80132c8 <StopRetransmission+0x74>)
 8013288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff ffd0 	bl	8013230 <IncreaseAdrAckCounter>
 8013290:	4603      	mov	r3, r0
 8013292:	4a0d      	ldr	r2, [pc, #52]	; (80132c8 <StopRetransmission+0x74>)
 8013294:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013296:	4b0b      	ldr	r3, [pc, #44]	; (80132c4 <StopRetransmission+0x70>)
 8013298:	2200      	movs	r2, #0
 801329a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 801329e:	4b09      	ldr	r3, [pc, #36]	; (80132c4 <StopRetransmission+0x70>)
 80132a0:	2200      	movs	r2, #0
 80132a2:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 80132a6:	4b07      	ldr	r3, [pc, #28]	; (80132c4 <StopRetransmission+0x70>)
 80132a8:	2200      	movs	r2, #0
 80132aa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80132ae:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <StopRetransmission+0x70>)
 80132b0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80132b4:	f023 0302 	bic.w	r3, r3, #2
 80132b8:	4a02      	ldr	r2, [pc, #8]	; (80132c4 <StopRetransmission+0x70>)
 80132ba:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80132be:	2301      	movs	r3, #1
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	200006d4 	.word	0x200006d4
 80132c8:	20000bf0 	.word	0x20000bf0

080132cc <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80132d0:	4b08      	ldr	r3, [pc, #32]	; (80132f4 <OnMacProcessNotify+0x28>)
 80132d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d00a      	beq.n	80132f0 <OnMacProcessNotify+0x24>
 80132da:	4b06      	ldr	r3, [pc, #24]	; (80132f4 <OnMacProcessNotify+0x28>)
 80132dc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80132e0:	695b      	ldr	r3, [r3, #20]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d004      	beq.n	80132f0 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80132e6:	4b03      	ldr	r3, [pc, #12]	; (80132f4 <OnMacProcessNotify+0x28>)
 80132e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80132ec:	695b      	ldr	r3, [r3, #20]
 80132ee:	4798      	blx	r3
    }
}
 80132f0:	bf00      	nop
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	200006d4 	.word	0x200006d4

080132f8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	4603      	mov	r3, r0
 8013300:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013302:	4b0b      	ldr	r3, [pc, #44]	; (8013330 <CallNvmDataChangeCallback+0x38>)
 8013304:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013308:	2b00      	cmp	r3, #0
 801330a:	d00c      	beq.n	8013326 <CallNvmDataChangeCallback+0x2e>
 801330c:	4b08      	ldr	r3, [pc, #32]	; (8013330 <CallNvmDataChangeCallback+0x38>)
 801330e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013312:	691b      	ldr	r3, [r3, #16]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d006      	beq.n	8013326 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013318:	4b05      	ldr	r3, [pc, #20]	; (8013330 <CallNvmDataChangeCallback+0x38>)
 801331a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801331e:	691b      	ldr	r3, [r3, #16]
 8013320:	88fa      	ldrh	r2, [r7, #6]
 8013322:	4610      	mov	r0, r2
 8013324:	4798      	blx	r3
    }
}
 8013326:	bf00      	nop
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}
 801332e:	bf00      	nop
 8013330:	200006d4 	.word	0x200006d4

08013334 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013334:	b480      	push	{r7}
 8013336:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013338:	4b0b      	ldr	r3, [pc, #44]	; (8013368 <IsRequestPending+0x34>)
 801333a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801333e:	f003 0304 	and.w	r3, r3, #4
 8013342:	b2db      	uxtb	r3, r3
 8013344:	2b00      	cmp	r3, #0
 8013346:	d107      	bne.n	8013358 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013348:	4b07      	ldr	r3, [pc, #28]	; (8013368 <IsRequestPending+0x34>)
 801334a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 801334e:	f003 0301 	and.w	r3, r3, #1
 8013352:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013354:	2b00      	cmp	r3, #0
 8013356:	d001      	beq.n	801335c <IsRequestPending+0x28>
    {
        return 1;
 8013358:	2301      	movs	r3, #1
 801335a:	e000      	b.n	801335e <IsRequestPending+0x2a>
    }
    return 0;
 801335c:	2300      	movs	r3, #0
}
 801335e:	4618      	mov	r0, r3
 8013360:	46bd      	mov	sp, r7
 8013362:	bc80      	pop	{r7}
 8013364:	4770      	bx	lr
 8013366:	bf00      	nop
 8013368:	200006d4 	.word	0x200006d4

0801336c <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 801336c:	b590      	push	{r4, r7, lr}
 801336e:	b091      	sub	sp, #68	; 0x44
 8013370:	af02      	add	r7, sp, #8
 8013372:	6178      	str	r0, [r7, #20]
 8013374:	6139      	str	r1, [r7, #16]
 8013376:	4613      	mov	r3, r2
 8013378:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d002      	beq.n	8013386 <LoRaMacInitialization+0x1a>
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d101      	bne.n	801338a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013386:	2303      	movs	r3, #3
 8013388:	e27a      	b.n	8013880 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d00b      	beq.n	80133aa <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013396:	2b00      	cmp	r3, #0
 8013398:	d007      	beq.n	80133aa <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d003      	beq.n	80133aa <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d101      	bne.n	80133ae <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80133aa:	2303      	movs	r3, #3
 80133ac:	e268      	b.n	8013880 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80133ae:	7bfb      	ldrb	r3, [r7, #15]
 80133b0:	4618      	mov	r0, r3
 80133b2:	f003 fcac 	bl	8016d0e <RegionIsActive>
 80133b6:	4603      	mov	r3, r0
 80133b8:	f083 0301 	eor.w	r3, r3, #1
 80133bc:	b2db      	uxtb	r3, r3
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d001      	beq.n	80133c6 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80133c2:	2309      	movs	r3, #9
 80133c4:	e25c      	b.n	8013880 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80133c6:	6978      	ldr	r0, [r7, #20]
 80133c8:	f002 f932 	bl	8015630 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80133cc:	f240 52cc 	movw	r2, #1484	; 0x5cc
 80133d0:	2100      	movs	r1, #0
 80133d2:	48c7      	ldr	r0, [pc, #796]	; (80136f0 <LoRaMacInitialization+0x384>)
 80133d4:	f006 f89e 	bl	8019514 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80133d8:	f240 521c 	movw	r2, #1308	; 0x51c
 80133dc:	2100      	movs	r1, #0
 80133de:	48c5      	ldr	r0, [pc, #788]	; (80136f4 <LoRaMacInitialization+0x388>)
 80133e0:	f006 f898 	bl	8019514 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80133e4:	4ac2      	ldr	r2, [pc, #776]	; (80136f0 <LoRaMacInitialization+0x384>)
 80133e6:	7bfb      	ldrb	r3, [r7, #15]
 80133e8:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80133ec:	4bc0      	ldr	r3, [pc, #768]	; (80136f0 <LoRaMacInitialization+0x384>)
 80133ee:	2200      	movs	r2, #0
 80133f0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 80133f4:	4bbe      	ldr	r3, [pc, #760]	; (80136f0 <LoRaMacInitialization+0x384>)
 80133f6:	2200      	movs	r2, #0
 80133f8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80133fc:	4bbc      	ldr	r3, [pc, #752]	; (80136f0 <LoRaMacInitialization+0x384>)
 80133fe:	4abe      	ldr	r2, [pc, #760]	; (80136f8 <LoRaMacInitialization+0x38c>)
 8013400:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8013404:	2300      	movs	r3, #0
 8013406:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801340a:	4bbc      	ldr	r3, [pc, #752]	; (80136fc <LoRaMacInitialization+0x390>)
 801340c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801340e:	4bbc      	ldr	r3, [pc, #752]	; (8013700 <LoRaMacInitialization+0x394>)
 8013410:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8013412:	4bbc      	ldr	r3, [pc, #752]	; (8013704 <LoRaMacInitialization+0x398>)
 8013414:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013416:	4bb6      	ldr	r3, [pc, #728]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013418:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801341c:	f107 021c 	add.w	r2, r7, #28
 8013420:	4611      	mov	r1, r2
 8013422:	4618      	mov	r0, r3
 8013424:	f003 fcac 	bl	8016d80 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8013428:	230f      	movs	r3, #15
 801342a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801342e:	4bb0      	ldr	r3, [pc, #704]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013430:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013434:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013438:	4611      	mov	r1, r2
 801343a:	4618      	mov	r0, r3
 801343c:	f003 fc77 	bl	8016d2e <RegionGetPhyParam>
 8013440:	4603      	mov	r3, r0
 8013442:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8013444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013446:	2b00      	cmp	r3, #0
 8013448:	bf14      	ite	ne
 801344a:	2301      	movne	r3, #1
 801344c:	2300      	moveq	r3, #0
 801344e:	b2da      	uxtb	r2, r3
 8013450:	4ba7      	ldr	r3, [pc, #668]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013452:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8013456:	230a      	movs	r3, #10
 8013458:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801345c:	4ba4      	ldr	r3, [pc, #656]	; (80136f0 <LoRaMacInitialization+0x384>)
 801345e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013462:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013466:	4611      	mov	r1, r2
 8013468:	4618      	mov	r0, r3
 801346a:	f003 fc60 	bl	8016d2e <RegionGetPhyParam>
 801346e:	4603      	mov	r3, r0
 8013470:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8013472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013474:	b25a      	sxtb	r2, r3
 8013476:	4b9e      	ldr	r3, [pc, #632]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013478:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 801347c:	2306      	movs	r3, #6
 801347e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013482:	4b9b      	ldr	r3, [pc, #620]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013484:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013488:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801348c:	4611      	mov	r1, r2
 801348e:	4618      	mov	r0, r3
 8013490:	f003 fc4d 	bl	8016d2e <RegionGetPhyParam>
 8013494:	4603      	mov	r3, r0
 8013496:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8013498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801349a:	b25a      	sxtb	r2, r3
 801349c:	4b94      	ldr	r3, [pc, #592]	; (80136f0 <LoRaMacInitialization+0x384>)
 801349e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80134a2:	2310      	movs	r3, #16
 80134a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134a8:	4b91      	ldr	r3, [pc, #580]	; (80136f0 <LoRaMacInitialization+0x384>)
 80134aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80134b2:	4611      	mov	r1, r2
 80134b4:	4618      	mov	r0, r3
 80134b6:	f003 fc3a 	bl	8016d2e <RegionGetPhyParam>
 80134ba:	4603      	mov	r3, r0
 80134bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80134be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c0:	4a8b      	ldr	r2, [pc, #556]	; (80136f0 <LoRaMacInitialization+0x384>)
 80134c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80134c6:	2311      	movs	r3, #17
 80134c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134cc:	4b88      	ldr	r3, [pc, #544]	; (80136f0 <LoRaMacInitialization+0x384>)
 80134ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80134d6:	4611      	mov	r1, r2
 80134d8:	4618      	mov	r0, r3
 80134da:	f003 fc28 	bl	8016d2e <RegionGetPhyParam>
 80134de:	4603      	mov	r3, r0
 80134e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80134e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e4:	4a82      	ldr	r2, [pc, #520]	; (80136f0 <LoRaMacInitialization+0x384>)
 80134e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80134ea:	2312      	movs	r3, #18
 80134ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80134f0:	4b7f      	ldr	r3, [pc, #508]	; (80136f0 <LoRaMacInitialization+0x384>)
 80134f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80134f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80134fa:	4611      	mov	r1, r2
 80134fc:	4618      	mov	r0, r3
 80134fe:	f003 fc16 	bl	8016d2e <RegionGetPhyParam>
 8013502:	4603      	mov	r3, r0
 8013504:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8013506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013508:	4a79      	ldr	r2, [pc, #484]	; (80136f0 <LoRaMacInitialization+0x384>)
 801350a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801350e:	2313      	movs	r3, #19
 8013510:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013514:	4b76      	ldr	r3, [pc, #472]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013516:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801351a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801351e:	4611      	mov	r1, r2
 8013520:	4618      	mov	r0, r3
 8013522:	f003 fc04 	bl	8016d2e <RegionGetPhyParam>
 8013526:	4603      	mov	r3, r0
 8013528:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801352c:	4a70      	ldr	r2, [pc, #448]	; (80136f0 <LoRaMacInitialization+0x384>)
 801352e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8013532:	2314      	movs	r3, #20
 8013534:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013538:	4b6d      	ldr	r3, [pc, #436]	; (80136f0 <LoRaMacInitialization+0x384>)
 801353a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801353e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013542:	4611      	mov	r1, r2
 8013544:	4618      	mov	r0, r3
 8013546:	f003 fbf2 	bl	8016d2e <RegionGetPhyParam>
 801354a:	4603      	mov	r3, r0
 801354c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013550:	4a67      	ldr	r2, [pc, #412]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013552:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8013556:	2316      	movs	r3, #22
 8013558:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801355c:	4b64      	ldr	r3, [pc, #400]	; (80136f0 <LoRaMacInitialization+0x384>)
 801355e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013562:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013566:	4611      	mov	r1, r2
 8013568:	4618      	mov	r0, r3
 801356a:	f003 fbe0 	bl	8016d2e <RegionGetPhyParam>
 801356e:	4603      	mov	r3, r0
 8013570:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8013572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013574:	b2da      	uxtb	r2, r3
 8013576:	4b5e      	ldr	r3, [pc, #376]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013578:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801357c:	2317      	movs	r3, #23
 801357e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013582:	4b5b      	ldr	r3, [pc, #364]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013584:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013588:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801358c:	4611      	mov	r1, r2
 801358e:	4618      	mov	r0, r3
 8013590:	f003 fbcd 	bl	8016d2e <RegionGetPhyParam>
 8013594:	4603      	mov	r3, r0
 8013596:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8013598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359a:	4a55      	ldr	r2, [pc, #340]	; (80136f0 <LoRaMacInitialization+0x384>)
 801359c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80135a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a2:	4a53      	ldr	r2, [pc, #332]	; (80136f0 <LoRaMacInitialization+0x384>)
 80135a4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80135a8:	2318      	movs	r3, #24
 80135aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135ae:	4b50      	ldr	r3, [pc, #320]	; (80136f0 <LoRaMacInitialization+0x384>)
 80135b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80135b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80135b8:	4611      	mov	r1, r2
 80135ba:	4618      	mov	r0, r3
 80135bc:	f003 fbb7 	bl	8016d2e <RegionGetPhyParam>
 80135c0:	4603      	mov	r3, r0
 80135c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80135c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135c6:	b2da      	uxtb	r2, r3
 80135c8:	4b49      	ldr	r3, [pc, #292]	; (80136f0 <LoRaMacInitialization+0x384>)
 80135ca:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80135ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d0:	b2da      	uxtb	r2, r3
 80135d2:	4b47      	ldr	r3, [pc, #284]	; (80136f0 <LoRaMacInitialization+0x384>)
 80135d4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80135d8:	231d      	movs	r3, #29
 80135da:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80135de:	4b44      	ldr	r3, [pc, #272]	; (80136f0 <LoRaMacInitialization+0x384>)
 80135e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80135e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80135e8:	4611      	mov	r1, r2
 80135ea:	4618      	mov	r0, r3
 80135ec:	f003 fb9f 	bl	8016d2e <RegionGetPhyParam>
 80135f0:	4603      	mov	r3, r0
 80135f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80135f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f6:	b2da      	uxtb	r2, r3
 80135f8:	4b3d      	ldr	r3, [pc, #244]	; (80136f0 <LoRaMacInitialization+0x384>)
 80135fa:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80135fe:	231e      	movs	r3, #30
 8013600:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013604:	4b3a      	ldr	r3, [pc, #232]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013606:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801360a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801360e:	4611      	mov	r1, r2
 8013610:	4618      	mov	r0, r3
 8013612:	f003 fb8c 	bl	8016d2e <RegionGetPhyParam>
 8013616:	4603      	mov	r3, r0
 8013618:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801361c:	b2da      	uxtb	r2, r3
 801361e:	4b34      	ldr	r3, [pc, #208]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013620:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8013624:	231f      	movs	r3, #31
 8013626:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801362a:	4b31      	ldr	r3, [pc, #196]	; (80136f0 <LoRaMacInitialization+0x384>)
 801362c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013630:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013634:	4611      	mov	r1, r2
 8013636:	4618      	mov	r0, r3
 8013638:	f003 fb79 	bl	8016d2e <RegionGetPhyParam>
 801363c:	4603      	mov	r3, r0
 801363e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8013640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013642:	4a2b      	ldr	r2, [pc, #172]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013644:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8013648:	2320      	movs	r3, #32
 801364a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801364e:	4b28      	ldr	r3, [pc, #160]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013650:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013654:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013658:	4611      	mov	r1, r2
 801365a:	4618      	mov	r0, r3
 801365c:	f003 fb67 	bl	8016d2e <RegionGetPhyParam>
 8013660:	4603      	mov	r3, r0
 8013662:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8013664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013666:	4a22      	ldr	r2, [pc, #136]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013668:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801366c:	230b      	movs	r3, #11
 801366e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013672:	4b1f      	ldr	r3, [pc, #124]	; (80136f0 <LoRaMacInitialization+0x384>)
 8013674:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013678:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801367c:	4611      	mov	r1, r2
 801367e:	4618      	mov	r0, r3
 8013680:	f003 fb55 	bl	8016d2e <RegionGetPhyParam>
 8013684:	4603      	mov	r3, r0
 8013686:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8013688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368a:	b29a      	uxth	r2, r3
 801368c:	4b18      	ldr	r3, [pc, #96]	; (80136f0 <LoRaMacInitialization+0x384>)
 801368e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8013692:	230c      	movs	r3, #12
 8013694:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013698:	4b15      	ldr	r3, [pc, #84]	; (80136f0 <LoRaMacInitialization+0x384>)
 801369a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801369e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80136a2:	4611      	mov	r1, r2
 80136a4:	4618      	mov	r0, r3
 80136a6:	f003 fb42 	bl	8016d2e <RegionGetPhyParam>
 80136aa:	4603      	mov	r3, r0
 80136ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80136ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b0:	b29a      	uxth	r2, r3
 80136b2:	4b0f      	ldr	r3, [pc, #60]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136b4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80136b8:	4b0d      	ldr	r3, [pc, #52]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136ba:	2201      	movs	r2, #1
 80136bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80136c0:	4b0b      	ldr	r3, [pc, #44]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136c2:	220a      	movs	r2, #10
 80136c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80136c8:	4b09      	ldr	r3, [pc, #36]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136ca:	2206      	movs	r2, #6
 80136cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80136d0:	4b07      	ldr	r3, [pc, #28]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80136d6:	4a06      	ldr	r2, [pc, #24]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136d8:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80136da:	4b05      	ldr	r3, [pc, #20]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136dc:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80136e0:	4b03      	ldr	r3, [pc, #12]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80136e6:	4b02      	ldr	r3, [pc, #8]	; (80136f0 <LoRaMacInitialization+0x384>)
 80136e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80136ec:	e00c      	b.n	8013708 <LoRaMacInitialization+0x39c>
 80136ee:	bf00      	nop
 80136f0:	20000bf0 	.word	0x20000bf0
 80136f4:	200006d4 	.word	0x200006d4
 80136f8:	01000400 	.word	0x01000400
 80136fc:	20000e14 	.word	0x20000e14
 8013700:	20000e28 	.word	0x20000e28
 8013704:	20001788 	.word	0x20001788
 8013708:	4a5f      	ldr	r2, [pc, #380]	; (8013888 <LoRaMacInitialization+0x51c>)
 801370a:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801370c:	4b5e      	ldr	r3, [pc, #376]	; (8013888 <LoRaMacInitialization+0x51c>)
 801370e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013712:	4a5d      	ldr	r2, [pc, #372]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013714:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8013716:	4b5c      	ldr	r3, [pc, #368]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013718:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801371c:	4a5a      	ldr	r2, [pc, #360]	; (8013888 <LoRaMacInitialization+0x51c>)
 801371e:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8013720:	4b59      	ldr	r3, [pc, #356]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013722:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8013726:	4a58      	ldr	r2, [pc, #352]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013728:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801372a:	4b57      	ldr	r3, [pc, #348]	; (8013888 <LoRaMacInitialization+0x51c>)
 801372c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013730:	4a55      	ldr	r2, [pc, #340]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013732:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8013734:	4b54      	ldr	r3, [pc, #336]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013736:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 801373a:	4b53      	ldr	r3, [pc, #332]	; (8013888 <LoRaMacInitialization+0x51c>)
 801373c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8013740:	4b51      	ldr	r3, [pc, #324]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013742:	2201      	movs	r2, #1
 8013744:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8013748:	4a50      	ldr	r2, [pc, #320]	; (801388c <LoRaMacInitialization+0x520>)
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8013750:	2000      	movs	r0, #0
 8013752:	f7ff f869 	bl	8012828 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8013756:	4b4c      	ldr	r3, [pc, #304]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013758:	2201      	movs	r2, #1
 801375a:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 801375e:	4a4b      	ldr	r2, [pc, #300]	; (801388c <LoRaMacInitialization+0x520>)
 8013760:	697b      	ldr	r3, [r7, #20]
 8013762:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8013766:	4b49      	ldr	r3, [pc, #292]	; (801388c <LoRaMacInitialization+0x520>)
 8013768:	2200      	movs	r2, #0
 801376a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 801376e:	4b47      	ldr	r3, [pc, #284]	; (801388c <LoRaMacInitialization+0x520>)
 8013770:	2201      	movs	r2, #1
 8013772:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8013776:	4b44      	ldr	r3, [pc, #272]	; (8013888 <LoRaMacInitialization+0x51c>)
 8013778:	2200      	movs	r2, #0
 801377a:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801377c:	4b42      	ldr	r3, [pc, #264]	; (8013888 <LoRaMacInitialization+0x51c>)
 801377e:	2200      	movs	r2, #0
 8013780:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8013782:	2300      	movs	r3, #0
 8013784:	9300      	str	r3, [sp, #0]
 8013786:	4b42      	ldr	r3, [pc, #264]	; (8013890 <LoRaMacInitialization+0x524>)
 8013788:	2200      	movs	r2, #0
 801378a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801378e:	4841      	ldr	r0, [pc, #260]	; (8013894 <LoRaMacInitialization+0x528>)
 8013790:	f009 fe3e 	bl	801d410 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8013794:	2300      	movs	r3, #0
 8013796:	9300      	str	r3, [sp, #0]
 8013798:	4b3f      	ldr	r3, [pc, #252]	; (8013898 <LoRaMacInitialization+0x52c>)
 801379a:	2200      	movs	r2, #0
 801379c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80137a0:	483e      	ldr	r0, [pc, #248]	; (801389c <LoRaMacInitialization+0x530>)
 80137a2:	f009 fe35 	bl	801d410 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80137a6:	2300      	movs	r3, #0
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	4b3d      	ldr	r3, [pc, #244]	; (80138a0 <LoRaMacInitialization+0x534>)
 80137ac:	2200      	movs	r2, #0
 80137ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80137b2:	483c      	ldr	r0, [pc, #240]	; (80138a4 <LoRaMacInitialization+0x538>)
 80137b4:	f009 fe2c 	bl	801d410 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80137b8:	2300      	movs	r3, #0
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	4b3a      	ldr	r3, [pc, #232]	; (80138a8 <LoRaMacInitialization+0x53c>)
 80137be:	2200      	movs	r2, #0
 80137c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80137c4:	4839      	ldr	r0, [pc, #228]	; (80138ac <LoRaMacInitialization+0x540>)
 80137c6:	f009 fe23 	bl	801d410 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80137ca:	4c2f      	ldr	r4, [pc, #188]	; (8013888 <LoRaMacInitialization+0x51c>)
 80137cc:	463b      	mov	r3, r7
 80137ce:	4618      	mov	r0, r3
 80137d0:	f009 fa9a 	bl	801cd08 <SysTimeGetMcuTime>
 80137d4:	f504 7392 	add.w	r3, r4, #292	; 0x124
 80137d8:	463a      	mov	r2, r7
 80137da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137de:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80137e2:	4b33      	ldr	r3, [pc, #204]	; (80138b0 <LoRaMacInitialization+0x544>)
 80137e4:	2200      	movs	r2, #0
 80137e6:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80137e8:	4b28      	ldr	r3, [pc, #160]	; (801388c <LoRaMacInitialization+0x520>)
 80137ea:	4a32      	ldr	r2, [pc, #200]	; (80138b4 <LoRaMacInitialization+0x548>)
 80137ec:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80137f0:	4b26      	ldr	r3, [pc, #152]	; (801388c <LoRaMacInitialization+0x520>)
 80137f2:	4a31      	ldr	r2, [pc, #196]	; (80138b8 <LoRaMacInitialization+0x54c>)
 80137f4:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80137f8:	4b24      	ldr	r3, [pc, #144]	; (801388c <LoRaMacInitialization+0x520>)
 80137fa:	4a30      	ldr	r2, [pc, #192]	; (80138bc <LoRaMacInitialization+0x550>)
 80137fc:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8013800:	4b22      	ldr	r3, [pc, #136]	; (801388c <LoRaMacInitialization+0x520>)
 8013802:	4a2f      	ldr	r2, [pc, #188]	; (80138c0 <LoRaMacInitialization+0x554>)
 8013804:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8013808:	4b20      	ldr	r3, [pc, #128]	; (801388c <LoRaMacInitialization+0x520>)
 801380a:	4a2e      	ldr	r2, [pc, #184]	; (80138c4 <LoRaMacInitialization+0x558>)
 801380c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8013810:	4b2d      	ldr	r3, [pc, #180]	; (80138c8 <LoRaMacInitialization+0x55c>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	482d      	ldr	r0, [pc, #180]	; (80138cc <LoRaMacInitialization+0x560>)
 8013816:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8013818:	482d      	ldr	r0, [pc, #180]	; (80138d0 <LoRaMacInitialization+0x564>)
 801381a:	f7fa f9f9 	bl	800dc10 <SecureElementInit>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d001      	beq.n	8013828 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013824:	2311      	movs	r3, #17
 8013826:	e02b      	b.n	8013880 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8013828:	4817      	ldr	r0, [pc, #92]	; (8013888 <LoRaMacInitialization+0x51c>)
 801382a:	f002 fbc1 	bl	8015fb0 <LoRaMacCryptoInit>
 801382e:	4603      	mov	r3, r0
 8013830:	2b00      	cmp	r3, #0
 8013832:	d001      	beq.n	8013838 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013834:	2311      	movs	r3, #17
 8013836:	e023      	b.n	8013880 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8013838:	f001 fcbc 	bl	80151b4 <LoRaMacCommandsInit>
 801383c:	4603      	mov	r3, r0
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013842:	2313      	movs	r3, #19
 8013844:	e01c      	b.n	8013880 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8013846:	4823      	ldr	r0, [pc, #140]	; (80138d4 <LoRaMacInitialization+0x568>)
 8013848:	f002 fc52 	bl	80160f0 <LoRaMacCryptoSetMulticastReference>
 801384c:	4603      	mov	r3, r0
 801384e:	2b00      	cmp	r3, #0
 8013850:	d001      	beq.n	8013856 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8013852:	2311      	movs	r3, #17
 8013854:	e014      	b.n	8013880 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8013856:	4b1c      	ldr	r3, [pc, #112]	; (80138c8 <LoRaMacInitialization+0x55c>)
 8013858:	695b      	ldr	r3, [r3, #20]
 801385a:	4798      	blx	r3
 801385c:	4603      	mov	r3, r0
 801385e:	4618      	mov	r0, r3
 8013860:	f005 fdf8 	bl	8019454 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8013864:	4b18      	ldr	r3, [pc, #96]	; (80138c8 <LoRaMacInitialization+0x55c>)
 8013866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013868:	4a07      	ldr	r2, [pc, #28]	; (8013888 <LoRaMacInitialization+0x51c>)
 801386a:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801386e:	4610      	mov	r0, r2
 8013870:	4798      	blx	r3
    Radio.Sleep( );
 8013872:	4b15      	ldr	r3, [pc, #84]	; (80138c8 <LoRaMacInitialization+0x55c>)
 8013874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013876:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8013878:	2001      	movs	r0, #1
 801387a:	f7fd fa7d 	bl	8010d78 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801387e:	2300      	movs	r3, #0
}
 8013880:	4618      	mov	r0, r3
 8013882:	373c      	adds	r7, #60	; 0x3c
 8013884:	46bd      	mov	sp, r7
 8013886:	bd90      	pop	{r4, r7, pc}
 8013888:	20000bf0 	.word	0x20000bf0
 801388c:	200006d4 	.word	0x200006d4
 8013890:	08011305 	.word	0x08011305
 8013894:	20000a3c 	.word	0x20000a3c
 8013898:	08011395 	.word	0x08011395
 801389c:	20000a54 	.word	0x20000a54
 80138a0:	0801140d 	.word	0x0801140d
 80138a4:	20000a6c 	.word	0x20000a6c
 80138a8:	0801148d 	.word	0x0801148d
 80138ac:	20000ad4 	.word	0x20000ad4
 80138b0:	20001818 	.word	0x20001818
 80138b4:	0800fdb5 	.word	0x0800fdb5
 80138b8:	0800fe11 	.word	0x0800fe11
 80138bc:	0800feb1 	.word	0x0800feb1
 80138c0:	0800fe85 	.word	0x0800fe85
 80138c4:	0800fecd 	.word	0x0800fecd
 80138c8:	0801ee44 	.word	0x0801ee44
 80138cc:	20000a20 	.word	0x20000a20
 80138d0:	20000d3c 	.word	0x20000d3c
 80138d4:	20000cd8 	.word	0x20000cd8

080138d8 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80138dc:	4b04      	ldr	r3, [pc, #16]	; (80138f0 <LoRaMacStart+0x18>)
 80138de:	2200      	movs	r2, #0
 80138e0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 80138e4:	f7fc fb08 	bl	800fef8 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80138e8:	2300      	movs	r3, #0
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	bd80      	pop	{r7, pc}
 80138ee:	bf00      	nop
 80138f0:	200006d4 	.word	0x200006d4

080138f4 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80138f8:	f7fd fa06 	bl	8010d08 <LoRaMacIsBusy>
 80138fc:	4603      	mov	r3, r0
 80138fe:	f083 0301 	eor.w	r3, r3, #1
 8013902:	b2db      	uxtb	r3, r3
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00d      	beq.n	8013924 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8013908:	4b0b      	ldr	r3, [pc, #44]	; (8013938 <LoRaMacStop+0x44>)
 801390a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801390e:	2b02      	cmp	r3, #2
 8013910:	d102      	bne.n	8013918 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8013912:	4b0a      	ldr	r3, [pc, #40]	; (801393c <LoRaMacStop+0x48>)
 8013914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013916:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8013918:	4b09      	ldr	r3, [pc, #36]	; (8013940 <LoRaMacStop+0x4c>)
 801391a:	2201      	movs	r2, #1
 801391c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8013920:	2300      	movs	r3, #0
 8013922:	e007      	b.n	8013934 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8013924:	4b06      	ldr	r3, [pc, #24]	; (8013940 <LoRaMacStop+0x4c>)
 8013926:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801392a:	2b01      	cmp	r3, #1
 801392c:	d101      	bne.n	8013932 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 801392e:	2300      	movs	r3, #0
 8013930:	e000      	b.n	8013934 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8013932:	2301      	movs	r3, #1
}
 8013934:	4618      	mov	r0, r3
 8013936:	bd80      	pop	{r7, pc}
 8013938:	20000bf0 	.word	0x20000bf0
 801393c:	0801ee44 	.word	0x0801ee44
 8013940:	200006d4 	.word	0x200006d4

08013944 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8013944:	b580      	push	{r7, lr}
 8013946:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8013948:	4812      	ldr	r0, [pc, #72]	; (8013994 <LoRaMacHalt+0x50>)
 801394a:	f009 fe05 	bl	801d558 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801394e:	4812      	ldr	r0, [pc, #72]	; (8013998 <LoRaMacHalt+0x54>)
 8013950:	f009 fe02 	bl	801d558 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8013954:	4811      	ldr	r0, [pc, #68]	; (801399c <LoRaMacHalt+0x58>)
 8013956:	f009 fdff 	bl	801d558 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801395a:	4811      	ldr	r0, [pc, #68]	; (80139a0 <LoRaMacHalt+0x5c>)
 801395c:	f009 fdfc 	bl	801d558 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8013960:	f001 fa8c 	bl	8014e7c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8013964:	4b0f      	ldr	r3, [pc, #60]	; (80139a4 <LoRaMacHalt+0x60>)
 8013966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013968:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801396a:	4b0f      	ldr	r3, [pc, #60]	; (80139a8 <LoRaMacHalt+0x64>)
 801396c:	2200      	movs	r2, #0
 801396e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8013972:	480e      	ldr	r0, [pc, #56]	; (80139ac <LoRaMacHalt+0x68>)
 8013974:	f7fd fba2 	bl	80110bc <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8013978:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801397c:	490b      	ldr	r1, [pc, #44]	; (80139ac <LoRaMacHalt+0x68>)
 801397e:	480c      	ldr	r0, [pc, #48]	; (80139b0 <LoRaMacHalt+0x6c>)
 8013980:	f005 fd8d 	bl	801949e <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8013984:	4b08      	ldr	r3, [pc, #32]	; (80139a8 <LoRaMacHalt+0x64>)
 8013986:	2201      	movs	r2, #1
 8013988:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801398c:	2300      	movs	r3, #0
}
 801398e:	4618      	mov	r0, r3
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	20000a3c 	.word	0x20000a3c
 8013998:	20000a54 	.word	0x20000a54
 801399c:	20000a6c 	.word	0x20000a6c
 80139a0:	20000ad4 	.word	0x20000ad4
 80139a4:	0801ee44 	.word	0x0801ee44
 80139a8:	200006d4 	.word	0x200006d4
 80139ac:	20000bf0 	.word	0x20000bf0
 80139b0:	200011bc 	.word	0x200011bc

080139b4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80139b4:	b590      	push	{r4, r7, lr}
 80139b6:	b08d      	sub	sp, #52	; 0x34
 80139b8:	af02      	add	r7, sp, #8
 80139ba:	4603      	mov	r3, r0
 80139bc:	6039      	str	r1, [r7, #0]
 80139be:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80139c0:	4b42      	ldr	r3, [pc, #264]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 80139c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139c4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80139c6:	4b41      	ldr	r3, [pc, #260]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 80139c8:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80139cc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80139ce:	4b3f      	ldr	r3, [pc, #252]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 80139d0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80139d4:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80139d6:	4b3e      	ldr	r3, [pc, #248]	; (8013ad0 <LoRaMacQueryTxPossible+0x11c>)
 80139d8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80139dc:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80139de:	2300      	movs	r3, #0
 80139e0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d101      	bne.n	80139ec <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80139e8:	2303      	movs	r3, #3
 80139ea:	e06b      	b.n	8013ac4 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80139ec:	2300      	movs	r3, #0
 80139ee:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80139f0:	4b36      	ldr	r3, [pc, #216]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 80139f2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80139f6:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80139f8:	4b34      	ldr	r3, [pc, #208]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 80139fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139fc:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80139fe:	4b33      	ldr	r3, [pc, #204]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 8013a00:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8013a04:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013a06:	4b31      	ldr	r3, [pc, #196]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 8013a08:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8013a0c:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a0e:	4b2f      	ldr	r3, [pc, #188]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 8013a10:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a14:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013a18:	4b2c      	ldr	r3, [pc, #176]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 8013a1a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013a1e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8013a22:	4b2b      	ldr	r3, [pc, #172]	; (8013ad0 <LoRaMacQueryTxPossible+0x11c>)
 8013a24:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013a28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013a2c:	4b27      	ldr	r3, [pc, #156]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 8013a2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8013a36:	4b25      	ldr	r3, [pc, #148]	; (8013acc <LoRaMacQueryTxPossible+0x118>)
 8013a38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013a3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8013a40:	f107 040d 	add.w	r4, r7, #13
 8013a44:	f107 020e 	add.w	r2, r7, #14
 8013a48:	f107 010f 	add.w	r1, r7, #15
 8013a4c:	f107 0014 	add.w	r0, r7, #20
 8013a50:	f107 0310 	add.w	r3, r7, #16
 8013a54:	9300      	str	r3, [sp, #0]
 8013a56:	4623      	mov	r3, r4
 8013a58:	f001 f8da 	bl	8014c10 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8013a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fd fe59 	bl	8011718 <GetMaxAppPayloadWithoutFOptsLength>
 8013a66:	4603      	mov	r3, r0
 8013a68:	461a      	mov	r2, r3
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013a6e:	f107 0308 	add.w	r3, r7, #8
 8013a72:	4618      	mov	r0, r3
 8013a74:	f001 fca4 	bl	80153c0 <LoRaMacCommandsGetSizeSerializedCmds>
 8013a78:	4603      	mov	r3, r0
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d001      	beq.n	8013a82 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013a7e:	2313      	movs	r3, #19
 8013a80:	e020      	b.n	8013ac4 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	2b0f      	cmp	r3, #15
 8013a86:	d819      	bhi.n	8013abc <LoRaMacQueryTxPossible+0x108>
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	785b      	ldrb	r3, [r3, #1]
 8013a8c:	461a      	mov	r2, r3
 8013a8e:	68bb      	ldr	r3, [r7, #8]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d313      	bcc.n	8013abc <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	785a      	ldrb	r2, [r3, #1]
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	1ad3      	subs	r3, r2, r3
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8013aa4:	683b      	ldr	r3, [r7, #0]
 8013aa6:	785b      	ldrb	r3, [r3, #1]
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	79fa      	ldrb	r2, [r7, #7]
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	4413      	add	r3, r2
 8013ab0:	4299      	cmp	r1, r3
 8013ab2:	d301      	bcc.n	8013ab8 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	e005      	b.n	8013ac4 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8013ab8:	2308      	movs	r3, #8
 8013aba:	e003      	b.n	8013ac4 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	2200      	movs	r2, #0
 8013ac0:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8013ac2:	2308      	movs	r3, #8
    }
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	372c      	adds	r7, #44	; 0x2c
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd90      	pop	{r4, r7, pc}
 8013acc:	20000bf0 	.word	0x20000bf0
 8013ad0:	200006d4 	.word	0x200006d4

08013ad4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8013ad4:	b590      	push	{r4, r7, lr}
 8013ad6:	b087      	sub	sp, #28
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013adc:	2300      	movs	r3, #0
 8013ade:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d101      	bne.n	8013aea <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ae6:	2303      	movs	r3, #3
 8013ae8:	e1c4      	b.n	8013e74 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	2b41      	cmp	r3, #65	; 0x41
 8013af0:	f200 81b9 	bhi.w	8013e66 <LoRaMacMibGetRequestConfirm+0x392>
 8013af4:	a201      	add	r2, pc, #4	; (adr r2, 8013afc <LoRaMacMibGetRequestConfirm+0x28>)
 8013af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013afa:	bf00      	nop
 8013afc:	08013c05 	.word	0x08013c05
 8013b00:	08013c11 	.word	0x08013c11
 8013b04:	08013c1d 	.word	0x08013c1d
 8013b08:	08013c29 	.word	0x08013c29
 8013b0c:	08013c35 	.word	0x08013c35
 8013b10:	08013c41 	.word	0x08013c41
 8013b14:	08013c4d 	.word	0x08013c4d
 8013b18:	08013e67 	.word	0x08013e67
 8013b1c:	08013e67 	.word	0x08013e67
 8013b20:	08013e67 	.word	0x08013e67
 8013b24:	08013e67 	.word	0x08013e67
 8013b28:	08013e67 	.word	0x08013e67
 8013b2c:	08013e67 	.word	0x08013e67
 8013b30:	08013e67 	.word	0x08013e67
 8013b34:	08013e67 	.word	0x08013e67
 8013b38:	08013c61 	.word	0x08013c61
 8013b3c:	08013c6d 	.word	0x08013c6d
 8013b40:	08013c79 	.word	0x08013c79
 8013b44:	08013c9b 	.word	0x08013c9b
 8013b48:	08013cad 	.word	0x08013cad
 8013b4c:	08013cbf 	.word	0x08013cbf
 8013b50:	08013cd1 	.word	0x08013cd1
 8013b54:	08013d05 	.word	0x08013d05
 8013b58:	08013ce3 	.word	0x08013ce3
 8013b5c:	08013d27 	.word	0x08013d27
 8013b60:	08013d33 	.word	0x08013d33
 8013b64:	08013d3d 	.word	0x08013d3d
 8013b68:	08013d47 	.word	0x08013d47
 8013b6c:	08013d51 	.word	0x08013d51
 8013b70:	08013d5b 	.word	0x08013d5b
 8013b74:	08013d65 	.word	0x08013d65
 8013b78:	08013d91 	.word	0x08013d91
 8013b7c:	08013d9d 	.word	0x08013d9d
 8013b80:	08013db5 	.word	0x08013db5
 8013b84:	08013da9 	.word	0x08013da9
 8013b88:	08013dc1 	.word	0x08013dc1
 8013b8c:	08013dcb 	.word	0x08013dcb
 8013b90:	08013dd7 	.word	0x08013dd7
 8013b94:	08013df3 	.word	0x08013df3
 8013b98:	08013de3 	.word	0x08013de3
 8013b9c:	08013deb 	.word	0x08013deb
 8013ba0:	08013e67 	.word	0x08013e67
 8013ba4:	08013dff 	.word	0x08013dff
 8013ba8:	08013e67 	.word	0x08013e67
 8013bac:	08013e67 	.word	0x08013e67
 8013bb0:	08013e67 	.word	0x08013e67
 8013bb4:	08013e67 	.word	0x08013e67
 8013bb8:	08013e67 	.word	0x08013e67
 8013bbc:	08013e67 	.word	0x08013e67
 8013bc0:	08013e67 	.word	0x08013e67
 8013bc4:	08013e67 	.word	0x08013e67
 8013bc8:	08013e67 	.word	0x08013e67
 8013bcc:	08013e67 	.word	0x08013e67
 8013bd0:	08013e67 	.word	0x08013e67
 8013bd4:	08013e67 	.word	0x08013e67
 8013bd8:	08013e67 	.word	0x08013e67
 8013bdc:	08013e67 	.word	0x08013e67
 8013be0:	08013e67 	.word	0x08013e67
 8013be4:	08013e13 	.word	0x08013e13
 8013be8:	08013e1f 	.word	0x08013e1f
 8013bec:	08013e2b 	.word	0x08013e2b
 8013bf0:	08013e37 	.word	0x08013e37
 8013bf4:	08013e43 	.word	0x08013e43
 8013bf8:	08013e4f 	.word	0x08013e4f
 8013bfc:	08013e5b 	.word	0x08013e5b
 8013c00:	08013e61 	.word	0x08013e61
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8013c04:	4b9d      	ldr	r3, [pc, #628]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c06:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	711a      	strb	r2, [r3, #4]
            break;
 8013c0e:	e130      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8013c10:	4b9a      	ldr	r3, [pc, #616]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c12:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	711a      	strb	r2, [r3, #4]
            break;
 8013c1a:	e12a      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	685b      	ldr	r3, [r3, #4]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7fa fab5 	bl	800e190 <SecureElementGetDevEui>
            break;
 8013c26:	e124      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	685b      	ldr	r3, [r3, #4]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7fa fadf 	bl	800e1f0 <SecureElementGetJoinEui>
            break;
 8013c32:	e11e      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8013c34:	4b91      	ldr	r3, [pc, #580]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c36:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	711a      	strb	r2, [r3, #4]
            break;
 8013c3e:	e118      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8013c40:	4b8e      	ldr	r3, [pc, #568]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	605a      	str	r2, [r3, #4]
            break;
 8013c4a:	e112      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8013c4c:	4b8b      	ldr	r3, [pc, #556]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c4e:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	3304      	adds	r3, #4
 8013c56:	4619      	mov	r1, r3
 8013c58:	4610      	mov	r0, r2
 8013c5a:	f7fa fafb 	bl	800e254 <SecureElementGetDevAddr>
            break;
 8013c5e:	e108      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8013c60:	4b86      	ldr	r3, [pc, #536]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c62:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	711a      	strb	r2, [r3, #4]
            break;
 8013c6a:	e102      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013c6c:	4b83      	ldr	r3, [pc, #524]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c6e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	711a      	strb	r2, [r3, #4]
            break;
 8013c76:	e0fc      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8013c78:	231c      	movs	r3, #28
 8013c7a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013c7c:	4b7f      	ldr	r3, [pc, #508]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c7e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013c82:	f107 0210 	add.w	r2, r7, #16
 8013c86:	4611      	mov	r1, r2
 8013c88:	4618      	mov	r0, r3
 8013c8a:	f003 f850 	bl	8016d2e <RegionGetPhyParam>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	605a      	str	r2, [r3, #4]
            break;
 8013c98:	e0eb      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4a77      	ldr	r2, [pc, #476]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013c9e:	3304      	adds	r3, #4
 8013ca0:	326c      	adds	r2, #108	; 0x6c
 8013ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013ca6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013caa:	e0e2      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4a73      	ldr	r2, [pc, #460]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013cb0:	3304      	adds	r3, #4
 8013cb2:	32b4      	adds	r2, #180	; 0xb4
 8013cb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cb8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013cbc:	e0d9      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	4a6e      	ldr	r2, [pc, #440]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013cc2:	3304      	adds	r3, #4
 8013cc4:	3274      	adds	r2, #116	; 0x74
 8013cc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cca:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013cce:	e0d0      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	4a6a      	ldr	r2, [pc, #424]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013cd4:	3304      	adds	r3, #4
 8013cd6:	32bc      	adds	r2, #188	; 0xbc
 8013cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013cdc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8013ce0:	e0c7      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8013ce2:	231a      	movs	r3, #26
 8013ce4:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013ce6:	4b65      	ldr	r3, [pc, #404]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013ce8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013cec:	f107 0210 	add.w	r2, r7, #16
 8013cf0:	4611      	mov	r1, r2
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f003 f81b 	bl	8016d2e <RegionGetPhyParam>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8013cfc:	68fa      	ldr	r2, [r7, #12]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	605a      	str	r2, [r3, #4]
            break;
 8013d02:	e0b6      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8013d04:	2319      	movs	r3, #25
 8013d06:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d08:	4b5c      	ldr	r3, [pc, #368]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d0e:	f107 0210 	add.w	r2, r7, #16
 8013d12:	4611      	mov	r1, r2
 8013d14:	4618      	mov	r0, r3
 8013d16:	f003 f80a 	bl	8016d2e <RegionGetPhyParam>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8013d1e:	68fa      	ldr	r2, [r7, #12]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	605a      	str	r2, [r3, #4]
            break;
 8013d24:	e0a5      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8013d26:	4b55      	ldr	r3, [pc, #340]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d28:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	711a      	strb	r2, [r3, #4]
            break;
 8013d30:	e09f      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8013d32:	4b52      	ldr	r3, [pc, #328]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	605a      	str	r2, [r3, #4]
            break;
 8013d3a:	e09a      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8013d3c:	4b4f      	ldr	r3, [pc, #316]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d3e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	605a      	str	r2, [r3, #4]
            break;
 8013d44:	e095      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8013d46:	4b4d      	ldr	r3, [pc, #308]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	605a      	str	r2, [r3, #4]
            break;
 8013d4e:	e090      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8013d50:	4b4a      	ldr	r3, [pc, #296]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	605a      	str	r2, [r3, #4]
            break;
 8013d58:	e08b      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8013d5a:	4b48      	ldr	r3, [pc, #288]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	605a      	str	r2, [r3, #4]
            break;
 8013d62:	e086      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 8013d64:	2302      	movs	r3, #2
 8013d66:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013d68:	4b44      	ldr	r3, [pc, #272]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d6a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013d6e:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013d70:	4b42      	ldr	r3, [pc, #264]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d72:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013d76:	f107 0210 	add.w	r2, r7, #16
 8013d7a:	4611      	mov	r1, r2
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f002 ffd6 	bl	8016d2e <RegionGetPhyParam>
 8013d82:	4603      	mov	r3, r0
 8013d84:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	b25a      	sxtb	r2, r3
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	711a      	strb	r2, [r3, #4]
            break;
 8013d8e:	e070      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013d90:	4b3a      	ldr	r3, [pc, #232]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d92:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	711a      	strb	r2, [r3, #4]
            break;
 8013d9a:	e06a      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8013d9c:	4b37      	ldr	r3, [pc, #220]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013d9e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	711a      	strb	r2, [r3, #4]
            break;
 8013da6:	e064      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013da8:	4b34      	ldr	r3, [pc, #208]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013daa:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	711a      	strb	r2, [r3, #4]
            break;
 8013db2:	e05e      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013db4:	4b31      	ldr	r3, [pc, #196]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013db6:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	711a      	strb	r2, [r3, #4]
            break;
 8013dbe:	e058      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8013dc0:	4b2e      	ldr	r3, [pc, #184]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013dc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	605a      	str	r2, [r3, #4]
            break;
 8013dc8:	e053      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8013dca:	4b2c      	ldr	r3, [pc, #176]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013dcc:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	711a      	strb	r2, [r3, #4]
            break;
 8013dd4:	e04d      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013dd6:	4b29      	ldr	r3, [pc, #164]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013dd8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	605a      	str	r2, [r3, #4]
            break;
 8013de0:	e047      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	4a25      	ldr	r2, [pc, #148]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013de6:	605a      	str	r2, [r3, #4]
            break;
 8013de8:	e043      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4a24      	ldr	r2, [pc, #144]	; (8013e80 <LoRaMacMibGetRequestConfirm+0x3ac>)
 8013dee:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8013df0:	e03f      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013df2:	4b22      	ldr	r3, [pc, #136]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013df4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	605a      	str	r2, [r3, #4]
            break;
 8013dfc:	e039      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	4a1e      	ldr	r2, [pc, #120]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013e02:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8013e06:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8013e08:	687c      	ldr	r4, [r7, #4]
 8013e0a:	f003 f907 	bl	801701c <RegionGetVersion>
 8013e0e:	60a0      	str	r0, [r4, #8]
            break;
 8013e10:	e02f      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8013e12:	4b1a      	ldr	r3, [pc, #104]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013e14:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	605a      	str	r2, [r3, #4]
            break;
 8013e1c:	e029      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8013e1e:	4b17      	ldr	r3, [pc, #92]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013e20:	f893 211f 	ldrb.w	r2, [r3, #287]	; 0x11f
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	711a      	strb	r2, [r3, #4]
            break;
 8013e28:	e023      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8013e2a:	4b14      	ldr	r3, [pc, #80]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013e2c:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	809a      	strh	r2, [r3, #4]
            break;
 8013e34:	e01d      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8013e36:	4b11      	ldr	r3, [pc, #68]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013e38:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	809a      	strh	r2, [r3, #4]
            break;
 8013e40:	e017      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013e42:	4b0e      	ldr	r3, [pc, #56]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013e44:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	809a      	strh	r2, [r3, #4]
            break;
 8013e4c:	e011      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013e4e:	4b0b      	ldr	r3, [pc, #44]	; (8013e7c <LoRaMacMibGetRequestConfirm+0x3a8>)
 8013e50:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	809a      	strh	r2, [r3, #4]
            break;
 8013e58:	e00b      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013e5a:	2318      	movs	r3, #24
 8013e5c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013e5e:	e008      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8013e60:	2318      	movs	r3, #24
 8013e62:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8013e64:	e005      	b.n	8013e72 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f001 f81f 	bl	8014eaa <LoRaMacClassBMibGetRequestConfirm>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8013e70:	bf00      	nop
        }
    }
    return status;
 8013e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	371c      	adds	r7, #28
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd90      	pop	{r4, r7, pc}
 8013e7c:	20000bf0 	.word	0x20000bf0
 8013e80:	200011bc 	.word	0x200011bc

08013e84 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b086      	sub	sp, #24
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d101      	bne.n	8013e9a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e96:	2303      	movs	r3, #3
 8013e98:	e396      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8013e9a:	4bbd      	ldr	r3, [pc, #756]	; (8014190 <LoRaMacMibSetRequestConfirm+0x30c>)
 8013e9c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013ea0:	f003 0302 	and.w	r3, r3, #2
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d001      	beq.n	8013eac <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	e38d      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	781b      	ldrb	r3, [r3, #0]
 8013eb0:	2b41      	cmp	r3, #65	; 0x41
 8013eb2:	f200 835d 	bhi.w	8014570 <LoRaMacMibSetRequestConfirm+0x6ec>
 8013eb6:	a201      	add	r2, pc, #4	; (adr r2, 8013ebc <LoRaMacMibSetRequestConfirm+0x38>)
 8013eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ebc:	08013fc5 	.word	0x08013fc5
 8013ec0:	08013fd5 	.word	0x08013fd5
 8013ec4:	08013fef 	.word	0x08013fef
 8013ec8:	08014007 	.word	0x08014007
 8013ecc:	0801401f 	.word	0x0801401f
 8013ed0:	0801402b 	.word	0x0801402b
 8013ed4:	08014037 	.word	0x08014037
 8013ed8:	08014061 	.word	0x08014061
 8013edc:	08014087 	.word	0x08014087
 8013ee0:	080140ad 	.word	0x080140ad
 8013ee4:	080140d3 	.word	0x080140d3
 8013ee8:	080140f9 	.word	0x080140f9
 8013eec:	0801411f 	.word	0x0801411f
 8013ef0:	08014145 	.word	0x08014145
 8013ef4:	0801416b 	.word	0x0801416b
 8013ef8:	08014199 	.word	0x08014199
 8013efc:	080141b9 	.word	0x080141b9
 8013f00:	08014571 	.word	0x08014571
 8013f04:	080141c5 	.word	0x080141c5
 8013f08:	08014235 	.word	0x08014235
 8013f0c:	08014275 	.word	0x08014275
 8013f10:	080142d7 	.word	0x080142d7
 8013f14:	08014347 	.word	0x08014347
 8013f18:	08014317 	.word	0x08014317
 8013f1c:	08014377 	.word	0x08014377
 8013f20:	08014399 	.word	0x08014399
 8013f24:	080143a3 	.word	0x080143a3
 8013f28:	080143ad 	.word	0x080143ad
 8013f2c:	080143b7 	.word	0x080143b7
 8013f30:	080143c1 	.word	0x080143c1
 8013f34:	08014571 	.word	0x08014571
 8013f38:	080143cb 	.word	0x080143cb
 8013f3c:	080143fd 	.word	0x080143fd
 8013f40:	08014471 	.word	0x08014471
 8013f44:	08014437 	.word	0x08014437
 8013f48:	080144a3 	.word	0x080144a3
 8013f4c:	080144b9 	.word	0x080144b9
 8013f50:	080144d1 	.word	0x080144d1
 8013f54:	080144dd 	.word	0x080144dd
 8013f58:	080144e9 	.word	0x080144e9
 8013f5c:	08014571 	.word	0x08014571
 8013f60:	080144f3 	.word	0x080144f3
 8013f64:	08014571 	.word	0x08014571
 8013f68:	08014571 	.word	0x08014571
 8013f6c:	08014571 	.word	0x08014571
 8013f70:	08014571 	.word	0x08014571
 8013f74:	08014571 	.word	0x08014571
 8013f78:	08014571 	.word	0x08014571
 8013f7c:	08014571 	.word	0x08014571
 8013f80:	08014571 	.word	0x08014571
 8013f84:	08014571 	.word	0x08014571
 8013f88:	08014571 	.word	0x08014571
 8013f8c:	08014571 	.word	0x08014571
 8013f90:	08014571 	.word	0x08014571
 8013f94:	08014571 	.word	0x08014571
 8013f98:	08014571 	.word	0x08014571
 8013f9c:	08014571 	.word	0x08014571
 8013fa0:	08014571 	.word	0x08014571
 8013fa4:	0801451d 	.word	0x0801451d
 8013fa8:	08014529 	.word	0x08014529
 8013fac:	08014535 	.word	0x08014535
 8013fb0:	08014541 	.word	0x08014541
 8013fb4:	0801454d 	.word	0x0801454d
 8013fb8:	08014559 	.word	0x08014559
 8013fbc:	08014565 	.word	0x08014565
 8013fc0:	0801456b 	.word	0x0801456b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	791b      	ldrb	r3, [r3, #4]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7fd fabb 	bl	8011544 <SwitchClass>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	75fb      	strb	r3, [r7, #23]
            break;
 8013fd2:	e2ee      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	791b      	ldrb	r3, [r3, #4]
 8013fd8:	2b02      	cmp	r3, #2
 8013fda:	d005      	beq.n	8013fe8 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	791a      	ldrb	r2, [r3, #4]
 8013fe0:	4b6c      	ldr	r3, [pc, #432]	; (8014194 <LoRaMacMibSetRequestConfirm+0x310>)
 8013fe2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8013fe6:	e2e4      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013fe8:	2303      	movs	r3, #3
 8013fea:	75fb      	strb	r3, [r7, #23]
            break;
 8013fec:	e2e1      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fa f8b4 	bl	800e160 <SecureElementSetDevEui>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	f000 82be 	beq.w	801457c <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014000:	2303      	movs	r3, #3
 8014002:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014004:	e2ba      	b.n	801457c <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	685b      	ldr	r3, [r3, #4]
 801400a:	4618      	mov	r0, r3
 801400c:	f7fa f8d8 	bl	800e1c0 <SecureElementSetJoinEui>
 8014010:	4603      	mov	r3, r0
 8014012:	2b00      	cmp	r3, #0
 8014014:	f000 82b4 	beq.w	8014580 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014018:	2303      	movs	r3, #3
 801401a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801401c:	e2b0      	b.n	8014580 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	791a      	ldrb	r2, [r3, #4]
 8014022:	4b5c      	ldr	r3, [pc, #368]	; (8014194 <LoRaMacMibSetRequestConfirm+0x310>)
 8014024:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014028:	e2c3      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	685b      	ldr	r3, [r3, #4]
 801402e:	4a59      	ldr	r2, [pc, #356]	; (8014194 <LoRaMacMibSetRequestConfirm+0x310>)
 8014030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014034:	e2bd      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014036:	4b57      	ldr	r3, [pc, #348]	; (8014194 <LoRaMacMibSetRequestConfirm+0x310>)
 8014038:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	4619      	mov	r1, r3
 8014042:	4610      	mov	r0, r2
 8014044:	f7fa f8ec 	bl	800e220 <SecureElementSetDevAddr>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d002      	beq.n	8014054 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801404e:	2303      	movs	r3, #3
 8014050:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014052:	e2ae      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	685b      	ldr	r3, [r3, #4]
 8014058:	4a4e      	ldr	r2, [pc, #312]	; (8014194 <LoRaMacMibSetRequestConfirm+0x310>)
 801405a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 801405e:	e2a8      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d00b      	beq.n	8014080 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	4619      	mov	r1, r3
 801406e:	2000      	movs	r0, #0
 8014070:	f002 f868 	bl	8016144 <LoRaMacCryptoSetKey>
 8014074:	4603      	mov	r3, r0
 8014076:	2b00      	cmp	r3, #0
 8014078:	f000 8284 	beq.w	8014584 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801407c:	2311      	movs	r3, #17
 801407e:	e2a3      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014080:	2303      	movs	r3, #3
 8014082:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014084:	e27e      	b.n	8014584 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00b      	beq.n	80140a6 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	4619      	mov	r1, r3
 8014094:	2001      	movs	r0, #1
 8014096:	f002 f855 	bl	8016144 <LoRaMacCryptoSetKey>
 801409a:	4603      	mov	r3, r0
 801409c:	2b00      	cmp	r3, #0
 801409e:	f000 8273 	beq.w	8014588 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140a2:	2311      	movs	r3, #17
 80140a4:	e290      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140a6:	2303      	movs	r3, #3
 80140a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80140aa:	e26d      	b.n	8014588 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d00b      	beq.n	80140cc <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	685b      	ldr	r3, [r3, #4]
 80140b8:	4619      	mov	r1, r3
 80140ba:	2008      	movs	r0, #8
 80140bc:	f002 f842 	bl	8016144 <LoRaMacCryptoSetKey>
 80140c0:	4603      	mov	r3, r0
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	f000 8262 	beq.w	801458c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140c8:	2311      	movs	r3, #17
 80140ca:	e27d      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140cc:	2303      	movs	r3, #3
 80140ce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80140d0:	e25c      	b.n	801458c <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	685b      	ldr	r3, [r3, #4]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00b      	beq.n	80140f2 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	685b      	ldr	r3, [r3, #4]
 80140de:	4619      	mov	r1, r3
 80140e0:	2009      	movs	r0, #9
 80140e2:	f002 f82f 	bl	8016144 <LoRaMacCryptoSetKey>
 80140e6:	4603      	mov	r3, r0
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f000 8251 	beq.w	8014590 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80140ee:	2311      	movs	r3, #17
 80140f0:	e26a      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80140f2:	2303      	movs	r3, #3
 80140f4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80140f6:	e24b      	b.n	8014590 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	685b      	ldr	r3, [r3, #4]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d00b      	beq.n	8014118 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	685b      	ldr	r3, [r3, #4]
 8014104:	4619      	mov	r1, r3
 8014106:	200c      	movs	r0, #12
 8014108:	f002 f81c 	bl	8016144 <LoRaMacCryptoSetKey>
 801410c:	4603      	mov	r3, r0
 801410e:	2b00      	cmp	r3, #0
 8014110:	f000 8240 	beq.w	8014594 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014114:	2311      	movs	r3, #17
 8014116:	e257      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014118:	2303      	movs	r3, #3
 801411a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801411c:	e23a      	b.n	8014594 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	685b      	ldr	r3, [r3, #4]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d00b      	beq.n	801413e <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	4619      	mov	r1, r3
 801412c:	200d      	movs	r0, #13
 801412e:	f002 f809 	bl	8016144 <LoRaMacCryptoSetKey>
 8014132:	4603      	mov	r3, r0
 8014134:	2b00      	cmp	r3, #0
 8014136:	f000 822f 	beq.w	8014598 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801413a:	2311      	movs	r3, #17
 801413c:	e244      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801413e:	2303      	movs	r3, #3
 8014140:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014142:	e229      	b.n	8014598 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d00b      	beq.n	8014164 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	4619      	mov	r1, r3
 8014152:	200e      	movs	r0, #14
 8014154:	f001 fff6 	bl	8016144 <LoRaMacCryptoSetKey>
 8014158:	4603      	mov	r3, r0
 801415a:	2b00      	cmp	r3, #0
 801415c:	f000 821e 	beq.w	801459c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014160:	2311      	movs	r3, #17
 8014162:	e231      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014164:	2303      	movs	r3, #3
 8014166:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014168:	e218      	b.n	801459c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d00b      	beq.n	801418a <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	685b      	ldr	r3, [r3, #4]
 8014176:	4619      	mov	r1, r3
 8014178:	200f      	movs	r0, #15
 801417a:	f001 ffe3 	bl	8016144 <LoRaMacCryptoSetKey>
 801417e:	4603      	mov	r3, r0
 8014180:	2b00      	cmp	r3, #0
 8014182:	f000 820d 	beq.w	80145a0 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014186:	2311      	movs	r3, #17
 8014188:	e21e      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801418a:	2303      	movs	r3, #3
 801418c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801418e:	e207      	b.n	80145a0 <LoRaMacMibSetRequestConfirm+0x71c>
 8014190:	200006d4 	.word	0x200006d4
 8014194:	20000bf0 	.word	0x20000bf0
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	791a      	ldrb	r2, [r3, #4]
 801419c:	4bb2      	ldr	r3, [pc, #712]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801419e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80141a2:	4bb2      	ldr	r3, [pc, #712]	; (801446c <LoRaMacMibSetRequestConfirm+0x5e8>)
 80141a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80141a6:	4ab0      	ldr	r2, [pc, #704]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80141a8:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 80141ac:	4610      	mov	r0, r2
 80141ae:	4798      	blx	r3
            Radio.Sleep( );
 80141b0:	4bae      	ldr	r3, [pc, #696]	; (801446c <LoRaMacMibSetRequestConfirm+0x5e8>)
 80141b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141b4:	4798      	blx	r3
            break;
 80141b6:	e1fc      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	791a      	ldrb	r2, [r3, #4]
 80141bc:	4baa      	ldr	r3, [pc, #680]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80141be:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 80141c2:	e1f6      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	7a1b      	ldrb	r3, [r3, #8]
 80141c8:	b25b      	sxtb	r3, r3
 80141ca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80141cc:	4ba6      	ldr	r3, [pc, #664]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80141ce:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80141d2:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80141d4:	4ba4      	ldr	r3, [pc, #656]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80141d6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141da:	f107 0108 	add.w	r1, r7, #8
 80141de:	2207      	movs	r2, #7
 80141e0:	4618      	mov	r0, r3
 80141e2:	f002 fddf 	bl	8016da4 <RegionVerify>
 80141e6:	4603      	mov	r3, r0
 80141e8:	f083 0301 	eor.w	r3, r3, #1
 80141ec:	b2db      	uxtb	r3, r3
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d002      	beq.n	80141f8 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80141f2:	2303      	movs	r3, #3
 80141f4:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 80141f6:	e1dc      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	685b      	ldr	r3, [r3, #4]
 80141fc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 80141fe:	4b9a      	ldr	r3, [pc, #616]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014200:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014204:	f107 0108 	add.w	r1, r7, #8
 8014208:	2200      	movs	r2, #0
 801420a:	4618      	mov	r0, r3
 801420c:	f002 fdca 	bl	8016da4 <RegionVerify>
 8014210:	4603      	mov	r3, r0
 8014212:	f083 0301 	eor.w	r3, r3, #1
 8014216:	b2db      	uxtb	r3, r3
 8014218:	2b00      	cmp	r3, #0
 801421a:	d002      	beq.n	8014222 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 801421c:	2303      	movs	r3, #3
 801421e:	75fb      	strb	r3, [r7, #23]
            break;
 8014220:	e1c7      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014222:	4b91      	ldr	r3, [pc, #580]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014224:	687a      	ldr	r2, [r7, #4]
 8014226:	336c      	adds	r3, #108	; 0x6c
 8014228:	3204      	adds	r2, #4
 801422a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801422e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014232:	e1be      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	7a1b      	ldrb	r3, [r3, #8]
 8014238:	b25b      	sxtb	r3, r3
 801423a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801423c:	4b8a      	ldr	r3, [pc, #552]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801423e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014242:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014244:	4b88      	ldr	r3, [pc, #544]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014246:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801424a:	f107 0108 	add.w	r1, r7, #8
 801424e:	2207      	movs	r2, #7
 8014250:	4618      	mov	r0, r3
 8014252:	f002 fda7 	bl	8016da4 <RegionVerify>
 8014256:	4603      	mov	r3, r0
 8014258:	2b00      	cmp	r3, #0
 801425a:	d008      	beq.n	801426e <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 801425c:	4b82      	ldr	r3, [pc, #520]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	33b4      	adds	r3, #180	; 0xb4
 8014262:	3204      	adds	r2, #4
 8014264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014268:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801426c:	e1a1      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801426e:	2303      	movs	r3, #3
 8014270:	75fb      	strb	r3, [r7, #23]
            break;
 8014272:	e19e      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	7a1b      	ldrb	r3, [r3, #8]
 8014278:	b25b      	sxtb	r3, r3
 801427a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801427c:	4b7a      	ldr	r3, [pc, #488]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801427e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014282:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014284:	4b78      	ldr	r3, [pc, #480]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014286:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801428a:	f107 0108 	add.w	r1, r7, #8
 801428e:	2207      	movs	r2, #7
 8014290:	4618      	mov	r0, r3
 8014292:	f002 fd87 	bl	8016da4 <RegionVerify>
 8014296:	4603      	mov	r3, r0
 8014298:	2b00      	cmp	r3, #0
 801429a:	d019      	beq.n	80142d0 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801429c:	4b72      	ldr	r3, [pc, #456]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	3374      	adds	r3, #116	; 0x74
 80142a2:	3204      	adds	r2, #4
 80142a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80142a8:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80142ac:	4b6e      	ldr	r3, [pc, #440]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80142ae:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80142b2:	2b02      	cmp	r3, #2
 80142b4:	f040 8176 	bne.w	80145a4 <LoRaMacMibSetRequestConfirm+0x720>
 80142b8:	4b6b      	ldr	r3, [pc, #428]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80142ba:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80142be:	2b00      	cmp	r3, #0
 80142c0:	f000 8170 	beq.w	80145a4 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80142c4:	4b69      	ldr	r3, [pc, #420]	; (801446c <LoRaMacMibSetRequestConfirm+0x5e8>)
 80142c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142c8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80142ca:	f7fe fc1b 	bl	8012b04 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80142ce:	e169      	b.n	80145a4 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80142d0:	2303      	movs	r3, #3
 80142d2:	75fb      	strb	r3, [r7, #23]
            break;
 80142d4:	e166      	b.n	80145a4 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	7a1b      	ldrb	r3, [r3, #8]
 80142da:	b25b      	sxtb	r3, r3
 80142dc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80142de:	4b62      	ldr	r3, [pc, #392]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80142e0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80142e4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80142e6:	4b60      	ldr	r3, [pc, #384]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80142e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80142ec:	f107 0108 	add.w	r1, r7, #8
 80142f0:	2207      	movs	r2, #7
 80142f2:	4618      	mov	r0, r3
 80142f4:	f002 fd56 	bl	8016da4 <RegionVerify>
 80142f8:	4603      	mov	r3, r0
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d008      	beq.n	8014310 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80142fe:	4b5a      	ldr	r3, [pc, #360]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014300:	687a      	ldr	r2, [r7, #4]
 8014302:	33bc      	adds	r3, #188	; 0xbc
 8014304:	3204      	adds	r2, #4
 8014306:	e892 0003 	ldmia.w	r2, {r0, r1}
 801430a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801430e:	e150      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014310:	2303      	movs	r3, #3
 8014312:	75fb      	strb	r3, [r7, #23]
            break;
 8014314:	e14d      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801431c:	2301      	movs	r3, #1
 801431e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014320:	4b51      	ldr	r3, [pc, #324]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014322:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014326:	f107 020c 	add.w	r2, r7, #12
 801432a:	4611      	mov	r1, r2
 801432c:	4618      	mov	r0, r3
 801432e:	f002 fd62 	bl	8016df6 <RegionChanMaskSet>
 8014332:	4603      	mov	r3, r0
 8014334:	f083 0301 	eor.w	r3, r3, #1
 8014338:	b2db      	uxtb	r3, r3
 801433a:	2b00      	cmp	r3, #0
 801433c:	f000 8134 	beq.w	80145a8 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014340:	2303      	movs	r3, #3
 8014342:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014344:	e130      	b.n	80145a8 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	685b      	ldr	r3, [r3, #4]
 801434a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801434c:	2300      	movs	r3, #0
 801434e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014350:	4b45      	ldr	r3, [pc, #276]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014352:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014356:	f107 020c 	add.w	r2, r7, #12
 801435a:	4611      	mov	r1, r2
 801435c:	4618      	mov	r0, r3
 801435e:	f002 fd4a 	bl	8016df6 <RegionChanMaskSet>
 8014362:	4603      	mov	r3, r0
 8014364:	f083 0301 	eor.w	r3, r3, #1
 8014368:	b2db      	uxtb	r3, r3
 801436a:	2b00      	cmp	r3, #0
 801436c:	f000 811e 	beq.w	80145ac <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014370:	2303      	movs	r3, #3
 8014372:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014374:	e11a      	b.n	80145ac <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	791b      	ldrb	r3, [r3, #4]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d009      	beq.n	8014392 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014382:	2b0f      	cmp	r3, #15
 8014384:	d805      	bhi.n	8014392 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	791a      	ldrb	r2, [r3, #4]
 801438a:	4b37      	ldr	r3, [pc, #220]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801438c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014390:	e10f      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014392:	2303      	movs	r3, #3
 8014394:	75fb      	strb	r3, [r7, #23]
            break;
 8014396:	e10c      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	4a32      	ldr	r2, [pc, #200]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801439e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80143a0:	e107      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	685b      	ldr	r3, [r3, #4]
 80143a6:	4a30      	ldr	r2, [pc, #192]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143a8:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80143aa:	e102      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	4a2d      	ldr	r2, [pc, #180]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143b2:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80143b4:	e0fd      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	4a2b      	ldr	r2, [pc, #172]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143bc:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 80143be:	e0f8      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	4a28      	ldr	r2, [pc, #160]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143c6:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 80143c8:	e0f3      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80143d0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80143d2:	4b25      	ldr	r3, [pc, #148]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143d4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80143d8:	f107 0108 	add.w	r1, r7, #8
 80143dc:	2206      	movs	r2, #6
 80143de:	4618      	mov	r0, r3
 80143e0:	f002 fce0 	bl	8016da4 <RegionVerify>
 80143e4:	4603      	mov	r3, r0
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d005      	beq.n	80143f6 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80143ea:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80143ee:	4b1e      	ldr	r3, [pc, #120]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80143f0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80143f4:	e0dd      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80143f6:	2303      	movs	r3, #3
 80143f8:	75fb      	strb	r3, [r7, #23]
            break;
 80143fa:	e0da      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014402:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014404:	4b18      	ldr	r3, [pc, #96]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014406:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801440a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801440c:	4b16      	ldr	r3, [pc, #88]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801440e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014412:	f107 0108 	add.w	r1, r7, #8
 8014416:	2205      	movs	r2, #5
 8014418:	4618      	mov	r0, r3
 801441a:	f002 fcc3 	bl	8016da4 <RegionVerify>
 801441e:	4603      	mov	r3, r0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d005      	beq.n	8014430 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014424:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014428:	4b0f      	ldr	r3, [pc, #60]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801442a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801442e:	e0c0      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014430:	2303      	movs	r3, #3
 8014432:	75fb      	strb	r3, [r7, #23]
            break;
 8014434:	e0bd      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801443c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801443e:	4b0a      	ldr	r3, [pc, #40]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8014440:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014444:	f107 0108 	add.w	r1, r7, #8
 8014448:	220a      	movs	r2, #10
 801444a:	4618      	mov	r0, r3
 801444c:	f002 fcaa 	bl	8016da4 <RegionVerify>
 8014450:	4603      	mov	r3, r0
 8014452:	2b00      	cmp	r3, #0
 8014454:	d005      	beq.n	8014462 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014456:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801445a:	4b03      	ldr	r3, [pc, #12]	; (8014468 <LoRaMacMibSetRequestConfirm+0x5e4>)
 801445c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014460:	e0a7      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014462:	2303      	movs	r3, #3
 8014464:	75fb      	strb	r3, [r7, #23]
            break;
 8014466:	e0a4      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
 8014468:	20000bf0 	.word	0x20000bf0
 801446c:	0801ee44 	.word	0x0801ee44
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014476:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014478:	4b55      	ldr	r3, [pc, #340]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 801447a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801447e:	f107 0108 	add.w	r1, r7, #8
 8014482:	2209      	movs	r2, #9
 8014484:	4618      	mov	r0, r3
 8014486:	f002 fc8d 	bl	8016da4 <RegionVerify>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d005      	beq.n	801449c <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8014490:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014494:	4b4e      	ldr	r3, [pc, #312]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014496:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801449a:	e08a      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801449c:	2303      	movs	r3, #3
 801449e:	75fb      	strb	r3, [r7, #23]
            break;
 80144a0:	e087      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	4a4a      	ldr	r2, [pc, #296]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80144ac:	4b48      	ldr	r3, [pc, #288]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80144b2:	4a47      	ldr	r2, [pc, #284]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144b4:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80144b6:	e07c      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	791a      	ldrb	r2, [r3, #4]
 80144bc:	4b44      	ldr	r3, [pc, #272]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 80144c2:	4b43      	ldr	r3, [pc, #268]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144c4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80144c8:	4b41      	ldr	r3, [pc, #260]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 80144ce:	e070      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	685b      	ldr	r3, [r3, #4]
 80144d4:	4a3e      	ldr	r2, [pc, #248]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 80144da:	e06a      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	4a3b      	ldr	r2, [pc, #236]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144e2:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 80144e6:	e064      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 80144e8:	f7fe fd40 	bl	8012f6c <RestoreNvmData>
 80144ec:	4603      	mov	r3, r0
 80144ee:	75fb      	strb	r3, [r7, #23]
            break;
 80144f0:	e05f      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	799b      	ldrb	r3, [r3, #6]
 80144f6:	2b01      	cmp	r3, #1
 80144f8:	d80d      	bhi.n	8014516 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80144fa:	4a35      	ldr	r2, [pc, #212]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	6858      	ldr	r0, [r3, #4]
 8014508:	f001 fd7e 	bl	8016008 <LoRaMacCryptoSetLrWanVersion>
 801450c:	4603      	mov	r3, r0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d04e      	beq.n	80145b0 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014512:	2311      	movs	r3, #17
 8014514:	e058      	b.n	80145c8 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014516:	2303      	movs	r3, #3
 8014518:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801451a:	e049      	b.n	80145b0 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	4a2b      	ldr	r2, [pc, #172]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 8014526:	e044      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	791a      	ldrb	r2, [r3, #4]
 801452c:	4b28      	ldr	r3, [pc, #160]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 801452e:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
            break;
 8014532:	e03e      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	889a      	ldrh	r2, [r3, #4]
 8014538:	4b25      	ldr	r3, [pc, #148]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 801453a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 801453e:	e038      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	889a      	ldrh	r2, [r3, #4]
 8014544:	4b22      	ldr	r3, [pc, #136]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014546:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 801454a:	e032      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	889a      	ldrh	r2, [r3, #4]
 8014550:	4b1f      	ldr	r3, [pc, #124]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 8014552:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 8014556:	e02c      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	889a      	ldrh	r2, [r3, #4]
 801455c:	4b1c      	ldr	r3, [pc, #112]	; (80145d0 <LoRaMacMibSetRequestConfirm+0x74c>)
 801455e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 8014562:	e026      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8014564:	2318      	movs	r3, #24
 8014566:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014568:	e023      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801456a:	2318      	movs	r3, #24
 801456c:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 801456e:	e020      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f000 fca4 	bl	8014ebe <LoRaMacMibClassBSetRequestConfirm>
 8014576:	4603      	mov	r3, r0
 8014578:	75fb      	strb	r3, [r7, #23]
            break;
 801457a:	e01a      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801457c:	bf00      	nop
 801457e:	e018      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014580:	bf00      	nop
 8014582:	e016      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014584:	bf00      	nop
 8014586:	e014      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014588:	bf00      	nop
 801458a:	e012      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801458c:	bf00      	nop
 801458e:	e010      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014590:	bf00      	nop
 8014592:	e00e      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014594:	bf00      	nop
 8014596:	e00c      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 8014598:	bf00      	nop
 801459a:	e00a      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 801459c:	bf00      	nop
 801459e:	e008      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80145a0:	bf00      	nop
 80145a2:	e006      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80145a4:	bf00      	nop
 80145a6:	e004      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80145a8:	bf00      	nop
 80145aa:	e002      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80145ac:	bf00      	nop
 80145ae:	e000      	b.n	80145b2 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 80145b0:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 80145b2:	7dfb      	ldrb	r3, [r7, #23]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d106      	bne.n	80145c6 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80145b8:	4a06      	ldr	r2, [pc, #24]	; (80145d4 <LoRaMacMibSetRequestConfirm+0x750>)
 80145ba:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80145be:	f043 0320 	orr.w	r3, r3, #32
 80145c2:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 80145c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3718      	adds	r7, #24
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	20000bf0 	.word	0x20000bf0
 80145d4:	200006d4 	.word	0x200006d4

080145d8 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b08a      	sub	sp, #40	; 0x28
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80145e0:	2302      	movs	r3, #2
 80145e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80145e6:	2300      	movs	r3, #0
 80145e8:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d101      	bne.n	80145f4 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145f0:	2303      	movs	r3, #3
 80145f2:	e17e      	b.n	80148f2 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2200      	movs	r2, #0
 80145f8:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80145fa:	f7fc fb85 	bl	8010d08 <LoRaMacIsBusy>
 80145fe:	4603      	mov	r3, r0
 8014600:	2b00      	cmp	r3, #0
 8014602:	d001      	beq.n	8014608 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8014604:	2301      	movs	r3, #1
 8014606:	e174      	b.n	80148f2 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8014608:	f001 f994 	bl	8015934 <LoRaMacConfirmQueueIsFull>
 801460c:	4603      	mov	r3, r0
 801460e:	2b00      	cmp	r3, #0
 8014610:	d001      	beq.n	8014616 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8014612:	2301      	movs	r3, #1
 8014614:	e16d      	b.n	80148f2 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8014616:	f001 f981 	bl	801591c <LoRaMacConfirmQueueGetCnt>
 801461a:	4603      	mov	r3, r0
 801461c:	2b00      	cmp	r3, #0
 801461e:	d104      	bne.n	801462a <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8014620:	2214      	movs	r2, #20
 8014622:	2100      	movs	r1, #0
 8014624:	48b5      	ldr	r0, [pc, #724]	; (80148fc <LoRaMacMlmeRequest+0x324>)
 8014626:	f004 ff75 	bl	8019514 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801462a:	4bb5      	ldr	r3, [pc, #724]	; (8014900 <LoRaMacMlmeRequest+0x328>)
 801462c:	2201      	movs	r2, #1
 801462e:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8014632:	4ab3      	ldr	r2, [pc, #716]	; (8014900 <LoRaMacMlmeRequest+0x328>)
 8014634:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014638:	f043 0304 	orr.w	r3, r3, #4
 801463c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014648:	2301      	movs	r3, #1
 801464a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 801464e:	2300      	movs	r3, #0
 8014650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 8014654:	2300      	movs	r3, #0
 8014656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	781b      	ldrb	r3, [r3, #0]
 801465e:	3b01      	subs	r3, #1
 8014660:	2b0c      	cmp	r3, #12
 8014662:	f200 811a 	bhi.w	801489a <LoRaMacMlmeRequest+0x2c2>
 8014666:	a201      	add	r2, pc, #4	; (adr r2, 801466c <LoRaMacMlmeRequest+0x94>)
 8014668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801466c:	080146a1 	.word	0x080146a1
 8014670:	0801489b 	.word	0x0801489b
 8014674:	0801489b 	.word	0x0801489b
 8014678:	0801489b 	.word	0x0801489b
 801467c:	0801477f 	.word	0x0801477f
 8014680:	080147a3 	.word	0x080147a3
 8014684:	0801489b 	.word	0x0801489b
 8014688:	0801489b 	.word	0x0801489b
 801468c:	080147c1 	.word	0x080147c1
 8014690:	0801489b 	.word	0x0801489b
 8014694:	08014869 	.word	0x08014869
 8014698:	080147fd 	.word	0x080147fd
 801469c:	08014847 	.word	0x08014847
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80146a0:	4b97      	ldr	r3, [pc, #604]	; (8014900 <LoRaMacMlmeRequest+0x328>)
 80146a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80146a6:	f003 0320 	and.w	r3, r3, #32
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d001      	beq.n	80146b2 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80146ae:	2301      	movs	r3, #1
 80146b0:	e11f      	b.n	80148f2 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	791b      	ldrb	r3, [r3, #4]
 80146b6:	2b02      	cmp	r3, #2
 80146b8:	d135      	bne.n	8014726 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 80146ba:	2000      	movs	r0, #0
 80146bc:	f7fe f8b4 	bl	8012828 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80146c0:	4b90      	ldr	r3, [pc, #576]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 80146c2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	795b      	ldrb	r3, [r3, #5]
 80146ca:	b25b      	sxtb	r3, r3
 80146cc:	2200      	movs	r2, #0
 80146ce:	4619      	mov	r1, r3
 80146d0:	f002 fc50 	bl	8016f74 <RegionAlternateDr>
 80146d4:	4603      	mov	r3, r0
 80146d6:	461a      	mov	r2, r3
 80146d8:	4b8a      	ldr	r3, [pc, #552]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 80146da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80146e4:	4b87      	ldr	r3, [pc, #540]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 80146e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80146ea:	2307      	movs	r3, #7
 80146ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 80146f0:	20ff      	movs	r0, #255	; 0xff
 80146f2:	f7fd fe1d 	bl	8012330 <SendReJoinReq>
 80146f6:	4603      	mov	r3, r0
 80146f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 80146fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014700:	2b00      	cmp	r3, #0
 8014702:	f000 80cc 	beq.w	801489e <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8014706:	4b7f      	ldr	r3, [pc, #508]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 8014708:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	795b      	ldrb	r3, [r3, #5]
 8014710:	b25b      	sxtb	r3, r3
 8014712:	2201      	movs	r2, #1
 8014714:	4619      	mov	r1, r3
 8014716:	f002 fc2d 	bl	8016f74 <RegionAlternateDr>
 801471a:	4603      	mov	r3, r0
 801471c:	461a      	mov	r2, r3
 801471e:	4b79      	ldr	r3, [pc, #484]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 8014720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8014724:	e0bb      	b.n	801489e <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	791b      	ldrb	r3, [r3, #4]
 801472a:	2b01      	cmp	r3, #1
 801472c:	f040 80b7 	bne.w	801489e <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8014730:	4b74      	ldr	r3, [pc, #464]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 8014732:	2200      	movs	r2, #0
 8014734:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014738:	2302      	movs	r3, #2
 801473a:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801473c:	4b71      	ldr	r3, [pc, #452]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 801473e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014742:	f107 020c 	add.w	r2, r7, #12
 8014746:	4611      	mov	r1, r2
 8014748:	4618      	mov	r0, r3
 801474a:	f002 fb19 	bl	8016d80 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	791a      	ldrb	r2, [r3, #4]
 8014752:	4b6c      	ldr	r3, [pc, #432]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 8014754:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8014758:	2300      	movs	r3, #0
 801475a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 801475e:	2301      	movs	r3, #1
 8014760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                OnMacProcessNotify( );
 8014764:	f7fe fdb2 	bl	80132cc <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8014768:	4a65      	ldr	r2, [pc, #404]	; (8014900 <LoRaMacMlmeRequest+0x328>)
 801476a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 801476e:	f043 0310 	orr.w	r3, r3, #16
 8014772:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8014776:	2300      	movs	r3, #0
 8014778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801477c:	e08f      	b.n	801489e <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801477e:	2300      	movs	r3, #0
 8014780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8014784:	f107 031c 	add.w	r3, r7, #28
 8014788:	2200      	movs	r2, #0
 801478a:	4619      	mov	r1, r3
 801478c:	2002      	movs	r0, #2
 801478e:	f000 fd21 	bl	80151d4 <LoRaMacCommandsAddCmd>
 8014792:	4603      	mov	r3, r0
 8014794:	2b00      	cmp	r3, #0
 8014796:	f000 8084 	beq.w	80148a2 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801479a:	2313      	movs	r3, #19
 801479c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80147a0:	e07f      	b.n	80148a2 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	8898      	ldrh	r0, [r3, #4]
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6899      	ldr	r1, [r3, #8]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	461a      	mov	r2, r3
 80147b4:	f7fe fbba 	bl	8012f2c <SetTxContinuousWave>
 80147b8:	4603      	mov	r3, r0
 80147ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80147be:	e077      	b.n	80148b0 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80147c0:	2300      	movs	r3, #0
 80147c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80147c6:	f107 0308 	add.w	r3, r7, #8
 80147ca:	4619      	mov	r1, r3
 80147cc:	200d      	movs	r0, #13
 80147ce:	f000 fd81 	bl	80152d4 <LoRaMacCommandsGetCmd>
 80147d2:	4603      	mov	r3, r0
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d103      	bne.n	80147e0 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80147de:	e062      	b.n	80148a6 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80147e0:	f107 031c 	add.w	r3, r7, #28
 80147e4:	2200      	movs	r2, #0
 80147e6:	4619      	mov	r1, r3
 80147e8:	200d      	movs	r0, #13
 80147ea:	f000 fcf3 	bl	80151d4 <LoRaMacCommandsAddCmd>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d058      	beq.n	80148a6 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80147f4:	2313      	movs	r3, #19
 80147f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80147fa:	e054      	b.n	80148a6 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80147fc:	4b41      	ldr	r3, [pc, #260]	; (8014904 <LoRaMacMlmeRequest+0x32c>)
 80147fe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014802:	2b00      	cmp	r3, #0
 8014804:	d151      	bne.n	80148aa <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	791b      	ldrb	r3, [r3, #4]
 801480a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	791b      	ldrb	r3, [r3, #4]
 8014812:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8014816:	b2db      	uxtb	r3, r3
 8014818:	4618      	mov	r0, r3
 801481a:	f000 fb25 	bl	8014e68 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801481e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014822:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8014824:	2300      	movs	r3, #0
 8014826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801482a:	f107 031c 	add.w	r3, r7, #28
 801482e:	2201      	movs	r2, #1
 8014830:	4619      	mov	r1, r3
 8014832:	2010      	movs	r0, #16
 8014834:	f000 fcce 	bl	80151d4 <LoRaMacCommandsAddCmd>
 8014838:	4603      	mov	r3, r0
 801483a:	2b00      	cmp	r3, #0
 801483c:	d035      	beq.n	80148aa <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801483e:	2313      	movs	r3, #19
 8014840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8014844:	e031      	b.n	80148aa <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8014846:	2300      	movs	r3, #0
 8014848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801484c:	f107 031c 	add.w	r3, r7, #28
 8014850:	2200      	movs	r2, #0
 8014852:	4619      	mov	r1, r3
 8014854:	2012      	movs	r0, #18
 8014856:	f000 fcbd 	bl	80151d4 <LoRaMacCommandsAddCmd>
 801485a:	4603      	mov	r3, r0
 801485c:	2b00      	cmp	r3, #0
 801485e:	d026      	beq.n	80148ae <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014860:	2313      	movs	r3, #19
 8014862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8014866:	e022      	b.n	80148ae <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8014868:	2301      	movs	r3, #1
 801486a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801486e:	f000 fab1 	bl	8014dd4 <LoRaMacClassBIsAcquisitionInProgress>
 8014872:	4603      	mov	r3, r0
 8014874:	f083 0301 	eor.w	r3, r3, #1
 8014878:	b2db      	uxtb	r3, r3
 801487a:	2b00      	cmp	r3, #0
 801487c:	d009      	beq.n	8014892 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801487e:	2000      	movs	r0, #0
 8014880:	f000 fa8a 	bl	8014d98 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8014884:	2000      	movs	r0, #0
 8014886:	f000 faac 	bl	8014de2 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801488a:	2300      	movs	r3, #0
 801488c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8014890:	e00e      	b.n	80148b0 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 8014892:	2301      	movs	r3, #1
 8014894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8014898:	e00a      	b.n	80148b0 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 801489a:	bf00      	nop
 801489c:	e008      	b.n	80148b0 <LoRaMacMlmeRequest+0x2d8>
            break;
 801489e:	bf00      	nop
 80148a0:	e006      	b.n	80148b0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80148a2:	bf00      	nop
 80148a4:	e004      	b.n	80148b0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80148a6:	bf00      	nop
 80148a8:	e002      	b.n	80148b0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80148aa:	bf00      	nop
 80148ac:	e000      	b.n	80148b0 <LoRaMacMlmeRequest+0x2d8>
            break;
 80148ae:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80148b0:	4b13      	ldr	r3, [pc, #76]	; (8014900 <LoRaMacMlmeRequest+0x328>)
 80148b2:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80148ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d010      	beq.n	80148e4 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80148c2:	f001 f82b 	bl	801591c <LoRaMacConfirmQueueGetCnt>
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d110      	bne.n	80148ee <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 80148cc:	4b0c      	ldr	r3, [pc, #48]	; (8014900 <LoRaMacMlmeRequest+0x328>)
 80148ce:	2200      	movs	r2, #0
 80148d0:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80148d4:	4a0a      	ldr	r2, [pc, #40]	; (8014900 <LoRaMacMlmeRequest+0x328>)
 80148d6:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80148da:	f36f 0382 	bfc	r3, #2, #1
 80148de:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 80148e2:	e004      	b.n	80148ee <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80148e4:	f107 0320 	add.w	r3, r7, #32
 80148e8:	4618      	mov	r0, r3
 80148ea:	f000 fec3 	bl	8015674 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80148ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3728      	adds	r7, #40	; 0x28
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	20000b28 	.word	0x20000b28
 8014900:	200006d4 	.word	0x200006d4
 8014904:	20000bf0 	.word	0x20000bf0

08014908 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8014908:	b5b0      	push	{r4, r5, r7, lr}
 801490a:	b092      	sub	sp, #72	; 0x48
 801490c:	af02      	add	r7, sp, #8
 801490e:	6078      	str	r0, [r7, #4]
 8014910:	460b      	mov	r3, r1
 8014912:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014914:	2302      	movs	r3, #2
 8014916:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801491a:	2300      	movs	r3, #0
 801491c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    void* fBuffer = NULL;
 8014920:	2300      	movs	r3, #0
 8014922:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8014924:	2300      	movs	r3, #0
 8014926:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 801492a:	2300      	movs	r3, #0
 801492c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d101      	bne.n	801493a <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014936:	2303      	movs	r3, #3
 8014938:	e113      	b.n	8014b62 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	2200      	movs	r2, #0
 801493e:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8014940:	f7fc f9e2 	bl	8010d08 <LoRaMacIsBusy>
 8014944:	4603      	mov	r3, r0
 8014946:	2b00      	cmp	r3, #0
 8014948:	d001      	beq.n	801494e <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801494a:	2301      	movs	r3, #1
 801494c:	e109      	b.n	8014b62 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	f107 040c 	add.w	r4, r7, #12
 8014954:	461d      	mov	r5, r3
 8014956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801495a:	682b      	ldr	r3, [r5, #0]
 801495c:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 801495e:	2300      	movs	r3, #0
 8014960:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8014964:	2214      	movs	r2, #20
 8014966:	2100      	movs	r1, #0
 8014968:	4880      	ldr	r0, [pc, #512]	; (8014b6c <LoRaMacMcpsRequest+0x264>)
 801496a:	f004 fdd3 	bl	8019514 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801496e:	4b80      	ldr	r3, [pc, #512]	; (8014b70 <LoRaMacMcpsRequest+0x268>)
 8014970:	2201      	movs	r2, #1
 8014972:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8014976:	4b7f      	ldr	r3, [pc, #508]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014978:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 801497c:	2b02      	cmp	r3, #2
 801497e:	d111      	bne.n	80149a4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8014980:	4b7c      	ldr	r3, [pc, #496]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014982:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8014986:	2b02      	cmp	r3, #2
 8014988:	d10c      	bne.n	80149a4 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801498a:	4b7a      	ldr	r3, [pc, #488]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 801498c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
 8014990:	f083 0301 	eor.w	r3, r3, #1
 8014994:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8014996:	2b00      	cmp	r3, #0
 8014998:	d004      	beq.n	80149a4 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801499a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801499c:	2b00      	cmp	r3, #0
 801499e:	d101      	bne.n	80149a4 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 80149a0:	2301      	movs	r3, #1
 80149a2:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 80149a4:	7b3b      	ldrb	r3, [r7, #12]
 80149a6:	2b03      	cmp	r3, #3
 80149a8:	d030      	beq.n	8014a0c <LoRaMacMcpsRequest+0x104>
 80149aa:	2b03      	cmp	r3, #3
 80149ac:	dc3f      	bgt.n	8014a2e <LoRaMacMcpsRequest+0x126>
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d002      	beq.n	80149b8 <LoRaMacMcpsRequest+0xb0>
 80149b2:	2b01      	cmp	r3, #1
 80149b4:	d015      	beq.n	80149e2 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80149b6:	e03a      	b.n	8014a2e <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 80149b8:	2301      	movs	r3, #1
 80149ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80149be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80149c2:	2202      	movs	r2, #2
 80149c4:	f362 1347 	bfi	r3, r2, #5, #3
 80149c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80149cc:	7c3b      	ldrb	r3, [r7, #16]
 80149ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80149d6:	8b3b      	ldrh	r3, [r7, #24]
 80149d8:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80149da:	7ebb      	ldrb	r3, [r7, #26]
 80149dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80149e0:	e026      	b.n	8014a30 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80149e2:	2301      	movs	r3, #1
 80149e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80149e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80149ec:	2204      	movs	r2, #4
 80149ee:	f362 1347 	bfi	r3, r2, #5, #3
 80149f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 80149f6:	7c3b      	ldrb	r3, [r7, #16]
 80149f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8014a00:	8b3b      	ldrh	r3, [r7, #24]
 8014a02:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8014a04:	7ebb      	ldrb	r3, [r7, #26]
 8014a06:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8014a0a:	e011      	b.n	8014a30 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8014a0c:	2301      	movs	r3, #1
 8014a0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8014a12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014a16:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8014a1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8014a22:	8abb      	ldrh	r3, [r7, #20]
 8014a24:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8014a26:	7dbb      	ldrb	r3, [r7, #22]
 8014a28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8014a2c:	e000      	b.n	8014a30 <LoRaMacMcpsRequest+0x128>
            break;
 8014a2e:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014a30:	2302      	movs	r3, #2
 8014a32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014a36:	4b4f      	ldr	r3, [pc, #316]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014a38:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014a3c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a40:	4b4c      	ldr	r3, [pc, #304]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014a42:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a46:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014a4a:	4611      	mov	r1, r2
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f002 f96e 	bl	8016d2e <RegionGetPhyParam>
 8014a52:	4603      	mov	r3, r0
 8014a54:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8014a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a58:	b25b      	sxtb	r3, r3
 8014a5a:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8014a5e:	4293      	cmp	r3, r2
 8014a60:	bfb8      	it	lt
 8014a62:	4613      	movlt	r3, r2
 8014a64:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014a68:	4b42      	ldr	r3, [pc, #264]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014a6a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014a6e:	4a41      	ldr	r2, [pc, #260]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014a70:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8014a74:	4a3f      	ldr	r2, [pc, #252]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014a76:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f7fc fae0 	bl	8011040 <CheckForMinimumAbpDatarate>
 8014a80:	4603      	mov	r3, r0
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d002      	beq.n	8014a8c <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8014a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8014a8c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d05f      	beq.n	8014b54 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014a94:	4b37      	ldr	r3, [pc, #220]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014a96:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014a9a:	f083 0301 	eor.w	r3, r3, #1
 8014a9e:	b2db      	uxtb	r3, r3
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d10e      	bne.n	8014ac2 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8014aa4:	4b33      	ldr	r3, [pc, #204]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014aa6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8014aaa:	4a32      	ldr	r2, [pc, #200]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014aac:	f892 1130 	ldrb.w	r1, [r2, #304]	; 0x130
 8014ab0:	4a30      	ldr	r2, [pc, #192]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014ab2:	f892 211d 	ldrb.w	r2, [r2, #285]	; 0x11d
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fc fac2 	bl	8011040 <CheckForMinimumAbpDatarate>
 8014abc:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d01c      	beq.n	8014afc <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8014ac2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8014ac6:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014aca:	4b2a      	ldr	r3, [pc, #168]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014acc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014ad0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014ad4:	4b27      	ldr	r3, [pc, #156]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014ad6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ada:	f107 0120 	add.w	r1, r7, #32
 8014ade:	2205      	movs	r2, #5
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f002 f95f 	bl	8016da4 <RegionVerify>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d005      	beq.n	8014af8 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014aec:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8014af0:	4b20      	ldr	r3, [pc, #128]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8014af6:	e001      	b.n	8014afc <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8014af8:	2303      	movs	r3, #3
 8014afa:	e032      	b.n	8014b62 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8014afc:	4b1d      	ldr	r3, [pc, #116]	; (8014b74 <LoRaMacMcpsRequest+0x26c>)
 8014afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014b02:	4a1b      	ldr	r2, [pc, #108]	; (8014b70 <LoRaMacMcpsRequest+0x268>)
 8014b04:	f8d2 2498 	ldr.w	r2, [r2, #1176]	; 0x498
 8014b08:	4611      	mov	r1, r2
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7fc fb84 	bl	8011218 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8014b10:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014b12:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8014b16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014b1a:	78fb      	ldrb	r3, [r7, #3]
 8014b1c:	9300      	str	r3, [sp, #0]
 8014b1e:	4613      	mov	r3, r2
 8014b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b22:	f7fd fb23 	bl	801216c <Send>
 8014b26:	4603      	mov	r3, r0
 8014b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8014b2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d10b      	bne.n	8014b4c <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8014b34:	7b3a      	ldrb	r2, [r7, #12]
 8014b36:	4b0e      	ldr	r3, [pc, #56]	; (8014b70 <LoRaMacMcpsRequest+0x268>)
 8014b38:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8014b3c:	4a0c      	ldr	r2, [pc, #48]	; (8014b70 <LoRaMacMcpsRequest+0x268>)
 8014b3e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014b42:	f043 0301 	orr.w	r3, r3, #1
 8014b46:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 8014b4a:	e003      	b.n	8014b54 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8014b4c:	4b08      	ldr	r3, [pc, #32]	; (8014b70 <LoRaMacMcpsRequest+0x268>)
 8014b4e:	2200      	movs	r2, #0
 8014b50:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8014b54:	4b06      	ldr	r3, [pc, #24]	; (8014b70 <LoRaMacMcpsRequest+0x268>)
 8014b56:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	611a      	str	r2, [r3, #16]

    return status;
 8014b5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3740      	adds	r7, #64	; 0x40
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bdb0      	pop	{r4, r5, r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	20000b14 	.word	0x20000b14
 8014b70:	200006d4 	.word	0x200006d4
 8014b74:	20000bf0 	.word	0x20000bf0

08014b78 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b084      	sub	sp, #16
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	4603      	mov	r3, r0
 8014b80:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8014b82:	79fb      	ldrb	r3, [r7, #7]
 8014b84:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8014b86:	4b0d      	ldr	r3, [pc, #52]	; (8014bbc <LoRaMacTestSetDutyCycleOn+0x44>)
 8014b88:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b8c:	f107 010c 	add.w	r1, r7, #12
 8014b90:	220f      	movs	r2, #15
 8014b92:	4618      	mov	r0, r3
 8014b94:	f002 f906 	bl	8016da4 <RegionVerify>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d00a      	beq.n	8014bb4 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8014b9e:	4a07      	ldr	r2, [pc, #28]	; (8014bbc <LoRaMacTestSetDutyCycleOn+0x44>)
 8014ba0:	79fb      	ldrb	r3, [r7, #7]
 8014ba2:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8014ba6:	4a06      	ldr	r2, [pc, #24]	; (8014bc0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8014ba8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8014bac:	f043 0320 	orr.w	r3, r3, #32
 8014bb0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8014bb4:	bf00      	nop
 8014bb6:	3710      	adds	r7, #16
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	bd80      	pop	{r7, pc}
 8014bbc:	20000bf0 	.word	0x20000bf0
 8014bc0:	200006d4 	.word	0x200006d4

08014bc4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8014bc8:	f7fe fe94 	bl	80138f4 <LoRaMacStop>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d112      	bne.n	8014bf8 <LoRaMacDeInitialization+0x34>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8014bd2:	480b      	ldr	r0, [pc, #44]	; (8014c00 <LoRaMacDeInitialization+0x3c>)
 8014bd4:	f008 fcc0 	bl	801d558 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8014bd8:	480a      	ldr	r0, [pc, #40]	; (8014c04 <LoRaMacDeInitialization+0x40>)
 8014bda:	f008 fcbd 	bl	801d558 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8014bde:	480a      	ldr	r0, [pc, #40]	; (8014c08 <LoRaMacDeInitialization+0x44>)
 8014be0:	f008 fcba 	bl	801d558 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8014be4:	f000 f94a 	bl	8014e7c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8014be8:	2000      	movs	r0, #0
 8014bea:	f7fd fe1d 	bl	8012828 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8014bee:	4b07      	ldr	r3, [pc, #28]	; (8014c0c <LoRaMacDeInitialization+0x48>)
 8014bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf2:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	e000      	b.n	8014bfa <LoRaMacDeInitialization+0x36>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8014bf8:	2301      	movs	r3, #1
    }
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	bd80      	pop	{r7, pc}
 8014bfe:	bf00      	nop
 8014c00:	20000a3c 	.word	0x20000a3c
 8014c04:	20000a54 	.word	0x20000a54
 8014c08:	20000a6c 	.word	0x20000a6c
 8014c0c:	0801ee44 	.word	0x0801ee44

08014c10 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b08c      	sub	sp, #48	; 0x30
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	60f8      	str	r0, [r7, #12]
 8014c18:	60b9      	str	r1, [r7, #8]
 8014c1a:	607a      	str	r2, [r7, #4]
 8014c1c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	7b1b      	ldrb	r3, [r3, #12]
 8014c28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	7b5b      	ldrb	r3, [r3, #13]
 8014c30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	7b9b      	ldrb	r3, [r3, #14]
 8014c38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	685a      	ldr	r2, [r3, #4]
 8014c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c42:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	785b      	ldrb	r3, [r3, #1]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	f000 8088 	beq.w	8014d5e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8014c4e:	2302      	movs	r3, #2
 8014c50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	7bdb      	ldrb	r3, [r3, #15]
 8014c58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	7c1b      	ldrb	r3, [r3, #16]
 8014c60:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014c64:	4611      	mov	r1, r2
 8014c66:	4618      	mov	r0, r3
 8014c68:	f002 f861 	bl	8016d2e <RegionGetPhyParam>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8014c70:	6a3b      	ldr	r3, [r7, #32]
 8014c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8014c76:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 8014c7a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8014c7e:	4293      	cmp	r3, r2
 8014c80:	bfb8      	it	lt
 8014c82:	4613      	movlt	r3, r2
 8014c84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	68fa      	ldr	r2, [r7, #12]
 8014c8e:	8912      	ldrh	r2, [r2, #8]
 8014c90:	4293      	cmp	r3, r2
 8014c92:	d302      	bcc.n	8014c9a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8014c94:	2301      	movs	r3, #1
 8014c96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	685b      	ldr	r3, [r3, #4]
 8014c9e:	68fa      	ldr	r2, [r7, #12]
 8014ca0:	8912      	ldrh	r2, [r2, #8]
 8014ca2:	4611      	mov	r1, r2
 8014ca4:	68fa      	ldr	r2, [r7, #12]
 8014ca6:	8952      	ldrh	r2, [r2, #10]
 8014ca8:	440a      	add	r2, r1
 8014caa:	4293      	cmp	r3, r2
 8014cac:	d30f      	bcc.n	8014cce <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8014cae:	230a      	movs	r3, #10
 8014cb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	7c1b      	ldrb	r3, [r3, #16]
 8014cb8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014cbc:	4611      	mov	r1, r2
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f002 f835 	bl	8016d2e <RegionGetPhyParam>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8014cc8:	6a3b      	ldr	r3, [r7, #32]
 8014cca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	68fa      	ldr	r2, [r7, #12]
 8014cd4:	8912      	ldrh	r2, [r2, #8]
 8014cd6:	4611      	mov	r1, r2
 8014cd8:	68fa      	ldr	r2, [r7, #12]
 8014cda:	8952      	ldrh	r2, [r2, #10]
 8014cdc:	0052      	lsls	r2, r2, #1
 8014cde:	440a      	add	r2, r1
 8014ce0:	4293      	cmp	r3, r2
 8014ce2:	d33c      	bcc.n	8014d5e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	685b      	ldr	r3, [r3, #4]
 8014ce8:	68fa      	ldr	r2, [r7, #12]
 8014cea:	8912      	ldrh	r2, [r2, #8]
 8014cec:	1a9b      	subs	r3, r3, r2
 8014cee:	68fa      	ldr	r2, [r7, #12]
 8014cf0:	8952      	ldrh	r2, [r2, #10]
 8014cf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8014cf6:	fb01 f202 	mul.w	r2, r1, r2
 8014cfa:	1a9b      	subs	r3, r3, r2
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d12e      	bne.n	8014d5e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8014d00:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8014d04:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d110      	bne.n	8014d2e <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d009      	beq.n	8014d28 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8014d14:	2302      	movs	r3, #2
 8014d16:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	7c1b      	ldrb	r3, [r3, #16]
 8014d1c:	f107 0210 	add.w	r2, r7, #16
 8014d20:	4611      	mov	r1, r2
 8014d22:	4618      	mov	r0, r3
 8014d24:	f002 f82c 	bl	8016d80 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8014d28:	2301      	movs	r3, #1
 8014d2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8014d2e:	2321      	movs	r3, #33	; 0x21
 8014d30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8014d34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014d38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	7bdb      	ldrb	r3, [r3, #15]
 8014d40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	7c1b      	ldrb	r3, [r3, #16]
 8014d48:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014d4c:	4611      	mov	r1, r2
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f001 ffed 	bl	8016d2e <RegionGetPhyParam>
 8014d54:	4603      	mov	r3, r0
 8014d56:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8014d58:	6a3b      	ldr	r3, [r7, #32]
 8014d5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8014d64:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014d6c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014d74:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8014d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	3730      	adds	r7, #48	; 0x30
 8014d7e:	46bd      	mov	sp, r7
 8014d80:	bd80      	pop	{r7, pc}

08014d82 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8014d82:	b480      	push	{r7}
 8014d84:	b085      	sub	sp, #20
 8014d86:	af00      	add	r7, sp, #0
 8014d88:	60f8      	str	r0, [r7, #12]
 8014d8a:	60b9      	str	r1, [r7, #8]
 8014d8c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014d8e:	bf00      	nop
 8014d90:	3714      	adds	r7, #20
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bc80      	pop	{r7}
 8014d96:	4770      	bx	lr

08014d98 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b083      	sub	sp, #12
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	4603      	mov	r3, r0
 8014da0:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014da2:	bf00      	nop
 8014da4:	370c      	adds	r7, #12
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bc80      	pop	{r7}
 8014daa:	4770      	bx	lr

08014dac <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8014dac:	b480      	push	{r7}
 8014dae:	b083      	sub	sp, #12
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	4603      	mov	r3, r0
 8014db4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014db6:	bf00      	nop
 8014db8:	370c      	adds	r7, #12
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bc80      	pop	{r7}
 8014dbe:	4770      	bx	lr

08014dc0 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014dca:	bf00      	nop
 8014dcc:	370c      	adds	r7, #12
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bc80      	pop	{r7}
 8014dd2:	4770      	bx	lr

08014dd4 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8014dd4:	b480      	push	{r7}
 8014dd6:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8014dd8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bc80      	pop	{r7}
 8014de0:	4770      	bx	lr

08014de2 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8014de2:	b480      	push	{r7}
 8014de4:	b083      	sub	sp, #12
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014dea:	bf00      	nop
 8014dec:	370c      	adds	r7, #12
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bc80      	pop	{r7}
 8014df2:	4770      	bx	lr

08014df4 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8014df4:	b480      	push	{r7}
 8014df6:	b083      	sub	sp, #12
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014dfc:	bf00      	nop
 8014dfe:	370c      	adds	r7, #12
 8014e00:	46bd      	mov	sp, r7
 8014e02:	bc80      	pop	{r7}
 8014e04:	4770      	bx	lr

08014e06 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8014e06:	b480      	push	{r7}
 8014e08:	b083      	sub	sp, #12
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e0e:	bf00      	nop
 8014e10:	370c      	adds	r7, #12
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bc80      	pop	{r7}
 8014e16:	4770      	bx	lr

08014e18 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	6078      	str	r0, [r7, #4]
 8014e20:	460b      	mov	r3, r1
 8014e22:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8014e24:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	370c      	adds	r7, #12
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bc80      	pop	{r7}
 8014e2e:	4770      	bx	lr

08014e30 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8014e30:	b480      	push	{r7}
 8014e32:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014e34:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bc80      	pop	{r7}
 8014e3c:	4770      	bx	lr

08014e3e <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8014e3e:	b480      	push	{r7}
 8014e40:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014e42:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	46bd      	mov	sp, r7
 8014e48:	bc80      	pop	{r7}
 8014e4a:	4770      	bx	lr

08014e4c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014e50:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bc80      	pop	{r7}
 8014e58:	4770      	bx	lr

08014e5a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8014e5a:	b480      	push	{r7}
 8014e5c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8014e5e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e60:	4618      	mov	r0, r3
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bc80      	pop	{r7}
 8014e66:	4770      	bx	lr

08014e68 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8014e68:	b480      	push	{r7}
 8014e6a:	b083      	sub	sp, #12
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	4603      	mov	r3, r0
 8014e70:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e72:	bf00      	nop
 8014e74:	370c      	adds	r7, #12
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bc80      	pop	{r7}
 8014e7a:	4770      	bx	lr

08014e7c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e80:	bf00      	nop
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bc80      	pop	{r7}
 8014e86:	4770      	bx	lr

08014e88 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8014e88:	b480      	push	{r7}
 8014e8a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014e8c:	bf00      	nop
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bc80      	pop	{r7}
 8014e92:	4770      	bx	lr

08014e94 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8014e94:	b480      	push	{r7}
 8014e96:	b083      	sub	sp, #12
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014e9e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	370c      	adds	r7, #12
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bc80      	pop	{r7}
 8014ea8:	4770      	bx	lr

08014eaa <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8014eaa:	b480      	push	{r7}
 8014eac:	b083      	sub	sp, #12
 8014eae:	af00      	add	r7, sp, #0
 8014eb0:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014eb2:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014eb4:	4618      	mov	r0, r3
 8014eb6:	370c      	adds	r7, #12
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bc80      	pop	{r7}
 8014ebc:	4770      	bx	lr

08014ebe <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8014ebe:	b480      	push	{r7}
 8014ec0:	b083      	sub	sp, #12
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8014ec6:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	370c      	adds	r7, #12
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bc80      	pop	{r7}
 8014ed0:	4770      	bx	lr

08014ed2 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8014ed2:	b480      	push	{r7}
 8014ed4:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014ed6:	bf00      	nop
 8014ed8:	46bd      	mov	sp, r7
 8014eda:	bc80      	pop	{r7}
 8014edc:	4770      	bx	lr

08014ede <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8014ede:	b480      	push	{r7}
 8014ee0:	b083      	sub	sp, #12
 8014ee2:	af00      	add	r7, sp, #0
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	6039      	str	r1, [r7, #0]
 8014ee8:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8014eea:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014eec:	4618      	mov	r0, r3
 8014eee:	370c      	adds	r7, #12
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bc80      	pop	{r7}
 8014ef4:	4770      	bx	lr

08014ef6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8014ef6:	b480      	push	{r7}
 8014ef8:	b083      	sub	sp, #12
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	4603      	mov	r3, r0
 8014efe:	603a      	str	r2, [r7, #0]
 8014f00:	80fb      	strh	r3, [r7, #6]
 8014f02:	460b      	mov	r3, r1
 8014f04:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f06:	bf00      	nop
 8014f08:	370c      	adds	r7, #12
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bc80      	pop	{r7}
 8014f0e:	4770      	bx	lr

08014f10 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8014f10:	b480      	push	{r7}
 8014f12:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f14:	bf00      	nop
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bc80      	pop	{r7}
 8014f1a:	4770      	bx	lr

08014f1c <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8014f1c:	b480      	push	{r7}
 8014f1e:	b083      	sub	sp, #12
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8014f24:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	370c      	adds	r7, #12
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bc80      	pop	{r7}
 8014f2e:	4770      	bx	lr

08014f30 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8014f30:	b480      	push	{r7}
 8014f32:	b083      	sub	sp, #12
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8014f38:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	370c      	adds	r7, #12
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	bc80      	pop	{r7}
 8014f42:	4770      	bx	lr

08014f44 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8014f44:	b480      	push	{r7}
 8014f46:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f48:	bf00      	nop
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bc80      	pop	{r7}
 8014f4e:	4770      	bx	lr

08014f50 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8014f50:	b480      	push	{r7}
 8014f52:	b083      	sub	sp, #12
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	460b      	mov	r3, r1
 8014f5a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f5c:	bf00      	nop
 8014f5e:	370c      	adds	r7, #12
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bc80      	pop	{r7}
 8014f64:	4770      	bx	lr

08014f66 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8014f66:	b480      	push	{r7}
 8014f68:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8014f6a:	bf00      	nop
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bc80      	pop	{r7}
 8014f70:	4770      	bx	lr

08014f72 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8014f72:	b480      	push	{r7}
 8014f74:	b085      	sub	sp, #20
 8014f76:	af00      	add	r7, sp, #0
 8014f78:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014f7e:	2300      	movs	r3, #0
 8014f80:	81fb      	strh	r3, [r7, #14]
 8014f82:	e00a      	b.n	8014f9a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8014f84:	89fb      	ldrh	r3, [r7, #14]
 8014f86:	68ba      	ldr	r2, [r7, #8]
 8014f88:	4413      	add	r3, r2
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d001      	beq.n	8014f94 <IsSlotFree+0x22>
        {
            return false;
 8014f90:	2300      	movs	r3, #0
 8014f92:	e006      	b.n	8014fa2 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8014f94:	89fb      	ldrh	r3, [r7, #14]
 8014f96:	3301      	adds	r3, #1
 8014f98:	81fb      	strh	r3, [r7, #14]
 8014f9a:	89fb      	ldrh	r3, [r7, #14]
 8014f9c:	2b0f      	cmp	r3, #15
 8014f9e:	d9f1      	bls.n	8014f84 <IsSlotFree+0x12>
        }
    }
    return true;
 8014fa0:	2301      	movs	r3, #1
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3714      	adds	r7, #20
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bc80      	pop	{r7}
 8014faa:	4770      	bx	lr

08014fac <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b082      	sub	sp, #8
 8014fb0:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014fb6:	e007      	b.n	8014fc8 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8014fb8:	79fb      	ldrb	r3, [r7, #7]
 8014fba:	3301      	adds	r3, #1
 8014fbc:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8014fbe:	79fb      	ldrb	r3, [r7, #7]
 8014fc0:	2b20      	cmp	r3, #32
 8014fc2:	d101      	bne.n	8014fc8 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	e012      	b.n	8014fee <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8014fc8:	79fb      	ldrb	r3, [r7, #7]
 8014fca:	011b      	lsls	r3, r3, #4
 8014fcc:	3308      	adds	r3, #8
 8014fce:	4a0a      	ldr	r2, [pc, #40]	; (8014ff8 <MallocNewMacCommandSlot+0x4c>)
 8014fd0:	4413      	add	r3, r2
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f7ff ffcd 	bl	8014f72 <IsSlotFree>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	f083 0301 	eor.w	r3, r3, #1
 8014fde:	b2db      	uxtb	r3, r3
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d1e9      	bne.n	8014fb8 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8014fe4:	79fb      	ldrb	r3, [r7, #7]
 8014fe6:	011b      	lsls	r3, r3, #4
 8014fe8:	3308      	adds	r3, #8
 8014fea:	4a03      	ldr	r2, [pc, #12]	; (8014ff8 <MallocNewMacCommandSlot+0x4c>)
 8014fec:	4413      	add	r3, r2
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3708      	adds	r7, #8
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	20001830 	.word	0x20001830

08014ffc <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2b00      	cmp	r3, #0
 8015008:	d101      	bne.n	801500e <FreeMacCommandSlot+0x12>
    {
        return false;
 801500a:	2300      	movs	r3, #0
 801500c:	e005      	b.n	801501a <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801500e:	2210      	movs	r2, #16
 8015010:	2100      	movs	r1, #0
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f004 fa7e 	bl	8019514 <memset1>

    return true;
 8015018:	2301      	movs	r3, #1
}
 801501a:	4618      	mov	r0, r3
 801501c:	3708      	adds	r7, #8
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}

08015022 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015022:	b480      	push	{r7}
 8015024:	b083      	sub	sp, #12
 8015026:	af00      	add	r7, sp, #0
 8015028:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d101      	bne.n	8015034 <LinkedListInit+0x12>
    {
        return false;
 8015030:	2300      	movs	r3, #0
 8015032:	e006      	b.n	8015042 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2200      	movs	r2, #0
 8015038:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	605a      	str	r2, [r3, #4]

    return true;
 8015040:	2301      	movs	r3, #1
}
 8015042:	4618      	mov	r0, r3
 8015044:	370c      	adds	r7, #12
 8015046:	46bd      	mov	sp, r7
 8015048:	bc80      	pop	{r7}
 801504a:	4770      	bx	lr

0801504c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 801504c:	b480      	push	{r7}
 801504e:	b083      	sub	sp, #12
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d002      	beq.n	8015062 <LinkedListAdd+0x16>
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d101      	bne.n	8015066 <LinkedListAdd+0x1a>
    {
        return false;
 8015062:	2300      	movs	r3, #0
 8015064:	e015      	b.n	8015092 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d102      	bne.n	8015074 <LinkedListAdd+0x28>
    {
        list->First = element;
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	683a      	ldr	r2, [r7, #0]
 8015072:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d003      	beq.n	8015084 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	683a      	ldr	r2, [r7, #0]
 8015082:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	2200      	movs	r2, #0
 8015088:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	683a      	ldr	r2, [r7, #0]
 801508e:	605a      	str	r2, [r3, #4]

    return true;
 8015090:	2301      	movs	r3, #1
}
 8015092:	4618      	mov	r0, r3
 8015094:	370c      	adds	r7, #12
 8015096:	46bd      	mov	sp, r7
 8015098:	bc80      	pop	{r7}
 801509a:	4770      	bx	lr

0801509c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801509c:	b480      	push	{r7}
 801509e:	b085      	sub	sp, #20
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d002      	beq.n	80150b2 <LinkedListGetPrevious+0x16>
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d101      	bne.n	80150b6 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 80150b2:	2300      	movs	r3, #0
 80150b4:	e016      	b.n	80150e4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80150bc:	683a      	ldr	r2, [r7, #0]
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	429a      	cmp	r2, r3
 80150c2:	d00c      	beq.n	80150de <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80150c4:	e002      	b.n	80150cc <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d007      	beq.n	80150e2 <LinkedListGetPrevious+0x46>
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	683a      	ldr	r2, [r7, #0]
 80150d8:	429a      	cmp	r2, r3
 80150da:	d1f4      	bne.n	80150c6 <LinkedListGetPrevious+0x2a>
 80150dc:	e001      	b.n	80150e2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 80150de:	2300      	movs	r3, #0
 80150e0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 80150e2:	68fb      	ldr	r3, [r7, #12]
}
 80150e4:	4618      	mov	r0, r3
 80150e6:	3714      	adds	r7, #20
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bc80      	pop	{r7}
 80150ec:	4770      	bx	lr

080150ee <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 80150ee:	b580      	push	{r7, lr}
 80150f0:	b084      	sub	sp, #16
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
 80150f6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d002      	beq.n	8015104 <LinkedListRemove+0x16>
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d101      	bne.n	8015108 <LinkedListRemove+0x1a>
    {
        return false;
 8015104:	2300      	movs	r3, #0
 8015106:	e020      	b.n	801514a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015108:	6839      	ldr	r1, [r7, #0]
 801510a:	6878      	ldr	r0, [r7, #4]
 801510c:	f7ff ffc6 	bl	801509c <LinkedListGetPrevious>
 8015110:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	683a      	ldr	r2, [r7, #0]
 8015118:	429a      	cmp	r2, r3
 801511a:	d103      	bne.n	8015124 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	681a      	ldr	r2, [r3, #0]
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	683a      	ldr	r2, [r7, #0]
 801512a:	429a      	cmp	r2, r3
 801512c:	d102      	bne.n	8015134 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	68fa      	ldr	r2, [r7, #12]
 8015132:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d003      	beq.n	8015142 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 801513a:	683b      	ldr	r3, [r7, #0]
 801513c:	681a      	ldr	r2, [r3, #0]
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	2200      	movs	r2, #0
 8015146:	601a      	str	r2, [r3, #0]

    return true;
 8015148:	2301      	movs	r3, #1
}
 801514a:	4618      	mov	r0, r3
 801514c:	3710      	adds	r7, #16
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}
	...

08015154 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	4603      	mov	r3, r0
 801515c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 801515e:	79fb      	ldrb	r3, [r7, #7]
 8015160:	2b11      	cmp	r3, #17
 8015162:	bf8c      	ite	hi
 8015164:	2201      	movhi	r2, #1
 8015166:	2200      	movls	r2, #0
 8015168:	b2d2      	uxtb	r2, r2
 801516a:	2a00      	cmp	r2, #0
 801516c:	d10d      	bne.n	801518a <IsSticky+0x36>
 801516e:	4a0a      	ldr	r2, [pc, #40]	; (8015198 <IsSticky+0x44>)
 8015170:	fa22 f303 	lsr.w	r3, r2, r3
 8015174:	f003 0301 	and.w	r3, r3, #1
 8015178:	2b00      	cmp	r3, #0
 801517a:	bf14      	ite	ne
 801517c:	2301      	movne	r3, #1
 801517e:	2300      	moveq	r3, #0
 8015180:	b2db      	uxtb	r3, r3
 8015182:	2b00      	cmp	r3, #0
 8015184:	d001      	beq.n	801518a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015186:	2301      	movs	r3, #1
 8015188:	e000      	b.n	801518c <IsSticky+0x38>
        default:
            return false;
 801518a:	2300      	movs	r3, #0
    }
}
 801518c:	4618      	mov	r0, r3
 801518e:	370c      	adds	r7, #12
 8015190:	46bd      	mov	sp, r7
 8015192:	bc80      	pop	{r7}
 8015194:	4770      	bx	lr
 8015196:	bf00      	nop
 8015198:	00020720 	.word	0x00020720

0801519c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 801519c:	b480      	push	{r7}
 801519e:	b083      	sub	sp, #12
 80151a0:	af00      	add	r7, sp, #0
 80151a2:	4603      	mov	r3, r0
 80151a4:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 80151a6:	2300      	movs	r3, #0
    }
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	370c      	adds	r7, #12
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bc80      	pop	{r7}
 80151b0:	4770      	bx	lr
	...

080151b4 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80151b8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80151bc:	2100      	movs	r1, #0
 80151be:	4804      	ldr	r0, [pc, #16]	; (80151d0 <LoRaMacCommandsInit+0x1c>)
 80151c0:	f004 f9a8 	bl	8019514 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 80151c4:	4802      	ldr	r0, [pc, #8]	; (80151d0 <LoRaMacCommandsInit+0x1c>)
 80151c6:	f7ff ff2c 	bl	8015022 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 80151ca:	2300      	movs	r3, #0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	bd80      	pop	{r7, pc}
 80151d0:	20001830 	.word	0x20001830

080151d4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	4603      	mov	r3, r0
 80151dc:	60b9      	str	r1, [r7, #8]
 80151de:	607a      	str	r2, [r7, #4]
 80151e0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 80151e2:	68bb      	ldr	r3, [r7, #8]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d101      	bne.n	80151ec <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80151e8:	2301      	movs	r3, #1
 80151ea:	e03b      	b.n	8015264 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80151ec:	f7ff fede 	bl	8014fac <MallocNewMacCommandSlot>
 80151f0:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 80151f2:	697b      	ldr	r3, [r7, #20]
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d101      	bne.n	80151fc <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80151f8:	2302      	movs	r3, #2
 80151fa:	e033      	b.n	8015264 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80151fc:	6979      	ldr	r1, [r7, #20]
 80151fe:	481b      	ldr	r0, [pc, #108]	; (801526c <LoRaMacCommandsAddCmd+0x98>)
 8015200:	f7ff ff24 	bl	801504c <LinkedListAdd>
 8015204:	4603      	mov	r3, r0
 8015206:	f083 0301 	eor.w	r3, r3, #1
 801520a:	b2db      	uxtb	r3, r3
 801520c:	2b00      	cmp	r3, #0
 801520e:	d001      	beq.n	8015214 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015210:	2305      	movs	r3, #5
 8015212:	e027      	b.n	8015264 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	7bfa      	ldrb	r2, [r7, #15]
 8015218:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 801521a:	697b      	ldr	r3, [r7, #20]
 801521c:	687a      	ldr	r2, [r7, #4]
 801521e:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	3305      	adds	r3, #5
 8015224:	687a      	ldr	r2, [r7, #4]
 8015226:	b292      	uxth	r2, r2
 8015228:	68b9      	ldr	r1, [r7, #8]
 801522a:	4618      	mov	r0, r3
 801522c:	f004 f937 	bl	801949e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015230:	7bfb      	ldrb	r3, [r7, #15]
 8015232:	4618      	mov	r0, r3
 8015234:	f7ff ff8e 	bl	8015154 <IsSticky>
 8015238:	4603      	mov	r3, r0
 801523a:	461a      	mov	r2, r3
 801523c:	697b      	ldr	r3, [r7, #20]
 801523e:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015240:	7bfb      	ldrb	r3, [r7, #15]
 8015242:	4618      	mov	r0, r3
 8015244:	f7ff ffaa 	bl	801519c <IsConfirmationRequired>
 8015248:	4603      	mov	r3, r0
 801524a:	461a      	mov	r2, r3
 801524c:	697b      	ldr	r3, [r7, #20]
 801524e:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015250:	4b06      	ldr	r3, [pc, #24]	; (801526c <LoRaMacCommandsAddCmd+0x98>)
 8015252:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	4413      	add	r3, r2
 801525a:	3301      	adds	r3, #1
 801525c:	4a03      	ldr	r2, [pc, #12]	; (801526c <LoRaMacCommandsAddCmd+0x98>)
 801525e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8015262:	2300      	movs	r3, #0
}
 8015264:	4618      	mov	r0, r3
 8015266:	3718      	adds	r7, #24
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}
 801526c:	20001830 	.word	0x20001830

08015270 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
 8015276:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d101      	bne.n	8015282 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801527e:	2301      	movs	r3, #1
 8015280:	e021      	b.n	80152c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015282:	6879      	ldr	r1, [r7, #4]
 8015284:	4812      	ldr	r0, [pc, #72]	; (80152d0 <LoRaMacCommandsRemoveCmd+0x60>)
 8015286:	f7ff ff32 	bl	80150ee <LinkedListRemove>
 801528a:	4603      	mov	r3, r0
 801528c:	f083 0301 	eor.w	r3, r3, #1
 8015290:	b2db      	uxtb	r3, r3
 8015292:	2b00      	cmp	r3, #0
 8015294:	d001      	beq.n	801529a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015296:	2303      	movs	r3, #3
 8015298:	e015      	b.n	80152c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801529a:	4b0d      	ldr	r3, [pc, #52]	; (80152d0 <LoRaMacCommandsRemoveCmd+0x60>)
 801529c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	689b      	ldr	r3, [r3, #8]
 80152a4:	1ad3      	subs	r3, r2, r3
 80152a6:	3b01      	subs	r3, #1
 80152a8:	4a09      	ldr	r2, [pc, #36]	; (80152d0 <LoRaMacCommandsRemoveCmd+0x60>)
 80152aa:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7ff fea4 	bl	8014ffc <FreeMacCommandSlot>
 80152b4:	4603      	mov	r3, r0
 80152b6:	f083 0301 	eor.w	r3, r3, #1
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d001      	beq.n	80152c4 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 80152c0:	2305      	movs	r3, #5
 80152c2:	e000      	b.n	80152c6 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80152c4:	2300      	movs	r3, #0
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3708      	adds	r7, #8
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}
 80152ce:	bf00      	nop
 80152d0:	20001830 	.word	0x20001830

080152d4 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
 80152da:	4603      	mov	r3, r0
 80152dc:	6039      	str	r1, [r7, #0]
 80152de:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80152e0:	4b0e      	ldr	r3, [pc, #56]	; (801531c <LoRaMacCommandsGetCmd+0x48>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80152e6:	e002      	b.n	80152ee <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d004      	beq.n	80152fe <LoRaMacCommandsGetCmd+0x2a>
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	791b      	ldrb	r3, [r3, #4]
 80152f8:	79fa      	ldrb	r2, [r7, #7]
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d1f4      	bne.n	80152e8 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80152fe:	683b      	ldr	r3, [r7, #0]
 8015300:	68fa      	ldr	r2, [r7, #12]
 8015302:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d101      	bne.n	801530e <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801530a:	2303      	movs	r3, #3
 801530c:	e000      	b.n	8015310 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 801530e:	2300      	movs	r3, #0
}
 8015310:	4618      	mov	r0, r3
 8015312:	3714      	adds	r7, #20
 8015314:	46bd      	mov	sp, r7
 8015316:	bc80      	pop	{r7}
 8015318:	4770      	bx	lr
 801531a:	bf00      	nop
 801531c:	20001830 	.word	0x20001830

08015320 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015326:	4b0f      	ldr	r3, [pc, #60]	; (8015364 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801532c:	e012      	b.n	8015354 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	7b1b      	ldrb	r3, [r3, #12]
 8015332:	f083 0301 	eor.w	r3, r3, #1
 8015336:	b2db      	uxtb	r3, r3
 8015338:	2b00      	cmp	r3, #0
 801533a:	d008      	beq.n	801534e <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f7ff ff94 	bl	8015270 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	607b      	str	r3, [r7, #4]
 801534c:	e002      	b.n	8015354 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d1e9      	bne.n	801532e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801535a:	2300      	movs	r3, #0
}
 801535c:	4618      	mov	r0, r3
 801535e:	3708      	adds	r7, #8
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}
 8015364:	20001830 	.word	0x20001830

08015368 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801536e:	4b13      	ldr	r3, [pc, #76]	; (80153bc <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015374:	e01a      	b.n	80153ac <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	791b      	ldrb	r3, [r3, #4]
 8015380:	4618      	mov	r0, r3
 8015382:	f7ff fee7 	bl	8015154 <IsSticky>
 8015386:	4603      	mov	r3, r0
 8015388:	2b00      	cmp	r3, #0
 801538a:	d00d      	beq.n	80153a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	791b      	ldrb	r3, [r3, #4]
 8015390:	4618      	mov	r0, r3
 8015392:	f7ff ff03 	bl	801519c <IsConfirmationRequired>
 8015396:	4603      	mov	r3, r0
 8015398:	f083 0301 	eor.w	r3, r3, #1
 801539c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d002      	beq.n	80153a8 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80153a2:	6878      	ldr	r0, [r7, #4]
 80153a4:	f7ff ff64 	bl	8015270 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d1e1      	bne.n	8015376 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80153b2:	2300      	movs	r3, #0
}
 80153b4:	4618      	mov	r0, r3
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	20001830 	.word	0x20001830

080153c0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80153c0:	b480      	push	{r7}
 80153c2:	b083      	sub	sp, #12
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d101      	bne.n	80153d2 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80153ce:	2301      	movs	r3, #1
 80153d0:	e005      	b.n	80153de <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80153d2:	4b05      	ldr	r3, [pc, #20]	; (80153e8 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80153d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80153dc:	2300      	movs	r3, #0
}
 80153de:	4618      	mov	r0, r3
 80153e0:	370c      	adds	r7, #12
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bc80      	pop	{r7}
 80153e6:	4770      	bx	lr
 80153e8:	20001830 	.word	0x20001830

080153ec <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b088      	sub	sp, #32
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	60f8      	str	r0, [r7, #12]
 80153f4:	60b9      	str	r1, [r7, #8]
 80153f6:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80153f8:	4b25      	ldr	r3, [pc, #148]	; (8015490 <LoRaMacCommandsSerializeCmds+0xa4>)
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80153fe:	2300      	movs	r3, #0
 8015400:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d002      	beq.n	801540e <LoRaMacCommandsSerializeCmds+0x22>
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d126      	bne.n	801545c <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801540e:	2301      	movs	r3, #1
 8015410:	e039      	b.n	8015486 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015412:	7efb      	ldrb	r3, [r7, #27]
 8015414:	68fa      	ldr	r2, [r7, #12]
 8015416:	1ad2      	subs	r2, r2, r3
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	689b      	ldr	r3, [r3, #8]
 801541c:	3301      	adds	r3, #1
 801541e:	429a      	cmp	r2, r3
 8015420:	d320      	bcc.n	8015464 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015422:	7efb      	ldrb	r3, [r7, #27]
 8015424:	1c5a      	adds	r2, r3, #1
 8015426:	76fa      	strb	r2, [r7, #27]
 8015428:	461a      	mov	r2, r3
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	4413      	add	r3, r2
 801542e:	69fa      	ldr	r2, [r7, #28]
 8015430:	7912      	ldrb	r2, [r2, #4]
 8015432:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015434:	7efb      	ldrb	r3, [r7, #27]
 8015436:	687a      	ldr	r2, [r7, #4]
 8015438:	18d0      	adds	r0, r2, r3
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	1d59      	adds	r1, r3, #5
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	689b      	ldr	r3, [r3, #8]
 8015442:	b29b      	uxth	r3, r3
 8015444:	461a      	mov	r2, r3
 8015446:	f004 f82a 	bl	801949e <memcpy1>
            itr += curElement->PayloadSize;
 801544a:	69fb      	ldr	r3, [r7, #28]
 801544c:	689b      	ldr	r3, [r3, #8]
 801544e:	b2da      	uxtb	r2, r3
 8015450:	7efb      	ldrb	r3, [r7, #27]
 8015452:	4413      	add	r3, r2
 8015454:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015456:	69fb      	ldr	r3, [r7, #28]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d1d7      	bne.n	8015412 <LoRaMacCommandsSerializeCmds+0x26>
 8015462:	e009      	b.n	8015478 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015464:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015466:	e007      	b.n	8015478 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801546e:	69f8      	ldr	r0, [r7, #28]
 8015470:	f7ff fefe 	bl	8015270 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d1f4      	bne.n	8015468 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801547e:	68b8      	ldr	r0, [r7, #8]
 8015480:	f7ff ff9e 	bl	80153c0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015484:	2300      	movs	r3, #0
}
 8015486:	4618      	mov	r0, r3
 8015488:	3720      	adds	r7, #32
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop
 8015490:	20001830 	.word	0x20001830

08015494 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015494:	b480      	push	{r7}
 8015496:	b085      	sub	sp, #20
 8015498:	af00      	add	r7, sp, #0
 801549a:	4603      	mov	r3, r0
 801549c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801549e:	2300      	movs	r3, #0
 80154a0:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 80154a2:	79fb      	ldrb	r3, [r7, #7]
 80154a4:	3b02      	subs	r3, #2
 80154a6:	2b11      	cmp	r3, #17
 80154a8:	d850      	bhi.n	801554c <LoRaMacCommandsGetCmdSize+0xb8>
 80154aa:	a201      	add	r2, pc, #4	; (adr r2, 80154b0 <LoRaMacCommandsGetCmdSize+0x1c>)
 80154ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154b0:	080154f9 	.word	0x080154f9
 80154b4:	080154ff 	.word	0x080154ff
 80154b8:	08015505 	.word	0x08015505
 80154bc:	0801550b 	.word	0x0801550b
 80154c0:	08015511 	.word	0x08015511
 80154c4:	08015517 	.word	0x08015517
 80154c8:	0801551d 	.word	0x0801551d
 80154cc:	08015523 	.word	0x08015523
 80154d0:	08015529 	.word	0x08015529
 80154d4:	0801554d 	.word	0x0801554d
 80154d8:	0801554d 	.word	0x0801554d
 80154dc:	0801552f 	.word	0x0801552f
 80154e0:	0801554d 	.word	0x0801554d
 80154e4:	0801554d 	.word	0x0801554d
 80154e8:	08015535 	.word	0x08015535
 80154ec:	0801553b 	.word	0x0801553b
 80154f0:	08015541 	.word	0x08015541
 80154f4:	08015547 	.word	0x08015547
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80154f8:	2303      	movs	r3, #3
 80154fa:	73fb      	strb	r3, [r7, #15]
            break;
 80154fc:	e027      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80154fe:	2305      	movs	r3, #5
 8015500:	73fb      	strb	r3, [r7, #15]
            break;
 8015502:	e024      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015504:	2302      	movs	r3, #2
 8015506:	73fb      	strb	r3, [r7, #15]
            break;
 8015508:	e021      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 801550a:	2305      	movs	r3, #5
 801550c:	73fb      	strb	r3, [r7, #15]
            break;
 801550e:	e01e      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015510:	2301      	movs	r3, #1
 8015512:	73fb      	strb	r3, [r7, #15]
            break;
 8015514:	e01b      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015516:	2306      	movs	r3, #6
 8015518:	73fb      	strb	r3, [r7, #15]
            break;
 801551a:	e018      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801551c:	2302      	movs	r3, #2
 801551e:	73fb      	strb	r3, [r7, #15]
            break;
 8015520:	e015      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015522:	2302      	movs	r3, #2
 8015524:	73fb      	strb	r3, [r7, #15]
            break;
 8015526:	e012      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015528:	2305      	movs	r3, #5
 801552a:	73fb      	strb	r3, [r7, #15]
            break;
 801552c:	e00f      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 801552e:	2306      	movs	r3, #6
 8015530:	73fb      	strb	r3, [r7, #15]
            break;
 8015532:	e00c      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015534:	2301      	movs	r3, #1
 8015536:	73fb      	strb	r3, [r7, #15]
            break;
 8015538:	e009      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 801553a:	2305      	movs	r3, #5
 801553c:	73fb      	strb	r3, [r7, #15]
            break;
 801553e:	e006      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015540:	2304      	movs	r3, #4
 8015542:	73fb      	strb	r3, [r7, #15]
            break;
 8015544:	e003      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015546:	2304      	movs	r3, #4
 8015548:	73fb      	strb	r3, [r7, #15]
            break;
 801554a:	e000      	b.n	801554e <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 801554c:	bf00      	nop
        }
    }
    return cidSize;
 801554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015550:	4618      	mov	r0, r3
 8015552:	3714      	adds	r7, #20
 8015554:	46bd      	mov	sp, r7
 8015556:	bc80      	pop	{r7}
 8015558:	4770      	bx	lr
 801555a:	bf00      	nop

0801555c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801555c:	b480      	push	{r7}
 801555e:	b083      	sub	sp, #12
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	4a07      	ldr	r2, [pc, #28]	; (8015584 <IncreaseBufferPointer+0x28>)
 8015568:	4293      	cmp	r3, r2
 801556a:	d102      	bne.n	8015572 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801556c:	4b06      	ldr	r3, [pc, #24]	; (8015588 <IncreaseBufferPointer+0x2c>)
 801556e:	607b      	str	r3, [r7, #4]
 8015570:	e002      	b.n	8015578 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	3304      	adds	r3, #4
 8015576:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015578:	687b      	ldr	r3, [r7, #4]
}
 801557a:	4618      	mov	r0, r3
 801557c:	370c      	adds	r7, #12
 801557e:	46bd      	mov	sp, r7
 8015580:	bc80      	pop	{r7}
 8015582:	4770      	bx	lr
 8015584:	20001a58 	.word	0x20001a58
 8015588:	20001a48 	.word	0x20001a48

0801558c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801558c:	b480      	push	{r7}
 801558e:	b083      	sub	sp, #12
 8015590:	af00      	add	r7, sp, #0
 8015592:	4603      	mov	r3, r0
 8015594:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015596:	79fb      	ldrb	r3, [r7, #7]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d101      	bne.n	80155a0 <IsListEmpty+0x14>
    {
        return true;
 801559c:	2301      	movs	r3, #1
 801559e:	e000      	b.n	80155a2 <IsListEmpty+0x16>
    }
    return false;
 80155a0:	2300      	movs	r3, #0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	370c      	adds	r7, #12
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bc80      	pop	{r7}
 80155aa:	4770      	bx	lr

080155ac <IsListFull>:

static bool IsListFull( uint8_t count )
{
 80155ac:	b480      	push	{r7}
 80155ae:	b083      	sub	sp, #12
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	4603      	mov	r3, r0
 80155b4:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80155b6:	79fb      	ldrb	r3, [r7, #7]
 80155b8:	2b04      	cmp	r3, #4
 80155ba:	d901      	bls.n	80155c0 <IsListFull+0x14>
    {
        return true;
 80155bc:	2301      	movs	r3, #1
 80155be:	e000      	b.n	80155c2 <IsListFull+0x16>
    }
    return false;
 80155c0:	2300      	movs	r3, #0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	370c      	adds	r7, #12
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bc80      	pop	{r7}
 80155ca:	4770      	bx	lr

080155cc <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b086      	sub	sp, #24
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	4603      	mov	r3, r0
 80155d4:	60b9      	str	r1, [r7, #8]
 80155d6:	607a      	str	r2, [r7, #4]
 80155d8:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80155de:	4b13      	ldr	r3, [pc, #76]	; (801562c <GetElement+0x60>)
 80155e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80155e4:	4618      	mov	r0, r3
 80155e6:	f7ff ffd1 	bl	801558c <IsListEmpty>
 80155ea:	4603      	mov	r3, r0
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d001      	beq.n	80155f4 <GetElement+0x28>
    {
        return NULL;
 80155f0:	2300      	movs	r3, #0
 80155f2:	e017      	b.n	8015624 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80155f4:	2300      	movs	r3, #0
 80155f6:	74fb      	strb	r3, [r7, #19]
 80155f8:	e00d      	b.n	8015616 <GetElement+0x4a>
    {
        if( element->Request == request )
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	781b      	ldrb	r3, [r3, #0]
 80155fe:	7bfa      	ldrb	r2, [r7, #15]
 8015600:	429a      	cmp	r2, r3
 8015602:	d101      	bne.n	8015608 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	e00d      	b.n	8015624 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8015608:	6978      	ldr	r0, [r7, #20]
 801560a:	f7ff ffa7 	bl	801555c <IncreaseBufferPointer>
 801560e:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8015610:	7cfb      	ldrb	r3, [r7, #19]
 8015612:	3301      	adds	r3, #1
 8015614:	74fb      	strb	r3, [r7, #19]
 8015616:	4b05      	ldr	r3, [pc, #20]	; (801562c <GetElement+0x60>)
 8015618:	f893 3020 	ldrb.w	r3, [r3, #32]
 801561c:	7cfa      	ldrb	r2, [r7, #19]
 801561e:	429a      	cmp	r2, r3
 8015620:	d3eb      	bcc.n	80155fa <GetElement+0x2e>
    }

    return NULL;
 8015622:	2300      	movs	r3, #0
}
 8015624:	4618      	mov	r0, r3
 8015626:	3718      	adds	r7, #24
 8015628:	46bd      	mov	sp, r7
 801562a:	bd80      	pop	{r7, pc}
 801562c:	20001a3c 	.word	0x20001a3c

08015630 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b082      	sub	sp, #8
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8015638:	4a0c      	ldr	r2, [pc, #48]	; (801566c <LoRaMacConfirmQueueInit+0x3c>)
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801563e:	4b0b      	ldr	r3, [pc, #44]	; (801566c <LoRaMacConfirmQueueInit+0x3c>)
 8015640:	2200      	movs	r2, #0
 8015642:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015646:	4b09      	ldr	r3, [pc, #36]	; (801566c <LoRaMacConfirmQueueInit+0x3c>)
 8015648:	4a09      	ldr	r2, [pc, #36]	; (8015670 <LoRaMacConfirmQueueInit+0x40>)
 801564a:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801564c:	4b07      	ldr	r3, [pc, #28]	; (801566c <LoRaMacConfirmQueueInit+0x3c>)
 801564e:	4a08      	ldr	r2, [pc, #32]	; (8015670 <LoRaMacConfirmQueueInit+0x40>)
 8015650:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8015652:	2214      	movs	r2, #20
 8015654:	21ff      	movs	r1, #255	; 0xff
 8015656:	4806      	ldr	r0, [pc, #24]	; (8015670 <LoRaMacConfirmQueueInit+0x40>)
 8015658:	f003 ff5c 	bl	8019514 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801565c:	4b03      	ldr	r3, [pc, #12]	; (801566c <LoRaMacConfirmQueueInit+0x3c>)
 801565e:	2201      	movs	r2, #1
 8015660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8015664:	bf00      	nop
 8015666:	3708      	adds	r7, #8
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}
 801566c:	20001a3c 	.word	0x20001a3c
 8015670:	20001a48 	.word	0x20001a48

08015674 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801567c:	4b19      	ldr	r3, [pc, #100]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 801567e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015682:	4618      	mov	r0, r3
 8015684:	f7ff ff92 	bl	80155ac <IsListFull>
 8015688:	4603      	mov	r3, r0
 801568a:	2b00      	cmp	r3, #0
 801568c:	d001      	beq.n	8015692 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801568e:	2300      	movs	r3, #0
 8015690:	e024      	b.n	80156dc <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8015692:	4b14      	ldr	r3, [pc, #80]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 8015694:	689b      	ldr	r3, [r3, #8]
 8015696:	687a      	ldr	r2, [r7, #4]
 8015698:	7812      	ldrb	r2, [r2, #0]
 801569a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801569c:	4b11      	ldr	r3, [pc, #68]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 801569e:	689b      	ldr	r3, [r3, #8]
 80156a0:	687a      	ldr	r2, [r7, #4]
 80156a2:	7852      	ldrb	r2, [r2, #1]
 80156a4:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80156a6:	4b0f      	ldr	r3, [pc, #60]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 80156a8:	689b      	ldr	r3, [r3, #8]
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	78d2      	ldrb	r2, [r2, #3]
 80156ae:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80156b0:	4b0c      	ldr	r3, [pc, #48]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 80156b2:	689b      	ldr	r3, [r3, #8]
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	7892      	ldrb	r2, [r2, #2]
 80156b8:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80156ba:	4b0a      	ldr	r3, [pc, #40]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 80156bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80156c0:	3301      	adds	r3, #1
 80156c2:	b2da      	uxtb	r2, r3
 80156c4:	4b07      	ldr	r3, [pc, #28]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 80156c6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80156ca:	4b06      	ldr	r3, [pc, #24]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 80156cc:	689b      	ldr	r3, [r3, #8]
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7ff ff44 	bl	801555c <IncreaseBufferPointer>
 80156d4:	4603      	mov	r3, r0
 80156d6:	4a03      	ldr	r2, [pc, #12]	; (80156e4 <LoRaMacConfirmQueueAdd+0x70>)
 80156d8:	6093      	str	r3, [r2, #8]

    return true;
 80156da:	2301      	movs	r3, #1
}
 80156dc:	4618      	mov	r0, r3
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}
 80156e4:	20001a3c 	.word	0x20001a3c

080156e8 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80156ec:	4b0e      	ldr	r3, [pc, #56]	; (8015728 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80156ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7ff ff4a 	bl	801558c <IsListEmpty>
 80156f8:	4603      	mov	r3, r0
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d001      	beq.n	8015702 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80156fe:	2300      	movs	r3, #0
 8015700:	e010      	b.n	8015724 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8015702:	4b09      	ldr	r3, [pc, #36]	; (8015728 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015708:	3b01      	subs	r3, #1
 801570a:	b2da      	uxtb	r2, r3
 801570c:	4b06      	ldr	r3, [pc, #24]	; (8015728 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801570e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8015712:	4b05      	ldr	r3, [pc, #20]	; (8015728 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015714:	685b      	ldr	r3, [r3, #4]
 8015716:	4618      	mov	r0, r3
 8015718:	f7ff ff20 	bl	801555c <IncreaseBufferPointer>
 801571c:	4603      	mov	r3, r0
 801571e:	4a02      	ldr	r2, [pc, #8]	; (8015728 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8015720:	6053      	str	r3, [r2, #4]

    return true;
 8015722:	2301      	movs	r3, #1
}
 8015724:	4618      	mov	r0, r3
 8015726:	bd80      	pop	{r7, pc}
 8015728:	20001a3c 	.word	0x20001a3c

0801572c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801572c:	b580      	push	{r7, lr}
 801572e:	b084      	sub	sp, #16
 8015730:	af00      	add	r7, sp, #0
 8015732:	4603      	mov	r3, r0
 8015734:	460a      	mov	r2, r1
 8015736:	71fb      	strb	r3, [r7, #7]
 8015738:	4613      	mov	r3, r2
 801573a:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 801573c:	2300      	movs	r3, #0
 801573e:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015740:	4b10      	ldr	r3, [pc, #64]	; (8015784 <LoRaMacConfirmQueueSetStatus+0x58>)
 8015742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015746:	4618      	mov	r0, r3
 8015748:	f7ff ff20 	bl	801558c <IsListEmpty>
 801574c:	4603      	mov	r3, r0
 801574e:	f083 0301 	eor.w	r3, r3, #1
 8015752:	b2db      	uxtb	r3, r3
 8015754:	2b00      	cmp	r3, #0
 8015756:	d011      	beq.n	801577c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8015758:	4b0a      	ldr	r3, [pc, #40]	; (8015784 <LoRaMacConfirmQueueSetStatus+0x58>)
 801575a:	6859      	ldr	r1, [r3, #4]
 801575c:	4b09      	ldr	r3, [pc, #36]	; (8015784 <LoRaMacConfirmQueueSetStatus+0x58>)
 801575e:	689a      	ldr	r2, [r3, #8]
 8015760:	79bb      	ldrb	r3, [r7, #6]
 8015762:	4618      	mov	r0, r3
 8015764:	f7ff ff32 	bl	80155cc <GetElement>
 8015768:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d005      	beq.n	801577c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	79fa      	ldrb	r2, [r7, #7]
 8015774:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	2201      	movs	r2, #1
 801577a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801577c:	bf00      	nop
 801577e:	3710      	adds	r7, #16
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}
 8015784:	20001a3c 	.word	0x20001a3c

08015788 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b084      	sub	sp, #16
 801578c:	af00      	add	r7, sp, #0
 801578e:	4603      	mov	r3, r0
 8015790:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8015792:	2300      	movs	r3, #0
 8015794:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8015796:	4b10      	ldr	r3, [pc, #64]	; (80157d8 <LoRaMacConfirmQueueGetStatus+0x50>)
 8015798:	f893 3020 	ldrb.w	r3, [r3, #32]
 801579c:	4618      	mov	r0, r3
 801579e:	f7ff fef5 	bl	801558c <IsListEmpty>
 80157a2:	4603      	mov	r3, r0
 80157a4:	f083 0301 	eor.w	r3, r3, #1
 80157a8:	b2db      	uxtb	r3, r3
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d00e      	beq.n	80157cc <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80157ae:	4b0a      	ldr	r3, [pc, #40]	; (80157d8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80157b0:	6859      	ldr	r1, [r3, #4]
 80157b2:	4b09      	ldr	r3, [pc, #36]	; (80157d8 <LoRaMacConfirmQueueGetStatus+0x50>)
 80157b4:	689a      	ldr	r2, [r3, #8]
 80157b6:	79fb      	ldrb	r3, [r7, #7]
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7ff ff07 	bl	80155cc <GetElement>
 80157be:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d002      	beq.n	80157cc <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	785b      	ldrb	r3, [r3, #1]
 80157ca:	e000      	b.n	80157ce <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80157cc:	2301      	movs	r3, #1
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3710      	adds	r7, #16
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}
 80157d6:	bf00      	nop
 80157d8:	20001a3c 	.word	0x20001a3c

080157dc <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b084      	sub	sp, #16
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	4603      	mov	r3, r0
 80157e4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80157e6:	4b16      	ldr	r3, [pc, #88]	; (8015840 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80157ec:	4a14      	ldr	r2, [pc, #80]	; (8015840 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80157ee:	79fb      	ldrb	r3, [r7, #7]
 80157f0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80157f4:	4b12      	ldr	r3, [pc, #72]	; (8015840 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80157f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7ff fec6 	bl	801558c <IsListEmpty>
 8015800:	4603      	mov	r3, r0
 8015802:	f083 0301 	eor.w	r3, r3, #1
 8015806:	b2db      	uxtb	r3, r3
 8015808:	2b00      	cmp	r3, #0
 801580a:	d015      	beq.n	8015838 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	79fa      	ldrb	r2, [r7, #7]
 8015810:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	78db      	ldrb	r3, [r3, #3]
 8015816:	f083 0301 	eor.w	r3, r3, #1
 801581a:	b2db      	uxtb	r3, r3
 801581c:	2b00      	cmp	r3, #0
 801581e:	d002      	beq.n	8015826 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	2201      	movs	r2, #1
 8015824:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8015826:	68f8      	ldr	r0, [r7, #12]
 8015828:	f7ff fe98 	bl	801555c <IncreaseBufferPointer>
 801582c:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801582e:	4b04      	ldr	r3, [pc, #16]	; (8015840 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8015830:	689b      	ldr	r3, [r3, #8]
 8015832:	68fa      	ldr	r2, [r7, #12]
 8015834:	429a      	cmp	r2, r3
 8015836:	d1e9      	bne.n	801580c <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8015838:	bf00      	nop
 801583a:	3710      	adds	r7, #16
 801583c:	46bd      	mov	sp, r7
 801583e:	bd80      	pop	{r7, pc}
 8015840:	20001a3c 	.word	0x20001a3c

08015844 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	4603      	mov	r3, r0
 801584c:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801584e:	4b09      	ldr	r3, [pc, #36]	; (8015874 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015850:	6859      	ldr	r1, [r3, #4]
 8015852:	4b08      	ldr	r3, [pc, #32]	; (8015874 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8015854:	689a      	ldr	r2, [r3, #8]
 8015856:	79fb      	ldrb	r3, [r7, #7]
 8015858:	4618      	mov	r0, r3
 801585a:	f7ff feb7 	bl	80155cc <GetElement>
 801585e:	4603      	mov	r3, r0
 8015860:	2b00      	cmp	r3, #0
 8015862:	d001      	beq.n	8015868 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8015864:	2301      	movs	r3, #1
 8015866:	e000      	b.n	801586a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8015868:	2300      	movs	r3, #0
}
 801586a:	4618      	mov	r0, r3
 801586c:	3708      	adds	r7, #8
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
 8015872:	bf00      	nop
 8015874:	20001a3c 	.word	0x20001a3c

08015878 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b084      	sub	sp, #16
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015880:	4b25      	ldr	r3, [pc, #148]	; (8015918 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8015882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015886:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8015888:	2300      	movs	r3, #0
 801588a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801588c:	f107 0308 	add.w	r3, r7, #8
 8015890:	2204      	movs	r2, #4
 8015892:	2100      	movs	r1, #0
 8015894:	4618      	mov	r0, r3
 8015896:	f003 fe3d 	bl	8019514 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801589a:	2300      	movs	r3, #0
 801589c:	73fb      	strb	r3, [r7, #15]
 801589e:	e032      	b.n	8015906 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80158a0:	4b1d      	ldr	r3, [pc, #116]	; (8015918 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	781a      	ldrb	r2, [r3, #0]
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80158aa:	4b1b      	ldr	r3, [pc, #108]	; (8015918 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	785a      	ldrb	r2, [r3, #1]
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80158b4:	4b18      	ldr	r3, [pc, #96]	; (8015918 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	789b      	ldrb	r3, [r3, #2]
 80158ba:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80158bc:	7b7b      	ldrb	r3, [r7, #13]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d005      	beq.n	80158ce <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80158c2:	4b15      	ldr	r3, [pc, #84]	; (8015918 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	689b      	ldr	r3, [r3, #8]
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	4798      	blx	r3
 80158cc:	e00b      	b.n	80158e6 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80158ce:	4b12      	ldr	r3, [pc, #72]	; (8015918 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80158d6:	4b10      	ldr	r3, [pc, #64]	; (8015918 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80158d8:	685b      	ldr	r3, [r3, #4]
 80158da:	785b      	ldrb	r3, [r3, #1]
 80158dc:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80158de:	4b0e      	ldr	r3, [pc, #56]	; (8015918 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	78db      	ldrb	r3, [r3, #3]
 80158e4:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80158e6:	f7ff feff 	bl	80156e8 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80158ea:	7b7b      	ldrb	r3, [r7, #13]
 80158ec:	f083 0301 	eor.w	r3, r3, #1
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d004      	beq.n	8015900 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80158f6:	f107 0308 	add.w	r3, r7, #8
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7ff feba 	bl	8015674 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8015900:	7bfb      	ldrb	r3, [r7, #15]
 8015902:	3301      	adds	r3, #1
 8015904:	73fb      	strb	r3, [r7, #15]
 8015906:	7bfa      	ldrb	r2, [r7, #15]
 8015908:	7bbb      	ldrb	r3, [r7, #14]
 801590a:	429a      	cmp	r2, r3
 801590c:	d3c8      	bcc.n	80158a0 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801590e:	bf00      	nop
 8015910:	bf00      	nop
 8015912:	3710      	adds	r7, #16
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	20001a3c 	.word	0x20001a3c

0801591c <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 801591c:	b480      	push	{r7}
 801591e:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8015920:	4b03      	ldr	r3, [pc, #12]	; (8015930 <LoRaMacConfirmQueueGetCnt+0x14>)
 8015922:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8015926:	4618      	mov	r0, r3
 8015928:	46bd      	mov	sp, r7
 801592a:	bc80      	pop	{r7}
 801592c:	4770      	bx	lr
 801592e:	bf00      	nop
 8015930:	20001a3c 	.word	0x20001a3c

08015934 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8015934:	b580      	push	{r7, lr}
 8015936:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8015938:	4b06      	ldr	r3, [pc, #24]	; (8015954 <LoRaMacConfirmQueueIsFull+0x20>)
 801593a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801593e:	4618      	mov	r0, r3
 8015940:	f7ff fe34 	bl	80155ac <IsListFull>
 8015944:	4603      	mov	r3, r0
 8015946:	2b00      	cmp	r3, #0
 8015948:	d001      	beq.n	801594e <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801594a:	2301      	movs	r3, #1
 801594c:	e000      	b.n	8015950 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801594e:	2300      	movs	r3, #0
    }
}
 8015950:	4618      	mov	r0, r3
 8015952:	bd80      	pop	{r7, pc}
 8015954:	20001a3c 	.word	0x20001a3c

08015958 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b08e      	sub	sp, #56	; 0x38
 801595c:	af00      	add	r7, sp, #0
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	607b      	str	r3, [r7, #4]
 8015962:	460b      	mov	r3, r1
 8015964:	817b      	strh	r3, [r7, #10]
 8015966:	4613      	mov	r3, r2
 8015968:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d101      	bne.n	8015974 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015970:	2309      	movs	r3, #9
 8015972:	e086      	b.n	8015a82 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8015974:	2300      	movs	r3, #0
 8015976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801597a:	2301      	movs	r3, #1
 801597c:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 801597e:	2300      	movs	r3, #0
 8015980:	623b      	str	r3, [r7, #32]
 8015982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015986:	2200      	movs	r2, #0
 8015988:	601a      	str	r2, [r3, #0]
 801598a:	605a      	str	r2, [r3, #4]
 801598c:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 801598e:	2300      	movs	r3, #0
 8015990:	613b      	str	r3, [r7, #16]
 8015992:	f107 0314 	add.w	r3, r7, #20
 8015996:	2200      	movs	r2, #0
 8015998:	601a      	str	r2, [r3, #0]
 801599a:	605a      	str	r2, [r3, #4]
 801599c:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 801599e:	2301      	movs	r3, #1
 80159a0:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80159a2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80159a6:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	b2db      	uxtb	r3, r3
 80159ac:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	0a1b      	lsrs	r3, r3, #8
 80159b2:	b2db      	uxtb	r3, r3
 80159b4:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	0c1b      	lsrs	r3, r3, #16
 80159ba:	b2db      	uxtb	r3, r3
 80159bc:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	0e1b      	lsrs	r3, r3, #24
 80159c2:	b2db      	uxtb	r3, r3
 80159c4:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80159c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80159cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159ce:	0a1b      	lsrs	r3, r3, #8
 80159d0:	b2db      	uxtb	r3, r3
 80159d2:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80159d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159d6:	0c1b      	lsrs	r3, r3, #16
 80159d8:	b2db      	uxtb	r3, r3
 80159da:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80159dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80159de:	0e1b      	lsrs	r3, r3, #24
 80159e0:	b2db      	uxtb	r3, r3
 80159e2:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80159e4:	e048      	b.n	8015a78 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 80159e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80159e8:	b2db      	uxtb	r3, r3
 80159ea:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80159ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80159ee:	3301      	adds	r3, #1
 80159f0:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80159f2:	f107 0320 	add.w	r3, r7, #32
 80159f6:	7a7a      	ldrb	r2, [r7, #9]
 80159f8:	f107 0010 	add.w	r0, r7, #16
 80159fc:	2110      	movs	r1, #16
 80159fe:	f7f8 fa79 	bl	800def4 <SecureElementAesEncrypt>
 8015a02:	4603      	mov	r3, r0
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d001      	beq.n	8015a0c <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015a08:	230e      	movs	r3, #14
 8015a0a:	e03a      	b.n	8015a82 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015a12:	e01e      	b.n	8015a52 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8015a14:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015a18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a1c:	4413      	add	r3, r2
 8015a1e:	461a      	mov	r2, r3
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	4413      	add	r3, r2
 8015a24:	7819      	ldrb	r1, [r3, #0]
 8015a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a2a:	3338      	adds	r3, #56	; 0x38
 8015a2c:	443b      	add	r3, r7
 8015a2e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8015a32:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8015a36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a3a:	4403      	add	r3, r0
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	4403      	add	r3, r0
 8015a42:	404a      	eors	r2, r1
 8015a44:	b2d2      	uxtb	r2, r2
 8015a46:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8015a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a4c:	3301      	adds	r3, #1
 8015a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8015a52:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a56:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8015a5a:	2a10      	cmp	r2, #16
 8015a5c:	bfa8      	it	ge
 8015a5e:	2210      	movge	r2, #16
 8015a60:	b212      	sxth	r2, r2
 8015a62:	4293      	cmp	r3, r2
 8015a64:	dbd6      	blt.n	8015a14 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8015a66:	897b      	ldrh	r3, [r7, #10]
 8015a68:	3b10      	subs	r3, #16
 8015a6a:	b29b      	uxth	r3, r3
 8015a6c:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8015a6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a72:	3310      	adds	r3, #16
 8015a74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8015a78:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	dcb2      	bgt.n	80159e6 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015a80:	2300      	movs	r3, #0
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3738      	adds	r7, #56	; 0x38
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}

08015a8a <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8015a8a:	b490      	push	{r4, r7}
 8015a8c:	b082      	sub	sp, #8
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	4604      	mov	r4, r0
 8015a92:	4608      	mov	r0, r1
 8015a94:	4611      	mov	r1, r2
 8015a96:	461a      	mov	r2, r3
 8015a98:	4623      	mov	r3, r4
 8015a9a:	80fb      	strh	r3, [r7, #6]
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	717b      	strb	r3, [r7, #5]
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	713b      	strb	r3, [r7, #4]
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8015aa8:	69bb      	ldr	r3, [r7, #24]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d101      	bne.n	8015ab2 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015aae:	2309      	movs	r3, #9
 8015ab0:	e04e      	b.n	8015b50 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	2249      	movs	r2, #73	; 0x49
 8015ab6:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8015ab8:	69bb      	ldr	r3, [r7, #24]
 8015aba:	3301      	adds	r3, #1
 8015abc:	2200      	movs	r2, #0
 8015abe:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8015ac0:	69bb      	ldr	r3, [r7, #24]
 8015ac2:	3302      	adds	r3, #2
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	3303      	adds	r3, #3
 8015acc:	2200      	movs	r2, #0
 8015ace:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8015ad0:	69bb      	ldr	r3, [r7, #24]
 8015ad2:	3304      	adds	r3, #4
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8015ad8:	69bb      	ldr	r3, [r7, #24]
 8015ada:	3305      	adds	r3, #5
 8015adc:	78fa      	ldrb	r2, [r7, #3]
 8015ade:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8015ae0:	69bb      	ldr	r3, [r7, #24]
 8015ae2:	3306      	adds	r3, #6
 8015ae4:	693a      	ldr	r2, [r7, #16]
 8015ae6:	b2d2      	uxtb	r2, r2
 8015ae8:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	0a1a      	lsrs	r2, r3, #8
 8015aee:	69bb      	ldr	r3, [r7, #24]
 8015af0:	3307      	adds	r3, #7
 8015af2:	b2d2      	uxtb	r2, r2
 8015af4:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8015af6:	693b      	ldr	r3, [r7, #16]
 8015af8:	0c1a      	lsrs	r2, r3, #16
 8015afa:	69bb      	ldr	r3, [r7, #24]
 8015afc:	3308      	adds	r3, #8
 8015afe:	b2d2      	uxtb	r2, r2
 8015b00:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	0e1a      	lsrs	r2, r3, #24
 8015b06:	69bb      	ldr	r3, [r7, #24]
 8015b08:	3309      	adds	r3, #9
 8015b0a:	b2d2      	uxtb	r2, r2
 8015b0c:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8015b0e:	69bb      	ldr	r3, [r7, #24]
 8015b10:	330a      	adds	r3, #10
 8015b12:	697a      	ldr	r2, [r7, #20]
 8015b14:	b2d2      	uxtb	r2, r2
 8015b16:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8015b18:	697b      	ldr	r3, [r7, #20]
 8015b1a:	0a1a      	lsrs	r2, r3, #8
 8015b1c:	69bb      	ldr	r3, [r7, #24]
 8015b1e:	330b      	adds	r3, #11
 8015b20:	b2d2      	uxtb	r2, r2
 8015b22:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	0c1a      	lsrs	r2, r3, #16
 8015b28:	69bb      	ldr	r3, [r7, #24]
 8015b2a:	330c      	adds	r3, #12
 8015b2c:	b2d2      	uxtb	r2, r2
 8015b2e:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8015b30:	697b      	ldr	r3, [r7, #20]
 8015b32:	0e1a      	lsrs	r2, r3, #24
 8015b34:	69bb      	ldr	r3, [r7, #24]
 8015b36:	330d      	adds	r3, #13
 8015b38:	b2d2      	uxtb	r2, r2
 8015b3a:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	330e      	adds	r3, #14
 8015b40:	2200      	movs	r2, #0
 8015b42:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8015b44:	69bb      	ldr	r3, [r7, #24]
 8015b46:	330f      	adds	r3, #15
 8015b48:	88fa      	ldrh	r2, [r7, #6]
 8015b4a:	b2d2      	uxtb	r2, r2
 8015b4c:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8015b4e:	2300      	movs	r3, #0
}
 8015b50:	4618      	mov	r0, r3
 8015b52:	3708      	adds	r7, #8
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bc90      	pop	{r4, r7}
 8015b58:	4770      	bx	lr

08015b5a <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8015b5a:	b590      	push	{r4, r7, lr}
 8015b5c:	b08b      	sub	sp, #44	; 0x2c
 8015b5e:	af04      	add	r7, sp, #16
 8015b60:	6078      	str	r0, [r7, #4]
 8015b62:	4608      	mov	r0, r1
 8015b64:	4611      	mov	r1, r2
 8015b66:	461a      	mov	r2, r3
 8015b68:	4603      	mov	r3, r0
 8015b6a:	807b      	strh	r3, [r7, #2]
 8015b6c:	460b      	mov	r3, r1
 8015b6e:	707b      	strb	r3, [r7, #1]
 8015b70:	4613      	mov	r3, r2
 8015b72:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d002      	beq.n	8015b80 <ComputeCmacB0+0x26>
 8015b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d101      	bne.n	8015b84 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015b80:	2309      	movs	r3, #9
 8015b82:	e024      	b.n	8015bce <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015b84:	887b      	ldrh	r3, [r7, #2]
 8015b86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015b8a:	d901      	bls.n	8015b90 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015b8c:	230d      	movs	r3, #13
 8015b8e:	e01e      	b.n	8015bce <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015b90:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8015b94:	783a      	ldrb	r2, [r7, #0]
 8015b96:	7879      	ldrb	r1, [r7, #1]
 8015b98:	8878      	ldrh	r0, [r7, #2]
 8015b9a:	f107 0308 	add.w	r3, r7, #8
 8015b9e:	9302      	str	r3, [sp, #8]
 8015ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba2:	9301      	str	r3, [sp, #4]
 8015ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ba6:	9300      	str	r3, [sp, #0]
 8015ba8:	4623      	mov	r3, r4
 8015baa:	f7ff ff6e 	bl	8015a8a <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8015bae:	887a      	ldrh	r2, [r7, #2]
 8015bb0:	7879      	ldrb	r1, [r7, #1]
 8015bb2:	f107 0008 	add.w	r0, r7, #8
 8015bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bb8:	9300      	str	r3, [sp, #0]
 8015bba:	460b      	mov	r3, r1
 8015bbc:	6879      	ldr	r1, [r7, #4]
 8015bbe:	f7f8 f953 	bl	800de68 <SecureElementComputeAesCmac>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d001      	beq.n	8015bcc <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015bc8:	230e      	movs	r3, #14
 8015bca:	e000      	b.n	8015bce <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015bcc:	2300      	movs	r3, #0
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	371c      	adds	r7, #28
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd90      	pop	{r4, r7, pc}

08015bd6 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8015bd6:	b590      	push	{r4, r7, lr}
 8015bd8:	b0cd      	sub	sp, #308	; 0x134
 8015bda:	af04      	add	r7, sp, #16
 8015bdc:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8015be0:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8015be4:	6020      	str	r0, [r4, #0]
 8015be6:	460c      	mov	r4, r1
 8015be8:	4610      	mov	r0, r2
 8015bea:	4619      	mov	r1, r3
 8015bec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015bf0:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015bf4:	4622      	mov	r2, r4
 8015bf6:	801a      	strh	r2, [r3, #0]
 8015bf8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015bfc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015c00:	4602      	mov	r2, r0
 8015c02:	701a      	strb	r2, [r3, #0]
 8015c04:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015c08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015c0c:	460a      	mov	r2, r1
 8015c0e:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8015c10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015c14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d101      	bne.n	8015c22 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015c1e:	2309      	movs	r3, #9
 8015c20:	e063      	b.n	8015cea <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8015c22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015c26:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015c2a:	881b      	ldrh	r3, [r3, #0]
 8015c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c30:	d901      	bls.n	8015c36 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8015c32:	230d      	movs	r3, #13
 8015c34:	e059      	b.n	8015cea <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8015c36:	f107 030c 	add.w	r3, r7, #12
 8015c3a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8015c3e:	2100      	movs	r1, #0
 8015c40:	4618      	mov	r0, r3
 8015c42:	f003 fc67 	bl	8019514 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8015c46:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8015c4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015c4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8015c52:	781a      	ldrb	r2, [r3, #0]
 8015c54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015c58:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015c5c:	7819      	ldrb	r1, [r3, #0]
 8015c5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015c62:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015c66:	8818      	ldrh	r0, [r3, #0]
 8015c68:	f107 030c 	add.w	r3, r7, #12
 8015c6c:	9302      	str	r3, [sp, #8]
 8015c6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015c72:	9301      	str	r3, [sp, #4]
 8015c74:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015c78:	9300      	str	r3, [sp, #0]
 8015c7a:	4623      	mov	r3, r4
 8015c7c:	f7ff ff05 	bl	8015a8a <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8015c80:	f107 030c 	add.w	r3, r7, #12
 8015c84:	3310      	adds	r3, #16
 8015c86:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8015c8a:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8015c8e:	8812      	ldrh	r2, [r2, #0]
 8015c90:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8015c94:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8015c98:	6809      	ldr	r1, [r1, #0]
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	f003 fbff 	bl	801949e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8015ca0:	2306      	movs	r3, #6
 8015ca2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8015ca6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015caa:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8015cae:	881b      	ldrh	r3, [r3, #0]
 8015cb0:	3310      	adds	r3, #16
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8015cb8:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	f107 000c 	add.w	r0, r7, #12
 8015cc2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8015cc6:	f7f8 f8e9 	bl	800de9c <SecureElementVerifyAesCmac>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8015cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d101      	bne.n	8015cdc <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8015cd8:	2300      	movs	r3, #0
 8015cda:	e006      	b.n	8015cea <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8015cdc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8015ce0:	2b01      	cmp	r3, #1
 8015ce2:	d101      	bne.n	8015ce8 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	e000      	b.n	8015cea <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015ce8:	230e      	movs	r3, #14
}
 8015cea:	4618      	mov	r0, r3
 8015cec:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8015cf0:	46bd      	mov	sp, r7
 8015cf2:	bd90      	pop	{r4, r7, pc}

08015cf4 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8015cf4:	b480      	push	{r7}
 8015cf6:	b085      	sub	sp, #20
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	6039      	str	r1, [r7, #0]
 8015cfe:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015d00:	2300      	movs	r3, #0
 8015d02:	73fb      	strb	r3, [r7, #15]
 8015d04:	e011      	b.n	8015d2a <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8015d06:	7bfb      	ldrb	r3, [r7, #15]
 8015d08:	4a0c      	ldr	r2, [pc, #48]	; (8015d3c <GetKeyAddrItem+0x48>)
 8015d0a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015d0e:	79fa      	ldrb	r2, [r7, #7]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d107      	bne.n	8015d24 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8015d14:	7bfb      	ldrb	r3, [r7, #15]
 8015d16:	009b      	lsls	r3, r3, #2
 8015d18:	4a08      	ldr	r2, [pc, #32]	; (8015d3c <GetKeyAddrItem+0x48>)
 8015d1a:	441a      	add	r2, r3
 8015d1c:	683b      	ldr	r3, [r7, #0]
 8015d1e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8015d20:	2300      	movs	r3, #0
 8015d22:	e006      	b.n	8015d32 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8015d24:	7bfb      	ldrb	r3, [r7, #15]
 8015d26:	3301      	adds	r3, #1
 8015d28:	73fb      	strb	r3, [r7, #15]
 8015d2a:	7bfb      	ldrb	r3, [r7, #15]
 8015d2c:	2b01      	cmp	r3, #1
 8015d2e:	d9ea      	bls.n	8015d06 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8015d30:	230b      	movs	r3, #11
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3714      	adds	r7, #20
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bc80      	pop	{r7}
 8015d3a:	4770      	bx	lr
 8015d3c:	20000110 	.word	0x20000110

08015d40 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b088      	sub	sp, #32
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	60b9      	str	r1, [r7, #8]
 8015d48:	607a      	str	r2, [r7, #4]
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	73fb      	strb	r3, [r7, #15]
 8015d50:	4613      	mov	r3, r2
 8015d52:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8015d54:	2300      	movs	r3, #0
 8015d56:	613b      	str	r3, [r7, #16]
 8015d58:	f107 0314 	add.w	r3, r7, #20
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	601a      	str	r2, [r3, #0]
 8015d60:	605a      	str	r2, [r3, #4]
 8015d62:	609a      	str	r2, [r3, #8]

    switch( keyID )
 8015d64:	7bfb      	ldrb	r3, [r7, #15]
 8015d66:	2b08      	cmp	r3, #8
 8015d68:	d002      	beq.n	8015d70 <DeriveSessionKey10x+0x30>
 8015d6a:	2b09      	cmp	r3, #9
 8015d6c:	d003      	beq.n	8015d76 <DeriveSessionKey10x+0x36>
 8015d6e:	e005      	b.n	8015d7c <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8015d70:	2301      	movs	r3, #1
 8015d72:	743b      	strb	r3, [r7, #16]
            break;
 8015d74:	e004      	b.n	8015d80 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8015d76:	2302      	movs	r3, #2
 8015d78:	743b      	strb	r3, [r7, #16]
            break;
 8015d7a:	e001      	b.n	8015d80 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8015d7c:	230a      	movs	r3, #10
 8015d7e:	e02a      	b.n	8015dd6 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8015d80:	68bb      	ldr	r3, [r7, #8]
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	0a1b      	lsrs	r3, r3, #8
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8015d8e:	68bb      	ldr	r3, [r7, #8]
 8015d90:	0c1b      	lsrs	r3, r3, #16
 8015d92:	b2db      	uxtb	r3, r3
 8015d94:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	b2db      	uxtb	r3, r3
 8015d9a:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	0a1b      	lsrs	r3, r3, #8
 8015da0:	b2db      	uxtb	r3, r3
 8015da2:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	0c1b      	lsrs	r3, r3, #16
 8015da8:	b2db      	uxtb	r3, r3
 8015daa:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8015dac:	89bb      	ldrh	r3, [r7, #12]
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8015db2:	89bb      	ldrh	r3, [r7, #12]
 8015db4:	0a1b      	lsrs	r3, r3, #8
 8015db6:	b29b      	uxth	r3, r3
 8015db8:	b2db      	uxtb	r3, r3
 8015dba:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8015dbc:	7bfa      	ldrb	r2, [r7, #15]
 8015dbe:	f107 0310 	add.w	r3, r7, #16
 8015dc2:	2101      	movs	r1, #1
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7f8 f915 	bl	800dff4 <SecureElementDeriveAndStoreKey>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d001      	beq.n	8015dd4 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8015dd0:	230e      	movs	r3, #14
 8015dd2:	e000      	b.n	8015dd6 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8015dd4:	2300      	movs	r3, #0
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	3720      	adds	r7, #32
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
	...

08015de0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8015de0:	b480      	push	{r7}
 8015de2:	b083      	sub	sp, #12
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	4603      	mov	r3, r0
 8015de8:	6039      	str	r1, [r7, #0]
 8015dea:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8015dec:	683b      	ldr	r3, [r7, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d101      	bne.n	8015df6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8015df2:	2309      	movs	r3, #9
 8015df4:	e029      	b.n	8015e4a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8015df6:	79fb      	ldrb	r3, [r7, #7]
 8015df8:	3b01      	subs	r3, #1
 8015dfa:	2b03      	cmp	r3, #3
 8015dfc:	d822      	bhi.n	8015e44 <GetLastFcntDown+0x64>
 8015dfe:	a201      	add	r2, pc, #4	; (adr r2, 8015e04 <GetLastFcntDown+0x24>)
 8015e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e04:	08015e15 	.word	0x08015e15
 8015e08:	08015e21 	.word	0x08015e21
 8015e0c:	08015e2d 	.word	0x08015e2d
 8015e10:	08015e39 	.word	0x08015e39
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8015e14:	4b0f      	ldr	r3, [pc, #60]	; (8015e54 <GetLastFcntDown+0x74>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	691a      	ldr	r2, [r3, #16]
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	601a      	str	r2, [r3, #0]
            break;
 8015e1e:	e013      	b.n	8015e48 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8015e20:	4b0c      	ldr	r3, [pc, #48]	; (8015e54 <GetLastFcntDown+0x74>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	695a      	ldr	r2, [r3, #20]
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	601a      	str	r2, [r3, #0]
            break;
 8015e2a:	e00d      	b.n	8015e48 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8015e2c:	4b09      	ldr	r3, [pc, #36]	; (8015e54 <GetLastFcntDown+0x74>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	699a      	ldr	r2, [r3, #24]
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	601a      	str	r2, [r3, #0]
            break;
 8015e36:	e007      	b.n	8015e48 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8015e38:	4b06      	ldr	r3, [pc, #24]	; (8015e54 <GetLastFcntDown+0x74>)
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	69da      	ldr	r2, [r3, #28]
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	601a      	str	r2, [r3, #0]
            break;
 8015e42:	e001      	b.n	8015e48 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8015e44:	2305      	movs	r3, #5
 8015e46:	e000      	b.n	8015e4a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8015e48:	2300      	movs	r3, #0
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	370c      	adds	r7, #12
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bc80      	pop	{r7}
 8015e52:	4770      	bx	lr
 8015e54:	20001a60 	.word	0x20001a60

08015e58 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b084      	sub	sp, #16
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	4603      	mov	r3, r0
 8015e60:	6039      	str	r1, [r7, #0]
 8015e62:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8015e64:	2300      	movs	r3, #0
 8015e66:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8015e68:	f107 020c 	add.w	r2, r7, #12
 8015e6c:	79fb      	ldrb	r3, [r7, #7]
 8015e6e:	4611      	mov	r1, r2
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7ff ffb5 	bl	8015de0 <GetLastFcntDown>
 8015e76:	4603      	mov	r3, r0
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d001      	beq.n	8015e80 <CheckFCntDown+0x28>
    {
        return false;
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	e00a      	b.n	8015e96 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	683a      	ldr	r2, [r7, #0]
 8015e84:	429a      	cmp	r2, r3
 8015e86:	d803      	bhi.n	8015e90 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8015e88:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8015e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e8e:	d101      	bne.n	8015e94 <CheckFCntDown+0x3c>
    {
        return true;
 8015e90:	2301      	movs	r3, #1
 8015e92:	e000      	b.n	8015e96 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8015e94:	2300      	movs	r3, #0
    }
}
 8015e96:	4618      	mov	r0, r3
 8015e98:	3710      	adds	r7, #16
 8015e9a:	46bd      	mov	sp, r7
 8015e9c:	bd80      	pop	{r7, pc}
	...

08015ea0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b083      	sub	sp, #12
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	4603      	mov	r3, r0
 8015ea8:	6039      	str	r1, [r7, #0]
 8015eaa:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8015eac:	79fb      	ldrb	r3, [r7, #7]
 8015eae:	3b01      	subs	r3, #1
 8015eb0:	2b03      	cmp	r3, #3
 8015eb2:	d82b      	bhi.n	8015f0c <UpdateFCntDown+0x6c>
 8015eb4:	a201      	add	r2, pc, #4	; (adr r2, 8015ebc <UpdateFCntDown+0x1c>)
 8015eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eba:	bf00      	nop
 8015ebc:	08015ecd 	.word	0x08015ecd
 8015ec0:	08015edf 	.word	0x08015edf
 8015ec4:	08015ef1 	.word	0x08015ef1
 8015ec8:	08015f03 	.word	0x08015f03
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8015ecc:	4b12      	ldr	r3, [pc, #72]	; (8015f18 <UpdateFCntDown+0x78>)
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	683a      	ldr	r2, [r7, #0]
 8015ed2:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8015ed4:	4b10      	ldr	r3, [pc, #64]	; (8015f18 <UpdateFCntDown+0x78>)
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	683a      	ldr	r2, [r7, #0]
 8015eda:	621a      	str	r2, [r3, #32]
            break;
 8015edc:	e017      	b.n	8015f0e <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8015ede:	4b0e      	ldr	r3, [pc, #56]	; (8015f18 <UpdateFCntDown+0x78>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	683a      	ldr	r2, [r7, #0]
 8015ee4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8015ee6:	4b0c      	ldr	r3, [pc, #48]	; (8015f18 <UpdateFCntDown+0x78>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	683a      	ldr	r2, [r7, #0]
 8015eec:	621a      	str	r2, [r3, #32]
            break;
 8015eee:	e00e      	b.n	8015f0e <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8015ef0:	4b09      	ldr	r3, [pc, #36]	; (8015f18 <UpdateFCntDown+0x78>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	683a      	ldr	r2, [r7, #0]
 8015ef6:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8015ef8:	4b07      	ldr	r3, [pc, #28]	; (8015f18 <UpdateFCntDown+0x78>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	683a      	ldr	r2, [r7, #0]
 8015efe:	621a      	str	r2, [r3, #32]
            break;
 8015f00:	e005      	b.n	8015f0e <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8015f02:	4b05      	ldr	r3, [pc, #20]	; (8015f18 <UpdateFCntDown+0x78>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	683a      	ldr	r2, [r7, #0]
 8015f08:	61da      	str	r2, [r3, #28]
            break;
 8015f0a:	e000      	b.n	8015f0e <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8015f0c:	bf00      	nop
    }
}
 8015f0e:	bf00      	nop
 8015f10:	370c      	adds	r7, #12
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bc80      	pop	{r7}
 8015f16:	4770      	bx	lr
 8015f18:	20001a60 	.word	0x20001a60

08015f1c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8015f1c:	b480      	push	{r7}
 8015f1e:	b083      	sub	sp, #12
 8015f20:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8015f22:	4b18      	ldr	r3, [pc, #96]	; (8015f84 <ResetFCnts+0x68>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	2200      	movs	r2, #0
 8015f28:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015f2a:	4b16      	ldr	r3, [pc, #88]	; (8015f84 <ResetFCnts+0x68>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f32:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015f34:	4b13      	ldr	r3, [pc, #76]	; (8015f84 <ResetFCnts+0x68>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f3c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8015f3e:	4b11      	ldr	r3, [pc, #68]	; (8015f84 <ResetFCnts+0x68>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f46:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8015f48:	4b0e      	ldr	r3, [pc, #56]	; (8015f84 <ResetFCnts+0x68>)
 8015f4a:	681a      	ldr	r2, [r3, #0]
 8015f4c:	4b0d      	ldr	r3, [pc, #52]	; (8015f84 <ResetFCnts+0x68>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	6992      	ldr	r2, [r2, #24]
 8015f52:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015f54:	2300      	movs	r3, #0
 8015f56:	607b      	str	r3, [r7, #4]
 8015f58:	e00b      	b.n	8015f72 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8015f5a:	4b0a      	ldr	r3, [pc, #40]	; (8015f84 <ResetFCnts+0x68>)
 8015f5c:	681a      	ldr	r2, [r3, #0]
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	3306      	adds	r3, #6
 8015f62:	009b      	lsls	r3, r3, #2
 8015f64:	4413      	add	r3, r2
 8015f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015f6a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	3301      	adds	r3, #1
 8015f70:	607b      	str	r3, [r7, #4]
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	ddf0      	ble.n	8015f5a <ResetFCnts+0x3e>
    }
}
 8015f78:	bf00      	nop
 8015f7a:	bf00      	nop
 8015f7c:	370c      	adds	r7, #12
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bc80      	pop	{r7}
 8015f82:	4770      	bx	lr
 8015f84:	20001a60 	.word	0x20001a60

08015f88 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b083      	sub	sp, #12
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8015f90:	4b06      	ldr	r3, [pc, #24]	; (8015fac <IsJoinNonce10xOk+0x24>)
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	689b      	ldr	r3, [r3, #8]
 8015f96:	687a      	ldr	r2, [r7, #4]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	bf8c      	ite	hi
 8015f9c:	2301      	movhi	r3, #1
 8015f9e:	2300      	movls	r3, #0
 8015fa0:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	370c      	adds	r7, #12
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bc80      	pop	{r7}
 8015faa:	4770      	bx	lr
 8015fac:	20001a60 	.word	0x20001a60

08015fb0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b082      	sub	sp, #8
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d101      	bne.n	8015fc2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8015fbe:	2308      	movs	r3, #8
 8015fc0:	e01c      	b.n	8015ffc <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8015fc2:	4a10      	ldr	r2, [pc, #64]	; (8016004 <LoRaMacCryptoInit+0x54>)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8015fc8:	4b0e      	ldr	r3, [pc, #56]	; (8016004 <LoRaMacCryptoInit+0x54>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	2228      	movs	r2, #40	; 0x28
 8015fce:	2100      	movs	r1, #0
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f003 fa9f 	bl	8019514 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8015fd6:	4b0b      	ldr	r3, [pc, #44]	; (8016004 <LoRaMacCryptoInit+0x54>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	2201      	movs	r2, #1
 8015fdc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8015fde:	4b09      	ldr	r3, [pc, #36]	; (8016004 <LoRaMacCryptoInit+0x54>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	2201      	movs	r2, #1
 8015fe4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8015fe6:	4b07      	ldr	r3, [pc, #28]	; (8016004 <LoRaMacCryptoInit+0x54>)
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	2201      	movs	r2, #1
 8015fec:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8015fee:	4b05      	ldr	r3, [pc, #20]	; (8016004 <LoRaMacCryptoInit+0x54>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8015ff6:	f7ff ff91 	bl	8015f1c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8015ffa:	2300      	movs	r3, #0
}
 8015ffc:	4618      	mov	r0, r3
 8015ffe:	3708      	adds	r7, #8
 8016000:	46bd      	mov	sp, r7
 8016002:	bd80      	pop	{r7, pc}
 8016004:	20001a60 	.word	0x20001a60

08016008 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016008:	b480      	push	{r7}
 801600a:	b083      	sub	sp, #12
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016010:	4b04      	ldr	r3, [pc, #16]	; (8016024 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	687a      	ldr	r2, [r7, #4]
 8016016:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016018:	2300      	movs	r3, #0
}
 801601a:	4618      	mov	r0, r3
 801601c:	370c      	adds	r7, #12
 801601e:	46bd      	mov	sp, r7
 8016020:	bc80      	pop	{r7}
 8016022:	4770      	bx	lr
 8016024:	20001a60 	.word	0x20001a60

08016028 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016028:	b480      	push	{r7}
 801602a:	b083      	sub	sp, #12
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d101      	bne.n	801603a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016036:	2309      	movs	r3, #9
 8016038:	e006      	b.n	8016048 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801603a:	4b06      	ldr	r3, [pc, #24]	; (8016054 <LoRaMacCryptoGetFCntUp+0x2c>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	68db      	ldr	r3, [r3, #12]
 8016040:	1c5a      	adds	r2, r3, #1
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016046:	2300      	movs	r3, #0
}
 8016048:	4618      	mov	r0, r3
 801604a:	370c      	adds	r7, #12
 801604c:	46bd      	mov	sp, r7
 801604e:	bc80      	pop	{r7}
 8016050:	4770      	bx	lr
 8016052:	bf00      	nop
 8016054:	20001a60 	.word	0x20001a60

08016058 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b088      	sub	sp, #32
 801605c:	af00      	add	r7, sp, #0
 801605e:	4603      	mov	r3, r0
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
 8016064:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8016066:	2300      	movs	r3, #0
 8016068:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801606a:	2300      	movs	r3, #0
 801606c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801606e:	2312      	movs	r3, #18
 8016070:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d101      	bne.n	801607c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016078:	2309      	movs	r3, #9
 801607a:	e035      	b.n	80160e8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801607c:	f107 0214 	add.w	r2, r7, #20
 8016080:	7bfb      	ldrb	r3, [r7, #15]
 8016082:	4611      	mov	r1, r2
 8016084:	4618      	mov	r0, r3
 8016086:	f7ff feab 	bl	8015de0 <GetLastFcntDown>
 801608a:	4603      	mov	r3, r0
 801608c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801608e:	7efb      	ldrb	r3, [r7, #27]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d001      	beq.n	8016098 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8016094:	7efb      	ldrb	r3, [r7, #27]
 8016096:	e027      	b.n	80160e8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801609e:	d103      	bne.n	80160a8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	68ba      	ldr	r2, [r7, #8]
 80160a4:	601a      	str	r2, [r3, #0]
 80160a6:	e01e      	b.n	80160e6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80160a8:	697b      	ldr	r3, [r7, #20]
 80160aa:	b29b      	uxth	r3, r3
 80160ac:	68ba      	ldr	r2, [r7, #8]
 80160ae:	1ad3      	subs	r3, r2, r3
 80160b0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80160b2:	69fb      	ldr	r3, [r7, #28]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	dd05      	ble.n	80160c4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80160b8:	697a      	ldr	r2, [r7, #20]
 80160ba:	69fb      	ldr	r3, [r7, #28]
 80160bc:	441a      	add	r2, r3
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	601a      	str	r2, [r3, #0]
 80160c2:	e010      	b.n	80160e6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80160c4:	69fb      	ldr	r3, [r7, #28]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d104      	bne.n	80160d4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80160ca:	697a      	ldr	r2, [r7, #20]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80160d0:	2307      	movs	r3, #7
 80160d2:	e009      	b.n	80160e8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80160d4:	697b      	ldr	r3, [r7, #20]
 80160d6:	0c1b      	lsrs	r3, r3, #16
 80160d8:	041b      	lsls	r3, r3, #16
 80160da:	68ba      	ldr	r2, [r7, #8]
 80160dc:	4413      	add	r3, r2
 80160de:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80160e6:	2300      	movs	r3, #0
}
 80160e8:	4618      	mov	r0, r3
 80160ea:	3720      	adds	r7, #32
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80160f0:	b480      	push	{r7}
 80160f2:	b085      	sub	sp, #20
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d101      	bne.n	8016102 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80160fe:	2309      	movs	r3, #9
 8016100:	e019      	b.n	8016136 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016102:	2300      	movs	r3, #0
 8016104:	60fb      	str	r3, [r7, #12]
 8016106:	e012      	b.n	801612e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016108:	4b0d      	ldr	r3, [pc, #52]	; (8016140 <LoRaMacCryptoSetMulticastReference+0x50>)
 801610a:	6819      	ldr	r1, [r3, #0]
 801610c:	68fa      	ldr	r2, [r7, #12]
 801610e:	4613      	mov	r3, r2
 8016110:	005b      	lsls	r3, r3, #1
 8016112:	4413      	add	r3, r2
 8016114:	011b      	lsls	r3, r3, #4
 8016116:	461a      	mov	r2, r3
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	4413      	add	r3, r2
 801611c:	68fa      	ldr	r2, [r7, #12]
 801611e:	3206      	adds	r2, #6
 8016120:	0092      	lsls	r2, r2, #2
 8016122:	440a      	add	r2, r1
 8016124:	3204      	adds	r2, #4
 8016126:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	3301      	adds	r3, #1
 801612c:	60fb      	str	r3, [r7, #12]
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	2b00      	cmp	r3, #0
 8016132:	dde9      	ble.n	8016108 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016134:	2300      	movs	r3, #0
}
 8016136:	4618      	mov	r0, r3
 8016138:	3714      	adds	r7, #20
 801613a:	46bd      	mov	sp, r7
 801613c:	bc80      	pop	{r7}
 801613e:	4770      	bx	lr
 8016140:	20001a60 	.word	0x20001a60

08016144 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	af00      	add	r7, sp, #0
 801614a:	4603      	mov	r3, r0
 801614c:	6039      	str	r1, [r7, #0]
 801614e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016150:	79fb      	ldrb	r3, [r7, #7]
 8016152:	6839      	ldr	r1, [r7, #0]
 8016154:	4618      	mov	r0, r3
 8016156:	f7f7 fe29 	bl	800ddac <SecureElementSetKey>
 801615a:	4603      	mov	r3, r0
 801615c:	2b00      	cmp	r3, #0
 801615e:	d001      	beq.n	8016164 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016160:	230e      	movs	r3, #14
 8016162:	e021      	b.n	80161a8 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016164:	79fb      	ldrb	r3, [r7, #7]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d11d      	bne.n	80161a6 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801616a:	4b11      	ldr	r3, [pc, #68]	; (80161b0 <LoRaMacCryptoSetKey+0x6c>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	789b      	ldrb	r3, [r3, #2]
 8016170:	210b      	movs	r1, #11
 8016172:	4618      	mov	r0, r3
 8016174:	f000 fa58 	bl	8016628 <LoRaMacCryptoDeriveLifeTimeKey>
 8016178:	4603      	mov	r3, r0
 801617a:	2b00      	cmp	r3, #0
 801617c:	d001      	beq.n	8016182 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801617e:	230e      	movs	r3, #14
 8016180:	e012      	b.n	80161a8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016182:	210c      	movs	r1, #12
 8016184:	2000      	movs	r0, #0
 8016186:	f000 fa4f 	bl	8016628 <LoRaMacCryptoDeriveLifeTimeKey>
 801618a:	4603      	mov	r3, r0
 801618c:	2b00      	cmp	r3, #0
 801618e:	d001      	beq.n	8016194 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016190:	230e      	movs	r3, #14
 8016192:	e009      	b.n	80161a8 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016194:	210a      	movs	r1, #10
 8016196:	2000      	movs	r0, #0
 8016198:	f000 fa46 	bl	8016628 <LoRaMacCryptoDeriveLifeTimeKey>
 801619c:	4603      	mov	r3, r0
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d001      	beq.n	80161a6 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80161a2:	230e      	movs	r3, #14
 80161a4:	e000      	b.n	80161a8 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80161a6:	2300      	movs	r3, #0
}
 80161a8:	4618      	mov	r0, r3
 80161aa:	3708      	adds	r7, #8
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}
 80161b0:	20001a60 	.word	0x20001a60

080161b4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b086      	sub	sp, #24
 80161b8:	af02      	add	r7, sp, #8
 80161ba:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d101      	bne.n	80161c6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80161c2:	2309      	movs	r3, #9
 80161c4:	e02d      	b.n	8016222 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80161c6:	2301      	movs	r3, #1
 80161c8:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80161ca:	4b18      	ldr	r3, [pc, #96]	; (801622c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	889a      	ldrh	r2, [r3, #4]
 80161d0:	3201      	adds	r2, #1
 80161d2:	b292      	uxth	r2, r2
 80161d4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80161d6:	4b15      	ldr	r3, [pc, #84]	; (801622c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	889a      	ldrh	r2, [r3, #4]
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80161e0:	6878      	ldr	r0, [r7, #4]
 80161e2:	f000 fc1b 	bl	8016a1c <LoRaMacSerializerJoinRequest>
 80161e6:	4603      	mov	r3, r0
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d001      	beq.n	80161f0 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80161ec:	2310      	movs	r3, #16
 80161ee:	e018      	b.n	8016222 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6819      	ldr	r1, [r3, #0]
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	3318      	adds	r3, #24
 80161f8:	7bfa      	ldrb	r2, [r7, #15]
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	4613      	mov	r3, r2
 80161fe:	2213      	movs	r2, #19
 8016200:	2000      	movs	r0, #0
 8016202:	f7f7 fe31 	bl	800de68 <SecureElementComputeAesCmac>
 8016206:	4603      	mov	r3, r0
 8016208:	2b00      	cmp	r3, #0
 801620a:	d001      	beq.n	8016210 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801620c:	230e      	movs	r3, #14
 801620e:	e008      	b.n	8016222 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f000 fc03 	bl	8016a1c <LoRaMacSerializerJoinRequest>
 8016216:	4603      	mov	r3, r0
 8016218:	2b00      	cmp	r3, #0
 801621a:	d001      	beq.n	8016220 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801621c:	2310      	movs	r3, #16
 801621e:	e000      	b.n	8016222 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016220:	2300      	movs	r3, #0
}
 8016222:	4618      	mov	r0, r3
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	20001a60 	.word	0x20001a60

08016230 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016230:	b590      	push	{r4, r7, lr}
 8016232:	b097      	sub	sp, #92	; 0x5c
 8016234:	af04      	add	r7, sp, #16
 8016236:	4603      	mov	r3, r0
 8016238:	60b9      	str	r1, [r7, #8]
 801623a:	607a      	str	r2, [r7, #4]
 801623c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d002      	beq.n	801624a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d101      	bne.n	801624e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801624a:	2309      	movs	r3, #9
 801624c:	e0d3      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801624e:	2312      	movs	r3, #18
 8016250:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016254:	2300      	movs	r3, #0
 8016256:	617b      	str	r3, [r7, #20]
 8016258:	f107 0318 	add.w	r3, r7, #24
 801625c:	221d      	movs	r2, #29
 801625e:	2100      	movs	r1, #0
 8016260:	4618      	mov	r0, r3
 8016262:	f007 fe7d 	bl	801df60 <memset>
    uint8_t versionMinor         = 0;
 8016266:	2300      	movs	r3, #0
 8016268:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 801626a:	4b65      	ldr	r3, [pc, #404]	; (8016400 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	889b      	ldrh	r3, [r3, #4]
 8016270:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	681c      	ldr	r4, [r3, #0]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	791b      	ldrb	r3, [r3, #4]
 801627c:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016280:	7bf8      	ldrb	r0, [r7, #15]
 8016282:	f107 0213 	add.w	r2, r7, #19
 8016286:	9202      	str	r2, [sp, #8]
 8016288:	f107 0214 	add.w	r2, r7, #20
 801628c:	9201      	str	r2, [sp, #4]
 801628e:	9300      	str	r3, [sp, #0]
 8016290:	4623      	mov	r3, r4
 8016292:	460a      	mov	r2, r1
 8016294:	68b9      	ldr	r1, [r7, #8]
 8016296:	f7f7 feed 	bl	800e074 <SecureElementProcessJoinAccept>
 801629a:	4603      	mov	r3, r0
 801629c:	2b00      	cmp	r3, #0
 801629e:	d001      	beq.n	80162a4 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80162a0:	230e      	movs	r3, #14
 80162a2:	e0a8      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	6818      	ldr	r0, [r3, #0]
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	791b      	ldrb	r3, [r3, #4]
 80162ac:	b29a      	uxth	r2, r3
 80162ae:	f107 0314 	add.w	r3, r7, #20
 80162b2:	4619      	mov	r1, r3
 80162b4:	f003 f8f3 	bl	801949e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80162b8:	6878      	ldr	r0, [r7, #4]
 80162ba:	f000 f9f0 	bl	801669e <LoRaMacParserJoinAccept>
 80162be:	4603      	mov	r3, r0
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d001      	beq.n	80162c8 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80162c4:	230f      	movs	r3, #15
 80162c6:	e096      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 80162c8:	2300      	movs	r3, #0
 80162ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	799b      	ldrb	r3, [r3, #6]
 80162d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	79db      	ldrb	r3, [r3, #7]
 80162d8:	021b      	lsls	r3, r3, #8
 80162da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80162dc:	4313      	orrs	r3, r2
 80162de:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	7a1b      	ldrb	r3, [r3, #8]
 80162e4:	041b      	lsls	r3, r3, #16
 80162e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80162e8:	4313      	orrs	r3, r2
 80162ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 80162ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80162ee:	f7ff fe4b 	bl	8015f88 <IsJoinNonce10xOk>
 80162f2:	4603      	mov	r3, r0
 80162f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 80162f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d010      	beq.n	8016322 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016300:	4b3f      	ldr	r3, [pc, #252]	; (8016400 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016306:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016308:	7cfb      	ldrb	r3, [r7, #19]
 801630a:	210b      	movs	r1, #11
 801630c:	4618      	mov	r0, r3
 801630e:	f000 f98b 	bl	8016628 <LoRaMacCryptoDeriveLifeTimeKey>
 8016312:	4603      	mov	r3, r0
 8016314:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016318:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801631c:	2b00      	cmp	r3, #0
 801631e:	d005      	beq.n	801632c <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016320:	e001      	b.n	8016326 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016322:	2303      	movs	r3, #3
 8016324:	e067      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016326:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801632a:	e064      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 801632c:	210c      	movs	r1, #12
 801632e:	2000      	movs	r0, #0
 8016330:	f000 f97a 	bl	8016628 <LoRaMacCryptoDeriveLifeTimeKey>
 8016334:	4603      	mov	r3, r0
 8016336:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801633a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801633e:	2b00      	cmp	r3, #0
 8016340:	d002      	beq.n	8016348 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016342:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016346:	e056      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016348:	210a      	movs	r1, #10
 801634a:	2000      	movs	r0, #0
 801634c:	f000 f96c 	bl	8016628 <LoRaMacCryptoDeriveLifeTimeKey>
 8016350:	4603      	mov	r3, r0
 8016352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016356:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801635a:	2b00      	cmp	r3, #0
 801635c:	d002      	beq.n	8016364 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 801635e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016362:	e048      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	7a5b      	ldrb	r3, [r3, #9]
 8016368:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	7a9b      	ldrb	r3, [r3, #10]
 801636e:	021b      	lsls	r3, r3, #8
 8016370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016372:	4313      	orrs	r3, r2
 8016374:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	7adb      	ldrb	r3, [r3, #11]
 801637a:	041b      	lsls	r3, r3, #16
 801637c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801637e:	4313      	orrs	r3, r2
 8016380:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016382:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016388:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801638a:	2009      	movs	r0, #9
 801638c:	f7ff fcd8 	bl	8015d40 <DeriveSessionKey10x>
 8016390:	4603      	mov	r3, r0
 8016392:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016396:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801639a:	2b00      	cmp	r3, #0
 801639c:	d002      	beq.n	80163a4 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 801639e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80163a2:	e028      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80163a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80163a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80163ac:	2008      	movs	r0, #8
 80163ae:	f7ff fcc7 	bl	8015d40 <DeriveSessionKey10x>
 80163b2:	4603      	mov	r3, r0
 80163b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80163b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d002      	beq.n	80163c6 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 80163c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80163c4:	e017      	b.n	80163f6 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80163c6:	4b0e      	ldr	r3, [pc, #56]	; (8016400 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80163c8:	681b      	ldr	r3, [r3, #0]
 80163ca:	7cfa      	ldrb	r2, [r7, #19]
 80163cc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 80163ce:	4b0c      	ldr	r3, [pc, #48]	; (8016400 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	2200      	movs	r2, #0
 80163d4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 80163d6:	4b0a      	ldr	r3, [pc, #40]	; (8016400 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163de:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80163e0:	4b07      	ldr	r3, [pc, #28]	; (8016400 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163e8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 80163ea:	4b05      	ldr	r3, [pc, #20]	; (8016400 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80163f2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80163f4:	2300      	movs	r3, #0
}
 80163f6:	4618      	mov	r0, r3
 80163f8:	374c      	adds	r7, #76	; 0x4c
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd90      	pop	{r4, r7, pc}
 80163fe:	bf00      	nop
 8016400:	20001a60 	.word	0x20001a60

08016404 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016404:	b590      	push	{r4, r7, lr}
 8016406:	b08b      	sub	sp, #44	; 0x2c
 8016408:	af04      	add	r7, sp, #16
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	607b      	str	r3, [r7, #4]
 801640e:	460b      	mov	r3, r1
 8016410:	72fb      	strb	r3, [r7, #11]
 8016412:	4613      	mov	r3, r2
 8016414:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016416:	2312      	movs	r3, #18
 8016418:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801641a:	2309      	movs	r3, #9
 801641c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d101      	bne.n	8016428 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016424:	2309      	movs	r3, #9
 8016426:	e05f      	b.n	80164e8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016428:	4b31      	ldr	r3, [pc, #196]	; (80164f0 <LoRaMacCryptoSecureMessage+0xec>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	68db      	ldr	r3, [r3, #12]
 801642e:	68fa      	ldr	r2, [r7, #12]
 8016430:	429a      	cmp	r2, r3
 8016432:	d201      	bcs.n	8016438 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016434:	2306      	movs	r3, #6
 8016436:	e057      	b.n	80164e8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d101      	bne.n	8016446 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016442:	2308      	movs	r3, #8
 8016444:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016446:	4b2a      	ldr	r3, [pc, #168]	; (80164f0 <LoRaMacCryptoSecureMessage+0xec>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	68fa      	ldr	r2, [r7, #12]
 801644e:	429a      	cmp	r2, r3
 8016450:	d916      	bls.n	8016480 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801645c:	b219      	sxth	r1, r3
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	689c      	ldr	r4, [r3, #8]
 8016462:	7dfa      	ldrb	r2, [r7, #23]
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	9301      	str	r3, [sp, #4]
 8016468:	2300      	movs	r3, #0
 801646a:	9300      	str	r3, [sp, #0]
 801646c:	4623      	mov	r3, r4
 801646e:	f7ff fa73 	bl	8015958 <PayloadEncrypt>
 8016472:	4603      	mov	r3, r0
 8016474:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016476:	7dbb      	ldrb	r3, [r7, #22]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d001      	beq.n	8016480 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801647c:	7dbb      	ldrb	r3, [r7, #22]
 801647e:	e033      	b.n	80164e8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016480:	6878      	ldr	r0, [r7, #4]
 8016482:	f000 fb4d 	bl	8016b20 <LoRaMacSerializerData>
 8016486:	4603      	mov	r3, r0
 8016488:	2b00      	cmp	r3, #0
 801648a:	d001      	beq.n	8016490 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801648c:	2310      	movs	r3, #16
 801648e:	e02b      	b.n	80164e8 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016490:	2308      	movs	r3, #8
 8016492:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	6818      	ldr	r0, [r3, #0]
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	791b      	ldrb	r3, [r3, #4]
 801649c:	b29b      	uxth	r3, r3
 801649e:	3b04      	subs	r3, #4
 80164a0:	b299      	uxth	r1, r3
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	689b      	ldr	r3, [r3, #8]
 80164a6:	687a      	ldr	r2, [r7, #4]
 80164a8:	322c      	adds	r2, #44	; 0x2c
 80164aa:	7dfc      	ldrb	r4, [r7, #23]
 80164ac:	9203      	str	r2, [sp, #12]
 80164ae:	68fa      	ldr	r2, [r7, #12]
 80164b0:	9202      	str	r2, [sp, #8]
 80164b2:	9301      	str	r3, [sp, #4]
 80164b4:	2300      	movs	r3, #0
 80164b6:	9300      	str	r3, [sp, #0]
 80164b8:	2300      	movs	r3, #0
 80164ba:	4622      	mov	r2, r4
 80164bc:	f7ff fb4d 	bl	8015b5a <ComputeCmacB0>
 80164c0:	4603      	mov	r3, r0
 80164c2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80164c4:	7dbb      	ldrb	r3, [r7, #22]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d001      	beq.n	80164ce <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80164ca:	7dbb      	ldrb	r3, [r7, #22]
 80164cc:	e00c      	b.n	80164e8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 fb26 	bl	8016b20 <LoRaMacSerializerData>
 80164d4:	4603      	mov	r3, r0
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d001      	beq.n	80164de <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80164da:	2310      	movs	r3, #16
 80164dc:	e004      	b.n	80164e8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80164de:	4b04      	ldr	r3, [pc, #16]	; (80164f0 <LoRaMacCryptoSecureMessage+0xec>)
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	68fa      	ldr	r2, [r7, #12]
 80164e4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80164e6:	2300      	movs	r3, #0
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	371c      	adds	r7, #28
 80164ec:	46bd      	mov	sp, r7
 80164ee:	bd90      	pop	{r4, r7, pc}
 80164f0:	20001a60 	.word	0x20001a60

080164f4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80164f4:	b590      	push	{r4, r7, lr}
 80164f6:	b08b      	sub	sp, #44	; 0x2c
 80164f8:	af04      	add	r7, sp, #16
 80164fa:	60b9      	str	r1, [r7, #8]
 80164fc:	607b      	str	r3, [r7, #4]
 80164fe:	4603      	mov	r3, r0
 8016500:	73fb      	strb	r3, [r7, #15]
 8016502:	4613      	mov	r3, r2
 8016504:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016508:	2b00      	cmp	r3, #0
 801650a:	d101      	bne.n	8016510 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801650c:	2309      	movs	r3, #9
 801650e:	e084      	b.n	801661a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016510:	7bbb      	ldrb	r3, [r7, #14]
 8016512:	6879      	ldr	r1, [r7, #4]
 8016514:	4618      	mov	r0, r3
 8016516:	f7ff fc9f 	bl	8015e58 <CheckFCntDown>
 801651a:	4603      	mov	r3, r0
 801651c:	f083 0301 	eor.w	r3, r3, #1
 8016520:	b2db      	uxtb	r3, r3
 8016522:	2b00      	cmp	r3, #0
 8016524:	d001      	beq.n	801652a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016526:	2306      	movs	r3, #6
 8016528:	e077      	b.n	801661a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801652a:	2312      	movs	r3, #18
 801652c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801652e:	2309      	movs	r3, #9
 8016530:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016532:	2308      	movs	r3, #8
 8016534:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016538:	f000 f97c 	bl	8016834 <LoRaMacParserData>
 801653c:	4603      	mov	r3, r0
 801653e:	2b00      	cmp	r3, #0
 8016540:	d001      	beq.n	8016546 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016542:	230f      	movs	r3, #15
 8016544:	e069      	b.n	801661a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016546:	f107 0210 	add.w	r2, r7, #16
 801654a:	7bfb      	ldrb	r3, [r7, #15]
 801654c:	4611      	mov	r1, r2
 801654e:	4618      	mov	r0, r3
 8016550:	f7ff fbd0 	bl	8015cf4 <GetKeyAddrItem>
 8016554:	4603      	mov	r3, r0
 8016556:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016558:	7d7b      	ldrb	r3, [r7, #21]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d001      	beq.n	8016562 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801655e:	7d7b      	ldrb	r3, [r7, #21]
 8016560:	e05b      	b.n	801661a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016562:	693b      	ldr	r3, [r7, #16]
 8016564:	785b      	ldrb	r3, [r3, #1]
 8016566:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8016568:	693b      	ldr	r3, [r7, #16]
 801656a:	789b      	ldrb	r3, [r3, #2]
 801656c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016570:	689b      	ldr	r3, [r3, #8]
 8016572:	68ba      	ldr	r2, [r7, #8]
 8016574:	429a      	cmp	r2, r3
 8016576:	d001      	beq.n	801657c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8016578:	2302      	movs	r3, #2
 801657a:	e04e      	b.n	801661a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657e:	7b1b      	ldrb	r3, [r3, #12]
 8016580:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8016584:	b2db      	uxtb	r3, r3
 8016586:	2b00      	cmp	r3, #0
 8016588:	bf14      	ite	ne
 801658a:	2301      	movne	r3, #1
 801658c:	2300      	moveq	r3, #0
 801658e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016590:	4b24      	ldr	r3, [pc, #144]	; (8016624 <LoRaMacCryptoUnsecureMessage+0x130>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	789b      	ldrb	r3, [r3, #2]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d101      	bne.n	801659e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801659a:	2300      	movs	r3, #0
 801659c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a0:	6818      	ldr	r0, [r3, #0]
 80165a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a4:	791b      	ldrb	r3, [r3, #4]
 80165a6:	b29b      	uxth	r3, r3
 80165a8:	3b04      	subs	r3, #4
 80165aa:	b299      	uxth	r1, r3
 80165ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165b0:	7dbc      	ldrb	r4, [r7, #22]
 80165b2:	7d3a      	ldrb	r2, [r7, #20]
 80165b4:	9303      	str	r3, [sp, #12]
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	9302      	str	r3, [sp, #8]
 80165ba:	68bb      	ldr	r3, [r7, #8]
 80165bc:	9301      	str	r3, [sp, #4]
 80165be:	2301      	movs	r3, #1
 80165c0:	9300      	str	r3, [sp, #0]
 80165c2:	4623      	mov	r3, r4
 80165c4:	f7ff fb07 	bl	8015bd6 <VerifyCmacB0>
 80165c8:	4603      	mov	r3, r0
 80165ca:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80165cc:	7d7b      	ldrb	r3, [r7, #21]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d001      	beq.n	80165d6 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80165d2:	7d7b      	ldrb	r3, [r7, #21]
 80165d4:	e021      	b.n	801661a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80165d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d101      	bne.n	80165e4 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80165e0:	2308      	movs	r3, #8
 80165e2:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80165e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80165e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80165ee:	b219      	sxth	r1, r3
 80165f0:	7dfa      	ldrb	r2, [r7, #23]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	9301      	str	r3, [sp, #4]
 80165f6:	2301      	movs	r3, #1
 80165f8:	9300      	str	r3, [sp, #0]
 80165fa:	68bb      	ldr	r3, [r7, #8]
 80165fc:	f7ff f9ac 	bl	8015958 <PayloadEncrypt>
 8016600:	4603      	mov	r3, r0
 8016602:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016604:	7d7b      	ldrb	r3, [r7, #21]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d001      	beq.n	801660e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 801660a:	7d7b      	ldrb	r3, [r7, #21]
 801660c:	e005      	b.n	801661a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 801660e:	7bbb      	ldrb	r3, [r7, #14]
 8016610:	6879      	ldr	r1, [r7, #4]
 8016612:	4618      	mov	r0, r3
 8016614:	f7ff fc44 	bl	8015ea0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8016618:	2300      	movs	r3, #0
}
 801661a:	4618      	mov	r0, r3
 801661c:	371c      	adds	r7, #28
 801661e:	46bd      	mov	sp, r7
 8016620:	bd90      	pop	{r4, r7, pc}
 8016622:	bf00      	nop
 8016624:	20001a60 	.word	0x20001a60

08016628 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b088      	sub	sp, #32
 801662c:	af00      	add	r7, sp, #0
 801662e:	4603      	mov	r3, r0
 8016630:	460a      	mov	r2, r1
 8016632:	71fb      	strb	r3, [r7, #7]
 8016634:	4613      	mov	r3, r2
 8016636:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8016638:	2300      	movs	r3, #0
 801663a:	60fb      	str	r3, [r7, #12]
 801663c:	f107 0310 	add.w	r3, r7, #16
 8016640:	2200      	movs	r2, #0
 8016642:	601a      	str	r2, [r3, #0]
 8016644:	605a      	str	r2, [r3, #4]
 8016646:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8016648:	2300      	movs	r3, #0
 801664a:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 801664c:	79bb      	ldrb	r3, [r7, #6]
 801664e:	2b0c      	cmp	r3, #12
 8016650:	d00b      	beq.n	801666a <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8016652:	2b0c      	cmp	r3, #12
 8016654:	dc0f      	bgt.n	8016676 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 8016656:	2b0a      	cmp	r3, #10
 8016658:	d00a      	beq.n	8016670 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801665a:	2b0b      	cmp	r3, #11
 801665c:	d10b      	bne.n	8016676 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 801665e:	79fb      	ldrb	r3, [r7, #7]
 8016660:	2b01      	cmp	r3, #1
 8016662:	d10a      	bne.n	801667a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8016664:	2320      	movs	r3, #32
 8016666:	733b      	strb	r3, [r7, #12]
            }
            break;
 8016668:	e007      	b.n	801667a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801666a:	230b      	movs	r3, #11
 801666c:	77fb      	strb	r3, [r7, #31]
            break;
 801666e:	e005      	b.n	801667c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8016670:	2330      	movs	r3, #48	; 0x30
 8016672:	733b      	strb	r3, [r7, #12]
            break;
 8016674:	e002      	b.n	801667c <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016676:	230a      	movs	r3, #10
 8016678:	e00d      	b.n	8016696 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801667a:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801667c:	79ba      	ldrb	r2, [r7, #6]
 801667e:	7ff9      	ldrb	r1, [r7, #31]
 8016680:	f107 030c 	add.w	r3, r7, #12
 8016684:	4618      	mov	r0, r3
 8016686:	f7f7 fcb5 	bl	800dff4 <SecureElementDeriveAndStoreKey>
 801668a:	4603      	mov	r3, r0
 801668c:	2b00      	cmp	r3, #0
 801668e:	d001      	beq.n	8016694 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016690:	230e      	movs	r3, #14
 8016692:	e000      	b.n	8016696 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016694:	2300      	movs	r3, #0
}
 8016696:	4618      	mov	r0, r3
 8016698:	3720      	adds	r7, #32
 801669a:	46bd      	mov	sp, r7
 801669c:	bd80      	pop	{r7, pc}

0801669e <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801669e:	b580      	push	{r7, lr}
 80166a0:	b084      	sub	sp, #16
 80166a2:	af00      	add	r7, sp, #0
 80166a4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d003      	beq.n	80166b4 <LoRaMacParserJoinAccept+0x16>
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d101      	bne.n	80166b8 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80166b4:	2302      	movs	r3, #2
 80166b6:	e0b9      	b.n	801682c <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80166b8:	2300      	movs	r3, #0
 80166ba:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681a      	ldr	r2, [r3, #0]
 80166c0:	89fb      	ldrh	r3, [r7, #14]
 80166c2:	1c59      	adds	r1, r3, #1
 80166c4:	81f9      	strh	r1, [r7, #14]
 80166c6:	4413      	add	r3, r2
 80166c8:	781a      	ldrb	r2, [r3, #0]
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	1d98      	adds	r0, r3, #6
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681a      	ldr	r2, [r3, #0]
 80166d6:	89fb      	ldrh	r3, [r7, #14]
 80166d8:	4413      	add	r3, r2
 80166da:	2203      	movs	r2, #3
 80166dc:	4619      	mov	r1, r3
 80166de:	f002 fede 	bl	801949e <memcpy1>
    bufItr = bufItr + 3;
 80166e2:	89fb      	ldrh	r3, [r7, #14]
 80166e4:	3303      	adds	r3, #3
 80166e6:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f103 0009 	add.w	r0, r3, #9
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	681a      	ldr	r2, [r3, #0]
 80166f2:	89fb      	ldrh	r3, [r7, #14]
 80166f4:	4413      	add	r3, r2
 80166f6:	2203      	movs	r2, #3
 80166f8:	4619      	mov	r1, r3
 80166fa:	f002 fed0 	bl	801949e <memcpy1>
    bufItr = bufItr + 3;
 80166fe:	89fb      	ldrh	r3, [r7, #14]
 8016700:	3303      	adds	r3, #3
 8016702:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	681a      	ldr	r2, [r3, #0]
 8016708:	89fb      	ldrh	r3, [r7, #14]
 801670a:	1c59      	adds	r1, r3, #1
 801670c:	81f9      	strh	r1, [r7, #14]
 801670e:	4413      	add	r3, r2
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	461a      	mov	r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	681a      	ldr	r2, [r3, #0]
 801671c:	89fb      	ldrh	r3, [r7, #14]
 801671e:	1c59      	adds	r1, r3, #1
 8016720:	81f9      	strh	r1, [r7, #14]
 8016722:	4413      	add	r3, r2
 8016724:	781b      	ldrb	r3, [r3, #0]
 8016726:	021a      	lsls	r2, r3, #8
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	68db      	ldr	r3, [r3, #12]
 801672c:	431a      	orrs	r2, r3
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	89fb      	ldrh	r3, [r7, #14]
 8016738:	1c59      	adds	r1, r3, #1
 801673a:	81f9      	strh	r1, [r7, #14]
 801673c:	4413      	add	r3, r2
 801673e:	781b      	ldrb	r3, [r3, #0]
 8016740:	041a      	lsls	r2, r3, #16
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	68db      	ldr	r3, [r3, #12]
 8016746:	431a      	orrs	r2, r3
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	681a      	ldr	r2, [r3, #0]
 8016750:	89fb      	ldrh	r3, [r7, #14]
 8016752:	1c59      	adds	r1, r3, #1
 8016754:	81f9      	strh	r1, [r7, #14]
 8016756:	4413      	add	r3, r2
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	061a      	lsls	r2, r3, #24
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	68db      	ldr	r3, [r3, #12]
 8016760:	431a      	orrs	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681a      	ldr	r2, [r3, #0]
 801676a:	89fb      	ldrh	r3, [r7, #14]
 801676c:	1c59      	adds	r1, r3, #1
 801676e:	81f9      	strh	r1, [r7, #14]
 8016770:	4413      	add	r3, r2
 8016772:	781a      	ldrb	r2, [r3, #0]
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681a      	ldr	r2, [r3, #0]
 801677c:	89fb      	ldrh	r3, [r7, #14]
 801677e:	1c59      	adds	r1, r3, #1
 8016780:	81f9      	strh	r1, [r7, #14]
 8016782:	4413      	add	r3, r2
 8016784:	781a      	ldrb	r2, [r3, #0]
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	791b      	ldrb	r3, [r3, #4]
 801678e:	1f1a      	subs	r2, r3, #4
 8016790:	89fb      	ldrh	r3, [r7, #14]
 8016792:	1ad3      	subs	r3, r2, r3
 8016794:	2b10      	cmp	r3, #16
 8016796:	d10e      	bne.n	80167b6 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f103 0012 	add.w	r0, r3, #18
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681a      	ldr	r2, [r3, #0]
 80167a2:	89fb      	ldrh	r3, [r7, #14]
 80167a4:	4413      	add	r3, r2
 80167a6:	2210      	movs	r2, #16
 80167a8:	4619      	mov	r1, r3
 80167aa:	f002 fe78 	bl	801949e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80167ae:	89fb      	ldrh	r3, [r7, #14]
 80167b0:	3310      	adds	r3, #16
 80167b2:	81fb      	strh	r3, [r7, #14]
 80167b4:	e008      	b.n	80167c8 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	791b      	ldrb	r3, [r3, #4]
 80167ba:	1f1a      	subs	r2, r3, #4
 80167bc:	89fb      	ldrh	r3, [r7, #14]
 80167be:	1ad3      	subs	r3, r2, r3
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	dd01      	ble.n	80167c8 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80167c4:	2301      	movs	r3, #1
 80167c6:	e031      	b.n	801682c <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	681a      	ldr	r2, [r3, #0]
 80167cc:	89fb      	ldrh	r3, [r7, #14]
 80167ce:	1c59      	adds	r1, r3, #1
 80167d0:	81f9      	strh	r1, [r7, #14]
 80167d2:	4413      	add	r3, r2
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	461a      	mov	r2, r3
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681a      	ldr	r2, [r3, #0]
 80167e0:	89fb      	ldrh	r3, [r7, #14]
 80167e2:	1c59      	adds	r1, r3, #1
 80167e4:	81f9      	strh	r1, [r7, #14]
 80167e6:	4413      	add	r3, r2
 80167e8:	781b      	ldrb	r3, [r3, #0]
 80167ea:	021a      	lsls	r2, r3, #8
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167f0:	431a      	orrs	r2, r3
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	681a      	ldr	r2, [r3, #0]
 80167fa:	89fb      	ldrh	r3, [r7, #14]
 80167fc:	1c59      	adds	r1, r3, #1
 80167fe:	81f9      	strh	r1, [r7, #14]
 8016800:	4413      	add	r3, r2
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	041a      	lsls	r2, r3, #16
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801680a:	431a      	orrs	r2, r3
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681a      	ldr	r2, [r3, #0]
 8016814:	89fb      	ldrh	r3, [r7, #14]
 8016816:	1c59      	adds	r1, r3, #1
 8016818:	81f9      	strh	r1, [r7, #14]
 801681a:	4413      	add	r3, r2
 801681c:	781b      	ldrb	r3, [r3, #0]
 801681e:	061a      	lsls	r2, r3, #24
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016824:	431a      	orrs	r2, r3
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801682a:	2300      	movs	r3, #0
}
 801682c:	4618      	mov	r0, r3
 801682e:	3710      	adds	r7, #16
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}

08016834 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b084      	sub	sp, #16
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d003      	beq.n	801684a <LoRaMacParserData+0x16>
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d101      	bne.n	801684e <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801684a:	2302      	movs	r3, #2
 801684c:	e0e2      	b.n	8016a14 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801684e:	2300      	movs	r3, #0
 8016850:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	681a      	ldr	r2, [r3, #0]
 8016856:	89fb      	ldrh	r3, [r7, #14]
 8016858:	1c59      	adds	r1, r3, #1
 801685a:	81f9      	strh	r1, [r7, #14]
 801685c:	4413      	add	r3, r2
 801685e:	781a      	ldrb	r2, [r3, #0]
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681a      	ldr	r2, [r3, #0]
 8016868:	89fb      	ldrh	r3, [r7, #14]
 801686a:	1c59      	adds	r1, r3, #1
 801686c:	81f9      	strh	r1, [r7, #14]
 801686e:	4413      	add	r3, r2
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	461a      	mov	r2, r3
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681a      	ldr	r2, [r3, #0]
 801687c:	89fb      	ldrh	r3, [r7, #14]
 801687e:	1c59      	adds	r1, r3, #1
 8016880:	81f9      	strh	r1, [r7, #14]
 8016882:	4413      	add	r3, r2
 8016884:	781b      	ldrb	r3, [r3, #0]
 8016886:	021a      	lsls	r2, r3, #8
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	689b      	ldr	r3, [r3, #8]
 801688c:	431a      	orrs	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681a      	ldr	r2, [r3, #0]
 8016896:	89fb      	ldrh	r3, [r7, #14]
 8016898:	1c59      	adds	r1, r3, #1
 801689a:	81f9      	strh	r1, [r7, #14]
 801689c:	4413      	add	r3, r2
 801689e:	781b      	ldrb	r3, [r3, #0]
 80168a0:	041a      	lsls	r2, r3, #16
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	689b      	ldr	r3, [r3, #8]
 80168a6:	431a      	orrs	r2, r3
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	681a      	ldr	r2, [r3, #0]
 80168b0:	89fb      	ldrh	r3, [r7, #14]
 80168b2:	1c59      	adds	r1, r3, #1
 80168b4:	81f9      	strh	r1, [r7, #14]
 80168b6:	4413      	add	r3, r2
 80168b8:	781b      	ldrb	r3, [r3, #0]
 80168ba:	061a      	lsls	r2, r3, #24
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	689b      	ldr	r3, [r3, #8]
 80168c0:	431a      	orrs	r2, r3
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	681a      	ldr	r2, [r3, #0]
 80168ca:	89fb      	ldrh	r3, [r7, #14]
 80168cc:	1c59      	adds	r1, r3, #1
 80168ce:	81f9      	strh	r1, [r7, #14]
 80168d0:	4413      	add	r3, r2
 80168d2:	781a      	ldrb	r2, [r3, #0]
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681a      	ldr	r2, [r3, #0]
 80168dc:	89fb      	ldrh	r3, [r7, #14]
 80168de:	1c59      	adds	r1, r3, #1
 80168e0:	81f9      	strh	r1, [r7, #14]
 80168e2:	4413      	add	r3, r2
 80168e4:	781b      	ldrb	r3, [r3, #0]
 80168e6:	b29a      	uxth	r2, r3
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	89fb      	ldrh	r3, [r7, #14]
 80168f2:	1c59      	adds	r1, r3, #1
 80168f4:	81f9      	strh	r1, [r7, #14]
 80168f6:	4413      	add	r3, r2
 80168f8:	781b      	ldrb	r3, [r3, #0]
 80168fa:	0219      	lsls	r1, r3, #8
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	89db      	ldrh	r3, [r3, #14]
 8016900:	b21a      	sxth	r2, r3
 8016902:	b20b      	sxth	r3, r1
 8016904:	4313      	orrs	r3, r2
 8016906:	b21b      	sxth	r3, r3
 8016908:	b29a      	uxth	r2, r3
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f103 0010 	add.w	r0, r3, #16
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681a      	ldr	r2, [r3, #0]
 8016918:	89fb      	ldrh	r3, [r7, #14]
 801691a:	18d1      	adds	r1, r2, r3
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	7b1b      	ldrb	r3, [r3, #12]
 8016920:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016924:	b2db      	uxtb	r3, r3
 8016926:	b29b      	uxth	r3, r3
 8016928:	461a      	mov	r2, r3
 801692a:	f002 fdb8 	bl	801949e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	7b1b      	ldrb	r3, [r3, #12]
 8016932:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016936:	b2db      	uxtb	r3, r3
 8016938:	b29a      	uxth	r2, r3
 801693a:	89fb      	ldrh	r3, [r7, #14]
 801693c:	4413      	add	r3, r2
 801693e:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2200      	movs	r2, #0
 8016944:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2200      	movs	r2, #0
 801694c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	791b      	ldrb	r3, [r3, #4]
 8016954:	461a      	mov	r2, r3
 8016956:	89fb      	ldrh	r3, [r7, #14]
 8016958:	1ad3      	subs	r3, r2, r3
 801695a:	2b04      	cmp	r3, #4
 801695c:	dd28      	ble.n	80169b0 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	681a      	ldr	r2, [r3, #0]
 8016962:	89fb      	ldrh	r3, [r7, #14]
 8016964:	1c59      	adds	r1, r3, #1
 8016966:	81f9      	strh	r1, [r7, #14]
 8016968:	4413      	add	r3, r2
 801696a:	781a      	ldrb	r2, [r3, #0]
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	791a      	ldrb	r2, [r3, #4]
 8016976:	89fb      	ldrh	r3, [r7, #14]
 8016978:	b2db      	uxtb	r3, r3
 801697a:	1ad3      	subs	r3, r2, r3
 801697c:	b2db      	uxtb	r3, r3
 801697e:	3b04      	subs	r3, #4
 8016980:	b2da      	uxtb	r2, r3
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	89fb      	ldrh	r3, [r7, #14]
 8016992:	18d1      	adds	r1, r2, r3
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801699a:	b29b      	uxth	r3, r3
 801699c:	461a      	mov	r2, r3
 801699e:	f002 fd7e 	bl	801949e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80169a8:	b29a      	uxth	r2, r3
 80169aa:	89fb      	ldrh	r3, [r7, #14]
 80169ac:	4413      	add	r3, r2
 80169ae:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681a      	ldr	r2, [r3, #0]
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	791b      	ldrb	r3, [r3, #4]
 80169b8:	3b04      	subs	r3, #4
 80169ba:	4413      	add	r3, r2
 80169bc:	781b      	ldrb	r3, [r3, #0]
 80169be:	461a      	mov	r2, r3
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6819      	ldr	r1, [r3, #0]
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	791b      	ldrb	r3, [r3, #4]
 80169d0:	3b03      	subs	r3, #3
 80169d2:	440b      	add	r3, r1
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	021b      	lsls	r3, r3, #8
 80169d8:	431a      	orrs	r2, r3
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	6819      	ldr	r1, [r3, #0]
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	791b      	ldrb	r3, [r3, #4]
 80169ea:	3b02      	subs	r3, #2
 80169ec:	440b      	add	r3, r1
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	041b      	lsls	r3, r3, #16
 80169f2:	431a      	orrs	r2, r3
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	6819      	ldr	r1, [r3, #0]
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	791b      	ldrb	r3, [r3, #4]
 8016a04:	3b01      	subs	r3, #1
 8016a06:	440b      	add	r3, r1
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	061b      	lsls	r3, r3, #24
 8016a0c:	431a      	orrs	r2, r3
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8016a12:	2300      	movs	r3, #0
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3710      	adds	r7, #16
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}

08016a1c <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b084      	sub	sp, #16
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d003      	beq.n	8016a32 <LoRaMacSerializerJoinRequest+0x16>
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d101      	bne.n	8016a36 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016a32:	2301      	movs	r3, #1
 8016a34:	e070      	b.n	8016b18 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8016a36:	2300      	movs	r3, #0
 8016a38:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	791b      	ldrb	r3, [r3, #4]
 8016a3e:	2b16      	cmp	r3, #22
 8016a40:	d801      	bhi.n	8016a46 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016a42:	2302      	movs	r3, #2
 8016a44:	e068      	b.n	8016b18 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681a      	ldr	r2, [r3, #0]
 8016a4a:	89fb      	ldrh	r3, [r7, #14]
 8016a4c:	1c59      	adds	r1, r3, #1
 8016a4e:	81f9      	strh	r1, [r7, #14]
 8016a50:	4413      	add	r3, r2
 8016a52:	687a      	ldr	r2, [r7, #4]
 8016a54:	7952      	ldrb	r2, [r2, #5]
 8016a56:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	89fb      	ldrh	r3, [r7, #14]
 8016a5e:	18d0      	adds	r0, r2, r3
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	3306      	adds	r3, #6
 8016a64:	2208      	movs	r2, #8
 8016a66:	4619      	mov	r1, r3
 8016a68:	f002 fd34 	bl	80194d4 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8016a6c:	89fb      	ldrh	r3, [r7, #14]
 8016a6e:	3308      	adds	r3, #8
 8016a70:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	681a      	ldr	r2, [r3, #0]
 8016a76:	89fb      	ldrh	r3, [r7, #14]
 8016a78:	18d0      	adds	r0, r2, r3
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	330e      	adds	r3, #14
 8016a7e:	2208      	movs	r2, #8
 8016a80:	4619      	mov	r1, r3
 8016a82:	f002 fd27 	bl	80194d4 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8016a86:	89fb      	ldrh	r3, [r7, #14]
 8016a88:	3308      	adds	r3, #8
 8016a8a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	8ad9      	ldrh	r1, [r3, #22]
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	681a      	ldr	r2, [r3, #0]
 8016a94:	89fb      	ldrh	r3, [r7, #14]
 8016a96:	1c58      	adds	r0, r3, #1
 8016a98:	81f8      	strh	r0, [r7, #14]
 8016a9a:	4413      	add	r3, r2
 8016a9c:	b2ca      	uxtb	r2, r1
 8016a9e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	8adb      	ldrh	r3, [r3, #22]
 8016aa4:	0a1b      	lsrs	r3, r3, #8
 8016aa6:	b299      	uxth	r1, r3
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681a      	ldr	r2, [r3, #0]
 8016aac:	89fb      	ldrh	r3, [r7, #14]
 8016aae:	1c58      	adds	r0, r3, #1
 8016ab0:	81f8      	strh	r0, [r7, #14]
 8016ab2:	4413      	add	r3, r2
 8016ab4:	b2ca      	uxtb	r2, r1
 8016ab6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6999      	ldr	r1, [r3, #24]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	89fb      	ldrh	r3, [r7, #14]
 8016ac2:	1c58      	adds	r0, r3, #1
 8016ac4:	81f8      	strh	r0, [r7, #14]
 8016ac6:	4413      	add	r3, r2
 8016ac8:	b2ca      	uxtb	r2, r1
 8016aca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	699b      	ldr	r3, [r3, #24]
 8016ad0:	0a19      	lsrs	r1, r3, #8
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	681a      	ldr	r2, [r3, #0]
 8016ad6:	89fb      	ldrh	r3, [r7, #14]
 8016ad8:	1c58      	adds	r0, r3, #1
 8016ada:	81f8      	strh	r0, [r7, #14]
 8016adc:	4413      	add	r3, r2
 8016ade:	b2ca      	uxtb	r2, r1
 8016ae0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	699b      	ldr	r3, [r3, #24]
 8016ae6:	0c19      	lsrs	r1, r3, #16
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	89fb      	ldrh	r3, [r7, #14]
 8016aee:	1c58      	adds	r0, r3, #1
 8016af0:	81f8      	strh	r0, [r7, #14]
 8016af2:	4413      	add	r3, r2
 8016af4:	b2ca      	uxtb	r2, r1
 8016af6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	699b      	ldr	r3, [r3, #24]
 8016afc:	0e19      	lsrs	r1, r3, #24
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681a      	ldr	r2, [r3, #0]
 8016b02:	89fb      	ldrh	r3, [r7, #14]
 8016b04:	1c58      	adds	r0, r3, #1
 8016b06:	81f8      	strh	r0, [r7, #14]
 8016b08:	4413      	add	r3, r2
 8016b0a:	b2ca      	uxtb	r2, r1
 8016b0c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016b0e:	89fb      	ldrh	r3, [r7, #14]
 8016b10:	b2da      	uxtb	r2, r3
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016b16:	2300      	movs	r3, #0
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	3710      	adds	r7, #16
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}

08016b20 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b084      	sub	sp, #16
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d003      	beq.n	8016b36 <LoRaMacSerializerData+0x16>
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d101      	bne.n	8016b3a <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8016b36:	2301      	movs	r3, #1
 8016b38:	e0e5      	b.n	8016d06 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8016b3e:	2308      	movs	r3, #8
 8016b40:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	7b1b      	ldrb	r3, [r3, #12]
 8016b46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016b4a:	b2db      	uxtb	r3, r3
 8016b4c:	b29a      	uxth	r2, r3
 8016b4e:	89bb      	ldrh	r3, [r7, #12]
 8016b50:	4413      	add	r3, r2
 8016b52:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d002      	beq.n	8016b64 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8016b5e:	89bb      	ldrh	r3, [r7, #12]
 8016b60:	3301      	adds	r3, #1
 8016b62:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016b6a:	b29a      	uxth	r2, r3
 8016b6c:	89bb      	ldrh	r3, [r7, #12]
 8016b6e:	4413      	add	r3, r2
 8016b70:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8016b72:	89bb      	ldrh	r3, [r7, #12]
 8016b74:	3304      	adds	r3, #4
 8016b76:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	791b      	ldrb	r3, [r3, #4]
 8016b7c:	b29b      	uxth	r3, r3
 8016b7e:	89ba      	ldrh	r2, [r7, #12]
 8016b80:	429a      	cmp	r2, r3
 8016b82:	d901      	bls.n	8016b88 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8016b84:	2302      	movs	r3, #2
 8016b86:	e0be      	b.n	8016d06 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	681a      	ldr	r2, [r3, #0]
 8016b8c:	89fb      	ldrh	r3, [r7, #14]
 8016b8e:	1c59      	adds	r1, r3, #1
 8016b90:	81f9      	strh	r1, [r7, #14]
 8016b92:	4413      	add	r3, r2
 8016b94:	687a      	ldr	r2, [r7, #4]
 8016b96:	7952      	ldrb	r2, [r2, #5]
 8016b98:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	6899      	ldr	r1, [r3, #8]
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681a      	ldr	r2, [r3, #0]
 8016ba2:	89fb      	ldrh	r3, [r7, #14]
 8016ba4:	1c58      	adds	r0, r3, #1
 8016ba6:	81f8      	strh	r0, [r7, #14]
 8016ba8:	4413      	add	r3, r2
 8016baa:	b2ca      	uxtb	r2, r1
 8016bac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	689b      	ldr	r3, [r3, #8]
 8016bb2:	0a19      	lsrs	r1, r3, #8
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681a      	ldr	r2, [r3, #0]
 8016bb8:	89fb      	ldrh	r3, [r7, #14]
 8016bba:	1c58      	adds	r0, r3, #1
 8016bbc:	81f8      	strh	r0, [r7, #14]
 8016bbe:	4413      	add	r3, r2
 8016bc0:	b2ca      	uxtb	r2, r1
 8016bc2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	689b      	ldr	r3, [r3, #8]
 8016bc8:	0c19      	lsrs	r1, r3, #16
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	681a      	ldr	r2, [r3, #0]
 8016bce:	89fb      	ldrh	r3, [r7, #14]
 8016bd0:	1c58      	adds	r0, r3, #1
 8016bd2:	81f8      	strh	r0, [r7, #14]
 8016bd4:	4413      	add	r3, r2
 8016bd6:	b2ca      	uxtb	r2, r1
 8016bd8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	689b      	ldr	r3, [r3, #8]
 8016bde:	0e19      	lsrs	r1, r3, #24
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681a      	ldr	r2, [r3, #0]
 8016be4:	89fb      	ldrh	r3, [r7, #14]
 8016be6:	1c58      	adds	r0, r3, #1
 8016be8:	81f8      	strh	r0, [r7, #14]
 8016bea:	4413      	add	r3, r2
 8016bec:	b2ca      	uxtb	r2, r1
 8016bee:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681a      	ldr	r2, [r3, #0]
 8016bf4:	89fb      	ldrh	r3, [r7, #14]
 8016bf6:	1c59      	adds	r1, r3, #1
 8016bf8:	81f9      	strh	r1, [r7, #14]
 8016bfa:	4413      	add	r3, r2
 8016bfc:	687a      	ldr	r2, [r7, #4]
 8016bfe:	7b12      	ldrb	r2, [r2, #12]
 8016c00:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	89d9      	ldrh	r1, [r3, #14]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681a      	ldr	r2, [r3, #0]
 8016c0a:	89fb      	ldrh	r3, [r7, #14]
 8016c0c:	1c58      	adds	r0, r3, #1
 8016c0e:	81f8      	strh	r0, [r7, #14]
 8016c10:	4413      	add	r3, r2
 8016c12:	b2ca      	uxtb	r2, r1
 8016c14:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	89db      	ldrh	r3, [r3, #14]
 8016c1a:	0a1b      	lsrs	r3, r3, #8
 8016c1c:	b299      	uxth	r1, r3
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	89fb      	ldrh	r3, [r7, #14]
 8016c24:	1c58      	adds	r0, r3, #1
 8016c26:	81f8      	strh	r0, [r7, #14]
 8016c28:	4413      	add	r3, r2
 8016c2a:	b2ca      	uxtb	r2, r1
 8016c2c:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	681a      	ldr	r2, [r3, #0]
 8016c32:	89fb      	ldrh	r3, [r7, #14]
 8016c34:	18d0      	adds	r0, r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	f103 0110 	add.w	r1, r3, #16
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	7b1b      	ldrb	r3, [r3, #12]
 8016c40:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016c44:	b2db      	uxtb	r3, r3
 8016c46:	b29b      	uxth	r3, r3
 8016c48:	461a      	mov	r2, r3
 8016c4a:	f002 fc28 	bl	801949e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	7b1b      	ldrb	r3, [r3, #12]
 8016c52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8016c56:	b2db      	uxtb	r3, r3
 8016c58:	b29a      	uxth	r2, r3
 8016c5a:	89fb      	ldrh	r3, [r7, #14]
 8016c5c:	4413      	add	r3, r2
 8016c5e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d009      	beq.n	8016c7e <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681a      	ldr	r2, [r3, #0]
 8016c6e:	89fb      	ldrh	r3, [r7, #14]
 8016c70:	1c59      	adds	r1, r3, #1
 8016c72:	81f9      	strh	r1, [r7, #14]
 8016c74:	4413      	add	r3, r2
 8016c76:	687a      	ldr	r2, [r7, #4]
 8016c78:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016c7c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	681a      	ldr	r2, [r3, #0]
 8016c82:	89fb      	ldrh	r3, [r7, #14]
 8016c84:	18d0      	adds	r0, r2, r3
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016c90:	b29b      	uxth	r3, r3
 8016c92:	461a      	mov	r2, r3
 8016c94:	f002 fc03 	bl	801949e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016c9e:	b29a      	uxth	r2, r3
 8016ca0:	89fb      	ldrh	r3, [r7, #14]
 8016ca2:	4413      	add	r3, r2
 8016ca4:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	681a      	ldr	r2, [r3, #0]
 8016cae:	89fb      	ldrh	r3, [r7, #14]
 8016cb0:	1c58      	adds	r0, r3, #1
 8016cb2:	81f8      	strh	r0, [r7, #14]
 8016cb4:	4413      	add	r3, r2
 8016cb6:	b2ca      	uxtb	r2, r1
 8016cb8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cbe:	0a19      	lsrs	r1, r3, #8
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681a      	ldr	r2, [r3, #0]
 8016cc4:	89fb      	ldrh	r3, [r7, #14]
 8016cc6:	1c58      	adds	r0, r3, #1
 8016cc8:	81f8      	strh	r0, [r7, #14]
 8016cca:	4413      	add	r3, r2
 8016ccc:	b2ca      	uxtb	r2, r1
 8016cce:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cd4:	0c19      	lsrs	r1, r3, #16
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	681a      	ldr	r2, [r3, #0]
 8016cda:	89fb      	ldrh	r3, [r7, #14]
 8016cdc:	1c58      	adds	r0, r3, #1
 8016cde:	81f8      	strh	r0, [r7, #14]
 8016ce0:	4413      	add	r3, r2
 8016ce2:	b2ca      	uxtb	r2, r1
 8016ce4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cea:	0e19      	lsrs	r1, r3, #24
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681a      	ldr	r2, [r3, #0]
 8016cf0:	89fb      	ldrh	r3, [r7, #14]
 8016cf2:	1c58      	adds	r0, r3, #1
 8016cf4:	81f8      	strh	r0, [r7, #14]
 8016cf6:	4413      	add	r3, r2
 8016cf8:	b2ca      	uxtb	r2, r1
 8016cfa:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8016cfc:	89fb      	ldrh	r3, [r7, #14]
 8016cfe:	b2da      	uxtb	r2, r3
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8016d04:	2300      	movs	r3, #0
}
 8016d06:	4618      	mov	r0, r3
 8016d08:	3710      	adds	r7, #16
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}

08016d0e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8016d0e:	b480      	push	{r7}
 8016d10:	b083      	sub	sp, #12
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	4603      	mov	r3, r0
 8016d16:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016d18:	79fb      	ldrb	r3, [r7, #7]
 8016d1a:	2b08      	cmp	r3, #8
 8016d1c:	d101      	bne.n	8016d22 <RegionIsActive+0x14>
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8016d1e:	2301      	movs	r3, #1
 8016d20:	e000      	b.n	8016d24 <RegionIsActive+0x16>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8016d22:	2300      	movs	r3, #0
        }
    }
}
 8016d24:	4618      	mov	r0, r3
 8016d26:	370c      	adds	r7, #12
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bc80      	pop	{r7}
 8016d2c:	4770      	bx	lr

08016d2e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8016d2e:	b580      	push	{r7, lr}
 8016d30:	b084      	sub	sp, #16
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	4603      	mov	r3, r0
 8016d36:	6039      	str	r1, [r7, #0]
 8016d38:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	60bb      	str	r3, [r7, #8]
    switch( region )
 8016d3e:	79fb      	ldrb	r3, [r7, #7]
 8016d40:	2b08      	cmp	r3, #8
 8016d42:	d105      	bne.n	8016d50 <RegionGetPhyParam+0x22>
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8016d44:	6838      	ldr	r0, [r7, #0]
 8016d46:	f001 fa11 	bl	801816c <RegionUS915GetPhyParam>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	60fb      	str	r3, [r7, #12]
 8016d4e:	e001      	b.n	8016d54 <RegionGetPhyParam+0x26>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	4618      	mov	r0, r3
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}

08016d5e <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8016d5e:	b580      	push	{r7, lr}
 8016d60:	b082      	sub	sp, #8
 8016d62:	af00      	add	r7, sp, #0
 8016d64:	4603      	mov	r3, r0
 8016d66:	6039      	str	r1, [r7, #0]
 8016d68:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016d6a:	79fb      	ldrb	r3, [r7, #7]
 8016d6c:	2b08      	cmp	r3, #8
 8016d6e:	d103      	bne.n	8016d78 <RegionSetBandTxDone+0x1a>
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
        KR920_SET_BAND_TX_DONE( );
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
 8016d70:	6838      	ldr	r0, [r7, #0]
 8016d72:	f001 fb57 	bl	8018424 <RegionUS915SetBandTxDone>
 8016d76:	e000      	b.n	8016d7a <RegionSetBandTxDone+0x1c>
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8016d78:	bf00      	nop
        }
    }
}
 8016d7a:	3708      	adds	r7, #8
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	bd80      	pop	{r7, pc}

08016d80 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	4603      	mov	r3, r0
 8016d88:	6039      	str	r1, [r7, #0]
 8016d8a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016d8c:	79fb      	ldrb	r3, [r7, #7]
 8016d8e:	2b08      	cmp	r3, #8
 8016d90:	d103      	bne.n	8016d9a <RegionInitDefaults+0x1a>
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
        KR920_INIT_DEFAULTS( );
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
 8016d92:	6838      	ldr	r0, [r7, #0]
 8016d94:	f001 fb72 	bl	801847c <RegionUS915InitDefaults>
 8016d98:	e000      	b.n	8016d9c <RegionInitDefaults+0x1c>
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8016d9a:	bf00      	nop
        }
    }
}
 8016d9c:	bf00      	nop
 8016d9e:	3708      	adds	r7, #8
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}

08016da4 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b082      	sub	sp, #8
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	4603      	mov	r3, r0
 8016dac:	6039      	str	r1, [r7, #0]
 8016dae:	71fb      	strb	r3, [r7, #7]
 8016db0:	4613      	mov	r3, r2
 8016db2:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8016db4:	79fb      	ldrb	r3, [r7, #7]
 8016db6:	2b08      	cmp	r3, #8
 8016db8:	d106      	bne.n	8016dc8 <RegionVerify+0x24>
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8016dba:	79bb      	ldrb	r3, [r7, #6]
 8016dbc:	4619      	mov	r1, r3
 8016dbe:	6838      	ldr	r0, [r7, #0]
 8016dc0:	f001 fc8e 	bl	80186e0 <RegionUS915Verify>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	e000      	b.n	8016dca <RegionVerify+0x26>
        RU864_VERIFY( );
        default:
        {
            return false;
 8016dc8:	2300      	movs	r3, #0
        }
    }
}
 8016dca:	4618      	mov	r0, r3
 8016dcc:	3708      	adds	r7, #8
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	bd80      	pop	{r7, pc}

08016dd2 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8016dd2:	b580      	push	{r7, lr}
 8016dd4:	b082      	sub	sp, #8
 8016dd6:	af00      	add	r7, sp, #0
 8016dd8:	4603      	mov	r3, r0
 8016dda:	6039      	str	r1, [r7, #0]
 8016ddc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016dde:	79fb      	ldrb	r3, [r7, #7]
 8016de0:	2b08      	cmp	r3, #8
 8016de2:	d103      	bne.n	8016dec <RegionApplyCFList+0x1a>
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
        KR920_APPLY_CF_LIST( );
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
 8016de4:	6838      	ldr	r0, [r7, #0]
 8016de6:	f001 fcf1 	bl	80187cc <RegionUS915ApplyCFList>
 8016dea:	e000      	b.n	8016dee <RegionApplyCFList+0x1c>
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8016dec:	bf00      	nop
        }
    }
}
 8016dee:	bf00      	nop
 8016df0:	3708      	adds	r7, #8
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}

08016df6 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8016df6:	b580      	push	{r7, lr}
 8016df8:	b082      	sub	sp, #8
 8016dfa:	af00      	add	r7, sp, #0
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	6039      	str	r1, [r7, #0]
 8016e00:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016e02:	79fb      	ldrb	r3, [r7, #7]
 8016e04:	2b08      	cmp	r3, #8
 8016e06:	d104      	bne.n	8016e12 <RegionChanMaskSet+0x1c>
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8016e08:	6838      	ldr	r0, [r7, #0]
 8016e0a:	f001 fd53 	bl	80188b4 <RegionUS915ChanMaskSet>
 8016e0e:	4603      	mov	r3, r0
 8016e10:	e000      	b.n	8016e14 <RegionChanMaskSet+0x1e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8016e12:	2300      	movs	r3, #0
        }
    }
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	3708      	adds	r7, #8
 8016e18:	46bd      	mov	sp, r7
 8016e1a:	bd80      	pop	{r7, pc}

08016e1c <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	603b      	str	r3, [r7, #0]
 8016e24:	4603      	mov	r3, r0
 8016e26:	71fb      	strb	r3, [r7, #7]
 8016e28:	460b      	mov	r3, r1
 8016e2a:	71bb      	strb	r3, [r7, #6]
 8016e2c:	4613      	mov	r3, r2
 8016e2e:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016e30:	79fb      	ldrb	r3, [r7, #7]
 8016e32:	2b08      	cmp	r3, #8
 8016e34:	d107      	bne.n	8016e46 <RegionComputeRxWindowParameters+0x2a>
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
        KR920_COMPUTE_RX_WINDOW_PARAMETERS( );
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8016e36:	7979      	ldrb	r1, [r7, #5]
 8016e38:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8016e3c:	693b      	ldr	r3, [r7, #16]
 8016e3e:	683a      	ldr	r2, [r7, #0]
 8016e40:	f001 fda0 	bl	8018984 <RegionUS915ComputeRxWindowParameters>
 8016e44:	e000      	b.n	8016e48 <RegionComputeRxWindowParameters+0x2c>
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8016e46:	bf00      	nop
        }
    }
}
 8016e48:	bf00      	nop
 8016e4a:	3708      	adds	r7, #8
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	4603      	mov	r3, r0
 8016e58:	60b9      	str	r1, [r7, #8]
 8016e5a:	607a      	str	r2, [r7, #4]
 8016e5c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016e5e:	7bfb      	ldrb	r3, [r7, #15]
 8016e60:	2b08      	cmp	r3, #8
 8016e62:	d105      	bne.n	8016e70 <RegionRxConfig+0x20>
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8016e64:	6879      	ldr	r1, [r7, #4]
 8016e66:	68b8      	ldr	r0, [r7, #8]
 8016e68:	f001 fdd6 	bl	8018a18 <RegionUS915RxConfig>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	e000      	b.n	8016e72 <RegionRxConfig+0x22>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8016e70:	2300      	movs	r3, #0
        }
    }
}
 8016e72:	4618      	mov	r0, r3
 8016e74:	3710      	adds	r7, #16
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}

08016e7a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016e7a:	b580      	push	{r7, lr}
 8016e7c:	b084      	sub	sp, #16
 8016e7e:	af00      	add	r7, sp, #0
 8016e80:	60b9      	str	r1, [r7, #8]
 8016e82:	607a      	str	r2, [r7, #4]
 8016e84:	603b      	str	r3, [r7, #0]
 8016e86:	4603      	mov	r3, r0
 8016e88:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016e8a:	7bfb      	ldrb	r3, [r7, #15]
 8016e8c:	2b08      	cmp	r3, #8
 8016e8e:	d106      	bne.n	8016e9e <RegionTxConfig+0x24>
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8016e90:	683a      	ldr	r2, [r7, #0]
 8016e92:	6879      	ldr	r1, [r7, #4]
 8016e94:	68b8      	ldr	r0, [r7, #8]
 8016e96:	f001 fe43 	bl	8018b20 <RegionUS915TxConfig>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	e000      	b.n	8016ea0 <RegionTxConfig+0x26>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8016e9e:	2300      	movs	r3, #0
        }
    }
}
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	3710      	adds	r7, #16
 8016ea4:	46bd      	mov	sp, r7
 8016ea6:	bd80      	pop	{r7, pc}

08016ea8 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b086      	sub	sp, #24
 8016eac:	af02      	add	r7, sp, #8
 8016eae:	60b9      	str	r1, [r7, #8]
 8016eb0:	607a      	str	r2, [r7, #4]
 8016eb2:	603b      	str	r3, [r7, #0]
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016eb8:	7bfb      	ldrb	r3, [r7, #15]
 8016eba:	2b08      	cmp	r3, #8
 8016ebc:	d109      	bne.n	8016ed2 <RegionLinkAdrReq+0x2a>
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8016ebe:	69fb      	ldr	r3, [r7, #28]
 8016ec0:	9300      	str	r3, [sp, #0]
 8016ec2:	69bb      	ldr	r3, [r7, #24]
 8016ec4:	683a      	ldr	r2, [r7, #0]
 8016ec6:	6879      	ldr	r1, [r7, #4]
 8016ec8:	68b8      	ldr	r0, [r7, #8]
 8016eca:	f001 fed3 	bl	8018c74 <RegionUS915LinkAdrReq>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	e000      	b.n	8016ed4 <RegionLinkAdrReq+0x2c>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8016ed2:	2300      	movs	r3, #0
        }
    }
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3710      	adds	r7, #16
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}

08016edc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	6039      	str	r1, [r7, #0]
 8016ee6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016ee8:	79fb      	ldrb	r3, [r7, #7]
 8016eea:	2b08      	cmp	r3, #8
 8016eec:	d104      	bne.n	8016ef8 <RegionRxParamSetupReq+0x1c>
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8016eee:	6838      	ldr	r0, [r7, #0]
 8016ef0:	f002 f8da 	bl	80190a8 <RegionUS915RxParamSetupReq>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	e000      	b.n	8016efa <RegionRxParamSetupReq+0x1e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016ef8:	2300      	movs	r3, #0
        }
    }
}
 8016efa:	4618      	mov	r0, r3
 8016efc:	3708      	adds	r7, #8
 8016efe:	46bd      	mov	sp, r7
 8016f00:	bd80      	pop	{r7, pc}

08016f02 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8016f02:	b580      	push	{r7, lr}
 8016f04:	b082      	sub	sp, #8
 8016f06:	af00      	add	r7, sp, #0
 8016f08:	4603      	mov	r3, r0
 8016f0a:	6039      	str	r1, [r7, #0]
 8016f0c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016f0e:	79fb      	ldrb	r3, [r7, #7]
 8016f10:	2b08      	cmp	r3, #8
 8016f12:	d104      	bne.n	8016f1e <RegionNewChannelReq+0x1c>
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8016f14:	6838      	ldr	r0, [r7, #0]
 8016f16:	f002 f913 	bl	8019140 <RegionUS915NewChannelReq>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	e000      	b.n	8016f20 <RegionNewChannelReq+0x1e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016f1e:	2300      	movs	r3, #0
        }
    }
}
 8016f20:	4618      	mov	r0, r3
 8016f22:	3708      	adds	r7, #8
 8016f24:	46bd      	mov	sp, r7
 8016f26:	bd80      	pop	{r7, pc}

08016f28 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	4603      	mov	r3, r0
 8016f30:	6039      	str	r1, [r7, #0]
 8016f32:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016f34:	79fb      	ldrb	r3, [r7, #7]
 8016f36:	2b08      	cmp	r3, #8
 8016f38:	d104      	bne.n	8016f44 <RegionTxParamSetupReq+0x1c>
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8016f3a:	6838      	ldr	r0, [r7, #0]
 8016f3c:	f002 f90b 	bl	8019156 <RegionUS915TxParamSetupReq>
 8016f40:	4603      	mov	r3, r0
 8016f42:	e000      	b.n	8016f46 <RegionTxParamSetupReq+0x1e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8016f44:	2300      	movs	r3, #0
        }
    }
}
 8016f46:	4618      	mov	r0, r3
 8016f48:	3708      	adds	r7, #8
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}

08016f4e <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8016f4e:	b580      	push	{r7, lr}
 8016f50:	b082      	sub	sp, #8
 8016f52:	af00      	add	r7, sp, #0
 8016f54:	4603      	mov	r3, r0
 8016f56:	6039      	str	r1, [r7, #0]
 8016f58:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8016f5a:	79fb      	ldrb	r3, [r7, #7]
 8016f5c:	2b08      	cmp	r3, #8
 8016f5e:	d104      	bne.n	8016f6a <RegionDlChannelReq+0x1c>
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8016f60:	6838      	ldr	r0, [r7, #0]
 8016f62:	f002 f903 	bl	801916c <RegionUS915DlChannelReq>
 8016f66:	4603      	mov	r3, r0
 8016f68:	e000      	b.n	8016f6c <RegionDlChannelReq+0x1e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8016f6a:	2300      	movs	r3, #0
        }
    }
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	3708      	adds	r7, #8
 8016f70:	46bd      	mov	sp, r7
 8016f72:	bd80      	pop	{r7, pc}

08016f74 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b082      	sub	sp, #8
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	71fb      	strb	r3, [r7, #7]
 8016f7e:	460b      	mov	r3, r1
 8016f80:	71bb      	strb	r3, [r7, #6]
 8016f82:	4613      	mov	r3, r2
 8016f84:	717b      	strb	r3, [r7, #5]
    switch( region )
 8016f86:	79fb      	ldrb	r3, [r7, #7]
 8016f88:	2b08      	cmp	r3, #8
 8016f8a:	d108      	bne.n	8016f9e <RegionAlternateDr+0x2a>
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8016f8c:	797a      	ldrb	r2, [r7, #5]
 8016f8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016f92:	4611      	mov	r1, r2
 8016f94:	4618      	mov	r0, r3
 8016f96:	f002 f8f5 	bl	8019184 <RegionUS915AlternateDr>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	e000      	b.n	8016fa0 <RegionAlternateDr+0x2c>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8016f9e:	2300      	movs	r3, #0
        }
    }
}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3708      	adds	r7, #8
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}

08016fa8 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b084      	sub	sp, #16
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	60b9      	str	r1, [r7, #8]
 8016fb0:	607a      	str	r2, [r7, #4]
 8016fb2:	603b      	str	r3, [r7, #0]
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8016fb8:	7bfb      	ldrb	r3, [r7, #15]
 8016fba:	2b08      	cmp	r3, #8
 8016fbc:	d107      	bne.n	8016fce <RegionNextChannel+0x26>
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8016fbe:	69bb      	ldr	r3, [r7, #24]
 8016fc0:	683a      	ldr	r2, [r7, #0]
 8016fc2:	6879      	ldr	r1, [r7, #4]
 8016fc4:	68b8      	ldr	r0, [r7, #8]
 8016fc6:	f002 f913 	bl	80191f0 <RegionUS915NextChannel>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	e000      	b.n	8016fd0 <RegionNextChannel+0x28>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8016fce:	2309      	movs	r3, #9
        }
    }
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	3710      	adds	r7, #16
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bd80      	pop	{r7, pc}

08016fd8 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016fd8:	b590      	push	{r4, r7, lr}
 8016fda:	b083      	sub	sp, #12
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	4604      	mov	r4, r0
 8016fe0:	4608      	mov	r0, r1
 8016fe2:	4611      	mov	r1, r2
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	4623      	mov	r3, r4
 8016fe8:	71fb      	strb	r3, [r7, #7]
 8016fea:	4603      	mov	r3, r0
 8016fec:	71bb      	strb	r3, [r7, #6]
 8016fee:	460b      	mov	r3, r1
 8016ff0:	717b      	strb	r3, [r7, #5]
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	713b      	strb	r3, [r7, #4]
    switch( region )
 8016ff6:	79fb      	ldrb	r3, [r7, #7]
 8016ff8:	2b08      	cmp	r3, #8
 8016ffa:	d109      	bne.n	8017010 <RegionApplyDrOffset+0x38>
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8016ffc:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017000:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017004:	79bb      	ldrb	r3, [r7, #6]
 8017006:	4618      	mov	r0, r3
 8017008:	f002 f9e0 	bl	80193cc <RegionUS915ApplyDrOffset>
 801700c:	4603      	mov	r3, r0
 801700e:	e000      	b.n	8017012 <RegionApplyDrOffset+0x3a>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017010:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017012:	4618      	mov	r0, r3
 8017014:	370c      	adds	r7, #12
 8017016:	46bd      	mov	sp, r7
 8017018:	bd90      	pop	{r4, r7, pc}
	...

0801701c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801701c:	b480      	push	{r7}
 801701e:	b083      	sub	sp, #12
 8017020:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017022:	4b04      	ldr	r3, [pc, #16]	; (8017034 <RegionGetVersion+0x18>)
 8017024:	607b      	str	r3, [r7, #4]

    return version;
 8017026:	687b      	ldr	r3, [r7, #4]
}
 8017028:	4618      	mov	r0, r3
 801702a:	370c      	adds	r7, #12
 801702c:	46bd      	mov	sp, r7
 801702e:	bc80      	pop	{r7}
 8017030:	4770      	bx	lr
 8017032:	bf00      	nop
 8017034:	02010001 	.word	0x02010001

08017038 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017038:	b480      	push	{r7}
 801703a:	b087      	sub	sp, #28
 801703c:	af00      	add	r7, sp, #0
 801703e:	4603      	mov	r3, r0
 8017040:	60b9      	str	r1, [r7, #8]
 8017042:	607a      	str	r2, [r7, #4]
 8017044:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8017046:	68bb      	ldr	r3, [r7, #8]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d002      	beq.n	8017052 <FindAvailable125kHzChannels+0x1a>
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d101      	bne.n	8017056 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017052:	2303      	movs	r3, #3
 8017054:	e021      	b.n	801709a <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2200      	movs	r2, #0
 801705a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801705c:	2300      	movs	r3, #0
 801705e:	75fb      	strb	r3, [r7, #23]
 8017060:	e017      	b.n	8017092 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8017062:	89fa      	ldrh	r2, [r7, #14]
 8017064:	7dfb      	ldrb	r3, [r7, #23]
 8017066:	fa42 f303 	asr.w	r3, r2, r3
 801706a:	f003 0301 	and.w	r3, r3, #1
 801706e:	2b00      	cmp	r3, #0
 8017070:	d00c      	beq.n	801708c <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	461a      	mov	r2, r3
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	4413      	add	r3, r2
 801707c:	7dfa      	ldrb	r2, [r7, #23]
 801707e:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	781b      	ldrb	r3, [r3, #0]
 8017084:	3301      	adds	r3, #1
 8017086:	b2da      	uxtb	r2, r3
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 801708c:	7dfb      	ldrb	r3, [r7, #23]
 801708e:	3301      	adds	r3, #1
 8017090:	75fb      	strb	r3, [r7, #23]
 8017092:	7dfb      	ldrb	r3, [r7, #23]
 8017094:	2b07      	cmp	r3, #7
 8017096:	d9e4      	bls.n	8017062 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8017098:	2300      	movs	r3, #0
}
 801709a:	4618      	mov	r0, r3
 801709c:	371c      	adds	r7, #28
 801709e:	46bd      	mov	sp, r7
 80170a0:	bc80      	pop	{r7}
 80170a2:	4770      	bx	lr

080170a4 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80170a4:	b590      	push	{r4, r7, lr}
 80170a6:	b089      	sub	sp, #36	; 0x24
 80170a8:	af00      	add	r7, sp, #0
 80170aa:	60f8      	str	r0, [r7, #12]
 80170ac:	60b9      	str	r1, [r7, #8]
 80170ae:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 80170b0:	2300      	movs	r3, #0
 80170b2:	617b      	str	r3, [r7, #20]
 80170b4:	2300      	movs	r3, #0
 80170b6:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 80170b8:	2300      	movs	r3, #0
 80170ba:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d005      	beq.n	80170ce <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80170c2:	68bb      	ldr	r3, [r7, #8]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d002      	beq.n	80170ce <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d101      	bne.n	80170d2 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80170ce:	2303      	movs	r3, #3
 80170d0:	e055      	b.n	801717e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80170d2:	68bb      	ldr	r3, [r7, #8]
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 80170d8:	7f7b      	ldrb	r3, [r7, #29]
 80170da:	085b      	lsrs	r3, r3, #1
 80170dc:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 80170de:	7f7b      	ldrb	r3, [r7, #29]
 80170e0:	f003 0301 	and.w	r3, r3, #1
 80170e4:	b2db      	uxtb	r3, r3
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d107      	bne.n	80170fa <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 80170ea:	7f3b      	ldrb	r3, [r7, #28]
 80170ec:	005b      	lsls	r3, r3, #1
 80170ee:	68fa      	ldr	r2, [r7, #12]
 80170f0:	4413      	add	r3, r2
 80170f2:	881b      	ldrh	r3, [r3, #0]
 80170f4:	b2db      	uxtb	r3, r3
 80170f6:	83fb      	strh	r3, [r7, #30]
 80170f8:	e006      	b.n	8017108 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 80170fa:	7f3b      	ldrb	r3, [r7, #28]
 80170fc:	005b      	lsls	r3, r3, #1
 80170fe:	68fa      	ldr	r2, [r7, #12]
 8017100:	4413      	add	r3, r2
 8017102:	881b      	ldrh	r3, [r3, #0]
 8017104:	0a1b      	lsrs	r3, r3, #8
 8017106:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017108:	f107 0213 	add.w	r2, r7, #19
 801710c:	f107 0114 	add.w	r1, r7, #20
 8017110:	8bfb      	ldrh	r3, [r7, #30]
 8017112:	4618      	mov	r0, r3
 8017114:	f7ff ff90 	bl	8017038 <FindAvailable125kHzChannels>
 8017118:	4603      	mov	r3, r0
 801711a:	2b03      	cmp	r3, #3
 801711c:	d101      	bne.n	8017122 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801711e:	2303      	movs	r3, #3
 8017120:	e02d      	b.n	801717e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8017122:	7cfb      	ldrb	r3, [r7, #19]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d011      	beq.n	801714c <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8017128:	7f7b      	ldrb	r3, [r7, #29]
 801712a:	00db      	lsls	r3, r3, #3
 801712c:	b2dc      	uxtb	r4, r3
 801712e:	7cfb      	ldrb	r3, [r7, #19]
 8017130:	3b01      	subs	r3, #1
 8017132:	4619      	mov	r1, r3
 8017134:	2000      	movs	r0, #0
 8017136:	f002 f99b 	bl	8019470 <randr>
 801713a:	4603      	mov	r3, r0
 801713c:	3320      	adds	r3, #32
 801713e:	443b      	add	r3, r7
 8017140:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8017144:	4423      	add	r3, r4
 8017146:	b2da      	uxtb	r2, r3
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 801714c:	7f7b      	ldrb	r3, [r7, #29]
 801714e:	3301      	adds	r3, #1
 8017150:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8017152:	7f7b      	ldrb	r3, [r7, #29]
 8017154:	2b07      	cmp	r3, #7
 8017156:	d901      	bls.n	801715c <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8017158:	2300      	movs	r3, #0
 801715a:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 801715c:	7cfb      	ldrb	r3, [r7, #19]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d104      	bne.n	801716c <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	7f7a      	ldrb	r2, [r7, #29]
 8017168:	429a      	cmp	r2, r3
 801716a:	d1b5      	bne.n	80170d8 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 801716c:	7cfb      	ldrb	r3, [r7, #19]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d004      	beq.n	801717c <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8017172:	68bb      	ldr	r3, [r7, #8]
 8017174:	7f7a      	ldrb	r2, [r7, #29]
 8017176:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017178:	2300      	movs	r3, #0
 801717a:	e000      	b.n	801717e <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 801717c:	2303      	movs	r3, #3
}
 801717e:	4618      	mov	r0, r3
 8017180:	3724      	adds	r7, #36	; 0x24
 8017182:	46bd      	mov	sp, r7
 8017184:	bd90      	pop	{r4, r7, pc}

08017186 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8017186:	b480      	push	{r7}
 8017188:	b085      	sub	sp, #20
 801718a:	af00      	add	r7, sp, #0
 801718c:	4603      	mov	r3, r0
 801718e:	60b9      	str	r1, [r7, #8]
 8017190:	607a      	str	r2, [r7, #4]
 8017192:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8017194:	7bfb      	ldrb	r3, [r7, #15]
 8017196:	687a      	ldr	r2, [r7, #4]
 8017198:	fb03 f202 	mul.w	r2, r3, r2
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	4413      	add	r3, r2
}
 80171a0:	4618      	mov	r0, r3
 80171a2:	3714      	adds	r7, #20
 80171a4:	46bd      	mov	sp, r7
 80171a6:	bc80      	pop	{r7}
 80171a8:	4770      	bx	lr

080171aa <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80171aa:	b480      	push	{r7}
 80171ac:	b087      	sub	sp, #28
 80171ae:	af00      	add	r7, sp, #0
 80171b0:	60f8      	str	r0, [r7, #12]
 80171b2:	4608      	mov	r0, r1
 80171b4:	4639      	mov	r1, r7
 80171b6:	e881 000c 	stmia.w	r1, {r2, r3}
 80171ba:	4603      	mov	r3, r0
 80171bc:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	881b      	ldrh	r3, [r3, #0]
 80171c2:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 80171c4:	7afb      	ldrb	r3, [r7, #11]
 80171c6:	f083 0301 	eor.w	r3, r3, #1
 80171ca:	b2db      	uxtb	r3, r3
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d01b      	beq.n	8017208 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 80171d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80171d4:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80171dc:	d202      	bcs.n	80171e4 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80171de:	2364      	movs	r3, #100	; 0x64
 80171e0:	82bb      	strh	r3, [r7, #20]
 80171e2:	e00b      	b.n	80171fc <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80171ea:	4293      	cmp	r3, r2
 80171ec:	d803      	bhi.n	80171f6 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80171ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80171f2:	82bb      	strh	r3, [r7, #20]
 80171f4:	e002      	b.n	80171fc <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80171f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80171fa:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80171fc:	8aba      	ldrh	r2, [r7, #20]
 80171fe:	8afb      	ldrh	r3, [r7, #22]
 8017200:	4293      	cmp	r3, r2
 8017202:	bf38      	it	cc
 8017204:	4613      	movcc	r3, r2
 8017206:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017208:	8afb      	ldrh	r3, [r7, #22]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d101      	bne.n	8017212 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 801720e:	2301      	movs	r3, #1
 8017210:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017212:	8afb      	ldrh	r3, [r7, #22]
}
 8017214:	4618      	mov	r0, r3
 8017216:	371c      	adds	r7, #28
 8017218:	46bd      	mov	sp, r7
 801721a:	bc80      	pop	{r7}
 801721c:	4770      	bx	lr
	...

08017220 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b08e      	sub	sp, #56	; 0x38
 8017224:	af02      	add	r7, sp, #8
 8017226:	60f8      	str	r0, [r7, #12]
 8017228:	4608      	mov	r0, r1
 801722a:	4639      	mov	r1, r7
 801722c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017230:	4603      	mov	r3, r0
 8017232:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	881b      	ldrh	r3, [r3, #0]
 8017238:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801723a:	4b4b      	ldr	r3, [pc, #300]	; (8017368 <SetMaxTimeCredits+0x148>)
 801723c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801723e:	463b      	mov	r3, r7
 8017240:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017244:	f005 fd80 	bl	801cd48 <SysTimeToMs>
 8017248:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 801724a:	f107 0314 	add.w	r3, r7, #20
 801724e:	2200      	movs	r2, #0
 8017250:	601a      	str	r2, [r3, #0]
 8017252:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017254:	7af9      	ldrb	r1, [r7, #11]
 8017256:	463b      	mov	r3, r7
 8017258:	cb0c      	ldmia	r3, {r2, r3}
 801725a:	68f8      	ldr	r0, [r7, #12]
 801725c:	f7ff ffa5 	bl	80171aa <GetDutyCycle>
 8017260:	4603      	mov	r3, r0
 8017262:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017264:	7afb      	ldrb	r3, [r7, #11]
 8017266:	f083 0301 	eor.w	r3, r3, #1
 801726a:	b2db      	uxtb	r3, r3
 801726c:	2b00      	cmp	r3, #0
 801726e:	d062      	beq.n	8017336 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017270:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017272:	2b64      	cmp	r3, #100	; 0x64
 8017274:	d105      	bne.n	8017282 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017276:	4b3c      	ldr	r3, [pc, #240]	; (8017368 <SetMaxTimeCredits+0x148>)
 8017278:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801727e:	609a      	str	r2, [r3, #8]
 8017280:	e00b      	b.n	801729a <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017282:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017288:	d105      	bne.n	8017296 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801728a:	4b38      	ldr	r3, [pc, #224]	; (801736c <SetMaxTimeCredits+0x14c>)
 801728c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017292:	609a      	str	r2, [r3, #8]
 8017294:	e001      	b.n	801729a <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017296:	4b36      	ldr	r3, [pc, #216]	; (8017370 <SetMaxTimeCredits+0x150>)
 8017298:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	689a      	ldr	r2, [r3, #8]
 801729e:	f107 031c 	add.w	r3, r7, #28
 80172a2:	4611      	mov	r1, r2
 80172a4:	4618      	mov	r0, r3
 80172a6:	f005 fd77 	bl	801cd98 <SysTimeFromMs>
 80172aa:	f107 0014 	add.w	r0, r7, #20
 80172ae:	6a3b      	ldr	r3, [r7, #32]
 80172b0:	9300      	str	r3, [sp, #0]
 80172b2:	69fb      	ldr	r3, [r7, #28]
 80172b4:	463a      	mov	r2, r7
 80172b6:	ca06      	ldmia	r2, {r1, r2}
 80172b8:	f005 fc87 	bl	801cbca <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80172bc:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80172c0:	f083 0301 	eor.w	r3, r3, #1
 80172c4:	b2db      	uxtb	r3, r3
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d006      	beq.n	80172d8 <SetMaxTimeCredits+0xb8>
 80172ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80172ce:	f083 0301 	eor.w	r3, r3, #1
 80172d2:	b2db      	uxtb	r3, r3
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d108      	bne.n	80172ea <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80172dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172de:	429a      	cmp	r2, r3
 80172e0:	d103      	bne.n	80172ea <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 80172e2:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 80172e4:	4a23      	ldr	r2, [pc, #140]	; (8017374 <SetMaxTimeCredits+0x154>)
 80172e6:	4293      	cmp	r3, r2
 80172e8:	d92f      	bls.n	801734a <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172ee:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80172f0:	683b      	ldr	r3, [r7, #0]
 80172f2:	4a21      	ldr	r2, [pc, #132]	; (8017378 <SetMaxTimeCredits+0x158>)
 80172f4:	4293      	cmp	r3, r2
 80172f6:	d928      	bls.n	801734a <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80172fe:	3b30      	subs	r3, #48	; 0x30
 8017300:	4a1e      	ldr	r2, [pc, #120]	; (801737c <SetMaxTimeCredits+0x15c>)
 8017302:	fba2 2303 	umull	r2, r3, r2, r3
 8017306:	0c1b      	lsrs	r3, r3, #16
 8017308:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801730a:	697b      	ldr	r3, [r7, #20]
 801730c:	4a1c      	ldr	r2, [pc, #112]	; (8017380 <SetMaxTimeCredits+0x160>)
 801730e:	fb02 f303 	mul.w	r3, r2, r3
 8017312:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017314:	697b      	ldr	r3, [r7, #20]
 8017316:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801731a:	3330      	adds	r3, #48	; 0x30
 801731c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801731e:	2300      	movs	r3, #0
 8017320:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017322:	f107 0314 	add.w	r3, r7, #20
 8017326:	e893 0003 	ldmia.w	r3, {r0, r1}
 801732a:	f005 fd0d 	bl	801cd48 <SysTimeToMs>
 801732e:	4602      	mov	r2, r0
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	609a      	str	r2, [r3, #8]
 8017334:	e009      	b.n	801734a <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017336:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801733a:	f083 0301 	eor.w	r3, r3, #1
 801733e:	b2db      	uxtb	r3, r3
 8017340:	2b00      	cmp	r3, #0
 8017342:	d002      	beq.n	801734a <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017348:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	685b      	ldr	r3, [r3, #4]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d102      	bne.n	8017358 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017356:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801735c:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801735e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017360:	4618      	mov	r0, r3
 8017362:	3730      	adds	r7, #48	; 0x30
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}
 8017368:	001b7740 	.word	0x001b7740
 801736c:	0112a880 	.word	0x0112a880
 8017370:	02932e00 	.word	0x02932e00
 8017374:	0001517f 	.word	0x0001517f
 8017378:	0001ec2f 	.word	0x0001ec2f
 801737c:	c22e4507 	.word	0xc22e4507
 8017380:	00015180 	.word	0x00015180

08017384 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b086      	sub	sp, #24
 8017388:	af02      	add	r7, sp, #8
 801738a:	6078      	str	r0, [r7, #4]
 801738c:	4608      	mov	r0, r1
 801738e:	4611      	mov	r1, r2
 8017390:	461a      	mov	r2, r3
 8017392:	4603      	mov	r3, r0
 8017394:	70fb      	strb	r3, [r7, #3]
 8017396:	460b      	mov	r3, r1
 8017398:	70bb      	strb	r3, [r7, #2]
 801739a:	4613      	mov	r3, r2
 801739c:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801739e:	78f9      	ldrb	r1, [r7, #3]
 80173a0:	787b      	ldrb	r3, [r7, #1]
 80173a2:	9301      	str	r3, [sp, #4]
 80173a4:	78bb      	ldrb	r3, [r7, #2]
 80173a6:	9300      	str	r3, [sp, #0]
 80173a8:	f107 0318 	add.w	r3, r7, #24
 80173ac:	cb0c      	ldmia	r3, {r2, r3}
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f7ff ff36 	bl	8017220 <SetMaxTimeCredits>
 80173b4:	4603      	mov	r3, r0
 80173b6:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 80173b8:	78fb      	ldrb	r3, [r7, #3]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d00a      	beq.n	80173d4 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	685b      	ldr	r3, [r3, #4]
 80173c2:	4618      	mov	r0, r3
 80173c4:	f006 f9f4 	bl	801d7b0 <UTIL_TIMER_GetElapsedTime>
 80173c8:	4602      	mov	r2, r0
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	68db      	ldr	r3, [r3, #12]
 80173ce:	441a      	add	r2, r3
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	68da      	ldr	r2, [r3, #12]
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	691b      	ldr	r3, [r3, #16]
 80173dc:	429a      	cmp	r2, r3
 80173de:	d903      	bls.n	80173e8 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	691a      	ldr	r2, [r3, #16]
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6a3a      	ldr	r2, [r7, #32]
 80173ec:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80173ee:	89fb      	ldrh	r3, [r7, #14]
}
 80173f0:	4618      	mov	r0, r3
 80173f2:	3710      	adds	r7, #16
 80173f4:	46bd      	mov	sp, r7
 80173f6:	bd80      	pop	{r7, pc}

080173f8 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80173f8:	b480      	push	{r7}
 80173fa:	b085      	sub	sp, #20
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	4603      	mov	r3, r0
 8017400:	460a      	mov	r2, r1
 8017402:	80fb      	strh	r3, [r7, #6]
 8017404:	4613      	mov	r3, r2
 8017406:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017408:	2300      	movs	r3, #0
 801740a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 801740c:	2300      	movs	r3, #0
 801740e:	73bb      	strb	r3, [r7, #14]
 8017410:	e011      	b.n	8017436 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017412:	88fa      	ldrh	r2, [r7, #6]
 8017414:	7bbb      	ldrb	r3, [r7, #14]
 8017416:	2101      	movs	r1, #1
 8017418:	fa01 f303 	lsl.w	r3, r1, r3
 801741c:	401a      	ands	r2, r3
 801741e:	7bbb      	ldrb	r3, [r7, #14]
 8017420:	2101      	movs	r1, #1
 8017422:	fa01 f303 	lsl.w	r3, r1, r3
 8017426:	429a      	cmp	r2, r3
 8017428:	d102      	bne.n	8017430 <CountChannels+0x38>
        {
            nbActiveBits++;
 801742a:	7bfb      	ldrb	r3, [r7, #15]
 801742c:	3301      	adds	r3, #1
 801742e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017430:	7bbb      	ldrb	r3, [r7, #14]
 8017432:	3301      	adds	r3, #1
 8017434:	73bb      	strb	r3, [r7, #14]
 8017436:	7bba      	ldrb	r2, [r7, #14]
 8017438:	797b      	ldrb	r3, [r7, #5]
 801743a:	429a      	cmp	r2, r3
 801743c:	d3e9      	bcc.n	8017412 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017440:	4618      	mov	r0, r3
 8017442:	3714      	adds	r7, #20
 8017444:	46bd      	mov	sp, r7
 8017446:	bc80      	pop	{r7}
 8017448:	4770      	bx	lr

0801744a <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 801744a:	b580      	push	{r7, lr}
 801744c:	b084      	sub	sp, #16
 801744e:	af00      	add	r7, sp, #0
 8017450:	6039      	str	r1, [r7, #0]
 8017452:	4611      	mov	r1, r2
 8017454:	461a      	mov	r2, r3
 8017456:	4603      	mov	r3, r0
 8017458:	71fb      	strb	r3, [r7, #7]
 801745a:	460b      	mov	r3, r1
 801745c:	71bb      	strb	r3, [r7, #6]
 801745e:	4613      	mov	r3, r2
 8017460:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017462:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017466:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801746a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801746e:	4618      	mov	r0, r3
 8017470:	f000 f85d 	bl	801752e <RegionCommonValueInRange>
 8017474:	4603      	mov	r3, r0
 8017476:	2b00      	cmp	r3, #0
 8017478:	d101      	bne.n	801747e <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801747a:	2300      	movs	r3, #0
 801747c:	e053      	b.n	8017526 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801747e:	2300      	movs	r3, #0
 8017480:	73fb      	strb	r3, [r7, #15]
 8017482:	2300      	movs	r3, #0
 8017484:	73bb      	strb	r3, [r7, #14]
 8017486:	e049      	b.n	801751c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017488:	2300      	movs	r3, #0
 801748a:	737b      	strb	r3, [r7, #13]
 801748c:	e03d      	b.n	801750a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801748e:	7bbb      	ldrb	r3, [r7, #14]
 8017490:	005b      	lsls	r3, r3, #1
 8017492:	683a      	ldr	r2, [r7, #0]
 8017494:	4413      	add	r3, r2
 8017496:	881b      	ldrh	r3, [r3, #0]
 8017498:	461a      	mov	r2, r3
 801749a:	7b7b      	ldrb	r3, [r7, #13]
 801749c:	fa42 f303 	asr.w	r3, r2, r3
 80174a0:	f003 0301 	and.w	r3, r3, #1
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d02d      	beq.n	8017504 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80174a8:	7bfa      	ldrb	r2, [r7, #15]
 80174aa:	7b7b      	ldrb	r3, [r7, #13]
 80174ac:	4413      	add	r3, r2
 80174ae:	461a      	mov	r2, r3
 80174b0:	4613      	mov	r3, r2
 80174b2:	005b      	lsls	r3, r3, #1
 80174b4:	4413      	add	r3, r2
 80174b6:	009b      	lsls	r3, r3, #2
 80174b8:	461a      	mov	r2, r3
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	4413      	add	r3, r2
 80174be:	7a1b      	ldrb	r3, [r3, #8]
 80174c0:	f343 0303 	sbfx	r3, r3, #0, #4
 80174c4:	b25b      	sxtb	r3, r3
 80174c6:	f003 030f 	and.w	r3, r3, #15
 80174ca:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 80174cc:	7bfa      	ldrb	r2, [r7, #15]
 80174ce:	7b7b      	ldrb	r3, [r7, #13]
 80174d0:	4413      	add	r3, r2
 80174d2:	461a      	mov	r2, r3
 80174d4:	4613      	mov	r3, r2
 80174d6:	005b      	lsls	r3, r3, #1
 80174d8:	4413      	add	r3, r2
 80174da:	009b      	lsls	r3, r3, #2
 80174dc:	461a      	mov	r2, r3
 80174de:	69fb      	ldr	r3, [r7, #28]
 80174e0:	4413      	add	r3, r2
 80174e2:	7a1b      	ldrb	r3, [r3, #8]
 80174e4:	f343 1303 	sbfx	r3, r3, #4, #4
 80174e8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80174ea:	f003 030f 	and.w	r3, r3, #15
 80174ee:	b25a      	sxtb	r2, r3
 80174f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80174f4:	4618      	mov	r0, r3
 80174f6:	f000 f81a 	bl	801752e <RegionCommonValueInRange>
 80174fa:	4603      	mov	r3, r0
 80174fc:	2b01      	cmp	r3, #1
 80174fe:	d101      	bne.n	8017504 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017500:	2301      	movs	r3, #1
 8017502:	e010      	b.n	8017526 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017504:	7b7b      	ldrb	r3, [r7, #13]
 8017506:	3301      	adds	r3, #1
 8017508:	737b      	strb	r3, [r7, #13]
 801750a:	7b7b      	ldrb	r3, [r7, #13]
 801750c:	2b0f      	cmp	r3, #15
 801750e:	d9be      	bls.n	801748e <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017510:	7bfb      	ldrb	r3, [r7, #15]
 8017512:	3310      	adds	r3, #16
 8017514:	73fb      	strb	r3, [r7, #15]
 8017516:	7bbb      	ldrb	r3, [r7, #14]
 8017518:	3301      	adds	r3, #1
 801751a:	73bb      	strb	r3, [r7, #14]
 801751c:	7bfa      	ldrb	r2, [r7, #15]
 801751e:	79fb      	ldrb	r3, [r7, #7]
 8017520:	429a      	cmp	r2, r3
 8017522:	d3b1      	bcc.n	8017488 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017524:	2300      	movs	r3, #0
}
 8017526:	4618      	mov	r0, r3
 8017528:	3710      	adds	r7, #16
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}

0801752e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801752e:	b480      	push	{r7}
 8017530:	b083      	sub	sp, #12
 8017532:	af00      	add	r7, sp, #0
 8017534:	4603      	mov	r3, r0
 8017536:	71fb      	strb	r3, [r7, #7]
 8017538:	460b      	mov	r3, r1
 801753a:	71bb      	strb	r3, [r7, #6]
 801753c:	4613      	mov	r3, r2
 801753e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017540:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017544:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017548:	429a      	cmp	r2, r3
 801754a:	db07      	blt.n	801755c <RegionCommonValueInRange+0x2e>
 801754c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017550:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017554:	429a      	cmp	r2, r3
 8017556:	dc01      	bgt.n	801755c <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017558:	2301      	movs	r3, #1
 801755a:	e000      	b.n	801755e <RegionCommonValueInRange+0x30>
    }
    return 0;
 801755c:	2300      	movs	r3, #0
}
 801755e:	4618      	mov	r0, r3
 8017560:	370c      	adds	r7, #12
 8017562:	46bd      	mov	sp, r7
 8017564:	bc80      	pop	{r7}
 8017566:	4770      	bx	lr

08017568 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017568:	b480      	push	{r7}
 801756a:	b085      	sub	sp, #20
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
 8017570:	460b      	mov	r3, r1
 8017572:	70fb      	strb	r3, [r7, #3]
 8017574:	4613      	mov	r3, r2
 8017576:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017578:	78fb      	ldrb	r3, [r7, #3]
 801757a:	091b      	lsrs	r3, r3, #4
 801757c:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801757e:	78bb      	ldrb	r3, [r7, #2]
 8017580:	091b      	lsrs	r3, r3, #4
 8017582:	b2db      	uxtb	r3, r3
 8017584:	7bfa      	ldrb	r2, [r7, #15]
 8017586:	429a      	cmp	r2, r3
 8017588:	d803      	bhi.n	8017592 <RegionCommonChanDisable+0x2a>
 801758a:	78fa      	ldrb	r2, [r7, #3]
 801758c:	78bb      	ldrb	r3, [r7, #2]
 801758e:	429a      	cmp	r2, r3
 8017590:	d301      	bcc.n	8017596 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017592:	2300      	movs	r3, #0
 8017594:	e017      	b.n	80175c6 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017596:	7bfb      	ldrb	r3, [r7, #15]
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	687a      	ldr	r2, [r7, #4]
 801759c:	4413      	add	r3, r2
 801759e:	881b      	ldrh	r3, [r3, #0]
 80175a0:	b21a      	sxth	r2, r3
 80175a2:	78fb      	ldrb	r3, [r7, #3]
 80175a4:	f003 030f 	and.w	r3, r3, #15
 80175a8:	2101      	movs	r1, #1
 80175aa:	fa01 f303 	lsl.w	r3, r1, r3
 80175ae:	b21b      	sxth	r3, r3
 80175b0:	43db      	mvns	r3, r3
 80175b2:	b21b      	sxth	r3, r3
 80175b4:	4013      	ands	r3, r2
 80175b6:	b219      	sxth	r1, r3
 80175b8:	7bfb      	ldrb	r3, [r7, #15]
 80175ba:	005b      	lsls	r3, r3, #1
 80175bc:	687a      	ldr	r2, [r7, #4]
 80175be:	4413      	add	r3, r2
 80175c0:	b28a      	uxth	r2, r1
 80175c2:	801a      	strh	r2, [r3, #0]

    return true;
 80175c4:	2301      	movs	r3, #1
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3714      	adds	r7, #20
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bc80      	pop	{r7}
 80175ce:	4770      	bx	lr

080175d0 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b084      	sub	sp, #16
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
 80175d8:	460b      	mov	r3, r1
 80175da:	70fb      	strb	r3, [r7, #3]
 80175dc:	4613      	mov	r3, r2
 80175de:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 80175e0:	2300      	movs	r3, #0
 80175e2:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d101      	bne.n	80175ee <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80175ea:	2300      	movs	r3, #0
 80175ec:	e018      	b.n	8017620 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80175ee:	78fb      	ldrb	r3, [r7, #3]
 80175f0:	73bb      	strb	r3, [r7, #14]
 80175f2:	e010      	b.n	8017616 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80175f4:	7bbb      	ldrb	r3, [r7, #14]
 80175f6:	005b      	lsls	r3, r3, #1
 80175f8:	687a      	ldr	r2, [r7, #4]
 80175fa:	4413      	add	r3, r2
 80175fc:	881b      	ldrh	r3, [r3, #0]
 80175fe:	2110      	movs	r1, #16
 8017600:	4618      	mov	r0, r3
 8017602:	f7ff fef9 	bl	80173f8 <CountChannels>
 8017606:	4603      	mov	r3, r0
 8017608:	461a      	mov	r2, r3
 801760a:	7bfb      	ldrb	r3, [r7, #15]
 801760c:	4413      	add	r3, r2
 801760e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017610:	7bbb      	ldrb	r3, [r7, #14]
 8017612:	3301      	adds	r3, #1
 8017614:	73bb      	strb	r3, [r7, #14]
 8017616:	7bba      	ldrb	r2, [r7, #14]
 8017618:	78bb      	ldrb	r3, [r7, #2]
 801761a:	429a      	cmp	r2, r3
 801761c:	d3ea      	bcc.n	80175f4 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017620:	4618      	mov	r0, r3
 8017622:	3710      	adds	r7, #16
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}

08017628 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017628:	b480      	push	{r7}
 801762a:	b087      	sub	sp, #28
 801762c:	af00      	add	r7, sp, #0
 801762e:	60f8      	str	r0, [r7, #12]
 8017630:	60b9      	str	r1, [r7, #8]
 8017632:	4613      	mov	r3, r2
 8017634:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d016      	beq.n	801766a <RegionCommonChanMaskCopy+0x42>
 801763c:	68bb      	ldr	r3, [r7, #8]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d013      	beq.n	801766a <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017642:	2300      	movs	r3, #0
 8017644:	75fb      	strb	r3, [r7, #23]
 8017646:	e00c      	b.n	8017662 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017648:	7dfb      	ldrb	r3, [r7, #23]
 801764a:	005b      	lsls	r3, r3, #1
 801764c:	68ba      	ldr	r2, [r7, #8]
 801764e:	441a      	add	r2, r3
 8017650:	7dfb      	ldrb	r3, [r7, #23]
 8017652:	005b      	lsls	r3, r3, #1
 8017654:	68f9      	ldr	r1, [r7, #12]
 8017656:	440b      	add	r3, r1
 8017658:	8812      	ldrh	r2, [r2, #0]
 801765a:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 801765c:	7dfb      	ldrb	r3, [r7, #23]
 801765e:	3301      	adds	r3, #1
 8017660:	75fb      	strb	r3, [r7, #23]
 8017662:	7dfa      	ldrb	r2, [r7, #23]
 8017664:	79fb      	ldrb	r3, [r7, #7]
 8017666:	429a      	cmp	r2, r3
 8017668:	d3ee      	bcc.n	8017648 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801766a:	bf00      	nop
 801766c:	371c      	adds	r7, #28
 801766e:	46bd      	mov	sp, r7
 8017670:	bc80      	pop	{r7}
 8017672:	4770      	bx	lr

08017674 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017674:	b082      	sub	sp, #8
 8017676:	b580      	push	{r7, lr}
 8017678:	b086      	sub	sp, #24
 801767a:	af00      	add	r7, sp, #0
 801767c:	60f8      	str	r0, [r7, #12]
 801767e:	60b9      	str	r1, [r7, #8]
 8017680:	627b      	str	r3, [r7, #36]	; 0x24
 8017682:	4613      	mov	r3, r2
 8017684:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017686:	79f9      	ldrb	r1, [r7, #7]
 8017688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801768c:	cb0c      	ldmia	r3, {r2, r3}
 801768e:	68f8      	ldr	r0, [r7, #12]
 8017690:	f7ff fd8b 	bl	80171aa <GetDutyCycle>
 8017694:	4603      	mov	r3, r0
 8017696:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	68da      	ldr	r2, [r3, #12]
 801769c:	8afb      	ldrh	r3, [r7, #22]
 801769e:	68b9      	ldr	r1, [r7, #8]
 80176a0:	fb01 f303 	mul.w	r3, r1, r3
 80176a4:	429a      	cmp	r2, r3
 80176a6:	d909      	bls.n	80176bc <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	68da      	ldr	r2, [r3, #12]
 80176ac:	8afb      	ldrh	r3, [r7, #22]
 80176ae:	68b9      	ldr	r1, [r7, #8]
 80176b0:	fb01 f303 	mul.w	r3, r1, r3
 80176b4:	1ad2      	subs	r2, r2, r3
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80176ba:	e002      	b.n	80176c2 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	2200      	movs	r2, #0
 80176c0:	60da      	str	r2, [r3, #12]
}
 80176c2:	bf00      	nop
 80176c4:	3718      	adds	r7, #24
 80176c6:	46bd      	mov	sp, r7
 80176c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80176cc:	b002      	add	sp, #8
 80176ce:	4770      	bx	lr

080176d0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80176d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176d2:	b08f      	sub	sp, #60	; 0x3c
 80176d4:	af04      	add	r7, sp, #16
 80176d6:	6039      	str	r1, [r7, #0]
 80176d8:	4611      	mov	r1, r2
 80176da:	461a      	mov	r2, r3
 80176dc:	4603      	mov	r3, r0
 80176de:	71fb      	strb	r3, [r7, #7]
 80176e0:	460b      	mov	r3, r1
 80176e2:	71bb      	strb	r3, [r7, #6]
 80176e4:	4613      	mov	r3, r2
 80176e6:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80176e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80176ec:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80176ee:	f006 f84d 	bl	801d78c <UTIL_TIMER_GetCurrentTime>
 80176f2:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80176f4:	2300      	movs	r3, #0
 80176f6:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80176f8:	2301      	movs	r3, #1
 80176fa:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80176fc:	2300      	movs	r3, #0
 80176fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8017702:	2300      	movs	r3, #0
 8017704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017708:	e0ba      	b.n	8017880 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801770a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801770e:	4613      	mov	r3, r2
 8017710:	005b      	lsls	r3, r3, #1
 8017712:	4413      	add	r3, r2
 8017714:	00db      	lsls	r3, r3, #3
 8017716:	461a      	mov	r2, r3
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	189c      	adds	r4, r3, r2
 801771c:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8017720:	797a      	ldrb	r2, [r7, #5]
 8017722:	79fd      	ldrb	r5, [r7, #7]
 8017724:	69fb      	ldr	r3, [r7, #28]
 8017726:	9302      	str	r3, [sp, #8]
 8017728:	46ec      	mov	ip, sp
 801772a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801772e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017732:	e88c 0003 	stmia.w	ip, {r0, r1}
 8017736:	4633      	mov	r3, r6
 8017738:	4629      	mov	r1, r5
 801773a:	4620      	mov	r0, r4
 801773c:	f7ff fe22 	bl	8017384 <UpdateTimeCredits>
 8017740:	4603      	mov	r3, r0
 8017742:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8017744:	8afa      	ldrh	r2, [r7, #22]
 8017746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017748:	fb02 f303 	mul.w	r3, r2, r3
 801774c:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801774e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017752:	4613      	mov	r3, r2
 8017754:	005b      	lsls	r3, r3, #1
 8017756:	4413      	add	r3, r2
 8017758:	00db      	lsls	r3, r3, #3
 801775a:	461a      	mov	r2, r3
 801775c:	683b      	ldr	r3, [r7, #0]
 801775e:	4413      	add	r3, r2
 8017760:	68db      	ldr	r3, [r3, #12]
 8017762:	69ba      	ldr	r2, [r7, #24]
 8017764:	429a      	cmp	r2, r3
 8017766:	d908      	bls.n	801777a <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017768:	797b      	ldrb	r3, [r7, #5]
 801776a:	f083 0301 	eor.w	r3, r3, #1
 801776e:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8017770:	2b00      	cmp	r3, #0
 8017772:	d013      	beq.n	801779c <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8017774:	79fb      	ldrb	r3, [r7, #7]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d010      	beq.n	801779c <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801777a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801777e:	4613      	mov	r3, r2
 8017780:	005b      	lsls	r3, r3, #1
 8017782:	4413      	add	r3, r2
 8017784:	00db      	lsls	r3, r3, #3
 8017786:	461a      	mov	r2, r3
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	4413      	add	r3, r2
 801778c:	2201      	movs	r2, #1
 801778e:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8017790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017794:	3301      	adds	r3, #1
 8017796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801779a:	e06c      	b.n	8017876 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 801779c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80177a0:	4613      	mov	r3, r2
 80177a2:	005b      	lsls	r3, r3, #1
 80177a4:	4413      	add	r3, r2
 80177a6:	00db      	lsls	r3, r3, #3
 80177a8:	461a      	mov	r2, r3
 80177aa:	683b      	ldr	r3, [r7, #0]
 80177ac:	4413      	add	r3, r2
 80177ae:	2200      	movs	r2, #0
 80177b0:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 80177b2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80177b6:	4613      	mov	r3, r2
 80177b8:	005b      	lsls	r3, r3, #1
 80177ba:	4413      	add	r3, r2
 80177bc:	00db      	lsls	r3, r3, #3
 80177be:	461a      	mov	r2, r3
 80177c0:	683b      	ldr	r3, [r7, #0]
 80177c2:	4413      	add	r3, r2
 80177c4:	691b      	ldr	r3, [r3, #16]
 80177c6:	69ba      	ldr	r2, [r7, #24]
 80177c8:	429a      	cmp	r2, r3
 80177ca:	d815      	bhi.n	80177f8 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80177cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80177d0:	4613      	mov	r3, r2
 80177d2:	005b      	lsls	r3, r3, #1
 80177d4:	4413      	add	r3, r2
 80177d6:	00db      	lsls	r3, r3, #3
 80177d8:	461a      	mov	r2, r3
 80177da:	683b      	ldr	r3, [r7, #0]
 80177dc:	4413      	add	r3, r2
 80177de:	68db      	ldr	r3, [r3, #12]
 80177e0:	69ba      	ldr	r2, [r7, #24]
 80177e2:	1ad3      	subs	r3, r2, r3
 80177e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177e6:	4293      	cmp	r3, r2
 80177e8:	bf28      	it	cs
 80177ea:	4613      	movcs	r3, r2
 80177ec:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80177ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80177f2:	3301      	adds	r3, #1
 80177f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80177f8:	79fb      	ldrb	r3, [r7, #7]
 80177fa:	f083 0301 	eor.w	r3, r3, #1
 80177fe:	b2db      	uxtb	r3, r3
 8017800:	2b00      	cmp	r3, #0
 8017802:	d038      	beq.n	8017876 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8017804:	2300      	movs	r3, #0
 8017806:	60fb      	str	r3, [r7, #12]
 8017808:	2300      	movs	r3, #0
 801780a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801780c:	8afb      	ldrh	r3, [r7, #22]
 801780e:	2b64      	cmp	r3, #100	; 0x64
 8017810:	d103      	bne.n	801781a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8017812:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8017816:	60fb      	str	r3, [r7, #12]
 8017818:	e009      	b.n	801782e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801781a:	8afb      	ldrh	r3, [r7, #22]
 801781c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017820:	d103      	bne.n	801782a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8017822:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8017826:	60fb      	str	r3, [r7, #12]
 8017828:	e001      	b.n	801782e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801782a:	4b1e      	ldr	r3, [pc, #120]	; (80178a4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801782c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801782e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017830:	4a1c      	ldr	r2, [pc, #112]	; (80178a4 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8017832:	4293      	cmp	r3, r2
 8017834:	d90e      	bls.n	8017854 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8017836:	68fa      	ldr	r2, [r7, #12]
 8017838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801783a:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801783e:	3b30      	subs	r3, #48	; 0x30
 8017840:	4919      	ldr	r1, [pc, #100]	; (80178a8 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8017842:	fba1 1303 	umull	r1, r3, r1, r3
 8017846:	0c1b      	lsrs	r3, r3, #16
 8017848:	3301      	adds	r3, #1
 801784a:	4918      	ldr	r1, [pc, #96]	; (80178ac <RegionCommonUpdateBandTimeOff+0x1dc>)
 801784c:	fb01 f303 	mul.w	r3, r1, r3
 8017850:	4413      	add	r3, r2
 8017852:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8017854:	f107 000c 	add.w	r0, r7, #12
 8017858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801785a:	9300      	str	r3, [sp, #0]
 801785c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801785e:	f107 020c 	add.w	r2, r7, #12
 8017862:	ca06      	ldmia	r2, {r1, r2}
 8017864:	f005 f9b1 	bl	801cbca <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8017868:	f107 030c 	add.w	r3, r7, #12
 801786c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017870:	f005 fa6a 	bl	801cd48 <SysTimeToMs>
 8017874:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8017876:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801787a:	3301      	adds	r3, #1
 801787c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017880:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8017884:	79bb      	ldrb	r3, [r7, #6]
 8017886:	429a      	cmp	r2, r3
 8017888:	f4ff af3f 	bcc.w	801770a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 801788c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017890:	2b00      	cmp	r3, #0
 8017892:	d102      	bne.n	801789a <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8017894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017898:	e000      	b.n	801789c <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801789c:	4618      	mov	r0, r3
 801789e:	372c      	adds	r7, #44	; 0x2c
 80178a0:	46bd      	mov	sp, r7
 80178a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178a4:	0001ec30 	.word	0x0001ec30
 80178a8:	c22e4507 	.word	0xc22e4507
 80178ac:	00015180 	.word	0x00015180

080178b0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80178b0:	b480      	push	{r7}
 80178b2:	b085      	sub	sp, #20
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80178ba:	2300      	movs	r3, #0
 80178bc:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	781b      	ldrb	r3, [r3, #0]
 80178c2:	2b03      	cmp	r3, #3
 80178c4:	d13f      	bne.n	8017946 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	3301      	adds	r3, #1
 80178ca:	781b      	ldrb	r3, [r3, #0]
 80178cc:	b25a      	sxtb	r2, r3
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80178d2:	683b      	ldr	r3, [r7, #0]
 80178d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80178d8:	f003 030f 	and.w	r3, r3, #15
 80178dc:	b25a      	sxtb	r2, r3
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80178e8:	b2db      	uxtb	r3, r3
 80178ea:	091b      	lsrs	r3, r3, #4
 80178ec:	b2db      	uxtb	r3, r3
 80178ee:	b25a      	sxtb	r2, r3
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	3302      	adds	r3, #2
 80178f8:	781b      	ldrb	r3, [r3, #0]
 80178fa:	b29a      	uxth	r2, r3
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8017900:	683b      	ldr	r3, [r7, #0]
 8017902:	889b      	ldrh	r3, [r3, #4]
 8017904:	b21a      	sxth	r2, r3
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	3303      	adds	r3, #3
 801790a:	781b      	ldrb	r3, [r3, #0]
 801790c:	021b      	lsls	r3, r3, #8
 801790e:	b21b      	sxth	r3, r3
 8017910:	4313      	orrs	r3, r2
 8017912:	b21b      	sxth	r3, r3
 8017914:	b29a      	uxth	r2, r3
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	791a      	ldrb	r2, [r3, #4]
 801791e:	683b      	ldr	r3, [r7, #0]
 8017920:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	781b      	ldrb	r3, [r3, #0]
 8017926:	091b      	lsrs	r3, r3, #4
 8017928:	b2db      	uxtb	r3, r3
 801792a:	f003 0307 	and.w	r3, r3, #7
 801792e:	b2da      	uxtb	r2, r3
 8017930:	683b      	ldr	r3, [r7, #0]
 8017932:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	781b      	ldrb	r3, [r3, #0]
 8017938:	f003 030f 	and.w	r3, r3, #15
 801793c:	b2da      	uxtb	r2, r3
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8017942:	2305      	movs	r3, #5
 8017944:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8017946:	7bfb      	ldrb	r3, [r7, #15]
}
 8017948:	4618      	mov	r0, r3
 801794a:	3714      	adds	r7, #20
 801794c:	46bd      	mov	sp, r7
 801794e:	bc80      	pop	{r7}
 8017950:	4770      	bx	lr

08017952 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8017952:	b5b0      	push	{r4, r5, r7, lr}
 8017954:	b088      	sub	sp, #32
 8017956:	af02      	add	r7, sp, #8
 8017958:	60f8      	str	r0, [r7, #12]
 801795a:	60b9      	str	r1, [r7, #8]
 801795c:	607a      	str	r2, [r7, #4]
 801795e:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	791b      	ldrb	r3, [r3, #4]
 8017964:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	799b      	ldrb	r3, [r3, #6]
 801796a:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	79db      	ldrb	r3, [r3, #7]
 8017970:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	7a1b      	ldrb	r3, [r3, #8]
 8017976:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	795b      	ldrb	r3, [r3, #5]
 801797c:	f083 0301 	eor.w	r3, r3, #1
 8017980:	b2db      	uxtb	r3, r3
 8017982:	2b00      	cmp	r3, #0
 8017984:	d008      	beq.n	8017998 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	7adb      	ldrb	r3, [r3, #11]
 801798a:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801798c:	68fb      	ldr	r3, [r7, #12]
 801798e:	7a5b      	ldrb	r3, [r3, #9]
 8017990:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	7a9b      	ldrb	r3, [r3, #10]
 8017996:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8017998:	7dfb      	ldrb	r3, [r7, #23]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d04a      	beq.n	8017a34 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801799e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80179a2:	2b0f      	cmp	r3, #15
 80179a4:	d103      	bne.n	80179ae <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	7a5b      	ldrb	r3, [r3, #9]
 80179aa:	75bb      	strb	r3, [r7, #22]
 80179ac:	e01d      	b.n	80179ea <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	7b18      	ldrb	r0, [r3, #12]
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	6919      	ldr	r1, [r3, #16]
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80179c2:	68fa      	ldr	r2, [r7, #12]
 80179c4:	6992      	ldr	r2, [r2, #24]
 80179c6:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80179ca:	9201      	str	r2, [sp, #4]
 80179cc:	9300      	str	r3, [sp, #0]
 80179ce:	462b      	mov	r3, r5
 80179d0:	4622      	mov	r2, r4
 80179d2:	f7ff fd3a 	bl	801744a <RegionCommonChanVerifyDr>
 80179d6:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80179d8:	f083 0301 	eor.w	r3, r3, #1
 80179dc:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d003      	beq.n	80179ea <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80179e2:	7dfb      	ldrb	r3, [r7, #23]
 80179e4:	f023 0302 	bic.w	r3, r3, #2
 80179e8:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80179ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80179ee:	2b0f      	cmp	r3, #15
 80179f0:	d103      	bne.n	80179fa <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	7a9b      	ldrb	r3, [r3, #10]
 80179f6:	757b      	strb	r3, [r7, #21]
 80179f8:	e01c      	b.n	8017a34 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8017a06:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f7ff fd8f 	bl	801752e <RegionCommonValueInRange>
 8017a10:	4603      	mov	r3, r0
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d10e      	bne.n	8017a34 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8017a1c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8017a20:	429a      	cmp	r2, r3
 8017a22:	da03      	bge.n	8017a2c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	7f5b      	ldrb	r3, [r3, #29]
 8017a28:	757b      	strb	r3, [r7, #21]
 8017a2a:	e003      	b.n	8017a34 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8017a2c:	7dfb      	ldrb	r3, [r7, #23]
 8017a2e:	f023 0304 	bic.w	r3, r3, #4
 8017a32:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8017a34:	7dfb      	ldrb	r3, [r7, #23]
 8017a36:	2b07      	cmp	r3, #7
 8017a38:	d105      	bne.n	8017a46 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8017a3a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d101      	bne.n	8017a46 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8017a42:	2301      	movs	r3, #1
 8017a44:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	7dba      	ldrb	r2, [r7, #22]
 8017a4a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	7d7a      	ldrb	r2, [r7, #21]
 8017a50:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8017a52:	7d3a      	ldrb	r2, [r7, #20]
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	701a      	strb	r2, [r3, #0]

    return status;
 8017a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	3718      	adds	r7, #24
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08017a64 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8017a64:	b480      	push	{r7}
 8017a66:	b083      	sub	sp, #12
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	6039      	str	r1, [r7, #0]
 8017a6e:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8017a70:	79fb      	ldrb	r3, [r7, #7]
 8017a72:	4a06      	ldr	r2, [pc, #24]	; (8017a8c <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8017a74:	fa02 f303 	lsl.w	r3, r2, r3
 8017a78:	461a      	mov	r2, r3
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	370c      	adds	r7, #12
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bc80      	pop	{r7}
 8017a88:	4770      	bx	lr
 8017a8a:	bf00      	nop
 8017a8c:	000f4240 	.word	0x000f4240

08017a90 <RegionCommonComputeRxWindowParameters>:
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8017a90:	b480      	push	{r7}
 8017a92:	b085      	sub	sp, #20
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	60f8      	str	r0, [r7, #12]
 8017a98:	607a      	str	r2, [r7, #4]
 8017a9a:	603b      	str	r3, [r7, #0]
 8017a9c:	460b      	mov	r3, r1
 8017a9e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8017aa0:	7afa      	ldrb	r2, [r7, #11]
 8017aa2:	7afb      	ldrb	r3, [r7, #11]
 8017aa4:	3b04      	subs	r3, #4
 8017aa6:	4619      	mov	r1, r3
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	fb03 f101 	mul.w	r1, r3, r1
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ab4:	fb00 f303 	mul.w	r3, r0, r3
 8017ab8:	440b      	add	r3, r1
 8017aba:	005b      	lsls	r3, r3, #1
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d013      	beq.n	8017ae8 <RegionCommonComputeRxWindowParameters+0x58>
 8017ac0:	7afb      	ldrb	r3, [r7, #11]
 8017ac2:	3b04      	subs	r3, #4
 8017ac4:	4619      	mov	r1, r3
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	fb03 f101 	mul.w	r1, r3, r1
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017ad2:	fb00 f303 	mul.w	r3, r0, r3
 8017ad6:	440b      	add	r3, r1
 8017ad8:	0059      	lsls	r1, r3, #1
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	440b      	add	r3, r1
 8017ade:	1e59      	subs	r1, r3, #1
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	fbb1 f3f3 	udiv	r3, r1, r3
 8017ae6:	e00f      	b.n	8017b08 <RegionCommonComputeRxWindowParameters+0x78>
 8017ae8:	7afb      	ldrb	r3, [r7, #11]
 8017aea:	3b04      	subs	r3, #4
 8017aec:	4619      	mov	r1, r3
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	fb03 f101 	mul.w	r1, r3, r1
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8017afa:	fb00 f303 	mul.w	r3, r0, r3
 8017afe:	440b      	add	r3, r1
 8017b00:	0059      	lsls	r1, r3, #1
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8017b08:	429a      	cmp	r2, r3
 8017b0a:	bf38      	it	cc
 8017b0c:	461a      	movcc	r2, r3
 8017b0e:	69bb      	ldr	r3, [r7, #24]
 8017b10:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	009b      	lsls	r3, r3, #2
 8017b16:	4619      	mov	r1, r3
 8017b18:	69bb      	ldr	r3, [r7, #24]
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	68fa      	ldr	r2, [r7, #12]
 8017b1e:	fb02 f303 	mul.w	r3, r2, r3
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d007      	beq.n	8017b36 <RegionCommonComputeRxWindowParameters+0xa6>
 8017b26:	69bb      	ldr	r3, [r7, #24]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	68fa      	ldr	r2, [r7, #12]
 8017b2c:	fb02 f303 	mul.w	r3, r2, r3
 8017b30:	3301      	adds	r3, #1
 8017b32:	085b      	lsrs	r3, r3, #1
 8017b34:	e005      	b.n	8017b42 <RegionCommonComputeRxWindowParameters+0xb2>
 8017b36:	69bb      	ldr	r3, [r7, #24]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	68fa      	ldr	r2, [r7, #12]
 8017b3c:	fb02 f303 	mul.w	r3, r2, r3
 8017b40:	085b      	lsrs	r3, r3, #1
 8017b42:	1acb      	subs	r3, r1, r3
 8017b44:	683a      	ldr	r2, [r7, #0]
 8017b46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017b4a:	fb01 f202 	mul.w	r2, r1, r2
 8017b4e:	1a9b      	subs	r3, r3, r2
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	dd27      	ble.n	8017ba4 <RegionCommonComputeRxWindowParameters+0x114>
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	009b      	lsls	r3, r3, #2
 8017b58:	4619      	mov	r1, r3
 8017b5a:	69bb      	ldr	r3, [r7, #24]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	68fa      	ldr	r2, [r7, #12]
 8017b60:	fb02 f303 	mul.w	r3, r2, r3
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d007      	beq.n	8017b78 <RegionCommonComputeRxWindowParameters+0xe8>
 8017b68:	69bb      	ldr	r3, [r7, #24]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	68fa      	ldr	r2, [r7, #12]
 8017b6e:	fb02 f303 	mul.w	r3, r2, r3
 8017b72:	3301      	adds	r3, #1
 8017b74:	085b      	lsrs	r3, r3, #1
 8017b76:	e005      	b.n	8017b84 <RegionCommonComputeRxWindowParameters+0xf4>
 8017b78:	69bb      	ldr	r3, [r7, #24]
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	68fa      	ldr	r2, [r7, #12]
 8017b7e:	fb02 f303 	mul.w	r3, r2, r3
 8017b82:	085b      	lsrs	r3, r3, #1
 8017b84:	1acb      	subs	r3, r1, r3
 8017b86:	683a      	ldr	r2, [r7, #0]
 8017b88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017b8c:	fb01 f202 	mul.w	r2, r1, r2
 8017b90:	1a9b      	subs	r3, r3, r2
 8017b92:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8017b96:	4a19      	ldr	r2, [pc, #100]	; (8017bfc <RegionCommonComputeRxWindowParameters+0x16c>)
 8017b98:	fb82 1203 	smull	r1, r2, r2, r3
 8017b9c:	1192      	asrs	r2, r2, #6
 8017b9e:	17db      	asrs	r3, r3, #31
 8017ba0:	1ad3      	subs	r3, r2, r3
 8017ba2:	e024      	b.n	8017bee <RegionCommonComputeRxWindowParameters+0x15e>
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	009b      	lsls	r3, r3, #2
 8017ba8:	4619      	mov	r1, r3
 8017baa:	69bb      	ldr	r3, [r7, #24]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	68fa      	ldr	r2, [r7, #12]
 8017bb0:	fb02 f303 	mul.w	r3, r2, r3
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d007      	beq.n	8017bc8 <RegionCommonComputeRxWindowParameters+0x138>
 8017bb8:	69bb      	ldr	r3, [r7, #24]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	68fa      	ldr	r2, [r7, #12]
 8017bbe:	fb02 f303 	mul.w	r3, r2, r3
 8017bc2:	3301      	adds	r3, #1
 8017bc4:	085b      	lsrs	r3, r3, #1
 8017bc6:	e005      	b.n	8017bd4 <RegionCommonComputeRxWindowParameters+0x144>
 8017bc8:	69bb      	ldr	r3, [r7, #24]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	68fa      	ldr	r2, [r7, #12]
 8017bce:	fb02 f303 	mul.w	r3, r2, r3
 8017bd2:	085b      	lsrs	r3, r3, #1
 8017bd4:	1acb      	subs	r3, r1, r3
 8017bd6:	683a      	ldr	r2, [r7, #0]
 8017bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017bdc:	fb01 f202 	mul.w	r2, r1, r2
 8017be0:	1a9b      	subs	r3, r3, r2
 8017be2:	4a06      	ldr	r2, [pc, #24]	; (8017bfc <RegionCommonComputeRxWindowParameters+0x16c>)
 8017be4:	fb82 1203 	smull	r1, r2, r2, r3
 8017be8:	1192      	asrs	r2, r2, #6
 8017bea:	17db      	asrs	r3, r3, #31
 8017bec:	1ad3      	subs	r3, r2, r3
 8017bee:	69fa      	ldr	r2, [r7, #28]
 8017bf0:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8017bf2:	bf00      	nop
 8017bf4:	3714      	adds	r7, #20
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bc80      	pop	{r7}
 8017bfa:	4770      	bx	lr
 8017bfc:	10624dd3 	.word	0x10624dd3

08017c00 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b086      	sub	sp, #24
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	4603      	mov	r3, r0
 8017c08:	60b9      	str	r1, [r7, #8]
 8017c0a:	607a      	str	r2, [r7, #4]
 8017c0c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8017c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c16:	005b      	lsls	r3, r3, #1
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f7e8 ffe9 	bl	8000bf0 <__aeabi_ui2f>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	4619      	mov	r1, r3
 8017c22:	68b8      	ldr	r0, [r7, #8]
 8017c24:	f7e8 ff32 	bl	8000a8c <__aeabi_fsub>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	6879      	ldr	r1, [r7, #4]
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7e8 ff2d 	bl	8000a8c <__aeabi_fsub>
 8017c32:	4603      	mov	r3, r0
 8017c34:	4618      	mov	r0, r3
 8017c36:	f7e8 fc0b 	bl	8000450 <__aeabi_f2d>
 8017c3a:	4602      	mov	r2, r0
 8017c3c:	460b      	mov	r3, r1
 8017c3e:	4610      	mov	r0, r2
 8017c40:	4619      	mov	r1, r3
 8017c42:	f006 f90d 	bl	801de60 <floor>
 8017c46:	4602      	mov	r2, r0
 8017c48:	460b      	mov	r3, r1
 8017c4a:	4610      	mov	r0, r2
 8017c4c:	4619      	mov	r1, r3
 8017c4e:	f7e8 fef1 	bl	8000a34 <__aeabi_d2iz>
 8017c52:	4603      	mov	r3, r0
 8017c54:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8017c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	3718      	adds	r7, #24
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}

08017c62 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8017c62:	b590      	push	{r4, r7, lr}
 8017c64:	b087      	sub	sp, #28
 8017c66:	af00      	add	r7, sp, #0
 8017c68:	60f8      	str	r0, [r7, #12]
 8017c6a:	60b9      	str	r1, [r7, #8]
 8017c6c:	607a      	str	r2, [r7, #4]
 8017c6e:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8017c70:	2300      	movs	r3, #0
 8017c72:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8017c74:	2300      	movs	r3, #0
 8017c76:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017c78:	2300      	movs	r3, #0
 8017c7a:	757b      	strb	r3, [r7, #21]
 8017c7c:	2300      	movs	r3, #0
 8017c7e:	753b      	strb	r3, [r7, #20]
 8017c80:	e09c      	b.n	8017dbc <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017c82:	2300      	movs	r3, #0
 8017c84:	74fb      	strb	r3, [r7, #19]
 8017c86:	e08f      	b.n	8017da8 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	685a      	ldr	r2, [r3, #4]
 8017c8c:	7d3b      	ldrb	r3, [r7, #20]
 8017c8e:	005b      	lsls	r3, r3, #1
 8017c90:	4413      	add	r3, r2
 8017c92:	881b      	ldrh	r3, [r3, #0]
 8017c94:	461a      	mov	r2, r3
 8017c96:	7cfb      	ldrb	r3, [r7, #19]
 8017c98:	fa42 f303 	asr.w	r3, r2, r3
 8017c9c:	f003 0301 	and.w	r3, r3, #1
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d07e      	beq.n	8017da2 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	689a      	ldr	r2, [r3, #8]
 8017ca8:	7d79      	ldrb	r1, [r7, #21]
 8017caa:	7cfb      	ldrb	r3, [r7, #19]
 8017cac:	440b      	add	r3, r1
 8017cae:	4619      	mov	r1, r3
 8017cb0:	460b      	mov	r3, r1
 8017cb2:	005b      	lsls	r3, r3, #1
 8017cb4:	440b      	add	r3, r1
 8017cb6:	009b      	lsls	r3, r3, #2
 8017cb8:	4413      	add	r3, r2
 8017cba:	681b      	ldr	r3, [r3, #0]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d06b      	beq.n	8017d98 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	781b      	ldrb	r3, [r3, #0]
 8017cc4:	f083 0301 	eor.w	r3, r3, #1
 8017cc8:	b2db      	uxtb	r3, r3
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	d011      	beq.n	8017cf2 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d00d      	beq.n	8017cf2 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8017cd6:	68fb      	ldr	r3, [r7, #12]
 8017cd8:	695a      	ldr	r2, [r3, #20]
 8017cda:	7d3b      	ldrb	r3, [r7, #20]
 8017cdc:	005b      	lsls	r3, r3, #1
 8017cde:	4413      	add	r3, r2
 8017ce0:	881b      	ldrh	r3, [r3, #0]
 8017ce2:	461a      	mov	r2, r3
 8017ce4:	7cfb      	ldrb	r3, [r7, #19]
 8017ce6:	fa42 f303 	asr.w	r3, r2, r3
 8017cea:	f003 0301 	and.w	r3, r3, #1
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d054      	beq.n	8017d9c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	785b      	ldrb	r3, [r3, #1]
 8017cf6:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	689a      	ldr	r2, [r3, #8]
 8017cfc:	7d79      	ldrb	r1, [r7, #21]
 8017cfe:	7cfb      	ldrb	r3, [r7, #19]
 8017d00:	440b      	add	r3, r1
 8017d02:	4619      	mov	r1, r3
 8017d04:	460b      	mov	r3, r1
 8017d06:	005b      	lsls	r3, r3, #1
 8017d08:	440b      	add	r3, r1
 8017d0a:	009b      	lsls	r3, r3, #2
 8017d0c:	4413      	add	r3, r2
 8017d0e:	7a1b      	ldrb	r3, [r3, #8]
 8017d10:	f343 0303 	sbfx	r3, r3, #0, #4
 8017d14:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017d16:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	689a      	ldr	r2, [r3, #8]
 8017d1c:	7d79      	ldrb	r1, [r7, #21]
 8017d1e:	7cfb      	ldrb	r3, [r7, #19]
 8017d20:	440b      	add	r3, r1
 8017d22:	4619      	mov	r1, r3
 8017d24:	460b      	mov	r3, r1
 8017d26:	005b      	lsls	r3, r3, #1
 8017d28:	440b      	add	r3, r1
 8017d2a:	009b      	lsls	r3, r3, #2
 8017d2c:	4413      	add	r3, r2
 8017d2e:	7a1b      	ldrb	r3, [r3, #8]
 8017d30:	f343 1303 	sbfx	r3, r3, #4, #4
 8017d34:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8017d36:	461a      	mov	r2, r3
 8017d38:	4621      	mov	r1, r4
 8017d3a:	f7ff fbf8 	bl	801752e <RegionCommonValueInRange>
 8017d3e:	4603      	mov	r3, r0
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d02d      	beq.n	8017da0 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	68da      	ldr	r2, [r3, #12]
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	6899      	ldr	r1, [r3, #8]
 8017d4c:	7d78      	ldrb	r0, [r7, #21]
 8017d4e:	7cfb      	ldrb	r3, [r7, #19]
 8017d50:	4403      	add	r3, r0
 8017d52:	4618      	mov	r0, r3
 8017d54:	4603      	mov	r3, r0
 8017d56:	005b      	lsls	r3, r3, #1
 8017d58:	4403      	add	r3, r0
 8017d5a:	009b      	lsls	r3, r3, #2
 8017d5c:	440b      	add	r3, r1
 8017d5e:	7a5b      	ldrb	r3, [r3, #9]
 8017d60:	4619      	mov	r1, r3
 8017d62:	460b      	mov	r3, r1
 8017d64:	005b      	lsls	r3, r3, #1
 8017d66:	440b      	add	r3, r1
 8017d68:	00db      	lsls	r3, r3, #3
 8017d6a:	4413      	add	r3, r2
 8017d6c:	7d1b      	ldrb	r3, [r3, #20]
 8017d6e:	f083 0301 	eor.w	r3, r3, #1
 8017d72:	b2db      	uxtb	r3, r3
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d003      	beq.n	8017d80 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8017d78:	7dbb      	ldrb	r3, [r7, #22]
 8017d7a:	3301      	adds	r3, #1
 8017d7c:	75bb      	strb	r3, [r7, #22]
                    continue;
 8017d7e:	e010      	b.n	8017da2 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8017d80:	7dfb      	ldrb	r3, [r7, #23]
 8017d82:	1c5a      	adds	r2, r3, #1
 8017d84:	75fa      	strb	r2, [r7, #23]
 8017d86:	461a      	mov	r2, r3
 8017d88:	68bb      	ldr	r3, [r7, #8]
 8017d8a:	4413      	add	r3, r2
 8017d8c:	7d79      	ldrb	r1, [r7, #21]
 8017d8e:	7cfa      	ldrb	r2, [r7, #19]
 8017d90:	440a      	add	r2, r1
 8017d92:	b2d2      	uxtb	r2, r2
 8017d94:	701a      	strb	r2, [r3, #0]
 8017d96:	e004      	b.n	8017da2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017d98:	bf00      	nop
 8017d9a:	e002      	b.n	8017da2 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8017d9c:	bf00      	nop
 8017d9e:	e000      	b.n	8017da2 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8017da0:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8017da2:	7cfb      	ldrb	r3, [r7, #19]
 8017da4:	3301      	adds	r3, #1
 8017da6:	74fb      	strb	r3, [r7, #19]
 8017da8:	7cfb      	ldrb	r3, [r7, #19]
 8017daa:	2b0f      	cmp	r3, #15
 8017dac:	f67f af6c 	bls.w	8017c88 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8017db0:	7d7b      	ldrb	r3, [r7, #21]
 8017db2:	3310      	adds	r3, #16
 8017db4:	757b      	strb	r3, [r7, #21]
 8017db6:	7d3b      	ldrb	r3, [r7, #20]
 8017db8:	3301      	adds	r3, #1
 8017dba:	753b      	strb	r3, [r7, #20]
 8017dbc:	7d7b      	ldrb	r3, [r7, #21]
 8017dbe:	b29a      	uxth	r2, r3
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	8a1b      	ldrh	r3, [r3, #16]
 8017dc4:	429a      	cmp	r2, r3
 8017dc6:	f4ff af5c 	bcc.w	8017c82 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	7dfa      	ldrb	r2, [r7, #23]
 8017dce:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8017dd0:	683b      	ldr	r3, [r7, #0]
 8017dd2:	7dba      	ldrb	r2, [r7, #22]
 8017dd4:	701a      	strb	r2, [r3, #0]
}
 8017dd6:	bf00      	nop
 8017dd8:	371c      	adds	r7, #28
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bd90      	pop	{r4, r7, pc}

08017dde <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8017dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017de0:	b08b      	sub	sp, #44	; 0x2c
 8017de2:	af04      	add	r7, sp, #16
 8017de4:	60f8      	str	r0, [r7, #12]
 8017de6:	60b9      	str	r1, [r7, #8]
 8017de8:	607a      	str	r2, [r7, #4]
 8017dea:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	4618      	mov	r0, r3
 8017df2:	f005 fcdd 	bl	801d7b0 <UTIL_TIMER_GetElapsedTime>
 8017df6:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8017df8:	68fb      	ldr	r3, [r7, #12]
 8017dfa:	681a      	ldr	r2, [r3, #0]
 8017dfc:	697b      	ldr	r3, [r7, #20]
 8017dfe:	1ad2      	subs	r2, r2, r3
 8017e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e02:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8017e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e06:	2201      	movs	r2, #1
 8017e08:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8017e0a:	683b      	ldr	r3, [r7, #0]
 8017e0c:	2200      	movs	r2, #0
 8017e0e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	685b      	ldr	r3, [r3, #4]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d004      	beq.n	8017e22 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8017e1c:	697a      	ldr	r2, [r7, #20]
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	d32b      	bcc.n	8017e7a <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017e22:	68bb      	ldr	r3, [r7, #8]
 8017e24:	2200      	movs	r2, #0
 8017e26:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	69db      	ldr	r3, [r3, #28]
 8017e2c:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8017e32:	68dd      	ldr	r5, [r3, #12]
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	7a5e      	ldrb	r6, [r3, #9]
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	f893 c008 	ldrb.w	ip, [r3, #8]
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	7d1b      	ldrb	r3, [r3, #20]
 8017e42:	68fa      	ldr	r2, [r7, #12]
 8017e44:	6992      	ldr	r2, [r2, #24]
 8017e46:	9203      	str	r2, [sp, #12]
 8017e48:	68fa      	ldr	r2, [r7, #12]
 8017e4a:	f10d 0e04 	add.w	lr, sp, #4
 8017e4e:	320c      	adds	r2, #12
 8017e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017e54:	e88e 0003 	stmia.w	lr, {r0, r1}
 8017e58:	9300      	str	r3, [sp, #0]
 8017e5a:	4663      	mov	r3, ip
 8017e5c:	4632      	mov	r2, r6
 8017e5e:	4629      	mov	r1, r5
 8017e60:	4620      	mov	r0, r4
 8017e62:	f7ff fc35 	bl	80176d0 <RegionCommonUpdateBandTimeOff>
 8017e66:	4602      	mov	r2, r0
 8017e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e6a:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	69d8      	ldr	r0, [r3, #28]
 8017e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e72:	683a      	ldr	r2, [r7, #0]
 8017e74:	6879      	ldr	r1, [r7, #4]
 8017e76:	f7ff fef4 	bl	8017c62 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8017e7a:	683b      	ldr	r3, [r7, #0]
 8017e7c:	781b      	ldrb	r3, [r3, #0]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d004      	beq.n	8017e8c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8017e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e84:	2200      	movs	r2, #0
 8017e86:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017e88:	2300      	movs	r3, #0
 8017e8a:	e006      	b.n	8017e9a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8017e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8e:	781b      	ldrb	r3, [r3, #0]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d001      	beq.n	8017e98 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8017e94:	230b      	movs	r3, #11
 8017e96:	e000      	b.n	8017e9a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017e98:	230c      	movs	r3, #12
    }
}
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	371c      	adds	r7, #28
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017ea2 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8017ea2:	b5b0      	push	{r4, r5, r7, lr}
 8017ea4:	b086      	sub	sp, #24
 8017ea6:	af02      	add	r7, sp, #8
 8017ea8:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	781b      	ldrb	r3, [r3, #0]
 8017eae:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	f993 2000 	ldrsb.w	r2, [r3]
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d103      	bne.n	8017ec8 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017ec6:	e026      	b.n	8017f16 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8017ec8:	7bfb      	ldrb	r3, [r7, #15]
 8017eca:	3b01      	subs	r3, #1
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017ed6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d019      	beq.n	8017f12 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	78d8      	ldrb	r0, [r3, #3]
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	6859      	ldr	r1, [r3, #4]
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017ef2:	687a      	ldr	r2, [r7, #4]
 8017ef4:	6892      	ldr	r2, [r2, #8]
 8017ef6:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8017efa:	9201      	str	r2, [sp, #4]
 8017efc:	9300      	str	r3, [sp, #0]
 8017efe:	462b      	mov	r3, r5
 8017f00:	4622      	mov	r2, r4
 8017f02:	f7ff faa2 	bl	801744a <RegionCommonChanVerifyDr>
 8017f06:	4603      	mov	r3, r0
 8017f08:	f083 0301 	eor.w	r3, r3, #1
 8017f0c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d1da      	bne.n	8017ec8 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8017f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8017f16:	4618      	mov	r0, r3
 8017f18:	3710      	adds	r7, #16
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bdb0      	pop	{r4, r5, r7, pc}

08017f1e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8017f1e:	b480      	push	{r7}
 8017f20:	b083      	sub	sp, #12
 8017f22:	af00      	add	r7, sp, #0
 8017f24:	4603      	mov	r3, r0
 8017f26:	460a      	mov	r2, r1
 8017f28:	71fb      	strb	r3, [r7, #7]
 8017f2a:	4613      	mov	r3, r2
 8017f2c:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8017f2e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f36:	4293      	cmp	r3, r2
 8017f38:	bfb8      	it	lt
 8017f3a:	4613      	movlt	r3, r2
 8017f3c:	b25b      	sxtb	r3, r3
}
 8017f3e:	4618      	mov	r0, r3
 8017f40:	370c      	adds	r7, #12
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bc80      	pop	{r7}
 8017f46:	4770      	bx	lr

08017f48 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8017f48:	b480      	push	{r7}
 8017f4a:	b083      	sub	sp, #12
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	009b      	lsls	r3, r3, #2
 8017f56:	683a      	ldr	r2, [r7, #0]
 8017f58:	4413      	add	r3, r2
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	4a07      	ldr	r2, [pc, #28]	; (8017f7c <RegionCommonGetBandwidth+0x34>)
 8017f5e:	4293      	cmp	r3, r2
 8017f60:	d004      	beq.n	8017f6c <RegionCommonGetBandwidth+0x24>
 8017f62:	4a07      	ldr	r2, [pc, #28]	; (8017f80 <RegionCommonGetBandwidth+0x38>)
 8017f64:	4293      	cmp	r3, r2
 8017f66:	d003      	beq.n	8017f70 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8017f68:	2300      	movs	r3, #0
 8017f6a:	e002      	b.n	8017f72 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8017f6c:	2301      	movs	r3, #1
 8017f6e:	e000      	b.n	8017f72 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8017f70:	2302      	movs	r3, #2
    }
}
 8017f72:	4618      	mov	r0, r3
 8017f74:	370c      	adds	r7, #12
 8017f76:	46bd      	mov	sp, r7
 8017f78:	bc80      	pop	{r7}
 8017f7a:	4770      	bx	lr
 8017f7c:	0003d090 	.word	0x0003d090
 8017f80:	0007a120 	.word	0x0007a120

08017f84 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b086      	sub	sp, #24
 8017f88:	af04      	add	r7, sp, #16
 8017f8a:	4603      	mov	r3, r0
 8017f8c:	6039      	str	r1, [r7, #0]
 8017f8e:	71fb      	strb	r3, [r7, #7]
 8017f90:	4613      	mov	r3, r2
 8017f92:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8017f94:	79fb      	ldrb	r3, [r7, #7]
 8017f96:	2b05      	cmp	r3, #5
 8017f98:	d810      	bhi.n	8017fbc <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8017f9a:	79fb      	ldrb	r3, [r7, #7]
 8017f9c:	4a0f      	ldr	r2, [pc, #60]	; (8017fdc <RegionCommonRxConfigPrint+0x58>)
 8017f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017fa2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8017fa6:	9202      	str	r2, [sp, #8]
 8017fa8:	683a      	ldr	r2, [r7, #0]
 8017faa:	9201      	str	r2, [sp, #4]
 8017fac:	9300      	str	r3, [sp, #0]
 8017fae:	4b0c      	ldr	r3, [pc, #48]	; (8017fe0 <RegionCommonRxConfigPrint+0x5c>)
 8017fb0:	2201      	movs	r2, #1
 8017fb2:	2100      	movs	r1, #0
 8017fb4:	2002      	movs	r0, #2
 8017fb6:	f005 fcd9 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8017fba:	e00a      	b.n	8017fd2 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017fbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017fc0:	9301      	str	r3, [sp, #4]
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	9300      	str	r3, [sp, #0]
 8017fc6:	4b07      	ldr	r3, [pc, #28]	; (8017fe4 <RegionCommonRxConfigPrint+0x60>)
 8017fc8:	2201      	movs	r2, #1
 8017fca:	2100      	movs	r1, #0
 8017fcc:	2002      	movs	r0, #2
 8017fce:	f005 fccd 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 8017fd2:	bf00      	nop
 8017fd4:	3708      	adds	r7, #8
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	bd80      	pop	{r7, pc}
 8017fda:	bf00      	nop
 8017fdc:	20000118 	.word	0x20000118
 8017fe0:	0801e7d4 	.word	0x0801e7d4
 8017fe4:	0801e7f4 	.word	0x0801e7f4

08017fe8 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b084      	sub	sp, #16
 8017fec:	af02      	add	r7, sp, #8
 8017fee:	6078      	str	r0, [r7, #4]
 8017ff0:	460b      	mov	r3, r1
 8017ff2:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8017ff4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ff8:	9301      	str	r3, [sp, #4]
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	9300      	str	r3, [sp, #0]
 8017ffe:	4b05      	ldr	r3, [pc, #20]	; (8018014 <RegionCommonTxConfigPrint+0x2c>)
 8018000:	2201      	movs	r2, #1
 8018002:	2100      	movs	r1, #0
 8018004:	2002      	movs	r0, #2
 8018006:	f005 fcb1 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
}
 801800a:	bf00      	nop
 801800c:	3708      	adds	r7, #8
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	0801e810 	.word	0x0801e810

08018018 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b084      	sub	sp, #16
 801801c:	af00      	add	r7, sp, #0
 801801e:	603b      	str	r3, [r7, #0]
 8018020:	4603      	mov	r3, r0
 8018022:	71fb      	strb	r3, [r7, #7]
 8018024:	460b      	mov	r3, r1
 8018026:	71bb      	strb	r3, [r7, #6]
 8018028:	4613      	mov	r3, r2
 801802a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801802c:	79fb      	ldrb	r3, [r7, #7]
 801802e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8018030:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018038:	4611      	mov	r1, r2
 801803a:	4618      	mov	r0, r3
 801803c:	f7ff ff6f 	bl	8017f1e <RegionCommonLimitTxPower>
 8018040:	4603      	mov	r3, r0
 8018042:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8018044:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018048:	2b04      	cmp	r3, #4
 801804a:	d106      	bne.n	801805a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801804c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018050:	2b02      	cmp	r3, #2
 8018052:	bfb8      	it	lt
 8018054:	2302      	movlt	r3, #2
 8018056:	73fb      	strb	r3, [r7, #15]
 8018058:	e00d      	b.n	8018076 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801805a:	2204      	movs	r2, #4
 801805c:	2100      	movs	r1, #0
 801805e:	6838      	ldr	r0, [r7, #0]
 8018060:	f7ff fab6 	bl	80175d0 <RegionCommonCountChannels>
 8018064:	4603      	mov	r3, r0
 8018066:	2b31      	cmp	r3, #49	; 0x31
 8018068:	d805      	bhi.n	8018076 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801806a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801806e:	2b05      	cmp	r3, #5
 8018070:	bfb8      	it	lt
 8018072:	2305      	movlt	r3, #5
 8018074:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8018076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801807a:	4618      	mov	r0, r3
 801807c:	3710      	adds	r7, #16
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}
	...

08018084 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8018084:	b580      	push	{r7, lr}
 8018086:	b082      	sub	sp, #8
 8018088:	af00      	add	r7, sp, #0
 801808a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801808c:	4b18      	ldr	r3, [pc, #96]	; (80180f0 <VerifyRfFreq+0x6c>)
 801808e:	6a1b      	ldr	r3, [r3, #32]
 8018090:	6878      	ldr	r0, [r7, #4]
 8018092:	4798      	blx	r3
 8018094:	4603      	mov	r3, r0
 8018096:	f083 0301 	eor.w	r3, r3, #1
 801809a:	b2db      	uxtb	r3, r3
 801809c:	2b00      	cmp	r3, #0
 801809e:	d001      	beq.n	80180a4 <VerifyRfFreq+0x20>
    {
        return false;
 80180a0:	2300      	movs	r3, #0
 80180a2:	e021      	b.n	80180e8 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	4a13      	ldr	r2, [pc, #76]	; (80180f4 <VerifyRfFreq+0x70>)
 80180a8:	4293      	cmp	r3, r2
 80180aa:	d910      	bls.n	80180ce <VerifyRfFreq+0x4a>
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	4a12      	ldr	r2, [pc, #72]	; (80180f8 <VerifyRfFreq+0x74>)
 80180b0:	4293      	cmp	r3, r2
 80180b2:	d80c      	bhi.n	80180ce <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80180b4:	687a      	ldr	r2, [r7, #4]
 80180b6:	4b11      	ldr	r3, [pc, #68]	; (80180fc <VerifyRfFreq+0x78>)
 80180b8:	4413      	add	r3, r2
 80180ba:	4a11      	ldr	r2, [pc, #68]	; (8018100 <VerifyRfFreq+0x7c>)
 80180bc:	fba2 1203 	umull	r1, r2, r2, r3
 80180c0:	0c92      	lsrs	r2, r2, #18
 80180c2:	4910      	ldr	r1, [pc, #64]	; (8018104 <VerifyRfFreq+0x80>)
 80180c4:	fb01 f202 	mul.w	r2, r1, r2
 80180c8:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80180ca:	2a00      	cmp	r2, #0
 80180cc:	d001      	beq.n	80180d2 <VerifyRfFreq+0x4e>
    {
        return false;
 80180ce:	2300      	movs	r3, #0
 80180d0:	e00a      	b.n	80180e8 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	4a0c      	ldr	r2, [pc, #48]	; (8018108 <VerifyRfFreq+0x84>)
 80180d6:	4293      	cmp	r3, r2
 80180d8:	d903      	bls.n	80180e2 <VerifyRfFreq+0x5e>
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	4a06      	ldr	r2, [pc, #24]	; (80180f8 <VerifyRfFreq+0x74>)
 80180de:	4293      	cmp	r3, r2
 80180e0:	d901      	bls.n	80180e6 <VerifyRfFreq+0x62>
    {
        return false;
 80180e2:	2300      	movs	r3, #0
 80180e4:	e000      	b.n	80180e8 <VerifyRfFreq+0x64>
    }
    return true;
 80180e6:	2301      	movs	r3, #1
}
 80180e8:	4618      	mov	r0, r3
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	0801ee44 	.word	0x0801ee44
 80180f4:	3708709f 	.word	0x3708709f
 80180f8:	374886e0 	.word	0x374886e0
 80180fc:	c8f78f60 	.word	0xc8f78f60
 8018100:	6fd91d85 	.word	0x6fd91d85
 8018104:	000927c0 	.word	0x000927c0
 8018108:	35c8015f 	.word	0x35c8015f

0801810c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801810c:	b590      	push	{r4, r7, lr}
 801810e:	b089      	sub	sp, #36	; 0x24
 8018110:	af04      	add	r7, sp, #16
 8018112:	4603      	mov	r3, r0
 8018114:	460a      	mov	r2, r1
 8018116:	71fb      	strb	r3, [r7, #7]
 8018118:	4613      	mov	r3, r2
 801811a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801811c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018120:	4a0f      	ldr	r2, [pc, #60]	; (8018160 <GetTimeOnAir+0x54>)
 8018122:	5cd3      	ldrb	r3, [r2, r3]
 8018124:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8018126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801812a:	490e      	ldr	r1, [pc, #56]	; (8018164 <GetTimeOnAir+0x58>)
 801812c:	4618      	mov	r0, r3
 801812e:	f7ff ff0b 	bl	8017f48 <RegionCommonGetBandwidth>
 8018132:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018134:	4b0c      	ldr	r3, [pc, #48]	; (8018168 <GetTimeOnAir+0x5c>)
 8018136:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018138:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801813c:	88bb      	ldrh	r3, [r7, #4]
 801813e:	b2db      	uxtb	r3, r3
 8018140:	2101      	movs	r1, #1
 8018142:	9103      	str	r1, [sp, #12]
 8018144:	9302      	str	r3, [sp, #8]
 8018146:	2300      	movs	r3, #0
 8018148:	9301      	str	r3, [sp, #4]
 801814a:	2308      	movs	r3, #8
 801814c:	9300      	str	r3, [sp, #0]
 801814e:	2301      	movs	r3, #1
 8018150:	68b9      	ldr	r1, [r7, #8]
 8018152:	2001      	movs	r0, #1
 8018154:	47a0      	blx	r4
 8018156:	4603      	mov	r3, r0
}
 8018158:	4618      	mov	r0, r3
 801815a:	3714      	adds	r7, #20
 801815c:	46bd      	mov	sp, r7
 801815e:	bd90      	pop	{r4, r7, pc}
 8018160:	0801edc0 	.word	0x0801edc0
 8018164:	0801edd0 	.word	0x0801edd0
 8018168:	0801ee44 	.word	0x0801ee44

0801816c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b088      	sub	sp, #32
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018174:	2300      	movs	r3, #0
 8018176:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	3b01      	subs	r3, #1
 801817e:	2b37      	cmp	r3, #55	; 0x37
 8018180:	f200 8136 	bhi.w	80183f0 <RegionUS915GetPhyParam+0x284>
 8018184:	a201      	add	r2, pc, #4	; (adr r2, 801818c <RegionUS915GetPhyParam+0x20>)
 8018186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801818a:	bf00      	nop
 801818c:	0801826d 	.word	0x0801826d
 8018190:	08018273 	.word	0x08018273
 8018194:	080183f1 	.word	0x080183f1
 8018198:	080183f1 	.word	0x080183f1
 801819c:	080183f1 	.word	0x080183f1
 80181a0:	08018279 	.word	0x08018279
 80181a4:	080183f1 	.word	0x080183f1
 80181a8:	080182b3 	.word	0x080182b3
 80181ac:	080183f1 	.word	0x080183f1
 80181b0:	080182b9 	.word	0x080182b9
 80181b4:	080182bf 	.word	0x080182bf
 80181b8:	080182c5 	.word	0x080182c5
 80181bc:	080182cb 	.word	0x080182cb
 80181c0:	080182db 	.word	0x080182db
 80181c4:	080182eb 	.word	0x080182eb
 80181c8:	080182f1 	.word	0x080182f1
 80181cc:	080182f9 	.word	0x080182f9
 80181d0:	08018301 	.word	0x08018301
 80181d4:	08018309 	.word	0x08018309
 80181d8:	08018311 	.word	0x08018311
 80181dc:	08018319 	.word	0x08018319
 80181e0:	0801832d 	.word	0x0801832d
 80181e4:	08018333 	.word	0x08018333
 80181e8:	08018339 	.word	0x08018339
 80181ec:	0801833f 	.word	0x0801833f
 80181f0:	0801834b 	.word	0x0801834b
 80181f4:	08018357 	.word	0x08018357
 80181f8:	0801835d 	.word	0x0801835d
 80181fc:	08018365 	.word	0x08018365
 8018200:	0801836b 	.word	0x0801836b
 8018204:	08018371 	.word	0x08018371
 8018208:	08018377 	.word	0x08018377
 801820c:	0801827f 	.word	0x0801827f
 8018210:	080183f1 	.word	0x080183f1
 8018214:	080183f1 	.word	0x080183f1
 8018218:	080183f1 	.word	0x080183f1
 801821c:	080183f1 	.word	0x080183f1
 8018220:	080183f1 	.word	0x080183f1
 8018224:	080183f1 	.word	0x080183f1
 8018228:	080183f1 	.word	0x080183f1
 801822c:	080183f1 	.word	0x080183f1
 8018230:	080183f1 	.word	0x080183f1
 8018234:	080183f1 	.word	0x080183f1
 8018238:	080183f1 	.word	0x080183f1
 801823c:	080183f1 	.word	0x080183f1
 8018240:	080183f1 	.word	0x080183f1
 8018244:	0801837f 	.word	0x0801837f
 8018248:	08018393 	.word	0x08018393
 801824c:	080183a1 	.word	0x080183a1
 8018250:	080183a7 	.word	0x080183a7
 8018254:	080183f1 	.word	0x080183f1
 8018258:	080183ad 	.word	0x080183ad
 801825c:	080183c1 	.word	0x080183c1
 8018260:	080183c7 	.word	0x080183c7
 8018264:	080183cd 	.word	0x080183cd
 8018268:	080183dd 	.word	0x080183dd
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801826c:	2308      	movs	r3, #8
 801826e:	61bb      	str	r3, [r7, #24]
            break;
 8018270:	e0bf      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8018272:	2300      	movs	r3, #0
 8018274:	61bb      	str	r3, [r7, #24]
            break;
 8018276:	e0bc      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8018278:	2300      	movs	r3, #0
 801827a:	61bb      	str	r3, [r7, #24]
            break;
 801827c:	e0b9      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018284:	733b      	strb	r3, [r7, #12]
 8018286:	2304      	movs	r3, #4
 8018288:	737b      	strb	r3, [r7, #13]
 801828a:	2300      	movs	r3, #0
 801828c:	73bb      	strb	r3, [r7, #14]
 801828e:	2348      	movs	r3, #72	; 0x48
 8018290:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018292:	4b5b      	ldr	r3, [pc, #364]	; (8018400 <RegionUS915GetPhyParam+0x294>)
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801829a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801829c:	4b58      	ldr	r3, [pc, #352]	; (8018400 <RegionUS915GetPhyParam+0x294>)
 801829e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80182a0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80182a2:	f107 030c 	add.w	r3, r7, #12
 80182a6:	4618      	mov	r0, r3
 80182a8:	f7ff fdfb 	bl	8017ea2 <RegionCommonGetNextLowerTxDr>
 80182ac:	4603      	mov	r3, r0
 80182ae:	61bb      	str	r3, [r7, #24]
            break;
 80182b0:	e09f      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 80182b2:	2300      	movs	r3, #0
 80182b4:	61bb      	str	r3, [r7, #24]
            break;
 80182b6:	e09c      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 80182b8:	2300      	movs	r3, #0
 80182ba:	61bb      	str	r3, [r7, #24]
            break;
 80182bc:	e099      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80182be:	2340      	movs	r3, #64	; 0x40
 80182c0:	61bb      	str	r3, [r7, #24]
            break;
 80182c2:	e096      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80182c4:	2320      	movs	r3, #32
 80182c6:	61bb      	str	r3, [r7, #24]
            break;
 80182c8:	e093      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182d0:	461a      	mov	r2, r3
 80182d2:	4b4c      	ldr	r3, [pc, #304]	; (8018404 <RegionUS915GetPhyParam+0x298>)
 80182d4:	5c9b      	ldrb	r3, [r3, r2]
 80182d6:	61bb      	str	r3, [r7, #24]
            break;
 80182d8:	e08b      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80182e0:	461a      	mov	r2, r3
 80182e2:	4b49      	ldr	r3, [pc, #292]	; (8018408 <RegionUS915GetPhyParam+0x29c>)
 80182e4:	5c9b      	ldrb	r3, [r3, r2]
 80182e6:	61bb      	str	r3, [r7, #24]
            break;
 80182e8:	e083      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 80182ea:	2300      	movs	r3, #0
 80182ec:	61bb      	str	r3, [r7, #24]
            break;
 80182ee:	e080      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 80182f0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80182f4:	61bb      	str	r3, [r7, #24]
            break;
 80182f6:	e07c      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80182f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80182fc:	61bb      	str	r3, [r7, #24]
            break;
 80182fe:	e078      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018300:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018304:	61bb      	str	r3, [r7, #24]
            break;
 8018306:	e074      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018308:	f241 3388 	movw	r3, #5000	; 0x1388
 801830c:	61bb      	str	r3, [r7, #24]
            break;
 801830e:	e070      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018310:	f241 7370 	movw	r3, #6000	; 0x1770
 8018314:	61bb      	str	r3, [r7, #24]
            break;
 8018316:	e06c      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8018318:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801831c:	483b      	ldr	r0, [pc, #236]	; (801840c <RegionUS915GetPhyParam+0x2a0>)
 801831e:	f001 f8a7 	bl	8019470 <randr>
 8018322:	4603      	mov	r3, r0
 8018324:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018328:	61bb      	str	r3, [r7, #24]
            break;
 801832a:	e062      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801832c:	2300      	movs	r3, #0
 801832e:	61bb      	str	r3, [r7, #24]
            break;
 8018330:	e05f      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8018332:	4b37      	ldr	r3, [pc, #220]	; (8018410 <RegionUS915GetPhyParam+0x2a4>)
 8018334:	61bb      	str	r3, [r7, #24]
            break;
 8018336:	e05c      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8018338:	2308      	movs	r3, #8
 801833a:	61bb      	str	r3, [r7, #24]
            break;
 801833c:	e059      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801833e:	4b30      	ldr	r3, [pc, #192]	; (8018400 <RegionUS915GetPhyParam+0x294>)
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018346:	61bb      	str	r3, [r7, #24]
            break;
 8018348:	e053      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801834a:	4b2d      	ldr	r3, [pc, #180]	; (8018400 <RegionUS915GetPhyParam+0x294>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018352:	61bb      	str	r3, [r7, #24]
            break;
 8018354:	e04d      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8018356:	2348      	movs	r3, #72	; 0x48
 8018358:	61bb      	str	r3, [r7, #24]
            break;
 801835a:	e04a      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801835c:	4b28      	ldr	r3, [pc, #160]	; (8018400 <RegionUS915GetPhyParam+0x294>)
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	61bb      	str	r3, [r7, #24]
            break;
 8018362:	e046      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8018364:	2300      	movs	r3, #0
 8018366:	61bb      	str	r3, [r7, #24]
            break;
 8018368:	e043      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801836a:	2300      	movs	r3, #0
 801836c:	61bb      	str	r3, [r7, #24]
            break;
 801836e:	e040      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8018370:	4b28      	ldr	r3, [pc, #160]	; (8018414 <RegionUS915GetPhyParam+0x2a8>)
 8018372:	61bb      	str	r3, [r7, #24]
            break;
 8018374:	e03d      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8018376:	f04f 0300 	mov.w	r3, #0
 801837a:	61bb      	str	r3, [r7, #24]
            break;
 801837c:	e039      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	791b      	ldrb	r3, [r3, #4]
 8018382:	4a25      	ldr	r2, [pc, #148]	; (8018418 <RegionUS915GetPhyParam+0x2ac>)
 8018384:	4922      	ldr	r1, [pc, #136]	; (8018410 <RegionUS915GetPhyParam+0x2a4>)
 8018386:	4618      	mov	r0, r3
 8018388:	f7fe fefd 	bl	8017186 <RegionBaseUSCalcDownlinkFrequency>
 801838c:	4603      	mov	r3, r0
 801838e:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8018390:	e02f      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8018392:	2317      	movs	r3, #23
 8018394:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8018396:	2304      	movs	r3, #4
 8018398:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801839a:	2303      	movs	r3, #3
 801839c:	76bb      	strb	r3, [r7, #26]
            break;
 801839e:	e028      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80183a0:	2308      	movs	r3, #8
 80183a2:	61bb      	str	r3, [r7, #24]
            break;
 80183a4:	e025      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80183a6:	2308      	movs	r3, #8
 80183a8:	61bb      	str	r3, [r7, #24]
            break;
 80183aa:	e022      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	791b      	ldrb	r3, [r3, #4]
 80183b0:	4a19      	ldr	r2, [pc, #100]	; (8018418 <RegionUS915GetPhyParam+0x2ac>)
 80183b2:	4917      	ldr	r1, [pc, #92]	; (8018410 <RegionUS915GetPhyParam+0x2a4>)
 80183b4:	4618      	mov	r0, r3
 80183b6:	f7fe fee6 	bl	8017186 <RegionBaseUSCalcDownlinkFrequency>
 80183ba:	4603      	mov	r3, r0
 80183bc:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80183be:	e018      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80183c0:	2308      	movs	r3, #8
 80183c2:	61bb      	str	r3, [r7, #24]
            break;
 80183c4:	e015      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80183c6:	2308      	movs	r3, #8
 80183c8:	61bb      	str	r3, [r7, #24]
            break;
 80183ca:	e012      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183d2:	461a      	mov	r2, r3
 80183d4:	4b11      	ldr	r3, [pc, #68]	; (801841c <RegionUS915GetPhyParam+0x2b0>)
 80183d6:	5c9b      	ldrb	r3, [r3, r2]
 80183d8:	61bb      	str	r3, [r7, #24]
            break;
 80183da:	e00a      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183e2:	490f      	ldr	r1, [pc, #60]	; (8018420 <RegionUS915GetPhyParam+0x2b4>)
 80183e4:	4618      	mov	r0, r3
 80183e6:	f7ff fdaf 	bl	8017f48 <RegionCommonGetBandwidth>
 80183ea:	4603      	mov	r3, r0
 80183ec:	61bb      	str	r3, [r7, #24]
            break;
 80183ee:	e000      	b.n	80183f2 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 80183f0:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 80183f2:	69bb      	ldr	r3, [r7, #24]
 80183f4:	61fb      	str	r3, [r7, #28]
 80183f6:	69fb      	ldr	r3, [r7, #28]
}
 80183f8:	4618      	mov	r0, r3
 80183fa:	3720      	adds	r7, #32
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}
 8018400:	20001a68 	.word	0x20001a68
 8018404:	0801ee24 	.word	0x0801ee24
 8018408:	0801ee34 	.word	0x0801ee34
 801840c:	fffffc18 	.word	0xfffffc18
 8018410:	370870a0 	.word	0x370870a0
 8018414:	4200999a 	.word	0x4200999a
 8018418:	000927c0 	.word	0x000927c0
 801841c:	0801edc0 	.word	0x0801edc0
 8018420:	0801edd0 	.word	0x0801edd0

08018424 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018424:	b590      	push	{r4, r7, lr}
 8018426:	b085      	sub	sp, #20
 8018428:	af02      	add	r7, sp, #8
 801842a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801842c:	4b11      	ldr	r3, [pc, #68]	; (8018474 <RegionUS915SetBandTxDone+0x50>)
 801842e:	681a      	ldr	r2, [r3, #0]
 8018430:	4b11      	ldr	r3, [pc, #68]	; (8018478 <RegionUS915SetBandTxDone+0x54>)
 8018432:	6819      	ldr	r1, [r3, #0]
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	781b      	ldrb	r3, [r3, #0]
 8018438:	4618      	mov	r0, r3
 801843a:	4603      	mov	r3, r0
 801843c:	005b      	lsls	r3, r3, #1
 801843e:	4403      	add	r3, r0
 8018440:	009b      	lsls	r3, r3, #2
 8018442:	440b      	add	r3, r1
 8018444:	3309      	adds	r3, #9
 8018446:	781b      	ldrb	r3, [r3, #0]
 8018448:	4619      	mov	r1, r3
 801844a:	460b      	mov	r3, r1
 801844c:	005b      	lsls	r3, r3, #1
 801844e:	440b      	add	r3, r1
 8018450:	00db      	lsls	r3, r3, #3
 8018452:	18d0      	adds	r0, r2, r3
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	6899      	ldr	r1, [r3, #8]
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	785c      	ldrb	r4, [r3, #1]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	691a      	ldr	r2, [r3, #16]
 8018460:	9200      	str	r2, [sp, #0]
 8018462:	68db      	ldr	r3, [r3, #12]
 8018464:	4622      	mov	r2, r4
 8018466:	f7ff f905 	bl	8017674 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801846a:	bf00      	nop
 801846c:	370c      	adds	r7, #12
 801846e:	46bd      	mov	sp, r7
 8018470:	bd90      	pop	{r4, r7, pc}
 8018472:	bf00      	nop
 8018474:	20001a6c 	.word	0x20001a6c
 8018478:	20001a68 	.word	0x20001a68

0801847c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b08a      	sub	sp, #40	; 0x28
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8018484:	2301      	movs	r3, #1
 8018486:	81bb      	strh	r3, [r7, #12]
 8018488:	2300      	movs	r3, #0
 801848a:	73bb      	strb	r3, [r7, #14]
 801848c:	2300      	movs	r3, #0
 801848e:	613b      	str	r3, [r7, #16]
 8018490:	2300      	movs	r3, #0
 8018492:	617b      	str	r3, [r7, #20]
 8018494:	2300      	movs	r3, #0
 8018496:	61bb      	str	r3, [r7, #24]
 8018498:	2300      	movs	r3, #0
 801849a:	61fb      	str	r3, [r7, #28]
 801849c:	2300      	movs	r3, #0
 801849e:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	7b1b      	ldrb	r3, [r3, #12]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d007      	beq.n	80184ba <RegionUS915InitDefaults+0x3e>
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	f2c0 8104 	blt.w	80186b8 <RegionUS915InitDefaults+0x23c>
 80184b0:	3b01      	subs	r3, #1
 80184b2:	2b01      	cmp	r3, #1
 80184b4:	f200 8100 	bhi.w	80186b8 <RegionUS915InitDefaults+0x23c>
 80184b8:	e0ce      	b.n	8018658 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	f000 80fc 	beq.w	80186bc <RegionUS915InitDefaults+0x240>
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	685b      	ldr	r3, [r3, #4]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	f000 80f7 	beq.w	80186bc <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	4a7c      	ldr	r2, [pc, #496]	; (80186c4 <RegionUS915InitDefaults+0x248>)
 80184d4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	685b      	ldr	r3, [r3, #4]
 80184da:	4a7b      	ldr	r2, [pc, #492]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 80184dc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	689b      	ldr	r3, [r3, #8]
 80184e2:	4a7a      	ldr	r2, [pc, #488]	; (80186cc <RegionUS915InitDefaults+0x250>)
 80184e4:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 80184e6:	4b77      	ldr	r3, [pc, #476]	; (80186c4 <RegionUS915InitDefaults+0x248>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	2200      	movs	r2, #0
 80184ec:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 80184ee:	4b75      	ldr	r3, [pc, #468]	; (80186c4 <RegionUS915InitDefaults+0x248>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	2200      	movs	r2, #0
 80184f4:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 80184f6:	4b75      	ldr	r3, [pc, #468]	; (80186cc <RegionUS915InitDefaults+0x250>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	f107 010c 	add.w	r1, r7, #12
 80184fe:	2218      	movs	r2, #24
 8018500:	4618      	mov	r0, r3
 8018502:	f000 ffcc 	bl	801949e <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8018506:	2300      	movs	r3, #0
 8018508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801850c:	e02e      	b.n	801856c <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801850e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018512:	4a6f      	ldr	r2, [pc, #444]	; (80186d0 <RegionUS915InitDefaults+0x254>)
 8018514:	fb03 f202 	mul.w	r2, r3, r2
 8018518:	4b6e      	ldr	r3, [pc, #440]	; (80186d4 <RegionUS915InitDefaults+0x258>)
 801851a:	4413      	add	r3, r2
 801851c:	4a6a      	ldr	r2, [pc, #424]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 801851e:	6811      	ldr	r1, [r2, #0]
 8018520:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018524:	4618      	mov	r0, r3
 8018526:	4613      	mov	r3, r2
 8018528:	005b      	lsls	r3, r3, #1
 801852a:	4413      	add	r3, r2
 801852c:	009b      	lsls	r3, r3, #2
 801852e:	440b      	add	r3, r1
 8018530:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8018532:	4b65      	ldr	r3, [pc, #404]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 8018534:	6819      	ldr	r1, [r3, #0]
 8018536:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801853a:	4613      	mov	r3, r2
 801853c:	005b      	lsls	r3, r3, #1
 801853e:	4413      	add	r3, r2
 8018540:	009b      	lsls	r3, r3, #2
 8018542:	440b      	add	r3, r1
 8018544:	3308      	adds	r3, #8
 8018546:	2230      	movs	r2, #48	; 0x30
 8018548:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801854a:	4b5f      	ldr	r3, [pc, #380]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 801854c:	6819      	ldr	r1, [r3, #0]
 801854e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018552:	4613      	mov	r3, r2
 8018554:	005b      	lsls	r3, r3, #1
 8018556:	4413      	add	r3, r2
 8018558:	009b      	lsls	r3, r3, #2
 801855a:	440b      	add	r3, r1
 801855c:	3309      	adds	r3, #9
 801855e:	2200      	movs	r2, #0
 8018560:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8018562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018566:	3301      	adds	r3, #1
 8018568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801856c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018570:	2b3f      	cmp	r3, #63	; 0x3f
 8018572:	d9cc      	bls.n	801850e <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8018574:	2340      	movs	r3, #64	; 0x40
 8018576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801857a:	e02f      	b.n	80185dc <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801857c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018580:	3b40      	subs	r3, #64	; 0x40
 8018582:	4a55      	ldr	r2, [pc, #340]	; (80186d8 <RegionUS915InitDefaults+0x25c>)
 8018584:	fb03 f202 	mul.w	r2, r3, r2
 8018588:	4b54      	ldr	r3, [pc, #336]	; (80186dc <RegionUS915InitDefaults+0x260>)
 801858a:	4413      	add	r3, r2
 801858c:	4a4e      	ldr	r2, [pc, #312]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 801858e:	6811      	ldr	r1, [r2, #0]
 8018590:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018594:	4618      	mov	r0, r3
 8018596:	4613      	mov	r3, r2
 8018598:	005b      	lsls	r3, r3, #1
 801859a:	4413      	add	r3, r2
 801859c:	009b      	lsls	r3, r3, #2
 801859e:	440b      	add	r3, r1
 80185a0:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80185a2:	4b49      	ldr	r3, [pc, #292]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 80185a4:	6819      	ldr	r1, [r3, #0]
 80185a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80185aa:	4613      	mov	r3, r2
 80185ac:	005b      	lsls	r3, r3, #1
 80185ae:	4413      	add	r3, r2
 80185b0:	009b      	lsls	r3, r3, #2
 80185b2:	440b      	add	r3, r1
 80185b4:	3308      	adds	r3, #8
 80185b6:	2244      	movs	r2, #68	; 0x44
 80185b8:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80185ba:	4b43      	ldr	r3, [pc, #268]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 80185bc:	6819      	ldr	r1, [r3, #0]
 80185be:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80185c2:	4613      	mov	r3, r2
 80185c4:	005b      	lsls	r3, r3, #1
 80185c6:	4413      	add	r3, r2
 80185c8:	009b      	lsls	r3, r3, #2
 80185ca:	440b      	add	r3, r1
 80185cc:	3309      	adds	r3, #9
 80185ce:	2200      	movs	r2, #0
 80185d0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80185d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80185d6:	3301      	adds	r3, #1
 80185d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80185dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80185e0:	2b47      	cmp	r3, #71	; 0x47
 80185e2:	d9cb      	bls.n	801857c <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 80185e4:	4b38      	ldr	r3, [pc, #224]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185ec:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 80185f0:	4b35      	ldr	r3, [pc, #212]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 80185f2:	681b      	ldr	r3, [r3, #0]
 80185f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185f8:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80185fc:	4b32      	ldr	r3, [pc, #200]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018604:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8018608:	4b2f      	ldr	r3, [pc, #188]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018610:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8018614:	4b2c      	ldr	r3, [pc, #176]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	22ff      	movs	r2, #255	; 0xff
 801861a:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801861e:	4b2a      	ldr	r3, [pc, #168]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	2200      	movs	r2, #0
 8018624:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018628:	4b27      	ldr	r3, [pc, #156]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018630:	4b25      	ldr	r3, [pc, #148]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018638:	2206      	movs	r2, #6
 801863a:	4619      	mov	r1, r3
 801863c:	f7fe fff4 	bl	8017628 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018640:	4b20      	ldr	r3, [pc, #128]	; (80186c4 <RegionUS915InitDefaults+0x248>)
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	4618      	mov	r0, r3
 8018646:	4b20      	ldr	r3, [pc, #128]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801864e:	2206      	movs	r2, #6
 8018650:	4619      	mov	r1, r3
 8018652:	f7fe ffe9 	bl	8017628 <RegionCommonChanMaskCopy>
            break;
 8018656:	e032      	b.n	80186be <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018658:	4b1b      	ldr	r3, [pc, #108]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8018660:	4b19      	ldr	r3, [pc, #100]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018668:	2206      	movs	r2, #6
 801866a:	4619      	mov	r1, r3
 801866c:	f7fe ffdc 	bl	8017628 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8018670:	2300      	movs	r3, #0
 8018672:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018676:	e01a      	b.n	80186ae <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018678:	4b12      	ldr	r3, [pc, #72]	; (80186c4 <RegionUS915InitDefaults+0x248>)
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8018680:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8018684:	4b10      	ldr	r3, [pc, #64]	; (80186c8 <RegionUS915InitDefaults+0x24c>)
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801868c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018690:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018694:	4b0b      	ldr	r3, [pc, #44]	; (80186c4 <RegionUS915InitDefaults+0x248>)
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801869c:	4001      	ands	r1, r0
 801869e:	b289      	uxth	r1, r1
 80186a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 80186a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80186a8:	3301      	adds	r3, #1
 80186aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80186ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80186b2:	2b05      	cmp	r3, #5
 80186b4:	d9e0      	bls.n	8018678 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80186b6:	e002      	b.n	80186be <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80186b8:	bf00      	nop
 80186ba:	e000      	b.n	80186be <RegionUS915InitDefaults+0x242>
                return;
 80186bc:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80186be:	3728      	adds	r7, #40	; 0x28
 80186c0:	46bd      	mov	sp, r7
 80186c2:	bd80      	pop	{r7, pc}
 80186c4:	20001a64 	.word	0x20001a64
 80186c8:	20001a68 	.word	0x20001a68
 80186cc:	20001a6c 	.word	0x20001a6c
 80186d0:	00030d40 	.word	0x00030d40
 80186d4:	35c80160 	.word	0x35c80160
 80186d8:	00186a00 	.word	0x00186a00
 80186dc:	35d2afc0 	.word	0x35d2afc0

080186e0 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b082      	sub	sp, #8
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
 80186e8:	460b      	mov	r3, r1
 80186ea:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 80186ec:	78fb      	ldrb	r3, [r7, #3]
 80186ee:	2b0f      	cmp	r3, #15
 80186f0:	d867      	bhi.n	80187c2 <RegionUS915Verify+0xe2>
 80186f2:	a201      	add	r2, pc, #4	; (adr r2, 80186f8 <RegionUS915Verify+0x18>)
 80186f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186f8:	08018739 	.word	0x08018739
 80186fc:	080187c3 	.word	0x080187c3
 8018700:	080187c3 	.word	0x080187c3
 8018704:	080187c3 	.word	0x080187c3
 8018708:	080187c3 	.word	0x080187c3
 801870c:	08018747 	.word	0x08018747
 8018710:	08018765 	.word	0x08018765
 8018714:	08018783 	.word	0x08018783
 8018718:	080187c3 	.word	0x080187c3
 801871c:	080187a1 	.word	0x080187a1
 8018720:	080187a1 	.word	0x080187a1
 8018724:	080187c3 	.word	0x080187c3
 8018728:	080187c3 	.word	0x080187c3
 801872c:	080187c3 	.word	0x080187c3
 8018730:	080187c3 	.word	0x080187c3
 8018734:	080187bf 	.word	0x080187bf
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	4618      	mov	r0, r3
 801873e:	f7ff fca1 	bl	8018084 <VerifyRfFreq>
 8018742:	4603      	mov	r3, r0
 8018744:	e03e      	b.n	80187c4 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f993 3000 	ldrsb.w	r3, [r3]
 801874c:	2204      	movs	r2, #4
 801874e:	2100      	movs	r1, #0
 8018750:	4618      	mov	r0, r3
 8018752:	f7fe feec 	bl	801752e <RegionCommonValueInRange>
 8018756:	4603      	mov	r3, r0
 8018758:	2b00      	cmp	r3, #0
 801875a:	bf14      	ite	ne
 801875c:	2301      	movne	r3, #1
 801875e:	2300      	moveq	r3, #0
 8018760:	b2db      	uxtb	r3, r3
 8018762:	e02f      	b.n	80187c4 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	f993 3000 	ldrsb.w	r3, [r3]
 801876a:	2205      	movs	r2, #5
 801876c:	2100      	movs	r1, #0
 801876e:	4618      	mov	r0, r3
 8018770:	f7fe fedd 	bl	801752e <RegionCommonValueInRange>
 8018774:	4603      	mov	r3, r0
 8018776:	2b00      	cmp	r3, #0
 8018778:	bf14      	ite	ne
 801877a:	2301      	movne	r3, #1
 801877c:	2300      	moveq	r3, #0
 801877e:	b2db      	uxtb	r3, r3
 8018780:	e020      	b.n	80187c4 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	f993 3000 	ldrsb.w	r3, [r3]
 8018788:	220d      	movs	r2, #13
 801878a:	2108      	movs	r1, #8
 801878c:	4618      	mov	r0, r3
 801878e:	f7fe fece 	bl	801752e <RegionCommonValueInRange>
 8018792:	4603      	mov	r3, r0
 8018794:	2b00      	cmp	r3, #0
 8018796:	bf14      	ite	ne
 8018798:	2301      	movne	r3, #1
 801879a:	2300      	moveq	r3, #0
 801879c:	b2db      	uxtb	r3, r3
 801879e:	e011      	b.n	80187c4 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	f993 3000 	ldrsb.w	r3, [r3]
 80187a6:	220e      	movs	r2, #14
 80187a8:	2100      	movs	r1, #0
 80187aa:	4618      	mov	r0, r3
 80187ac:	f7fe febf 	bl	801752e <RegionCommonValueInRange>
 80187b0:	4603      	mov	r3, r0
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	bf14      	ite	ne
 80187b6:	2301      	movne	r3, #1
 80187b8:	2300      	moveq	r3, #0
 80187ba:	b2db      	uxtb	r3, r3
 80187bc:	e002      	b.n	80187c4 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80187be:	2300      	movs	r3, #0
 80187c0:	e000      	b.n	80187c4 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80187c2:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80187c4:	4618      	mov	r0, r3
 80187c6:	3708      	adds	r7, #8
 80187c8:	46bd      	mov	sp, r7
 80187ca:	bd80      	pop	{r7, pc}

080187cc <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80187cc:	b480      	push	{r7}
 80187ce:	b085      	sub	sp, #20
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	7a1b      	ldrb	r3, [r3, #8]
 80187d8:	2b10      	cmp	r3, #16
 80187da:	d160      	bne.n	801889e <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	330f      	adds	r3, #15
 80187e2:	781b      	ldrb	r3, [r3, #0]
 80187e4:	2b01      	cmp	r3, #1
 80187e6:	d15c      	bne.n	80188a2 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80187e8:	2300      	movs	r3, #0
 80187ea:	73fb      	strb	r3, [r7, #15]
 80187ec:	2300      	movs	r3, #0
 80187ee:	73bb      	strb	r3, [r7, #14]
 80187f0:	e051      	b.n	8018896 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	685a      	ldr	r2, [r3, #4]
 80187f6:	7bbb      	ldrb	r3, [r7, #14]
 80187f8:	4413      	add	r3, r2
 80187fa:	7819      	ldrb	r1, [r3, #0]
 80187fc:	4b2b      	ldr	r3, [pc, #172]	; (80188ac <RegionUS915ApplyCFList+0xe0>)
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	7bfa      	ldrb	r2, [r7, #15]
 8018802:	b289      	uxth	r1, r1
 8018804:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018808:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801880c:	4b27      	ldr	r3, [pc, #156]	; (80188ac <RegionUS915ApplyCFList+0xe0>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	7bfa      	ldrb	r2, [r7, #15]
 8018812:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018816:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	685a      	ldr	r2, [r3, #4]
 801881e:	7bbb      	ldrb	r3, [r7, #14]
 8018820:	3301      	adds	r3, #1
 8018822:	4413      	add	r3, r2
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	b29b      	uxth	r3, r3
 8018828:	021b      	lsls	r3, r3, #8
 801882a:	b299      	uxth	r1, r3
 801882c:	4b1f      	ldr	r3, [pc, #124]	; (80188ac <RegionUS915ApplyCFList+0xe0>)
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	7bfa      	ldrb	r2, [r7, #15]
 8018832:	4301      	orrs	r1, r0
 8018834:	b289      	uxth	r1, r1
 8018836:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801883a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801883e:	7bfb      	ldrb	r3, [r7, #15]
 8018840:	2b04      	cmp	r3, #4
 8018842:	d10f      	bne.n	8018864 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8018844:	4b19      	ldr	r3, [pc, #100]	; (80188ac <RegionUS915ApplyCFList+0xe0>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	7bfa      	ldrb	r2, [r7, #15]
 801884a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801884e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018852:	4b16      	ldr	r3, [pc, #88]	; (80188ac <RegionUS915ApplyCFList+0xe0>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	7bfa      	ldrb	r2, [r7, #15]
 8018858:	b2c9      	uxtb	r1, r1
 801885a:	b289      	uxth	r1, r1
 801885c:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018860:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8018864:	4b12      	ldr	r3, [pc, #72]	; (80188b0 <RegionUS915ApplyCFList+0xe4>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	7bfa      	ldrb	r2, [r7, #15]
 801886a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801886e:	4b0f      	ldr	r3, [pc, #60]	; (80188ac <RegionUS915ApplyCFList+0xe0>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	7bfa      	ldrb	r2, [r7, #15]
 8018874:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018878:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801887c:	4b0c      	ldr	r3, [pc, #48]	; (80188b0 <RegionUS915ApplyCFList+0xe4>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	7bfa      	ldrb	r2, [r7, #15]
 8018882:	4001      	ands	r1, r0
 8018884:	b289      	uxth	r1, r1
 8018886:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801888a:	7bfb      	ldrb	r3, [r7, #15]
 801888c:	3301      	adds	r3, #1
 801888e:	73fb      	strb	r3, [r7, #15]
 8018890:	7bbb      	ldrb	r3, [r7, #14]
 8018892:	3302      	adds	r3, #2
 8018894:	73bb      	strb	r3, [r7, #14]
 8018896:	7bfb      	ldrb	r3, [r7, #15]
 8018898:	2b04      	cmp	r3, #4
 801889a:	d9aa      	bls.n	80187f2 <RegionUS915ApplyCFList+0x26>
 801889c:	e002      	b.n	80188a4 <RegionUS915ApplyCFList+0xd8>
        return;
 801889e:	bf00      	nop
 80188a0:	e000      	b.n	80188a4 <RegionUS915ApplyCFList+0xd8>
        return;
 80188a2:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80188a4:	3714      	adds	r7, #20
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bc80      	pop	{r7}
 80188aa:	4770      	bx	lr
 80188ac:	20001a68 	.word	0x20001a68
 80188b0:	20001a64 	.word	0x20001a64

080188b4 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b084      	sub	sp, #16
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	2204      	movs	r2, #4
 80188c2:	2100      	movs	r1, #0
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7fe fe83 	bl	80175d0 <RegionCommonCountChannels>
 80188ca:	4603      	mov	r3, r0
 80188cc:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80188ce:	7bbb      	ldrb	r3, [r7, #14]
 80188d0:	2b01      	cmp	r3, #1
 80188d2:	d804      	bhi.n	80188de <RegionUS915ChanMaskSet+0x2a>
 80188d4:	7bbb      	ldrb	r3, [r7, #14]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d001      	beq.n	80188de <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 80188da:	2300      	movs	r3, #0
 80188dc:	e04a      	b.n	8018974 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	791b      	ldrb	r3, [r3, #4]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d002      	beq.n	80188ec <RegionUS915ChanMaskSet+0x38>
 80188e6:	2b01      	cmp	r3, #1
 80188e8:	d036      	beq.n	8018958 <RegionUS915ChanMaskSet+0xa4>
 80188ea:	e040      	b.n	801896e <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80188ec:	4b23      	ldr	r3, [pc, #140]	; (801897c <RegionUS915ChanMaskSet+0xc8>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2206      	movs	r2, #6
 80188fa:	4619      	mov	r1, r3
 80188fc:	f7fe fe94 	bl	8017628 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8018900:	4b1e      	ldr	r3, [pc, #120]	; (801897c <RegionUS915ChanMaskSet+0xc8>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8018908:	4b1c      	ldr	r3, [pc, #112]	; (801897c <RegionUS915ChanMaskSet+0xc8>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	b2d2      	uxtb	r2, r2
 801890e:	b292      	uxth	r2, r2
 8018910:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8018914:	4b19      	ldr	r3, [pc, #100]	; (801897c <RegionUS915ChanMaskSet+0xc8>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	2200      	movs	r2, #0
 801891a:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801891e:	2300      	movs	r3, #0
 8018920:	73fb      	strb	r3, [r7, #15]
 8018922:	e015      	b.n	8018950 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8018924:	4b16      	ldr	r3, [pc, #88]	; (8018980 <RegionUS915ChanMaskSet+0xcc>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	7bfa      	ldrb	r2, [r7, #15]
 801892a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801892e:	4b13      	ldr	r3, [pc, #76]	; (801897c <RegionUS915ChanMaskSet+0xc8>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	7bfa      	ldrb	r2, [r7, #15]
 8018934:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018938:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801893c:	4b10      	ldr	r3, [pc, #64]	; (8018980 <RegionUS915ChanMaskSet+0xcc>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	7bfa      	ldrb	r2, [r7, #15]
 8018942:	4001      	ands	r1, r0
 8018944:	b289      	uxth	r1, r1
 8018946:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801894a:	7bfb      	ldrb	r3, [r7, #15]
 801894c:	3301      	adds	r3, #1
 801894e:	73fb      	strb	r3, [r7, #15]
 8018950:	7bfb      	ldrb	r3, [r7, #15]
 8018952:	2b05      	cmp	r3, #5
 8018954:	d9e6      	bls.n	8018924 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8018956:	e00c      	b.n	8018972 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018958:	4b08      	ldr	r3, [pc, #32]	; (801897c <RegionUS915ChanMaskSet+0xc8>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2206      	movs	r2, #6
 8018966:	4619      	mov	r1, r3
 8018968:	f7fe fe5e 	bl	8017628 <RegionCommonChanMaskCopy>
            break;
 801896c:	e001      	b.n	8018972 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801896e:	2300      	movs	r3, #0
 8018970:	e000      	b.n	8018974 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 8018972:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018974:	4618      	mov	r0, r3
 8018976:	3710      	adds	r7, #16
 8018978:	46bd      	mov	sp, r7
 801897a:	bd80      	pop	{r7, pc}
 801897c:	20001a68 	.word	0x20001a68
 8018980:	20001a64 	.word	0x20001a64

08018984 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b088      	sub	sp, #32
 8018988:	af02      	add	r7, sp, #8
 801898a:	60ba      	str	r2, [r7, #8]
 801898c:	607b      	str	r3, [r7, #4]
 801898e:	4603      	mov	r3, r0
 8018990:	73fb      	strb	r3, [r7, #15]
 8018992:	460b      	mov	r3, r1
 8018994:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8018996:	2300      	movs	r3, #0
 8018998:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801899a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801899e:	2b0d      	cmp	r3, #13
 80189a0:	bfa8      	it	ge
 80189a2:	230d      	movge	r3, #13
 80189a4:	b25a      	sxtb	r2, r3
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80189b0:	4916      	ldr	r1, [pc, #88]	; (8018a0c <RegionUS915ComputeRxWindowParameters+0x88>)
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7ff fac8 	bl	8017f48 <RegionCommonGetBandwidth>
 80189b8:	4603      	mov	r3, r0
 80189ba:	b2da      	uxtb	r2, r3
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80189c6:	461a      	mov	r2, r3
 80189c8:	4b11      	ldr	r3, [pc, #68]	; (8018a10 <RegionUS915ComputeRxWindowParameters+0x8c>)
 80189ca:	5c9a      	ldrb	r2, [r3, r2]
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80189d2:	4619      	mov	r1, r3
 80189d4:	4b0d      	ldr	r3, [pc, #52]	; (8018a0c <RegionUS915ComputeRxWindowParameters+0x88>)
 80189d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80189da:	4619      	mov	r1, r3
 80189dc:	4610      	mov	r0, r2
 80189de:	f7ff f841 	bl	8017a64 <RegionCommonComputeSymbolTimeLoRa>
 80189e2:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80189e4:	4b0b      	ldr	r3, [pc, #44]	; (8018a14 <RegionUS915ComputeRxWindowParameters+0x90>)
 80189e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80189e8:	4798      	blx	r3
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	3308      	adds	r3, #8
 80189ee:	687a      	ldr	r2, [r7, #4]
 80189f0:	320c      	adds	r2, #12
 80189f2:	7bb9      	ldrb	r1, [r7, #14]
 80189f4:	9201      	str	r2, [sp, #4]
 80189f6:	9300      	str	r3, [sp, #0]
 80189f8:	4603      	mov	r3, r0
 80189fa:	68ba      	ldr	r2, [r7, #8]
 80189fc:	6978      	ldr	r0, [r7, #20]
 80189fe:	f7ff f847 	bl	8017a90 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8018a02:	bf00      	nop
 8018a04:	3718      	adds	r7, #24
 8018a06:	46bd      	mov	sp, r7
 8018a08:	bd80      	pop	{r7, pc}
 8018a0a:	bf00      	nop
 8018a0c:	0801edd0 	.word	0x0801edd0
 8018a10:	0801edc0 	.word	0x0801edc0
 8018a14:	0801ee44 	.word	0x0801ee44

08018a18 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8018a18:	b590      	push	{r4, r7, lr}
 8018a1a:	b091      	sub	sp, #68	; 0x44
 8018a1c:	af0a      	add	r7, sp, #40	; 0x28
 8018a1e:	6078      	str	r0, [r7, #4]
 8018a20:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	785b      	ldrb	r3, [r3, #1]
 8018a26:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8018a28:	2300      	movs	r3, #0
 8018a2a:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	685b      	ldr	r3, [r3, #4]
 8018a34:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8018a36:	4b34      	ldr	r3, [pc, #208]	; (8018b08 <RegionUS915RxConfig+0xf0>)
 8018a38:	685b      	ldr	r3, [r3, #4]
 8018a3a:	4798      	blx	r3
 8018a3c:	4603      	mov	r3, r0
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d001      	beq.n	8018a46 <RegionUS915RxConfig+0x2e>
    {
        return false;
 8018a42:	2300      	movs	r3, #0
 8018a44:	e05c      	b.n	8018b00 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	7cdb      	ldrb	r3, [r3, #19]
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	d109      	bne.n	8018a62 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	781b      	ldrb	r3, [r3, #0]
 8018a52:	f003 0307 	and.w	r3, r3, #7
 8018a56:	4a2d      	ldr	r2, [pc, #180]	; (8018b0c <RegionUS915RxConfig+0xf4>)
 8018a58:	fb03 f202 	mul.w	r2, r3, r2
 8018a5c:	4b2c      	ldr	r3, [pc, #176]	; (8018b10 <RegionUS915RxConfig+0xf8>)
 8018a5e:	4413      	add	r3, r2
 8018a60:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8018a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a66:	4a2b      	ldr	r2, [pc, #172]	; (8018b14 <RegionUS915RxConfig+0xfc>)
 8018a68:	5cd3      	ldrb	r3, [r2, r3]
 8018a6a:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018a6c:	4b26      	ldr	r3, [pc, #152]	; (8018b08 <RegionUS915RxConfig+0xf0>)
 8018a6e:	68db      	ldr	r3, [r3, #12]
 8018a70:	6938      	ldr	r0, [r7, #16]
 8018a72:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018a74:	4b24      	ldr	r3, [pc, #144]	; (8018b08 <RegionUS915RxConfig+0xf0>)
 8018a76:	699c      	ldr	r4, [r3, #24]
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	789b      	ldrb	r3, [r3, #2]
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	689b      	ldr	r3, [r3, #8]
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	687a      	ldr	r2, [r7, #4]
 8018a8a:	7c92      	ldrb	r2, [r2, #18]
 8018a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8018a8e:	2201      	movs	r2, #1
 8018a90:	9208      	str	r2, [sp, #32]
 8018a92:	2200      	movs	r2, #0
 8018a94:	9207      	str	r2, [sp, #28]
 8018a96:	2200      	movs	r2, #0
 8018a98:	9206      	str	r2, [sp, #24]
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	9205      	str	r2, [sp, #20]
 8018a9e:	2200      	movs	r2, #0
 8018aa0:	9204      	str	r2, [sp, #16]
 8018aa2:	2200      	movs	r2, #0
 8018aa4:	9203      	str	r2, [sp, #12]
 8018aa6:	9302      	str	r3, [sp, #8]
 8018aa8:	2308      	movs	r3, #8
 8018aaa:	9301      	str	r3, [sp, #4]
 8018aac:	2300      	movs	r3, #0
 8018aae:	9300      	str	r3, [sp, #0]
 8018ab0:	2301      	movs	r3, #1
 8018ab2:	460a      	mov	r2, r1
 8018ab4:	4601      	mov	r1, r0
 8018ab6:	2001      	movs	r0, #1
 8018ab8:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	7c5b      	ldrb	r3, [r3, #17]
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d005      	beq.n	8018ace <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8018ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ac6:	4a14      	ldr	r2, [pc, #80]	; (8018b18 <RegionUS915RxConfig+0x100>)
 8018ac8:	5cd3      	ldrb	r3, [r2, r3]
 8018aca:	75fb      	strb	r3, [r7, #23]
 8018acc:	e004      	b.n	8018ad8 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8018ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ad2:	4a12      	ldr	r2, [pc, #72]	; (8018b1c <RegionUS915RxConfig+0x104>)
 8018ad4:	5cd3      	ldrb	r3, [r2, r3]
 8018ad6:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018ad8:	4b0b      	ldr	r3, [pc, #44]	; (8018b08 <RegionUS915RxConfig+0xf0>)
 8018ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018adc:	7dfa      	ldrb	r2, [r7, #23]
 8018ade:	320d      	adds	r2, #13
 8018ae0:	b2d2      	uxtb	r2, r2
 8018ae2:	4611      	mov	r1, r2
 8018ae4:	2001      	movs	r0, #1
 8018ae6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	7cdb      	ldrb	r3, [r3, #19]
 8018aec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018af0:	6939      	ldr	r1, [r7, #16]
 8018af2:	4618      	mov	r0, r3
 8018af4:	f7ff fa46 	bl	8017f84 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	7bfa      	ldrb	r2, [r7, #15]
 8018afc:	701a      	strb	r2, [r3, #0]
    return true;
 8018afe:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	371c      	adds	r7, #28
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd90      	pop	{r4, r7, pc}
 8018b08:	0801ee44 	.word	0x0801ee44
 8018b0c:	000927c0 	.word	0x000927c0
 8018b10:	370870a0 	.word	0x370870a0
 8018b14:	0801edc0 	.word	0x0801edc0
 8018b18:	0801ee34 	.word	0x0801ee34
 8018b1c:	0801ee24 	.word	0x0801ee24

08018b20 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8018b20:	b590      	push	{r4, r7, lr}
 8018b22:	b093      	sub	sp, #76	; 0x4c
 8018b24:	af0a      	add	r7, sp, #40	; 0x28
 8018b26:	60f8      	str	r0, [r7, #12]
 8018b28:	60b9      	str	r1, [r7, #8]
 8018b2a:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018b32:	461a      	mov	r2, r3
 8018b34:	4b49      	ldr	r3, [pc, #292]	; (8018c5c <RegionUS915TxConfig+0x13c>)
 8018b36:	5c9b      	ldrb	r3, [r3, r2]
 8018b38:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8018b40:	4b47      	ldr	r3, [pc, #284]	; (8018c60 <RegionUS915TxConfig+0x140>)
 8018b42:	681a      	ldr	r2, [r3, #0]
 8018b44:	4b47      	ldr	r3, [pc, #284]	; (8018c64 <RegionUS915TxConfig+0x144>)
 8018b46:	6819      	ldr	r1, [r3, #0]
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	781b      	ldrb	r3, [r3, #0]
 8018b4c:	461c      	mov	r4, r3
 8018b4e:	4623      	mov	r3, r4
 8018b50:	005b      	lsls	r3, r3, #1
 8018b52:	4423      	add	r3, r4
 8018b54:	009b      	lsls	r3, r3, #2
 8018b56:	440b      	add	r3, r1
 8018b58:	3309      	adds	r3, #9
 8018b5a:	781b      	ldrb	r3, [r3, #0]
 8018b5c:	4619      	mov	r1, r3
 8018b5e:	460b      	mov	r3, r1
 8018b60:	005b      	lsls	r3, r3, #1
 8018b62:	440b      	add	r3, r1
 8018b64:	00db      	lsls	r3, r3, #3
 8018b66:	4413      	add	r3, r2
 8018b68:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018b72:	4b3c      	ldr	r3, [pc, #240]	; (8018c64 <RegionUS915TxConfig+0x144>)
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018b7a:	f7ff fa4d 	bl	8018018 <LimitTxPower>
 8018b7e:	4603      	mov	r3, r0
 8018b80:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018b88:	4937      	ldr	r1, [pc, #220]	; (8018c68 <RegionUS915TxConfig+0x148>)
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f7ff f9dc 	bl	8017f48 <RegionCommonGetBandwidth>
 8018b90:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8018b92:	2300      	movs	r3, #0
 8018b94:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018b96:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018b9a:	f04f 0200 	mov.w	r2, #0
 8018b9e:	4933      	ldr	r1, [pc, #204]	; (8018c6c <RegionUS915TxConfig+0x14c>)
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7ff f82d 	bl	8017c00 <RegionCommonComputeTxPower>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018baa:	4b31      	ldr	r3, [pc, #196]	; (8018c70 <RegionUS915TxConfig+0x150>)
 8018bac:	68da      	ldr	r2, [r3, #12]
 8018bae:	4b2d      	ldr	r3, [pc, #180]	; (8018c64 <RegionUS915TxConfig+0x144>)
 8018bb0:	6819      	ldr	r1, [r3, #0]
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	781b      	ldrb	r3, [r3, #0]
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	4603      	mov	r3, r0
 8018bba:	005b      	lsls	r3, r3, #1
 8018bbc:	4403      	add	r3, r0
 8018bbe:	009b      	lsls	r3, r3, #2
 8018bc0:	440b      	add	r3, r1
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018bc8:	4b29      	ldr	r3, [pc, #164]	; (8018c70 <RegionUS915TxConfig+0x150>)
 8018bca:	69dc      	ldr	r4, [r3, #28]
 8018bcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8018bd0:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018bd4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018bd8:	9208      	str	r2, [sp, #32]
 8018bda:	2200      	movs	r2, #0
 8018bdc:	9207      	str	r2, [sp, #28]
 8018bde:	2200      	movs	r2, #0
 8018be0:	9206      	str	r2, [sp, #24]
 8018be2:	2200      	movs	r2, #0
 8018be4:	9205      	str	r2, [sp, #20]
 8018be6:	2201      	movs	r2, #1
 8018be8:	9204      	str	r2, [sp, #16]
 8018bea:	2200      	movs	r2, #0
 8018bec:	9203      	str	r2, [sp, #12]
 8018bee:	2208      	movs	r2, #8
 8018bf0:	9202      	str	r2, [sp, #8]
 8018bf2:	2201      	movs	r2, #1
 8018bf4:	9201      	str	r2, [sp, #4]
 8018bf6:	9300      	str	r3, [sp, #0]
 8018bf8:	69bb      	ldr	r3, [r7, #24]
 8018bfa:	2200      	movs	r2, #0
 8018bfc:	2001      	movs	r0, #1
 8018bfe:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8018c00:	4b18      	ldr	r3, [pc, #96]	; (8018c64 <RegionUS915TxConfig+0x144>)
 8018c02:	681a      	ldr	r2, [r3, #0]
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	781b      	ldrb	r3, [r3, #0]
 8018c08:	4619      	mov	r1, r3
 8018c0a:	460b      	mov	r3, r1
 8018c0c:	005b      	lsls	r3, r3, #1
 8018c0e:	440b      	add	r3, r1
 8018c10:	009b      	lsls	r3, r3, #2
 8018c12:	4413      	add	r3, r2
 8018c14:	681a      	ldr	r2, [r3, #0]
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c1c:	4619      	mov	r1, r3
 8018c1e:	4610      	mov	r0, r2
 8018c20:	f7ff f9e2 	bl	8017fe8 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8018c24:	4b12      	ldr	r3, [pc, #72]	; (8018c70 <RegionUS915TxConfig+0x150>)
 8018c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018c28:	68fa      	ldr	r2, [r7, #12]
 8018c2a:	8992      	ldrh	r2, [r2, #12]
 8018c2c:	b2d2      	uxtb	r2, r2
 8018c2e:	4611      	mov	r1, r2
 8018c30:	2001      	movs	r0, #1
 8018c32:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	899b      	ldrh	r3, [r3, #12]
 8018c3e:	4619      	mov	r1, r3
 8018c40:	4610      	mov	r0, r2
 8018c42:	f7ff fa63 	bl	801810c <GetTimeOnAir>
 8018c46:	4602      	mov	r2, r0
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	7fba      	ldrb	r2, [r7, #30]
 8018c50:	701a      	strb	r2, [r3, #0]
    return true;
 8018c52:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	3724      	adds	r7, #36	; 0x24
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd90      	pop	{r4, r7, pc}
 8018c5c:	0801edc0 	.word	0x0801edc0
 8018c60:	20001a6c 	.word	0x20001a6c
 8018c64:	20001a68 	.word	0x20001a68
 8018c68:	0801edd0 	.word	0x0801edd0
 8018c6c:	41f00000 	.word	0x41f00000
 8018c70:	0801ee44 	.word	0x0801ee44

08018c74 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018c74:	b590      	push	{r4, r7, lr}
 8018c76:	b097      	sub	sp, #92	; 0x5c
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	60f8      	str	r0, [r7, #12]
 8018c7c:	60b9      	str	r1, [r7, #8]
 8018c7e:	607a      	str	r2, [r7, #4]
 8018c80:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8018c82:	2307      	movs	r3, #7
 8018c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018c88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018c8c:	2200      	movs	r2, #0
 8018c8e:	601a      	str	r2, [r3, #0]
 8018c90:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8018c92:	2300      	movs	r3, #0
 8018c94:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8018c98:	2300      	movs	r3, #0
 8018c9a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8018c9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018ca2:	2200      	movs	r2, #0
 8018ca4:	601a      	str	r2, [r3, #0]
 8018ca6:	605a      	str	r2, [r3, #4]
 8018ca8:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018caa:	4b97      	ldr	r3, [pc, #604]	; (8018f08 <RegionUS915LinkAdrReq+0x294>)
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8018cb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018cb6:	2206      	movs	r2, #6
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7fe fcb5 	bl	8017628 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018cbe:	e11b      	b.n	8018ef8 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	685a      	ldr	r2, [r3, #4]
 8018cc4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8018cc8:	4413      	add	r3, r2
 8018cca:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018cce:	4611      	mov	r1, r2
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	f7fe fded 	bl	80178b0 <RegionCommonParseLinkAdrReq>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8018cdc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	f000 8113 	beq.w	8018f0c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8018ce6:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018cea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8018cee:	4413      	add	r3, r2
 8018cf0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8018cf4:	2307      	movs	r3, #7
 8018cf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8018cfa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018cfe:	2b06      	cmp	r3, #6
 8018d00:	d116      	bne.n	8018d30 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8018d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8018d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8018d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8018d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8018d22:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018d26:	b2db      	uxtb	r3, r3
 8018d28:	b29b      	uxth	r3, r3
 8018d2a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018d2e:	e0e3      	b.n	8018ef8 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8018d30:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018d34:	2b07      	cmp	r3, #7
 8018d36:	d112      	bne.n	8018d5e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8018d44:	2300      	movs	r3, #0
 8018d46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8018d50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018d54:	b2db      	uxtb	r3, r3
 8018d56:	b29b      	uxth	r3, r3
 8018d58:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018d5c:	e0cc      	b.n	8018ef8 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8018d5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018d62:	2b05      	cmp	r3, #5
 8018d64:	f040 80bf 	bne.w	8018ee6 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8018d68:	2301      	movs	r3, #1
 8018d6a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8018d6e:	2300      	movs	r3, #0
 8018d70:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8018d74:	2300      	movs	r3, #0
 8018d76:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018d7a:	e0ae      	b.n	8018eda <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8018d7c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018d80:	b2da      	uxtb	r2, r3
 8018d82:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018d86:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8018d8e:	4013      	ands	r3, r2
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d04d      	beq.n	8018e30 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8018d94:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018d98:	f003 0301 	and.w	r3, r3, #1
 8018d9c:	b2db      	uxtb	r3, r3
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d120      	bne.n	8018de4 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8018da2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018da6:	005b      	lsls	r3, r3, #1
 8018da8:	3358      	adds	r3, #88	; 0x58
 8018daa:	443b      	add	r3, r7
 8018dac:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018db0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018db4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8018db8:	b292      	uxth	r2, r2
 8018dba:	005b      	lsls	r3, r3, #1
 8018dbc:	3358      	adds	r3, #88	; 0x58
 8018dbe:	443b      	add	r3, r7
 8018dc0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018dc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018dc8:	b21a      	sxth	r2, r3
 8018dca:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018dce:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8018dd6:	b21b      	sxth	r3, r3
 8018dd8:	4313      	orrs	r3, r2
 8018dda:	b21b      	sxth	r3, r3
 8018ddc:	b29b      	uxth	r3, r3
 8018dde:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018de2:	e075      	b.n	8018ed0 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8018de4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018de8:	005b      	lsls	r3, r3, #1
 8018dea:	3358      	adds	r3, #88	; 0x58
 8018dec:	443b      	add	r3, r7
 8018dee:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018df2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018df6:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8018dfa:	b292      	uxth	r2, r2
 8018dfc:	005b      	lsls	r3, r3, #1
 8018dfe:	3358      	adds	r3, #88	; 0x58
 8018e00:	443b      	add	r3, r7
 8018e02:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018e06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018e0a:	b21a      	sxth	r2, r3
 8018e0c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018e10:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018e14:	fa01 f303 	lsl.w	r3, r1, r3
 8018e18:	b21b      	sxth	r3, r3
 8018e1a:	4313      	orrs	r3, r2
 8018e1c:	b21b      	sxth	r3, r3
 8018e1e:	b29b      	uxth	r3, r3
 8018e20:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018e24:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018e28:	3301      	adds	r3, #1
 8018e2a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8018e2e:	e04f      	b.n	8018ed0 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8018e30:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018e34:	f003 0301 	and.w	r3, r3, #1
 8018e38:	b2db      	uxtb	r3, r3
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d122      	bne.n	8018e84 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8018e3e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018e42:	005b      	lsls	r3, r3, #1
 8018e44:	3358      	adds	r3, #88	; 0x58
 8018e46:	443b      	add	r3, r7
 8018e48:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018e4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018e50:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8018e54:	b292      	uxth	r2, r2
 8018e56:	005b      	lsls	r3, r3, #1
 8018e58:	3358      	adds	r3, #88	; 0x58
 8018e5a:	443b      	add	r3, r7
 8018e5c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018e60:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018e64:	b21a      	sxth	r2, r3
 8018e66:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018e6a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8018e72:	b21b      	sxth	r3, r3
 8018e74:	43db      	mvns	r3, r3
 8018e76:	b21b      	sxth	r3, r3
 8018e78:	4013      	ands	r3, r2
 8018e7a:	b21b      	sxth	r3, r3
 8018e7c:	b29b      	uxth	r3, r3
 8018e7e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018e82:	e025      	b.n	8018ed0 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8018e84:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018e88:	005b      	lsls	r3, r3, #1
 8018e8a:	3358      	adds	r3, #88	; 0x58
 8018e8c:	443b      	add	r3, r7
 8018e8e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018e92:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018e96:	b2d2      	uxtb	r2, r2
 8018e98:	b292      	uxth	r2, r2
 8018e9a:	005b      	lsls	r3, r3, #1
 8018e9c:	3358      	adds	r3, #88	; 0x58
 8018e9e:	443b      	add	r3, r7
 8018ea0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018ea4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018ea8:	b21a      	sxth	r2, r3
 8018eaa:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018eae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8018eb6:	b21b      	sxth	r3, r3
 8018eb8:	43db      	mvns	r3, r3
 8018eba:	b21b      	sxth	r3, r3
 8018ebc:	4013      	ands	r3, r2
 8018ebe:	b21b      	sxth	r3, r3
 8018ec0:	b29b      	uxth	r3, r3
 8018ec2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018ec6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018eca:	3301      	adds	r3, #1
 8018ecc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8018ed0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018ed4:	3301      	adds	r3, #1
 8018ed6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018eda:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018ede:	2b07      	cmp	r3, #7
 8018ee0:	f67f af4c 	bls.w	8018d7c <RegionUS915LinkAdrReq+0x108>
 8018ee4:	e008      	b.n	8018ef8 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8018ee6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8018eea:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8018eee:	005b      	lsls	r3, r3, #1
 8018ef0:	3358      	adds	r3, #88	; 0x58
 8018ef2:	443b      	add	r3, r7
 8018ef4:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	7a1b      	ldrb	r3, [r3, #8]
 8018efc:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8018f00:	429a      	cmp	r2, r3
 8018f02:	f4ff aedd 	bcc.w	8018cc0 <RegionUS915LinkAdrReq+0x4c>
 8018f06:	e002      	b.n	8018f0e <RegionUS915LinkAdrReq+0x29a>
 8018f08:	20001a68 	.word	0x20001a68
            break; // break loop, since no more request has been found
 8018f0c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8018f0e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018f12:	2b03      	cmp	r3, #3
 8018f14:	dc0f      	bgt.n	8018f36 <RegionUS915LinkAdrReq+0x2c2>
 8018f16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018f1a:	2204      	movs	r2, #4
 8018f1c:	2100      	movs	r1, #0
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f7fe fb56 	bl	80175d0 <RegionCommonCountChannels>
 8018f24:	4603      	mov	r3, r0
 8018f26:	2b01      	cmp	r3, #1
 8018f28:	d805      	bhi.n	8018f36 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8018f2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f2e:	f023 0301 	bic.w	r3, r3, #1
 8018f32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8018f36:	2302      	movs	r3, #2
 8018f38:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	7a5b      	ldrb	r3, [r3, #9]
 8018f40:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8018f44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f7ff f90f 	bl	801816c <RegionUS915GetPhyParam>
 8018f4e:	4603      	mov	r3, r0
 8018f50:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8018f52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018f56:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	7a9b      	ldrb	r3, [r3, #10]
 8018f5c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8018f5e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8018f62:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018f64:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018f68:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018f6a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8018f6e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018f76:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8018f7e:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	7b5b      	ldrb	r3, [r3, #13]
 8018f84:	b25b      	sxtb	r3, r3
 8018f86:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018f88:	2348      	movs	r3, #72	; 0x48
 8018f8a:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8018f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018f92:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f96:	b25b      	sxtb	r3, r3
 8018f98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018f9c:	2304      	movs	r3, #4
 8018f9e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8018fa2:	4b3f      	ldr	r3, [pc, #252]	; (80190a0 <RegionUS915LinkAdrReq+0x42c>)
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8018fa8:	230e      	movs	r3, #14
 8018faa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8018fae:	2300      	movs	r3, #0
 8018fb0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018fba:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8018fbe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018fc2:	1c9a      	adds	r2, r3, #2
 8018fc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018fc8:	1c59      	adds	r1, r3, #1
 8018fca:	f107 0014 	add.w	r0, r7, #20
 8018fce:	4623      	mov	r3, r4
 8018fd0:	f7fe fcbf 	bl	8017952 <RegionCommonLinkAdrReqVerifyParams>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018fda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018fde:	2b07      	cmp	r3, #7
 8018fe0:	d147      	bne.n	8019072 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8018fe2:	4b2f      	ldr	r3, [pc, #188]	; (80190a0 <RegionUS915LinkAdrReq+0x42c>)
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018fea:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8018fee:	2206      	movs	r2, #6
 8018ff0:	4618      	mov	r0, r3
 8018ff2:	f7fe fb19 	bl	8017628 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8018ff6:	4b2b      	ldr	r3, [pc, #172]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	8819      	ldrh	r1, [r3, #0]
 8018ffc:	4b28      	ldr	r3, [pc, #160]	; (80190a0 <RegionUS915LinkAdrReq+0x42c>)
 8018ffe:	681b      	ldr	r3, [r3, #0]
 8019000:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019004:	4b27      	ldr	r3, [pc, #156]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	400a      	ands	r2, r1
 801900a:	b292      	uxth	r2, r2
 801900c:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801900e:	4b25      	ldr	r3, [pc, #148]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 8019010:	681b      	ldr	r3, [r3, #0]
 8019012:	8859      	ldrh	r1, [r3, #2]
 8019014:	4b22      	ldr	r3, [pc, #136]	; (80190a0 <RegionUS915LinkAdrReq+0x42c>)
 8019016:	681b      	ldr	r3, [r3, #0]
 8019018:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801901c:	4b21      	ldr	r3, [pc, #132]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	400a      	ands	r2, r1
 8019022:	b292      	uxth	r2, r2
 8019024:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8019026:	4b1f      	ldr	r3, [pc, #124]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	8899      	ldrh	r1, [r3, #4]
 801902c:	4b1c      	ldr	r3, [pc, #112]	; (80190a0 <RegionUS915LinkAdrReq+0x42c>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8019034:	4b1b      	ldr	r3, [pc, #108]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	400a      	ands	r2, r1
 801903a:	b292      	uxth	r2, r2
 801903c:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801903e:	4b19      	ldr	r3, [pc, #100]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	88d9      	ldrh	r1, [r3, #6]
 8019044:	4b16      	ldr	r3, [pc, #88]	; (80190a0 <RegionUS915LinkAdrReq+0x42c>)
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801904c:	4b15      	ldr	r3, [pc, #84]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	400a      	ands	r2, r1
 8019052:	b292      	uxth	r2, r2
 8019054:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8019056:	4b12      	ldr	r3, [pc, #72]	; (80190a0 <RegionUS915LinkAdrReq+0x42c>)
 8019058:	681a      	ldr	r2, [r3, #0]
 801905a:	4b12      	ldr	r3, [pc, #72]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8019062:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8019064:	4b0e      	ldr	r3, [pc, #56]	; (80190a0 <RegionUS915LinkAdrReq+0x42c>)
 8019066:	681a      	ldr	r2, [r3, #0]
 8019068:	4b0e      	ldr	r3, [pc, #56]	; (80190a4 <RegionUS915LinkAdrReq+0x430>)
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8019070:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019072:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801907a:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019082:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8019086:	683b      	ldr	r3, [r7, #0]
 8019088:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801908a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801908c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8019090:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8019092:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8019096:	4618      	mov	r0, r3
 8019098:	375c      	adds	r7, #92	; 0x5c
 801909a:	46bd      	mov	sp, r7
 801909c:	bd90      	pop	{r4, r7, pc}
 801909e:	bf00      	nop
 80190a0:	20001a68 	.word	0x20001a68
 80190a4:	20001a64 	.word	0x20001a64

080190a8 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b084      	sub	sp, #16
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80190b0:	2307      	movs	r3, #7
 80190b2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	685b      	ldr	r3, [r3, #4]
 80190b8:	4618      	mov	r0, r3
 80190ba:	f7fe ffe3 	bl	8018084 <VerifyRfFreq>
 80190be:	4603      	mov	r3, r0
 80190c0:	f083 0301 	eor.w	r3, r3, #1
 80190c4:	b2db      	uxtb	r3, r3
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d003      	beq.n	80190d2 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 80190ca:	7bfb      	ldrb	r3, [r7, #15]
 80190cc:	f023 0301 	bic.w	r3, r3, #1
 80190d0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	f993 3000 	ldrsb.w	r3, [r3]
 80190d8:	220d      	movs	r2, #13
 80190da:	2108      	movs	r1, #8
 80190dc:	4618      	mov	r0, r3
 80190de:	f7fe fa26 	bl	801752e <RegionCommonValueInRange>
 80190e2:	4603      	mov	r3, r0
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d103      	bne.n	80190f0 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80190e8:	7bfb      	ldrb	r3, [r7, #15]
 80190ea:	f023 0302 	bic.w	r3, r3, #2
 80190ee:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	f993 3000 	ldrsb.w	r3, [r3]
 80190f6:	2207      	movs	r2, #7
 80190f8:	2105      	movs	r1, #5
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7fe fa17 	bl	801752e <RegionCommonValueInRange>
 8019100:	4603      	mov	r3, r0
 8019102:	2b01      	cmp	r3, #1
 8019104:	d004      	beq.n	8019110 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801910c:	2b0d      	cmp	r3, #13
 801910e:	dd03      	ble.n	8019118 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8019110:	7bfb      	ldrb	r3, [r7, #15]
 8019112:	f023 0302 	bic.w	r3, r3, #2
 8019116:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801911e:	2203      	movs	r2, #3
 8019120:	2100      	movs	r1, #0
 8019122:	4618      	mov	r0, r3
 8019124:	f7fe fa03 	bl	801752e <RegionCommonValueInRange>
 8019128:	4603      	mov	r3, r0
 801912a:	2b00      	cmp	r3, #0
 801912c:	d103      	bne.n	8019136 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801912e:	7bfb      	ldrb	r3, [r7, #15]
 8019130:	f023 0304 	bic.w	r3, r3, #4
 8019134:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8019136:	7bfb      	ldrb	r3, [r7, #15]
}
 8019138:	4618      	mov	r0, r3
 801913a:	3710      	adds	r7, #16
 801913c:	46bd      	mov	sp, r7
 801913e:	bd80      	pop	{r7, pc}

08019140 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019140:	b480      	push	{r7}
 8019142:	b083      	sub	sp, #12
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801914c:	4618      	mov	r0, r3
 801914e:	370c      	adds	r7, #12
 8019150:	46bd      	mov	sp, r7
 8019152:	bc80      	pop	{r7}
 8019154:	4770      	bx	lr

08019156 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019156:	b480      	push	{r7}
 8019158:	b083      	sub	sp, #12
 801915a:	af00      	add	r7, sp, #0
 801915c:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801915e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019162:	4618      	mov	r0, r3
 8019164:	370c      	adds	r7, #12
 8019166:	46bd      	mov	sp, r7
 8019168:	bc80      	pop	{r7}
 801916a:	4770      	bx	lr

0801916c <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801916c:	b480      	push	{r7}
 801916e:	b083      	sub	sp, #12
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019178:	4618      	mov	r0, r3
 801917a:	370c      	adds	r7, #12
 801917c:	46bd      	mov	sp, r7
 801917e:	bc80      	pop	{r7}
 8019180:	4770      	bx	lr
	...

08019184 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019184:	b480      	push	{r7}
 8019186:	b083      	sub	sp, #12
 8019188:	af00      	add	r7, sp, #0
 801918a:	4603      	mov	r3, r0
 801918c:	460a      	mov	r2, r1
 801918e:	71fb      	strb	r3, [r7, #7]
 8019190:	4613      	mov	r3, r2
 8019192:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8019194:	79bb      	ldrb	r3, [r7, #6]
 8019196:	2b00      	cmp	r3, #0
 8019198:	d106      	bne.n	80191a8 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801919a:	4b13      	ldr	r3, [pc, #76]	; (80191e8 <RegionUS915AlternateDr+0x64>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	7b5a      	ldrb	r2, [r3, #13]
 80191a0:	3201      	adds	r2, #1
 80191a2:	b2d2      	uxtb	r2, r2
 80191a4:	735a      	strb	r2, [r3, #13]
 80191a6:	e005      	b.n	80191b4 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 80191a8:	4b0f      	ldr	r3, [pc, #60]	; (80191e8 <RegionUS915AlternateDr+0x64>)
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	7b5a      	ldrb	r2, [r3, #13]
 80191ae:	3a01      	subs	r2, #1
 80191b0:	b2d2      	uxtb	r2, r2
 80191b2:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80191b4:	4b0c      	ldr	r3, [pc, #48]	; (80191e8 <RegionUS915AlternateDr+0x64>)
 80191b6:	681b      	ldr	r3, [r3, #0]
 80191b8:	7b5a      	ldrb	r2, [r3, #13]
 80191ba:	4b0c      	ldr	r3, [pc, #48]	; (80191ec <RegionUS915AlternateDr+0x68>)
 80191bc:	fba3 1302 	umull	r1, r3, r3, r2
 80191c0:	0859      	lsrs	r1, r3, #1
 80191c2:	460b      	mov	r3, r1
 80191c4:	00db      	lsls	r3, r3, #3
 80191c6:	440b      	add	r3, r1
 80191c8:	1ad3      	subs	r3, r2, r3
 80191ca:	b2db      	uxtb	r3, r3
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d102      	bne.n	80191d6 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 80191d0:	2304      	movs	r3, #4
 80191d2:	71fb      	strb	r3, [r7, #7]
 80191d4:	e001      	b.n	80191da <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 80191d6:	2300      	movs	r3, #0
 80191d8:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 80191da:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 80191de:	4618      	mov	r0, r3
 80191e0:	370c      	adds	r7, #12
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bc80      	pop	{r7}
 80191e6:	4770      	bx	lr
 80191e8:	20001a64 	.word	0x20001a64
 80191ec:	38e38e39 	.word	0x38e38e39

080191f0 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b0a8      	sub	sp, #160	; 0xa0
 80191f4:	af02      	add	r7, sp, #8
 80191f6:	60f8      	str	r0, [r7, #12]
 80191f8:	60b9      	str	r1, [r7, #8]
 80191fa:	607a      	str	r2, [r7, #4]
 80191fc:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 80191fe:	2300      	movs	r3, #0
 8019200:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8019204:	2300      	movs	r3, #0
 8019206:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801920a:	2300      	movs	r3, #0
 801920c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801920e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019212:	2244      	movs	r2, #68	; 0x44
 8019214:	2100      	movs	r1, #0
 8019216:	4618      	mov	r0, r3
 8019218:	f004 fea2 	bl	801df60 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801921c:	230c      	movs	r3, #12
 801921e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8019222:	4b67      	ldr	r3, [pc, #412]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	2204      	movs	r2, #4
 8019228:	2100      	movs	r1, #0
 801922a:	4618      	mov	r0, r3
 801922c:	f7fe f9d0 	bl	80175d0 <RegionCommonCountChannels>
 8019230:	4603      	mov	r3, r0
 8019232:	2b00      	cmp	r3, #0
 8019234:	d10e      	bne.n	8019254 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8019236:	4b62      	ldr	r3, [pc, #392]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	4618      	mov	r0, r3
 801923c:	4b61      	ldr	r3, [pc, #388]	; (80193c4 <RegionUS915NextChannel+0x1d4>)
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019244:	2204      	movs	r2, #4
 8019246:	4619      	mov	r1, r3
 8019248:	f7fe f9ee 	bl	8017628 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801924c:	4b5c      	ldr	r3, [pc, #368]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	2200      	movs	r2, #0
 8019252:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801925a:	2b03      	cmp	r3, #3
 801925c:	dd0c      	ble.n	8019278 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801925e:	4b58      	ldr	r3, [pc, #352]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	891b      	ldrh	r3, [r3, #8]
 8019264:	b2db      	uxtb	r3, r3
 8019266:	2b00      	cmp	r3, #0
 8019268:	d106      	bne.n	8019278 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801926a:	4b56      	ldr	r3, [pc, #344]	; (80193c4 <RegionUS915NextChannel+0x1d4>)
 801926c:	681a      	ldr	r2, [r3, #0]
 801926e:	4b54      	ldr	r3, [pc, #336]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8019276:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	7a5b      	ldrb	r3, [r3, #9]
 801927c:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019284:	b2db      	uxtb	r3, r3
 8019286:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8019288:	4b4d      	ldr	r3, [pc, #308]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801928e:	4b4d      	ldr	r3, [pc, #308]	; (80193c4 <RegionUS915NextChannel+0x1d4>)
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8019294:	4b4c      	ldr	r3, [pc, #304]	; (80193c8 <RegionUS915NextChannel+0x1d8>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801929a:	2348      	movs	r3, #72	; 0x48
 801929c:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801929e:	2300      	movs	r3, #0
 80192a0:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	685b      	ldr	r3, [r3, #4]
 80192ac:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	7a9b      	ldrb	r3, [r3, #10]
 80192b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80192b6:	2301      	movs	r3, #1
 80192b8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80192bc:	f107 0314 	add.w	r3, r7, #20
 80192c0:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80192c2:	68fa      	ldr	r2, [r7, #12]
 80192c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80192c8:	320c      	adds	r2, #12
 80192ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80192ce:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	7d1b      	ldrb	r3, [r3, #20]
 80192d6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	8adb      	ldrh	r3, [r3, #22]
 80192e4:	4619      	mov	r1, r3
 80192e6:	4610      	mov	r0, r2
 80192e8:	f7fe ff10 	bl	801810c <GetTimeOnAir>
 80192ec:	4603      	mov	r3, r0
 80192ee:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80192f0:	f107 0195 	add.w	r1, r7, #149	; 0x95
 80192f4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80192f8:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	9301      	str	r3, [sp, #4]
 8019300:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8019304:	9300      	str	r3, [sp, #0]
 8019306:	460b      	mov	r3, r1
 8019308:	6839      	ldr	r1, [r7, #0]
 801930a:	f7fe fd68 	bl	8017dde <RegionCommonIdentifyChannels>
 801930e:	4603      	mov	r3, r0
 8019310:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019314:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8019318:	2b00      	cmp	r3, #0
 801931a:	d14a      	bne.n	80193b2 <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	7a5b      	ldrb	r3, [r3, #9]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d00e      	beq.n	8019342 <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019324:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8019328:	3b01      	subs	r3, #1
 801932a:	4619      	mov	r1, r3
 801932c:	2000      	movs	r0, #0
 801932e:	f000 f89f 	bl	8019470 <randr>
 8019332:	4603      	mov	r3, r0
 8019334:	3398      	adds	r3, #152	; 0x98
 8019336:	443b      	add	r3, r7
 8019338:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801933c:	68bb      	ldr	r3, [r7, #8]
 801933e:	701a      	strb	r2, [r3, #0]
 8019340:	e02e      	b.n	80193a0 <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d10e      	bne.n	801936a <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801934c:	4b1c      	ldr	r3, [pc, #112]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8019352:	4b1b      	ldr	r3, [pc, #108]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 8019354:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8019356:	330c      	adds	r3, #12
 8019358:	68ba      	ldr	r2, [r7, #8]
 801935a:	4619      	mov	r1, r3
 801935c:	f7fd fea2 	bl	80170a4 <RegionBaseUSComputeNext125kHzJoinChannel>
 8019360:	4603      	mov	r3, r0
 8019362:	2b03      	cmp	r3, #3
 8019364:	d11c      	bne.n	80193a0 <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8019366:	2303      	movs	r3, #3
 8019368:	e025      	b.n	80193b6 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801936a:	2300      	movs	r3, #0
 801936c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8019370:	e004      	b.n	801937c <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8019372:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019376:	3301      	adds	r3, #1
 8019378:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801937c:	4b10      	ldr	r3, [pc, #64]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	891b      	ldrh	r3, [r3, #8]
 8019382:	b2da      	uxtb	r2, r3
 8019384:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019388:	fa42 f303 	asr.w	r3, r2, r3
 801938c:	f003 0301 	and.w	r3, r3, #1
 8019390:	2b00      	cmp	r3, #0
 8019392:	d0ee      	beq.n	8019372 <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8019394:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8019398:	3340      	adds	r3, #64	; 0x40
 801939a:	b2da      	uxtb	r2, r3
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80193a0:	4b07      	ldr	r3, [pc, #28]	; (80193c0 <RegionUS915NextChannel+0x1d0>)
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	4618      	mov	r0, r3
 80193a6:	68bb      	ldr	r3, [r7, #8]
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	2248      	movs	r2, #72	; 0x48
 80193ac:	4619      	mov	r1, r3
 80193ae:	f7fe f8db 	bl	8017568 <RegionCommonChanDisable>
    }
    return status;
 80193b2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 80193b6:	4618      	mov	r0, r3
 80193b8:	3798      	adds	r7, #152	; 0x98
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}
 80193be:	bf00      	nop
 80193c0:	20001a64 	.word	0x20001a64
 80193c4:	20001a68 	.word	0x20001a68
 80193c8:	20001a6c 	.word	0x20001a6c

080193cc <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80193cc:	b480      	push	{r7}
 80193ce:	b085      	sub	sp, #20
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	4603      	mov	r3, r0
 80193d4:	71fb      	strb	r3, [r7, #7]
 80193d6:	460b      	mov	r3, r1
 80193d8:	71bb      	strb	r3, [r7, #6]
 80193da:	4613      	mov	r3, r2
 80193dc:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80193de:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80193e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80193e6:	4909      	ldr	r1, [pc, #36]	; (801940c <RegionUS915ApplyDrOffset+0x40>)
 80193e8:	0092      	lsls	r2, r2, #2
 80193ea:	440a      	add	r2, r1
 80193ec:	4413      	add	r3, r2
 80193ee:	781b      	ldrb	r3, [r3, #0]
 80193f0:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80193f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	da01      	bge.n	80193fe <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 80193fa:	2300      	movs	r3, #0
 80193fc:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80193fe:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8019400:	4618      	mov	r0, r3
 8019402:	3714      	adds	r7, #20
 8019404:	46bd      	mov	sp, r7
 8019406:	bc80      	pop	{r7}
 8019408:	4770      	bx	lr
 801940a:	bf00      	nop
 801940c:	0801ee10 	.word	0x0801ee10

08019410 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019410:	b480      	push	{r7}
 8019412:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019414:	4b0d      	ldr	r3, [pc, #52]	; (801944c <rand1+0x3c>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	4a0d      	ldr	r2, [pc, #52]	; (8019450 <rand1+0x40>)
 801941a:	fb02 f303 	mul.w	r3, r2, r3
 801941e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019422:	3339      	adds	r3, #57	; 0x39
 8019424:	4a09      	ldr	r2, [pc, #36]	; (801944c <rand1+0x3c>)
 8019426:	6013      	str	r3, [r2, #0]
 8019428:	4b08      	ldr	r3, [pc, #32]	; (801944c <rand1+0x3c>)
 801942a:	681a      	ldr	r2, [r3, #0]
 801942c:	2303      	movs	r3, #3
 801942e:	fba3 1302 	umull	r1, r3, r3, r2
 8019432:	1ad1      	subs	r1, r2, r3
 8019434:	0849      	lsrs	r1, r1, #1
 8019436:	440b      	add	r3, r1
 8019438:	0f99      	lsrs	r1, r3, #30
 801943a:	460b      	mov	r3, r1
 801943c:	07db      	lsls	r3, r3, #31
 801943e:	1a5b      	subs	r3, r3, r1
 8019440:	1ad1      	subs	r1, r2, r3
 8019442:	460b      	mov	r3, r1
}
 8019444:	4618      	mov	r0, r3
 8019446:	46bd      	mov	sp, r7
 8019448:	bc80      	pop	{r7}
 801944a:	4770      	bx	lr
 801944c:	20000130 	.word	0x20000130
 8019450:	41c64e6d 	.word	0x41c64e6d

08019454 <srand1>:

void srand1( uint32_t seed )
{
 8019454:	b480      	push	{r7}
 8019456:	b083      	sub	sp, #12
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
    next = seed;
 801945c:	4a03      	ldr	r2, [pc, #12]	; (801946c <srand1+0x18>)
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	6013      	str	r3, [r2, #0]
}
 8019462:	bf00      	nop
 8019464:	370c      	adds	r7, #12
 8019466:	46bd      	mov	sp, r7
 8019468:	bc80      	pop	{r7}
 801946a:	4770      	bx	lr
 801946c:	20000130 	.word	0x20000130

08019470 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b082      	sub	sp, #8
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
 8019478:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801947a:	f7ff ffc9 	bl	8019410 <rand1>
 801947e:	4602      	mov	r2, r0
 8019480:	6839      	ldr	r1, [r7, #0]
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	1acb      	subs	r3, r1, r3
 8019486:	3301      	adds	r3, #1
 8019488:	fb92 f1f3 	sdiv	r1, r2, r3
 801948c:	fb01 f303 	mul.w	r3, r1, r3
 8019490:	1ad2      	subs	r2, r2, r3
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	4413      	add	r3, r2
}
 8019496:	4618      	mov	r0, r3
 8019498:	3708      	adds	r7, #8
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}

0801949e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801949e:	b480      	push	{r7}
 80194a0:	b085      	sub	sp, #20
 80194a2:	af00      	add	r7, sp, #0
 80194a4:	60f8      	str	r0, [r7, #12]
 80194a6:	60b9      	str	r1, [r7, #8]
 80194a8:	4613      	mov	r3, r2
 80194aa:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80194ac:	e007      	b.n	80194be <memcpy1+0x20>
    {
        *dst++ = *src++;
 80194ae:	68ba      	ldr	r2, [r7, #8]
 80194b0:	1c53      	adds	r3, r2, #1
 80194b2:	60bb      	str	r3, [r7, #8]
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	1c59      	adds	r1, r3, #1
 80194b8:	60f9      	str	r1, [r7, #12]
 80194ba:	7812      	ldrb	r2, [r2, #0]
 80194bc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80194be:	88fb      	ldrh	r3, [r7, #6]
 80194c0:	1e5a      	subs	r2, r3, #1
 80194c2:	80fa      	strh	r2, [r7, #6]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d1f2      	bne.n	80194ae <memcpy1+0x10>
    }
}
 80194c8:	bf00      	nop
 80194ca:	bf00      	nop
 80194cc:	3714      	adds	r7, #20
 80194ce:	46bd      	mov	sp, r7
 80194d0:	bc80      	pop	{r7}
 80194d2:	4770      	bx	lr

080194d4 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 80194d4:	b480      	push	{r7}
 80194d6:	b085      	sub	sp, #20
 80194d8:	af00      	add	r7, sp, #0
 80194da:	60f8      	str	r0, [r7, #12]
 80194dc:	60b9      	str	r1, [r7, #8]
 80194de:	4613      	mov	r3, r2
 80194e0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 80194e2:	88fb      	ldrh	r3, [r7, #6]
 80194e4:	3b01      	subs	r3, #1
 80194e6:	68fa      	ldr	r2, [r7, #12]
 80194e8:	4413      	add	r3, r2
 80194ea:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80194ec:	e007      	b.n	80194fe <memcpyr+0x2a>
    {
        *dst-- = *src++;
 80194ee:	68ba      	ldr	r2, [r7, #8]
 80194f0:	1c53      	adds	r3, r2, #1
 80194f2:	60bb      	str	r3, [r7, #8]
 80194f4:	68fb      	ldr	r3, [r7, #12]
 80194f6:	1e59      	subs	r1, r3, #1
 80194f8:	60f9      	str	r1, [r7, #12]
 80194fa:	7812      	ldrb	r2, [r2, #0]
 80194fc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80194fe:	88fb      	ldrh	r3, [r7, #6]
 8019500:	1e5a      	subs	r2, r3, #1
 8019502:	80fa      	strh	r2, [r7, #6]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d1f2      	bne.n	80194ee <memcpyr+0x1a>
    }
}
 8019508:	bf00      	nop
 801950a:	bf00      	nop
 801950c:	3714      	adds	r7, #20
 801950e:	46bd      	mov	sp, r7
 8019510:	bc80      	pop	{r7}
 8019512:	4770      	bx	lr

08019514 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019514:	b480      	push	{r7}
 8019516:	b083      	sub	sp, #12
 8019518:	af00      	add	r7, sp, #0
 801951a:	6078      	str	r0, [r7, #4]
 801951c:	460b      	mov	r3, r1
 801951e:	70fb      	strb	r3, [r7, #3]
 8019520:	4613      	mov	r3, r2
 8019522:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019524:	e004      	b.n	8019530 <memset1+0x1c>
    {
        *dst++ = value;
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	1c5a      	adds	r2, r3, #1
 801952a:	607a      	str	r2, [r7, #4]
 801952c:	78fa      	ldrb	r2, [r7, #3]
 801952e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019530:	883b      	ldrh	r3, [r7, #0]
 8019532:	1e5a      	subs	r2, r3, #1
 8019534:	803a      	strh	r2, [r7, #0]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d1f5      	bne.n	8019526 <memset1+0x12>
    }
}
 801953a:	bf00      	nop
 801953c:	bf00      	nop
 801953e:	370c      	adds	r7, #12
 8019540:	46bd      	mov	sp, r7
 8019542:	bc80      	pop	{r7}
 8019544:	4770      	bx	lr
	...

08019548 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019548:	b480      	push	{r7}
 801954a:	b085      	sub	sp, #20
 801954c:	af00      	add	r7, sp, #0
 801954e:	6078      	str	r0, [r7, #4]
 8019550:	460b      	mov	r3, r1
 8019552:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019558:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d101      	bne.n	8019564 <Crc32+0x1c>
    {
        return 0;
 8019560:	2300      	movs	r3, #0
 8019562:	e026      	b.n	80195b2 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019564:	2300      	movs	r3, #0
 8019566:	817b      	strh	r3, [r7, #10]
 8019568:	e01d      	b.n	80195a6 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 801956a:	897b      	ldrh	r3, [r7, #10]
 801956c:	687a      	ldr	r2, [r7, #4]
 801956e:	4413      	add	r3, r2
 8019570:	781b      	ldrb	r3, [r3, #0]
 8019572:	461a      	mov	r2, r3
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	4053      	eors	r3, r2
 8019578:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 801957a:	2300      	movs	r3, #0
 801957c:	813b      	strh	r3, [r7, #8]
 801957e:	e00c      	b.n	801959a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	085a      	lsrs	r2, r3, #1
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	f003 0301 	and.w	r3, r3, #1
 801958a:	425b      	negs	r3, r3
 801958c:	490b      	ldr	r1, [pc, #44]	; (80195bc <Crc32+0x74>)
 801958e:	400b      	ands	r3, r1
 8019590:	4053      	eors	r3, r2
 8019592:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019594:	893b      	ldrh	r3, [r7, #8]
 8019596:	3301      	adds	r3, #1
 8019598:	813b      	strh	r3, [r7, #8]
 801959a:	893b      	ldrh	r3, [r7, #8]
 801959c:	2b07      	cmp	r3, #7
 801959e:	d9ef      	bls.n	8019580 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 80195a0:	897b      	ldrh	r3, [r7, #10]
 80195a2:	3301      	adds	r3, #1
 80195a4:	817b      	strh	r3, [r7, #10]
 80195a6:	897a      	ldrh	r2, [r7, #10]
 80195a8:	887b      	ldrh	r3, [r7, #2]
 80195aa:	429a      	cmp	r2, r3
 80195ac:	d3dd      	bcc.n	801956a <Crc32+0x22>
        }
    }

    return ~crc;
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	43db      	mvns	r3, r3
}
 80195b2:	4618      	mov	r0, r3
 80195b4:	3714      	adds	r7, #20
 80195b6:	46bd      	mov	sp, r7
 80195b8:	bc80      	pop	{r7}
 80195ba:	4770      	bx	lr
 80195bc:	edb88320 	.word	0xedb88320

080195c0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b084      	sub	sp, #16
 80195c4:	af02      	add	r7, sp, #8
 80195c6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80195c8:	4a24      	ldr	r2, [pc, #144]	; (801965c <RadioInit+0x9c>)
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80195ce:	4b24      	ldr	r3, [pc, #144]	; (8019660 <RadioInit+0xa0>)
 80195d0:	2200      	movs	r2, #0
 80195d2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80195d4:	4b22      	ldr	r3, [pc, #136]	; (8019660 <RadioInit+0xa0>)
 80195d6:	2200      	movs	r2, #0
 80195d8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80195da:	4b21      	ldr	r3, [pc, #132]	; (8019660 <RadioInit+0xa0>)
 80195dc:	2200      	movs	r2, #0
 80195de:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80195e0:	4b1f      	ldr	r3, [pc, #124]	; (8019660 <RadioInit+0xa0>)
 80195e2:	2200      	movs	r2, #0
 80195e4:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80195e6:	481f      	ldr	r0, [pc, #124]	; (8019664 <RadioInit+0xa4>)
 80195e8:	f001 ffc2 	bl	801b570 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80195ec:	4b1c      	ldr	r3, [pc, #112]	; (8019660 <RadioInit+0xa0>)
 80195ee:	2200      	movs	r2, #0
 80195f0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80195f2:	4b1b      	ldr	r3, [pc, #108]	; (8019660 <RadioInit+0xa0>)
 80195f4:	2200      	movs	r2, #0
 80195f6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80195f8:	f002 fa56 	bl	801baa8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80195fc:	2100      	movs	r1, #0
 80195fe:	2000      	movs	r0, #0
 8019600:	f002 fe22 	bl	801c248 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019604:	2204      	movs	r2, #4
 8019606:	2100      	movs	r1, #0
 8019608:	2001      	movs	r0, #1
 801960a:	f002 fbdf 	bl	801bdcc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801960e:	2300      	movs	r3, #0
 8019610:	2200      	movs	r2, #0
 8019612:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019616:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801961a:	f002 fb0f 	bl	801bc3c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801961e:	f000 fe99 	bl	801a354 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019622:	2300      	movs	r3, #0
 8019624:	9300      	str	r3, [sp, #0]
 8019626:	4b10      	ldr	r3, [pc, #64]	; (8019668 <RadioInit+0xa8>)
 8019628:	2200      	movs	r2, #0
 801962a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801962e:	480f      	ldr	r0, [pc, #60]	; (801966c <RadioInit+0xac>)
 8019630:	f003 feee 	bl	801d410 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019634:	2300      	movs	r3, #0
 8019636:	9300      	str	r3, [sp, #0]
 8019638:	4b0d      	ldr	r3, [pc, #52]	; (8019670 <RadioInit+0xb0>)
 801963a:	2200      	movs	r2, #0
 801963c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019640:	480c      	ldr	r0, [pc, #48]	; (8019674 <RadioInit+0xb4>)
 8019642:	f003 fee5 	bl	801d410 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019646:	4809      	ldr	r0, [pc, #36]	; (801966c <RadioInit+0xac>)
 8019648:	f003 ff86 	bl	801d558 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801964c:	4809      	ldr	r0, [pc, #36]	; (8019674 <RadioInit+0xb4>)
 801964e:	f003 ff83 	bl	801d558 <UTIL_TIMER_Stop>
}
 8019652:	bf00      	nop
 8019654:	3708      	adds	r7, #8
 8019656:	46bd      	mov	sp, r7
 8019658:	bd80      	pop	{r7, pc}
 801965a:	bf00      	nop
 801965c:	20001b70 	.word	0x20001b70
 8019660:	20001b74 	.word	0x20001b74
 8019664:	0801a74d 	.word	0x0801a74d
 8019668:	0801a6d5 	.word	0x0801a6d5
 801966c:	20001bd0 	.word	0x20001bd0
 8019670:	0801a6e9 	.word	0x0801a6e9
 8019674:	20001be8 	.word	0x20001be8

08019678 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019678:	b580      	push	{r7, lr}
 801967a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801967c:	f001 ffc0 	bl	801b600 <SUBGRF_GetOperatingMode>
 8019680:	4603      	mov	r3, r0
 8019682:	2b07      	cmp	r3, #7
 8019684:	d00a      	beq.n	801969c <RadioGetStatus+0x24>
 8019686:	2b07      	cmp	r3, #7
 8019688:	dc0a      	bgt.n	80196a0 <RadioGetStatus+0x28>
 801968a:	2b04      	cmp	r3, #4
 801968c:	d002      	beq.n	8019694 <RadioGetStatus+0x1c>
 801968e:	2b05      	cmp	r3, #5
 8019690:	d002      	beq.n	8019698 <RadioGetStatus+0x20>
 8019692:	e005      	b.n	80196a0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019694:	2302      	movs	r3, #2
 8019696:	e004      	b.n	80196a2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019698:	2301      	movs	r3, #1
 801969a:	e002      	b.n	80196a2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801969c:	2303      	movs	r3, #3
 801969e:	e000      	b.n	80196a2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80196a0:	2300      	movs	r3, #0
    }
}
 80196a2:	4618      	mov	r0, r3
 80196a4:	bd80      	pop	{r7, pc}
	...

080196a8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b082      	sub	sp, #8
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	4603      	mov	r3, r0
 80196b0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80196b2:	4a2a      	ldr	r2, [pc, #168]	; (801975c <RadioSetModem+0xb4>)
 80196b4:	79fb      	ldrb	r3, [r7, #7]
 80196b6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80196b8:	79fb      	ldrb	r3, [r7, #7]
 80196ba:	4618      	mov	r0, r3
 80196bc:	f003 f997 	bl	801c9ee <RFW_SetRadioModem>
    switch( modem )
 80196c0:	79fb      	ldrb	r3, [r7, #7]
 80196c2:	2b05      	cmp	r3, #5
 80196c4:	d80e      	bhi.n	80196e4 <RadioSetModem+0x3c>
 80196c6:	a201      	add	r2, pc, #4	; (adr r2, 80196cc <RadioSetModem+0x24>)
 80196c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80196cc:	080196f3 	.word	0x080196f3
 80196d0:	08019701 	.word	0x08019701
 80196d4:	080196e5 	.word	0x080196e5
 80196d8:	08019727 	.word	0x08019727
 80196dc:	08019735 	.word	0x08019735
 80196e0:	08019743 	.word	0x08019743
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80196e4:	2003      	movs	r0, #3
 80196e6:	f002 fb4b 	bl	801bd80 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80196ea:	4b1c      	ldr	r3, [pc, #112]	; (801975c <RadioSetModem+0xb4>)
 80196ec:	2200      	movs	r2, #0
 80196ee:	735a      	strb	r2, [r3, #13]
        break;
 80196f0:	e02f      	b.n	8019752 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80196f2:	2000      	movs	r0, #0
 80196f4:	f002 fb44 	bl	801bd80 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80196f8:	4b18      	ldr	r3, [pc, #96]	; (801975c <RadioSetModem+0xb4>)
 80196fa:	2200      	movs	r2, #0
 80196fc:	735a      	strb	r2, [r3, #13]
        break;
 80196fe:	e028      	b.n	8019752 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8019700:	2001      	movs	r0, #1
 8019702:	f002 fb3d 	bl	801bd80 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8019706:	4b15      	ldr	r3, [pc, #84]	; (801975c <RadioSetModem+0xb4>)
 8019708:	7b5a      	ldrb	r2, [r3, #13]
 801970a:	4b14      	ldr	r3, [pc, #80]	; (801975c <RadioSetModem+0xb4>)
 801970c:	7b1b      	ldrb	r3, [r3, #12]
 801970e:	429a      	cmp	r2, r3
 8019710:	d01e      	beq.n	8019750 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8019712:	4b12      	ldr	r3, [pc, #72]	; (801975c <RadioSetModem+0xb4>)
 8019714:	7b1a      	ldrb	r2, [r3, #12]
 8019716:	4b11      	ldr	r3, [pc, #68]	; (801975c <RadioSetModem+0xb4>)
 8019718:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801971a:	4b10      	ldr	r3, [pc, #64]	; (801975c <RadioSetModem+0xb4>)
 801971c:	7b5b      	ldrb	r3, [r3, #13]
 801971e:	4618      	mov	r0, r3
 8019720:	f000 ffa2 	bl	801a668 <RadioSetPublicNetwork>
        }
        break;
 8019724:	e014      	b.n	8019750 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019726:	2002      	movs	r0, #2
 8019728:	f002 fb2a 	bl	801bd80 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801972c:	4b0b      	ldr	r3, [pc, #44]	; (801975c <RadioSetModem+0xb4>)
 801972e:	2200      	movs	r2, #0
 8019730:	735a      	strb	r2, [r3, #13]
        break;
 8019732:	e00e      	b.n	8019752 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8019734:	2002      	movs	r0, #2
 8019736:	f002 fb23 	bl	801bd80 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801973a:	4b08      	ldr	r3, [pc, #32]	; (801975c <RadioSetModem+0xb4>)
 801973c:	2200      	movs	r2, #0
 801973e:	735a      	strb	r2, [r3, #13]
        break;
 8019740:	e007      	b.n	8019752 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8019742:	2000      	movs	r0, #0
 8019744:	f002 fb1c 	bl	801bd80 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019748:	4b04      	ldr	r3, [pc, #16]	; (801975c <RadioSetModem+0xb4>)
 801974a:	2200      	movs	r2, #0
 801974c:	735a      	strb	r2, [r3, #13]
        break;
 801974e:	e000      	b.n	8019752 <RadioSetModem+0xaa>
        break;
 8019750:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8019752:	bf00      	nop
 8019754:	3708      	adds	r7, #8
 8019756:	46bd      	mov	sp, r7
 8019758:	bd80      	pop	{r7, pc}
 801975a:	bf00      	nop
 801975c:	20001b74 	.word	0x20001b74

08019760 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b082      	sub	sp, #8
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019768:	6878      	ldr	r0, [r7, #4]
 801976a:	f002 fac3 	bl	801bcf4 <SUBGRF_SetRfFrequency>
}
 801976e:	bf00      	nop
 8019770:	3708      	adds	r7, #8
 8019772:	46bd      	mov	sp, r7
 8019774:	bd80      	pop	{r7, pc}

08019776 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019776:	b580      	push	{r7, lr}
 8019778:	b090      	sub	sp, #64	; 0x40
 801977a:	af0a      	add	r7, sp, #40	; 0x28
 801977c:	60f8      	str	r0, [r7, #12]
 801977e:	60b9      	str	r1, [r7, #8]
 8019780:	603b      	str	r3, [r7, #0]
 8019782:	4613      	mov	r3, r2
 8019784:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019786:	2301      	movs	r3, #1
 8019788:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801978a:	2300      	movs	r3, #0
 801978c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801978e:	2300      	movs	r3, #0
 8019790:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8019792:	f000 fdf2 	bl	801a37a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8019796:	2000      	movs	r0, #0
 8019798:	f7ff ff86 	bl	80196a8 <RadioSetModem>

    RadioSetChannel( freq );
 801979c:	68f8      	ldr	r0, [r7, #12]
 801979e:	f7ff ffdf 	bl	8019760 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80197a2:	2301      	movs	r3, #1
 80197a4:	9309      	str	r3, [sp, #36]	; 0x24
 80197a6:	2300      	movs	r3, #0
 80197a8:	9308      	str	r3, [sp, #32]
 80197aa:	2300      	movs	r3, #0
 80197ac:	9307      	str	r3, [sp, #28]
 80197ae:	2300      	movs	r3, #0
 80197b0:	9306      	str	r3, [sp, #24]
 80197b2:	2300      	movs	r3, #0
 80197b4:	9305      	str	r3, [sp, #20]
 80197b6:	2300      	movs	r3, #0
 80197b8:	9304      	str	r3, [sp, #16]
 80197ba:	2300      	movs	r3, #0
 80197bc:	9303      	str	r3, [sp, #12]
 80197be:	2300      	movs	r3, #0
 80197c0:	9302      	str	r3, [sp, #8]
 80197c2:	2303      	movs	r3, #3
 80197c4:	9301      	str	r3, [sp, #4]
 80197c6:	68bb      	ldr	r3, [r7, #8]
 80197c8:	9300      	str	r3, [sp, #0]
 80197ca:	2300      	movs	r3, #0
 80197cc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80197d0:	68b9      	ldr	r1, [r7, #8]
 80197d2:	2000      	movs	r0, #0
 80197d4:	f000 f83c 	bl	8019850 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80197d8:	2000      	movs	r0, #0
 80197da:	f000 fdd5 	bl	801a388 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80197de:	f000 ff71 	bl	801a6c4 <RadioGetWakeupTime>
 80197e2:	4603      	mov	r3, r0
 80197e4:	4618      	mov	r0, r3
 80197e6:	f7e8 fe39 	bl	800245c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80197ea:	f003 ffcf 	bl	801d78c <UTIL_TIMER_GetCurrentTime>
 80197ee:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80197f0:	e00d      	b.n	801980e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80197f2:	2000      	movs	r0, #0
 80197f4:	f000 feb6 	bl	801a564 <RadioRssi>
 80197f8:	4603      	mov	r3, r0
 80197fa:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80197fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019800:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019804:	429a      	cmp	r2, r3
 8019806:	dd02      	ble.n	801980e <RadioIsChannelFree+0x98>
        {
            status = false;
 8019808:	2300      	movs	r3, #0
 801980a:	75fb      	strb	r3, [r7, #23]
            break;
 801980c:	e006      	b.n	801981c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801980e:	6938      	ldr	r0, [r7, #16]
 8019810:	f003 ffce 	bl	801d7b0 <UTIL_TIMER_GetElapsedTime>
 8019814:	4602      	mov	r2, r0
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	4293      	cmp	r3, r2
 801981a:	d8ea      	bhi.n	80197f2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801981c:	f000 fdad 	bl	801a37a <RadioStandby>

    return status;
 8019820:	7dfb      	ldrb	r3, [r7, #23]
}
 8019822:	4618      	mov	r0, r3
 8019824:	3718      	adds	r7, #24
 8019826:	46bd      	mov	sp, r7
 8019828:	bd80      	pop	{r7, pc}

0801982a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801982a:	b580      	push	{r7, lr}
 801982c:	b082      	sub	sp, #8
 801982e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8019830:	2300      	movs	r3, #0
 8019832:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019834:	2300      	movs	r3, #0
 8019836:	2200      	movs	r2, #0
 8019838:	2100      	movs	r1, #0
 801983a:	2000      	movs	r0, #0
 801983c:	f002 f9fe 	bl	801bc3c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8019840:	f001 ffaf 	bl	801b7a2 <SUBGRF_GetRandom>
 8019844:	6078      	str	r0, [r7, #4]

    return rnd;
 8019846:	687b      	ldr	r3, [r7, #4]
}
 8019848:	4618      	mov	r0, r3
 801984a:	3708      	adds	r7, #8
 801984c:	46bd      	mov	sp, r7
 801984e:	bd80      	pop	{r7, pc}

08019850 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b08a      	sub	sp, #40	; 0x28
 8019854:	af00      	add	r7, sp, #0
 8019856:	60b9      	str	r1, [r7, #8]
 8019858:	607a      	str	r2, [r7, #4]
 801985a:	461a      	mov	r2, r3
 801985c:	4603      	mov	r3, r0
 801985e:	73fb      	strb	r3, [r7, #15]
 8019860:	4613      	mov	r3, r2
 8019862:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019864:	4ab9      	ldr	r2, [pc, #740]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019866:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801986a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801986c:	f003 f87d 	bl	801c96a <RFW_DeInit>
    if( rxContinuous == true )
 8019870:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019874:	2b00      	cmp	r3, #0
 8019876:	d001      	beq.n	801987c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019878:	2300      	movs	r3, #0
 801987a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801987c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019880:	2b00      	cmp	r3, #0
 8019882:	d004      	beq.n	801988e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019884:	4ab2      	ldr	r2, [pc, #712]	; (8019b50 <RadioSetRxConfig+0x300>)
 8019886:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801988a:	7013      	strb	r3, [r2, #0]
 801988c:	e002      	b.n	8019894 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801988e:	4bb0      	ldr	r3, [pc, #704]	; (8019b50 <RadioSetRxConfig+0x300>)
 8019890:	22ff      	movs	r2, #255	; 0xff
 8019892:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019894:	7bfb      	ldrb	r3, [r7, #15]
 8019896:	2b05      	cmp	r3, #5
 8019898:	d009      	beq.n	80198ae <RadioSetRxConfig+0x5e>
 801989a:	2b05      	cmp	r3, #5
 801989c:	f300 81d7 	bgt.w	8019c4e <RadioSetRxConfig+0x3fe>
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	f000 80bf 	beq.w	8019a24 <RadioSetRxConfig+0x1d4>
 80198a6:	2b01      	cmp	r3, #1
 80198a8:	f000 8124 	beq.w	8019af4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80198ac:	e1cf      	b.n	8019c4e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80198ae:	2001      	movs	r0, #1
 80198b0:	f002 f8bc 	bl	801ba2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80198b4:	4ba5      	ldr	r3, [pc, #660]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198b6:	2200      	movs	r2, #0
 80198b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80198bc:	4aa3      	ldr	r2, [pc, #652]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80198c2:	4ba2      	ldr	r3, [pc, #648]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198c4:	2209      	movs	r2, #9
 80198c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80198ca:	4ba0      	ldr	r3, [pc, #640]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80198d0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80198d2:	68b8      	ldr	r0, [r7, #8]
 80198d4:	f002 ff7c 	bl	801c7d0 <SUBGRF_GetFskBandwidthRegValue>
 80198d8:	4603      	mov	r3, r0
 80198da:	461a      	mov	r2, r3
 80198dc:	4b9b      	ldr	r3, [pc, #620]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80198e2:	4b9a      	ldr	r3, [pc, #616]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198e4:	2200      	movs	r2, #0
 80198e6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80198e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80198ea:	00db      	lsls	r3, r3, #3
 80198ec:	b29a      	uxth	r2, r3
 80198ee:	4b97      	ldr	r3, [pc, #604]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198f0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80198f2:	4b96      	ldr	r3, [pc, #600]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198f4:	2200      	movs	r2, #0
 80198f6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80198f8:	4b94      	ldr	r3, [pc, #592]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 80198fa:	2210      	movs	r2, #16
 80198fc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80198fe:	4b93      	ldr	r3, [pc, #588]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019900:	2200      	movs	r2, #0
 8019902:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8019904:	4b91      	ldr	r3, [pc, #580]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019906:	2200      	movs	r2, #0
 8019908:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801990a:	4b91      	ldr	r3, [pc, #580]	; (8019b50 <RadioSetRxConfig+0x300>)
 801990c:	781a      	ldrb	r2, [r3, #0]
 801990e:	4b8f      	ldr	r3, [pc, #572]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019910:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019912:	4b8e      	ldr	r3, [pc, #568]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019914:	2201      	movs	r2, #1
 8019916:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8019918:	4b8c      	ldr	r3, [pc, #560]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 801991a:	2200      	movs	r2, #0
 801991c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801991e:	2005      	movs	r0, #5
 8019920:	f7ff fec2 	bl	80196a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019924:	488b      	ldr	r0, [pc, #556]	; (8019b54 <RadioSetRxConfig+0x304>)
 8019926:	f002 fb1f 	bl	801bf68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801992a:	488b      	ldr	r0, [pc, #556]	; (8019b58 <RadioSetRxConfig+0x308>)
 801992c:	f002 fbee 	bl	801c10c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019930:	4a8a      	ldr	r2, [pc, #552]	; (8019b5c <RadioSetRxConfig+0x30c>)
 8019932:	f107 031c 	add.w	r3, r7, #28
 8019936:	e892 0003 	ldmia.w	r2, {r0, r1}
 801993a:	e883 0003 	stmia.w	r3, {r0, r1}
 801993e:	f107 031c 	add.w	r3, r7, #28
 8019942:	4618      	mov	r0, r3
 8019944:	f001 feab 	bl	801b69e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019948:	f240 10ff 	movw	r0, #511	; 0x1ff
 801994c:	f001 fef6 	bl	801b73c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8019950:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019954:	f000 fe25 	bl	801a5a2 <RadioRead>
 8019958:	4603      	mov	r3, r0
 801995a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801995e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019962:	f023 0310 	bic.w	r3, r3, #16
 8019966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801996a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801996e:	4619      	mov	r1, r3
 8019970:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019974:	f000 fe03 	bl	801a57e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019978:	2104      	movs	r1, #4
 801997a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801997e:	f000 fdfe 	bl	801a57e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8019982:	f640 009b 	movw	r0, #2203	; 0x89b
 8019986:	f000 fe0c 	bl	801a5a2 <RadioRead>
 801998a:	4603      	mov	r3, r0
 801998c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8019990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019994:	f023 031c 	bic.w	r3, r3, #28
 8019998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801999c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199a0:	f043 0308 	orr.w	r3, r3, #8
 80199a4:	b2db      	uxtb	r3, r3
 80199a6:	4619      	mov	r1, r3
 80199a8:	f640 009b 	movw	r0, #2203	; 0x89b
 80199ac:	f000 fde7 	bl	801a57e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80199b0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80199b4:	f000 fdf5 	bl	801a5a2 <RadioRead>
 80199b8:	4603      	mov	r3, r0
 80199ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80199be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199c2:	f023 0318 	bic.w	r3, r3, #24
 80199c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80199ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199ce:	f043 0318 	orr.w	r3, r3, #24
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	4619      	mov	r1, r3
 80199d6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80199da:	f000 fdd0 	bl	801a57e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80199de:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80199e2:	f000 fdde 	bl	801a5a2 <RadioRead>
 80199e6:	4603      	mov	r3, r0
 80199e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80199ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80199f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80199f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199fc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8019a00:	b2db      	uxtb	r3, r3
 8019a02:	4619      	mov	r1, r3
 8019a04:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8019a08:	f000 fdb9 	bl	801a57e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019a0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019a0e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019a12:	fb02 f303 	mul.w	r3, r2, r3
 8019a16:	461a      	mov	r2, r3
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a1e:	4a4b      	ldr	r2, [pc, #300]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a20:	6093      	str	r3, [r2, #8]
            break;
 8019a22:	e115      	b.n	8019c50 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019a24:	2000      	movs	r0, #0
 8019a26:	f002 f801 	bl	801ba2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019a2a:	4b48      	ldr	r3, [pc, #288]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019a32:	4a46      	ldr	r2, [pc, #280]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019a38:	4b44      	ldr	r3, [pc, #272]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a3a:	220b      	movs	r2, #11
 8019a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019a40:	68b8      	ldr	r0, [r7, #8]
 8019a42:	f002 fec5 	bl	801c7d0 <SUBGRF_GetFskBandwidthRegValue>
 8019a46:	4603      	mov	r3, r0
 8019a48:	461a      	mov	r2, r3
 8019a4a:	4b40      	ldr	r3, [pc, #256]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019a50:	4b3e      	ldr	r3, [pc, #248]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a52:	2200      	movs	r2, #0
 8019a54:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019a56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019a58:	00db      	lsls	r3, r3, #3
 8019a5a:	b29a      	uxth	r2, r3
 8019a5c:	4b3b      	ldr	r3, [pc, #236]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a5e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019a60:	4b3a      	ldr	r3, [pc, #232]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a62:	2204      	movs	r2, #4
 8019a64:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019a66:	4b39      	ldr	r3, [pc, #228]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a68:	2218      	movs	r2, #24
 8019a6a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019a6c:	4b37      	ldr	r3, [pc, #220]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a6e:	2200      	movs	r2, #0
 8019a70:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019a72:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019a76:	f083 0301 	eor.w	r3, r3, #1
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	461a      	mov	r2, r3
 8019a7e:	4b33      	ldr	r3, [pc, #204]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a80:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8019a82:	4b33      	ldr	r3, [pc, #204]	; (8019b50 <RadioSetRxConfig+0x300>)
 8019a84:	781a      	ldrb	r2, [r3, #0]
 8019a86:	4b31      	ldr	r3, [pc, #196]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a88:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019a8a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d003      	beq.n	8019a9a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019a92:	4b2e      	ldr	r3, [pc, #184]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a94:	22f2      	movs	r2, #242	; 0xf2
 8019a96:	75da      	strb	r2, [r3, #23]
 8019a98:	e002      	b.n	8019aa0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019a9a:	4b2c      	ldr	r3, [pc, #176]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019a9c:	2201      	movs	r2, #1
 8019a9e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019aa0:	4b2a      	ldr	r3, [pc, #168]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019aa2:	2201      	movs	r2, #1
 8019aa4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019aa6:	f000 fc68 	bl	801a37a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019aaa:	2000      	movs	r0, #0
 8019aac:	f7ff fdfc 	bl	80196a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019ab0:	4828      	ldr	r0, [pc, #160]	; (8019b54 <RadioSetRxConfig+0x304>)
 8019ab2:	f002 fa59 	bl	801bf68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019ab6:	4828      	ldr	r0, [pc, #160]	; (8019b58 <RadioSetRxConfig+0x308>)
 8019ab8:	f002 fb28 	bl	801c10c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019abc:	4a28      	ldr	r2, [pc, #160]	; (8019b60 <RadioSetRxConfig+0x310>)
 8019abe:	f107 0314 	add.w	r3, r7, #20
 8019ac2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019ac6:	e883 0003 	stmia.w	r3, {r0, r1}
 8019aca:	f107 0314 	add.w	r3, r7, #20
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f001 fde5 	bl	801b69e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019ad4:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019ad8:	f001 fe30 	bl	801b73c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019adc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019ade:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019ae2:	fb02 f303 	mul.w	r3, r2, r3
 8019ae6:	461a      	mov	r2, r3
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8019aee:	4a17      	ldr	r2, [pc, #92]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019af0:	6093      	str	r3, [r2, #8]
            break;
 8019af2:	e0ad      	b.n	8019c50 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8019af4:	2000      	movs	r0, #0
 8019af6:	f001 ff99 	bl	801ba2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019afa:	4b14      	ldr	r3, [pc, #80]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019afc:	2201      	movs	r2, #1
 8019afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	b2da      	uxtb	r2, r3
 8019b06:	4b11      	ldr	r3, [pc, #68]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8019b0c:	4a15      	ldr	r2, [pc, #84]	; (8019b64 <RadioSetRxConfig+0x314>)
 8019b0e:	68bb      	ldr	r3, [r7, #8]
 8019b10:	4413      	add	r3, r2
 8019b12:	781a      	ldrb	r2, [r3, #0]
 8019b14:	4b0d      	ldr	r3, [pc, #52]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8019b1a:	4a0c      	ldr	r2, [pc, #48]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019b1c:	7bbb      	ldrb	r3, [r7, #14]
 8019b1e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019b22:	68bb      	ldr	r3, [r7, #8]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d105      	bne.n	8019b34 <RadioSetRxConfig+0x2e4>
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	2b0b      	cmp	r3, #11
 8019b2c:	d008      	beq.n	8019b40 <RadioSetRxConfig+0x2f0>
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	2b0c      	cmp	r3, #12
 8019b32:	d005      	beq.n	8019b40 <RadioSetRxConfig+0x2f0>
 8019b34:	68bb      	ldr	r3, [r7, #8]
 8019b36:	2b01      	cmp	r3, #1
 8019b38:	d116      	bne.n	8019b68 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	2b0c      	cmp	r3, #12
 8019b3e:	d113      	bne.n	8019b68 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019b40:	4b02      	ldr	r3, [pc, #8]	; (8019b4c <RadioSetRxConfig+0x2fc>)
 8019b42:	2201      	movs	r2, #1
 8019b44:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019b48:	e012      	b.n	8019b70 <RadioSetRxConfig+0x320>
 8019b4a:	bf00      	nop
 8019b4c:	20001b74 	.word	0x20001b74
 8019b50:	20000134 	.word	0x20000134
 8019b54:	20001bac 	.word	0x20001bac
 8019b58:	20001b82 	.word	0x20001b82
 8019b5c:	0801e82c 	.word	0x0801e82c
 8019b60:	0801e834 	.word	0x0801e834
 8019b64:	0801eed0 	.word	0x0801eed0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019b68:	4b3b      	ldr	r3, [pc, #236]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019b6a:	2200      	movs	r2, #0
 8019b6c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019b70:	4b39      	ldr	r3, [pc, #228]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019b72:	2201      	movs	r2, #1
 8019b74:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019b76:	4b38      	ldr	r3, [pc, #224]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019b78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019b7c:	2b05      	cmp	r3, #5
 8019b7e:	d004      	beq.n	8019b8a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019b80:	4b35      	ldr	r3, [pc, #212]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019b82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019b86:	2b06      	cmp	r3, #6
 8019b88:	d10a      	bne.n	8019ba0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8019b8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019b8c:	2b0b      	cmp	r3, #11
 8019b8e:	d803      	bhi.n	8019b98 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019b90:	4b31      	ldr	r3, [pc, #196]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019b92:	220c      	movs	r2, #12
 8019b94:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019b96:	e006      	b.n	8019ba6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019b98:	4a2f      	ldr	r2, [pc, #188]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019b9a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019b9c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019b9e:	e002      	b.n	8019ba6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019ba0:	4a2d      	ldr	r2, [pc, #180]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019ba2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019ba4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019ba6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019baa:	4b2b      	ldr	r3, [pc, #172]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019bac:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019bae:	4b2b      	ldr	r3, [pc, #172]	; (8019c5c <RadioSetRxConfig+0x40c>)
 8019bb0:	781a      	ldrb	r2, [r3, #0]
 8019bb2:	4b29      	ldr	r3, [pc, #164]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019bb4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019bb6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019bba:	4b27      	ldr	r3, [pc, #156]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019bbc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019bc0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019bc4:	4b24      	ldr	r3, [pc, #144]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019bca:	f000 fbd6 	bl	801a37a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019bce:	2001      	movs	r0, #1
 8019bd0:	f7ff fd6a 	bl	80196a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019bd4:	4822      	ldr	r0, [pc, #136]	; (8019c60 <RadioSetRxConfig+0x410>)
 8019bd6:	f002 f9c7 	bl	801bf68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019bda:	4822      	ldr	r0, [pc, #136]	; (8019c64 <RadioSetRxConfig+0x414>)
 8019bdc:	f002 fa96 	bl	801c10c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019be0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019be2:	b2db      	uxtb	r3, r3
 8019be4:	4618      	mov	r0, r3
 8019be6:	f001 ff30 	bl	801ba4a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8019bea:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019bee:	f002 fbe9 	bl	801c3c4 <SUBGRF_ReadRegister>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	f003 0301 	and.w	r3, r3, #1
 8019bf8:	b2db      	uxtb	r3, r3
 8019bfa:	4619      	mov	r1, r3
 8019bfc:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8019c00:	f002 fbcc 	bl	801c39c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019c04:	4b14      	ldr	r3, [pc, #80]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019c0a:	2b01      	cmp	r3, #1
 8019c0c:	d10d      	bne.n	8019c2a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019c0e:	f240 7036 	movw	r0, #1846	; 0x736
 8019c12:	f002 fbd7 	bl	801c3c4 <SUBGRF_ReadRegister>
 8019c16:	4603      	mov	r3, r0
 8019c18:	f023 0304 	bic.w	r3, r3, #4
 8019c1c:	b2db      	uxtb	r3, r3
 8019c1e:	4619      	mov	r1, r3
 8019c20:	f240 7036 	movw	r0, #1846	; 0x736
 8019c24:	f002 fbba 	bl	801c39c <SUBGRF_WriteRegister>
 8019c28:	e00c      	b.n	8019c44 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019c2a:	f240 7036 	movw	r0, #1846	; 0x736
 8019c2e:	f002 fbc9 	bl	801c3c4 <SUBGRF_ReadRegister>
 8019c32:	4603      	mov	r3, r0
 8019c34:	f043 0304 	orr.w	r3, r3, #4
 8019c38:	b2db      	uxtb	r3, r3
 8019c3a:	4619      	mov	r1, r3
 8019c3c:	f240 7036 	movw	r0, #1846	; 0x736
 8019c40:	f002 fbac 	bl	801c39c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8019c44:	4b04      	ldr	r3, [pc, #16]	; (8019c58 <RadioSetRxConfig+0x408>)
 8019c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019c4a:	609a      	str	r2, [r3, #8]
            break;
 8019c4c:	e000      	b.n	8019c50 <RadioSetRxConfig+0x400>
            break;
 8019c4e:	bf00      	nop
    }
}
 8019c50:	bf00      	nop
 8019c52:	3728      	adds	r7, #40	; 0x28
 8019c54:	46bd      	mov	sp, r7
 8019c56:	bd80      	pop	{r7, pc}
 8019c58:	20001b74 	.word	0x20001b74
 8019c5c:	20000134 	.word	0x20000134
 8019c60:	20001bac 	.word	0x20001bac
 8019c64:	20001b82 	.word	0x20001b82

08019c68 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b086      	sub	sp, #24
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	60ba      	str	r2, [r7, #8]
 8019c70:	607b      	str	r3, [r7, #4]
 8019c72:	4603      	mov	r3, r0
 8019c74:	73fb      	strb	r3, [r7, #15]
 8019c76:	460b      	mov	r3, r1
 8019c78:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8019c7a:	f002 fe76 	bl	801c96a <RFW_DeInit>
    switch( modem )
 8019c7e:	7bfb      	ldrb	r3, [r7, #15]
 8019c80:	2b04      	cmp	r3, #4
 8019c82:	f000 80c7 	beq.w	8019e14 <RadioSetTxConfig+0x1ac>
 8019c86:	2b04      	cmp	r3, #4
 8019c88:	f300 80d6 	bgt.w	8019e38 <RadioSetTxConfig+0x1d0>
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d002      	beq.n	8019c96 <RadioSetTxConfig+0x2e>
 8019c90:	2b01      	cmp	r3, #1
 8019c92:	d059      	beq.n	8019d48 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019c94:	e0d0      	b.n	8019e38 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019c96:	4b77      	ldr	r3, [pc, #476]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019c98:	2200      	movs	r2, #0
 8019c9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019c9e:	4a75      	ldr	r2, [pc, #468]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019ca0:	6a3b      	ldr	r3, [r7, #32]
 8019ca2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019ca4:	4b73      	ldr	r3, [pc, #460]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019ca6:	220b      	movs	r2, #11
 8019ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019cac:	6878      	ldr	r0, [r7, #4]
 8019cae:	f002 fd8f 	bl	801c7d0 <SUBGRF_GetFskBandwidthRegValue>
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	461a      	mov	r2, r3
 8019cb6:	4b6f      	ldr	r3, [pc, #444]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8019cbc:	4a6d      	ldr	r2, [pc, #436]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019cbe:	68bb      	ldr	r3, [r7, #8]
 8019cc0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019cc2:	4b6c      	ldr	r3, [pc, #432]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019cc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019cca:	00db      	lsls	r3, r3, #3
 8019ccc:	b29a      	uxth	r2, r3
 8019cce:	4b69      	ldr	r3, [pc, #420]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019cd0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019cd2:	4b68      	ldr	r3, [pc, #416]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019cd4:	2204      	movs	r2, #4
 8019cd6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8019cd8:	4b66      	ldr	r3, [pc, #408]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019cda:	2218      	movs	r2, #24
 8019cdc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019cde:	4b65      	ldr	r3, [pc, #404]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019ce4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019ce8:	f083 0301 	eor.w	r3, r3, #1
 8019cec:	b2db      	uxtb	r3, r3
 8019cee:	461a      	mov	r2, r3
 8019cf0:	4b60      	ldr	r3, [pc, #384]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019cf2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019cf4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d003      	beq.n	8019d04 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8019cfc:	4b5d      	ldr	r3, [pc, #372]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019cfe:	22f2      	movs	r2, #242	; 0xf2
 8019d00:	75da      	strb	r2, [r3, #23]
 8019d02:	e002      	b.n	8019d0a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019d04:	4b5b      	ldr	r3, [pc, #364]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019d06:	2201      	movs	r2, #1
 8019d08:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8019d0a:	4b5a      	ldr	r3, [pc, #360]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019d0c:	2201      	movs	r2, #1
 8019d0e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019d10:	f000 fb33 	bl	801a37a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8019d14:	2000      	movs	r0, #0
 8019d16:	f7ff fcc7 	bl	80196a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019d1a:	4857      	ldr	r0, [pc, #348]	; (8019e78 <RadioSetTxConfig+0x210>)
 8019d1c:	f002 f924 	bl	801bf68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019d20:	4856      	ldr	r0, [pc, #344]	; (8019e7c <RadioSetTxConfig+0x214>)
 8019d22:	f002 f9f3 	bl	801c10c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019d26:	4a56      	ldr	r2, [pc, #344]	; (8019e80 <RadioSetTxConfig+0x218>)
 8019d28:	f107 0310 	add.w	r3, r7, #16
 8019d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d30:	e883 0003 	stmia.w	r3, {r0, r1}
 8019d34:	f107 0310 	add.w	r3, r7, #16
 8019d38:	4618      	mov	r0, r3
 8019d3a:	f001 fcb0 	bl	801b69e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019d3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019d42:	f001 fcfb 	bl	801b73c <SUBGRF_SetWhiteningSeed>
            break;
 8019d46:	e078      	b.n	8019e3a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019d48:	4b4a      	ldr	r3, [pc, #296]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019d4a:	2201      	movs	r2, #1
 8019d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8019d50:	6a3b      	ldr	r3, [r7, #32]
 8019d52:	b2da      	uxtb	r2, r3
 8019d54:	4b47      	ldr	r3, [pc, #284]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8019d5a:	4a4a      	ldr	r2, [pc, #296]	; (8019e84 <RadioSetTxConfig+0x21c>)
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	4413      	add	r3, r2
 8019d60:	781a      	ldrb	r2, [r3, #0]
 8019d62:	4b44      	ldr	r3, [pc, #272]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8019d68:	4a42      	ldr	r2, [pc, #264]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019d6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019d6e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d105      	bne.n	8019d84 <RadioSetTxConfig+0x11c>
 8019d78:	6a3b      	ldr	r3, [r7, #32]
 8019d7a:	2b0b      	cmp	r3, #11
 8019d7c:	d008      	beq.n	8019d90 <RadioSetTxConfig+0x128>
 8019d7e:	6a3b      	ldr	r3, [r7, #32]
 8019d80:	2b0c      	cmp	r3, #12
 8019d82:	d005      	beq.n	8019d90 <RadioSetTxConfig+0x128>
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	2b01      	cmp	r3, #1
 8019d88:	d107      	bne.n	8019d9a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019d8a:	6a3b      	ldr	r3, [r7, #32]
 8019d8c:	2b0c      	cmp	r3, #12
 8019d8e:	d104      	bne.n	8019d9a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019d90:	4b38      	ldr	r3, [pc, #224]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019d92:	2201      	movs	r2, #1
 8019d94:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019d98:	e003      	b.n	8019da2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019d9a:	4b36      	ldr	r3, [pc, #216]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019d9c:	2200      	movs	r2, #0
 8019d9e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019da2:	4b34      	ldr	r3, [pc, #208]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019da4:	2201      	movs	r2, #1
 8019da6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019da8:	4b32      	ldr	r3, [pc, #200]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019dae:	2b05      	cmp	r3, #5
 8019db0:	d004      	beq.n	8019dbc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019db2:	4b30      	ldr	r3, [pc, #192]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019db4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019db8:	2b06      	cmp	r3, #6
 8019dba:	d10a      	bne.n	8019dd2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8019dbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019dbe:	2b0b      	cmp	r3, #11
 8019dc0:	d803      	bhi.n	8019dca <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019dc2:	4b2c      	ldr	r3, [pc, #176]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019dc4:	220c      	movs	r2, #12
 8019dc6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019dc8:	e006      	b.n	8019dd8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019dca:	4a2a      	ldr	r2, [pc, #168]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019dcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019dce:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019dd0:	e002      	b.n	8019dd8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019dd2:	4a28      	ldr	r2, [pc, #160]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019dd4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019dd6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019dd8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019ddc:	4b25      	ldr	r3, [pc, #148]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019dde:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019de0:	4b29      	ldr	r3, [pc, #164]	; (8019e88 <RadioSetTxConfig+0x220>)
 8019de2:	781a      	ldrb	r2, [r3, #0]
 8019de4:	4b23      	ldr	r3, [pc, #140]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019de6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019de8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019dec:	4b21      	ldr	r3, [pc, #132]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019dee:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019df2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019df6:	4b1f      	ldr	r3, [pc, #124]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019df8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019dfc:	f000 fabd 	bl	801a37a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8019e00:	2001      	movs	r0, #1
 8019e02:	f7ff fc51 	bl	80196a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e06:	481c      	ldr	r0, [pc, #112]	; (8019e78 <RadioSetTxConfig+0x210>)
 8019e08:	f002 f8ae 	bl	801bf68 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019e0c:	481b      	ldr	r0, [pc, #108]	; (8019e7c <RadioSetTxConfig+0x214>)
 8019e0e:	f002 f97d 	bl	801c10c <SUBGRF_SetPacketParams>
            break;
 8019e12:	e012      	b.n	8019e3a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8019e14:	2004      	movs	r0, #4
 8019e16:	f7ff fc47 	bl	80196a8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019e1a:	4b16      	ldr	r3, [pc, #88]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019e1c:	2202      	movs	r2, #2
 8019e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8019e22:	4a14      	ldr	r2, [pc, #80]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019e24:	6a3b      	ldr	r3, [r7, #32]
 8019e26:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019e28:	4b12      	ldr	r3, [pc, #72]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019e2a:	2216      	movs	r2, #22
 8019e2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019e30:	4811      	ldr	r0, [pc, #68]	; (8019e78 <RadioSetTxConfig+0x210>)
 8019e32:	f002 f899 	bl	801bf68 <SUBGRF_SetModulationParams>
            break;
 8019e36:	e000      	b.n	8019e3a <RadioSetTxConfig+0x1d2>
            break;
 8019e38:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019e3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f002 fbc8 	bl	801c5d4 <SUBGRF_SetRfTxPower>
 8019e44:	4603      	mov	r3, r0
 8019e46:	461a      	mov	r2, r3
 8019e48:	4b0a      	ldr	r3, [pc, #40]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019e4a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8019e4e:	210e      	movs	r1, #14
 8019e50:	f640 101f 	movw	r0, #2335	; 0x91f
 8019e54:	f002 faa2 	bl	801c39c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019e58:	4b06      	ldr	r3, [pc, #24]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019e5a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019e5e:	4618      	mov	r0, r3
 8019e60:	f002 fd97 	bl	801c992 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019e64:	4a03      	ldr	r2, [pc, #12]	; (8019e74 <RadioSetTxConfig+0x20c>)
 8019e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e68:	6053      	str	r3, [r2, #4]
}
 8019e6a:	bf00      	nop
 8019e6c:	3718      	adds	r7, #24
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd80      	pop	{r7, pc}
 8019e72:	bf00      	nop
 8019e74:	20001b74 	.word	0x20001b74
 8019e78:	20001bac 	.word	0x20001bac
 8019e7c:	20001b82 	.word	0x20001b82
 8019e80:	0801e834 	.word	0x0801e834
 8019e84:	0801eed0 	.word	0x0801eed0
 8019e88:	20000134 	.word	0x20000134

08019e8c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019e8c:	b480      	push	{r7}
 8019e8e:	b083      	sub	sp, #12
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
    return true;
 8019e94:	2301      	movs	r3, #1
}
 8019e96:	4618      	mov	r0, r3
 8019e98:	370c      	adds	r7, #12
 8019e9a:	46bd      	mov	sp, r7
 8019e9c:	bc80      	pop	{r7}
 8019e9e:	4770      	bx	lr

08019ea0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019ea0:	b480      	push	{r7}
 8019ea2:	b085      	sub	sp, #20
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	4603      	mov	r3, r0
 8019ea8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019eaa:	2300      	movs	r3, #0
 8019eac:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8019eae:	79fb      	ldrb	r3, [r7, #7]
 8019eb0:	2b0a      	cmp	r3, #10
 8019eb2:	d83e      	bhi.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
 8019eb4:	a201      	add	r2, pc, #4	; (adr r2, 8019ebc <RadioGetLoRaBandwidthInHz+0x1c>)
 8019eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019eba:	bf00      	nop
 8019ebc:	08019ee9 	.word	0x08019ee9
 8019ec0:	08019ef9 	.word	0x08019ef9
 8019ec4:	08019f09 	.word	0x08019f09
 8019ec8:	08019f19 	.word	0x08019f19
 8019ecc:	08019f21 	.word	0x08019f21
 8019ed0:	08019f27 	.word	0x08019f27
 8019ed4:	08019f2d 	.word	0x08019f2d
 8019ed8:	08019f33 	.word	0x08019f33
 8019edc:	08019ef1 	.word	0x08019ef1
 8019ee0:	08019f01 	.word	0x08019f01
 8019ee4:	08019f11 	.word	0x08019f11
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019ee8:	f641 6384 	movw	r3, #7812	; 0x1e84
 8019eec:	60fb      	str	r3, [r7, #12]
        break;
 8019eee:	e020      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019ef0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8019ef4:	60fb      	str	r3, [r7, #12]
        break;
 8019ef6:	e01c      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019ef8:	f643 5309 	movw	r3, #15625	; 0x3d09
 8019efc:	60fb      	str	r3, [r7, #12]
        break;
 8019efe:	e018      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019f00:	f245 1361 	movw	r3, #20833	; 0x5161
 8019f04:	60fb      	str	r3, [r7, #12]
        break;
 8019f06:	e014      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8019f08:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019f0c:	60fb      	str	r3, [r7, #12]
        break;
 8019f0e:	e010      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8019f10:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8019f14:	60fb      	str	r3, [r7, #12]
        break;
 8019f16:	e00c      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8019f18:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019f1c:	60fb      	str	r3, [r7, #12]
        break;
 8019f1e:	e008      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8019f20:	4b07      	ldr	r3, [pc, #28]	; (8019f40 <RadioGetLoRaBandwidthInHz+0xa0>)
 8019f22:	60fb      	str	r3, [r7, #12]
        break;
 8019f24:	e005      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8019f26:	4b07      	ldr	r3, [pc, #28]	; (8019f44 <RadioGetLoRaBandwidthInHz+0xa4>)
 8019f28:	60fb      	str	r3, [r7, #12]
        break;
 8019f2a:	e002      	b.n	8019f32 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8019f2c:	4b06      	ldr	r3, [pc, #24]	; (8019f48 <RadioGetLoRaBandwidthInHz+0xa8>)
 8019f2e:	60fb      	str	r3, [r7, #12]
        break;
 8019f30:	bf00      	nop
    }

    return bandwidthInHz;
 8019f32:	68fb      	ldr	r3, [r7, #12]
}
 8019f34:	4618      	mov	r0, r3
 8019f36:	3714      	adds	r7, #20
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	bc80      	pop	{r7}
 8019f3c:	4770      	bx	lr
 8019f3e:	bf00      	nop
 8019f40:	0001e848 	.word	0x0001e848
 8019f44:	0003d090 	.word	0x0003d090
 8019f48:	0007a120 	.word	0x0007a120

08019f4c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019f4c:	b480      	push	{r7}
 8019f4e:	b083      	sub	sp, #12
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	6078      	str	r0, [r7, #4]
 8019f54:	4608      	mov	r0, r1
 8019f56:	4611      	mov	r1, r2
 8019f58:	461a      	mov	r2, r3
 8019f5a:	4603      	mov	r3, r0
 8019f5c:	70fb      	strb	r3, [r7, #3]
 8019f5e:	460b      	mov	r3, r1
 8019f60:	803b      	strh	r3, [r7, #0]
 8019f62:	4613      	mov	r3, r2
 8019f64:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8019f66:	883b      	ldrh	r3, [r7, #0]
 8019f68:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019f6a:	78ba      	ldrb	r2, [r7, #2]
 8019f6c:	f082 0201 	eor.w	r2, r2, #1
 8019f70:	b2d2      	uxtb	r2, r2
 8019f72:	2a00      	cmp	r2, #0
 8019f74:	d001      	beq.n	8019f7a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8019f76:	2208      	movs	r2, #8
 8019f78:	e000      	b.n	8019f7c <RadioGetGfskTimeOnAirNumerator+0x30>
 8019f7a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019f7c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019f7e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8019f82:	7c3b      	ldrb	r3, [r7, #16]
 8019f84:	7d39      	ldrb	r1, [r7, #20]
 8019f86:	2900      	cmp	r1, #0
 8019f88:	d001      	beq.n	8019f8e <RadioGetGfskTimeOnAirNumerator+0x42>
 8019f8a:	2102      	movs	r1, #2
 8019f8c:	e000      	b.n	8019f90 <RadioGetGfskTimeOnAirNumerator+0x44>
 8019f8e:	2100      	movs	r1, #0
 8019f90:	440b      	add	r3, r1
 8019f92:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019f94:	4413      	add	r3, r2
}
 8019f96:	4618      	mov	r0, r3
 8019f98:	370c      	adds	r7, #12
 8019f9a:	46bd      	mov	sp, r7
 8019f9c:	bc80      	pop	{r7}
 8019f9e:	4770      	bx	lr

08019fa0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019fa0:	b480      	push	{r7}
 8019fa2:	b08b      	sub	sp, #44	; 0x2c
 8019fa4:	af00      	add	r7, sp, #0
 8019fa6:	60f8      	str	r0, [r7, #12]
 8019fa8:	60b9      	str	r1, [r7, #8]
 8019faa:	4611      	mov	r1, r2
 8019fac:	461a      	mov	r2, r3
 8019fae:	460b      	mov	r3, r1
 8019fb0:	71fb      	strb	r3, [r7, #7]
 8019fb2:	4613      	mov	r3, r2
 8019fb4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8019fb6:	79fb      	ldrb	r3, [r7, #7]
 8019fb8:	3304      	adds	r3, #4
 8019fba:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8019fc2:	68bb      	ldr	r3, [r7, #8]
 8019fc4:	2b05      	cmp	r3, #5
 8019fc6:	d002      	beq.n	8019fce <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019fc8:	68bb      	ldr	r3, [r7, #8]
 8019fca:	2b06      	cmp	r3, #6
 8019fcc:	d104      	bne.n	8019fd8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019fce:	88bb      	ldrh	r3, [r7, #4]
 8019fd0:	2b0b      	cmp	r3, #11
 8019fd2:	d801      	bhi.n	8019fd8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8019fd4:	230c      	movs	r3, #12
 8019fd6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d105      	bne.n	8019fea <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019fde:	68bb      	ldr	r3, [r7, #8]
 8019fe0:	2b0b      	cmp	r3, #11
 8019fe2:	d008      	beq.n	8019ff6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019fe4:	68bb      	ldr	r3, [r7, #8]
 8019fe6:	2b0c      	cmp	r3, #12
 8019fe8:	d005      	beq.n	8019ff6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	2b01      	cmp	r3, #1
 8019fee:	d105      	bne.n	8019ffc <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019ff0:	68bb      	ldr	r3, [r7, #8]
 8019ff2:	2b0c      	cmp	r3, #12
 8019ff4:	d102      	bne.n	8019ffc <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019ffc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a000:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a002:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a006:	2a00      	cmp	r2, #0
 801a008:	d001      	beq.n	801a00e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a00a:	2210      	movs	r2, #16
 801a00c:	e000      	b.n	801a010 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a00e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a010:	4413      	add	r3, r2
 801a012:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a018:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a01a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a01e:	2a00      	cmp	r2, #0
 801a020:	d001      	beq.n	801a026 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a022:	2200      	movs	r2, #0
 801a024:	e000      	b.n	801a028 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a026:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a028:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a02a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a02c:	68bb      	ldr	r3, [r7, #8]
 801a02e:	2b06      	cmp	r3, #6
 801a030:	d803      	bhi.n	801a03a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a032:	68bb      	ldr	r3, [r7, #8]
 801a034:	009b      	lsls	r3, r3, #2
 801a036:	623b      	str	r3, [r7, #32]
 801a038:	e00e      	b.n	801a058 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a03a:	69fb      	ldr	r3, [r7, #28]
 801a03c:	3308      	adds	r3, #8
 801a03e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a044:	2b00      	cmp	r3, #0
 801a046:	d004      	beq.n	801a052 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a048:	68bb      	ldr	r3, [r7, #8]
 801a04a:	3b02      	subs	r3, #2
 801a04c:	009b      	lsls	r3, r3, #2
 801a04e:	623b      	str	r3, [r7, #32]
 801a050:	e002      	b.n	801a058 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	009b      	lsls	r3, r3, #2
 801a056:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a058:	69fb      	ldr	r3, [r7, #28]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	da01      	bge.n	801a062 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a05e:	2300      	movs	r3, #0
 801a060:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a062:	69fa      	ldr	r2, [r7, #28]
 801a064:	6a3b      	ldr	r3, [r7, #32]
 801a066:	4413      	add	r3, r2
 801a068:	1e5a      	subs	r2, r3, #1
 801a06a:	6a3b      	ldr	r3, [r7, #32]
 801a06c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a070:	697a      	ldr	r2, [r7, #20]
 801a072:	fb03 f202 	mul.w	r2, r3, r2
 801a076:	88bb      	ldrh	r3, [r7, #4]
 801a078:	4413      	add	r3, r2
    int32_t intermediate =
 801a07a:	330c      	adds	r3, #12
 801a07c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a07e:	68bb      	ldr	r3, [r7, #8]
 801a080:	2b06      	cmp	r3, #6
 801a082:	d802      	bhi.n	801a08a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a084:	69bb      	ldr	r3, [r7, #24]
 801a086:	3302      	adds	r3, #2
 801a088:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a08a:	69bb      	ldr	r3, [r7, #24]
 801a08c:	009b      	lsls	r3, r3, #2
 801a08e:	1c5a      	adds	r2, r3, #1
 801a090:	68bb      	ldr	r3, [r7, #8]
 801a092:	3b02      	subs	r3, #2
 801a094:	fa02 f303 	lsl.w	r3, r2, r3
}
 801a098:	4618      	mov	r0, r3
 801a09a:	372c      	adds	r7, #44	; 0x2c
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bc80      	pop	{r7}
 801a0a0:	4770      	bx	lr
	...

0801a0a4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b08a      	sub	sp, #40	; 0x28
 801a0a8:	af04      	add	r7, sp, #16
 801a0aa:	60b9      	str	r1, [r7, #8]
 801a0ac:	607a      	str	r2, [r7, #4]
 801a0ae:	461a      	mov	r2, r3
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	73fb      	strb	r3, [r7, #15]
 801a0b4:	4613      	mov	r3, r2
 801a0b6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801a0bc:	2301      	movs	r3, #1
 801a0be:	613b      	str	r3, [r7, #16]

    switch( modem )
 801a0c0:	7bfb      	ldrb	r3, [r7, #15]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d002      	beq.n	801a0cc <RadioTimeOnAir+0x28>
 801a0c6:	2b01      	cmp	r3, #1
 801a0c8:	d017      	beq.n	801a0fa <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801a0ca:	e035      	b.n	801a138 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801a0cc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801a0d0:	8c3a      	ldrh	r2, [r7, #32]
 801a0d2:	7bb9      	ldrb	r1, [r7, #14]
 801a0d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a0d8:	9301      	str	r3, [sp, #4]
 801a0da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a0de:	9300      	str	r3, [sp, #0]
 801a0e0:	4603      	mov	r3, r0
 801a0e2:	6878      	ldr	r0, [r7, #4]
 801a0e4:	f7ff ff32 	bl	8019f4c <RadioGetGfskTimeOnAirNumerator>
 801a0e8:	4603      	mov	r3, r0
 801a0ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a0ee:	fb02 f303 	mul.w	r3, r2, r3
 801a0f2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	613b      	str	r3, [r7, #16]
        break;
 801a0f8:	e01e      	b.n	801a138 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801a0fa:	8c39      	ldrh	r1, [r7, #32]
 801a0fc:	7bba      	ldrb	r2, [r7, #14]
 801a0fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a102:	9302      	str	r3, [sp, #8]
 801a104:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a108:	9301      	str	r3, [sp, #4]
 801a10a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a10e:	9300      	str	r3, [sp, #0]
 801a110:	460b      	mov	r3, r1
 801a112:	6879      	ldr	r1, [r7, #4]
 801a114:	68b8      	ldr	r0, [r7, #8]
 801a116:	f7ff ff43 	bl	8019fa0 <RadioGetLoRaTimeOnAirNumerator>
 801a11a:	4603      	mov	r3, r0
 801a11c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a120:	fb02 f303 	mul.w	r3, r2, r3
 801a124:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801a126:	4a0a      	ldr	r2, [pc, #40]	; (801a150 <RadioTimeOnAir+0xac>)
 801a128:	68bb      	ldr	r3, [r7, #8]
 801a12a:	4413      	add	r3, r2
 801a12c:	781b      	ldrb	r3, [r3, #0]
 801a12e:	4618      	mov	r0, r3
 801a130:	f7ff feb6 	bl	8019ea0 <RadioGetLoRaBandwidthInHz>
 801a134:	6138      	str	r0, [r7, #16]
        break;
 801a136:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801a138:	697a      	ldr	r2, [r7, #20]
 801a13a:	693b      	ldr	r3, [r7, #16]
 801a13c:	4413      	add	r3, r2
 801a13e:	1e5a      	subs	r2, r3, #1
 801a140:	693b      	ldr	r3, [r7, #16]
 801a142:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801a146:	4618      	mov	r0, r3
 801a148:	3718      	adds	r7, #24
 801a14a:	46bd      	mov	sp, r7
 801a14c:	bd80      	pop	{r7, pc}
 801a14e:	bf00      	nop
 801a150:	0801eed0 	.word	0x0801eed0

0801a154 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b084      	sub	sp, #16
 801a158:	af00      	add	r7, sp, #0
 801a15a:	6078      	str	r0, [r7, #4]
 801a15c:	460b      	mov	r3, r1
 801a15e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801a160:	2300      	movs	r3, #0
 801a162:	2200      	movs	r2, #0
 801a164:	f240 2101 	movw	r1, #513	; 0x201
 801a168:	f240 2001 	movw	r0, #513	; 0x201
 801a16c:	f001 fd66 	bl	801bc3c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a170:	4b73      	ldr	r3, [pc, #460]	; (801a340 <RadioSend+0x1ec>)
 801a172:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a176:	2101      	movs	r1, #1
 801a178:	4618      	mov	r0, r3
 801a17a:	f002 fa03 	bl	801c584 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801a17e:	4b70      	ldr	r3, [pc, #448]	; (801a340 <RadioSend+0x1ec>)
 801a180:	781b      	ldrb	r3, [r3, #0]
 801a182:	2b01      	cmp	r3, #1
 801a184:	d112      	bne.n	801a1ac <RadioSend+0x58>
 801a186:	4b6e      	ldr	r3, [pc, #440]	; (801a340 <RadioSend+0x1ec>)
 801a188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a18c:	2b06      	cmp	r3, #6
 801a18e:	d10d      	bne.n	801a1ac <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a190:	f640 0089 	movw	r0, #2185	; 0x889
 801a194:	f002 f916 	bl	801c3c4 <SUBGRF_ReadRegister>
 801a198:	4603      	mov	r3, r0
 801a19a:	f023 0304 	bic.w	r3, r3, #4
 801a19e:	b2db      	uxtb	r3, r3
 801a1a0:	4619      	mov	r1, r3
 801a1a2:	f640 0089 	movw	r0, #2185	; 0x889
 801a1a6:	f002 f8f9 	bl	801c39c <SUBGRF_WriteRegister>
 801a1aa:	e00c      	b.n	801a1c6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a1ac:	f640 0089 	movw	r0, #2185	; 0x889
 801a1b0:	f002 f908 	bl	801c3c4 <SUBGRF_ReadRegister>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	f043 0304 	orr.w	r3, r3, #4
 801a1ba:	b2db      	uxtb	r3, r3
 801a1bc:	4619      	mov	r1, r3
 801a1be:	f640 0089 	movw	r0, #2185	; 0x889
 801a1c2:	f002 f8eb 	bl	801c39c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801a1c6:	4b5e      	ldr	r3, [pc, #376]	; (801a340 <RadioSend+0x1ec>)
 801a1c8:	781b      	ldrb	r3, [r3, #0]
 801a1ca:	2b04      	cmp	r3, #4
 801a1cc:	f200 80a8 	bhi.w	801a320 <RadioSend+0x1cc>
 801a1d0:	a201      	add	r2, pc, #4	; (adr r2, 801a1d8 <RadioSend+0x84>)
 801a1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1d6:	bf00      	nop
 801a1d8:	0801a207 	.word	0x0801a207
 801a1dc:	0801a1ed 	.word	0x0801a1ed
 801a1e0:	0801a207 	.word	0x0801a207
 801a1e4:	0801a269 	.word	0x0801a269
 801a1e8:	0801a289 	.word	0x0801a289
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801a1ec:	4a54      	ldr	r2, [pc, #336]	; (801a340 <RadioSend+0x1ec>)
 801a1ee:	78fb      	ldrb	r3, [r7, #3]
 801a1f0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a1f2:	4854      	ldr	r0, [pc, #336]	; (801a344 <RadioSend+0x1f0>)
 801a1f4:	f001 ff8a 	bl	801c10c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a1f8:	78fb      	ldrb	r3, [r7, #3]
 801a1fa:	2200      	movs	r2, #0
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	6878      	ldr	r0, [r7, #4]
 801a200:	f001 fa3a 	bl	801b678 <SUBGRF_SendPayload>
            break;
 801a204:	e08d      	b.n	801a322 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801a206:	f002 fbb6 	bl	801c976 <RFW_Is_Init>
 801a20a:	4603      	mov	r3, r0
 801a20c:	2b01      	cmp	r3, #1
 801a20e:	d11e      	bne.n	801a24e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801a210:	f107 020d 	add.w	r2, r7, #13
 801a214:	78fb      	ldrb	r3, [r7, #3]
 801a216:	4619      	mov	r1, r3
 801a218:	6878      	ldr	r0, [r7, #4]
 801a21a:	f002 fbc4 	bl	801c9a6 <RFW_TransmitInit>
 801a21e:	4603      	mov	r3, r0
 801a220:	2b00      	cmp	r3, #0
 801a222:	d10c      	bne.n	801a23e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801a224:	7b7a      	ldrb	r2, [r7, #13]
 801a226:	4b46      	ldr	r3, [pc, #280]	; (801a340 <RadioSend+0x1ec>)
 801a228:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a22a:	4846      	ldr	r0, [pc, #280]	; (801a344 <RadioSend+0x1f0>)
 801a22c:	f001 ff6e 	bl	801c10c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801a230:	7b7b      	ldrb	r3, [r7, #13]
 801a232:	2200      	movs	r2, #0
 801a234:	4619      	mov	r1, r3
 801a236:	6878      	ldr	r0, [r7, #4]
 801a238:	f001 fa1e 	bl	801b678 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801a23c:	e071      	b.n	801a322 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801a23e:	4b42      	ldr	r3, [pc, #264]	; (801a348 <RadioSend+0x1f4>)
 801a240:	2201      	movs	r2, #1
 801a242:	2100      	movs	r1, #0
 801a244:	2002      	movs	r0, #2
 801a246:	f003 fb91 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801a24a:	2303      	movs	r3, #3
 801a24c:	e073      	b.n	801a336 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801a24e:	4a3c      	ldr	r2, [pc, #240]	; (801a340 <RadioSend+0x1ec>)
 801a250:	78fb      	ldrb	r3, [r7, #3]
 801a252:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a254:	483b      	ldr	r0, [pc, #236]	; (801a344 <RadioSend+0x1f0>)
 801a256:	f001 ff59 	bl	801c10c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801a25a:	78fb      	ldrb	r3, [r7, #3]
 801a25c:	2200      	movs	r2, #0
 801a25e:	4619      	mov	r1, r3
 801a260:	6878      	ldr	r0, [r7, #4]
 801a262:	f001 fa09 	bl	801b678 <SUBGRF_SendPayload>
            break;
 801a266:	e05c      	b.n	801a322 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a268:	4b35      	ldr	r3, [pc, #212]	; (801a340 <RadioSend+0x1ec>)
 801a26a:	2202      	movs	r2, #2
 801a26c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801a26e:	4a34      	ldr	r2, [pc, #208]	; (801a340 <RadioSend+0x1ec>)
 801a270:	78fb      	ldrb	r3, [r7, #3]
 801a272:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a274:	4833      	ldr	r0, [pc, #204]	; (801a344 <RadioSend+0x1f0>)
 801a276:	f001 ff49 	bl	801c10c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801a27a:	78fb      	ldrb	r3, [r7, #3]
 801a27c:	2200      	movs	r2, #0
 801a27e:	4619      	mov	r1, r3
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	f001 f9f9 	bl	801b678 <SUBGRF_SendPayload>
            break;
 801a286:	e04c      	b.n	801a322 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801a288:	78fb      	ldrb	r3, [r7, #3]
 801a28a:	461a      	mov	r2, r3
 801a28c:	6879      	ldr	r1, [r7, #4]
 801a28e:	482f      	ldr	r0, [pc, #188]	; (801a34c <RadioSend+0x1f8>)
 801a290:	f000 fccc 	bl	801ac2c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801a294:	4b2a      	ldr	r3, [pc, #168]	; (801a340 <RadioSend+0x1ec>)
 801a296:	2202      	movs	r2, #2
 801a298:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801a29a:	78fb      	ldrb	r3, [r7, #3]
 801a29c:	3301      	adds	r3, #1
 801a29e:	b2da      	uxtb	r2, r3
 801a2a0:	4b27      	ldr	r3, [pc, #156]	; (801a340 <RadioSend+0x1ec>)
 801a2a2:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2a4:	4827      	ldr	r0, [pc, #156]	; (801a344 <RadioSend+0x1f0>)
 801a2a6:	f001 ff31 	bl	801c10c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801a2aa:	2100      	movs	r1, #0
 801a2ac:	20f1      	movs	r0, #241	; 0xf1
 801a2ae:	f000 f966 	bl	801a57e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801a2b2:	2100      	movs	r1, #0
 801a2b4:	20f0      	movs	r0, #240	; 0xf0
 801a2b6:	f000 f962 	bl	801a57e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801a2ba:	4b21      	ldr	r3, [pc, #132]	; (801a340 <RadioSend+0x1ec>)
 801a2bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a2be:	2b64      	cmp	r3, #100	; 0x64
 801a2c0:	d108      	bne.n	801a2d4 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801a2c2:	2170      	movs	r1, #112	; 0x70
 801a2c4:	20f3      	movs	r0, #243	; 0xf3
 801a2c6:	f000 f95a 	bl	801a57e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801a2ca:	211d      	movs	r1, #29
 801a2cc:	20f2      	movs	r0, #242	; 0xf2
 801a2ce:	f000 f956 	bl	801a57e <RadioWrite>
 801a2d2:	e007      	b.n	801a2e4 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801a2d4:	21e1      	movs	r1, #225	; 0xe1
 801a2d6:	20f3      	movs	r0, #243	; 0xf3
 801a2d8:	f000 f951 	bl	801a57e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801a2dc:	2104      	movs	r1, #4
 801a2de:	20f2      	movs	r0, #242	; 0xf2
 801a2e0:	f000 f94d 	bl	801a57e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801a2e4:	78fb      	ldrb	r3, [r7, #3]
 801a2e6:	b29b      	uxth	r3, r3
 801a2e8:	00db      	lsls	r3, r3, #3
 801a2ea:	b29b      	uxth	r3, r3
 801a2ec:	3302      	adds	r3, #2
 801a2ee:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801a2f0:	89fb      	ldrh	r3, [r7, #14]
 801a2f2:	0a1b      	lsrs	r3, r3, #8
 801a2f4:	b29b      	uxth	r3, r3
 801a2f6:	b2db      	uxtb	r3, r3
 801a2f8:	4619      	mov	r1, r3
 801a2fa:	20f4      	movs	r0, #244	; 0xf4
 801a2fc:	f000 f93f 	bl	801a57e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801a300:	89fb      	ldrh	r3, [r7, #14]
 801a302:	b2db      	uxtb	r3, r3
 801a304:	4619      	mov	r1, r3
 801a306:	20f5      	movs	r0, #245	; 0xf5
 801a308:	f000 f939 	bl	801a57e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801a30c:	78fb      	ldrb	r3, [r7, #3]
 801a30e:	3301      	adds	r3, #1
 801a310:	b2db      	uxtb	r3, r3
 801a312:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801a316:	4619      	mov	r1, r3
 801a318:	480c      	ldr	r0, [pc, #48]	; (801a34c <RadioSend+0x1f8>)
 801a31a:	f001 f9ad 	bl	801b678 <SUBGRF_SendPayload>
            break;
 801a31e:	e000      	b.n	801a322 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a320:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801a322:	4b07      	ldr	r3, [pc, #28]	; (801a340 <RadioSend+0x1ec>)
 801a324:	685b      	ldr	r3, [r3, #4]
 801a326:	4619      	mov	r1, r3
 801a328:	4809      	ldr	r0, [pc, #36]	; (801a350 <RadioSend+0x1fc>)
 801a32a:	f003 f985 	bl	801d638 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801a32e:	4808      	ldr	r0, [pc, #32]	; (801a350 <RadioSend+0x1fc>)
 801a330:	f003 f8a4 	bl	801d47c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801a334:	2300      	movs	r3, #0
}
 801a336:	4618      	mov	r0, r3
 801a338:	3710      	adds	r7, #16
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd80      	pop	{r7, pc}
 801a33e:	bf00      	nop
 801a340:	20001b74 	.word	0x20001b74
 801a344:	20001b82 	.word	0x20001b82
 801a348:	0801e83c 	.word	0x0801e83c
 801a34c:	20001a70 	.word	0x20001a70
 801a350:	20001bd0 	.word	0x20001bd0

0801a354 <RadioSleep>:

static void RadioSleep( void )
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b082      	sub	sp, #8
 801a358:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801a35a:	2300      	movs	r3, #0
 801a35c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801a35e:	793b      	ldrb	r3, [r7, #4]
 801a360:	f043 0304 	orr.w	r3, r3, #4
 801a364:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801a366:	7938      	ldrb	r0, [r7, #4]
 801a368:	f001 fa62 	bl	801b830 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801a36c:	2002      	movs	r0, #2
 801a36e:	f7e8 f875 	bl	800245c <HAL_Delay>
}
 801a372:	bf00      	nop
 801a374:	3708      	adds	r7, #8
 801a376:	46bd      	mov	sp, r7
 801a378:	bd80      	pop	{r7, pc}

0801a37a <RadioStandby>:

static void RadioStandby( void )
{
 801a37a:	b580      	push	{r7, lr}
 801a37c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801a37e:	2000      	movs	r0, #0
 801a380:	f001 fa88 	bl	801b894 <SUBGRF_SetStandby>
}
 801a384:	bf00      	nop
 801a386:	bd80      	pop	{r7, pc}

0801a388 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b082      	sub	sp, #8
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801a390:	f002 faf1 	bl	801c976 <RFW_Is_Init>
 801a394:	4603      	mov	r3, r0
 801a396:	2b01      	cmp	r3, #1
 801a398:	d102      	bne.n	801a3a0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801a39a:	f002 fb14 	bl	801c9c6 <RFW_ReceiveInit>
 801a39e:	e007      	b.n	801a3b0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	f240 2162 	movw	r1, #610	; 0x262
 801a3a8:	f240 2062 	movw	r0, #610	; 0x262
 801a3ac:	f001 fc46 	bl	801bc3c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d006      	beq.n	801a3c4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a3b6:	6879      	ldr	r1, [r7, #4]
 801a3b8:	4811      	ldr	r0, [pc, #68]	; (801a400 <RadioRx+0x78>)
 801a3ba:	f003 f93d 	bl	801d638 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a3be:	4810      	ldr	r0, [pc, #64]	; (801a400 <RadioRx+0x78>)
 801a3c0:	f003 f85c 	bl	801d47c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a3c4:	4b0f      	ldr	r3, [pc, #60]	; (801a404 <RadioRx+0x7c>)
 801a3c6:	2200      	movs	r2, #0
 801a3c8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a3ca:	4b0e      	ldr	r3, [pc, #56]	; (801a404 <RadioRx+0x7c>)
 801a3cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a3d0:	2100      	movs	r1, #0
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	f002 f8d6 	bl	801c584 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a3d8:	4b0a      	ldr	r3, [pc, #40]	; (801a404 <RadioRx+0x7c>)
 801a3da:	785b      	ldrb	r3, [r3, #1]
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d004      	beq.n	801a3ea <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a3e0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a3e4:	f001 fa92 	bl	801b90c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801a3e8:	e005      	b.n	801a3f6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801a3ea:	4b06      	ldr	r3, [pc, #24]	; (801a404 <RadioRx+0x7c>)
 801a3ec:	689b      	ldr	r3, [r3, #8]
 801a3ee:	019b      	lsls	r3, r3, #6
 801a3f0:	4618      	mov	r0, r3
 801a3f2:	f001 fa8b 	bl	801b90c <SUBGRF_SetRx>
}
 801a3f6:	bf00      	nop
 801a3f8:	3708      	adds	r7, #8
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	bd80      	pop	{r7, pc}
 801a3fe:	bf00      	nop
 801a400:	20001be8 	.word	0x20001be8
 801a404:	20001b74 	.word	0x20001b74

0801a408 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b082      	sub	sp, #8
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801a410:	f002 fab1 	bl	801c976 <RFW_Is_Init>
 801a414:	4603      	mov	r3, r0
 801a416:	2b01      	cmp	r3, #1
 801a418:	d102      	bne.n	801a420 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801a41a:	f002 fad4 	bl	801c9c6 <RFW_ReceiveInit>
 801a41e:	e007      	b.n	801a430 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a420:	2300      	movs	r3, #0
 801a422:	2200      	movs	r2, #0
 801a424:	f240 2162 	movw	r1, #610	; 0x262
 801a428:	f240 2062 	movw	r0, #610	; 0x262
 801a42c:	f001 fc06 	bl	801bc3c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d006      	beq.n	801a444 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801a436:	6879      	ldr	r1, [r7, #4]
 801a438:	4811      	ldr	r0, [pc, #68]	; (801a480 <RadioRxBoosted+0x78>)
 801a43a:	f003 f8fd 	bl	801d638 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801a43e:	4810      	ldr	r0, [pc, #64]	; (801a480 <RadioRxBoosted+0x78>)
 801a440:	f003 f81c 	bl	801d47c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801a444:	4b0f      	ldr	r3, [pc, #60]	; (801a484 <RadioRxBoosted+0x7c>)
 801a446:	2200      	movs	r2, #0
 801a448:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a44a:	4b0e      	ldr	r3, [pc, #56]	; (801a484 <RadioRxBoosted+0x7c>)
 801a44c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a450:	2100      	movs	r1, #0
 801a452:	4618      	mov	r0, r3
 801a454:	f002 f896 	bl	801c584 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801a458:	4b0a      	ldr	r3, [pc, #40]	; (801a484 <RadioRxBoosted+0x7c>)
 801a45a:	785b      	ldrb	r3, [r3, #1]
 801a45c:	2b00      	cmp	r3, #0
 801a45e:	d004      	beq.n	801a46a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801a460:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a464:	f001 fa72 	bl	801b94c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801a468:	e005      	b.n	801a476 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801a46a:	4b06      	ldr	r3, [pc, #24]	; (801a484 <RadioRxBoosted+0x7c>)
 801a46c:	689b      	ldr	r3, [r3, #8]
 801a46e:	019b      	lsls	r3, r3, #6
 801a470:	4618      	mov	r0, r3
 801a472:	f001 fa6b 	bl	801b94c <SUBGRF_SetRxBoosted>
}
 801a476:	bf00      	nop
 801a478:	3708      	adds	r7, #8
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}
 801a47e:	bf00      	nop
 801a480:	20001be8 	.word	0x20001be8
 801a484:	20001b74 	.word	0x20001b74

0801a488 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b082      	sub	sp, #8
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
 801a490:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	005a      	lsls	r2, r3, #1
 801a496:	683b      	ldr	r3, [r7, #0]
 801a498:	4413      	add	r3, r2
 801a49a:	4a0c      	ldr	r2, [pc, #48]	; (801a4cc <RadioSetRxDutyCycle+0x44>)
 801a49c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a49e:	2300      	movs	r3, #0
 801a4a0:	2200      	movs	r2, #0
 801a4a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801a4a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a4aa:	f001 fbc7 	bl	801bc3c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a4ae:	4b07      	ldr	r3, [pc, #28]	; (801a4cc <RadioSetRxDutyCycle+0x44>)
 801a4b0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a4b4:	2100      	movs	r1, #0
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	f002 f864 	bl	801c584 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801a4bc:	6839      	ldr	r1, [r7, #0]
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f001 fa68 	bl	801b994 <SUBGRF_SetRxDutyCycle>
}
 801a4c4:	bf00      	nop
 801a4c6:	3708      	adds	r7, #8
 801a4c8:	46bd      	mov	sp, r7
 801a4ca:	bd80      	pop	{r7, pc}
 801a4cc:	20001b74 	.word	0x20001b74

0801a4d0 <RadioStartCad>:

static void RadioStartCad( void )
{
 801a4d0:	b580      	push	{r7, lr}
 801a4d2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801a4d4:	4b09      	ldr	r3, [pc, #36]	; (801a4fc <RadioStartCad+0x2c>)
 801a4d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a4da:	2100      	movs	r1, #0
 801a4dc:	4618      	mov	r0, r3
 801a4de:	f002 f851 	bl	801c584 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801a4e2:	2300      	movs	r3, #0
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801a4ea:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801a4ee:	f001 fba5 	bl	801bc3c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801a4f2:	f001 fa7b 	bl	801b9ec <SUBGRF_SetCad>
}
 801a4f6:	bf00      	nop
 801a4f8:	bd80      	pop	{r7, pc}
 801a4fa:	bf00      	nop
 801a4fc:	20001b74 	.word	0x20001b74

0801a500 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801a500:	b580      	push	{r7, lr}
 801a502:	b084      	sub	sp, #16
 801a504:	af00      	add	r7, sp, #0
 801a506:	6078      	str	r0, [r7, #4]
 801a508:	460b      	mov	r3, r1
 801a50a:	70fb      	strb	r3, [r7, #3]
 801a50c:	4613      	mov	r3, r2
 801a50e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801a510:	883b      	ldrh	r3, [r7, #0]
 801a512:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a516:	fb02 f303 	mul.w	r3, r2, r3
 801a51a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801a51c:	6878      	ldr	r0, [r7, #4]
 801a51e:	f001 fbe9 	bl	801bcf4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801a522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a526:	4618      	mov	r0, r3
 801a528:	f002 f854 	bl	801c5d4 <SUBGRF_SetRfTxPower>
 801a52c:	4603      	mov	r3, r0
 801a52e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a530:	210e      	movs	r1, #14
 801a532:	f640 101f 	movw	r0, #2335	; 0x91f
 801a536:	f001 ff31 	bl	801c39c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801a53a:	7afb      	ldrb	r3, [r7, #11]
 801a53c:	2101      	movs	r1, #1
 801a53e:	4618      	mov	r0, r3
 801a540:	f002 f820 	bl	801c584 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801a544:	f001 fa60 	bl	801ba08 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801a548:	68f9      	ldr	r1, [r7, #12]
 801a54a:	4805      	ldr	r0, [pc, #20]	; (801a560 <RadioSetTxContinuousWave+0x60>)
 801a54c:	f003 f874 	bl	801d638 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801a550:	4803      	ldr	r0, [pc, #12]	; (801a560 <RadioSetTxContinuousWave+0x60>)
 801a552:	f002 ff93 	bl	801d47c <UTIL_TIMER_Start>
}
 801a556:	bf00      	nop
 801a558:	3710      	adds	r7, #16
 801a55a:	46bd      	mov	sp, r7
 801a55c:	bd80      	pop	{r7, pc}
 801a55e:	bf00      	nop
 801a560:	20001bd0 	.word	0x20001bd0

0801a564 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801a564:	b580      	push	{r7, lr}
 801a566:	b082      	sub	sp, #8
 801a568:	af00      	add	r7, sp, #0
 801a56a:	4603      	mov	r3, r0
 801a56c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801a56e:	f001 fe82 	bl	801c276 <SUBGRF_GetRssiInst>
 801a572:	4603      	mov	r3, r0
 801a574:	b21b      	sxth	r3, r3
}
 801a576:	4618      	mov	r0, r3
 801a578:	3708      	adds	r7, #8
 801a57a:	46bd      	mov	sp, r7
 801a57c:	bd80      	pop	{r7, pc}

0801a57e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801a57e:	b580      	push	{r7, lr}
 801a580:	b082      	sub	sp, #8
 801a582:	af00      	add	r7, sp, #0
 801a584:	4603      	mov	r3, r0
 801a586:	460a      	mov	r2, r1
 801a588:	80fb      	strh	r3, [r7, #6]
 801a58a:	4613      	mov	r3, r2
 801a58c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801a58e:	797a      	ldrb	r2, [r7, #5]
 801a590:	88fb      	ldrh	r3, [r7, #6]
 801a592:	4611      	mov	r1, r2
 801a594:	4618      	mov	r0, r3
 801a596:	f001 ff01 	bl	801c39c <SUBGRF_WriteRegister>
}
 801a59a:	bf00      	nop
 801a59c:	3708      	adds	r7, #8
 801a59e:	46bd      	mov	sp, r7
 801a5a0:	bd80      	pop	{r7, pc}

0801a5a2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801a5a2:	b580      	push	{r7, lr}
 801a5a4:	b082      	sub	sp, #8
 801a5a6:	af00      	add	r7, sp, #0
 801a5a8:	4603      	mov	r3, r0
 801a5aa:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801a5ac:	88fb      	ldrh	r3, [r7, #6]
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	f001 ff08 	bl	801c3c4 <SUBGRF_ReadRegister>
 801a5b4:	4603      	mov	r3, r0
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	3708      	adds	r7, #8
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bd80      	pop	{r7, pc}

0801a5be <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a5be:	b580      	push	{r7, lr}
 801a5c0:	b082      	sub	sp, #8
 801a5c2:	af00      	add	r7, sp, #0
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	6039      	str	r1, [r7, #0]
 801a5c8:	80fb      	strh	r3, [r7, #6]
 801a5ca:	4613      	mov	r3, r2
 801a5cc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801a5ce:	797b      	ldrb	r3, [r7, #5]
 801a5d0:	b29a      	uxth	r2, r3
 801a5d2:	88fb      	ldrh	r3, [r7, #6]
 801a5d4:	6839      	ldr	r1, [r7, #0]
 801a5d6:	4618      	mov	r0, r3
 801a5d8:	f001 ff08 	bl	801c3ec <SUBGRF_WriteRegisters>
}
 801a5dc:	bf00      	nop
 801a5de:	3708      	adds	r7, #8
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd80      	pop	{r7, pc}

0801a5e4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b082      	sub	sp, #8
 801a5e8:	af00      	add	r7, sp, #0
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	6039      	str	r1, [r7, #0]
 801a5ee:	80fb      	strh	r3, [r7, #6]
 801a5f0:	4613      	mov	r3, r2
 801a5f2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801a5f4:	797b      	ldrb	r3, [r7, #5]
 801a5f6:	b29a      	uxth	r2, r3
 801a5f8:	88fb      	ldrh	r3, [r7, #6]
 801a5fa:	6839      	ldr	r1, [r7, #0]
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	f001 ff17 	bl	801c430 <SUBGRF_ReadRegisters>
}
 801a602:	bf00      	nop
 801a604:	3708      	adds	r7, #8
 801a606:	46bd      	mov	sp, r7
 801a608:	bd80      	pop	{r7, pc}
	...

0801a60c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b082      	sub	sp, #8
 801a610:	af00      	add	r7, sp, #0
 801a612:	4603      	mov	r3, r0
 801a614:	460a      	mov	r2, r1
 801a616:	71fb      	strb	r3, [r7, #7]
 801a618:	4613      	mov	r3, r2
 801a61a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801a61c:	79fb      	ldrb	r3, [r7, #7]
 801a61e:	2b01      	cmp	r3, #1
 801a620:	d10a      	bne.n	801a638 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801a622:	4a0e      	ldr	r2, [pc, #56]	; (801a65c <RadioSetMaxPayloadLength+0x50>)
 801a624:	79bb      	ldrb	r3, [r7, #6]
 801a626:	7013      	strb	r3, [r2, #0]
 801a628:	4b0c      	ldr	r3, [pc, #48]	; (801a65c <RadioSetMaxPayloadLength+0x50>)
 801a62a:	781a      	ldrb	r2, [r3, #0]
 801a62c:	4b0c      	ldr	r3, [pc, #48]	; (801a660 <RadioSetMaxPayloadLength+0x54>)
 801a62e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a630:	480c      	ldr	r0, [pc, #48]	; (801a664 <RadioSetMaxPayloadLength+0x58>)
 801a632:	f001 fd6b 	bl	801c10c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801a636:	e00d      	b.n	801a654 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801a638:	4b09      	ldr	r3, [pc, #36]	; (801a660 <RadioSetMaxPayloadLength+0x54>)
 801a63a:	7d5b      	ldrb	r3, [r3, #21]
 801a63c:	2b01      	cmp	r3, #1
 801a63e:	d109      	bne.n	801a654 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801a640:	4a06      	ldr	r2, [pc, #24]	; (801a65c <RadioSetMaxPayloadLength+0x50>)
 801a642:	79bb      	ldrb	r3, [r7, #6]
 801a644:	7013      	strb	r3, [r2, #0]
 801a646:	4b05      	ldr	r3, [pc, #20]	; (801a65c <RadioSetMaxPayloadLength+0x50>)
 801a648:	781a      	ldrb	r2, [r3, #0]
 801a64a:	4b05      	ldr	r3, [pc, #20]	; (801a660 <RadioSetMaxPayloadLength+0x54>)
 801a64c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a64e:	4805      	ldr	r0, [pc, #20]	; (801a664 <RadioSetMaxPayloadLength+0x58>)
 801a650:	f001 fd5c 	bl	801c10c <SUBGRF_SetPacketParams>
}
 801a654:	bf00      	nop
 801a656:	3708      	adds	r7, #8
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}
 801a65c:	20000134 	.word	0x20000134
 801a660:	20001b74 	.word	0x20001b74
 801a664:	20001b82 	.word	0x20001b82

0801a668 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801a668:	b580      	push	{r7, lr}
 801a66a:	b082      	sub	sp, #8
 801a66c:	af00      	add	r7, sp, #0
 801a66e:	4603      	mov	r3, r0
 801a670:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801a672:	4a13      	ldr	r2, [pc, #76]	; (801a6c0 <RadioSetPublicNetwork+0x58>)
 801a674:	79fb      	ldrb	r3, [r7, #7]
 801a676:	7313      	strb	r3, [r2, #12]
 801a678:	4b11      	ldr	r3, [pc, #68]	; (801a6c0 <RadioSetPublicNetwork+0x58>)
 801a67a:	7b1a      	ldrb	r2, [r3, #12]
 801a67c:	4b10      	ldr	r3, [pc, #64]	; (801a6c0 <RadioSetPublicNetwork+0x58>)
 801a67e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801a680:	2001      	movs	r0, #1
 801a682:	f7ff f811 	bl	80196a8 <RadioSetModem>
    if( enable == true )
 801a686:	79fb      	ldrb	r3, [r7, #7]
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d00a      	beq.n	801a6a2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801a68c:	2134      	movs	r1, #52	; 0x34
 801a68e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a692:	f001 fe83 	bl	801c39c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801a696:	2144      	movs	r1, #68	; 0x44
 801a698:	f240 7041 	movw	r0, #1857	; 0x741
 801a69c:	f001 fe7e 	bl	801c39c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801a6a0:	e009      	b.n	801a6b6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801a6a2:	2114      	movs	r1, #20
 801a6a4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801a6a8:	f001 fe78 	bl	801c39c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801a6ac:	2124      	movs	r1, #36	; 0x24
 801a6ae:	f240 7041 	movw	r0, #1857	; 0x741
 801a6b2:	f001 fe73 	bl	801c39c <SUBGRF_WriteRegister>
}
 801a6b6:	bf00      	nop
 801a6b8:	3708      	adds	r7, #8
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	bd80      	pop	{r7, pc}
 801a6be:	bf00      	nop
 801a6c0:	20001b74 	.word	0x20001b74

0801a6c4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801a6c4:	b580      	push	{r7, lr}
 801a6c6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801a6c8:	f001 ffb8 	bl	801c63c <SUBGRF_GetRadioWakeUpTime>
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	3303      	adds	r3, #3
}
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	bd80      	pop	{r7, pc}

0801a6d4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b082      	sub	sp, #8
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801a6dc:	f000 f80e 	bl	801a6fc <RadioOnTxTimeoutProcess>
}
 801a6e0:	bf00      	nop
 801a6e2:	3708      	adds	r7, #8
 801a6e4:	46bd      	mov	sp, r7
 801a6e6:	bd80      	pop	{r7, pc}

0801a6e8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	b082      	sub	sp, #8
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801a6f0:	f000 f818 	bl	801a724 <RadioOnRxTimeoutProcess>
}
 801a6f4:	bf00      	nop
 801a6f6:	3708      	adds	r7, #8
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	bd80      	pop	{r7, pc}

0801a6fc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801a6fc:	b580      	push	{r7, lr}
 801a6fe:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a700:	4b07      	ldr	r3, [pc, #28]	; (801a720 <RadioOnTxTimeoutProcess+0x24>)
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d008      	beq.n	801a71a <RadioOnTxTimeoutProcess+0x1e>
 801a708:	4b05      	ldr	r3, [pc, #20]	; (801a720 <RadioOnTxTimeoutProcess+0x24>)
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	685b      	ldr	r3, [r3, #4]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d003      	beq.n	801a71a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801a712:	4b03      	ldr	r3, [pc, #12]	; (801a720 <RadioOnTxTimeoutProcess+0x24>)
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	685b      	ldr	r3, [r3, #4]
 801a718:	4798      	blx	r3
    }
}
 801a71a:	bf00      	nop
 801a71c:	bd80      	pop	{r7, pc}
 801a71e:	bf00      	nop
 801a720:	20001b70 	.word	0x20001b70

0801a724 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801a724:	b580      	push	{r7, lr}
 801a726:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a728:	4b07      	ldr	r3, [pc, #28]	; (801a748 <RadioOnRxTimeoutProcess+0x24>)
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d008      	beq.n	801a742 <RadioOnRxTimeoutProcess+0x1e>
 801a730:	4b05      	ldr	r3, [pc, #20]	; (801a748 <RadioOnRxTimeoutProcess+0x24>)
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	68db      	ldr	r3, [r3, #12]
 801a736:	2b00      	cmp	r3, #0
 801a738:	d003      	beq.n	801a742 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801a73a:	4b03      	ldr	r3, [pc, #12]	; (801a748 <RadioOnRxTimeoutProcess+0x24>)
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	68db      	ldr	r3, [r3, #12]
 801a740:	4798      	blx	r3
    }
}
 801a742:	bf00      	nop
 801a744:	bd80      	pop	{r7, pc}
 801a746:	bf00      	nop
 801a748:	20001b70 	.word	0x20001b70

0801a74c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b082      	sub	sp, #8
 801a750:	af00      	add	r7, sp, #0
 801a752:	4603      	mov	r3, r0
 801a754:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801a756:	4a05      	ldr	r2, [pc, #20]	; (801a76c <RadioOnDioIrq+0x20>)
 801a758:	88fb      	ldrh	r3, [r7, #6]
 801a75a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801a75e:	f000 f807 	bl	801a770 <RadioIrqProcess>
}
 801a762:	bf00      	nop
 801a764:	3708      	adds	r7, #8
 801a766:	46bd      	mov	sp, r7
 801a768:	bd80      	pop	{r7, pc}
 801a76a:	bf00      	nop
 801a76c:	20001b74 	.word	0x20001b74

0801a770 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801a770:	b5b0      	push	{r4, r5, r7, lr}
 801a772:	b082      	sub	sp, #8
 801a774:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801a776:	2300      	movs	r3, #0
 801a778:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801a77a:	2300      	movs	r3, #0
 801a77c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801a77e:	4ba8      	ldr	r3, [pc, #672]	; (801aa20 <RadioIrqProcess+0x2b0>)
 801a780:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a788:	f000 810d 	beq.w	801a9a6 <RadioIrqProcess+0x236>
 801a78c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a790:	f300 81e8 	bgt.w	801ab64 <RadioIrqProcess+0x3f4>
 801a794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a798:	f000 80f1 	beq.w	801a97e <RadioIrqProcess+0x20e>
 801a79c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a7a0:	f300 81e0 	bgt.w	801ab64 <RadioIrqProcess+0x3f4>
 801a7a4:	2b80      	cmp	r3, #128	; 0x80
 801a7a6:	f000 80d6 	beq.w	801a956 <RadioIrqProcess+0x1e6>
 801a7aa:	2b80      	cmp	r3, #128	; 0x80
 801a7ac:	f300 81da 	bgt.w	801ab64 <RadioIrqProcess+0x3f4>
 801a7b0:	2b20      	cmp	r3, #32
 801a7b2:	dc49      	bgt.n	801a848 <RadioIrqProcess+0xd8>
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	f340 81d5 	ble.w	801ab64 <RadioIrqProcess+0x3f4>
 801a7ba:	3b01      	subs	r3, #1
 801a7bc:	2b1f      	cmp	r3, #31
 801a7be:	f200 81d1 	bhi.w	801ab64 <RadioIrqProcess+0x3f4>
 801a7c2:	a201      	add	r2, pc, #4	; (adr r2, 801a7c8 <RadioIrqProcess+0x58>)
 801a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7c8:	0801a851 	.word	0x0801a851
 801a7cc:	0801a88b 	.word	0x0801a88b
 801a7d0:	0801ab65 	.word	0x0801ab65
 801a7d4:	0801aa41 	.word	0x0801aa41
 801a7d8:	0801ab65 	.word	0x0801ab65
 801a7dc:	0801ab65 	.word	0x0801ab65
 801a7e0:	0801ab65 	.word	0x0801ab65
 801a7e4:	0801aabd 	.word	0x0801aabd
 801a7e8:	0801ab65 	.word	0x0801ab65
 801a7ec:	0801ab65 	.word	0x0801ab65
 801a7f0:	0801ab65 	.word	0x0801ab65
 801a7f4:	0801ab65 	.word	0x0801ab65
 801a7f8:	0801ab65 	.word	0x0801ab65
 801a7fc:	0801ab65 	.word	0x0801ab65
 801a800:	0801ab65 	.word	0x0801ab65
 801a804:	0801aad9 	.word	0x0801aad9
 801a808:	0801ab65 	.word	0x0801ab65
 801a80c:	0801ab65 	.word	0x0801ab65
 801a810:	0801ab65 	.word	0x0801ab65
 801a814:	0801ab65 	.word	0x0801ab65
 801a818:	0801ab65 	.word	0x0801ab65
 801a81c:	0801ab65 	.word	0x0801ab65
 801a820:	0801ab65 	.word	0x0801ab65
 801a824:	0801ab65 	.word	0x0801ab65
 801a828:	0801ab65 	.word	0x0801ab65
 801a82c:	0801ab65 	.word	0x0801ab65
 801a830:	0801ab65 	.word	0x0801ab65
 801a834:	0801ab65 	.word	0x0801ab65
 801a838:	0801ab65 	.word	0x0801ab65
 801a83c:	0801ab65 	.word	0x0801ab65
 801a840:	0801ab65 	.word	0x0801ab65
 801a844:	0801aae7 	.word	0x0801aae7
 801a848:	2b40      	cmp	r3, #64	; 0x40
 801a84a:	f000 816d 	beq.w	801ab28 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801a84e:	e189      	b.n	801ab64 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a850:	4874      	ldr	r0, [pc, #464]	; (801aa24 <RadioIrqProcess+0x2b4>)
 801a852:	f002 fe81 	bl	801d558 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a856:	2000      	movs	r0, #0
 801a858:	f001 f81c 	bl	801b894 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a85c:	f002 f892 	bl	801c984 <RFW_Is_LongPacketModeEnabled>
 801a860:	4603      	mov	r3, r0
 801a862:	2b01      	cmp	r3, #1
 801a864:	d101      	bne.n	801a86a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a866:	f002 f8b6 	bl	801c9d6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a86a:	4b6f      	ldr	r3, [pc, #444]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	f000 817a 	beq.w	801ab68 <RadioIrqProcess+0x3f8>
 801a874:	4b6c      	ldr	r3, [pc, #432]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	f000 8174 	beq.w	801ab68 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a880:	4b69      	ldr	r3, [pc, #420]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	4798      	blx	r3
        break;
 801a888:	e16e      	b.n	801ab68 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a88a:	4868      	ldr	r0, [pc, #416]	; (801aa2c <RadioIrqProcess+0x2bc>)
 801a88c:	f002 fe64 	bl	801d558 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a890:	4b63      	ldr	r3, [pc, #396]	; (801aa20 <RadioIrqProcess+0x2b0>)
 801a892:	785b      	ldrb	r3, [r3, #1]
 801a894:	f083 0301 	eor.w	r3, r3, #1
 801a898:	b2db      	uxtb	r3, r3
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d014      	beq.n	801a8c8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a89e:	2000      	movs	r0, #0
 801a8a0:	f000 fff8 	bl	801b894 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a8a4:	2100      	movs	r1, #0
 801a8a6:	f640 1002 	movw	r0, #2306	; 0x902
 801a8aa:	f001 fd77 	bl	801c39c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a8ae:	f640 1044 	movw	r0, #2372	; 0x944
 801a8b2:	f001 fd87 	bl	801c3c4 <SUBGRF_ReadRegister>
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	f043 0302 	orr.w	r3, r3, #2
 801a8bc:	b2db      	uxtb	r3, r3
 801a8be:	4619      	mov	r1, r3
 801a8c0:	f640 1044 	movw	r0, #2372	; 0x944
 801a8c4:	f001 fd6a 	bl	801c39c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a8c8:	1dfb      	adds	r3, r7, #7
 801a8ca:	22ff      	movs	r2, #255	; 0xff
 801a8cc:	4619      	mov	r1, r3
 801a8ce:	4858      	ldr	r0, [pc, #352]	; (801aa30 <RadioIrqProcess+0x2c0>)
 801a8d0:	f000 feb0 	bl	801b634 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a8d4:	4857      	ldr	r0, [pc, #348]	; (801aa34 <RadioIrqProcess+0x2c4>)
 801a8d6:	f001 fd0f 	bl	801c2f8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a8da:	4b53      	ldr	r3, [pc, #332]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	f000 8144 	beq.w	801ab6c <RadioIrqProcess+0x3fc>
 801a8e4:	4b50      	ldr	r3, [pc, #320]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	689b      	ldr	r3, [r3, #8]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	f000 813e 	beq.w	801ab6c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801a8f0:	4b4b      	ldr	r3, [pc, #300]	; (801aa20 <RadioIrqProcess+0x2b0>)
 801a8f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a8f6:	2b01      	cmp	r3, #1
 801a8f8:	d10e      	bne.n	801a918 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801a8fa:	4b4b      	ldr	r3, [pc, #300]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	689c      	ldr	r4, [r3, #8]
 801a900:	79fb      	ldrb	r3, [r7, #7]
 801a902:	b299      	uxth	r1, r3
 801a904:	4b46      	ldr	r3, [pc, #280]	; (801aa20 <RadioIrqProcess+0x2b0>)
 801a906:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a90a:	b21a      	sxth	r2, r3
 801a90c:	4b44      	ldr	r3, [pc, #272]	; (801aa20 <RadioIrqProcess+0x2b0>)
 801a90e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a912:	4847      	ldr	r0, [pc, #284]	; (801aa30 <RadioIrqProcess+0x2c0>)
 801a914:	47a0      	blx	r4
                break;
 801a916:	e01d      	b.n	801a954 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a918:	4b41      	ldr	r3, [pc, #260]	; (801aa20 <RadioIrqProcess+0x2b0>)
 801a91a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a91c:	463a      	mov	r2, r7
 801a91e:	4611      	mov	r1, r2
 801a920:	4618      	mov	r0, r3
 801a922:	f001 ff7d 	bl	801c820 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801a926:	4b40      	ldr	r3, [pc, #256]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	689c      	ldr	r4, [r3, #8]
 801a92c:	79fb      	ldrb	r3, [r7, #7]
 801a92e:	b299      	uxth	r1, r3
 801a930:	4b3b      	ldr	r3, [pc, #236]	; (801aa20 <RadioIrqProcess+0x2b0>)
 801a932:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a936:	b218      	sxth	r0, r3
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a93e:	4a3e      	ldr	r2, [pc, #248]	; (801aa38 <RadioIrqProcess+0x2c8>)
 801a940:	fb82 5203 	smull	r5, r2, r2, r3
 801a944:	1192      	asrs	r2, r2, #6
 801a946:	17db      	asrs	r3, r3, #31
 801a948:	1ad3      	subs	r3, r2, r3
 801a94a:	b25b      	sxtb	r3, r3
 801a94c:	4602      	mov	r2, r0
 801a94e:	4838      	ldr	r0, [pc, #224]	; (801aa30 <RadioIrqProcess+0x2c0>)
 801a950:	47a0      	blx	r4
                break;
 801a952:	bf00      	nop
        break;
 801a954:	e10a      	b.n	801ab6c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a956:	2000      	movs	r0, #0
 801a958:	f000 ff9c 	bl	801b894 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a95c:	4b32      	ldr	r3, [pc, #200]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	2b00      	cmp	r3, #0
 801a962:	f000 8105 	beq.w	801ab70 <RadioIrqProcess+0x400>
 801a966:	4b30      	ldr	r3, [pc, #192]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	699b      	ldr	r3, [r3, #24]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	f000 80ff 	beq.w	801ab70 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801a972:	4b2d      	ldr	r3, [pc, #180]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	699b      	ldr	r3, [r3, #24]
 801a978:	2000      	movs	r0, #0
 801a97a:	4798      	blx	r3
        break;
 801a97c:	e0f8      	b.n	801ab70 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801a97e:	2000      	movs	r0, #0
 801a980:	f000 ff88 	bl	801b894 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a984:	4b28      	ldr	r3, [pc, #160]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	f000 80f3 	beq.w	801ab74 <RadioIrqProcess+0x404>
 801a98e:	4b26      	ldr	r3, [pc, #152]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	699b      	ldr	r3, [r3, #24]
 801a994:	2b00      	cmp	r3, #0
 801a996:	f000 80ed 	beq.w	801ab74 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801a99a:	4b23      	ldr	r3, [pc, #140]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	699b      	ldr	r3, [r3, #24]
 801a9a0:	2001      	movs	r0, #1
 801a9a2:	4798      	blx	r3
        break;
 801a9a4:	e0e6      	b.n	801ab74 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a9a6:	4b25      	ldr	r3, [pc, #148]	; (801aa3c <RadioIrqProcess+0x2cc>)
 801a9a8:	2201      	movs	r2, #1
 801a9aa:	2100      	movs	r1, #0
 801a9ac:	2002      	movs	r0, #2
 801a9ae:	f002 ffdd 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a9b2:	f000 fe25 	bl	801b600 <SUBGRF_GetOperatingMode>
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	2b04      	cmp	r3, #4
 801a9ba:	d115      	bne.n	801a9e8 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801a9bc:	4819      	ldr	r0, [pc, #100]	; (801aa24 <RadioIrqProcess+0x2b4>)
 801a9be:	f002 fdcb 	bl	801d558 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a9c2:	2000      	movs	r0, #0
 801a9c4:	f000 ff66 	bl	801b894 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a9c8:	4b17      	ldr	r3, [pc, #92]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	f000 80d3 	beq.w	801ab78 <RadioIrqProcess+0x408>
 801a9d2:	4b15      	ldr	r3, [pc, #84]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	685b      	ldr	r3, [r3, #4]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	f000 80cd 	beq.w	801ab78 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801a9de:	4b12      	ldr	r3, [pc, #72]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801a9e0:	681b      	ldr	r3, [r3, #0]
 801a9e2:	685b      	ldr	r3, [r3, #4]
 801a9e4:	4798      	blx	r3
        break;
 801a9e6:	e0c7      	b.n	801ab78 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a9e8:	f000 fe0a 	bl	801b600 <SUBGRF_GetOperatingMode>
 801a9ec:	4603      	mov	r3, r0
 801a9ee:	2b05      	cmp	r3, #5
 801a9f0:	f040 80c2 	bne.w	801ab78 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801a9f4:	480d      	ldr	r0, [pc, #52]	; (801aa2c <RadioIrqProcess+0x2bc>)
 801a9f6:	f002 fdaf 	bl	801d558 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a9fa:	2000      	movs	r0, #0
 801a9fc:	f000 ff4a 	bl	801b894 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801aa00:	4b09      	ldr	r3, [pc, #36]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	f000 80b7 	beq.w	801ab78 <RadioIrqProcess+0x408>
 801aa0a:	4b07      	ldr	r3, [pc, #28]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	68db      	ldr	r3, [r3, #12]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	f000 80b1 	beq.w	801ab78 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801aa16:	4b04      	ldr	r3, [pc, #16]	; (801aa28 <RadioIrqProcess+0x2b8>)
 801aa18:	681b      	ldr	r3, [r3, #0]
 801aa1a:	68db      	ldr	r3, [r3, #12]
 801aa1c:	4798      	blx	r3
        break;
 801aa1e:	e0ab      	b.n	801ab78 <RadioIrqProcess+0x408>
 801aa20:	20001b74 	.word	0x20001b74
 801aa24:	20001bd0 	.word	0x20001bd0
 801aa28:	20001b70 	.word	0x20001b70
 801aa2c:	20001be8 	.word	0x20001be8
 801aa30:	20001a70 	.word	0x20001a70
 801aa34:	20001b98 	.word	0x20001b98
 801aa38:	10624dd3 	.word	0x10624dd3
 801aa3c:	0801e854 	.word	0x0801e854
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801aa40:	4b54      	ldr	r3, [pc, #336]	; (801ab94 <RadioIrqProcess+0x424>)
 801aa42:	2201      	movs	r2, #1
 801aa44:	2100      	movs	r1, #0
 801aa46:	2002      	movs	r0, #2
 801aa48:	f002 ff90 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801aa4c:	4b52      	ldr	r3, [pc, #328]	; (801ab98 <RadioIrqProcess+0x428>)
 801aa4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	f000 8093 	beq.w	801ab7c <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801aa56:	4a51      	ldr	r2, [pc, #324]	; (801ab9c <RadioIrqProcess+0x42c>)
 801aa58:	4b4f      	ldr	r3, [pc, #316]	; (801ab98 <RadioIrqProcess+0x428>)
 801aa5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa5c:	0c1b      	lsrs	r3, r3, #16
 801aa5e:	b2db      	uxtb	r3, r3
 801aa60:	4619      	mov	r1, r3
 801aa62:	f640 1003 	movw	r0, #2307	; 0x903
 801aa66:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801aa68:	4a4c      	ldr	r2, [pc, #304]	; (801ab9c <RadioIrqProcess+0x42c>)
 801aa6a:	4b4b      	ldr	r3, [pc, #300]	; (801ab98 <RadioIrqProcess+0x428>)
 801aa6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa6e:	0a1b      	lsrs	r3, r3, #8
 801aa70:	b2db      	uxtb	r3, r3
 801aa72:	4619      	mov	r1, r3
 801aa74:	f640 1004 	movw	r0, #2308	; 0x904
 801aa78:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801aa7a:	4a48      	ldr	r2, [pc, #288]	; (801ab9c <RadioIrqProcess+0x42c>)
 801aa7c:	4b46      	ldr	r3, [pc, #280]	; (801ab98 <RadioIrqProcess+0x428>)
 801aa7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801aa80:	b2db      	uxtb	r3, r3
 801aa82:	4619      	mov	r1, r3
 801aa84:	f640 1005 	movw	r0, #2309	; 0x905
 801aa88:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801aa8a:	4c44      	ldr	r4, [pc, #272]	; (801ab9c <RadioIrqProcess+0x42c>)
 801aa8c:	4b44      	ldr	r3, [pc, #272]	; (801aba0 <RadioIrqProcess+0x430>)
 801aa8e:	f640 1002 	movw	r0, #2306	; 0x902
 801aa92:	4798      	blx	r3
 801aa94:	4603      	mov	r3, r0
 801aa96:	f043 0301 	orr.w	r3, r3, #1
 801aa9a:	b2db      	uxtb	r3, r3
 801aa9c:	4619      	mov	r1, r3
 801aa9e:	f640 1002 	movw	r0, #2306	; 0x902
 801aaa2:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801aaa4:	4b3c      	ldr	r3, [pc, #240]	; (801ab98 <RadioIrqProcess+0x428>)
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801aaaa:	2300      	movs	r3, #0
 801aaac:	2200      	movs	r2, #0
 801aaae:	f240 2162 	movw	r1, #610	; 0x262
 801aab2:	f240 2062 	movw	r0, #610	; 0x262
 801aab6:	f001 f8c1 	bl	801bc3c <SUBGRF_SetDioIrqParams>
        break;
 801aaba:	e05f      	b.n	801ab7c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801aabc:	4b39      	ldr	r3, [pc, #228]	; (801aba4 <RadioIrqProcess+0x434>)
 801aabe:	2201      	movs	r2, #1
 801aac0:	2100      	movs	r1, #0
 801aac2:	2002      	movs	r0, #2
 801aac4:	f002 ff52 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801aac8:	f001 ff55 	bl	801c976 <RFW_Is_Init>
 801aacc:	4603      	mov	r3, r0
 801aace:	2b01      	cmp	r3, #1
 801aad0:	d156      	bne.n	801ab80 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801aad2:	f001 ff86 	bl	801c9e2 <RFW_ReceivePayload>
        break;
 801aad6:	e053      	b.n	801ab80 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801aad8:	4b33      	ldr	r3, [pc, #204]	; (801aba8 <RadioIrqProcess+0x438>)
 801aada:	2201      	movs	r2, #1
 801aadc:	2100      	movs	r1, #0
 801aade:	2002      	movs	r0, #2
 801aae0:	f002 ff44 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801aae4:	e051      	b.n	801ab8a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801aae6:	4831      	ldr	r0, [pc, #196]	; (801abac <RadioIrqProcess+0x43c>)
 801aae8:	f002 fd36 	bl	801d558 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801aaec:	4b2a      	ldr	r3, [pc, #168]	; (801ab98 <RadioIrqProcess+0x428>)
 801aaee:	785b      	ldrb	r3, [r3, #1]
 801aaf0:	f083 0301 	eor.w	r3, r3, #1
 801aaf4:	b2db      	uxtb	r3, r3
 801aaf6:	2b00      	cmp	r3, #0
 801aaf8:	d002      	beq.n	801ab00 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801aafa:	2000      	movs	r0, #0
 801aafc:	f000 feca 	bl	801b894 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801ab00:	4b2b      	ldr	r3, [pc, #172]	; (801abb0 <RadioIrqProcess+0x440>)
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d03d      	beq.n	801ab84 <RadioIrqProcess+0x414>
 801ab08:	4b29      	ldr	r3, [pc, #164]	; (801abb0 <RadioIrqProcess+0x440>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	68db      	ldr	r3, [r3, #12]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d038      	beq.n	801ab84 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801ab12:	4b27      	ldr	r3, [pc, #156]	; (801abb0 <RadioIrqProcess+0x440>)
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	68db      	ldr	r3, [r3, #12]
 801ab18:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801ab1a:	4b26      	ldr	r3, [pc, #152]	; (801abb4 <RadioIrqProcess+0x444>)
 801ab1c:	2201      	movs	r2, #1
 801ab1e:	2100      	movs	r1, #0
 801ab20:	2002      	movs	r0, #2
 801ab22:	f002 ff23 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801ab26:	e02d      	b.n	801ab84 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801ab28:	4b23      	ldr	r3, [pc, #140]	; (801abb8 <RadioIrqProcess+0x448>)
 801ab2a:	2201      	movs	r2, #1
 801ab2c:	2100      	movs	r1, #0
 801ab2e:	2002      	movs	r0, #2
 801ab30:	f002 ff1c 	bl	801d96c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801ab34:	4b18      	ldr	r3, [pc, #96]	; (801ab98 <RadioIrqProcess+0x428>)
 801ab36:	785b      	ldrb	r3, [r3, #1]
 801ab38:	f083 0301 	eor.w	r3, r3, #1
 801ab3c:	b2db      	uxtb	r3, r3
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d002      	beq.n	801ab48 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801ab42:	2000      	movs	r0, #0
 801ab44:	f000 fea6 	bl	801b894 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801ab48:	4b19      	ldr	r3, [pc, #100]	; (801abb0 <RadioIrqProcess+0x440>)
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	2b00      	cmp	r3, #0
 801ab4e:	d01b      	beq.n	801ab88 <RadioIrqProcess+0x418>
 801ab50:	4b17      	ldr	r3, [pc, #92]	; (801abb0 <RadioIrqProcess+0x440>)
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	691b      	ldr	r3, [r3, #16]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d016      	beq.n	801ab88 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801ab5a:	4b15      	ldr	r3, [pc, #84]	; (801abb0 <RadioIrqProcess+0x440>)
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	691b      	ldr	r3, [r3, #16]
 801ab60:	4798      	blx	r3
        break;
 801ab62:	e011      	b.n	801ab88 <RadioIrqProcess+0x418>
        break;
 801ab64:	bf00      	nop
 801ab66:	e010      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab68:	bf00      	nop
 801ab6a:	e00e      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab6c:	bf00      	nop
 801ab6e:	e00c      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab70:	bf00      	nop
 801ab72:	e00a      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab74:	bf00      	nop
 801ab76:	e008      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab78:	bf00      	nop
 801ab7a:	e006      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab7c:	bf00      	nop
 801ab7e:	e004      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab80:	bf00      	nop
 801ab82:	e002      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab84:	bf00      	nop
 801ab86:	e000      	b.n	801ab8a <RadioIrqProcess+0x41a>
        break;
 801ab88:	bf00      	nop
    }
}
 801ab8a:	bf00      	nop
 801ab8c:	3708      	adds	r7, #8
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	bdb0      	pop	{r4, r5, r7, pc}
 801ab92:	bf00      	nop
 801ab94:	0801e868 	.word	0x0801e868
 801ab98:	20001b74 	.word	0x20001b74
 801ab9c:	0801a57f 	.word	0x0801a57f
 801aba0:	0801a5a3 	.word	0x0801a5a3
 801aba4:	0801e874 	.word	0x0801e874
 801aba8:	0801e880 	.word	0x0801e880
 801abac:	20001be8 	.word	0x20001be8
 801abb0:	20001b70 	.word	0x20001b70
 801abb4:	0801e88c 	.word	0x0801e88c
 801abb8:	0801e898 	.word	0x0801e898

0801abbc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801abbc:	b580      	push	{r7, lr}
 801abbe:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801abc0:	4b09      	ldr	r3, [pc, #36]	; (801abe8 <RadioTxPrbs+0x2c>)
 801abc2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801abc6:	2101      	movs	r1, #1
 801abc8:	4618      	mov	r0, r3
 801abca:	f001 fcdb 	bl	801c584 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801abce:	4b07      	ldr	r3, [pc, #28]	; (801abec <RadioTxPrbs+0x30>)
 801abd0:	212d      	movs	r1, #45	; 0x2d
 801abd2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801abd6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801abd8:	f000 ff1f 	bl	801ba1a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801abdc:	4804      	ldr	r0, [pc, #16]	; (801abf0 <RadioTxPrbs+0x34>)
 801abde:	f000 fe75 	bl	801b8cc <SUBGRF_SetTx>
}
 801abe2:	bf00      	nop
 801abe4:	bd80      	pop	{r7, pc}
 801abe6:	bf00      	nop
 801abe8:	20001b74 	.word	0x20001b74
 801abec:	0801a57f 	.word	0x0801a57f
 801abf0:	000fffff 	.word	0x000fffff

0801abf4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b084      	sub	sp, #16
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	4603      	mov	r3, r0
 801abfc:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801abfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ac02:	4618      	mov	r0, r3
 801ac04:	f001 fce6 	bl	801c5d4 <SUBGRF_SetRfTxPower>
 801ac08:	4603      	mov	r3, r0
 801ac0a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ac0c:	210e      	movs	r1, #14
 801ac0e:	f640 101f 	movw	r0, #2335	; 0x91f
 801ac12:	f001 fbc3 	bl	801c39c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801ac16:	7bfb      	ldrb	r3, [r7, #15]
 801ac18:	2101      	movs	r1, #1
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	f001 fcb2 	bl	801c584 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801ac20:	f000 fef2 	bl	801ba08 <SUBGRF_SetTxContinuousWave>
}
 801ac24:	bf00      	nop
 801ac26:	3710      	adds	r7, #16
 801ac28:	46bd      	mov	sp, r7
 801ac2a:	bd80      	pop	{r7, pc}

0801ac2c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801ac2c:	b480      	push	{r7}
 801ac2e:	b089      	sub	sp, #36	; 0x24
 801ac30:	af00      	add	r7, sp, #0
 801ac32:	60f8      	str	r0, [r7, #12]
 801ac34:	60b9      	str	r1, [r7, #8]
 801ac36:	4613      	mov	r3, r2
 801ac38:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801ac3e:	2300      	movs	r3, #0
 801ac40:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801ac42:	2300      	movs	r3, #0
 801ac44:	61bb      	str	r3, [r7, #24]
 801ac46:	e011      	b.n	801ac6c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801ac48:	69bb      	ldr	r3, [r7, #24]
 801ac4a:	68ba      	ldr	r2, [r7, #8]
 801ac4c:	4413      	add	r3, r2
 801ac4e:	781a      	ldrb	r2, [r3, #0]
 801ac50:	69bb      	ldr	r3, [r7, #24]
 801ac52:	68b9      	ldr	r1, [r7, #8]
 801ac54:	440b      	add	r3, r1
 801ac56:	43d2      	mvns	r2, r2
 801ac58:	b2d2      	uxtb	r2, r2
 801ac5a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801ac5c:	69bb      	ldr	r3, [r7, #24]
 801ac5e:	68fa      	ldr	r2, [r7, #12]
 801ac60:	4413      	add	r3, r2
 801ac62:	2200      	movs	r2, #0
 801ac64:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801ac66:	69bb      	ldr	r3, [r7, #24]
 801ac68:	3301      	adds	r3, #1
 801ac6a:	61bb      	str	r3, [r7, #24]
 801ac6c:	79fb      	ldrb	r3, [r7, #7]
 801ac6e:	69ba      	ldr	r2, [r7, #24]
 801ac70:	429a      	cmp	r2, r3
 801ac72:	dbe9      	blt.n	801ac48 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801ac74:	2300      	movs	r3, #0
 801ac76:	61bb      	str	r3, [r7, #24]
 801ac78:	e049      	b.n	801ad0e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801ac7a:	69bb      	ldr	r3, [r7, #24]
 801ac7c:	425a      	negs	r2, r3
 801ac7e:	f003 0307 	and.w	r3, r3, #7
 801ac82:	f002 0207 	and.w	r2, r2, #7
 801ac86:	bf58      	it	pl
 801ac88:	4253      	negpl	r3, r2
 801ac8a:	b2db      	uxtb	r3, r3
 801ac8c:	f1c3 0307 	rsb	r3, r3, #7
 801ac90:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801ac92:	69bb      	ldr	r3, [r7, #24]
 801ac94:	2b00      	cmp	r3, #0
 801ac96:	da00      	bge.n	801ac9a <payload_integration+0x6e>
 801ac98:	3307      	adds	r3, #7
 801ac9a:	10db      	asrs	r3, r3, #3
 801ac9c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801ac9e:	69bb      	ldr	r3, [r7, #24]
 801aca0:	3301      	adds	r3, #1
 801aca2:	425a      	negs	r2, r3
 801aca4:	f003 0307 	and.w	r3, r3, #7
 801aca8:	f002 0207 	and.w	r2, r2, #7
 801acac:	bf58      	it	pl
 801acae:	4253      	negpl	r3, r2
 801acb0:	b2db      	uxtb	r3, r3
 801acb2:	f1c3 0307 	rsb	r3, r3, #7
 801acb6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801acb8:	69bb      	ldr	r3, [r7, #24]
 801acba:	3301      	adds	r3, #1
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	da00      	bge.n	801acc2 <payload_integration+0x96>
 801acc0:	3307      	adds	r3, #7
 801acc2:	10db      	asrs	r3, r3, #3
 801acc4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801acc6:	7dbb      	ldrb	r3, [r7, #22]
 801acc8:	68ba      	ldr	r2, [r7, #8]
 801acca:	4413      	add	r3, r2
 801accc:	781b      	ldrb	r3, [r3, #0]
 801acce:	461a      	mov	r2, r3
 801acd0:	7dfb      	ldrb	r3, [r7, #23]
 801acd2:	fa42 f303 	asr.w	r3, r2, r3
 801acd6:	b2db      	uxtb	r3, r3
 801acd8:	f003 0301 	and.w	r3, r3, #1
 801acdc:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801acde:	7ffa      	ldrb	r2, [r7, #31]
 801ace0:	7cfb      	ldrb	r3, [r7, #19]
 801ace2:	4053      	eors	r3, r2
 801ace4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801ace6:	7d3b      	ldrb	r3, [r7, #20]
 801ace8:	68fa      	ldr	r2, [r7, #12]
 801acea:	4413      	add	r3, r2
 801acec:	781b      	ldrb	r3, [r3, #0]
 801acee:	b25a      	sxtb	r2, r3
 801acf0:	7ff9      	ldrb	r1, [r7, #31]
 801acf2:	7d7b      	ldrb	r3, [r7, #21]
 801acf4:	fa01 f303 	lsl.w	r3, r1, r3
 801acf8:	b25b      	sxtb	r3, r3
 801acfa:	4313      	orrs	r3, r2
 801acfc:	b259      	sxtb	r1, r3
 801acfe:	7d3b      	ldrb	r3, [r7, #20]
 801ad00:	68fa      	ldr	r2, [r7, #12]
 801ad02:	4413      	add	r3, r2
 801ad04:	b2ca      	uxtb	r2, r1
 801ad06:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801ad08:	69bb      	ldr	r3, [r7, #24]
 801ad0a:	3301      	adds	r3, #1
 801ad0c:	61bb      	str	r3, [r7, #24]
 801ad0e:	79fb      	ldrb	r3, [r7, #7]
 801ad10:	00db      	lsls	r3, r3, #3
 801ad12:	69ba      	ldr	r2, [r7, #24]
 801ad14:	429a      	cmp	r2, r3
 801ad16:	dbb0      	blt.n	801ac7a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801ad18:	7ffb      	ldrb	r3, [r7, #31]
 801ad1a:	01db      	lsls	r3, r3, #7
 801ad1c:	b25a      	sxtb	r2, r3
 801ad1e:	7ffb      	ldrb	r3, [r7, #31]
 801ad20:	019b      	lsls	r3, r3, #6
 801ad22:	b25b      	sxtb	r3, r3
 801ad24:	4313      	orrs	r3, r2
 801ad26:	b25b      	sxtb	r3, r3
 801ad28:	7ffa      	ldrb	r2, [r7, #31]
 801ad2a:	2a00      	cmp	r2, #0
 801ad2c:	d101      	bne.n	801ad32 <payload_integration+0x106>
 801ad2e:	2220      	movs	r2, #32
 801ad30:	e000      	b.n	801ad34 <payload_integration+0x108>
 801ad32:	2200      	movs	r2, #0
 801ad34:	4313      	orrs	r3, r2
 801ad36:	b259      	sxtb	r1, r3
 801ad38:	79fb      	ldrb	r3, [r7, #7]
 801ad3a:	68fa      	ldr	r2, [r7, #12]
 801ad3c:	4413      	add	r3, r2
 801ad3e:	b2ca      	uxtb	r2, r1
 801ad40:	701a      	strb	r2, [r3, #0]
}
 801ad42:	bf00      	nop
 801ad44:	3724      	adds	r7, #36	; 0x24
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bc80      	pop	{r7}
 801ad4a:	4770      	bx	lr

0801ad4c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801ad4c:	b580      	push	{r7, lr}
 801ad4e:	b08c      	sub	sp, #48	; 0x30
 801ad50:	af00      	add	r7, sp, #0
 801ad52:	60b9      	str	r1, [r7, #8]
 801ad54:	607a      	str	r2, [r7, #4]
 801ad56:	603b      	str	r3, [r7, #0]
 801ad58:	4603      	mov	r3, r0
 801ad5a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801ad60:	2300      	movs	r3, #0
 801ad62:	623b      	str	r3, [r7, #32]
 801ad64:	2300      	movs	r3, #0
 801ad66:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ad68:	f001 fdff 	bl	801c96a <RFW_DeInit>

    if( rxContinuous != 0 )
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d001      	beq.n	801ad76 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801ad72:	2300      	movs	r3, #0
 801ad74:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	bf14      	ite	ne
 801ad7c:	2301      	movne	r3, #1
 801ad7e:	2300      	moveq	r3, #0
 801ad80:	b2da      	uxtb	r2, r3
 801ad82:	4ba3      	ldr	r3, [pc, #652]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ad84:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801ad86:	7bfb      	ldrb	r3, [r7, #15]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d003      	beq.n	801ad94 <RadioSetRxGenericConfig+0x48>
 801ad8c:	2b01      	cmp	r3, #1
 801ad8e:	f000 80dc 	beq.w	801af4a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801ad92:	e194      	b.n	801b0be <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801ad94:	68bb      	ldr	r3, [r7, #8]
 801ad96:	689b      	ldr	r3, [r3, #8]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	d003      	beq.n	801ada4 <RadioSetRxGenericConfig+0x58>
 801ad9c:	68bb      	ldr	r3, [r7, #8]
 801ad9e:	68db      	ldr	r3, [r3, #12]
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d102      	bne.n	801adaa <RadioSetRxGenericConfig+0x5e>
            return -1;
 801ada4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ada8:	e18a      	b.n	801b0c0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801adaa:	68bb      	ldr	r3, [r7, #8]
 801adac:	7f9b      	ldrb	r3, [r3, #30]
 801adae:	2b08      	cmp	r3, #8
 801adb0:	d902      	bls.n	801adb8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801adb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801adb6:	e183      	b.n	801b0c0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801adb8:	68bb      	ldr	r3, [r7, #8]
 801adba:	6919      	ldr	r1, [r3, #16]
 801adbc:	68bb      	ldr	r3, [r7, #8]
 801adbe:	7f9b      	ldrb	r3, [r3, #30]
 801adc0:	b29a      	uxth	r2, r3
 801adc2:	f107 0320 	add.w	r3, r7, #32
 801adc6:	4618      	mov	r0, r3
 801adc8:	f001 fe8c 	bl	801cae4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801adcc:	68bb      	ldr	r3, [r7, #8]
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	2b00      	cmp	r3, #0
 801add2:	bf14      	ite	ne
 801add4:	2301      	movne	r3, #1
 801add6:	2300      	moveq	r3, #0
 801add8:	b2db      	uxtb	r3, r3
 801adda:	4618      	mov	r0, r3
 801addc:	f000 fe26 	bl	801ba2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ade0:	4b8b      	ldr	r3, [pc, #556]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ade2:	2200      	movs	r2, #0
 801ade4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801ade8:	68bb      	ldr	r3, [r7, #8]
 801adea:	689b      	ldr	r3, [r3, #8]
 801adec:	4a88      	ldr	r2, [pc, #544]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801adee:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801adf0:	68bb      	ldr	r3, [r7, #8]
 801adf2:	f893 2020 	ldrb.w	r2, [r3, #32]
 801adf6:	4b86      	ldr	r3, [pc, #536]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801adf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801adfc:	68bb      	ldr	r3, [r7, #8]
 801adfe:	685b      	ldr	r3, [r3, #4]
 801ae00:	4618      	mov	r0, r3
 801ae02:	f001 fce5 	bl	801c7d0 <SUBGRF_GetFskBandwidthRegValue>
 801ae06:	4603      	mov	r3, r0
 801ae08:	461a      	mov	r2, r3
 801ae0a:	4b81      	ldr	r3, [pc, #516]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ae10:	4b7f      	ldr	r3, [pc, #508]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae12:	2200      	movs	r2, #0
 801ae14:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801ae16:	68bb      	ldr	r3, [r7, #8]
 801ae18:	68db      	ldr	r3, [r3, #12]
 801ae1a:	b29b      	uxth	r3, r3
 801ae1c:	00db      	lsls	r3, r3, #3
 801ae1e:	b29a      	uxth	r2, r3
 801ae20:	4b7b      	ldr	r3, [pc, #492]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae22:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	7fda      	ldrb	r2, [r3, #31]
 801ae28:	4b79      	ldr	r3, [pc, #484]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae2a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	7f9b      	ldrb	r3, [r3, #30]
 801ae30:	00db      	lsls	r3, r3, #3
 801ae32:	b2da      	uxtb	r2, r3
 801ae34:	4b76      	ldr	r3, [pc, #472]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae36:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801ae38:	68bb      	ldr	r3, [r7, #8]
 801ae3a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801ae3e:	4b74      	ldr	r3, [pc, #464]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae40:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801ae42:	68bb      	ldr	r3, [r7, #8]
 801ae44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d105      	bne.n	801ae58 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801ae4c:	68bb      	ldr	r3, [r7, #8]
 801ae4e:	695b      	ldr	r3, [r3, #20]
 801ae50:	b2da      	uxtb	r2, r3
 801ae52:	4b6f      	ldr	r3, [pc, #444]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae54:	759a      	strb	r2, [r3, #22]
 801ae56:	e00b      	b.n	801ae70 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801ae58:	68bb      	ldr	r3, [r7, #8]
 801ae5a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ae5e:	2b02      	cmp	r3, #2
 801ae60:	d103      	bne.n	801ae6a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ae62:	4b6b      	ldr	r3, [pc, #428]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae64:	22ff      	movs	r2, #255	; 0xff
 801ae66:	759a      	strb	r2, [r3, #22]
 801ae68:	e002      	b.n	801ae70 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ae6a:	4b69      	ldr	r3, [pc, #420]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801ae6c:	22ff      	movs	r2, #255	; 0xff
 801ae6e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801ae70:	68bb      	ldr	r3, [r7, #8]
 801ae72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ae76:	2b02      	cmp	r3, #2
 801ae78:	d004      	beq.n	801ae84 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ae7a:	68bb      	ldr	r3, [r7, #8]
 801ae7c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801ae80:	2b02      	cmp	r3, #2
 801ae82:	d12d      	bne.n	801aee0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801ae84:	68bb      	ldr	r3, [r7, #8]
 801ae86:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ae8a:	2bf1      	cmp	r3, #241	; 0xf1
 801ae8c:	d00c      	beq.n	801aea8 <RadioSetRxGenericConfig+0x15c>
 801ae8e:	68bb      	ldr	r3, [r7, #8]
 801ae90:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ae94:	2bf2      	cmp	r3, #242	; 0xf2
 801ae96:	d007      	beq.n	801aea8 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ae98:	68bb      	ldr	r3, [r7, #8]
 801ae9a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ae9e:	2b01      	cmp	r3, #1
 801aea0:	d002      	beq.n	801aea8 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801aea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aea6:	e10b      	b.n	801b0c0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801aea8:	2300      	movs	r3, #0
 801aeaa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801aeac:	68bb      	ldr	r3, [r7, #8]
 801aeae:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801aeb0:	4b58      	ldr	r3, [pc, #352]	; (801b014 <RadioSetRxGenericConfig+0x2c8>)
 801aeb2:	6819      	ldr	r1, [r3, #0]
 801aeb4:	f107 0314 	add.w	r3, r7, #20
 801aeb8:	4a57      	ldr	r2, [pc, #348]	; (801b018 <RadioSetRxGenericConfig+0x2cc>)
 801aeba:	4618      	mov	r0, r3
 801aebc:	f001 fd48 	bl	801c950 <RFW_Init>
 801aec0:	4603      	mov	r3, r0
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d002      	beq.n	801aecc <RadioSetRxGenericConfig+0x180>
                return -1;
 801aec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aeca:	e0f9      	b.n	801b0c0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801aecc:	4b50      	ldr	r3, [pc, #320]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801aece:	2200      	movs	r2, #0
 801aed0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801aed2:	4b4f      	ldr	r3, [pc, #316]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801aed4:	2201      	movs	r2, #1
 801aed6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801aed8:	4b4d      	ldr	r3, [pc, #308]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801aeda:	2200      	movs	r2, #0
 801aedc:	755a      	strb	r2, [r3, #21]
        {
 801aede:	e00e      	b.n	801aefe <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801aee0:	68bb      	ldr	r3, [r7, #8]
 801aee2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801aee6:	4b4a      	ldr	r3, [pc, #296]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801aee8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801aeea:	68bb      	ldr	r3, [r7, #8]
 801aeec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801aef0:	4b47      	ldr	r3, [pc, #284]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801aef2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801aef4:	68bb      	ldr	r3, [r7, #8]
 801aef6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801aefa:	4b45      	ldr	r3, [pc, #276]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801aefc:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801aefe:	f7ff fa3c 	bl	801a37a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801af02:	2000      	movs	r0, #0
 801af04:	f7fe fbd0 	bl	80196a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801af08:	4844      	ldr	r0, [pc, #272]	; (801b01c <RadioSetRxGenericConfig+0x2d0>)
 801af0a:	f001 f82d 	bl	801bf68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801af0e:	4844      	ldr	r0, [pc, #272]	; (801b020 <RadioSetRxGenericConfig+0x2d4>)
 801af10:	f001 f8fc 	bl	801c10c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801af14:	f107 0320 	add.w	r3, r7, #32
 801af18:	4618      	mov	r0, r3
 801af1a:	f000 fbc0 	bl	801b69e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801af1e:	68bb      	ldr	r3, [r7, #8]
 801af20:	8b9b      	ldrh	r3, [r3, #28]
 801af22:	4618      	mov	r0, r3
 801af24:	f000 fc0a 	bl	801b73c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801af28:	68bb      	ldr	r3, [r7, #8]
 801af2a:	8b1b      	ldrh	r3, [r3, #24]
 801af2c:	4618      	mov	r0, r3
 801af2e:	f000 fbe5 	bl	801b6fc <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801af32:	683b      	ldr	r3, [r7, #0]
 801af34:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801af38:	fb03 f202 	mul.w	r2, r3, r2
 801af3c:	68bb      	ldr	r3, [r7, #8]
 801af3e:	689b      	ldr	r3, [r3, #8]
 801af40:	fbb2 f3f3 	udiv	r3, r2, r3
 801af44:	4a32      	ldr	r2, [pc, #200]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801af46:	6093      	str	r3, [r2, #8]
        break;
 801af48:	e0b9      	b.n	801b0be <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801af4a:	68bb      	ldr	r3, [r7, #8]
 801af4c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d102      	bne.n	801af58 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801af52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801af56:	e0b3      	b.n	801b0c0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801af58:	68bb      	ldr	r3, [r7, #8]
 801af5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801af5e:	2b01      	cmp	r3, #1
 801af60:	d104      	bne.n	801af6c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	695b      	ldr	r3, [r3, #20]
 801af66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801af6a:	e002      	b.n	801af72 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801af6c:	23ff      	movs	r3, #255	; 0xff
 801af6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801af72:	68bb      	ldr	r3, [r7, #8]
 801af74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af76:	2b00      	cmp	r3, #0
 801af78:	bf14      	ite	ne
 801af7a:	2301      	movne	r3, #1
 801af7c:	2300      	moveq	r3, #0
 801af7e:	b2db      	uxtb	r3, r3
 801af80:	4618      	mov	r0, r3
 801af82:	f000 fd53 	bl	801ba2c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801af86:	683b      	ldr	r3, [r7, #0]
 801af88:	b2db      	uxtb	r3, r3
 801af8a:	4618      	mov	r0, r3
 801af8c:	f000 fd5d 	bl	801ba4a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801af90:	4b1f      	ldr	r3, [pc, #124]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801af92:	2201      	movs	r2, #1
 801af94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801af98:	68bb      	ldr	r3, [r7, #8]
 801af9a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801af9e:	4b1c      	ldr	r3, [pc, #112]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801afa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801afa4:	68bb      	ldr	r3, [r7, #8]
 801afa6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801afaa:	4b19      	ldr	r3, [pc, #100]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801afac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801afb6:	4b16      	ldr	r3, [pc, #88]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801afb8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801afbc:	68bb      	ldr	r3, [r7, #8]
 801afbe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801afc2:	2b02      	cmp	r3, #2
 801afc4:	d010      	beq.n	801afe8 <RadioSetRxGenericConfig+0x29c>
 801afc6:	2b02      	cmp	r3, #2
 801afc8:	dc2c      	bgt.n	801b024 <RadioSetRxGenericConfig+0x2d8>
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d002      	beq.n	801afd4 <RadioSetRxGenericConfig+0x288>
 801afce:	2b01      	cmp	r3, #1
 801afd0:	d005      	beq.n	801afde <RadioSetRxGenericConfig+0x292>
            break;
 801afd2:	e027      	b.n	801b024 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801afd4:	4b0e      	ldr	r3, [pc, #56]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801afd6:	2200      	movs	r2, #0
 801afd8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801afdc:	e023      	b.n	801b026 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801afde:	4b0c      	ldr	r3, [pc, #48]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801afe0:	2201      	movs	r2, #1
 801afe2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801afe6:	e01e      	b.n	801b026 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801afe8:	68bb      	ldr	r3, [r7, #8]
 801afea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801afee:	2b0b      	cmp	r3, #11
 801aff0:	d004      	beq.n	801affc <RadioSetRxGenericConfig+0x2b0>
 801aff2:	68bb      	ldr	r3, [r7, #8]
 801aff4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aff8:	2b0c      	cmp	r3, #12
 801affa:	d104      	bne.n	801b006 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801affc:	4b04      	ldr	r3, [pc, #16]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801affe:	2201      	movs	r2, #1
 801b000:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b004:	e00f      	b.n	801b026 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b006:	4b02      	ldr	r3, [pc, #8]	; (801b010 <RadioSetRxGenericConfig+0x2c4>)
 801b008:	2200      	movs	r2, #0
 801b00a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b00e:	e00a      	b.n	801b026 <RadioSetRxGenericConfig+0x2da>
 801b010:	20001b74 	.word	0x20001b74
 801b014:	20001b70 	.word	0x20001b70
 801b018:	20001be8 	.word	0x20001be8
 801b01c:	20001bac 	.word	0x20001bac
 801b020:	20001b82 	.word	0x20001b82
            break;
 801b024:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b026:	4b28      	ldr	r3, [pc, #160]	; (801b0c8 <RadioSetRxGenericConfig+0x37c>)
 801b028:	2201      	movs	r2, #1
 801b02a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b02c:	68bb      	ldr	r3, [r7, #8]
 801b02e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b030:	4b25      	ldr	r3, [pc, #148]	; (801b0c8 <RadioSetRxGenericConfig+0x37c>)
 801b032:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b034:	68bb      	ldr	r3, [r7, #8]
 801b036:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b03a:	4b23      	ldr	r3, [pc, #140]	; (801b0c8 <RadioSetRxGenericConfig+0x37c>)
 801b03c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b03e:	4a22      	ldr	r2, [pc, #136]	; (801b0c8 <RadioSetRxGenericConfig+0x37c>)
 801b040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b044:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b046:	68bb      	ldr	r3, [r7, #8]
 801b048:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b04c:	4b1e      	ldr	r3, [pc, #120]	; (801b0c8 <RadioSetRxGenericConfig+0x37c>)
 801b04e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b052:	68bb      	ldr	r3, [r7, #8]
 801b054:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b058:	4b1b      	ldr	r3, [pc, #108]	; (801b0c8 <RadioSetRxGenericConfig+0x37c>)
 801b05a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b05e:	f7ff f98c 	bl	801a37a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b062:	2001      	movs	r0, #1
 801b064:	f7fe fb20 	bl	80196a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b068:	4818      	ldr	r0, [pc, #96]	; (801b0cc <RadioSetRxGenericConfig+0x380>)
 801b06a:	f000 ff7d 	bl	801bf68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b06e:	4818      	ldr	r0, [pc, #96]	; (801b0d0 <RadioSetRxGenericConfig+0x384>)
 801b070:	f001 f84c 	bl	801c10c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b074:	4b14      	ldr	r3, [pc, #80]	; (801b0c8 <RadioSetRxGenericConfig+0x37c>)
 801b076:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b07a:	2b01      	cmp	r3, #1
 801b07c:	d10d      	bne.n	801b09a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b07e:	f240 7036 	movw	r0, #1846	; 0x736
 801b082:	f001 f99f 	bl	801c3c4 <SUBGRF_ReadRegister>
 801b086:	4603      	mov	r3, r0
 801b088:	f023 0304 	bic.w	r3, r3, #4
 801b08c:	b2db      	uxtb	r3, r3
 801b08e:	4619      	mov	r1, r3
 801b090:	f240 7036 	movw	r0, #1846	; 0x736
 801b094:	f001 f982 	bl	801c39c <SUBGRF_WriteRegister>
 801b098:	e00c      	b.n	801b0b4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801b09a:	f240 7036 	movw	r0, #1846	; 0x736
 801b09e:	f001 f991 	bl	801c3c4 <SUBGRF_ReadRegister>
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	f043 0304 	orr.w	r3, r3, #4
 801b0a8:	b2db      	uxtb	r3, r3
 801b0aa:	4619      	mov	r1, r3
 801b0ac:	f240 7036 	movw	r0, #1846	; 0x736
 801b0b0:	f001 f974 	bl	801c39c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801b0b4:	4b04      	ldr	r3, [pc, #16]	; (801b0c8 <RadioSetRxGenericConfig+0x37c>)
 801b0b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b0ba:	609a      	str	r2, [r3, #8]
        break;
 801b0bc:	bf00      	nop
    }
    return status;
 801b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	3730      	adds	r7, #48	; 0x30
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	20001b74 	.word	0x20001b74
 801b0cc:	20001bac 	.word	0x20001bac
 801b0d0:	20001b82 	.word	0x20001b82

0801b0d4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801b0d4:	b580      	push	{r7, lr}
 801b0d6:	b08e      	sub	sp, #56	; 0x38
 801b0d8:	af00      	add	r7, sp, #0
 801b0da:	60b9      	str	r1, [r7, #8]
 801b0dc:	607b      	str	r3, [r7, #4]
 801b0de:	4603      	mov	r3, r0
 801b0e0:	73fb      	strb	r3, [r7, #15]
 801b0e2:	4613      	mov	r3, r2
 801b0e4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b0ee:	f001 fc3c 	bl	801c96a <RFW_DeInit>
    switch( modem )
 801b0f2:	7bfb      	ldrb	r3, [r7, #15]
 801b0f4:	2b03      	cmp	r3, #3
 801b0f6:	f200 8204 	bhi.w	801b502 <RadioSetTxGenericConfig+0x42e>
 801b0fa:	a201      	add	r2, pc, #4	; (adr r2, 801b100 <RadioSetTxGenericConfig+0x2c>)
 801b0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b100:	0801b285 	.word	0x0801b285
 801b104:	0801b3cd 	.word	0x0801b3cd
 801b108:	0801b4c5 	.word	0x0801b4c5
 801b10c:	0801b111 	.word	0x0801b111
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801b110:	68bb      	ldr	r3, [r7, #8]
 801b112:	7c9b      	ldrb	r3, [r3, #18]
 801b114:	2b08      	cmp	r3, #8
 801b116:	d902      	bls.n	801b11e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801b118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b11c:	e206      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801b11e:	68bb      	ldr	r3, [r7, #8]
 801b120:	6899      	ldr	r1, [r3, #8]
 801b122:	68bb      	ldr	r3, [r7, #8]
 801b124:	7c9b      	ldrb	r3, [r3, #18]
 801b126:	b29a      	uxth	r2, r3
 801b128:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b12c:	4618      	mov	r0, r3
 801b12e:	f001 fcd9 	bl	801cae4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801b132:	68bb      	ldr	r3, [r7, #8]
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d102      	bne.n	801b140 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801b13a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b13e:	e1f5      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	f242 7210 	movw	r2, #10000	; 0x2710
 801b148:	4293      	cmp	r3, r2
 801b14a:	d813      	bhi.n	801b174 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801b14c:	2302      	movs	r3, #2
 801b14e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801b152:	4b99      	ldr	r3, [pc, #612]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b154:	2203      	movs	r2, #3
 801b156:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801b158:	4b97      	ldr	r3, [pc, #604]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b15a:	2203      	movs	r2, #3
 801b15c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	4a94      	ldr	r2, [pc, #592]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b166:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b168:	68bb      	ldr	r3, [r7, #8]
 801b16a:	7cda      	ldrb	r2, [r3, #19]
 801b16c:	4b92      	ldr	r3, [pc, #584]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b16e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801b172:	e017      	b.n	801b1a4 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801b174:	2300      	movs	r3, #0
 801b176:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b17a:	4b8f      	ldr	r3, [pc, #572]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b17c:	2200      	movs	r2, #0
 801b17e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b180:	4b8d      	ldr	r3, [pc, #564]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b182:	2200      	movs	r2, #0
 801b184:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	4a8a      	ldr	r2, [pc, #552]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b18e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801b190:	68bb      	ldr	r3, [r7, #8]
 801b192:	7cda      	ldrb	r2, [r3, #19]
 801b194:	4b88      	ldr	r3, [pc, #544]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801b19a:	68bb      	ldr	r3, [r7, #8]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	089b      	lsrs	r3, r3, #2
 801b1a0:	4a85      	ldr	r2, [pc, #532]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b1a2:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801b1a4:	68bb      	ldr	r3, [r7, #8]
 801b1a6:	685b      	ldr	r3, [r3, #4]
 801b1a8:	b29b      	uxth	r3, r3
 801b1aa:	00db      	lsls	r3, r3, #3
 801b1ac:	b29a      	uxth	r2, r3
 801b1ae:	4b82      	ldr	r3, [pc, #520]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b1b0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b1b2:	4b81      	ldr	r3, [pc, #516]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b1b4:	2204      	movs	r2, #4
 801b1b6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801b1b8:	68bb      	ldr	r3, [r7, #8]
 801b1ba:	7c9b      	ldrb	r3, [r3, #18]
 801b1bc:	00db      	lsls	r3, r3, #3
 801b1be:	b2da      	uxtb	r2, r3
 801b1c0:	4b7d      	ldr	r3, [pc, #500]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b1c2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b1c4:	4b7c      	ldr	r3, [pc, #496]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b1c6:	2200      	movs	r2, #0
 801b1c8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b1ca:	68bb      	ldr	r3, [r7, #8]
 801b1cc:	7d9b      	ldrb	r3, [r3, #22]
 801b1ce:	2b02      	cmp	r3, #2
 801b1d0:	d003      	beq.n	801b1da <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b1d2:	68bb      	ldr	r3, [r7, #8]
 801b1d4:	7d1b      	ldrb	r3, [r3, #20]
 801b1d6:	2b02      	cmp	r3, #2
 801b1d8:	d12b      	bne.n	801b232 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b1da:	68bb      	ldr	r3, [r7, #8]
 801b1dc:	7d5b      	ldrb	r3, [r3, #21]
 801b1de:	2bf1      	cmp	r3, #241	; 0xf1
 801b1e0:	d00a      	beq.n	801b1f8 <RadioSetTxGenericConfig+0x124>
 801b1e2:	68bb      	ldr	r3, [r7, #8]
 801b1e4:	7d5b      	ldrb	r3, [r3, #21]
 801b1e6:	2bf2      	cmp	r3, #242	; 0xf2
 801b1e8:	d006      	beq.n	801b1f8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b1ea:	68bb      	ldr	r3, [r7, #8]
 801b1ec:	7d5b      	ldrb	r3, [r3, #21]
 801b1ee:	2b01      	cmp	r3, #1
 801b1f0:	d002      	beq.n	801b1f8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801b1f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b1f6:	e199      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801b1f8:	68bb      	ldr	r3, [r7, #8]
 801b1fa:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801b1fc:	2301      	movs	r3, #1
 801b1fe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b202:	4b6e      	ldr	r3, [pc, #440]	; (801b3bc <RadioSetTxGenericConfig+0x2e8>)
 801b204:	6819      	ldr	r1, [r3, #0]
 801b206:	f107 0320 	add.w	r3, r7, #32
 801b20a:	4a6d      	ldr	r2, [pc, #436]	; (801b3c0 <RadioSetTxGenericConfig+0x2ec>)
 801b20c:	4618      	mov	r0, r3
 801b20e:	f001 fb9f 	bl	801c950 <RFW_Init>
 801b212:	4603      	mov	r3, r0
 801b214:	2b00      	cmp	r3, #0
 801b216:	d002      	beq.n	801b21e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801b218:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b21c:	e186      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b21e:	4b66      	ldr	r3, [pc, #408]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b220:	2200      	movs	r2, #0
 801b222:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b224:	4b64      	ldr	r3, [pc, #400]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b226:	2201      	movs	r2, #1
 801b228:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b22a:	4b63      	ldr	r3, [pc, #396]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b22c:	2200      	movs	r2, #0
 801b22e:	755a      	strb	r2, [r3, #21]
        {
 801b230:	e00b      	b.n	801b24a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801b232:	68bb      	ldr	r3, [r7, #8]
 801b234:	7d5a      	ldrb	r2, [r3, #21]
 801b236:	4b60      	ldr	r3, [pc, #384]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b238:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	7d9a      	ldrb	r2, [r3, #22]
 801b23e:	4b5e      	ldr	r3, [pc, #376]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b240:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801b242:	68bb      	ldr	r3, [r7, #8]
 801b244:	7d1a      	ldrb	r2, [r3, #20]
 801b246:	4b5c      	ldr	r3, [pc, #368]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b248:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b24a:	f7ff f896 	bl	801a37a <RadioStandby>
        RadioSetModem( radio_modem );
 801b24e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801b252:	4618      	mov	r0, r3
 801b254:	f7fe fa28 	bl	80196a8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b258:	485a      	ldr	r0, [pc, #360]	; (801b3c4 <RadioSetTxGenericConfig+0x2f0>)
 801b25a:	f000 fe85 	bl	801bf68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b25e:	485a      	ldr	r0, [pc, #360]	; (801b3c8 <RadioSetTxGenericConfig+0x2f4>)
 801b260:	f000 ff54 	bl	801c10c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b268:	4618      	mov	r0, r3
 801b26a:	f000 fa18 	bl	801b69e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801b26e:	68bb      	ldr	r3, [r7, #8]
 801b270:	8a1b      	ldrh	r3, [r3, #16]
 801b272:	4618      	mov	r0, r3
 801b274:	f000 fa62 	bl	801b73c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801b278:	68bb      	ldr	r3, [r7, #8]
 801b27a:	899b      	ldrh	r3, [r3, #12]
 801b27c:	4618      	mov	r0, r3
 801b27e:	f000 fa3d 	bl	801b6fc <SUBGRF_SetCrcPolynomial>
        break;
 801b282:	e13f      	b.n	801b504 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801b284:	68bb      	ldr	r3, [r7, #8]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d102      	bne.n	801b292 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801b28c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b290:	e14c      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801b292:	68bb      	ldr	r3, [r7, #8]
 801b294:	7c9b      	ldrb	r3, [r3, #18]
 801b296:	2b08      	cmp	r3, #8
 801b298:	d902      	bls.n	801b2a0 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801b29a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b29e:	e145      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b2a0:	68bb      	ldr	r3, [r7, #8]
 801b2a2:	6899      	ldr	r1, [r3, #8]
 801b2a4:	68bb      	ldr	r3, [r7, #8]
 801b2a6:	7c9b      	ldrb	r3, [r3, #18]
 801b2a8:	b29a      	uxth	r2, r3
 801b2aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	f001 fc18 	bl	801cae4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b2b4:	4b40      	ldr	r3, [pc, #256]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	4a3d      	ldr	r2, [pc, #244]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2c2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b2c4:	68bb      	ldr	r3, [r7, #8]
 801b2c6:	7cda      	ldrb	r2, [r3, #19]
 801b2c8:	4b3b      	ldr	r3, [pc, #236]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801b2ce:	68bb      	ldr	r3, [r7, #8]
 801b2d0:	699b      	ldr	r3, [r3, #24]
 801b2d2:	4a39      	ldr	r2, [pc, #228]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2d4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b2d6:	4b38      	ldr	r3, [pc, #224]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2d8:	2200      	movs	r2, #0
 801b2da:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801b2dc:	68bb      	ldr	r3, [r7, #8]
 801b2de:	685b      	ldr	r3, [r3, #4]
 801b2e0:	b29b      	uxth	r3, r3
 801b2e2:	00db      	lsls	r3, r3, #3
 801b2e4:	b29a      	uxth	r2, r3
 801b2e6:	4b34      	ldr	r3, [pc, #208]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2e8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801b2ea:	4b33      	ldr	r3, [pc, #204]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2ec:	2204      	movs	r2, #4
 801b2ee:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b2f0:	68bb      	ldr	r3, [r7, #8]
 801b2f2:	7c9b      	ldrb	r3, [r3, #18]
 801b2f4:	00db      	lsls	r3, r3, #3
 801b2f6:	b2da      	uxtb	r2, r3
 801b2f8:	4b2f      	ldr	r3, [pc, #188]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2fa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801b2fc:	4b2e      	ldr	r3, [pc, #184]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b2fe:	2200      	movs	r2, #0
 801b300:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b302:	68bb      	ldr	r3, [r7, #8]
 801b304:	7d9b      	ldrb	r3, [r3, #22]
 801b306:	2b02      	cmp	r3, #2
 801b308:	d003      	beq.n	801b312 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b30a:	68bb      	ldr	r3, [r7, #8]
 801b30c:	7d1b      	ldrb	r3, [r3, #20]
 801b30e:	2b02      	cmp	r3, #2
 801b310:	d12a      	bne.n	801b368 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b312:	68bb      	ldr	r3, [r7, #8]
 801b314:	7d5b      	ldrb	r3, [r3, #21]
 801b316:	2bf1      	cmp	r3, #241	; 0xf1
 801b318:	d00a      	beq.n	801b330 <RadioSetTxGenericConfig+0x25c>
 801b31a:	68bb      	ldr	r3, [r7, #8]
 801b31c:	7d5b      	ldrb	r3, [r3, #21]
 801b31e:	2bf2      	cmp	r3, #242	; 0xf2
 801b320:	d006      	beq.n	801b330 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b322:	68bb      	ldr	r3, [r7, #8]
 801b324:	7d5b      	ldrb	r3, [r3, #21]
 801b326:	2b01      	cmp	r3, #1
 801b328:	d002      	beq.n	801b330 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801b32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b32e:	e0fd      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801b330:	2301      	movs	r3, #1
 801b332:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801b334:	68bb      	ldr	r3, [r7, #8]
 801b336:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801b338:	4b20      	ldr	r3, [pc, #128]	; (801b3bc <RadioSetTxGenericConfig+0x2e8>)
 801b33a:	6819      	ldr	r1, [r3, #0]
 801b33c:	f107 0314 	add.w	r3, r7, #20
 801b340:	4a1f      	ldr	r2, [pc, #124]	; (801b3c0 <RadioSetTxGenericConfig+0x2ec>)
 801b342:	4618      	mov	r0, r3
 801b344:	f001 fb04 	bl	801c950 <RFW_Init>
 801b348:	4603      	mov	r3, r0
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d002      	beq.n	801b354 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801b34e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b352:	e0eb      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b354:	4b18      	ldr	r3, [pc, #96]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b356:	2200      	movs	r2, #0
 801b358:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b35a:	4b17      	ldr	r3, [pc, #92]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b35c:	2201      	movs	r2, #1
 801b35e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b360:	4b15      	ldr	r3, [pc, #84]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b362:	2200      	movs	r2, #0
 801b364:	755a      	strb	r2, [r3, #21]
        {
 801b366:	e00b      	b.n	801b380 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b368:	68bb      	ldr	r3, [r7, #8]
 801b36a:	7d5a      	ldrb	r2, [r3, #21]
 801b36c:	4b12      	ldr	r3, [pc, #72]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b36e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b370:	68bb      	ldr	r3, [r7, #8]
 801b372:	7d9a      	ldrb	r2, [r3, #22]
 801b374:	4b10      	ldr	r3, [pc, #64]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b376:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801b378:	68bb      	ldr	r3, [r7, #8]
 801b37a:	7d1a      	ldrb	r2, [r3, #20]
 801b37c:	4b0e      	ldr	r3, [pc, #56]	; (801b3b8 <RadioSetTxGenericConfig+0x2e4>)
 801b37e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801b380:	f7fe fffb 	bl	801a37a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b384:	2000      	movs	r0, #0
 801b386:	f7fe f98f 	bl	80196a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b38a:	480e      	ldr	r0, [pc, #56]	; (801b3c4 <RadioSetTxGenericConfig+0x2f0>)
 801b38c:	f000 fdec 	bl	801bf68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b390:	480d      	ldr	r0, [pc, #52]	; (801b3c8 <RadioSetTxGenericConfig+0x2f4>)
 801b392:	f000 febb 	bl	801c10c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b39a:	4618      	mov	r0, r3
 801b39c:	f000 f97f 	bl	801b69e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b3a0:	68bb      	ldr	r3, [r7, #8]
 801b3a2:	8a1b      	ldrh	r3, [r3, #16]
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	f000 f9c9 	bl	801b73c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b3aa:	68bb      	ldr	r3, [r7, #8]
 801b3ac:	899b      	ldrh	r3, [r3, #12]
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	f000 f9a4 	bl	801b6fc <SUBGRF_SetCrcPolynomial>
        break;
 801b3b4:	e0a6      	b.n	801b504 <RadioSetTxGenericConfig+0x430>
 801b3b6:	bf00      	nop
 801b3b8:	20001b74 	.word	0x20001b74
 801b3bc:	20001b70 	.word	0x20001b70
 801b3c0:	20001bd0 	.word	0x20001bd0
 801b3c4:	20001bac 	.word	0x20001bac
 801b3c8:	20001b82 	.word	0x20001b82
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b3cc:	4b59      	ldr	r3, [pc, #356]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b3ce:	2201      	movs	r2, #1
 801b3d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b3d4:	68bb      	ldr	r3, [r7, #8]
 801b3d6:	781a      	ldrb	r2, [r3, #0]
 801b3d8:	4b56      	ldr	r3, [pc, #344]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b3da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b3de:	68bb      	ldr	r3, [r7, #8]
 801b3e0:	785a      	ldrb	r2, [r3, #1]
 801b3e2:	4b54      	ldr	r3, [pc, #336]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b3e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b3e8:	68bb      	ldr	r3, [r7, #8]
 801b3ea:	789a      	ldrb	r2, [r3, #2]
 801b3ec:	4b51      	ldr	r3, [pc, #324]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b3ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	78db      	ldrb	r3, [r3, #3]
 801b3f6:	2b02      	cmp	r3, #2
 801b3f8:	d010      	beq.n	801b41c <RadioSetTxGenericConfig+0x348>
 801b3fa:	2b02      	cmp	r3, #2
 801b3fc:	dc20      	bgt.n	801b440 <RadioSetTxGenericConfig+0x36c>
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d002      	beq.n	801b408 <RadioSetTxGenericConfig+0x334>
 801b402:	2b01      	cmp	r3, #1
 801b404:	d005      	beq.n	801b412 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801b406:	e01b      	b.n	801b440 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b408:	4b4a      	ldr	r3, [pc, #296]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b40a:	2200      	movs	r2, #0
 801b40c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b410:	e017      	b.n	801b442 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b412:	4b48      	ldr	r3, [pc, #288]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b414:	2201      	movs	r2, #1
 801b416:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b41a:	e012      	b.n	801b442 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b41c:	68bb      	ldr	r3, [r7, #8]
 801b41e:	781b      	ldrb	r3, [r3, #0]
 801b420:	2b0b      	cmp	r3, #11
 801b422:	d003      	beq.n	801b42c <RadioSetTxGenericConfig+0x358>
 801b424:	68bb      	ldr	r3, [r7, #8]
 801b426:	781b      	ldrb	r3, [r3, #0]
 801b428:	2b0c      	cmp	r3, #12
 801b42a:	d104      	bne.n	801b436 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b42c:	4b41      	ldr	r3, [pc, #260]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b42e:	2201      	movs	r2, #1
 801b430:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b434:	e005      	b.n	801b442 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b436:	4b3f      	ldr	r3, [pc, #252]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b438:	2200      	movs	r2, #0
 801b43a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b43e:	e000      	b.n	801b442 <RadioSetTxGenericConfig+0x36e>
            break;
 801b440:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b442:	4b3c      	ldr	r3, [pc, #240]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b444:	2201      	movs	r2, #1
 801b446:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b448:	68bb      	ldr	r3, [r7, #8]
 801b44a:	889a      	ldrh	r2, [r3, #4]
 801b44c:	4b39      	ldr	r3, [pc, #228]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b44e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b450:	68bb      	ldr	r3, [r7, #8]
 801b452:	799a      	ldrb	r2, [r3, #6]
 801b454:	4b37      	ldr	r3, [pc, #220]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b456:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b458:	68bb      	ldr	r3, [r7, #8]
 801b45a:	79da      	ldrb	r2, [r3, #7]
 801b45c:	4b35      	ldr	r3, [pc, #212]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b45e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b462:	68bb      	ldr	r3, [r7, #8]
 801b464:	7a1a      	ldrb	r2, [r3, #8]
 801b466:	4b33      	ldr	r3, [pc, #204]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b468:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801b46c:	f7fe ff85 	bl	801a37a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b470:	2001      	movs	r0, #1
 801b472:	f7fe f919 	bl	80196a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b476:	4830      	ldr	r0, [pc, #192]	; (801b538 <RadioSetTxGenericConfig+0x464>)
 801b478:	f000 fd76 	bl	801bf68 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b47c:	482f      	ldr	r0, [pc, #188]	; (801b53c <RadioSetTxGenericConfig+0x468>)
 801b47e:	f000 fe45 	bl	801c10c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801b482:	4b2c      	ldr	r3, [pc, #176]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b488:	2b06      	cmp	r3, #6
 801b48a:	d10d      	bne.n	801b4a8 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801b48c:	f640 0089 	movw	r0, #2185	; 0x889
 801b490:	f000 ff98 	bl	801c3c4 <SUBGRF_ReadRegister>
 801b494:	4603      	mov	r3, r0
 801b496:	f023 0304 	bic.w	r3, r3, #4
 801b49a:	b2db      	uxtb	r3, r3
 801b49c:	4619      	mov	r1, r3
 801b49e:	f640 0089 	movw	r0, #2185	; 0x889
 801b4a2:	f000 ff7b 	bl	801c39c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801b4a6:	e02d      	b.n	801b504 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801b4a8:	f640 0089 	movw	r0, #2185	; 0x889
 801b4ac:	f000 ff8a 	bl	801c3c4 <SUBGRF_ReadRegister>
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	f043 0304 	orr.w	r3, r3, #4
 801b4b6:	b2db      	uxtb	r3, r3
 801b4b8:	4619      	mov	r1, r3
 801b4ba:	f640 0089 	movw	r0, #2185	; 0x889
 801b4be:	f000 ff6d 	bl	801c39c <SUBGRF_WriteRegister>
        break;
 801b4c2:	e01f      	b.n	801b504 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801b4c4:	68bb      	ldr	r3, [r7, #8]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d004      	beq.n	801b4d6 <RadioSetTxGenericConfig+0x402>
 801b4cc:	68bb      	ldr	r3, [r7, #8]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b4d4:	d902      	bls.n	801b4dc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801b4d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b4da:	e027      	b.n	801b52c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801b4dc:	2003      	movs	r0, #3
 801b4de:	f7fe f8e3 	bl	80196a8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801b4e2:	4b14      	ldr	r3, [pc, #80]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b4e4:	2202      	movs	r2, #2
 801b4e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801b4ea:	68bb      	ldr	r3, [r7, #8]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	4a11      	ldr	r2, [pc, #68]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b4f0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801b4f2:	4b10      	ldr	r3, [pc, #64]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b4f4:	2216      	movs	r2, #22
 801b4f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b4fa:	480f      	ldr	r0, [pc, #60]	; (801b538 <RadioSetTxGenericConfig+0x464>)
 801b4fc:	f000 fd34 	bl	801bf68 <SUBGRF_SetModulationParams>
        break;
 801b500:	e000      	b.n	801b504 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801b502:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801b504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801b508:	4618      	mov	r0, r3
 801b50a:	f001 f863 	bl	801c5d4 <SUBGRF_SetRfTxPower>
 801b50e:	4603      	mov	r3, r0
 801b510:	461a      	mov	r2, r3
 801b512:	4b08      	ldr	r3, [pc, #32]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b514:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801b518:	4b06      	ldr	r3, [pc, #24]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b51a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b51e:	4618      	mov	r0, r3
 801b520:	f001 fa37 	bl	801c992 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801b524:	4a03      	ldr	r2, [pc, #12]	; (801b534 <RadioSetTxGenericConfig+0x460>)
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	6053      	str	r3, [r2, #4]
    return 0;
 801b52a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801b52c:	4618      	mov	r0, r3
 801b52e:	3738      	adds	r7, #56	; 0x38
 801b530:	46bd      	mov	sp, r7
 801b532:	bd80      	pop	{r7, pc}
 801b534:	20001b74 	.word	0x20001b74
 801b538:	20001bac 	.word	0x20001bac
 801b53c:	20001b82 	.word	0x20001b82

0801b540 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801b540:	b480      	push	{r7}
 801b542:	b085      	sub	sp, #20
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b548:	2301      	movs	r3, #1
 801b54a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801b54c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b54e:	4618      	mov	r0, r3
 801b550:	3714      	adds	r7, #20
 801b552:	46bd      	mov	sp, r7
 801b554:	bc80      	pop	{r7}
 801b556:	4770      	bx	lr

0801b558 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801b558:	b480      	push	{r7}
 801b55a:	b083      	sub	sp, #12
 801b55c:	af00      	add	r7, sp, #0
 801b55e:	6078      	str	r0, [r7, #4]
 801b560:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801b562:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801b564:	4618      	mov	r0, r3
 801b566:	370c      	adds	r7, #12
 801b568:	46bd      	mov	sp, r7
 801b56a:	bc80      	pop	{r7}
 801b56c:	4770      	bx	lr
	...

0801b570 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b084      	sub	sp, #16
 801b574:	af00      	add	r7, sp, #0
 801b576:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d002      	beq.n	801b584 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801b57e:	4a1d      	ldr	r2, [pc, #116]	; (801b5f4 <SUBGRF_Init+0x84>)
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801b584:	f7e6 fda2 	bl	80020cc <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b588:	2002      	movs	r0, #2
 801b58a:	f001 f8ff 	bl	801c78c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801b58e:	4b1a      	ldr	r3, [pc, #104]	; (801b5f8 <SUBGRF_Init+0x88>)
 801b590:	2200      	movs	r2, #0
 801b592:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801b594:	2000      	movs	r0, #0
 801b596:	f000 f97d 	bl	801b894 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801b59a:	f7f1 f9c1 	bl	800c920 <RBI_IsTCXO>
 801b59e:	4603      	mov	r3, r0
 801b5a0:	2b01      	cmp	r3, #1
 801b5a2:	d10e      	bne.n	801b5c2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801b5a4:	2140      	movs	r1, #64	; 0x40
 801b5a6:	2001      	movs	r0, #1
 801b5a8:	f000 fb82 	bl	801bcb0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801b5ac:	2100      	movs	r1, #0
 801b5ae:	f640 1011 	movw	r0, #2321	; 0x911
 801b5b2:	f000 fef3 	bl	801c39c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801b5b6:	237f      	movs	r3, #127	; 0x7f
 801b5b8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801b5ba:	7b38      	ldrb	r0, [r7, #12]
 801b5bc:	f000 fa8b 	bl	801bad6 <SUBGRF_Calibrate>
 801b5c0:	e009      	b.n	801b5d6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b5c2:	2120      	movs	r1, #32
 801b5c4:	f640 1011 	movw	r0, #2321	; 0x911
 801b5c8:	f000 fee8 	bl	801c39c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801b5cc:	2120      	movs	r1, #32
 801b5ce:	f640 1012 	movw	r0, #2322	; 0x912
 801b5d2:	f000 fee3 	bl	801c39c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b5d6:	210e      	movs	r1, #14
 801b5d8:	f640 101f 	movw	r0, #2335	; 0x91f
 801b5dc:	f000 fede 	bl	801c39c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801b5e0:	f7f1 f982 	bl	800c8e8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801b5e4:	4b05      	ldr	r3, [pc, #20]	; (801b5fc <SUBGRF_Init+0x8c>)
 801b5e6:	2201      	movs	r2, #1
 801b5e8:	701a      	strb	r2, [r3, #0]
}
 801b5ea:	bf00      	nop
 801b5ec:	3710      	adds	r7, #16
 801b5ee:	46bd      	mov	sp, r7
 801b5f0:	bd80      	pop	{r7, pc}
 801b5f2:	bf00      	nop
 801b5f4:	20001c0c 	.word	0x20001c0c
 801b5f8:	20001c08 	.word	0x20001c08
 801b5fc:	20001c00 	.word	0x20001c00

0801b600 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801b600:	b480      	push	{r7}
 801b602:	af00      	add	r7, sp, #0
    return OperatingMode;
 801b604:	4b02      	ldr	r3, [pc, #8]	; (801b610 <SUBGRF_GetOperatingMode+0x10>)
 801b606:	781b      	ldrb	r3, [r3, #0]
}
 801b608:	4618      	mov	r0, r3
 801b60a:	46bd      	mov	sp, r7
 801b60c:	bc80      	pop	{r7}
 801b60e:	4770      	bx	lr
 801b610:	20001c00 	.word	0x20001c00

0801b614 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801b614:	b580      	push	{r7, lr}
 801b616:	b082      	sub	sp, #8
 801b618:	af00      	add	r7, sp, #0
 801b61a:	6078      	str	r0, [r7, #4]
 801b61c:	460b      	mov	r3, r1
 801b61e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801b620:	78fb      	ldrb	r3, [r7, #3]
 801b622:	461a      	mov	r2, r3
 801b624:	6879      	ldr	r1, [r7, #4]
 801b626:	2000      	movs	r0, #0
 801b628:	f000 ff24 	bl	801c474 <SUBGRF_WriteBuffer>
}
 801b62c:	bf00      	nop
 801b62e:	3708      	adds	r7, #8
 801b630:	46bd      	mov	sp, r7
 801b632:	bd80      	pop	{r7, pc}

0801b634 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801b634:	b580      	push	{r7, lr}
 801b636:	b086      	sub	sp, #24
 801b638:	af00      	add	r7, sp, #0
 801b63a:	60f8      	str	r0, [r7, #12]
 801b63c:	60b9      	str	r1, [r7, #8]
 801b63e:	4613      	mov	r3, r2
 801b640:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801b642:	2300      	movs	r3, #0
 801b644:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801b646:	f107 0317 	add.w	r3, r7, #23
 801b64a:	4619      	mov	r1, r3
 801b64c:	68b8      	ldr	r0, [r7, #8]
 801b64e:	f000 fe27 	bl	801c2a0 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801b652:	68bb      	ldr	r3, [r7, #8]
 801b654:	781b      	ldrb	r3, [r3, #0]
 801b656:	79fa      	ldrb	r2, [r7, #7]
 801b658:	429a      	cmp	r2, r3
 801b65a:	d201      	bcs.n	801b660 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801b65c:	2301      	movs	r3, #1
 801b65e:	e007      	b.n	801b670 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801b660:	7df8      	ldrb	r0, [r7, #23]
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	781b      	ldrb	r3, [r3, #0]
 801b666:	461a      	mov	r2, r3
 801b668:	68f9      	ldr	r1, [r7, #12]
 801b66a:	f000 ff25 	bl	801c4b8 <SUBGRF_ReadBuffer>

    return 0;
 801b66e:	2300      	movs	r3, #0
}
 801b670:	4618      	mov	r0, r3
 801b672:	3718      	adds	r7, #24
 801b674:	46bd      	mov	sp, r7
 801b676:	bd80      	pop	{r7, pc}

0801b678 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b084      	sub	sp, #16
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	60f8      	str	r0, [r7, #12]
 801b680:	460b      	mov	r3, r1
 801b682:	607a      	str	r2, [r7, #4]
 801b684:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801b686:	7afb      	ldrb	r3, [r7, #11]
 801b688:	4619      	mov	r1, r3
 801b68a:	68f8      	ldr	r0, [r7, #12]
 801b68c:	f7ff ffc2 	bl	801b614 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801b690:	6878      	ldr	r0, [r7, #4]
 801b692:	f000 f91b 	bl	801b8cc <SUBGRF_SetTx>
}
 801b696:	bf00      	nop
 801b698:	3710      	adds	r7, #16
 801b69a:	46bd      	mov	sp, r7
 801b69c:	bd80      	pop	{r7, pc}

0801b69e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801b69e:	b580      	push	{r7, lr}
 801b6a0:	b082      	sub	sp, #8
 801b6a2:	af00      	add	r7, sp, #0
 801b6a4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801b6a6:	2208      	movs	r2, #8
 801b6a8:	6879      	ldr	r1, [r7, #4]
 801b6aa:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801b6ae:	f000 fe9d 	bl	801c3ec <SUBGRF_WriteRegisters>
    return 0;
 801b6b2:	2300      	movs	r3, #0
}
 801b6b4:	4618      	mov	r0, r3
 801b6b6:	3708      	adds	r7, #8
 801b6b8:	46bd      	mov	sp, r7
 801b6ba:	bd80      	pop	{r7, pc}

0801b6bc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801b6bc:	b580      	push	{r7, lr}
 801b6be:	b084      	sub	sp, #16
 801b6c0:	af00      	add	r7, sp, #0
 801b6c2:	4603      	mov	r3, r0
 801b6c4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801b6c6:	88fb      	ldrh	r3, [r7, #6]
 801b6c8:	0a1b      	lsrs	r3, r3, #8
 801b6ca:	b29b      	uxth	r3, r3
 801b6cc:	b2db      	uxtb	r3, r3
 801b6ce:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801b6d0:	88fb      	ldrh	r3, [r7, #6]
 801b6d2:	b2db      	uxtb	r3, r3
 801b6d4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b6d6:	f000 fb6f 	bl	801bdb8 <SUBGRF_GetPacketType>
 801b6da:	4603      	mov	r3, r0
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d108      	bne.n	801b6f2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801b6e0:	f107 030c 	add.w	r3, r7, #12
 801b6e4:	2202      	movs	r2, #2
 801b6e6:	4619      	mov	r1, r3
 801b6e8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801b6ec:	f000 fe7e 	bl	801c3ec <SUBGRF_WriteRegisters>
            break;
 801b6f0:	e000      	b.n	801b6f4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801b6f2:	bf00      	nop
    }
}
 801b6f4:	bf00      	nop
 801b6f6:	3710      	adds	r7, #16
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	bd80      	pop	{r7, pc}

0801b6fc <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801b6fc:	b580      	push	{r7, lr}
 801b6fe:	b084      	sub	sp, #16
 801b700:	af00      	add	r7, sp, #0
 801b702:	4603      	mov	r3, r0
 801b704:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801b706:	88fb      	ldrh	r3, [r7, #6]
 801b708:	0a1b      	lsrs	r3, r3, #8
 801b70a:	b29b      	uxth	r3, r3
 801b70c:	b2db      	uxtb	r3, r3
 801b70e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801b710:	88fb      	ldrh	r3, [r7, #6]
 801b712:	b2db      	uxtb	r3, r3
 801b714:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801b716:	f000 fb4f 	bl	801bdb8 <SUBGRF_GetPacketType>
 801b71a:	4603      	mov	r3, r0
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d108      	bne.n	801b732 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801b720:	f107 030c 	add.w	r3, r7, #12
 801b724:	2202      	movs	r2, #2
 801b726:	4619      	mov	r1, r3
 801b728:	f240 60be 	movw	r0, #1726	; 0x6be
 801b72c:	f000 fe5e 	bl	801c3ec <SUBGRF_WriteRegisters>
            break;
 801b730:	e000      	b.n	801b734 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801b732:	bf00      	nop
    }
}
 801b734:	bf00      	nop
 801b736:	3710      	adds	r7, #16
 801b738:	46bd      	mov	sp, r7
 801b73a:	bd80      	pop	{r7, pc}

0801b73c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801b73c:	b580      	push	{r7, lr}
 801b73e:	b084      	sub	sp, #16
 801b740:	af00      	add	r7, sp, #0
 801b742:	4603      	mov	r3, r0
 801b744:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801b746:	2300      	movs	r3, #0
 801b748:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801b74a:	f000 fb35 	bl	801bdb8 <SUBGRF_GetPacketType>
 801b74e:	4603      	mov	r3, r0
 801b750:	2b00      	cmp	r3, #0
 801b752:	d121      	bne.n	801b798 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801b754:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b758:	f000 fe34 	bl	801c3c4 <SUBGRF_ReadRegister>
 801b75c:	4603      	mov	r3, r0
 801b75e:	f023 0301 	bic.w	r3, r3, #1
 801b762:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801b764:	88fb      	ldrh	r3, [r7, #6]
 801b766:	0a1b      	lsrs	r3, r3, #8
 801b768:	b29b      	uxth	r3, r3
 801b76a:	b25b      	sxtb	r3, r3
 801b76c:	f003 0301 	and.w	r3, r3, #1
 801b770:	b25a      	sxtb	r2, r3
 801b772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b776:	4313      	orrs	r3, r2
 801b778:	b25b      	sxtb	r3, r3
 801b77a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801b77c:	7bfb      	ldrb	r3, [r7, #15]
 801b77e:	4619      	mov	r1, r3
 801b780:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b784:	f000 fe0a 	bl	801c39c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801b788:	88fb      	ldrh	r3, [r7, #6]
 801b78a:	b2db      	uxtb	r3, r3
 801b78c:	4619      	mov	r1, r3
 801b78e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801b792:	f000 fe03 	bl	801c39c <SUBGRF_WriteRegister>
            break;
 801b796:	e000      	b.n	801b79a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801b798:	bf00      	nop
    }
}
 801b79a:	bf00      	nop
 801b79c:	3710      	adds	r7, #16
 801b79e:	46bd      	mov	sp, r7
 801b7a0:	bd80      	pop	{r7, pc}

0801b7a2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801b7a2:	b580      	push	{r7, lr}
 801b7a4:	b082      	sub	sp, #8
 801b7a6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801b7a8:	2300      	movs	r3, #0
 801b7aa:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801b7ac:	2300      	movs	r3, #0
 801b7ae:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801b7b4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b7b8:	f000 fe04 	bl	801c3c4 <SUBGRF_ReadRegister>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801b7c0:	79fb      	ldrb	r3, [r7, #7]
 801b7c2:	f023 0301 	bic.w	r3, r3, #1
 801b7c6:	b2db      	uxtb	r3, r3
 801b7c8:	4619      	mov	r1, r3
 801b7ca:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b7ce:	f000 fde5 	bl	801c39c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b7d2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b7d6:	f000 fdf5 	bl	801c3c4 <SUBGRF_ReadRegister>
 801b7da:	4603      	mov	r3, r0
 801b7dc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b7de:	79bb      	ldrb	r3, [r7, #6]
 801b7e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b7e4:	b2db      	uxtb	r3, r3
 801b7e6:	4619      	mov	r1, r3
 801b7e8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b7ec:	f000 fdd6 	bl	801c39c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b7f0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b7f4:	f000 f88a 	bl	801b90c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b7f8:	463b      	mov	r3, r7
 801b7fa:	2204      	movs	r2, #4
 801b7fc:	4619      	mov	r1, r3
 801b7fe:	f640 0019 	movw	r0, #2073	; 0x819
 801b802:	f000 fe15 	bl	801c430 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b806:	2000      	movs	r0, #0
 801b808:	f000 f844 	bl	801b894 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b80c:	79fb      	ldrb	r3, [r7, #7]
 801b80e:	4619      	mov	r1, r3
 801b810:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b814:	f000 fdc2 	bl	801c39c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b818:	79bb      	ldrb	r3, [r7, #6]
 801b81a:	4619      	mov	r1, r3
 801b81c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b820:	f000 fdbc 	bl	801c39c <SUBGRF_WriteRegister>

    return number;
 801b824:	683b      	ldr	r3, [r7, #0]
}
 801b826:	4618      	mov	r0, r3
 801b828:	3708      	adds	r7, #8
 801b82a:	46bd      	mov	sp, r7
 801b82c:	bd80      	pop	{r7, pc}
	...

0801b830 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b830:	b580      	push	{r7, lr}
 801b832:	b084      	sub	sp, #16
 801b834:	af00      	add	r7, sp, #0
 801b836:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b838:	2000      	movs	r0, #0
 801b83a:	f7f1 f85c 	bl	800c8f6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b83e:	2002      	movs	r0, #2
 801b840:	f000 ffa4 	bl	801c78c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b844:	793b      	ldrb	r3, [r7, #4]
 801b846:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b84a:	b2db      	uxtb	r3, r3
 801b84c:	009b      	lsls	r3, r3, #2
 801b84e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b850:	793b      	ldrb	r3, [r7, #4]
 801b852:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b856:	b2db      	uxtb	r3, r3
 801b858:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b85a:	b25b      	sxtb	r3, r3
 801b85c:	4313      	orrs	r3, r2
 801b85e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b860:	793b      	ldrb	r3, [r7, #4]
 801b862:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b866:	b2db      	uxtb	r3, r3
 801b868:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b86a:	4313      	orrs	r3, r2
 801b86c:	b25b      	sxtb	r3, r3
 801b86e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b870:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b872:	f107 030f 	add.w	r3, r7, #15
 801b876:	2201      	movs	r2, #1
 801b878:	4619      	mov	r1, r3
 801b87a:	2084      	movs	r0, #132	; 0x84
 801b87c:	f000 fe3e 	bl	801c4fc <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b880:	4b03      	ldr	r3, [pc, #12]	; (801b890 <SUBGRF_SetSleep+0x60>)
 801b882:	2200      	movs	r2, #0
 801b884:	701a      	strb	r2, [r3, #0]
}
 801b886:	bf00      	nop
 801b888:	3710      	adds	r7, #16
 801b88a:	46bd      	mov	sp, r7
 801b88c:	bd80      	pop	{r7, pc}
 801b88e:	bf00      	nop
 801b890:	20001c00 	.word	0x20001c00

0801b894 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b894:	b580      	push	{r7, lr}
 801b896:	b082      	sub	sp, #8
 801b898:	af00      	add	r7, sp, #0
 801b89a:	4603      	mov	r3, r0
 801b89c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b89e:	1dfb      	adds	r3, r7, #7
 801b8a0:	2201      	movs	r2, #1
 801b8a2:	4619      	mov	r1, r3
 801b8a4:	2080      	movs	r0, #128	; 0x80
 801b8a6:	f000 fe29 	bl	801c4fc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b8aa:	79fb      	ldrb	r3, [r7, #7]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d103      	bne.n	801b8b8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b8b0:	4b05      	ldr	r3, [pc, #20]	; (801b8c8 <SUBGRF_SetStandby+0x34>)
 801b8b2:	2201      	movs	r2, #1
 801b8b4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b8b6:	e002      	b.n	801b8be <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b8b8:	4b03      	ldr	r3, [pc, #12]	; (801b8c8 <SUBGRF_SetStandby+0x34>)
 801b8ba:	2202      	movs	r2, #2
 801b8bc:	701a      	strb	r2, [r3, #0]
}
 801b8be:	bf00      	nop
 801b8c0:	3708      	adds	r7, #8
 801b8c2:	46bd      	mov	sp, r7
 801b8c4:	bd80      	pop	{r7, pc}
 801b8c6:	bf00      	nop
 801b8c8:	20001c00 	.word	0x20001c00

0801b8cc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b8cc:	b580      	push	{r7, lr}
 801b8ce:	b084      	sub	sp, #16
 801b8d0:	af00      	add	r7, sp, #0
 801b8d2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b8d4:	4b0c      	ldr	r3, [pc, #48]	; (801b908 <SUBGRF_SetTx+0x3c>)
 801b8d6:	2204      	movs	r2, #4
 801b8d8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	0c1b      	lsrs	r3, r3, #16
 801b8de:	b2db      	uxtb	r3, r3
 801b8e0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	0a1b      	lsrs	r3, r3, #8
 801b8e6:	b2db      	uxtb	r3, r3
 801b8e8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	b2db      	uxtb	r3, r3
 801b8ee:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b8f0:	f107 030c 	add.w	r3, r7, #12
 801b8f4:	2203      	movs	r2, #3
 801b8f6:	4619      	mov	r1, r3
 801b8f8:	2083      	movs	r0, #131	; 0x83
 801b8fa:	f000 fdff 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801b8fe:	bf00      	nop
 801b900:	3710      	adds	r7, #16
 801b902:	46bd      	mov	sp, r7
 801b904:	bd80      	pop	{r7, pc}
 801b906:	bf00      	nop
 801b908:	20001c00 	.word	0x20001c00

0801b90c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b90c:	b580      	push	{r7, lr}
 801b90e:	b084      	sub	sp, #16
 801b910:	af00      	add	r7, sp, #0
 801b912:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b914:	4b0c      	ldr	r3, [pc, #48]	; (801b948 <SUBGRF_SetRx+0x3c>)
 801b916:	2205      	movs	r2, #5
 801b918:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	0c1b      	lsrs	r3, r3, #16
 801b91e:	b2db      	uxtb	r3, r3
 801b920:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	0a1b      	lsrs	r3, r3, #8
 801b926:	b2db      	uxtb	r3, r3
 801b928:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	b2db      	uxtb	r3, r3
 801b92e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b930:	f107 030c 	add.w	r3, r7, #12
 801b934:	2203      	movs	r2, #3
 801b936:	4619      	mov	r1, r3
 801b938:	2082      	movs	r0, #130	; 0x82
 801b93a:	f000 fddf 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801b93e:	bf00      	nop
 801b940:	3710      	adds	r7, #16
 801b942:	46bd      	mov	sp, r7
 801b944:	bd80      	pop	{r7, pc}
 801b946:	bf00      	nop
 801b948:	20001c00 	.word	0x20001c00

0801b94c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b94c:	b580      	push	{r7, lr}
 801b94e:	b084      	sub	sp, #16
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b954:	4b0e      	ldr	r3, [pc, #56]	; (801b990 <SUBGRF_SetRxBoosted+0x44>)
 801b956:	2205      	movs	r2, #5
 801b958:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b95a:	2197      	movs	r1, #151	; 0x97
 801b95c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b960:	f000 fd1c 	bl	801c39c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	0c1b      	lsrs	r3, r3, #16
 801b968:	b2db      	uxtb	r3, r3
 801b96a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	0a1b      	lsrs	r3, r3, #8
 801b970:	b2db      	uxtb	r3, r3
 801b972:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	b2db      	uxtb	r3, r3
 801b978:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b97a:	f107 030c 	add.w	r3, r7, #12
 801b97e:	2203      	movs	r2, #3
 801b980:	4619      	mov	r1, r3
 801b982:	2082      	movs	r0, #130	; 0x82
 801b984:	f000 fdba 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801b988:	bf00      	nop
 801b98a:	3710      	adds	r7, #16
 801b98c:	46bd      	mov	sp, r7
 801b98e:	bd80      	pop	{r7, pc}
 801b990:	20001c00 	.word	0x20001c00

0801b994 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b994:	b580      	push	{r7, lr}
 801b996:	b084      	sub	sp, #16
 801b998:	af00      	add	r7, sp, #0
 801b99a:	6078      	str	r0, [r7, #4]
 801b99c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	0c1b      	lsrs	r3, r3, #16
 801b9a2:	b2db      	uxtb	r3, r3
 801b9a4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	0a1b      	lsrs	r3, r3, #8
 801b9aa:	b2db      	uxtb	r3, r3
 801b9ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	b2db      	uxtb	r3, r3
 801b9b2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	0c1b      	lsrs	r3, r3, #16
 801b9b8:	b2db      	uxtb	r3, r3
 801b9ba:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	0a1b      	lsrs	r3, r3, #8
 801b9c0:	b2db      	uxtb	r3, r3
 801b9c2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b9c4:	683b      	ldr	r3, [r7, #0]
 801b9c6:	b2db      	uxtb	r3, r3
 801b9c8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b9ca:	f107 0308 	add.w	r3, r7, #8
 801b9ce:	2206      	movs	r2, #6
 801b9d0:	4619      	mov	r1, r3
 801b9d2:	2094      	movs	r0, #148	; 0x94
 801b9d4:	f000 fd92 	bl	801c4fc <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b9d8:	4b03      	ldr	r3, [pc, #12]	; (801b9e8 <SUBGRF_SetRxDutyCycle+0x54>)
 801b9da:	2206      	movs	r2, #6
 801b9dc:	701a      	strb	r2, [r3, #0]
}
 801b9de:	bf00      	nop
 801b9e0:	3710      	adds	r7, #16
 801b9e2:	46bd      	mov	sp, r7
 801b9e4:	bd80      	pop	{r7, pc}
 801b9e6:	bf00      	nop
 801b9e8:	20001c00 	.word	0x20001c00

0801b9ec <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b9ec:	b580      	push	{r7, lr}
 801b9ee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b9f0:	2200      	movs	r2, #0
 801b9f2:	2100      	movs	r1, #0
 801b9f4:	20c5      	movs	r0, #197	; 0xc5
 801b9f6:	f000 fd81 	bl	801c4fc <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b9fa:	4b02      	ldr	r3, [pc, #8]	; (801ba04 <SUBGRF_SetCad+0x18>)
 801b9fc:	2207      	movs	r2, #7
 801b9fe:	701a      	strb	r2, [r3, #0]
}
 801ba00:	bf00      	nop
 801ba02:	bd80      	pop	{r7, pc}
 801ba04:	20001c00 	.word	0x20001c00

0801ba08 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801ba0c:	2200      	movs	r2, #0
 801ba0e:	2100      	movs	r1, #0
 801ba10:	20d1      	movs	r0, #209	; 0xd1
 801ba12:	f000 fd73 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801ba16:	bf00      	nop
 801ba18:	bd80      	pop	{r7, pc}

0801ba1a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801ba1a:	b580      	push	{r7, lr}
 801ba1c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801ba1e:	2200      	movs	r2, #0
 801ba20:	2100      	movs	r1, #0
 801ba22:	20d2      	movs	r0, #210	; 0xd2
 801ba24:	f000 fd6a 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801ba28:	bf00      	nop
 801ba2a:	bd80      	pop	{r7, pc}

0801ba2c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801ba2c:	b580      	push	{r7, lr}
 801ba2e:	b082      	sub	sp, #8
 801ba30:	af00      	add	r7, sp, #0
 801ba32:	4603      	mov	r3, r0
 801ba34:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801ba36:	1dfb      	adds	r3, r7, #7
 801ba38:	2201      	movs	r2, #1
 801ba3a:	4619      	mov	r1, r3
 801ba3c:	209f      	movs	r0, #159	; 0x9f
 801ba3e:	f000 fd5d 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801ba42:	bf00      	nop
 801ba44:	3708      	adds	r7, #8
 801ba46:	46bd      	mov	sp, r7
 801ba48:	bd80      	pop	{r7, pc}

0801ba4a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801ba4a:	b580      	push	{r7, lr}
 801ba4c:	b084      	sub	sp, #16
 801ba4e:	af00      	add	r7, sp, #0
 801ba50:	4603      	mov	r3, r0
 801ba52:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801ba54:	1dfb      	adds	r3, r7, #7
 801ba56:	2201      	movs	r2, #1
 801ba58:	4619      	mov	r1, r3
 801ba5a:	20a0      	movs	r0, #160	; 0xa0
 801ba5c:	f000 fd4e 	bl	801c4fc <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801ba60:	79fb      	ldrb	r3, [r7, #7]
 801ba62:	2b3f      	cmp	r3, #63	; 0x3f
 801ba64:	d91c      	bls.n	801baa0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801ba66:	79fb      	ldrb	r3, [r7, #7]
 801ba68:	085b      	lsrs	r3, r3, #1
 801ba6a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801ba70:	2300      	movs	r3, #0
 801ba72:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801ba74:	e005      	b.n	801ba82 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801ba76:	7bfb      	ldrb	r3, [r7, #15]
 801ba78:	089b      	lsrs	r3, r3, #2
 801ba7a:	73fb      	strb	r3, [r7, #15]
            exp++;
 801ba7c:	7bbb      	ldrb	r3, [r7, #14]
 801ba7e:	3301      	adds	r3, #1
 801ba80:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801ba82:	7bfb      	ldrb	r3, [r7, #15]
 801ba84:	2b1f      	cmp	r3, #31
 801ba86:	d8f6      	bhi.n	801ba76 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801ba88:	7bfb      	ldrb	r3, [r7, #15]
 801ba8a:	00db      	lsls	r3, r3, #3
 801ba8c:	b2da      	uxtb	r2, r3
 801ba8e:	7bbb      	ldrb	r3, [r7, #14]
 801ba90:	4413      	add	r3, r2
 801ba92:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801ba94:	7b7b      	ldrb	r3, [r7, #13]
 801ba96:	4619      	mov	r1, r3
 801ba98:	f240 7006 	movw	r0, #1798	; 0x706
 801ba9c:	f000 fc7e 	bl	801c39c <SUBGRF_WriteRegister>
    }
}
 801baa0:	bf00      	nop
 801baa2:	3710      	adds	r7, #16
 801baa4:	46bd      	mov	sp, r7
 801baa6:	bd80      	pop	{r7, pc}

0801baa8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b082      	sub	sp, #8
 801baac:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801baae:	f7f0 ff3e 	bl	800c92e <RBI_IsDCDC>
 801bab2:	4603      	mov	r3, r0
 801bab4:	2b01      	cmp	r3, #1
 801bab6:	d102      	bne.n	801babe <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801bab8:	2301      	movs	r3, #1
 801baba:	71fb      	strb	r3, [r7, #7]
 801babc:	e001      	b.n	801bac2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801babe:	2300      	movs	r3, #0
 801bac0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801bac2:	1dfb      	adds	r3, r7, #7
 801bac4:	2201      	movs	r2, #1
 801bac6:	4619      	mov	r1, r3
 801bac8:	2096      	movs	r0, #150	; 0x96
 801baca:	f000 fd17 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bace:	bf00      	nop
 801bad0:	3708      	adds	r7, #8
 801bad2:	46bd      	mov	sp, r7
 801bad4:	bd80      	pop	{r7, pc}

0801bad6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801bad6:	b580      	push	{r7, lr}
 801bad8:	b084      	sub	sp, #16
 801bada:	af00      	add	r7, sp, #0
 801badc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bade:	793b      	ldrb	r3, [r7, #4]
 801bae0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801bae4:	b2db      	uxtb	r3, r3
 801bae6:	019b      	lsls	r3, r3, #6
 801bae8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801baea:	793b      	ldrb	r3, [r7, #4]
 801baec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801baf0:	b2db      	uxtb	r3, r3
 801baf2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801baf4:	b25b      	sxtb	r3, r3
 801baf6:	4313      	orrs	r3, r2
 801baf8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801bafa:	793b      	ldrb	r3, [r7, #4]
 801bafc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801bb00:	b2db      	uxtb	r3, r3
 801bb02:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801bb04:	b25b      	sxtb	r3, r3
 801bb06:	4313      	orrs	r3, r2
 801bb08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801bb0a:	793b      	ldrb	r3, [r7, #4]
 801bb0c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801bb10:	b2db      	uxtb	r3, r3
 801bb12:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801bb14:	b25b      	sxtb	r3, r3
 801bb16:	4313      	orrs	r3, r2
 801bb18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801bb1a:	793b      	ldrb	r3, [r7, #4]
 801bb1c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801bb20:	b2db      	uxtb	r3, r3
 801bb22:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801bb24:	b25b      	sxtb	r3, r3
 801bb26:	4313      	orrs	r3, r2
 801bb28:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801bb2a:	793b      	ldrb	r3, [r7, #4]
 801bb2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801bb30:	b2db      	uxtb	r3, r3
 801bb32:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801bb34:	b25b      	sxtb	r3, r3
 801bb36:	4313      	orrs	r3, r2
 801bb38:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801bb3a:	793b      	ldrb	r3, [r7, #4]
 801bb3c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801bb40:	b2db      	uxtb	r3, r3
 801bb42:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801bb44:	4313      	orrs	r3, r2
 801bb46:	b25b      	sxtb	r3, r3
 801bb48:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801bb4a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801bb4c:	f107 030f 	add.w	r3, r7, #15
 801bb50:	2201      	movs	r2, #1
 801bb52:	4619      	mov	r1, r3
 801bb54:	2089      	movs	r0, #137	; 0x89
 801bb56:	f000 fcd1 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bb5a:	bf00      	nop
 801bb5c:	3710      	adds	r7, #16
 801bb5e:	46bd      	mov	sp, r7
 801bb60:	bd80      	pop	{r7, pc}
	...

0801bb64 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b084      	sub	sp, #16
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	4a1d      	ldr	r2, [pc, #116]	; (801bbe4 <SUBGRF_CalibrateImage+0x80>)
 801bb70:	4293      	cmp	r3, r2
 801bb72:	d904      	bls.n	801bb7e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801bb74:	23e1      	movs	r3, #225	; 0xe1
 801bb76:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801bb78:	23e9      	movs	r3, #233	; 0xe9
 801bb7a:	737b      	strb	r3, [r7, #13]
 801bb7c:	e027      	b.n	801bbce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	4a19      	ldr	r2, [pc, #100]	; (801bbe8 <SUBGRF_CalibrateImage+0x84>)
 801bb82:	4293      	cmp	r3, r2
 801bb84:	d904      	bls.n	801bb90 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801bb86:	23d7      	movs	r3, #215	; 0xd7
 801bb88:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801bb8a:	23db      	movs	r3, #219	; 0xdb
 801bb8c:	737b      	strb	r3, [r7, #13]
 801bb8e:	e01e      	b.n	801bbce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	4a16      	ldr	r2, [pc, #88]	; (801bbec <SUBGRF_CalibrateImage+0x88>)
 801bb94:	4293      	cmp	r3, r2
 801bb96:	d904      	bls.n	801bba2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801bb98:	23c1      	movs	r3, #193	; 0xc1
 801bb9a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801bb9c:	23c5      	movs	r3, #197	; 0xc5
 801bb9e:	737b      	strb	r3, [r7, #13]
 801bba0:	e015      	b.n	801bbce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	4a12      	ldr	r2, [pc, #72]	; (801bbf0 <SUBGRF_CalibrateImage+0x8c>)
 801bba6:	4293      	cmp	r3, r2
 801bba8:	d904      	bls.n	801bbb4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801bbaa:	2375      	movs	r3, #117	; 0x75
 801bbac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801bbae:	2381      	movs	r3, #129	; 0x81
 801bbb0:	737b      	strb	r3, [r7, #13]
 801bbb2:	e00c      	b.n	801bbce <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	4a0f      	ldr	r2, [pc, #60]	; (801bbf4 <SUBGRF_CalibrateImage+0x90>)
 801bbb8:	4293      	cmp	r3, r2
 801bbba:	d904      	bls.n	801bbc6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801bbbc:	236b      	movs	r3, #107	; 0x6b
 801bbbe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801bbc0:	236f      	movs	r3, #111	; 0x6f
 801bbc2:	737b      	strb	r3, [r7, #13]
 801bbc4:	e003      	b.n	801bbce <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801bbc6:	2329      	movs	r3, #41	; 0x29
 801bbc8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801bbca:	232b      	movs	r3, #43	; 0x2b
 801bbcc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801bbce:	f107 030c 	add.w	r3, r7, #12
 801bbd2:	2202      	movs	r2, #2
 801bbd4:	4619      	mov	r1, r3
 801bbd6:	2098      	movs	r0, #152	; 0x98
 801bbd8:	f000 fc90 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bbdc:	bf00      	nop
 801bbde:	3710      	adds	r7, #16
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	bd80      	pop	{r7, pc}
 801bbe4:	35a4e900 	.word	0x35a4e900
 801bbe8:	32a9f880 	.word	0x32a9f880
 801bbec:	2de54480 	.word	0x2de54480
 801bbf0:	1b6b0b00 	.word	0x1b6b0b00
 801bbf4:	1954fc40 	.word	0x1954fc40

0801bbf8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801bbf8:	b590      	push	{r4, r7, lr}
 801bbfa:	b085      	sub	sp, #20
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	4604      	mov	r4, r0
 801bc00:	4608      	mov	r0, r1
 801bc02:	4611      	mov	r1, r2
 801bc04:	461a      	mov	r2, r3
 801bc06:	4623      	mov	r3, r4
 801bc08:	71fb      	strb	r3, [r7, #7]
 801bc0a:	4603      	mov	r3, r0
 801bc0c:	71bb      	strb	r3, [r7, #6]
 801bc0e:	460b      	mov	r3, r1
 801bc10:	717b      	strb	r3, [r7, #5]
 801bc12:	4613      	mov	r3, r2
 801bc14:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801bc16:	79fb      	ldrb	r3, [r7, #7]
 801bc18:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801bc1a:	79bb      	ldrb	r3, [r7, #6]
 801bc1c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801bc1e:	797b      	ldrb	r3, [r7, #5]
 801bc20:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801bc22:	793b      	ldrb	r3, [r7, #4]
 801bc24:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801bc26:	f107 030c 	add.w	r3, r7, #12
 801bc2a:	2204      	movs	r2, #4
 801bc2c:	4619      	mov	r1, r3
 801bc2e:	2095      	movs	r0, #149	; 0x95
 801bc30:	f000 fc64 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bc34:	bf00      	nop
 801bc36:	3714      	adds	r7, #20
 801bc38:	46bd      	mov	sp, r7
 801bc3a:	bd90      	pop	{r4, r7, pc}

0801bc3c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801bc3c:	b590      	push	{r4, r7, lr}
 801bc3e:	b085      	sub	sp, #20
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	4604      	mov	r4, r0
 801bc44:	4608      	mov	r0, r1
 801bc46:	4611      	mov	r1, r2
 801bc48:	461a      	mov	r2, r3
 801bc4a:	4623      	mov	r3, r4
 801bc4c:	80fb      	strh	r3, [r7, #6]
 801bc4e:	4603      	mov	r3, r0
 801bc50:	80bb      	strh	r3, [r7, #4]
 801bc52:	460b      	mov	r3, r1
 801bc54:	807b      	strh	r3, [r7, #2]
 801bc56:	4613      	mov	r3, r2
 801bc58:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801bc5a:	88fb      	ldrh	r3, [r7, #6]
 801bc5c:	0a1b      	lsrs	r3, r3, #8
 801bc5e:	b29b      	uxth	r3, r3
 801bc60:	b2db      	uxtb	r3, r3
 801bc62:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801bc64:	88fb      	ldrh	r3, [r7, #6]
 801bc66:	b2db      	uxtb	r3, r3
 801bc68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801bc6a:	88bb      	ldrh	r3, [r7, #4]
 801bc6c:	0a1b      	lsrs	r3, r3, #8
 801bc6e:	b29b      	uxth	r3, r3
 801bc70:	b2db      	uxtb	r3, r3
 801bc72:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801bc74:	88bb      	ldrh	r3, [r7, #4]
 801bc76:	b2db      	uxtb	r3, r3
 801bc78:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801bc7a:	887b      	ldrh	r3, [r7, #2]
 801bc7c:	0a1b      	lsrs	r3, r3, #8
 801bc7e:	b29b      	uxth	r3, r3
 801bc80:	b2db      	uxtb	r3, r3
 801bc82:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801bc84:	887b      	ldrh	r3, [r7, #2]
 801bc86:	b2db      	uxtb	r3, r3
 801bc88:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801bc8a:	883b      	ldrh	r3, [r7, #0]
 801bc8c:	0a1b      	lsrs	r3, r3, #8
 801bc8e:	b29b      	uxth	r3, r3
 801bc90:	b2db      	uxtb	r3, r3
 801bc92:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801bc94:	883b      	ldrh	r3, [r7, #0]
 801bc96:	b2db      	uxtb	r3, r3
 801bc98:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801bc9a:	f107 0308 	add.w	r3, r7, #8
 801bc9e:	2208      	movs	r2, #8
 801bca0:	4619      	mov	r1, r3
 801bca2:	2008      	movs	r0, #8
 801bca4:	f000 fc2a 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bca8:	bf00      	nop
 801bcaa:	3714      	adds	r7, #20
 801bcac:	46bd      	mov	sp, r7
 801bcae:	bd90      	pop	{r4, r7, pc}

0801bcb0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801bcb0:	b580      	push	{r7, lr}
 801bcb2:	b084      	sub	sp, #16
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	4603      	mov	r3, r0
 801bcb8:	6039      	str	r1, [r7, #0]
 801bcba:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801bcbc:	79fb      	ldrb	r3, [r7, #7]
 801bcbe:	f003 0307 	and.w	r3, r3, #7
 801bcc2:	b2db      	uxtb	r3, r3
 801bcc4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801bcc6:	683b      	ldr	r3, [r7, #0]
 801bcc8:	0c1b      	lsrs	r3, r3, #16
 801bcca:	b2db      	uxtb	r3, r3
 801bccc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801bcce:	683b      	ldr	r3, [r7, #0]
 801bcd0:	0a1b      	lsrs	r3, r3, #8
 801bcd2:	b2db      	uxtb	r3, r3
 801bcd4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801bcd6:	683b      	ldr	r3, [r7, #0]
 801bcd8:	b2db      	uxtb	r3, r3
 801bcda:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801bcdc:	f107 030c 	add.w	r3, r7, #12
 801bce0:	2204      	movs	r2, #4
 801bce2:	4619      	mov	r1, r3
 801bce4:	2097      	movs	r0, #151	; 0x97
 801bce6:	f000 fc09 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bcea:	bf00      	nop
 801bcec:	3710      	adds	r7, #16
 801bcee:	46bd      	mov	sp, r7
 801bcf0:	bd80      	pop	{r7, pc}
	...

0801bcf4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801bcf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801bcf8:	b084      	sub	sp, #16
 801bcfa:	af00      	add	r7, sp, #0
 801bcfc:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801bcfe:	2300      	movs	r3, #0
 801bd00:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801bd02:	4b1d      	ldr	r3, [pc, #116]	; (801bd78 <SUBGRF_SetRfFrequency+0x84>)
 801bd04:	781b      	ldrb	r3, [r3, #0]
 801bd06:	f083 0301 	eor.w	r3, r3, #1
 801bd0a:	b2db      	uxtb	r3, r3
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d005      	beq.n	801bd1c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801bd10:	6878      	ldr	r0, [r7, #4]
 801bd12:	f7ff ff27 	bl	801bb64 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801bd16:	4b18      	ldr	r3, [pc, #96]	; (801bd78 <SUBGRF_SetRfFrequency+0x84>)
 801bd18:	2201      	movs	r2, #1
 801bd1a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	2200      	movs	r2, #0
 801bd20:	461c      	mov	r4, r3
 801bd22:	4615      	mov	r5, r2
 801bd24:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801bd28:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801bd2c:	4a13      	ldr	r2, [pc, #76]	; (801bd7c <SUBGRF_SetRfFrequency+0x88>)
 801bd2e:	f04f 0300 	mov.w	r3, #0
 801bd32:	4640      	mov	r0, r8
 801bd34:	4649      	mov	r1, r9
 801bd36:	f7e5 f949 	bl	8000fcc <__aeabi_uldivmod>
 801bd3a:	4602      	mov	r2, r0
 801bd3c:	460b      	mov	r3, r1
 801bd3e:	4613      	mov	r3, r2
 801bd40:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801bd42:	68fb      	ldr	r3, [r7, #12]
 801bd44:	0e1b      	lsrs	r3, r3, #24
 801bd46:	b2db      	uxtb	r3, r3
 801bd48:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	0c1b      	lsrs	r3, r3, #16
 801bd4e:	b2db      	uxtb	r3, r3
 801bd50:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	0a1b      	lsrs	r3, r3, #8
 801bd56:	b2db      	uxtb	r3, r3
 801bd58:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	b2db      	uxtb	r3, r3
 801bd5e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801bd60:	f107 0308 	add.w	r3, r7, #8
 801bd64:	2204      	movs	r2, #4
 801bd66:	4619      	mov	r1, r3
 801bd68:	2086      	movs	r0, #134	; 0x86
 801bd6a:	f000 fbc7 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bd6e:	bf00      	nop
 801bd70:	3710      	adds	r7, #16
 801bd72:	46bd      	mov	sp, r7
 801bd74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801bd78:	20001c08 	.word	0x20001c08
 801bd7c:	01e84800 	.word	0x01e84800

0801bd80 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801bd80:	b580      	push	{r7, lr}
 801bd82:	b082      	sub	sp, #8
 801bd84:	af00      	add	r7, sp, #0
 801bd86:	4603      	mov	r3, r0
 801bd88:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801bd8a:	79fa      	ldrb	r2, [r7, #7]
 801bd8c:	4b09      	ldr	r3, [pc, #36]	; (801bdb4 <SUBGRF_SetPacketType+0x34>)
 801bd8e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801bd90:	79fb      	ldrb	r3, [r7, #7]
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d104      	bne.n	801bda0 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801bd96:	2100      	movs	r1, #0
 801bd98:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bd9c:	f000 fafe 	bl	801c39c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801bda0:	1dfb      	adds	r3, r7, #7
 801bda2:	2201      	movs	r2, #1
 801bda4:	4619      	mov	r1, r3
 801bda6:	208a      	movs	r0, #138	; 0x8a
 801bda8:	f000 fba8 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bdac:	bf00      	nop
 801bdae:	3708      	adds	r7, #8
 801bdb0:	46bd      	mov	sp, r7
 801bdb2:	bd80      	pop	{r7, pc}
 801bdb4:	20001c01 	.word	0x20001c01

0801bdb8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801bdb8:	b480      	push	{r7}
 801bdba:	af00      	add	r7, sp, #0
    return PacketType;
 801bdbc:	4b02      	ldr	r3, [pc, #8]	; (801bdc8 <SUBGRF_GetPacketType+0x10>)
 801bdbe:	781b      	ldrb	r3, [r3, #0]
}
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	bc80      	pop	{r7}
 801bdc6:	4770      	bx	lr
 801bdc8:	20001c01 	.word	0x20001c01

0801bdcc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b084      	sub	sp, #16
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	4603      	mov	r3, r0
 801bdd4:	71fb      	strb	r3, [r7, #7]
 801bdd6:	460b      	mov	r3, r1
 801bdd8:	71bb      	strb	r3, [r7, #6]
 801bdda:	4613      	mov	r3, r2
 801bddc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801bdde:	79fb      	ldrb	r3, [r7, #7]
 801bde0:	2b01      	cmp	r3, #1
 801bde2:	d149      	bne.n	801be78 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801bde4:	2000      	movs	r0, #0
 801bde6:	f7f0 fda9 	bl	800c93c <RBI_GetRFOMaxPowerConfig>
 801bdea:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801bdec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bdf0:	68fa      	ldr	r2, [r7, #12]
 801bdf2:	429a      	cmp	r2, r3
 801bdf4:	da01      	bge.n	801bdfa <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	2b0e      	cmp	r3, #14
 801bdfe:	d10e      	bne.n	801be1e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801be00:	2301      	movs	r3, #1
 801be02:	2201      	movs	r2, #1
 801be04:	2100      	movs	r1, #0
 801be06:	2004      	movs	r0, #4
 801be08:	f7ff fef6 	bl	801bbf8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801be0c:	79ba      	ldrb	r2, [r7, #6]
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	b2db      	uxtb	r3, r3
 801be12:	1ad3      	subs	r3, r2, r3
 801be14:	b2db      	uxtb	r3, r3
 801be16:	330e      	adds	r3, #14
 801be18:	b2db      	uxtb	r3, r3
 801be1a:	71bb      	strb	r3, [r7, #6]
 801be1c:	e01f      	b.n	801be5e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	2b0a      	cmp	r3, #10
 801be22:	d10e      	bne.n	801be42 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801be24:	2301      	movs	r3, #1
 801be26:	2201      	movs	r2, #1
 801be28:	2100      	movs	r1, #0
 801be2a:	2001      	movs	r0, #1
 801be2c:	f7ff fee4 	bl	801bbf8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801be30:	79ba      	ldrb	r2, [r7, #6]
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	b2db      	uxtb	r3, r3
 801be36:	1ad3      	subs	r3, r2, r3
 801be38:	b2db      	uxtb	r3, r3
 801be3a:	330d      	adds	r3, #13
 801be3c:	b2db      	uxtb	r3, r3
 801be3e:	71bb      	strb	r3, [r7, #6]
 801be40:	e00d      	b.n	801be5e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801be42:	2301      	movs	r3, #1
 801be44:	2201      	movs	r2, #1
 801be46:	2100      	movs	r1, #0
 801be48:	2007      	movs	r0, #7
 801be4a:	f7ff fed5 	bl	801bbf8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801be4e:	79ba      	ldrb	r2, [r7, #6]
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	b2db      	uxtb	r3, r3
 801be54:	1ad3      	subs	r3, r2, r3
 801be56:	b2db      	uxtb	r3, r3
 801be58:	330e      	adds	r3, #14
 801be5a:	b2db      	uxtb	r3, r3
 801be5c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801be5e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801be62:	f113 0f11 	cmn.w	r3, #17
 801be66:	da01      	bge.n	801be6c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801be68:	23ef      	movs	r3, #239	; 0xef
 801be6a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801be6c:	2118      	movs	r1, #24
 801be6e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801be72:	f000 fa93 	bl	801c39c <SUBGRF_WriteRegister>
 801be76:	e067      	b.n	801bf48 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801be78:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801be7c:	f000 faa2 	bl	801c3c4 <SUBGRF_ReadRegister>
 801be80:	4603      	mov	r3, r0
 801be82:	f043 031e 	orr.w	r3, r3, #30
 801be86:	b2db      	uxtb	r3, r3
 801be88:	4619      	mov	r1, r3
 801be8a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801be8e:	f000 fa85 	bl	801c39c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801be92:	2001      	movs	r0, #1
 801be94:	f7f0 fd52 	bl	800c93c <RBI_GetRFOMaxPowerConfig>
 801be98:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801be9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801be9e:	68fa      	ldr	r2, [r7, #12]
 801bea0:	429a      	cmp	r2, r3
 801bea2:	da01      	bge.n	801bea8 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	2b14      	cmp	r3, #20
 801beac:	d10e      	bne.n	801becc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801beae:	2301      	movs	r3, #1
 801beb0:	2200      	movs	r2, #0
 801beb2:	2105      	movs	r1, #5
 801beb4:	2003      	movs	r0, #3
 801beb6:	f7ff fe9f 	bl	801bbf8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801beba:	79ba      	ldrb	r2, [r7, #6]
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	b2db      	uxtb	r3, r3
 801bec0:	1ad3      	subs	r3, r2, r3
 801bec2:	b2db      	uxtb	r3, r3
 801bec4:	3316      	adds	r3, #22
 801bec6:	b2db      	uxtb	r3, r3
 801bec8:	71bb      	strb	r3, [r7, #6]
 801beca:	e031      	b.n	801bf30 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	2b11      	cmp	r3, #17
 801bed0:	d10e      	bne.n	801bef0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801bed2:	2301      	movs	r3, #1
 801bed4:	2200      	movs	r2, #0
 801bed6:	2103      	movs	r1, #3
 801bed8:	2002      	movs	r0, #2
 801beda:	f7ff fe8d 	bl	801bbf8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801bede:	79ba      	ldrb	r2, [r7, #6]
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	b2db      	uxtb	r3, r3
 801bee4:	1ad3      	subs	r3, r2, r3
 801bee6:	b2db      	uxtb	r3, r3
 801bee8:	3316      	adds	r3, #22
 801beea:	b2db      	uxtb	r3, r3
 801beec:	71bb      	strb	r3, [r7, #6]
 801beee:	e01f      	b.n	801bf30 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	2b0e      	cmp	r3, #14
 801bef4:	d10e      	bne.n	801bf14 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801bef6:	2301      	movs	r3, #1
 801bef8:	2200      	movs	r2, #0
 801befa:	2102      	movs	r1, #2
 801befc:	2002      	movs	r0, #2
 801befe:	f7ff fe7b 	bl	801bbf8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801bf02:	79ba      	ldrb	r2, [r7, #6]
 801bf04:	68fb      	ldr	r3, [r7, #12]
 801bf06:	b2db      	uxtb	r3, r3
 801bf08:	1ad3      	subs	r3, r2, r3
 801bf0a:	b2db      	uxtb	r3, r3
 801bf0c:	330e      	adds	r3, #14
 801bf0e:	b2db      	uxtb	r3, r3
 801bf10:	71bb      	strb	r3, [r7, #6]
 801bf12:	e00d      	b.n	801bf30 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801bf14:	2301      	movs	r3, #1
 801bf16:	2200      	movs	r2, #0
 801bf18:	2107      	movs	r1, #7
 801bf1a:	2004      	movs	r0, #4
 801bf1c:	f7ff fe6c 	bl	801bbf8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801bf20:	79ba      	ldrb	r2, [r7, #6]
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	b2db      	uxtb	r3, r3
 801bf26:	1ad3      	subs	r3, r2, r3
 801bf28:	b2db      	uxtb	r3, r3
 801bf2a:	3316      	adds	r3, #22
 801bf2c:	b2db      	uxtb	r3, r3
 801bf2e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801bf30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801bf34:	f113 0f09 	cmn.w	r3, #9
 801bf38:	da01      	bge.n	801bf3e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801bf3a:	23f7      	movs	r3, #247	; 0xf7
 801bf3c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801bf3e:	2138      	movs	r1, #56	; 0x38
 801bf40:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801bf44:	f000 fa2a 	bl	801c39c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801bf48:	79bb      	ldrb	r3, [r7, #6]
 801bf4a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801bf4c:	797b      	ldrb	r3, [r7, #5]
 801bf4e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801bf50:	f107 0308 	add.w	r3, r7, #8
 801bf54:	2202      	movs	r2, #2
 801bf56:	4619      	mov	r1, r3
 801bf58:	208e      	movs	r0, #142	; 0x8e
 801bf5a:	f000 facf 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801bf5e:	bf00      	nop
 801bf60:	3710      	adds	r7, #16
 801bf62:	46bd      	mov	sp, r7
 801bf64:	bd80      	pop	{r7, pc}
	...

0801bf68 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801bf68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801bf6c:	b086      	sub	sp, #24
 801bf6e:	af00      	add	r7, sp, #0
 801bf70:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801bf72:	2300      	movs	r3, #0
 801bf74:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801bf76:	4a61      	ldr	r2, [pc, #388]	; (801c0fc <SUBGRF_SetModulationParams+0x194>)
 801bf78:	f107 0308 	add.w	r3, r7, #8
 801bf7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bf80:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	781a      	ldrb	r2, [r3, #0]
 801bf88:	4b5d      	ldr	r3, [pc, #372]	; (801c100 <SUBGRF_SetModulationParams+0x198>)
 801bf8a:	781b      	ldrb	r3, [r3, #0]
 801bf8c:	429a      	cmp	r2, r3
 801bf8e:	d004      	beq.n	801bf9a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801bf90:	687b      	ldr	r3, [r7, #4]
 801bf92:	781b      	ldrb	r3, [r3, #0]
 801bf94:	4618      	mov	r0, r3
 801bf96:	f7ff fef3 	bl	801bd80 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	781b      	ldrb	r3, [r3, #0]
 801bf9e:	2b03      	cmp	r3, #3
 801bfa0:	f200 80a5 	bhi.w	801c0ee <SUBGRF_SetModulationParams+0x186>
 801bfa4:	a201      	add	r2, pc, #4	; (adr r2, 801bfac <SUBGRF_SetModulationParams+0x44>)
 801bfa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bfaa:	bf00      	nop
 801bfac:	0801bfbd 	.word	0x0801bfbd
 801bfb0:	0801c07d 	.word	0x0801c07d
 801bfb4:	0801c03f 	.word	0x0801c03f
 801bfb8:	0801c0ab 	.word	0x0801c0ab
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801bfbc:	2308      	movs	r3, #8
 801bfbe:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	685b      	ldr	r3, [r3, #4]
 801bfc4:	4a4f      	ldr	r2, [pc, #316]	; (801c104 <SUBGRF_SetModulationParams+0x19c>)
 801bfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 801bfca:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801bfcc:	697b      	ldr	r3, [r7, #20]
 801bfce:	0c1b      	lsrs	r3, r3, #16
 801bfd0:	b2db      	uxtb	r3, r3
 801bfd2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801bfd4:	697b      	ldr	r3, [r7, #20]
 801bfd6:	0a1b      	lsrs	r3, r3, #8
 801bfd8:	b2db      	uxtb	r3, r3
 801bfda:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801bfdc:	697b      	ldr	r3, [r7, #20]
 801bfde:	b2db      	uxtb	r3, r3
 801bfe0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	7b1b      	ldrb	r3, [r3, #12]
 801bfe6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	7b5b      	ldrb	r3, [r3, #13]
 801bfec:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	689b      	ldr	r3, [r3, #8]
 801bff2:	2200      	movs	r2, #0
 801bff4:	461c      	mov	r4, r3
 801bff6:	4615      	mov	r5, r2
 801bff8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801bffc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c000:	4a41      	ldr	r2, [pc, #260]	; (801c108 <SUBGRF_SetModulationParams+0x1a0>)
 801c002:	f04f 0300 	mov.w	r3, #0
 801c006:	4640      	mov	r0, r8
 801c008:	4649      	mov	r1, r9
 801c00a:	f7e4 ffdf 	bl	8000fcc <__aeabi_uldivmod>
 801c00e:	4602      	mov	r2, r0
 801c010:	460b      	mov	r3, r1
 801c012:	4613      	mov	r3, r2
 801c014:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c016:	697b      	ldr	r3, [r7, #20]
 801c018:	0c1b      	lsrs	r3, r3, #16
 801c01a:	b2db      	uxtb	r3, r3
 801c01c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c01e:	697b      	ldr	r3, [r7, #20]
 801c020:	0a1b      	lsrs	r3, r3, #8
 801c022:	b2db      	uxtb	r3, r3
 801c024:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c026:	697b      	ldr	r3, [r7, #20]
 801c028:	b2db      	uxtb	r3, r3
 801c02a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c02c:	7cfb      	ldrb	r3, [r7, #19]
 801c02e:	b29a      	uxth	r2, r3
 801c030:	f107 0308 	add.w	r3, r7, #8
 801c034:	4619      	mov	r1, r3
 801c036:	208b      	movs	r0, #139	; 0x8b
 801c038:	f000 fa60 	bl	801c4fc <SUBGRF_WriteCommand>
        break;
 801c03c:	e058      	b.n	801c0f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c03e:	2304      	movs	r3, #4
 801c040:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	691b      	ldr	r3, [r3, #16]
 801c046:	4a2f      	ldr	r2, [pc, #188]	; (801c104 <SUBGRF_SetModulationParams+0x19c>)
 801c048:	fbb2 f3f3 	udiv	r3, r2, r3
 801c04c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c04e:	697b      	ldr	r3, [r7, #20]
 801c050:	0c1b      	lsrs	r3, r3, #16
 801c052:	b2db      	uxtb	r3, r3
 801c054:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c056:	697b      	ldr	r3, [r7, #20]
 801c058:	0a1b      	lsrs	r3, r3, #8
 801c05a:	b2db      	uxtb	r3, r3
 801c05c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c05e:	697b      	ldr	r3, [r7, #20]
 801c060:	b2db      	uxtb	r3, r3
 801c062:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c064:	687b      	ldr	r3, [r7, #4]
 801c066:	7d1b      	ldrb	r3, [r3, #20]
 801c068:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c06a:	7cfb      	ldrb	r3, [r7, #19]
 801c06c:	b29a      	uxth	r2, r3
 801c06e:	f107 0308 	add.w	r3, r7, #8
 801c072:	4619      	mov	r1, r3
 801c074:	208b      	movs	r0, #139	; 0x8b
 801c076:	f000 fa41 	bl	801c4fc <SUBGRF_WriteCommand>
        break;
 801c07a:	e039      	b.n	801c0f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c07c:	2304      	movs	r3, #4
 801c07e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	7e1b      	ldrb	r3, [r3, #24]
 801c084:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	7e5b      	ldrb	r3, [r3, #25]
 801c08a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	7e9b      	ldrb	r3, [r3, #26]
 801c090:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	7edb      	ldrb	r3, [r3, #27]
 801c096:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c098:	7cfb      	ldrb	r3, [r7, #19]
 801c09a:	b29a      	uxth	r2, r3
 801c09c:	f107 0308 	add.w	r3, r7, #8
 801c0a0:	4619      	mov	r1, r3
 801c0a2:	208b      	movs	r0, #139	; 0x8b
 801c0a4:	f000 fa2a 	bl	801c4fc <SUBGRF_WriteCommand>

        break;
 801c0a8:	e022      	b.n	801c0f0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801c0aa:	2305      	movs	r3, #5
 801c0ac:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	685b      	ldr	r3, [r3, #4]
 801c0b2:	4a14      	ldr	r2, [pc, #80]	; (801c104 <SUBGRF_SetModulationParams+0x19c>)
 801c0b4:	fbb2 f3f3 	udiv	r3, r2, r3
 801c0b8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c0ba:	697b      	ldr	r3, [r7, #20]
 801c0bc:	0c1b      	lsrs	r3, r3, #16
 801c0be:	b2db      	uxtb	r3, r3
 801c0c0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c0c2:	697b      	ldr	r3, [r7, #20]
 801c0c4:	0a1b      	lsrs	r3, r3, #8
 801c0c6:	b2db      	uxtb	r3, r3
 801c0c8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c0ca:	697b      	ldr	r3, [r7, #20]
 801c0cc:	b2db      	uxtb	r3, r3
 801c0ce:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	7b1b      	ldrb	r3, [r3, #12]
 801c0d4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	7b5b      	ldrb	r3, [r3, #13]
 801c0da:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c0dc:	7cfb      	ldrb	r3, [r7, #19]
 801c0de:	b29a      	uxth	r2, r3
 801c0e0:	f107 0308 	add.w	r3, r7, #8
 801c0e4:	4619      	mov	r1, r3
 801c0e6:	208b      	movs	r0, #139	; 0x8b
 801c0e8:	f000 fa08 	bl	801c4fc <SUBGRF_WriteCommand>
        break;
 801c0ec:	e000      	b.n	801c0f0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801c0ee:	bf00      	nop
    }
}
 801c0f0:	bf00      	nop
 801c0f2:	3718      	adds	r7, #24
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c0fa:	bf00      	nop
 801c0fc:	0801e8a8 	.word	0x0801e8a8
 801c100:	20001c01 	.word	0x20001c01
 801c104:	3d090000 	.word	0x3d090000
 801c108:	01e84800 	.word	0x01e84800

0801c10c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b086      	sub	sp, #24
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801c114:	2300      	movs	r3, #0
 801c116:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c118:	4a48      	ldr	r2, [pc, #288]	; (801c23c <SUBGRF_SetPacketParams+0x130>)
 801c11a:	f107 030c 	add.w	r3, r7, #12
 801c11e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c120:	c303      	stmia	r3!, {r0, r1}
 801c122:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	781a      	ldrb	r2, [r3, #0]
 801c128:	4b45      	ldr	r3, [pc, #276]	; (801c240 <SUBGRF_SetPacketParams+0x134>)
 801c12a:	781b      	ldrb	r3, [r3, #0]
 801c12c:	429a      	cmp	r2, r3
 801c12e:	d004      	beq.n	801c13a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	781b      	ldrb	r3, [r3, #0]
 801c134:	4618      	mov	r0, r3
 801c136:	f7ff fe23 	bl	801bd80 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	781b      	ldrb	r3, [r3, #0]
 801c13e:	2b03      	cmp	r3, #3
 801c140:	d878      	bhi.n	801c234 <SUBGRF_SetPacketParams+0x128>
 801c142:	a201      	add	r2, pc, #4	; (adr r2, 801c148 <SUBGRF_SetPacketParams+0x3c>)
 801c144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c148:	0801c159 	.word	0x0801c159
 801c14c:	0801c1e9 	.word	0x0801c1e9
 801c150:	0801c1dd 	.word	0x0801c1dd
 801c154:	0801c159 	.word	0x0801c159
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	7a5b      	ldrb	r3, [r3, #9]
 801c15c:	2bf1      	cmp	r3, #241	; 0xf1
 801c15e:	d10a      	bne.n	801c176 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801c160:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801c164:	f7ff faaa 	bl	801b6bc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801c168:	f248 0005 	movw	r0, #32773	; 0x8005
 801c16c:	f7ff fac6 	bl	801b6fc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801c170:	2302      	movs	r3, #2
 801c172:	75bb      	strb	r3, [r7, #22]
 801c174:	e011      	b.n	801c19a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801c176:	687b      	ldr	r3, [r7, #4]
 801c178:	7a5b      	ldrb	r3, [r3, #9]
 801c17a:	2bf2      	cmp	r3, #242	; 0xf2
 801c17c:	d10a      	bne.n	801c194 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801c17e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801c182:	f7ff fa9b 	bl	801b6bc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801c186:	f241 0021 	movw	r0, #4129	; 0x1021
 801c18a:	f7ff fab7 	bl	801b6fc <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801c18e:	2306      	movs	r3, #6
 801c190:	75bb      	strb	r3, [r7, #22]
 801c192:	e002      	b.n	801c19a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	7a5b      	ldrb	r3, [r3, #9]
 801c198:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801c19a:	2309      	movs	r3, #9
 801c19c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	885b      	ldrh	r3, [r3, #2]
 801c1a2:	0a1b      	lsrs	r3, r3, #8
 801c1a4:	b29b      	uxth	r3, r3
 801c1a6:	b2db      	uxtb	r3, r3
 801c1a8:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	885b      	ldrh	r3, [r3, #2]
 801c1ae:	b2db      	uxtb	r3, r3
 801c1b0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	791b      	ldrb	r3, [r3, #4]
 801c1b6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	795b      	ldrb	r3, [r3, #5]
 801c1bc:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	799b      	ldrb	r3, [r3, #6]
 801c1c2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	79db      	ldrb	r3, [r3, #7]
 801c1c8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	7a1b      	ldrb	r3, [r3, #8]
 801c1ce:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801c1d0:	7dbb      	ldrb	r3, [r7, #22]
 801c1d2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	7a9b      	ldrb	r3, [r3, #10]
 801c1d8:	753b      	strb	r3, [r7, #20]
        break;
 801c1da:	e022      	b.n	801c222 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801c1dc:	2301      	movs	r3, #1
 801c1de:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	7b1b      	ldrb	r3, [r3, #12]
 801c1e4:	733b      	strb	r3, [r7, #12]
        break;
 801c1e6:	e01c      	b.n	801c222 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801c1e8:	2306      	movs	r3, #6
 801c1ea:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	89db      	ldrh	r3, [r3, #14]
 801c1f0:	0a1b      	lsrs	r3, r3, #8
 801c1f2:	b29b      	uxth	r3, r3
 801c1f4:	b2db      	uxtb	r3, r3
 801c1f6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	89db      	ldrh	r3, [r3, #14]
 801c1fc:	b2db      	uxtb	r3, r3
 801c1fe:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	7c1a      	ldrb	r2, [r3, #16]
 801c204:	4b0f      	ldr	r3, [pc, #60]	; (801c244 <SUBGRF_SetPacketParams+0x138>)
 801c206:	4611      	mov	r1, r2
 801c208:	7019      	strb	r1, [r3, #0]
 801c20a:	4613      	mov	r3, r2
 801c20c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	7c5b      	ldrb	r3, [r3, #17]
 801c212:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801c214:	687b      	ldr	r3, [r7, #4]
 801c216:	7c9b      	ldrb	r3, [r3, #18]
 801c218:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	7cdb      	ldrb	r3, [r3, #19]
 801c21e:	747b      	strb	r3, [r7, #17]
        break;
 801c220:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801c222:	7dfb      	ldrb	r3, [r7, #23]
 801c224:	b29a      	uxth	r2, r3
 801c226:	f107 030c 	add.w	r3, r7, #12
 801c22a:	4619      	mov	r1, r3
 801c22c:	208c      	movs	r0, #140	; 0x8c
 801c22e:	f000 f965 	bl	801c4fc <SUBGRF_WriteCommand>
 801c232:	e000      	b.n	801c236 <SUBGRF_SetPacketParams+0x12a>
        return;
 801c234:	bf00      	nop
}
 801c236:	3718      	adds	r7, #24
 801c238:	46bd      	mov	sp, r7
 801c23a:	bd80      	pop	{r7, pc}
 801c23c:	0801e8b0 	.word	0x0801e8b0
 801c240:	20001c01 	.word	0x20001c01
 801c244:	20001c02 	.word	0x20001c02

0801c248 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801c248:	b580      	push	{r7, lr}
 801c24a:	b084      	sub	sp, #16
 801c24c:	af00      	add	r7, sp, #0
 801c24e:	4603      	mov	r3, r0
 801c250:	460a      	mov	r2, r1
 801c252:	71fb      	strb	r3, [r7, #7]
 801c254:	4613      	mov	r3, r2
 801c256:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801c258:	79fb      	ldrb	r3, [r7, #7]
 801c25a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801c25c:	79bb      	ldrb	r3, [r7, #6]
 801c25e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801c260:	f107 030c 	add.w	r3, r7, #12
 801c264:	2202      	movs	r2, #2
 801c266:	4619      	mov	r1, r3
 801c268:	208f      	movs	r0, #143	; 0x8f
 801c26a:	f000 f947 	bl	801c4fc <SUBGRF_WriteCommand>
}
 801c26e:	bf00      	nop
 801c270:	3710      	adds	r7, #16
 801c272:	46bd      	mov	sp, r7
 801c274:	bd80      	pop	{r7, pc}

0801c276 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801c276:	b580      	push	{r7, lr}
 801c278:	b082      	sub	sp, #8
 801c27a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801c27c:	2300      	movs	r3, #0
 801c27e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801c280:	1d3b      	adds	r3, r7, #4
 801c282:	2201      	movs	r2, #1
 801c284:	4619      	mov	r1, r3
 801c286:	2015      	movs	r0, #21
 801c288:	f000 f95a 	bl	801c540 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801c28c:	793b      	ldrb	r3, [r7, #4]
 801c28e:	425b      	negs	r3, r3
 801c290:	105b      	asrs	r3, r3, #1
 801c292:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801c294:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801c298:	4618      	mov	r0, r3
 801c29a:	3708      	adds	r7, #8
 801c29c:	46bd      	mov	sp, r7
 801c29e:	bd80      	pop	{r7, pc}

0801c2a0 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801c2a0:	b580      	push	{r7, lr}
 801c2a2:	b084      	sub	sp, #16
 801c2a4:	af00      	add	r7, sp, #0
 801c2a6:	6078      	str	r0, [r7, #4]
 801c2a8:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801c2aa:	f107 030c 	add.w	r3, r7, #12
 801c2ae:	2202      	movs	r2, #2
 801c2b0:	4619      	mov	r1, r3
 801c2b2:	2013      	movs	r0, #19
 801c2b4:	f000 f944 	bl	801c540 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801c2b8:	f7ff fd7e 	bl	801bdb8 <SUBGRF_GetPacketType>
 801c2bc:	4603      	mov	r3, r0
 801c2be:	2b01      	cmp	r3, #1
 801c2c0:	d10d      	bne.n	801c2de <SUBGRF_GetRxBufferStatus+0x3e>
 801c2c2:	4b0c      	ldr	r3, [pc, #48]	; (801c2f4 <SUBGRF_GetRxBufferStatus+0x54>)
 801c2c4:	781b      	ldrb	r3, [r3, #0]
 801c2c6:	b2db      	uxtb	r3, r3
 801c2c8:	2b01      	cmp	r3, #1
 801c2ca:	d108      	bne.n	801c2de <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801c2cc:	f240 7002 	movw	r0, #1794	; 0x702
 801c2d0:	f000 f878 	bl	801c3c4 <SUBGRF_ReadRegister>
 801c2d4:	4603      	mov	r3, r0
 801c2d6:	461a      	mov	r2, r3
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	701a      	strb	r2, [r3, #0]
 801c2dc:	e002      	b.n	801c2e4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801c2de:	7b3a      	ldrb	r2, [r7, #12]
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801c2e4:	7b7a      	ldrb	r2, [r7, #13]
 801c2e6:	683b      	ldr	r3, [r7, #0]
 801c2e8:	701a      	strb	r2, [r3, #0]
}
 801c2ea:	bf00      	nop
 801c2ec:	3710      	adds	r7, #16
 801c2ee:	46bd      	mov	sp, r7
 801c2f0:	bd80      	pop	{r7, pc}
 801c2f2:	bf00      	nop
 801c2f4:	20001c02 	.word	0x20001c02

0801c2f8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801c2f8:	b580      	push	{r7, lr}
 801c2fa:	b084      	sub	sp, #16
 801c2fc:	af00      	add	r7, sp, #0
 801c2fe:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801c300:	f107 030c 	add.w	r3, r7, #12
 801c304:	2203      	movs	r2, #3
 801c306:	4619      	mov	r1, r3
 801c308:	2014      	movs	r0, #20
 801c30a:	f000 f919 	bl	801c540 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801c30e:	f7ff fd53 	bl	801bdb8 <SUBGRF_GetPacketType>
 801c312:	4603      	mov	r3, r0
 801c314:	461a      	mov	r2, r3
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	781b      	ldrb	r3, [r3, #0]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d002      	beq.n	801c328 <SUBGRF_GetPacketStatus+0x30>
 801c322:	2b01      	cmp	r3, #1
 801c324:	d013      	beq.n	801c34e <SUBGRF_GetPacketStatus+0x56>
 801c326:	e02a      	b.n	801c37e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801c328:	7b3a      	ldrb	r2, [r7, #12]
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801c32e:	7b7b      	ldrb	r3, [r7, #13]
 801c330:	425b      	negs	r3, r3
 801c332:	105b      	asrs	r3, r3, #1
 801c334:	b25a      	sxtb	r2, r3
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801c33a:	7bbb      	ldrb	r3, [r7, #14]
 801c33c:	425b      	negs	r3, r3
 801c33e:	105b      	asrs	r3, r3, #1
 801c340:	b25a      	sxtb	r2, r3
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	2200      	movs	r2, #0
 801c34a:	609a      	str	r2, [r3, #8]
            break;
 801c34c:	e020      	b.n	801c390 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801c34e:	7b3b      	ldrb	r3, [r7, #12]
 801c350:	425b      	negs	r3, r3
 801c352:	105b      	asrs	r3, r3, #1
 801c354:	b25a      	sxtb	r2, r3
 801c356:	687b      	ldr	r3, [r7, #4]
 801c358:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801c35a:	7b7b      	ldrb	r3, [r7, #13]
 801c35c:	b25b      	sxtb	r3, r3
 801c35e:	3302      	adds	r3, #2
 801c360:	109b      	asrs	r3, r3, #2
 801c362:	b25a      	sxtb	r2, r3
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801c368:	7bbb      	ldrb	r3, [r7, #14]
 801c36a:	425b      	negs	r3, r3
 801c36c:	105b      	asrs	r3, r3, #1
 801c36e:	b25a      	sxtb	r2, r3
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801c374:	4b08      	ldr	r3, [pc, #32]	; (801c398 <SUBGRF_GetPacketStatus+0xa0>)
 801c376:	681a      	ldr	r2, [r3, #0]
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	611a      	str	r2, [r3, #16]
            break;
 801c37c:	e008      	b.n	801c390 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801c37e:	2214      	movs	r2, #20
 801c380:	2100      	movs	r1, #0
 801c382:	6878      	ldr	r0, [r7, #4]
 801c384:	f000 fbcd 	bl	801cb22 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	220f      	movs	r2, #15
 801c38c:	701a      	strb	r2, [r3, #0]
            break;
 801c38e:	bf00      	nop
    }
}
 801c390:	bf00      	nop
 801c392:	3710      	adds	r7, #16
 801c394:	46bd      	mov	sp, r7
 801c396:	bd80      	pop	{r7, pc}
 801c398:	20001c04 	.word	0x20001c04

0801c39c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801c39c:	b580      	push	{r7, lr}
 801c39e:	b082      	sub	sp, #8
 801c3a0:	af00      	add	r7, sp, #0
 801c3a2:	4603      	mov	r3, r0
 801c3a4:	460a      	mov	r2, r1
 801c3a6:	80fb      	strh	r3, [r7, #6]
 801c3a8:	4613      	mov	r3, r2
 801c3aa:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801c3ac:	1d7a      	adds	r2, r7, #5
 801c3ae:	88f9      	ldrh	r1, [r7, #6]
 801c3b0:	2301      	movs	r3, #1
 801c3b2:	4803      	ldr	r0, [pc, #12]	; (801c3c0 <SUBGRF_WriteRegister+0x24>)
 801c3b4:	f7ec fe90 	bl	80090d8 <HAL_SUBGHZ_WriteRegisters>
}
 801c3b8:	bf00      	nop
 801c3ba:	3708      	adds	r7, #8
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	bd80      	pop	{r7, pc}
 801c3c0:	20000250 	.word	0x20000250

0801c3c4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801c3c4:	b580      	push	{r7, lr}
 801c3c6:	b084      	sub	sp, #16
 801c3c8:	af00      	add	r7, sp, #0
 801c3ca:	4603      	mov	r3, r0
 801c3cc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801c3ce:	f107 020f 	add.w	r2, r7, #15
 801c3d2:	88f9      	ldrh	r1, [r7, #6]
 801c3d4:	2301      	movs	r3, #1
 801c3d6:	4804      	ldr	r0, [pc, #16]	; (801c3e8 <SUBGRF_ReadRegister+0x24>)
 801c3d8:	f7ec fedd 	bl	8009196 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801c3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801c3de:	4618      	mov	r0, r3
 801c3e0:	3710      	adds	r7, #16
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	bd80      	pop	{r7, pc}
 801c3e6:	bf00      	nop
 801c3e8:	20000250 	.word	0x20000250

0801c3ec <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c3ec:	b580      	push	{r7, lr}
 801c3ee:	b086      	sub	sp, #24
 801c3f0:	af00      	add	r7, sp, #0
 801c3f2:	4603      	mov	r3, r0
 801c3f4:	6039      	str	r1, [r7, #0]
 801c3f6:	80fb      	strh	r3, [r7, #6]
 801c3f8:	4613      	mov	r3, r2
 801c3fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3fc:	f3ef 8310 	mrs	r3, PRIMASK
 801c400:	60fb      	str	r3, [r7, #12]
  return(result);
 801c402:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c404:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c406:	b672      	cpsid	i
}
 801c408:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801c40a:	88bb      	ldrh	r3, [r7, #4]
 801c40c:	88f9      	ldrh	r1, [r7, #6]
 801c40e:	683a      	ldr	r2, [r7, #0]
 801c410:	4806      	ldr	r0, [pc, #24]	; (801c42c <SUBGRF_WriteRegisters+0x40>)
 801c412:	f7ec fe61 	bl	80090d8 <HAL_SUBGHZ_WriteRegisters>
 801c416:	697b      	ldr	r3, [r7, #20]
 801c418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c41a:	693b      	ldr	r3, [r7, #16]
 801c41c:	f383 8810 	msr	PRIMASK, r3
}
 801c420:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c422:	bf00      	nop
 801c424:	3718      	adds	r7, #24
 801c426:	46bd      	mov	sp, r7
 801c428:	bd80      	pop	{r7, pc}
 801c42a:	bf00      	nop
 801c42c:	20000250 	.word	0x20000250

0801c430 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801c430:	b580      	push	{r7, lr}
 801c432:	b086      	sub	sp, #24
 801c434:	af00      	add	r7, sp, #0
 801c436:	4603      	mov	r3, r0
 801c438:	6039      	str	r1, [r7, #0]
 801c43a:	80fb      	strh	r3, [r7, #6]
 801c43c:	4613      	mov	r3, r2
 801c43e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c440:	f3ef 8310 	mrs	r3, PRIMASK
 801c444:	60fb      	str	r3, [r7, #12]
  return(result);
 801c446:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c44a:	b672      	cpsid	i
}
 801c44c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801c44e:	88bb      	ldrh	r3, [r7, #4]
 801c450:	88f9      	ldrh	r1, [r7, #6]
 801c452:	683a      	ldr	r2, [r7, #0]
 801c454:	4806      	ldr	r0, [pc, #24]	; (801c470 <SUBGRF_ReadRegisters+0x40>)
 801c456:	f7ec fe9e 	bl	8009196 <HAL_SUBGHZ_ReadRegisters>
 801c45a:	697b      	ldr	r3, [r7, #20]
 801c45c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c45e:	693b      	ldr	r3, [r7, #16]
 801c460:	f383 8810 	msr	PRIMASK, r3
}
 801c464:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c466:	bf00      	nop
 801c468:	3718      	adds	r7, #24
 801c46a:	46bd      	mov	sp, r7
 801c46c:	bd80      	pop	{r7, pc}
 801c46e:	bf00      	nop
 801c470:	20000250 	.word	0x20000250

0801c474 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b086      	sub	sp, #24
 801c478:	af00      	add	r7, sp, #0
 801c47a:	4603      	mov	r3, r0
 801c47c:	6039      	str	r1, [r7, #0]
 801c47e:	71fb      	strb	r3, [r7, #7]
 801c480:	4613      	mov	r3, r2
 801c482:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c484:	f3ef 8310 	mrs	r3, PRIMASK
 801c488:	60fb      	str	r3, [r7, #12]
  return(result);
 801c48a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c48c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c48e:	b672      	cpsid	i
}
 801c490:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801c492:	79bb      	ldrb	r3, [r7, #6]
 801c494:	b29b      	uxth	r3, r3
 801c496:	79f9      	ldrb	r1, [r7, #7]
 801c498:	683a      	ldr	r2, [r7, #0]
 801c49a:	4806      	ldr	r0, [pc, #24]	; (801c4b4 <SUBGRF_WriteBuffer+0x40>)
 801c49c:	f7ec ff8f 	bl	80093be <HAL_SUBGHZ_WriteBuffer>
 801c4a0:	697b      	ldr	r3, [r7, #20]
 801c4a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4a4:	693b      	ldr	r3, [r7, #16]
 801c4a6:	f383 8810 	msr	PRIMASK, r3
}
 801c4aa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c4ac:	bf00      	nop
 801c4ae:	3718      	adds	r7, #24
 801c4b0:	46bd      	mov	sp, r7
 801c4b2:	bd80      	pop	{r7, pc}
 801c4b4:	20000250 	.word	0x20000250

0801c4b8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801c4b8:	b580      	push	{r7, lr}
 801c4ba:	b086      	sub	sp, #24
 801c4bc:	af00      	add	r7, sp, #0
 801c4be:	4603      	mov	r3, r0
 801c4c0:	6039      	str	r1, [r7, #0]
 801c4c2:	71fb      	strb	r3, [r7, #7]
 801c4c4:	4613      	mov	r3, r2
 801c4c6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4c8:	f3ef 8310 	mrs	r3, PRIMASK
 801c4cc:	60fb      	str	r3, [r7, #12]
  return(result);
 801c4ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c4d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4d2:	b672      	cpsid	i
}
 801c4d4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801c4d6:	79bb      	ldrb	r3, [r7, #6]
 801c4d8:	b29b      	uxth	r3, r3
 801c4da:	79f9      	ldrb	r1, [r7, #7]
 801c4dc:	683a      	ldr	r2, [r7, #0]
 801c4de:	4806      	ldr	r0, [pc, #24]	; (801c4f8 <SUBGRF_ReadBuffer+0x40>)
 801c4e0:	f7ec ffc0 	bl	8009464 <HAL_SUBGHZ_ReadBuffer>
 801c4e4:	697b      	ldr	r3, [r7, #20]
 801c4e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4e8:	693b      	ldr	r3, [r7, #16]
 801c4ea:	f383 8810 	msr	PRIMASK, r3
}
 801c4ee:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c4f0:	bf00      	nop
 801c4f2:	3718      	adds	r7, #24
 801c4f4:	46bd      	mov	sp, r7
 801c4f6:	bd80      	pop	{r7, pc}
 801c4f8:	20000250 	.word	0x20000250

0801c4fc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c4fc:	b580      	push	{r7, lr}
 801c4fe:	b086      	sub	sp, #24
 801c500:	af00      	add	r7, sp, #0
 801c502:	4603      	mov	r3, r0
 801c504:	6039      	str	r1, [r7, #0]
 801c506:	71fb      	strb	r3, [r7, #7]
 801c508:	4613      	mov	r3, r2
 801c50a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c50c:	f3ef 8310 	mrs	r3, PRIMASK
 801c510:	60fb      	str	r3, [r7, #12]
  return(result);
 801c512:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c514:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c516:	b672      	cpsid	i
}
 801c518:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801c51a:	88bb      	ldrh	r3, [r7, #4]
 801c51c:	79f9      	ldrb	r1, [r7, #7]
 801c51e:	683a      	ldr	r2, [r7, #0]
 801c520:	4806      	ldr	r0, [pc, #24]	; (801c53c <SUBGRF_WriteCommand+0x40>)
 801c522:	f7ec fe99 	bl	8009258 <HAL_SUBGHZ_ExecSetCmd>
 801c526:	697b      	ldr	r3, [r7, #20]
 801c528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c52a:	693b      	ldr	r3, [r7, #16]
 801c52c:	f383 8810 	msr	PRIMASK, r3
}
 801c530:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c532:	bf00      	nop
 801c534:	3718      	adds	r7, #24
 801c536:	46bd      	mov	sp, r7
 801c538:	bd80      	pop	{r7, pc}
 801c53a:	bf00      	nop
 801c53c:	20000250 	.word	0x20000250

0801c540 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801c540:	b580      	push	{r7, lr}
 801c542:	b086      	sub	sp, #24
 801c544:	af00      	add	r7, sp, #0
 801c546:	4603      	mov	r3, r0
 801c548:	6039      	str	r1, [r7, #0]
 801c54a:	71fb      	strb	r3, [r7, #7]
 801c54c:	4613      	mov	r3, r2
 801c54e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c550:	f3ef 8310 	mrs	r3, PRIMASK
 801c554:	60fb      	str	r3, [r7, #12]
  return(result);
 801c556:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801c558:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c55a:	b672      	cpsid	i
}
 801c55c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801c55e:	88bb      	ldrh	r3, [r7, #4]
 801c560:	79f9      	ldrb	r1, [r7, #7]
 801c562:	683a      	ldr	r2, [r7, #0]
 801c564:	4806      	ldr	r0, [pc, #24]	; (801c580 <SUBGRF_ReadCommand+0x40>)
 801c566:	f7ec fed6 	bl	8009316 <HAL_SUBGHZ_ExecGetCmd>
 801c56a:	697b      	ldr	r3, [r7, #20]
 801c56c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c56e:	693b      	ldr	r3, [r7, #16]
 801c570:	f383 8810 	msr	PRIMASK, r3
}
 801c574:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801c576:	bf00      	nop
 801c578:	3718      	adds	r7, #24
 801c57a:	46bd      	mov	sp, r7
 801c57c:	bd80      	pop	{r7, pc}
 801c57e:	bf00      	nop
 801c580:	20000250 	.word	0x20000250

0801c584 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801c584:	b580      	push	{r7, lr}
 801c586:	b084      	sub	sp, #16
 801c588:	af00      	add	r7, sp, #0
 801c58a:	4603      	mov	r3, r0
 801c58c:	460a      	mov	r2, r1
 801c58e:	71fb      	strb	r3, [r7, #7]
 801c590:	4613      	mov	r3, r2
 801c592:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801c594:	2301      	movs	r3, #1
 801c596:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801c598:	79bb      	ldrb	r3, [r7, #6]
 801c59a:	2b01      	cmp	r3, #1
 801c59c:	d10d      	bne.n	801c5ba <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801c59e:	79fb      	ldrb	r3, [r7, #7]
 801c5a0:	2b01      	cmp	r3, #1
 801c5a2:	d104      	bne.n	801c5ae <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801c5a4:	2302      	movs	r3, #2
 801c5a6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801c5a8:	2004      	movs	r0, #4
 801c5aa:	f000 f8ef 	bl	801c78c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801c5ae:	79fb      	ldrb	r3, [r7, #7]
 801c5b0:	2b02      	cmp	r3, #2
 801c5b2:	d107      	bne.n	801c5c4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801c5b4:	2303      	movs	r3, #3
 801c5b6:	73fb      	strb	r3, [r7, #15]
 801c5b8:	e004      	b.n	801c5c4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801c5ba:	79bb      	ldrb	r3, [r7, #6]
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d101      	bne.n	801c5c4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801c5c0:	2301      	movs	r3, #1
 801c5c2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801c5c4:	7bfb      	ldrb	r3, [r7, #15]
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	f7f0 f995 	bl	800c8f6 <RBI_ConfigRFSwitch>
}
 801c5cc:	bf00      	nop
 801c5ce:	3710      	adds	r7, #16
 801c5d0:	46bd      	mov	sp, r7
 801c5d2:	bd80      	pop	{r7, pc}

0801c5d4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b084      	sub	sp, #16
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	4603      	mov	r3, r0
 801c5dc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801c5de:	2301      	movs	r3, #1
 801c5e0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801c5e2:	f7f0 f996 	bl	800c912 <RBI_GetTxConfig>
 801c5e6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801c5e8:	68bb      	ldr	r3, [r7, #8]
 801c5ea:	2b02      	cmp	r3, #2
 801c5ec:	d016      	beq.n	801c61c <SUBGRF_SetRfTxPower+0x48>
 801c5ee:	68bb      	ldr	r3, [r7, #8]
 801c5f0:	2b02      	cmp	r3, #2
 801c5f2:	dc16      	bgt.n	801c622 <SUBGRF_SetRfTxPower+0x4e>
 801c5f4:	68bb      	ldr	r3, [r7, #8]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d003      	beq.n	801c602 <SUBGRF_SetRfTxPower+0x2e>
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	2b01      	cmp	r3, #1
 801c5fe:	d00a      	beq.n	801c616 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801c600:	e00f      	b.n	801c622 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801c602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c606:	2b0f      	cmp	r3, #15
 801c608:	dd02      	ble.n	801c610 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801c60a:	2302      	movs	r3, #2
 801c60c:	73fb      	strb	r3, [r7, #15]
            break;
 801c60e:	e009      	b.n	801c624 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801c610:	2301      	movs	r3, #1
 801c612:	73fb      	strb	r3, [r7, #15]
            break;
 801c614:	e006      	b.n	801c624 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801c616:	2301      	movs	r3, #1
 801c618:	73fb      	strb	r3, [r7, #15]
            break;
 801c61a:	e003      	b.n	801c624 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801c61c:	2302      	movs	r3, #2
 801c61e:	73fb      	strb	r3, [r7, #15]
            break;
 801c620:	e000      	b.n	801c624 <SUBGRF_SetRfTxPower+0x50>
            break;
 801c622:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801c624:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c628:	7bfb      	ldrb	r3, [r7, #15]
 801c62a:	2202      	movs	r2, #2
 801c62c:	4618      	mov	r0, r3
 801c62e:	f7ff fbcd 	bl	801bdcc <SUBGRF_SetTxParams>

    return paSelect;
 801c632:	7bfb      	ldrb	r3, [r7, #15]
}
 801c634:	4618      	mov	r0, r3
 801c636:	3710      	adds	r7, #16
 801c638:	46bd      	mov	sp, r7
 801c63a:	bd80      	pop	{r7, pc}

0801c63c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801c63c:	b480      	push	{r7}
 801c63e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801c640:	2301      	movs	r3, #1
}
 801c642:	4618      	mov	r0, r3
 801c644:	46bd      	mov	sp, r7
 801c646:	bc80      	pop	{r7}
 801c648:	4770      	bx	lr
	...

0801c64c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c64c:	b580      	push	{r7, lr}
 801c64e:	b082      	sub	sp, #8
 801c650:	af00      	add	r7, sp, #0
 801c652:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801c654:	4b03      	ldr	r3, [pc, #12]	; (801c664 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	2001      	movs	r0, #1
 801c65a:	4798      	blx	r3
}
 801c65c:	bf00      	nop
 801c65e:	3708      	adds	r7, #8
 801c660:	46bd      	mov	sp, r7
 801c662:	bd80      	pop	{r7, pc}
 801c664:	20001c0c 	.word	0x20001c0c

0801c668 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c668:	b580      	push	{r7, lr}
 801c66a:	b082      	sub	sp, #8
 801c66c:	af00      	add	r7, sp, #0
 801c66e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801c670:	4b03      	ldr	r3, [pc, #12]	; (801c680 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801c672:	681b      	ldr	r3, [r3, #0]
 801c674:	2002      	movs	r0, #2
 801c676:	4798      	blx	r3
}
 801c678:	bf00      	nop
 801c67a:	3708      	adds	r7, #8
 801c67c:	46bd      	mov	sp, r7
 801c67e:	bd80      	pop	{r7, pc}
 801c680:	20001c0c 	.word	0x20001c0c

0801c684 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801c684:	b580      	push	{r7, lr}
 801c686:	b082      	sub	sp, #8
 801c688:	af00      	add	r7, sp, #0
 801c68a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801c68c:	4b03      	ldr	r3, [pc, #12]	; (801c69c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	2040      	movs	r0, #64	; 0x40
 801c692:	4798      	blx	r3
}
 801c694:	bf00      	nop
 801c696:	3708      	adds	r7, #8
 801c698:	46bd      	mov	sp, r7
 801c69a:	bd80      	pop	{r7, pc}
 801c69c:	20001c0c 	.word	0x20001c0c

0801c6a0 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801c6a0:	b580      	push	{r7, lr}
 801c6a2:	b082      	sub	sp, #8
 801c6a4:	af00      	add	r7, sp, #0
 801c6a6:	6078      	str	r0, [r7, #4]
 801c6a8:	460b      	mov	r3, r1
 801c6aa:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801c6ac:	78fb      	ldrb	r3, [r7, #3]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d002      	beq.n	801c6b8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801c6b2:	2b01      	cmp	r3, #1
 801c6b4:	d005      	beq.n	801c6c2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801c6b6:	e00a      	b.n	801c6ce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801c6b8:	4b07      	ldr	r3, [pc, #28]	; (801c6d8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	2080      	movs	r0, #128	; 0x80
 801c6be:	4798      	blx	r3
            break;
 801c6c0:	e005      	b.n	801c6ce <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801c6c2:	4b05      	ldr	r3, [pc, #20]	; (801c6d8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801c6c4:	681b      	ldr	r3, [r3, #0]
 801c6c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c6ca:	4798      	blx	r3
            break;
 801c6cc:	bf00      	nop
    }
}
 801c6ce:	bf00      	nop
 801c6d0:	3708      	adds	r7, #8
 801c6d2:	46bd      	mov	sp, r7
 801c6d4:	bd80      	pop	{r7, pc}
 801c6d6:	bf00      	nop
 801c6d8:	20001c0c 	.word	0x20001c0c

0801c6dc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c6dc:	b580      	push	{r7, lr}
 801c6de:	b082      	sub	sp, #8
 801c6e0:	af00      	add	r7, sp, #0
 801c6e2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801c6e4:	4b04      	ldr	r3, [pc, #16]	; (801c6f8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 801c6ec:	4798      	blx	r3
}
 801c6ee:	bf00      	nop
 801c6f0:	3708      	adds	r7, #8
 801c6f2:	46bd      	mov	sp, r7
 801c6f4:	bd80      	pop	{r7, pc}
 801c6f6:	bf00      	nop
 801c6f8:	20001c0c 	.word	0x20001c0c

0801c6fc <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b082      	sub	sp, #8
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801c704:	4b03      	ldr	r3, [pc, #12]	; (801c714 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	2020      	movs	r0, #32
 801c70a:	4798      	blx	r3
}
 801c70c:	bf00      	nop
 801c70e:	3708      	adds	r7, #8
 801c710:	46bd      	mov	sp, r7
 801c712:	bd80      	pop	{r7, pc}
 801c714:	20001c0c 	.word	0x20001c0c

0801c718 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c718:	b580      	push	{r7, lr}
 801c71a:	b082      	sub	sp, #8
 801c71c:	af00      	add	r7, sp, #0
 801c71e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801c720:	4b03      	ldr	r3, [pc, #12]	; (801c730 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	2004      	movs	r0, #4
 801c726:	4798      	blx	r3
}
 801c728:	bf00      	nop
 801c72a:	3708      	adds	r7, #8
 801c72c:	46bd      	mov	sp, r7
 801c72e:	bd80      	pop	{r7, pc}
 801c730:	20001c0c 	.word	0x20001c0c

0801c734 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b082      	sub	sp, #8
 801c738:	af00      	add	r7, sp, #0
 801c73a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801c73c:	4b03      	ldr	r3, [pc, #12]	; (801c74c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	2008      	movs	r0, #8
 801c742:	4798      	blx	r3
}
 801c744:	bf00      	nop
 801c746:	3708      	adds	r7, #8
 801c748:	46bd      	mov	sp, r7
 801c74a:	bd80      	pop	{r7, pc}
 801c74c:	20001c0c 	.word	0x20001c0c

0801c750 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c750:	b580      	push	{r7, lr}
 801c752:	b082      	sub	sp, #8
 801c754:	af00      	add	r7, sp, #0
 801c756:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801c758:	4b03      	ldr	r3, [pc, #12]	; (801c768 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	2010      	movs	r0, #16
 801c75e:	4798      	blx	r3
}
 801c760:	bf00      	nop
 801c762:	3708      	adds	r7, #8
 801c764:	46bd      	mov	sp, r7
 801c766:	bd80      	pop	{r7, pc}
 801c768:	20001c0c 	.word	0x20001c0c

0801c76c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801c76c:	b580      	push	{r7, lr}
 801c76e:	b082      	sub	sp, #8
 801c770:	af00      	add	r7, sp, #0
 801c772:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801c774:	4b04      	ldr	r3, [pc, #16]	; (801c788 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801c77c:	4798      	blx	r3
}
 801c77e:	bf00      	nop
 801c780:	3708      	adds	r7, #8
 801c782:	46bd      	mov	sp, r7
 801c784:	bd80      	pop	{r7, pc}
 801c786:	bf00      	nop
 801c788:	20001c0c 	.word	0x20001c0c

0801c78c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801c78c:	b580      	push	{r7, lr}
 801c78e:	b084      	sub	sp, #16
 801c790:	af00      	add	r7, sp, #0
 801c792:	4603      	mov	r3, r0
 801c794:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801c796:	f7f0 f8ca 	bl	800c92e <RBI_IsDCDC>
 801c79a:	4603      	mov	r3, r0
 801c79c:	2b01      	cmp	r3, #1
 801c79e:	d112      	bne.n	801c7c6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801c7a0:	f640 1023 	movw	r0, #2339	; 0x923
 801c7a4:	f7ff fe0e 	bl	801c3c4 <SUBGRF_ReadRegister>
 801c7a8:	4603      	mov	r3, r0
 801c7aa:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801c7ac:	7bfb      	ldrb	r3, [r7, #15]
 801c7ae:	f023 0306 	bic.w	r3, r3, #6
 801c7b2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801c7b4:	7bfa      	ldrb	r2, [r7, #15]
 801c7b6:	79fb      	ldrb	r3, [r7, #7]
 801c7b8:	4313      	orrs	r3, r2
 801c7ba:	b2db      	uxtb	r3, r3
 801c7bc:	4619      	mov	r1, r3
 801c7be:	f640 1023 	movw	r0, #2339	; 0x923
 801c7c2:	f7ff fdeb 	bl	801c39c <SUBGRF_WriteRegister>
  }
}
 801c7c6:	bf00      	nop
 801c7c8:	3710      	adds	r7, #16
 801c7ca:	46bd      	mov	sp, r7
 801c7cc:	bd80      	pop	{r7, pc}
	...

0801c7d0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801c7d0:	b480      	push	{r7}
 801c7d2:	b085      	sub	sp, #20
 801c7d4:	af00      	add	r7, sp, #0
 801c7d6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d101      	bne.n	801c7e2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801c7de:	231f      	movs	r3, #31
 801c7e0:	e016      	b.n	801c810 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c7e2:	2300      	movs	r3, #0
 801c7e4:	73fb      	strb	r3, [r7, #15]
 801c7e6:	e00f      	b.n	801c808 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801c7e8:	7bfb      	ldrb	r3, [r7, #15]
 801c7ea:	4a0c      	ldr	r2, [pc, #48]	; (801c81c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c7ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c7f0:	687a      	ldr	r2, [r7, #4]
 801c7f2:	429a      	cmp	r2, r3
 801c7f4:	d205      	bcs.n	801c802 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c7f6:	7bfb      	ldrb	r3, [r7, #15]
 801c7f8:	4a08      	ldr	r2, [pc, #32]	; (801c81c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c7fa:	00db      	lsls	r3, r3, #3
 801c7fc:	4413      	add	r3, r2
 801c7fe:	791b      	ldrb	r3, [r3, #4]
 801c800:	e006      	b.n	801c810 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c802:	7bfb      	ldrb	r3, [r7, #15]
 801c804:	3301      	adds	r3, #1
 801c806:	73fb      	strb	r3, [r7, #15]
 801c808:	7bfb      	ldrb	r3, [r7, #15]
 801c80a:	2b15      	cmp	r3, #21
 801c80c:	d9ec      	bls.n	801c7e8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801c80e:	e7fe      	b.n	801c80e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c810:	4618      	mov	r0, r3
 801c812:	3714      	adds	r7, #20
 801c814:	46bd      	mov	sp, r7
 801c816:	bc80      	pop	{r7}
 801c818:	4770      	bx	lr
 801c81a:	bf00      	nop
 801c81c:	0801eed4 	.word	0x0801eed4

0801c820 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c820:	b580      	push	{r7, lr}
 801c822:	b08a      	sub	sp, #40	; 0x28
 801c824:	af00      	add	r7, sp, #0
 801c826:	6078      	str	r0, [r7, #4]
 801c828:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c82a:	4b35      	ldr	r3, [pc, #212]	; (801c900 <SUBGRF_GetCFO+0xe0>)
 801c82c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c82e:	f640 0007 	movw	r0, #2055	; 0x807
 801c832:	f7ff fdc7 	bl	801c3c4 <SUBGRF_ReadRegister>
 801c836:	4603      	mov	r3, r0
 801c838:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c83a:	7ffb      	ldrb	r3, [r7, #31]
 801c83c:	08db      	lsrs	r3, r3, #3
 801c83e:	b2db      	uxtb	r3, r3
 801c840:	f003 0303 	and.w	r3, r3, #3
 801c844:	3328      	adds	r3, #40	; 0x28
 801c846:	443b      	add	r3, r7
 801c848:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c84c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c84e:	7ffb      	ldrb	r3, [r7, #31]
 801c850:	f003 0307 	and.w	r3, r3, #7
 801c854:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801c856:	7fba      	ldrb	r2, [r7, #30]
 801c858:	7f7b      	ldrb	r3, [r7, #29]
 801c85a:	3301      	adds	r3, #1
 801c85c:	fa02 f303 	lsl.w	r3, r2, r3
 801c860:	461a      	mov	r2, r3
 801c862:	4b28      	ldr	r3, [pc, #160]	; (801c904 <SUBGRF_GetCFO+0xe4>)
 801c864:	fbb3 f3f2 	udiv	r3, r3, r2
 801c868:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c86a:	69ba      	ldr	r2, [r7, #24]
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	fbb2 f3f3 	udiv	r3, r2, r3
 801c872:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c874:	2301      	movs	r3, #1
 801c876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c87a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c87e:	697a      	ldr	r2, [r7, #20]
 801c880:	fb02 f303 	mul.w	r3, r2, r3
 801c884:	2b07      	cmp	r3, #7
 801c886:	d802      	bhi.n	801c88e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c888:	2302      	movs	r3, #2
 801c88a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801c88e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c892:	697a      	ldr	r2, [r7, #20]
 801c894:	fb02 f303 	mul.w	r3, r2, r3
 801c898:	2b03      	cmp	r3, #3
 801c89a:	d802      	bhi.n	801c8a2 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c89c:	2304      	movs	r3, #4
 801c89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c8a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c8a6:	69bb      	ldr	r3, [r7, #24]
 801c8a8:	fb02 f303 	mul.w	r3, r2, r3
 801c8ac:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c8ae:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801c8b2:	f7ff fd87 	bl	801c3c4 <SUBGRF_ReadRegister>
 801c8b6:	4603      	mov	r3, r0
 801c8b8:	021b      	lsls	r3, r3, #8
 801c8ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c8be:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c8c0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801c8c4:	f7ff fd7e 	bl	801c3c4 <SUBGRF_ReadRegister>
 801c8c8:	4603      	mov	r3, r0
 801c8ca:	461a      	mov	r2, r3
 801c8cc:	6a3b      	ldr	r3, [r7, #32]
 801c8ce:	4313      	orrs	r3, r2
 801c8d0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c8d2:	6a3b      	ldr	r3, [r7, #32]
 801c8d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d005      	beq.n	801c8e8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c8dc:	6a3b      	ldr	r3, [r7, #32]
 801c8de:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c8e2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c8e6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c8e8:	693b      	ldr	r3, [r7, #16]
 801c8ea:	095b      	lsrs	r3, r3, #5
 801c8ec:	6a3a      	ldr	r2, [r7, #32]
 801c8ee:	fb02 f303 	mul.w	r3, r2, r3
 801c8f2:	11da      	asrs	r2, r3, #7
 801c8f4:	683b      	ldr	r3, [r7, #0]
 801c8f6:	601a      	str	r2, [r3, #0]
}
 801c8f8:	bf00      	nop
 801c8fa:	3728      	adds	r7, #40	; 0x28
 801c8fc:	46bd      	mov	sp, r7
 801c8fe:	bd80      	pop	{r7, pc}
 801c900:	0c0a0804 	.word	0x0c0a0804
 801c904:	01e84800 	.word	0x01e84800

0801c908 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801c908:	b480      	push	{r7}
 801c90a:	b087      	sub	sp, #28
 801c90c:	af00      	add	r7, sp, #0
 801c90e:	4603      	mov	r3, r0
 801c910:	60b9      	str	r1, [r7, #8]
 801c912:	607a      	str	r2, [r7, #4]
 801c914:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801c916:	2300      	movs	r3, #0
 801c918:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801c91a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c91e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c920:	697b      	ldr	r3, [r7, #20]
}
 801c922:	4618      	mov	r0, r3
 801c924:	371c      	adds	r7, #28
 801c926:	46bd      	mov	sp, r7
 801c928:	bc80      	pop	{r7}
 801c92a:	4770      	bx	lr

0801c92c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801c92c:	b480      	push	{r7}
 801c92e:	b087      	sub	sp, #28
 801c930:	af00      	add	r7, sp, #0
 801c932:	4603      	mov	r3, r0
 801c934:	60b9      	str	r1, [r7, #8]
 801c936:	607a      	str	r2, [r7, #4]
 801c938:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801c93a:	2300      	movs	r3, #0
 801c93c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801c93e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c942:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801c944:	697b      	ldr	r3, [r7, #20]
}
 801c946:	4618      	mov	r0, r3
 801c948:	371c      	adds	r7, #28
 801c94a:	46bd      	mov	sp, r7
 801c94c:	bc80      	pop	{r7}
 801c94e:	4770      	bx	lr

0801c950 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801c950:	b480      	push	{r7}
 801c952:	b085      	sub	sp, #20
 801c954:	af00      	add	r7, sp, #0
 801c956:	60f8      	str	r0, [r7, #12]
 801c958:	60b9      	str	r1, [r7, #8]
 801c95a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801c95c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c960:	4618      	mov	r0, r3
 801c962:	3714      	adds	r7, #20
 801c964:	46bd      	mov	sp, r7
 801c966:	bc80      	pop	{r7}
 801c968:	4770      	bx	lr

0801c96a <RFW_DeInit>:

void RFW_DeInit( void )
{
 801c96a:	b480      	push	{r7}
 801c96c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801c96e:	bf00      	nop
 801c970:	46bd      	mov	sp, r7
 801c972:	bc80      	pop	{r7}
 801c974:	4770      	bx	lr

0801c976 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801c976:	b480      	push	{r7}
 801c978:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801c97a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c97c:	4618      	mov	r0, r3
 801c97e:	46bd      	mov	sp, r7
 801c980:	bc80      	pop	{r7}
 801c982:	4770      	bx	lr

0801c984 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801c984:	b480      	push	{r7}
 801c986:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801c988:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801c98a:	4618      	mov	r0, r3
 801c98c:	46bd      	mov	sp, r7
 801c98e:	bc80      	pop	{r7}
 801c990:	4770      	bx	lr

0801c992 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801c992:	b480      	push	{r7}
 801c994:	b083      	sub	sp, #12
 801c996:	af00      	add	r7, sp, #0
 801c998:	4603      	mov	r3, r0
 801c99a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801c99c:	bf00      	nop
 801c99e:	370c      	adds	r7, #12
 801c9a0:	46bd      	mov	sp, r7
 801c9a2:	bc80      	pop	{r7}
 801c9a4:	4770      	bx	lr

0801c9a6 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801c9a6:	b480      	push	{r7}
 801c9a8:	b087      	sub	sp, #28
 801c9aa:	af00      	add	r7, sp, #0
 801c9ac:	60f8      	str	r0, [r7, #12]
 801c9ae:	460b      	mov	r3, r1
 801c9b0:	607a      	str	r2, [r7, #4]
 801c9b2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801c9b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c9b8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801c9ba:	697b      	ldr	r3, [r7, #20]
}
 801c9bc:	4618      	mov	r0, r3
 801c9be:	371c      	adds	r7, #28
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bc80      	pop	{r7}
 801c9c4:	4770      	bx	lr

0801c9c6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c9c6:	b480      	push	{r7}
 801c9c8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801c9ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 801c9ce:	4618      	mov	r0, r3
 801c9d0:	46bd      	mov	sp, r7
 801c9d2:	bc80      	pop	{r7}
 801c9d4:	4770      	bx	lr

0801c9d6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801c9d6:	b480      	push	{r7}
 801c9d8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801c9da:	bf00      	nop
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	bc80      	pop	{r7}
 801c9e0:	4770      	bx	lr

0801c9e2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c9e2:	b480      	push	{r7}
 801c9e4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801c9e6:	bf00      	nop
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	bc80      	pop	{r7}
 801c9ec:	4770      	bx	lr

0801c9ee <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801c9ee:	b480      	push	{r7}
 801c9f0:	b083      	sub	sp, #12
 801c9f2:	af00      	add	r7, sp, #0
 801c9f4:	4603      	mov	r3, r0
 801c9f6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801c9f8:	bf00      	nop
 801c9fa:	370c      	adds	r7, #12
 801c9fc:	46bd      	mov	sp, r7
 801c9fe:	bc80      	pop	{r7}
 801ca00:	4770      	bx	lr
	...

0801ca04 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ca04:	b480      	push	{r7}
 801ca06:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ca08:	4b04      	ldr	r3, [pc, #16]	; (801ca1c <UTIL_LPM_Init+0x18>)
 801ca0a:	2200      	movs	r2, #0
 801ca0c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ca0e:	4b04      	ldr	r3, [pc, #16]	; (801ca20 <UTIL_LPM_Init+0x1c>)
 801ca10:	2200      	movs	r2, #0
 801ca12:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ca14:	bf00      	nop
 801ca16:	46bd      	mov	sp, r7
 801ca18:	bc80      	pop	{r7}
 801ca1a:	4770      	bx	lr
 801ca1c:	20001c10 	.word	0x20001c10
 801ca20:	20001c14 	.word	0x20001c14

0801ca24 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ca24:	b480      	push	{r7}
 801ca26:	b087      	sub	sp, #28
 801ca28:	af00      	add	r7, sp, #0
 801ca2a:	6078      	str	r0, [r7, #4]
 801ca2c:	460b      	mov	r3, r1
 801ca2e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca30:	f3ef 8310 	mrs	r3, PRIMASK
 801ca34:	613b      	str	r3, [r7, #16]
  return(result);
 801ca36:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ca38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca3a:	b672      	cpsid	i
}
 801ca3c:	bf00      	nop
  
  switch( state )
 801ca3e:	78fb      	ldrb	r3, [r7, #3]
 801ca40:	2b00      	cmp	r3, #0
 801ca42:	d008      	beq.n	801ca56 <UTIL_LPM_SetStopMode+0x32>
 801ca44:	2b01      	cmp	r3, #1
 801ca46:	d10e      	bne.n	801ca66 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801ca48:	4b0d      	ldr	r3, [pc, #52]	; (801ca80 <UTIL_LPM_SetStopMode+0x5c>)
 801ca4a:	681a      	ldr	r2, [r3, #0]
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	4313      	orrs	r3, r2
 801ca50:	4a0b      	ldr	r2, [pc, #44]	; (801ca80 <UTIL_LPM_SetStopMode+0x5c>)
 801ca52:	6013      	str	r3, [r2, #0]
      break;
 801ca54:	e008      	b.n	801ca68 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	43da      	mvns	r2, r3
 801ca5a:	4b09      	ldr	r3, [pc, #36]	; (801ca80 <UTIL_LPM_SetStopMode+0x5c>)
 801ca5c:	681b      	ldr	r3, [r3, #0]
 801ca5e:	4013      	ands	r3, r2
 801ca60:	4a07      	ldr	r2, [pc, #28]	; (801ca80 <UTIL_LPM_SetStopMode+0x5c>)
 801ca62:	6013      	str	r3, [r2, #0]
      break;
 801ca64:	e000      	b.n	801ca68 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801ca66:	bf00      	nop
 801ca68:	697b      	ldr	r3, [r7, #20]
 801ca6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	f383 8810 	msr	PRIMASK, r3
}
 801ca72:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ca74:	bf00      	nop
 801ca76:	371c      	adds	r7, #28
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bc80      	pop	{r7}
 801ca7c:	4770      	bx	lr
 801ca7e:	bf00      	nop
 801ca80:	20001c10 	.word	0x20001c10

0801ca84 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ca84:	b480      	push	{r7}
 801ca86:	b087      	sub	sp, #28
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	6078      	str	r0, [r7, #4]
 801ca8c:	460b      	mov	r3, r1
 801ca8e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca90:	f3ef 8310 	mrs	r3, PRIMASK
 801ca94:	613b      	str	r3, [r7, #16]
  return(result);
 801ca96:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ca98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca9a:	b672      	cpsid	i
}
 801ca9c:	bf00      	nop
  
  switch(state)
 801ca9e:	78fb      	ldrb	r3, [r7, #3]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d008      	beq.n	801cab6 <UTIL_LPM_SetOffMode+0x32>
 801caa4:	2b01      	cmp	r3, #1
 801caa6:	d10e      	bne.n	801cac6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801caa8:	4b0d      	ldr	r3, [pc, #52]	; (801cae0 <UTIL_LPM_SetOffMode+0x5c>)
 801caaa:	681a      	ldr	r2, [r3, #0]
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	4313      	orrs	r3, r2
 801cab0:	4a0b      	ldr	r2, [pc, #44]	; (801cae0 <UTIL_LPM_SetOffMode+0x5c>)
 801cab2:	6013      	str	r3, [r2, #0]
      break;
 801cab4:	e008      	b.n	801cac8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	43da      	mvns	r2, r3
 801caba:	4b09      	ldr	r3, [pc, #36]	; (801cae0 <UTIL_LPM_SetOffMode+0x5c>)
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	4013      	ands	r3, r2
 801cac0:	4a07      	ldr	r2, [pc, #28]	; (801cae0 <UTIL_LPM_SetOffMode+0x5c>)
 801cac2:	6013      	str	r3, [r2, #0]
      break;
 801cac4:	e000      	b.n	801cac8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801cac6:	bf00      	nop
 801cac8:	697b      	ldr	r3, [r7, #20]
 801caca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	f383 8810 	msr	PRIMASK, r3
}
 801cad2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801cad4:	bf00      	nop
 801cad6:	371c      	adds	r7, #28
 801cad8:	46bd      	mov	sp, r7
 801cada:	bc80      	pop	{r7}
 801cadc:	4770      	bx	lr
 801cade:	bf00      	nop
 801cae0:	20001c14 	.word	0x20001c14

0801cae4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801cae4:	b480      	push	{r7}
 801cae6:	b087      	sub	sp, #28
 801cae8:	af00      	add	r7, sp, #0
 801caea:	60f8      	str	r0, [r7, #12]
 801caec:	60b9      	str	r1, [r7, #8]
 801caee:	4613      	mov	r3, r2
 801caf0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801caf6:	68bb      	ldr	r3, [r7, #8]
 801caf8:	613b      	str	r3, [r7, #16]

  while( size-- )
 801cafa:	e007      	b.n	801cb0c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801cafc:	693a      	ldr	r2, [r7, #16]
 801cafe:	1c53      	adds	r3, r2, #1
 801cb00:	613b      	str	r3, [r7, #16]
 801cb02:	697b      	ldr	r3, [r7, #20]
 801cb04:	1c59      	adds	r1, r3, #1
 801cb06:	6179      	str	r1, [r7, #20]
 801cb08:	7812      	ldrb	r2, [r2, #0]
 801cb0a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801cb0c:	88fb      	ldrh	r3, [r7, #6]
 801cb0e:	1e5a      	subs	r2, r3, #1
 801cb10:	80fa      	strh	r2, [r7, #6]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d1f2      	bne.n	801cafc <UTIL_MEM_cpy_8+0x18>
    }
}
 801cb16:	bf00      	nop
 801cb18:	bf00      	nop
 801cb1a:	371c      	adds	r7, #28
 801cb1c:	46bd      	mov	sp, r7
 801cb1e:	bc80      	pop	{r7}
 801cb20:	4770      	bx	lr

0801cb22 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801cb22:	b480      	push	{r7}
 801cb24:	b085      	sub	sp, #20
 801cb26:	af00      	add	r7, sp, #0
 801cb28:	6078      	str	r0, [r7, #4]
 801cb2a:	460b      	mov	r3, r1
 801cb2c:	70fb      	strb	r3, [r7, #3]
 801cb2e:	4613      	mov	r3, r2
 801cb30:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801cb36:	e004      	b.n	801cb42 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801cb38:	68fb      	ldr	r3, [r7, #12]
 801cb3a:	1c5a      	adds	r2, r3, #1
 801cb3c:	60fa      	str	r2, [r7, #12]
 801cb3e:	78fa      	ldrb	r2, [r7, #3]
 801cb40:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801cb42:	883b      	ldrh	r3, [r7, #0]
 801cb44:	1e5a      	subs	r2, r3, #1
 801cb46:	803a      	strh	r2, [r7, #0]
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d1f5      	bne.n	801cb38 <UTIL_MEM_set_8+0x16>
  }
}
 801cb4c:	bf00      	nop
 801cb4e:	bf00      	nop
 801cb50:	3714      	adds	r7, #20
 801cb52:	46bd      	mov	sp, r7
 801cb54:	bc80      	pop	{r7}
 801cb56:	4770      	bx	lr

0801cb58 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801cb58:	b082      	sub	sp, #8
 801cb5a:	b480      	push	{r7}
 801cb5c:	b087      	sub	sp, #28
 801cb5e:	af00      	add	r7, sp, #0
 801cb60:	60f8      	str	r0, [r7, #12]
 801cb62:	1d38      	adds	r0, r7, #4
 801cb64:	e880 0006 	stmia.w	r0, {r1, r2}
 801cb68:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801cb6a:	2300      	movs	r3, #0
 801cb6c:	613b      	str	r3, [r7, #16]
 801cb6e:	2300      	movs	r3, #0
 801cb70:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801cb72:	687a      	ldr	r2, [r7, #4]
 801cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cb76:	4413      	add	r3, r2
 801cb78:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801cb7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cb7e:	b29a      	uxth	r2, r3
 801cb80:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cb84:	b29b      	uxth	r3, r3
 801cb86:	4413      	add	r3, r2
 801cb88:	b29b      	uxth	r3, r3
 801cb8a:	b21b      	sxth	r3, r3
 801cb8c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801cb8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cb92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801cb96:	db0a      	blt.n	801cbae <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801cb98:	693b      	ldr	r3, [r7, #16]
 801cb9a:	3301      	adds	r3, #1
 801cb9c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801cb9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cba2:	b29b      	uxth	r3, r3
 801cba4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801cba8:	b29b      	uxth	r3, r3
 801cbaa:	b21b      	sxth	r3, r3
 801cbac:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	461a      	mov	r2, r3
 801cbb2:	f107 0310 	add.w	r3, r7, #16
 801cbb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cbba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cbbe:	68f8      	ldr	r0, [r7, #12]
 801cbc0:	371c      	adds	r7, #28
 801cbc2:	46bd      	mov	sp, r7
 801cbc4:	bc80      	pop	{r7}
 801cbc6:	b002      	add	sp, #8
 801cbc8:	4770      	bx	lr

0801cbca <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801cbca:	b082      	sub	sp, #8
 801cbcc:	b480      	push	{r7}
 801cbce:	b087      	sub	sp, #28
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	60f8      	str	r0, [r7, #12]
 801cbd4:	1d38      	adds	r0, r7, #4
 801cbd6:	e880 0006 	stmia.w	r0, {r1, r2}
 801cbda:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801cbdc:	2300      	movs	r3, #0
 801cbde:	613b      	str	r3, [r7, #16]
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801cbe4:	687a      	ldr	r2, [r7, #4]
 801cbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbe8:	1ad3      	subs	r3, r2, r3
 801cbea:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801cbec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801cbf0:	b29a      	uxth	r2, r3
 801cbf2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801cbf6:	b29b      	uxth	r3, r3
 801cbf8:	1ad3      	subs	r3, r2, r3
 801cbfa:	b29b      	uxth	r3, r3
 801cbfc:	b21b      	sxth	r3, r3
 801cbfe:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801cc00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	da0a      	bge.n	801cc1e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801cc08:	693b      	ldr	r3, [r7, #16]
 801cc0a:	3b01      	subs	r3, #1
 801cc0c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801cc0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801cc12:	b29b      	uxth	r3, r3
 801cc14:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801cc18:	b29b      	uxth	r3, r3
 801cc1a:	b21b      	sxth	r3, r3
 801cc1c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	461a      	mov	r2, r3
 801cc22:	f107 0310 	add.w	r3, r7, #16
 801cc26:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cc2a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cc2e:	68f8      	ldr	r0, [r7, #12]
 801cc30:	371c      	adds	r7, #28
 801cc32:	46bd      	mov	sp, r7
 801cc34:	bc80      	pop	{r7}
 801cc36:	b002      	add	sp, #8
 801cc38:	4770      	bx	lr
	...

0801cc3c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801cc3c:	b580      	push	{r7, lr}
 801cc3e:	b088      	sub	sp, #32
 801cc40:	af02      	add	r7, sp, #8
 801cc42:	463b      	mov	r3, r7
 801cc44:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cc48:	2300      	movs	r3, #0
 801cc4a:	60bb      	str	r3, [r7, #8]
 801cc4c:	2300      	movs	r3, #0
 801cc4e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cc50:	4b10      	ldr	r3, [pc, #64]	; (801cc94 <SysTimeSet+0x58>)
 801cc52:	691b      	ldr	r3, [r3, #16]
 801cc54:	f107 0208 	add.w	r2, r7, #8
 801cc58:	3204      	adds	r2, #4
 801cc5a:	4610      	mov	r0, r2
 801cc5c:	4798      	blx	r3
 801cc5e:	4603      	mov	r3, r0
 801cc60:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801cc62:	f107 0010 	add.w	r0, r7, #16
 801cc66:	68fb      	ldr	r3, [r7, #12]
 801cc68:	9300      	str	r3, [sp, #0]
 801cc6a:	68bb      	ldr	r3, [r7, #8]
 801cc6c:	463a      	mov	r2, r7
 801cc6e:	ca06      	ldmia	r2, {r1, r2}
 801cc70:	f7ff ffab 	bl	801cbca <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801cc74:	4b07      	ldr	r3, [pc, #28]	; (801cc94 <SysTimeSet+0x58>)
 801cc76:	681b      	ldr	r3, [r3, #0]
 801cc78:	693a      	ldr	r2, [r7, #16]
 801cc7a:	4610      	mov	r0, r2
 801cc7c:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801cc7e:	4b05      	ldr	r3, [pc, #20]	; (801cc94 <SysTimeSet+0x58>)
 801cc80:	689b      	ldr	r3, [r3, #8]
 801cc82:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801cc86:	4610      	mov	r0, r2
 801cc88:	4798      	blx	r3
}
 801cc8a:	bf00      	nop
 801cc8c:	3718      	adds	r7, #24
 801cc8e:	46bd      	mov	sp, r7
 801cc90:	bd80      	pop	{r7, pc}
 801cc92:	bf00      	nop
 801cc94:	0801e9e0 	.word	0x0801e9e0

0801cc98 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801cc98:	b580      	push	{r7, lr}
 801cc9a:	b08a      	sub	sp, #40	; 0x28
 801cc9c:	af02      	add	r7, sp, #8
 801cc9e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cca0:	2300      	movs	r3, #0
 801cca2:	61bb      	str	r3, [r7, #24]
 801cca4:	2300      	movs	r3, #0
 801cca6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801cca8:	2300      	movs	r3, #0
 801ccaa:	613b      	str	r3, [r7, #16]
 801ccac:	2300      	movs	r3, #0
 801ccae:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ccb0:	4b14      	ldr	r3, [pc, #80]	; (801cd04 <SysTimeGet+0x6c>)
 801ccb2:	691b      	ldr	r3, [r3, #16]
 801ccb4:	f107 0218 	add.w	r2, r7, #24
 801ccb8:	3204      	adds	r2, #4
 801ccba:	4610      	mov	r0, r2
 801ccbc:	4798      	blx	r3
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ccc2:	4b10      	ldr	r3, [pc, #64]	; (801cd04 <SysTimeGet+0x6c>)
 801ccc4:	68db      	ldr	r3, [r3, #12]
 801ccc6:	4798      	blx	r3
 801ccc8:	4603      	mov	r3, r0
 801ccca:	b21b      	sxth	r3, r3
 801cccc:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ccce:	4b0d      	ldr	r3, [pc, #52]	; (801cd04 <SysTimeGet+0x6c>)
 801ccd0:	685b      	ldr	r3, [r3, #4]
 801ccd2:	4798      	blx	r3
 801ccd4:	4603      	mov	r3, r0
 801ccd6:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801ccd8:	f107 0010 	add.w	r0, r7, #16
 801ccdc:	69fb      	ldr	r3, [r7, #28]
 801ccde:	9300      	str	r3, [sp, #0]
 801cce0:	69bb      	ldr	r3, [r7, #24]
 801cce2:	f107 0208 	add.w	r2, r7, #8
 801cce6:	ca06      	ldmia	r2, {r1, r2}
 801cce8:	f7ff ff36 	bl	801cb58 <SysTimeAdd>

  return sysTime;
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	461a      	mov	r2, r3
 801ccf0:	f107 0310 	add.w	r3, r7, #16
 801ccf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ccf8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ccfc:	6878      	ldr	r0, [r7, #4]
 801ccfe:	3720      	adds	r7, #32
 801cd00:	46bd      	mov	sp, r7
 801cd02:	bd80      	pop	{r7, pc}
 801cd04:	0801e9e0 	.word	0x0801e9e0

0801cd08 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	b084      	sub	sp, #16
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801cd10:	2300      	movs	r3, #0
 801cd12:	60bb      	str	r3, [r7, #8]
 801cd14:	2300      	movs	r3, #0
 801cd16:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801cd18:	4b0a      	ldr	r3, [pc, #40]	; (801cd44 <SysTimeGetMcuTime+0x3c>)
 801cd1a:	691b      	ldr	r3, [r3, #16]
 801cd1c:	f107 0208 	add.w	r2, r7, #8
 801cd20:	3204      	adds	r2, #4
 801cd22:	4610      	mov	r0, r2
 801cd24:	4798      	blx	r3
 801cd26:	4603      	mov	r3, r0
 801cd28:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	461a      	mov	r2, r3
 801cd2e:	f107 0308 	add.w	r3, r7, #8
 801cd32:	e893 0003 	ldmia.w	r3, {r0, r1}
 801cd36:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801cd3a:	6878      	ldr	r0, [r7, #4]
 801cd3c:	3710      	adds	r7, #16
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	bd80      	pop	{r7, pc}
 801cd42:	bf00      	nop
 801cd44:	0801e9e0 	.word	0x0801e9e0

0801cd48 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801cd48:	b580      	push	{r7, lr}
 801cd4a:	b088      	sub	sp, #32
 801cd4c:	af02      	add	r7, sp, #8
 801cd4e:	463b      	mov	r3, r7
 801cd50:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cd54:	4b0f      	ldr	r3, [pc, #60]	; (801cd94 <SysTimeToMs+0x4c>)
 801cd56:	68db      	ldr	r3, [r3, #12]
 801cd58:	4798      	blx	r3
 801cd5a:	4603      	mov	r3, r0
 801cd5c:	b21b      	sxth	r3, r3
 801cd5e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cd60:	4b0c      	ldr	r3, [pc, #48]	; (801cd94 <SysTimeToMs+0x4c>)
 801cd62:	685b      	ldr	r3, [r3, #4]
 801cd64:	4798      	blx	r3
 801cd66:	4603      	mov	r3, r0
 801cd68:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801cd6a:	f107 0008 	add.w	r0, r7, #8
 801cd6e:	697b      	ldr	r3, [r7, #20]
 801cd70:	9300      	str	r3, [sp, #0]
 801cd72:	693b      	ldr	r3, [r7, #16]
 801cd74:	463a      	mov	r2, r7
 801cd76:	ca06      	ldmia	r2, {r1, r2}
 801cd78:	f7ff ff27 	bl	801cbca <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801cd82:	fb02 f303 	mul.w	r3, r2, r3
 801cd86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801cd8a:	4413      	add	r3, r2
}
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	3718      	adds	r7, #24
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd80      	pop	{r7, pc}
 801cd94:	0801e9e0 	.word	0x0801e9e0

0801cd98 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801cd98:	b580      	push	{r7, lr}
 801cd9a:	b08a      	sub	sp, #40	; 0x28
 801cd9c:	af02      	add	r7, sp, #8
 801cd9e:	6078      	str	r0, [r7, #4]
 801cda0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801cda2:	683b      	ldr	r3, [r7, #0]
 801cda4:	4a19      	ldr	r2, [pc, #100]	; (801ce0c <SysTimeFromMs+0x74>)
 801cda6:	fba2 2303 	umull	r2, r3, r2, r3
 801cdaa:	099b      	lsrs	r3, r3, #6
 801cdac:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801cdae:	69fb      	ldr	r3, [r7, #28]
 801cdb0:	617b      	str	r3, [r7, #20]
 801cdb2:	683b      	ldr	r3, [r7, #0]
 801cdb4:	b29a      	uxth	r2, r3
 801cdb6:	69fb      	ldr	r3, [r7, #28]
 801cdb8:	b29b      	uxth	r3, r3
 801cdba:	4619      	mov	r1, r3
 801cdbc:	0149      	lsls	r1, r1, #5
 801cdbe:	1ac9      	subs	r1, r1, r3
 801cdc0:	0089      	lsls	r1, r1, #2
 801cdc2:	440b      	add	r3, r1
 801cdc4:	00db      	lsls	r3, r3, #3
 801cdc6:	b29b      	uxth	r3, r3
 801cdc8:	1ad3      	subs	r3, r2, r3
 801cdca:	b29b      	uxth	r3, r3
 801cdcc:	b21b      	sxth	r3, r3
 801cdce:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801cdd0:	f107 030c 	add.w	r3, r7, #12
 801cdd4:	2200      	movs	r2, #0
 801cdd6:	601a      	str	r2, [r3, #0]
 801cdd8:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801cdda:	4b0d      	ldr	r3, [pc, #52]	; (801ce10 <SysTimeFromMs+0x78>)
 801cddc:	68db      	ldr	r3, [r3, #12]
 801cdde:	4798      	blx	r3
 801cde0:	4603      	mov	r3, r0
 801cde2:	b21b      	sxth	r3, r3
 801cde4:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801cde6:	4b0a      	ldr	r3, [pc, #40]	; (801ce10 <SysTimeFromMs+0x78>)
 801cde8:	685b      	ldr	r3, [r3, #4]
 801cdea:	4798      	blx	r3
 801cdec:	4603      	mov	r3, r0
 801cdee:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801cdf0:	6878      	ldr	r0, [r7, #4]
 801cdf2:	693b      	ldr	r3, [r7, #16]
 801cdf4:	9300      	str	r3, [sp, #0]
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	f107 0214 	add.w	r2, r7, #20
 801cdfc:	ca06      	ldmia	r2, {r1, r2}
 801cdfe:	f7ff feab 	bl	801cb58 <SysTimeAdd>
}
 801ce02:	6878      	ldr	r0, [r7, #4]
 801ce04:	3720      	adds	r7, #32
 801ce06:	46bd      	mov	sp, r7
 801ce08:	bd80      	pop	{r7, pc}
 801ce0a:	bf00      	nop
 801ce0c:	10624dd3 	.word	0x10624dd3
 801ce10:	0801e9e0 	.word	0x0801e9e0

0801ce14 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801ce14:	b480      	push	{r7}
 801ce16:	b085      	sub	sp, #20
 801ce18:	af00      	add	r7, sp, #0
 801ce1a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801ce20:	e00e      	b.n	801ce40 <ee_skip_atoi+0x2c>
 801ce22:	68fa      	ldr	r2, [r7, #12]
 801ce24:	4613      	mov	r3, r2
 801ce26:	009b      	lsls	r3, r3, #2
 801ce28:	4413      	add	r3, r2
 801ce2a:	005b      	lsls	r3, r3, #1
 801ce2c:	4618      	mov	r0, r3
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	1c59      	adds	r1, r3, #1
 801ce34:	687a      	ldr	r2, [r7, #4]
 801ce36:	6011      	str	r1, [r2, #0]
 801ce38:	781b      	ldrb	r3, [r3, #0]
 801ce3a:	4403      	add	r3, r0
 801ce3c:	3b30      	subs	r3, #48	; 0x30
 801ce3e:	60fb      	str	r3, [r7, #12]
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	681b      	ldr	r3, [r3, #0]
 801ce44:	781b      	ldrb	r3, [r3, #0]
 801ce46:	2b2f      	cmp	r3, #47	; 0x2f
 801ce48:	d904      	bls.n	801ce54 <ee_skip_atoi+0x40>
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	681b      	ldr	r3, [r3, #0]
 801ce4e:	781b      	ldrb	r3, [r3, #0]
 801ce50:	2b39      	cmp	r3, #57	; 0x39
 801ce52:	d9e6      	bls.n	801ce22 <ee_skip_atoi+0xe>
  return i;
 801ce54:	68fb      	ldr	r3, [r7, #12]
}
 801ce56:	4618      	mov	r0, r3
 801ce58:	3714      	adds	r7, #20
 801ce5a:	46bd      	mov	sp, r7
 801ce5c:	bc80      	pop	{r7}
 801ce5e:	4770      	bx	lr

0801ce60 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801ce60:	b480      	push	{r7}
 801ce62:	b099      	sub	sp, #100	; 0x64
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	60f8      	str	r0, [r7, #12]
 801ce68:	60b9      	str	r1, [r7, #8]
 801ce6a:	607a      	str	r2, [r7, #4]
 801ce6c:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801ce6e:	4b71      	ldr	r3, [pc, #452]	; (801d034 <ee_number+0x1d4>)
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801ce74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d002      	beq.n	801ce84 <ee_number+0x24>
 801ce7e:	4b6e      	ldr	r3, [pc, #440]	; (801d038 <ee_number+0x1d8>)
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801ce84:	683b      	ldr	r3, [r7, #0]
 801ce86:	2b01      	cmp	r3, #1
 801ce88:	dd02      	ble.n	801ce90 <ee_number+0x30>
 801ce8a:	683b      	ldr	r3, [r7, #0]
 801ce8c:	2b24      	cmp	r3, #36	; 0x24
 801ce8e:	dd01      	ble.n	801ce94 <ee_number+0x34>
 801ce90:	2300      	movs	r3, #0
 801ce92:	e0ca      	b.n	801d02a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801ce94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ce96:	f003 0301 	and.w	r3, r3, #1
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d001      	beq.n	801cea2 <ee_number+0x42>
 801ce9e:	2330      	movs	r3, #48	; 0x30
 801cea0:	e000      	b.n	801cea4 <ee_number+0x44>
 801cea2:	2320      	movs	r3, #32
 801cea4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801cea8:	2300      	movs	r3, #0
 801ceaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801ceae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ceb0:	f003 0302 	and.w	r3, r3, #2
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d00b      	beq.n	801ced0 <ee_number+0x70>
  {
    if (num < 0)
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	2b00      	cmp	r3, #0
 801cebc:	da08      	bge.n	801ced0 <ee_number+0x70>
    {
      sign = '-';
 801cebe:	232d      	movs	r3, #45	; 0x2d
 801cec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	425b      	negs	r3, r3
 801cec8:	607b      	str	r3, [r7, #4]
      size--;
 801ceca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cecc:	3b01      	subs	r3, #1
 801cece:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801ced0:	2300      	movs	r3, #0
 801ced2:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d11e      	bne.n	801cf18 <ee_number+0xb8>
    tmp[i++] = '0';
 801ceda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cedc:	1c5a      	adds	r2, r3, #1
 801cede:	657a      	str	r2, [r7, #84]	; 0x54
 801cee0:	3360      	adds	r3, #96	; 0x60
 801cee2:	443b      	add	r3, r7
 801cee4:	2230      	movs	r2, #48	; 0x30
 801cee6:	f803 2c50 	strb.w	r2, [r3, #-80]
 801ceea:	e018      	b.n	801cf1e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	683a      	ldr	r2, [r7, #0]
 801cef0:	fbb3 f1f2 	udiv	r1, r3, r2
 801cef4:	fb01 f202 	mul.w	r2, r1, r2
 801cef8:	1a9b      	subs	r3, r3, r2
 801cefa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801cefc:	441a      	add	r2, r3
 801cefe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf00:	1c59      	adds	r1, r3, #1
 801cf02:	6579      	str	r1, [r7, #84]	; 0x54
 801cf04:	7812      	ldrb	r2, [r2, #0]
 801cf06:	3360      	adds	r3, #96	; 0x60
 801cf08:	443b      	add	r3, r7
 801cf0a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801cf0e:	687a      	ldr	r2, [r7, #4]
 801cf10:	683b      	ldr	r3, [r7, #0]
 801cf12:	fbb2 f3f3 	udiv	r3, r2, r3
 801cf16:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d1e6      	bne.n	801ceec <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801cf1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cf20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cf22:	429a      	cmp	r2, r3
 801cf24:	dd01      	ble.n	801cf2a <ee_number+0xca>
 801cf26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cf28:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801cf2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801cf2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cf2e:	1ad3      	subs	r3, r2, r3
 801cf30:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801cf32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cf34:	f003 0301 	and.w	r3, r3, #1
 801cf38:	2b00      	cmp	r3, #0
 801cf3a:	d112      	bne.n	801cf62 <ee_number+0x102>
 801cf3c:	e00c      	b.n	801cf58 <ee_number+0xf8>
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	1c5a      	adds	r2, r3, #1
 801cf42:	60fa      	str	r2, [r7, #12]
 801cf44:	2220      	movs	r2, #32
 801cf46:	701a      	strb	r2, [r3, #0]
 801cf48:	68bb      	ldr	r3, [r7, #8]
 801cf4a:	3b01      	subs	r3, #1
 801cf4c:	60bb      	str	r3, [r7, #8]
 801cf4e:	68bb      	ldr	r3, [r7, #8]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d101      	bne.n	801cf58 <ee_number+0xf8>
 801cf54:	68fb      	ldr	r3, [r7, #12]
 801cf56:	e068      	b.n	801d02a <ee_number+0x1ca>
 801cf58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cf5a:	1e5a      	subs	r2, r3, #1
 801cf5c:	66ba      	str	r2, [r7, #104]	; 0x68
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	dced      	bgt.n	801cf3e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801cf62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d01b      	beq.n	801cfa2 <ee_number+0x142>
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	1c5a      	adds	r2, r3, #1
 801cf6e:	60fa      	str	r2, [r7, #12]
 801cf70:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801cf74:	701a      	strb	r2, [r3, #0]
 801cf76:	68bb      	ldr	r3, [r7, #8]
 801cf78:	3b01      	subs	r3, #1
 801cf7a:	60bb      	str	r3, [r7, #8]
 801cf7c:	68bb      	ldr	r3, [r7, #8]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d10f      	bne.n	801cfa2 <ee_number+0x142>
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	e051      	b.n	801d02a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801cf86:	68fb      	ldr	r3, [r7, #12]
 801cf88:	1c5a      	adds	r2, r3, #1
 801cf8a:	60fa      	str	r2, [r7, #12]
 801cf8c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801cf90:	701a      	strb	r2, [r3, #0]
 801cf92:	68bb      	ldr	r3, [r7, #8]
 801cf94:	3b01      	subs	r3, #1
 801cf96:	60bb      	str	r3, [r7, #8]
 801cf98:	68bb      	ldr	r3, [r7, #8]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d101      	bne.n	801cfa2 <ee_number+0x142>
 801cf9e:	68fb      	ldr	r3, [r7, #12]
 801cfa0:	e043      	b.n	801d02a <ee_number+0x1ca>
 801cfa2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801cfa4:	1e5a      	subs	r2, r3, #1
 801cfa6:	66ba      	str	r2, [r7, #104]	; 0x68
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	dcec      	bgt.n	801cf86 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801cfac:	e00c      	b.n	801cfc8 <ee_number+0x168>
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	1c5a      	adds	r2, r3, #1
 801cfb2:	60fa      	str	r2, [r7, #12]
 801cfb4:	2230      	movs	r2, #48	; 0x30
 801cfb6:	701a      	strb	r2, [r3, #0]
 801cfb8:	68bb      	ldr	r3, [r7, #8]
 801cfba:	3b01      	subs	r3, #1
 801cfbc:	60bb      	str	r3, [r7, #8]
 801cfbe:	68bb      	ldr	r3, [r7, #8]
 801cfc0:	2b00      	cmp	r3, #0
 801cfc2:	d101      	bne.n	801cfc8 <ee_number+0x168>
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	e030      	b.n	801d02a <ee_number+0x1ca>
 801cfc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801cfca:	1e5a      	subs	r2, r3, #1
 801cfcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 801cfce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cfd0:	429a      	cmp	r2, r3
 801cfd2:	dbec      	blt.n	801cfae <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801cfd4:	e010      	b.n	801cff8 <ee_number+0x198>
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	1c5a      	adds	r2, r3, #1
 801cfda:	60fa      	str	r2, [r7, #12]
 801cfdc:	f107 0110 	add.w	r1, r7, #16
 801cfe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801cfe2:	440a      	add	r2, r1
 801cfe4:	7812      	ldrb	r2, [r2, #0]
 801cfe6:	701a      	strb	r2, [r3, #0]
 801cfe8:	68bb      	ldr	r3, [r7, #8]
 801cfea:	3b01      	subs	r3, #1
 801cfec:	60bb      	str	r3, [r7, #8]
 801cfee:	68bb      	ldr	r3, [r7, #8]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d101      	bne.n	801cff8 <ee_number+0x198>
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	e018      	b.n	801d02a <ee_number+0x1ca>
 801cff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cffa:	1e5a      	subs	r2, r3, #1
 801cffc:	657a      	str	r2, [r7, #84]	; 0x54
 801cffe:	2b00      	cmp	r3, #0
 801d000:	dce9      	bgt.n	801cfd6 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d002:	e00c      	b.n	801d01e <ee_number+0x1be>
 801d004:	68fb      	ldr	r3, [r7, #12]
 801d006:	1c5a      	adds	r2, r3, #1
 801d008:	60fa      	str	r2, [r7, #12]
 801d00a:	2220      	movs	r2, #32
 801d00c:	701a      	strb	r2, [r3, #0]
 801d00e:	68bb      	ldr	r3, [r7, #8]
 801d010:	3b01      	subs	r3, #1
 801d012:	60bb      	str	r3, [r7, #8]
 801d014:	68bb      	ldr	r3, [r7, #8]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d101      	bne.n	801d01e <ee_number+0x1be>
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	e005      	b.n	801d02a <ee_number+0x1ca>
 801d01e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d020:	1e5a      	subs	r2, r3, #1
 801d022:	66ba      	str	r2, [r7, #104]	; 0x68
 801d024:	2b00      	cmp	r3, #0
 801d026:	dced      	bgt.n	801d004 <ee_number+0x1a4>

  return str;
 801d028:	68fb      	ldr	r3, [r7, #12]
}
 801d02a:	4618      	mov	r0, r3
 801d02c:	3764      	adds	r7, #100	; 0x64
 801d02e:	46bd      	mov	sp, r7
 801d030:	bc80      	pop	{r7}
 801d032:	4770      	bx	lr
 801d034:	20000138 	.word	0x20000138
 801d038:	2000013c 	.word	0x2000013c

0801d03c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801d03c:	b580      	push	{r7, lr}
 801d03e:	b092      	sub	sp, #72	; 0x48
 801d040:	af04      	add	r7, sp, #16
 801d042:	60f8      	str	r0, [r7, #12]
 801d044:	60b9      	str	r1, [r7, #8]
 801d046:	607a      	str	r2, [r7, #4]
 801d048:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801d04a:	68bb      	ldr	r3, [r7, #8]
 801d04c:	2b00      	cmp	r3, #0
 801d04e:	dc01      	bgt.n	801d054 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801d050:	2300      	movs	r3, #0
 801d052:	e13e      	b.n	801d2d2 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d054:	68fb      	ldr	r3, [r7, #12]
 801d056:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d058:	e128      	b.n	801d2ac <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801d05a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d05c:	68fb      	ldr	r3, [r7, #12]
 801d05e:	1ad2      	subs	r2, r2, r3
 801d060:	68bb      	ldr	r3, [r7, #8]
 801d062:	3b01      	subs	r3, #1
 801d064:	429a      	cmp	r2, r3
 801d066:	f280 812e 	bge.w	801d2c6 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801d06a:	687b      	ldr	r3, [r7, #4]
 801d06c:	781b      	ldrb	r3, [r3, #0]
 801d06e:	2b25      	cmp	r3, #37	; 0x25
 801d070:	d006      	beq.n	801d080 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801d072:	687a      	ldr	r2, [r7, #4]
 801d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d076:	1c59      	adds	r1, r3, #1
 801d078:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d07a:	7812      	ldrb	r2, [r2, #0]
 801d07c:	701a      	strb	r2, [r3, #0]
      continue;
 801d07e:	e112      	b.n	801d2a6 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801d080:	2300      	movs	r3, #0
 801d082:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	3301      	adds	r3, #1
 801d088:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	781b      	ldrb	r3, [r3, #0]
 801d08e:	2b30      	cmp	r3, #48	; 0x30
 801d090:	d103      	bne.n	801d09a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801d092:	6a3b      	ldr	r3, [r7, #32]
 801d094:	f043 0301 	orr.w	r3, r3, #1
 801d098:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801d09a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d09e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801d0a0:	687b      	ldr	r3, [r7, #4]
 801d0a2:	781b      	ldrb	r3, [r3, #0]
 801d0a4:	2b2f      	cmp	r3, #47	; 0x2f
 801d0a6:	d908      	bls.n	801d0ba <tiny_vsnprintf_like+0x7e>
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	781b      	ldrb	r3, [r3, #0]
 801d0ac:	2b39      	cmp	r3, #57	; 0x39
 801d0ae:	d804      	bhi.n	801d0ba <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801d0b0:	1d3b      	adds	r3, r7, #4
 801d0b2:	4618      	mov	r0, r3
 801d0b4:	f7ff feae 	bl	801ce14 <ee_skip_atoi>
 801d0b8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801d0ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d0be:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801d0c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d0c4:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801d0c6:	230a      	movs	r3, #10
 801d0c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	781b      	ldrb	r3, [r3, #0]
 801d0ce:	3b58      	subs	r3, #88	; 0x58
 801d0d0:	2b20      	cmp	r3, #32
 801d0d2:	f200 8094 	bhi.w	801d1fe <tiny_vsnprintf_like+0x1c2>
 801d0d6:	a201      	add	r2, pc, #4	; (adr r2, 801d0dc <tiny_vsnprintf_like+0xa0>)
 801d0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0dc:	0801d1e7 	.word	0x0801d1e7
 801d0e0:	0801d1ff 	.word	0x0801d1ff
 801d0e4:	0801d1ff 	.word	0x0801d1ff
 801d0e8:	0801d1ff 	.word	0x0801d1ff
 801d0ec:	0801d1ff 	.word	0x0801d1ff
 801d0f0:	0801d1ff 	.word	0x0801d1ff
 801d0f4:	0801d1ff 	.word	0x0801d1ff
 801d0f8:	0801d1ff 	.word	0x0801d1ff
 801d0fc:	0801d1ff 	.word	0x0801d1ff
 801d100:	0801d1ff 	.word	0x0801d1ff
 801d104:	0801d1ff 	.word	0x0801d1ff
 801d108:	0801d16b 	.word	0x0801d16b
 801d10c:	0801d1f5 	.word	0x0801d1f5
 801d110:	0801d1ff 	.word	0x0801d1ff
 801d114:	0801d1ff 	.word	0x0801d1ff
 801d118:	0801d1ff 	.word	0x0801d1ff
 801d11c:	0801d1ff 	.word	0x0801d1ff
 801d120:	0801d1f5 	.word	0x0801d1f5
 801d124:	0801d1ff 	.word	0x0801d1ff
 801d128:	0801d1ff 	.word	0x0801d1ff
 801d12c:	0801d1ff 	.word	0x0801d1ff
 801d130:	0801d1ff 	.word	0x0801d1ff
 801d134:	0801d1ff 	.word	0x0801d1ff
 801d138:	0801d1ff 	.word	0x0801d1ff
 801d13c:	0801d1ff 	.word	0x0801d1ff
 801d140:	0801d1ff 	.word	0x0801d1ff
 801d144:	0801d1ff 	.word	0x0801d1ff
 801d148:	0801d18b 	.word	0x0801d18b
 801d14c:	0801d1ff 	.word	0x0801d1ff
 801d150:	0801d24b 	.word	0x0801d24b
 801d154:	0801d1ff 	.word	0x0801d1ff
 801d158:	0801d1ff 	.word	0x0801d1ff
 801d15c:	0801d1ef 	.word	0x0801d1ef
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d162:	1c5a      	adds	r2, r3, #1
 801d164:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d166:	2220      	movs	r2, #32
 801d168:	701a      	strb	r2, [r3, #0]
 801d16a:	69fb      	ldr	r3, [r7, #28]
 801d16c:	3b01      	subs	r3, #1
 801d16e:	61fb      	str	r3, [r7, #28]
 801d170:	69fb      	ldr	r3, [r7, #28]
 801d172:	2b00      	cmp	r3, #0
 801d174:	dcf4      	bgt.n	801d160 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801d176:	683b      	ldr	r3, [r7, #0]
 801d178:	1d1a      	adds	r2, r3, #4
 801d17a:	603a      	str	r2, [r7, #0]
 801d17c:	6819      	ldr	r1, [r3, #0]
 801d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d180:	1c5a      	adds	r2, r3, #1
 801d182:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d184:	b2ca      	uxtb	r2, r1
 801d186:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801d188:	e08d      	b.n	801d2a6 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801d18a:	683b      	ldr	r3, [r7, #0]
 801d18c:	1d1a      	adds	r2, r3, #4
 801d18e:	603a      	str	r2, [r7, #0]
 801d190:	681b      	ldr	r3, [r3, #0]
 801d192:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d196:	2b00      	cmp	r3, #0
 801d198:	d101      	bne.n	801d19e <tiny_vsnprintf_like+0x162>
 801d19a:	4b50      	ldr	r3, [pc, #320]	; (801d2dc <tiny_vsnprintf_like+0x2a0>)
 801d19c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801d19e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d1a0:	f7e2 ffea 	bl	8000178 <strlen>
 801d1a4:	4603      	mov	r3, r0
 801d1a6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801d1a8:	e004      	b.n	801d1b4 <tiny_vsnprintf_like+0x178>
 801d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1ac:	1c5a      	adds	r2, r3, #1
 801d1ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d1b0:	2220      	movs	r2, #32
 801d1b2:	701a      	strb	r2, [r3, #0]
 801d1b4:	69fb      	ldr	r3, [r7, #28]
 801d1b6:	1e5a      	subs	r2, r3, #1
 801d1b8:	61fa      	str	r2, [r7, #28]
 801d1ba:	693a      	ldr	r2, [r7, #16]
 801d1bc:	429a      	cmp	r2, r3
 801d1be:	dbf4      	blt.n	801d1aa <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	62bb      	str	r3, [r7, #40]	; 0x28
 801d1c4:	e00a      	b.n	801d1dc <tiny_vsnprintf_like+0x1a0>
 801d1c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d1c8:	1c53      	adds	r3, r2, #1
 801d1ca:	627b      	str	r3, [r7, #36]	; 0x24
 801d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1ce:	1c59      	adds	r1, r3, #1
 801d1d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d1d2:	7812      	ldrb	r2, [r2, #0]
 801d1d4:	701a      	strb	r2, [r3, #0]
 801d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1d8:	3301      	adds	r3, #1
 801d1da:	62bb      	str	r3, [r7, #40]	; 0x28
 801d1dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d1de:	693b      	ldr	r3, [r7, #16]
 801d1e0:	429a      	cmp	r2, r3
 801d1e2:	dbf0      	blt.n	801d1c6 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801d1e4:	e05f      	b.n	801d2a6 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801d1e6:	6a3b      	ldr	r3, [r7, #32]
 801d1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d1ec:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801d1ee:	2310      	movs	r3, #16
 801d1f0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801d1f2:	e02b      	b.n	801d24c <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801d1f4:	6a3b      	ldr	r3, [r7, #32]
 801d1f6:	f043 0302 	orr.w	r3, r3, #2
 801d1fa:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801d1fc:	e025      	b.n	801d24a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	781b      	ldrb	r3, [r3, #0]
 801d202:	2b25      	cmp	r3, #37	; 0x25
 801d204:	d004      	beq.n	801d210 <tiny_vsnprintf_like+0x1d4>
 801d206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d208:	1c5a      	adds	r2, r3, #1
 801d20a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801d20c:	2225      	movs	r2, #37	; 0x25
 801d20e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801d210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d212:	68fb      	ldr	r3, [r7, #12]
 801d214:	1ad2      	subs	r2, r2, r3
 801d216:	68bb      	ldr	r3, [r7, #8]
 801d218:	3b01      	subs	r3, #1
 801d21a:	429a      	cmp	r2, r3
 801d21c:	da16      	bge.n	801d24c <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	781b      	ldrb	r3, [r3, #0]
 801d222:	2b00      	cmp	r3, #0
 801d224:	d006      	beq.n	801d234 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801d226:	687a      	ldr	r2, [r7, #4]
 801d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d22a:	1c59      	adds	r1, r3, #1
 801d22c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801d22e:	7812      	ldrb	r2, [r2, #0]
 801d230:	701a      	strb	r2, [r3, #0]
 801d232:	e002      	b.n	801d23a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	3b01      	subs	r3, #1
 801d238:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801d23a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	1ad2      	subs	r2, r2, r3
 801d240:	68bb      	ldr	r3, [r7, #8]
 801d242:	3b01      	subs	r3, #1
 801d244:	429a      	cmp	r2, r3
 801d246:	db2d      	blt.n	801d2a4 <tiny_vsnprintf_like+0x268>
 801d248:	e000      	b.n	801d24c <tiny_vsnprintf_like+0x210>
        break;
 801d24a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801d24c:	697b      	ldr	r3, [r7, #20]
 801d24e:	2b6c      	cmp	r3, #108	; 0x6c
 801d250:	d105      	bne.n	801d25e <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801d252:	683b      	ldr	r3, [r7, #0]
 801d254:	1d1a      	adds	r2, r3, #4
 801d256:	603a      	str	r2, [r7, #0]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	637b      	str	r3, [r7, #52]	; 0x34
 801d25c:	e00f      	b.n	801d27e <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801d25e:	6a3b      	ldr	r3, [r7, #32]
 801d260:	f003 0302 	and.w	r3, r3, #2
 801d264:	2b00      	cmp	r3, #0
 801d266:	d005      	beq.n	801d274 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801d268:	683b      	ldr	r3, [r7, #0]
 801d26a:	1d1a      	adds	r2, r3, #4
 801d26c:	603a      	str	r2, [r7, #0]
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	637b      	str	r3, [r7, #52]	; 0x34
 801d272:	e004      	b.n	801d27e <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801d274:	683b      	ldr	r3, [r7, #0]
 801d276:	1d1a      	adds	r2, r3, #4
 801d278:	603a      	str	r2, [r7, #0]
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801d27e:	68bb      	ldr	r3, [r7, #8]
 801d280:	1e5a      	subs	r2, r3, #1
 801d282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	1acb      	subs	r3, r1, r3
 801d288:	1ad1      	subs	r1, r2, r3
 801d28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d28c:	6a3b      	ldr	r3, [r7, #32]
 801d28e:	9302      	str	r3, [sp, #8]
 801d290:	69bb      	ldr	r3, [r7, #24]
 801d292:	9301      	str	r3, [sp, #4]
 801d294:	69fb      	ldr	r3, [r7, #28]
 801d296:	9300      	str	r3, [sp, #0]
 801d298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d29a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801d29c:	f7ff fde0 	bl	801ce60 <ee_number>
 801d2a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 801d2a2:	e000      	b.n	801d2a6 <tiny_vsnprintf_like+0x26a>
        continue;
 801d2a4:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801d2a6:	687b      	ldr	r3, [r7, #4]
 801d2a8:	3301      	adds	r3, #1
 801d2aa:	607b      	str	r3, [r7, #4]
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	781b      	ldrb	r3, [r3, #0]
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	f47f aed2 	bne.w	801d05a <tiny_vsnprintf_like+0x1e>
 801d2b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	1ad2      	subs	r2, r2, r3
 801d2bc:	68bb      	ldr	r3, [r7, #8]
 801d2be:	3b01      	subs	r3, #1
 801d2c0:	429a      	cmp	r2, r3
 801d2c2:	f6bf aeca 	bge.w	801d05a <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801d2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2c8:	2200      	movs	r2, #0
 801d2ca:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801d2cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d2ce:	68fb      	ldr	r3, [r7, #12]
 801d2d0:	1ad3      	subs	r3, r2, r3
}
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	3738      	adds	r7, #56	; 0x38
 801d2d6:	46bd      	mov	sp, r7
 801d2d8:	bd80      	pop	{r7, pc}
 801d2da:	bf00      	nop
 801d2dc:	0801e90c 	.word	0x0801e90c

0801d2e0 <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801d2e0:	b580      	push	{r7, lr}
 801d2e2:	b088      	sub	sp, #32
 801d2e4:	af00      	add	r7, sp, #0
 801d2e6:	60f8      	str	r0, [r7, #12]
 801d2e8:	60b9      	str	r1, [r7, #8]
 801d2ea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2ec:	f3ef 8310 	mrs	r3, PRIMASK
 801d2f0:	617b      	str	r3, [r7, #20]
  return(result);
 801d2f2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801d2f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d2f6:	b672      	cpsid	i
}
 801d2f8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801d2fa:	68f8      	ldr	r0, [r7, #12]
 801d2fc:	f000 f83e 	bl	801d37c <SEQ_BitPosition>
 801d300:	4603      	mov	r3, r0
 801d302:	4619      	mov	r1, r3
 801d304:	4a06      	ldr	r2, [pc, #24]	; (801d320 <UTIL_SEQ_RegTask+0x40>)
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801d30c:	69fb      	ldr	r3, [r7, #28]
 801d30e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d310:	69bb      	ldr	r3, [r7, #24]
 801d312:	f383 8810 	msr	PRIMASK, r3
}
 801d316:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801d318:	bf00      	nop
}
 801d31a:	3720      	adds	r7, #32
 801d31c:	46bd      	mov	sp, r7
 801d31e:	bd80      	pop	{r7, pc}
 801d320:	20001c1c 	.word	0x20001c1c

0801d324 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801d324:	b480      	push	{r7}
 801d326:	b087      	sub	sp, #28
 801d328:	af00      	add	r7, sp, #0
 801d32a:	6078      	str	r0, [r7, #4]
 801d32c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d32e:	f3ef 8310 	mrs	r3, PRIMASK
 801d332:	60fb      	str	r3, [r7, #12]
  return(result);
 801d334:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801d336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d338:	b672      	cpsid	i
}
 801d33a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801d33c:	4b0d      	ldr	r3, [pc, #52]	; (801d374 <UTIL_SEQ_SetTask+0x50>)
 801d33e:	681a      	ldr	r2, [r3, #0]
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	4313      	orrs	r3, r2
 801d344:	4a0b      	ldr	r2, [pc, #44]	; (801d374 <UTIL_SEQ_SetTask+0x50>)
 801d346:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801d348:	4a0b      	ldr	r2, [pc, #44]	; (801d378 <UTIL_SEQ_SetTask+0x54>)
 801d34a:	683b      	ldr	r3, [r7, #0]
 801d34c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	431a      	orrs	r2, r3
 801d354:	4908      	ldr	r1, [pc, #32]	; (801d378 <UTIL_SEQ_SetTask+0x54>)
 801d356:	683b      	ldr	r3, [r7, #0]
 801d358:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801d35c:	697b      	ldr	r3, [r7, #20]
 801d35e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d360:	693b      	ldr	r3, [r7, #16]
 801d362:	f383 8810 	msr	PRIMASK, r3
}
 801d366:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801d368:	bf00      	nop
}
 801d36a:	371c      	adds	r7, #28
 801d36c:	46bd      	mov	sp, r7
 801d36e:	bc80      	pop	{r7}
 801d370:	4770      	bx	lr
 801d372:	bf00      	nop
 801d374:	20001c18 	.word	0x20001c18
 801d378:	20001c2c 	.word	0x20001c2c

0801d37c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801d37c:	b480      	push	{r7}
 801d37e:	b085      	sub	sp, #20
 801d380:	af00      	add	r7, sp, #0
 801d382:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801d384:	2300      	movs	r3, #0
 801d386:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801d38c:	68bb      	ldr	r3, [r7, #8]
 801d38e:	0c1b      	lsrs	r3, r3, #16
 801d390:	041b      	lsls	r3, r3, #16
 801d392:	2b00      	cmp	r3, #0
 801d394:	d104      	bne.n	801d3a0 <SEQ_BitPosition+0x24>
 801d396:	2310      	movs	r3, #16
 801d398:	73fb      	strb	r3, [r7, #15]
 801d39a:	68bb      	ldr	r3, [r7, #8]
 801d39c:	041b      	lsls	r3, r3, #16
 801d39e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801d3a0:	68bb      	ldr	r3, [r7, #8]
 801d3a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d105      	bne.n	801d3b6 <SEQ_BitPosition+0x3a>
 801d3aa:	7bfb      	ldrb	r3, [r7, #15]
 801d3ac:	3308      	adds	r3, #8
 801d3ae:	73fb      	strb	r3, [r7, #15]
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	021b      	lsls	r3, r3, #8
 801d3b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801d3b6:	68bb      	ldr	r3, [r7, #8]
 801d3b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d105      	bne.n	801d3cc <SEQ_BitPosition+0x50>
 801d3c0:	7bfb      	ldrb	r3, [r7, #15]
 801d3c2:	3304      	adds	r3, #4
 801d3c4:	73fb      	strb	r3, [r7, #15]
 801d3c6:	68bb      	ldr	r3, [r7, #8]
 801d3c8:	011b      	lsls	r3, r3, #4
 801d3ca:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801d3cc:	68bb      	ldr	r3, [r7, #8]
 801d3ce:	0f1b      	lsrs	r3, r3, #28
 801d3d0:	4a06      	ldr	r2, [pc, #24]	; (801d3ec <SEQ_BitPosition+0x70>)
 801d3d2:	5cd2      	ldrb	r2, [r2, r3]
 801d3d4:	7bfb      	ldrb	r3, [r7, #15]
 801d3d6:	4413      	add	r3, r2
 801d3d8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801d3da:	7bfb      	ldrb	r3, [r7, #15]
 801d3dc:	f1c3 031f 	rsb	r3, r3, #31
 801d3e0:	b2db      	uxtb	r3, r3
}
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	3714      	adds	r7, #20
 801d3e6:	46bd      	mov	sp, r7
 801d3e8:	bc80      	pop	{r7}
 801d3ea:	4770      	bx	lr
 801d3ec:	0801ef84 	.word	0x0801ef84

0801d3f0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801d3f0:	b580      	push	{r7, lr}
 801d3f2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801d3f4:	4b04      	ldr	r3, [pc, #16]	; (801d408 <UTIL_TIMER_Init+0x18>)
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801d3fa:	4b04      	ldr	r3, [pc, #16]	; (801d40c <UTIL_TIMER_Init+0x1c>)
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	4798      	blx	r3
 801d400:	4603      	mov	r3, r0
}
 801d402:	4618      	mov	r0, r3
 801d404:	bd80      	pop	{r7, pc}
 801d406:	bf00      	nop
 801d408:	20001c34 	.word	0x20001c34
 801d40c:	0801e9b4 	.word	0x0801e9b4

0801d410 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b084      	sub	sp, #16
 801d414:	af00      	add	r7, sp, #0
 801d416:	60f8      	str	r0, [r7, #12]
 801d418:	60b9      	str	r1, [r7, #8]
 801d41a:	603b      	str	r3, [r7, #0]
 801d41c:	4613      	mov	r3, r2
 801d41e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801d420:	68fb      	ldr	r3, [r7, #12]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d023      	beq.n	801d46e <UTIL_TIMER_Create+0x5e>
 801d426:	683b      	ldr	r3, [r7, #0]
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d020      	beq.n	801d46e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801d42c:	68fb      	ldr	r3, [r7, #12]
 801d42e:	2200      	movs	r2, #0
 801d430:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801d432:	4b11      	ldr	r3, [pc, #68]	; (801d478 <UTIL_TIMER_Create+0x68>)
 801d434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d436:	68b8      	ldr	r0, [r7, #8]
 801d438:	4798      	blx	r3
 801d43a:	4602      	mov	r2, r0
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801d440:	68fb      	ldr	r3, [r7, #12]
 801d442:	2200      	movs	r2, #0
 801d444:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	2200      	movs	r2, #0
 801d44a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	2200      	movs	r2, #0
 801d450:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	683a      	ldr	r2, [r7, #0]
 801d456:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	69ba      	ldr	r2, [r7, #24]
 801d45c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	79fa      	ldrb	r2, [r7, #7]
 801d462:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	2200      	movs	r2, #0
 801d468:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801d46a:	2300      	movs	r3, #0
 801d46c:	e000      	b.n	801d470 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801d46e:	2301      	movs	r3, #1
  }
}
 801d470:	4618      	mov	r0, r3
 801d472:	3710      	adds	r7, #16
 801d474:	46bd      	mov	sp, r7
 801d476:	bd80      	pop	{r7, pc}
 801d478:	0801e9b4 	.word	0x0801e9b4

0801d47c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b08a      	sub	sp, #40	; 0x28
 801d480:	af00      	add	r7, sp, #0
 801d482:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d484:	2300      	movs	r3, #0
 801d486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801d48a:	687b      	ldr	r3, [r7, #4]
 801d48c:	2b00      	cmp	r3, #0
 801d48e:	d056      	beq.n	801d53e <UTIL_TIMER_Start+0xc2>
 801d490:	6878      	ldr	r0, [r7, #4]
 801d492:	f000 f9a9 	bl	801d7e8 <TimerExists>
 801d496:	4603      	mov	r3, r0
 801d498:	f083 0301 	eor.w	r3, r3, #1
 801d49c:	b2db      	uxtb	r3, r3
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	d04d      	beq.n	801d53e <UTIL_TIMER_Start+0xc2>
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	7a5b      	ldrb	r3, [r3, #9]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d149      	bne.n	801d53e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d4aa:	f3ef 8310 	mrs	r3, PRIMASK
 801d4ae:	613b      	str	r3, [r7, #16]
  return(result);
 801d4b0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d4b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801d4b4:	b672      	cpsid	i
}
 801d4b6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	685b      	ldr	r3, [r3, #4]
 801d4bc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801d4be:	4b24      	ldr	r3, [pc, #144]	; (801d550 <UTIL_TIMER_Start+0xd4>)
 801d4c0:	6a1b      	ldr	r3, [r3, #32]
 801d4c2:	4798      	blx	r3
 801d4c4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801d4c6:	6a3a      	ldr	r2, [r7, #32]
 801d4c8:	69bb      	ldr	r3, [r7, #24]
 801d4ca:	429a      	cmp	r2, r3
 801d4cc:	d201      	bcs.n	801d4d2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801d4ce:	69bb      	ldr	r3, [r7, #24]
 801d4d0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	6a3a      	ldr	r2, [r7, #32]
 801d4d6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	2200      	movs	r2, #0
 801d4dc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801d4de:	687b      	ldr	r3, [r7, #4]
 801d4e0:	2201      	movs	r2, #1
 801d4e2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	2200      	movs	r2, #0
 801d4e8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801d4ea:	4b1a      	ldr	r3, [pc, #104]	; (801d554 <UTIL_TIMER_Start+0xd8>)
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d106      	bne.n	801d500 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801d4f2:	4b17      	ldr	r3, [pc, #92]	; (801d550 <UTIL_TIMER_Start+0xd4>)
 801d4f4:	691b      	ldr	r3, [r3, #16]
 801d4f6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801d4f8:	6878      	ldr	r0, [r7, #4]
 801d4fa:	f000 f9eb 	bl	801d8d4 <TimerInsertNewHeadTimer>
 801d4fe:	e017      	b.n	801d530 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801d500:	4b13      	ldr	r3, [pc, #76]	; (801d550 <UTIL_TIMER_Start+0xd4>)
 801d502:	699b      	ldr	r3, [r3, #24]
 801d504:	4798      	blx	r3
 801d506:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	681a      	ldr	r2, [r3, #0]
 801d50c:	697b      	ldr	r3, [r7, #20]
 801d50e:	441a      	add	r2, r3
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	681a      	ldr	r2, [r3, #0]
 801d518:	4b0e      	ldr	r3, [pc, #56]	; (801d554 <UTIL_TIMER_Start+0xd8>)
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	429a      	cmp	r2, r3
 801d520:	d203      	bcs.n	801d52a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801d522:	6878      	ldr	r0, [r7, #4]
 801d524:	f000 f9d6 	bl	801d8d4 <TimerInsertNewHeadTimer>
 801d528:	e002      	b.n	801d530 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801d52a:	6878      	ldr	r0, [r7, #4]
 801d52c:	f000 f9a2 	bl	801d874 <TimerInsertTimer>
 801d530:	69fb      	ldr	r3, [r7, #28]
 801d532:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	f383 8810 	msr	PRIMASK, r3
}
 801d53a:	bf00      	nop
  {
 801d53c:	e002      	b.n	801d544 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801d53e:	2301      	movs	r3, #1
 801d540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801d544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801d548:	4618      	mov	r0, r3
 801d54a:	3728      	adds	r7, #40	; 0x28
 801d54c:	46bd      	mov	sp, r7
 801d54e:	bd80      	pop	{r7, pc}
 801d550:	0801e9b4 	.word	0x0801e9b4
 801d554:	20001c34 	.word	0x20001c34

0801d558 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b088      	sub	sp, #32
 801d55c:	af00      	add	r7, sp, #0
 801d55e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d560:	2300      	movs	r3, #0
 801d562:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801d564:	687b      	ldr	r3, [r7, #4]
 801d566:	2b00      	cmp	r3, #0
 801d568:	d05b      	beq.n	801d622 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d56a:	f3ef 8310 	mrs	r3, PRIMASK
 801d56e:	60fb      	str	r3, [r7, #12]
  return(result);
 801d570:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d574:	b672      	cpsid	i
}
 801d576:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801d578:	4b2d      	ldr	r3, [pc, #180]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d57a:	681b      	ldr	r3, [r3, #0]
 801d57c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801d57e:	4b2c      	ldr	r3, [pc, #176]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d580:	681b      	ldr	r3, [r3, #0]
 801d582:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	2201      	movs	r2, #1
 801d588:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801d58a:	4b29      	ldr	r3, [pc, #164]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	2b00      	cmp	r3, #0
 801d590:	d041      	beq.n	801d616 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	2200      	movs	r2, #0
 801d596:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801d598:	4b25      	ldr	r3, [pc, #148]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	687a      	ldr	r2, [r7, #4]
 801d59e:	429a      	cmp	r2, r3
 801d5a0:	d134      	bne.n	801d60c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801d5a2:	4b23      	ldr	r3, [pc, #140]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	2200      	movs	r2, #0
 801d5a8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801d5aa:	4b21      	ldr	r3, [pc, #132]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d5ac:	681b      	ldr	r3, [r3, #0]
 801d5ae:	695b      	ldr	r3, [r3, #20]
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d00a      	beq.n	801d5ca <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801d5b4:	4b1e      	ldr	r3, [pc, #120]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	695b      	ldr	r3, [r3, #20]
 801d5ba:	4a1d      	ldr	r2, [pc, #116]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d5bc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801d5be:	4b1c      	ldr	r3, [pc, #112]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	4618      	mov	r0, r3
 801d5c4:	f000 f92c 	bl	801d820 <TimerSetTimeout>
 801d5c8:	e023      	b.n	801d612 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801d5ca:	4b1a      	ldr	r3, [pc, #104]	; (801d634 <UTIL_TIMER_Stop+0xdc>)
 801d5cc:	68db      	ldr	r3, [r3, #12]
 801d5ce:	4798      	blx	r3
            TimerListHead = NULL;
 801d5d0:	4b17      	ldr	r3, [pc, #92]	; (801d630 <UTIL_TIMER_Stop+0xd8>)
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	601a      	str	r2, [r3, #0]
 801d5d6:	e01c      	b.n	801d612 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801d5d8:	697a      	ldr	r2, [r7, #20]
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	429a      	cmp	r2, r3
 801d5de:	d110      	bne.n	801d602 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801d5e0:	697b      	ldr	r3, [r7, #20]
 801d5e2:	695b      	ldr	r3, [r3, #20]
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d006      	beq.n	801d5f6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801d5e8:	697b      	ldr	r3, [r7, #20]
 801d5ea:	695b      	ldr	r3, [r3, #20]
 801d5ec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d5ee:	69bb      	ldr	r3, [r7, #24]
 801d5f0:	697a      	ldr	r2, [r7, #20]
 801d5f2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801d5f4:	e00d      	b.n	801d612 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801d5fa:	69bb      	ldr	r3, [r7, #24]
 801d5fc:	697a      	ldr	r2, [r7, #20]
 801d5fe:	615a      	str	r2, [r3, #20]
            break;
 801d600:	e007      	b.n	801d612 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801d602:	697b      	ldr	r3, [r7, #20]
 801d604:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801d606:	697b      	ldr	r3, [r7, #20]
 801d608:	695b      	ldr	r3, [r3, #20]
 801d60a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801d60c:	697b      	ldr	r3, [r7, #20]
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d1e2      	bne.n	801d5d8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801d612:	2300      	movs	r3, #0
 801d614:	77fb      	strb	r3, [r7, #31]
 801d616:	693b      	ldr	r3, [r7, #16]
 801d618:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d61a:	68bb      	ldr	r3, [r7, #8]
 801d61c:	f383 8810 	msr	PRIMASK, r3
}
 801d620:	e001      	b.n	801d626 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801d622:	2301      	movs	r3, #1
 801d624:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801d626:	7ffb      	ldrb	r3, [r7, #31]
}
 801d628:	4618      	mov	r0, r3
 801d62a:	3720      	adds	r7, #32
 801d62c:	46bd      	mov	sp, r7
 801d62e:	bd80      	pop	{r7, pc}
 801d630:	20001c34 	.word	0x20001c34
 801d634:	0801e9b4 	.word	0x0801e9b4

0801d638 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801d638:	b580      	push	{r7, lr}
 801d63a:	b084      	sub	sp, #16
 801d63c:	af00      	add	r7, sp, #0
 801d63e:	6078      	str	r0, [r7, #4]
 801d640:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801d642:	2300      	movs	r3, #0
 801d644:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801d646:	687b      	ldr	r3, [r7, #4]
 801d648:	2b00      	cmp	r3, #0
 801d64a:	d102      	bne.n	801d652 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801d64c:	2301      	movs	r3, #1
 801d64e:	73fb      	strb	r3, [r7, #15]
 801d650:	e014      	b.n	801d67c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801d652:	4b0d      	ldr	r3, [pc, #52]	; (801d688 <UTIL_TIMER_SetPeriod+0x50>)
 801d654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d656:	6838      	ldr	r0, [r7, #0]
 801d658:	4798      	blx	r3
 801d65a:	4602      	mov	r2, r0
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801d660:	6878      	ldr	r0, [r7, #4]
 801d662:	f000 f8c1 	bl	801d7e8 <TimerExists>
 801d666:	4603      	mov	r3, r0
 801d668:	2b00      	cmp	r3, #0
 801d66a:	d007      	beq.n	801d67c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801d66c:	6878      	ldr	r0, [r7, #4]
 801d66e:	f7ff ff73 	bl	801d558 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801d672:	6878      	ldr	r0, [r7, #4]
 801d674:	f7ff ff02 	bl	801d47c <UTIL_TIMER_Start>
 801d678:	4603      	mov	r3, r0
 801d67a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801d67c:	7bfb      	ldrb	r3, [r7, #15]
}
 801d67e:	4618      	mov	r0, r3
 801d680:	3710      	adds	r7, #16
 801d682:	46bd      	mov	sp, r7
 801d684:	bd80      	pop	{r7, pc}
 801d686:	bf00      	nop
 801d688:	0801e9b4 	.word	0x0801e9b4

0801d68c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801d68c:	b590      	push	{r4, r7, lr}
 801d68e:	b089      	sub	sp, #36	; 0x24
 801d690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d692:	f3ef 8310 	mrs	r3, PRIMASK
 801d696:	60bb      	str	r3, [r7, #8]
  return(result);
 801d698:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801d69a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d69c:	b672      	cpsid	i
}
 801d69e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801d6a0:	4b38      	ldr	r3, [pc, #224]	; (801d784 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d6a2:	695b      	ldr	r3, [r3, #20]
 801d6a4:	4798      	blx	r3
 801d6a6:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801d6a8:	4b36      	ldr	r3, [pc, #216]	; (801d784 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d6aa:	691b      	ldr	r3, [r3, #16]
 801d6ac:	4798      	blx	r3
 801d6ae:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801d6b0:	693a      	ldr	r2, [r7, #16]
 801d6b2:	697b      	ldr	r3, [r7, #20]
 801d6b4:	1ad3      	subs	r3, r2, r3
 801d6b6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801d6b8:	4b33      	ldr	r3, [pc, #204]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	2b00      	cmp	r3, #0
 801d6be:	d037      	beq.n	801d730 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801d6c0:	4b31      	ldr	r3, [pc, #196]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801d6c6:	69fb      	ldr	r3, [r7, #28]
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	68fa      	ldr	r2, [r7, #12]
 801d6cc:	429a      	cmp	r2, r3
 801d6ce:	d206      	bcs.n	801d6de <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801d6d0:	69fb      	ldr	r3, [r7, #28]
 801d6d2:	681a      	ldr	r2, [r3, #0]
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	1ad2      	subs	r2, r2, r3
 801d6d8:	69fb      	ldr	r3, [r7, #28]
 801d6da:	601a      	str	r2, [r3, #0]
 801d6dc:	e002      	b.n	801d6e4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801d6de:	69fb      	ldr	r3, [r7, #28]
 801d6e0:	2200      	movs	r2, #0
 801d6e2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801d6e4:	69fb      	ldr	r3, [r7, #28]
 801d6e6:	695b      	ldr	r3, [r3, #20]
 801d6e8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801d6ea:	69fb      	ldr	r3, [r7, #28]
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d1ea      	bne.n	801d6c6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d6f0:	e01e      	b.n	801d730 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801d6f2:	4b25      	ldr	r3, [pc, #148]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801d6f8:	4b23      	ldr	r3, [pc, #140]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	695b      	ldr	r3, [r3, #20]
 801d6fe:	4a22      	ldr	r2, [pc, #136]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d700:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801d702:	69fb      	ldr	r3, [r7, #28]
 801d704:	2200      	movs	r2, #0
 801d706:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801d708:	69fb      	ldr	r3, [r7, #28]
 801d70a:	2200      	movs	r2, #0
 801d70c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801d70e:	69fb      	ldr	r3, [r7, #28]
 801d710:	68db      	ldr	r3, [r3, #12]
 801d712:	69fa      	ldr	r2, [r7, #28]
 801d714:	6912      	ldr	r2, [r2, #16]
 801d716:	4610      	mov	r0, r2
 801d718:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801d71a:	69fb      	ldr	r3, [r7, #28]
 801d71c:	7adb      	ldrb	r3, [r3, #11]
 801d71e:	2b01      	cmp	r3, #1
 801d720:	d106      	bne.n	801d730 <UTIL_TIMER_IRQ_Handler+0xa4>
 801d722:	69fb      	ldr	r3, [r7, #28]
 801d724:	7a9b      	ldrb	r3, [r3, #10]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d102      	bne.n	801d730 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801d72a:	69f8      	ldr	r0, [r7, #28]
 801d72c:	f7ff fea6 	bl	801d47c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801d730:	4b15      	ldr	r3, [pc, #84]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	2b00      	cmp	r3, #0
 801d736:	d00d      	beq.n	801d754 <UTIL_TIMER_IRQ_Handler+0xc8>
 801d738:	4b13      	ldr	r3, [pc, #76]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	681b      	ldr	r3, [r3, #0]
 801d73e:	2b00      	cmp	r3, #0
 801d740:	d0d7      	beq.n	801d6f2 <UTIL_TIMER_IRQ_Handler+0x66>
 801d742:	4b11      	ldr	r3, [pc, #68]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	681c      	ldr	r4, [r3, #0]
 801d748:	4b0e      	ldr	r3, [pc, #56]	; (801d784 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801d74a:	699b      	ldr	r3, [r3, #24]
 801d74c:	4798      	blx	r3
 801d74e:	4603      	mov	r3, r0
 801d750:	429c      	cmp	r4, r3
 801d752:	d3ce      	bcc.n	801d6f2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801d754:	4b0c      	ldr	r3, [pc, #48]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d009      	beq.n	801d770 <UTIL_TIMER_IRQ_Handler+0xe4>
 801d75c:	4b0a      	ldr	r3, [pc, #40]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	7a1b      	ldrb	r3, [r3, #8]
 801d762:	2b00      	cmp	r3, #0
 801d764:	d104      	bne.n	801d770 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801d766:	4b08      	ldr	r3, [pc, #32]	; (801d788 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	4618      	mov	r0, r3
 801d76c:	f000 f858 	bl	801d820 <TimerSetTimeout>
 801d770:	69bb      	ldr	r3, [r7, #24]
 801d772:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	f383 8810 	msr	PRIMASK, r3
}
 801d77a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801d77c:	bf00      	nop
 801d77e:	3724      	adds	r7, #36	; 0x24
 801d780:	46bd      	mov	sp, r7
 801d782:	bd90      	pop	{r4, r7, pc}
 801d784:	0801e9b4 	.word	0x0801e9b4
 801d788:	20001c34 	.word	0x20001c34

0801d78c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801d78c:	b580      	push	{r7, lr}
 801d78e:	b082      	sub	sp, #8
 801d790:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801d792:	4b06      	ldr	r3, [pc, #24]	; (801d7ac <UTIL_TIMER_GetCurrentTime+0x20>)
 801d794:	69db      	ldr	r3, [r3, #28]
 801d796:	4798      	blx	r3
 801d798:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801d79a:	4b04      	ldr	r3, [pc, #16]	; (801d7ac <UTIL_TIMER_GetCurrentTime+0x20>)
 801d79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d79e:	6878      	ldr	r0, [r7, #4]
 801d7a0:	4798      	blx	r3
 801d7a2:	4603      	mov	r3, r0
}
 801d7a4:	4618      	mov	r0, r3
 801d7a6:	3708      	adds	r7, #8
 801d7a8:	46bd      	mov	sp, r7
 801d7aa:	bd80      	pop	{r7, pc}
 801d7ac:	0801e9b4 	.word	0x0801e9b4

0801d7b0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801d7b0:	b580      	push	{r7, lr}
 801d7b2:	b084      	sub	sp, #16
 801d7b4:	af00      	add	r7, sp, #0
 801d7b6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801d7b8:	4b0a      	ldr	r3, [pc, #40]	; (801d7e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d7ba:	69db      	ldr	r3, [r3, #28]
 801d7bc:	4798      	blx	r3
 801d7be:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801d7c0:	4b08      	ldr	r3, [pc, #32]	; (801d7e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d7c4:	6878      	ldr	r0, [r7, #4]
 801d7c6:	4798      	blx	r3
 801d7c8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801d7ca:	4b06      	ldr	r3, [pc, #24]	; (801d7e4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801d7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d7ce:	68f9      	ldr	r1, [r7, #12]
 801d7d0:	68ba      	ldr	r2, [r7, #8]
 801d7d2:	1a8a      	subs	r2, r1, r2
 801d7d4:	4610      	mov	r0, r2
 801d7d6:	4798      	blx	r3
 801d7d8:	4603      	mov	r3, r0
}
 801d7da:	4618      	mov	r0, r3
 801d7dc:	3710      	adds	r7, #16
 801d7de:	46bd      	mov	sp, r7
 801d7e0:	bd80      	pop	{r7, pc}
 801d7e2:	bf00      	nop
 801d7e4:	0801e9b4 	.word	0x0801e9b4

0801d7e8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d7e8:	b480      	push	{r7}
 801d7ea:	b085      	sub	sp, #20
 801d7ec:	af00      	add	r7, sp, #0
 801d7ee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d7f0:	4b0a      	ldr	r3, [pc, #40]	; (801d81c <TimerExists+0x34>)
 801d7f2:	681b      	ldr	r3, [r3, #0]
 801d7f4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d7f6:	e008      	b.n	801d80a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d7f8:	68fa      	ldr	r2, [r7, #12]
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	429a      	cmp	r2, r3
 801d7fe:	d101      	bne.n	801d804 <TimerExists+0x1c>
    {
      return true;
 801d800:	2301      	movs	r3, #1
 801d802:	e006      	b.n	801d812 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d804:	68fb      	ldr	r3, [r7, #12]
 801d806:	695b      	ldr	r3, [r3, #20]
 801d808:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d80a:	68fb      	ldr	r3, [r7, #12]
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d1f3      	bne.n	801d7f8 <TimerExists+0x10>
  }
  return false;
 801d810:	2300      	movs	r3, #0
}
 801d812:	4618      	mov	r0, r3
 801d814:	3714      	adds	r7, #20
 801d816:	46bd      	mov	sp, r7
 801d818:	bc80      	pop	{r7}
 801d81a:	4770      	bx	lr
 801d81c:	20001c34 	.word	0x20001c34

0801d820 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d820:	b590      	push	{r4, r7, lr}
 801d822:	b085      	sub	sp, #20
 801d824:	af00      	add	r7, sp, #0
 801d826:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d828:	4b11      	ldr	r3, [pc, #68]	; (801d870 <TimerSetTimeout+0x50>)
 801d82a:	6a1b      	ldr	r3, [r3, #32]
 801d82c:	4798      	blx	r3
 801d82e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	2201      	movs	r2, #1
 801d834:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	681c      	ldr	r4, [r3, #0]
 801d83a:	4b0d      	ldr	r3, [pc, #52]	; (801d870 <TimerSetTimeout+0x50>)
 801d83c:	699b      	ldr	r3, [r3, #24]
 801d83e:	4798      	blx	r3
 801d840:	4602      	mov	r2, r0
 801d842:	68fb      	ldr	r3, [r7, #12]
 801d844:	4413      	add	r3, r2
 801d846:	429c      	cmp	r4, r3
 801d848:	d207      	bcs.n	801d85a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d84a:	4b09      	ldr	r3, [pc, #36]	; (801d870 <TimerSetTimeout+0x50>)
 801d84c:	699b      	ldr	r3, [r3, #24]
 801d84e:	4798      	blx	r3
 801d850:	4602      	mov	r2, r0
 801d852:	68fb      	ldr	r3, [r7, #12]
 801d854:	441a      	add	r2, r3
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d85a:	4b05      	ldr	r3, [pc, #20]	; (801d870 <TimerSetTimeout+0x50>)
 801d85c:	689b      	ldr	r3, [r3, #8]
 801d85e:	687a      	ldr	r2, [r7, #4]
 801d860:	6812      	ldr	r2, [r2, #0]
 801d862:	4610      	mov	r0, r2
 801d864:	4798      	blx	r3
}
 801d866:	bf00      	nop
 801d868:	3714      	adds	r7, #20
 801d86a:	46bd      	mov	sp, r7
 801d86c:	bd90      	pop	{r4, r7, pc}
 801d86e:	bf00      	nop
 801d870:	0801e9b4 	.word	0x0801e9b4

0801d874 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d874:	b480      	push	{r7}
 801d876:	b085      	sub	sp, #20
 801d878:	af00      	add	r7, sp, #0
 801d87a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d87c:	4b14      	ldr	r3, [pc, #80]	; (801d8d0 <TimerInsertTimer+0x5c>)
 801d87e:	681b      	ldr	r3, [r3, #0]
 801d880:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d882:	4b13      	ldr	r3, [pc, #76]	; (801d8d0 <TimerInsertTimer+0x5c>)
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	695b      	ldr	r3, [r3, #20]
 801d888:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d88a:	e012      	b.n	801d8b2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	681a      	ldr	r2, [r3, #0]
 801d890:	68bb      	ldr	r3, [r7, #8]
 801d892:	681b      	ldr	r3, [r3, #0]
 801d894:	429a      	cmp	r2, r3
 801d896:	d905      	bls.n	801d8a4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d898:	68bb      	ldr	r3, [r7, #8]
 801d89a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d89c:	68bb      	ldr	r3, [r7, #8]
 801d89e:	695b      	ldr	r3, [r3, #20]
 801d8a0:	60bb      	str	r3, [r7, #8]
 801d8a2:	e006      	b.n	801d8b2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d8a4:	68fb      	ldr	r3, [r7, #12]
 801d8a6:	687a      	ldr	r2, [r7, #4]
 801d8a8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	68ba      	ldr	r2, [r7, #8]
 801d8ae:	615a      	str	r2, [r3, #20]
        return;
 801d8b0:	e009      	b.n	801d8c6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	695b      	ldr	r3, [r3, #20]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d1e8      	bne.n	801d88c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	687a      	ldr	r2, [r7, #4]
 801d8be:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	2200      	movs	r2, #0
 801d8c4:	615a      	str	r2, [r3, #20]
}
 801d8c6:	3714      	adds	r7, #20
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	bc80      	pop	{r7}
 801d8cc:	4770      	bx	lr
 801d8ce:	bf00      	nop
 801d8d0:	20001c34 	.word	0x20001c34

0801d8d4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d8d4:	b580      	push	{r7, lr}
 801d8d6:	b084      	sub	sp, #16
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d8dc:	4b0b      	ldr	r3, [pc, #44]	; (801d90c <TimerInsertNewHeadTimer+0x38>)
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d002      	beq.n	801d8ee <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d8e8:	68fb      	ldr	r3, [r7, #12]
 801d8ea:	2200      	movs	r2, #0
 801d8ec:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	68fa      	ldr	r2, [r7, #12]
 801d8f2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d8f4:	4a05      	ldr	r2, [pc, #20]	; (801d90c <TimerInsertNewHeadTimer+0x38>)
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d8fa:	4b04      	ldr	r3, [pc, #16]	; (801d90c <TimerInsertNewHeadTimer+0x38>)
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	4618      	mov	r0, r3
 801d900:	f7ff ff8e 	bl	801d820 <TimerSetTimeout>
}
 801d904:	bf00      	nop
 801d906:	3710      	adds	r7, #16
 801d908:	46bd      	mov	sp, r7
 801d90a:	bd80      	pop	{r7, pc}
 801d90c:	20001c34 	.word	0x20001c34

0801d910 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d910:	b580      	push	{r7, lr}
 801d912:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d914:	2218      	movs	r2, #24
 801d916:	2100      	movs	r1, #0
 801d918:	4807      	ldr	r0, [pc, #28]	; (801d938 <UTIL_ADV_TRACE_Init+0x28>)
 801d91a:	f7ff f902 	bl	801cb22 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d91e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d922:	2100      	movs	r1, #0
 801d924:	4805      	ldr	r0, [pc, #20]	; (801d93c <UTIL_ADV_TRACE_Init+0x2c>)
 801d926:	f7ff f8fc 	bl	801cb22 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d92a:	4b05      	ldr	r3, [pc, #20]	; (801d940 <UTIL_ADV_TRACE_Init+0x30>)
 801d92c:	681b      	ldr	r3, [r3, #0]
 801d92e:	4805      	ldr	r0, [pc, #20]	; (801d944 <UTIL_ADV_TRACE_Init+0x34>)
 801d930:	4798      	blx	r3
 801d932:	4603      	mov	r3, r0
}
 801d934:	4618      	mov	r0, r3
 801d936:	bd80      	pop	{r7, pc}
 801d938:	20001c38 	.word	0x20001c38
 801d93c:	20001c50 	.word	0x20001c50
 801d940:	0801e9f4 	.word	0x0801e9f4
 801d944:	0801dbb1 	.word	0x0801dbb1

0801d948 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d948:	b480      	push	{r7}
 801d94a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d94c:	4b06      	ldr	r3, [pc, #24]	; (801d968 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d94e:	8a5a      	ldrh	r2, [r3, #18]
 801d950:	4b05      	ldr	r3, [pc, #20]	; (801d968 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d952:	8a1b      	ldrh	r3, [r3, #16]
 801d954:	429a      	cmp	r2, r3
 801d956:	d101      	bne.n	801d95c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d958:	2301      	movs	r3, #1
 801d95a:	e000      	b.n	801d95e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d95c:	2300      	movs	r3, #0
}
 801d95e:	4618      	mov	r0, r3
 801d960:	46bd      	mov	sp, r7
 801d962:	bc80      	pop	{r7}
 801d964:	4770      	bx	lr
 801d966:	bf00      	nop
 801d968:	20001c38 	.word	0x20001c38

0801d96c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d96c:	b408      	push	{r3}
 801d96e:	b580      	push	{r7, lr}
 801d970:	b08d      	sub	sp, #52	; 0x34
 801d972:	af00      	add	r7, sp, #0
 801d974:	60f8      	str	r0, [r7, #12]
 801d976:	60b9      	str	r1, [r7, #8]
 801d978:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d97a:	2300      	movs	r3, #0
 801d97c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d97e:	2300      	movs	r3, #0
 801d980:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d982:	4b37      	ldr	r3, [pc, #220]	; (801da60 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d984:	7a1b      	ldrb	r3, [r3, #8]
 801d986:	461a      	mov	r2, r3
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	4293      	cmp	r3, r2
 801d98c:	d902      	bls.n	801d994 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d98e:	f06f 0304 	mvn.w	r3, #4
 801d992:	e05e      	b.n	801da52 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d994:	4b32      	ldr	r3, [pc, #200]	; (801da60 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d996:	68da      	ldr	r2, [r3, #12]
 801d998:	68bb      	ldr	r3, [r7, #8]
 801d99a:	4013      	ands	r3, r2
 801d99c:	68ba      	ldr	r2, [r7, #8]
 801d99e:	429a      	cmp	r2, r3
 801d9a0:	d002      	beq.n	801d9a8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d9a2:	f06f 0305 	mvn.w	r3, #5
 801d9a6:	e054      	b.n	801da52 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d9a8:	4b2d      	ldr	r3, [pc, #180]	; (801da60 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d9aa:	685b      	ldr	r3, [r3, #4]
 801d9ac:	2b00      	cmp	r3, #0
 801d9ae:	d00a      	beq.n	801d9c6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	2b00      	cmp	r3, #0
 801d9b4:	d007      	beq.n	801d9c6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d9b6:	4b2a      	ldr	r3, [pc, #168]	; (801da60 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d9b8:	685b      	ldr	r3, [r3, #4]
 801d9ba:	f107 0116 	add.w	r1, r7, #22
 801d9be:	f107 0218 	add.w	r2, r7, #24
 801d9c2:	4610      	mov	r0, r2
 801d9c4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d9c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d9ca:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d9ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d9d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d9d4:	4823      	ldr	r0, [pc, #140]	; (801da64 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d9d6:	f7ff fb31 	bl	801d03c <tiny_vsnprintf_like>
 801d9da:	4603      	mov	r3, r0
 801d9dc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801d9de:	f000 f9f1 	bl	801ddc4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d9e2:	8afa      	ldrh	r2, [r7, #22]
 801d9e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d9e6:	4413      	add	r3, r2
 801d9e8:	b29b      	uxth	r3, r3
 801d9ea:	f107 0214 	add.w	r2, r7, #20
 801d9ee:	4611      	mov	r1, r2
 801d9f0:	4618      	mov	r0, r3
 801d9f2:	f000 f969 	bl	801dcc8 <TRACE_AllocateBufer>
 801d9f6:	4603      	mov	r3, r0
 801d9f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d9fc:	d025      	beq.n	801da4a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d9fe:	2300      	movs	r3, #0
 801da00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801da02:	e00e      	b.n	801da22 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801da04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801da06:	8aba      	ldrh	r2, [r7, #20]
 801da08:	3330      	adds	r3, #48	; 0x30
 801da0a:	443b      	add	r3, r7
 801da0c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801da10:	4b15      	ldr	r3, [pc, #84]	; (801da68 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801da12:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801da14:	8abb      	ldrh	r3, [r7, #20]
 801da16:	3301      	adds	r3, #1
 801da18:	b29b      	uxth	r3, r3
 801da1a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801da1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801da1e:	3301      	adds	r3, #1
 801da20:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801da22:	8afb      	ldrh	r3, [r7, #22]
 801da24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801da26:	429a      	cmp	r2, r3
 801da28:	d3ec      	bcc.n	801da04 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801da2a:	8abb      	ldrh	r3, [r7, #20]
 801da2c:	461a      	mov	r2, r3
 801da2e:	4b0e      	ldr	r3, [pc, #56]	; (801da68 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801da30:	18d0      	adds	r0, r2, r3
 801da32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801da36:	f44f 7100 	mov.w	r1, #512	; 0x200
 801da3a:	f7ff faff 	bl	801d03c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801da3e:	f000 f9df 	bl	801de00 <TRACE_UnLock>

    return TRACE_Send();
 801da42:	f000 f831 	bl	801daa8 <TRACE_Send>
 801da46:	4603      	mov	r3, r0
 801da48:	e003      	b.n	801da52 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801da4a:	f000 f9d9 	bl	801de00 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801da4e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801da52:	4618      	mov	r0, r3
 801da54:	3734      	adds	r7, #52	; 0x34
 801da56:	46bd      	mov	sp, r7
 801da58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801da5c:	b001      	add	sp, #4
 801da5e:	4770      	bx	lr
 801da60:	20001c38 	.word	0x20001c38
 801da64:	20002050 	.word	0x20002050
 801da68:	20001c50 	.word	0x20001c50

0801da6c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801da6c:	b480      	push	{r7}
 801da6e:	b083      	sub	sp, #12
 801da70:	af00      	add	r7, sp, #0
 801da72:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801da74:	4a03      	ldr	r2, [pc, #12]	; (801da84 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	6053      	str	r3, [r2, #4]
}
 801da7a:	bf00      	nop
 801da7c:	370c      	adds	r7, #12
 801da7e:	46bd      	mov	sp, r7
 801da80:	bc80      	pop	{r7}
 801da82:	4770      	bx	lr
 801da84:	20001c38 	.word	0x20001c38

0801da88 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801da88:	b480      	push	{r7}
 801da8a:	b083      	sub	sp, #12
 801da8c:	af00      	add	r7, sp, #0
 801da8e:	4603      	mov	r3, r0
 801da90:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801da92:	4a04      	ldr	r2, [pc, #16]	; (801daa4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801da94:	79fb      	ldrb	r3, [r7, #7]
 801da96:	7213      	strb	r3, [r2, #8]
}
 801da98:	bf00      	nop
 801da9a:	370c      	adds	r7, #12
 801da9c:	46bd      	mov	sp, r7
 801da9e:	bc80      	pop	{r7}
 801daa0:	4770      	bx	lr
 801daa2:	bf00      	nop
 801daa4:	20001c38 	.word	0x20001c38

0801daa8 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801daa8:	b580      	push	{r7, lr}
 801daaa:	b088      	sub	sp, #32
 801daac:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801daae:	2300      	movs	r3, #0
 801dab0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801dab2:	2300      	movs	r3, #0
 801dab4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dab6:	f3ef 8310 	mrs	r3, PRIMASK
 801daba:	613b      	str	r3, [r7, #16]
  return(result);
 801dabc:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dabe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801dac0:	b672      	cpsid	i
}
 801dac2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801dac4:	f000 f9ba 	bl	801de3c <TRACE_IsLocked>
 801dac8:	4603      	mov	r3, r0
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d15d      	bne.n	801db8a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801dace:	f000 f979 	bl	801ddc4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801dad2:	4b34      	ldr	r3, [pc, #208]	; (801dba4 <TRACE_Send+0xfc>)
 801dad4:	8a1a      	ldrh	r2, [r3, #16]
 801dad6:	4b33      	ldr	r3, [pc, #204]	; (801dba4 <TRACE_Send+0xfc>)
 801dad8:	8a5b      	ldrh	r3, [r3, #18]
 801dada:	429a      	cmp	r2, r3
 801dadc:	d04d      	beq.n	801db7a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801dade:	4b31      	ldr	r3, [pc, #196]	; (801dba4 <TRACE_Send+0xfc>)
 801dae0:	789b      	ldrb	r3, [r3, #2]
 801dae2:	2b01      	cmp	r3, #1
 801dae4:	d117      	bne.n	801db16 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801dae6:	4b2f      	ldr	r3, [pc, #188]	; (801dba4 <TRACE_Send+0xfc>)
 801dae8:	881a      	ldrh	r2, [r3, #0]
 801daea:	4b2e      	ldr	r3, [pc, #184]	; (801dba4 <TRACE_Send+0xfc>)
 801daec:	8a1b      	ldrh	r3, [r3, #16]
 801daee:	1ad3      	subs	r3, r2, r3
 801daf0:	b29a      	uxth	r2, r3
 801daf2:	4b2c      	ldr	r3, [pc, #176]	; (801dba4 <TRACE_Send+0xfc>)
 801daf4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801daf6:	4b2b      	ldr	r3, [pc, #172]	; (801dba4 <TRACE_Send+0xfc>)
 801daf8:	2202      	movs	r2, #2
 801dafa:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801dafc:	4b29      	ldr	r3, [pc, #164]	; (801dba4 <TRACE_Send+0xfc>)
 801dafe:	2200      	movs	r2, #0
 801db00:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801db02:	4b28      	ldr	r3, [pc, #160]	; (801dba4 <TRACE_Send+0xfc>)
 801db04:	8a9b      	ldrh	r3, [r3, #20]
 801db06:	2b00      	cmp	r3, #0
 801db08:	d105      	bne.n	801db16 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801db0a:	4b26      	ldr	r3, [pc, #152]	; (801dba4 <TRACE_Send+0xfc>)
 801db0c:	2200      	movs	r2, #0
 801db0e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801db10:	4b24      	ldr	r3, [pc, #144]	; (801dba4 <TRACE_Send+0xfc>)
 801db12:	2200      	movs	r2, #0
 801db14:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801db16:	4b23      	ldr	r3, [pc, #140]	; (801dba4 <TRACE_Send+0xfc>)
 801db18:	789b      	ldrb	r3, [r3, #2]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d115      	bne.n	801db4a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801db1e:	4b21      	ldr	r3, [pc, #132]	; (801dba4 <TRACE_Send+0xfc>)
 801db20:	8a5a      	ldrh	r2, [r3, #18]
 801db22:	4b20      	ldr	r3, [pc, #128]	; (801dba4 <TRACE_Send+0xfc>)
 801db24:	8a1b      	ldrh	r3, [r3, #16]
 801db26:	429a      	cmp	r2, r3
 801db28:	d908      	bls.n	801db3c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801db2a:	4b1e      	ldr	r3, [pc, #120]	; (801dba4 <TRACE_Send+0xfc>)
 801db2c:	8a5a      	ldrh	r2, [r3, #18]
 801db2e:	4b1d      	ldr	r3, [pc, #116]	; (801dba4 <TRACE_Send+0xfc>)
 801db30:	8a1b      	ldrh	r3, [r3, #16]
 801db32:	1ad3      	subs	r3, r2, r3
 801db34:	b29a      	uxth	r2, r3
 801db36:	4b1b      	ldr	r3, [pc, #108]	; (801dba4 <TRACE_Send+0xfc>)
 801db38:	829a      	strh	r2, [r3, #20]
 801db3a:	e006      	b.n	801db4a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801db3c:	4b19      	ldr	r3, [pc, #100]	; (801dba4 <TRACE_Send+0xfc>)
 801db3e:	8a1b      	ldrh	r3, [r3, #16]
 801db40:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801db44:	b29a      	uxth	r2, r3
 801db46:	4b17      	ldr	r3, [pc, #92]	; (801dba4 <TRACE_Send+0xfc>)
 801db48:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801db4a:	4b16      	ldr	r3, [pc, #88]	; (801dba4 <TRACE_Send+0xfc>)
 801db4c:	8a1b      	ldrh	r3, [r3, #16]
 801db4e:	461a      	mov	r2, r3
 801db50:	4b15      	ldr	r3, [pc, #84]	; (801dba8 <TRACE_Send+0x100>)
 801db52:	4413      	add	r3, r2
 801db54:	61bb      	str	r3, [r7, #24]
 801db56:	697b      	ldr	r3, [r7, #20]
 801db58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db5a:	68fb      	ldr	r3, [r7, #12]
 801db5c:	f383 8810 	msr	PRIMASK, r3
}
 801db60:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801db62:	f7e4 fc37 	bl	80023d4 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801db66:	4b11      	ldr	r3, [pc, #68]	; (801dbac <TRACE_Send+0x104>)
 801db68:	68db      	ldr	r3, [r3, #12]
 801db6a:	4a0e      	ldr	r2, [pc, #56]	; (801dba4 <TRACE_Send+0xfc>)
 801db6c:	8a92      	ldrh	r2, [r2, #20]
 801db6e:	4611      	mov	r1, r2
 801db70:	69b8      	ldr	r0, [r7, #24]
 801db72:	4798      	blx	r3
 801db74:	4603      	mov	r3, r0
 801db76:	77fb      	strb	r3, [r7, #31]
 801db78:	e00d      	b.n	801db96 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801db7a:	f000 f941 	bl	801de00 <TRACE_UnLock>
 801db7e:	697b      	ldr	r3, [r7, #20]
 801db80:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db82:	68bb      	ldr	r3, [r7, #8]
 801db84:	f383 8810 	msr	PRIMASK, r3
}
 801db88:	e005      	b.n	801db96 <TRACE_Send+0xee>
 801db8a:	697b      	ldr	r3, [r7, #20]
 801db8c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	f383 8810 	msr	PRIMASK, r3
}
 801db94:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801db96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801db9a:	4618      	mov	r0, r3
 801db9c:	3720      	adds	r7, #32
 801db9e:	46bd      	mov	sp, r7
 801dba0:	bd80      	pop	{r7, pc}
 801dba2:	bf00      	nop
 801dba4:	20001c38 	.word	0x20001c38
 801dba8:	20001c50 	.word	0x20001c50
 801dbac:	0801e9f4 	.word	0x0801e9f4

0801dbb0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801dbb0:	b580      	push	{r7, lr}
 801dbb2:	b088      	sub	sp, #32
 801dbb4:	af00      	add	r7, sp, #0
 801dbb6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801dbb8:	2300      	movs	r3, #0
 801dbba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dbbc:	f3ef 8310 	mrs	r3, PRIMASK
 801dbc0:	617b      	str	r3, [r7, #20]
  return(result);
 801dbc2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dbc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801dbc6:	b672      	cpsid	i
}
 801dbc8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801dbca:	4b3c      	ldr	r3, [pc, #240]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dbcc:	789b      	ldrb	r3, [r3, #2]
 801dbce:	2b02      	cmp	r3, #2
 801dbd0:	d106      	bne.n	801dbe0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801dbd2:	4b3a      	ldr	r3, [pc, #232]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dbd4:	2200      	movs	r2, #0
 801dbd6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801dbd8:	4b38      	ldr	r3, [pc, #224]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dbda:	2200      	movs	r2, #0
 801dbdc:	821a      	strh	r2, [r3, #16]
 801dbde:	e00a      	b.n	801dbf6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801dbe0:	4b36      	ldr	r3, [pc, #216]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dbe2:	8a1a      	ldrh	r2, [r3, #16]
 801dbe4:	4b35      	ldr	r3, [pc, #212]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dbe6:	8a9b      	ldrh	r3, [r3, #20]
 801dbe8:	4413      	add	r3, r2
 801dbea:	b29b      	uxth	r3, r3
 801dbec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801dbf0:	b29a      	uxth	r2, r3
 801dbf2:	4b32      	ldr	r3, [pc, #200]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dbf4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801dbf6:	4b31      	ldr	r3, [pc, #196]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dbf8:	8a1a      	ldrh	r2, [r3, #16]
 801dbfa:	4b30      	ldr	r3, [pc, #192]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dbfc:	8a5b      	ldrh	r3, [r3, #18]
 801dbfe:	429a      	cmp	r2, r3
 801dc00:	d04d      	beq.n	801dc9e <TRACE_TxCpltCallback+0xee>
 801dc02:	4b2e      	ldr	r3, [pc, #184]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc04:	8adb      	ldrh	r3, [r3, #22]
 801dc06:	2b01      	cmp	r3, #1
 801dc08:	d149      	bne.n	801dc9e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801dc0a:	4b2c      	ldr	r3, [pc, #176]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc0c:	789b      	ldrb	r3, [r3, #2]
 801dc0e:	2b01      	cmp	r3, #1
 801dc10:	d117      	bne.n	801dc42 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801dc12:	4b2a      	ldr	r3, [pc, #168]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc14:	881a      	ldrh	r2, [r3, #0]
 801dc16:	4b29      	ldr	r3, [pc, #164]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc18:	8a1b      	ldrh	r3, [r3, #16]
 801dc1a:	1ad3      	subs	r3, r2, r3
 801dc1c:	b29a      	uxth	r2, r3
 801dc1e:	4b27      	ldr	r3, [pc, #156]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc20:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801dc22:	4b26      	ldr	r3, [pc, #152]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc24:	2202      	movs	r2, #2
 801dc26:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801dc28:	4b24      	ldr	r3, [pc, #144]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc2a:	2200      	movs	r2, #0
 801dc2c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801dc2e:	4b23      	ldr	r3, [pc, #140]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc30:	8a9b      	ldrh	r3, [r3, #20]
 801dc32:	2b00      	cmp	r3, #0
 801dc34:	d105      	bne.n	801dc42 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801dc36:	4b21      	ldr	r3, [pc, #132]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc38:	2200      	movs	r2, #0
 801dc3a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801dc3c:	4b1f      	ldr	r3, [pc, #124]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc3e:	2200      	movs	r2, #0
 801dc40:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801dc42:	4b1e      	ldr	r3, [pc, #120]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc44:	789b      	ldrb	r3, [r3, #2]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d115      	bne.n	801dc76 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801dc4a:	4b1c      	ldr	r3, [pc, #112]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc4c:	8a5a      	ldrh	r2, [r3, #18]
 801dc4e:	4b1b      	ldr	r3, [pc, #108]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc50:	8a1b      	ldrh	r3, [r3, #16]
 801dc52:	429a      	cmp	r2, r3
 801dc54:	d908      	bls.n	801dc68 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801dc56:	4b19      	ldr	r3, [pc, #100]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc58:	8a5a      	ldrh	r2, [r3, #18]
 801dc5a:	4b18      	ldr	r3, [pc, #96]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc5c:	8a1b      	ldrh	r3, [r3, #16]
 801dc5e:	1ad3      	subs	r3, r2, r3
 801dc60:	b29a      	uxth	r2, r3
 801dc62:	4b16      	ldr	r3, [pc, #88]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc64:	829a      	strh	r2, [r3, #20]
 801dc66:	e006      	b.n	801dc76 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801dc68:	4b14      	ldr	r3, [pc, #80]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc6a:	8a1b      	ldrh	r3, [r3, #16]
 801dc6c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801dc70:	b29a      	uxth	r2, r3
 801dc72:	4b12      	ldr	r3, [pc, #72]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc74:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801dc76:	4b11      	ldr	r3, [pc, #68]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc78:	8a1b      	ldrh	r3, [r3, #16]
 801dc7a:	461a      	mov	r2, r3
 801dc7c:	4b10      	ldr	r3, [pc, #64]	; (801dcc0 <TRACE_TxCpltCallback+0x110>)
 801dc7e:	4413      	add	r3, r2
 801dc80:	61fb      	str	r3, [r7, #28]
 801dc82:	69bb      	ldr	r3, [r7, #24]
 801dc84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dc86:	693b      	ldr	r3, [r7, #16]
 801dc88:	f383 8810 	msr	PRIMASK, r3
}
 801dc8c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801dc8e:	4b0d      	ldr	r3, [pc, #52]	; (801dcc4 <TRACE_TxCpltCallback+0x114>)
 801dc90:	68db      	ldr	r3, [r3, #12]
 801dc92:	4a0a      	ldr	r2, [pc, #40]	; (801dcbc <TRACE_TxCpltCallback+0x10c>)
 801dc94:	8a92      	ldrh	r2, [r2, #20]
 801dc96:	4611      	mov	r1, r2
 801dc98:	69f8      	ldr	r0, [r7, #28]
 801dc9a:	4798      	blx	r3
 801dc9c:	e00a      	b.n	801dcb4 <TRACE_TxCpltCallback+0x104>
 801dc9e:	69bb      	ldr	r3, [r7, #24]
 801dca0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dca2:	68fb      	ldr	r3, [r7, #12]
 801dca4:	f383 8810 	msr	PRIMASK, r3
}
 801dca8:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801dcaa:	f7e4 fb9b 	bl	80023e4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801dcae:	f000 f8a7 	bl	801de00 <TRACE_UnLock>
  }
}
 801dcb2:	bf00      	nop
 801dcb4:	bf00      	nop
 801dcb6:	3720      	adds	r7, #32
 801dcb8:	46bd      	mov	sp, r7
 801dcba:	bd80      	pop	{r7, pc}
 801dcbc:	20001c38 	.word	0x20001c38
 801dcc0:	20001c50 	.word	0x20001c50
 801dcc4:	0801e9f4 	.word	0x0801e9f4

0801dcc8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801dcc8:	b480      	push	{r7}
 801dcca:	b087      	sub	sp, #28
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	4603      	mov	r3, r0
 801dcd0:	6039      	str	r1, [r7, #0]
 801dcd2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801dcd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801dcd8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dcda:	f3ef 8310 	mrs	r3, PRIMASK
 801dcde:	60fb      	str	r3, [r7, #12]
  return(result);
 801dce0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801dce2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801dce4:	b672      	cpsid	i
}
 801dce6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801dce8:	4b35      	ldr	r3, [pc, #212]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dcea:	8a5a      	ldrh	r2, [r3, #18]
 801dcec:	4b34      	ldr	r3, [pc, #208]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dcee:	8a1b      	ldrh	r3, [r3, #16]
 801dcf0:	429a      	cmp	r2, r3
 801dcf2:	d11b      	bne.n	801dd2c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801dcf4:	4b32      	ldr	r3, [pc, #200]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dcf6:	8a5b      	ldrh	r3, [r3, #18]
 801dcf8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801dcfc:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801dcfe:	88fa      	ldrh	r2, [r7, #6]
 801dd00:	8afb      	ldrh	r3, [r7, #22]
 801dd02:	429a      	cmp	r2, r3
 801dd04:	d33a      	bcc.n	801dd7c <TRACE_AllocateBufer+0xb4>
 801dd06:	4b2e      	ldr	r3, [pc, #184]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd08:	8a1b      	ldrh	r3, [r3, #16]
 801dd0a:	88fa      	ldrh	r2, [r7, #6]
 801dd0c:	429a      	cmp	r2, r3
 801dd0e:	d235      	bcs.n	801dd7c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801dd10:	4b2b      	ldr	r3, [pc, #172]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd12:	2201      	movs	r2, #1
 801dd14:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801dd16:	4b2a      	ldr	r3, [pc, #168]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd18:	8a5a      	ldrh	r2, [r3, #18]
 801dd1a:	4b29      	ldr	r3, [pc, #164]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd1c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801dd1e:	4b28      	ldr	r3, [pc, #160]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd20:	8a1b      	ldrh	r3, [r3, #16]
 801dd22:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801dd24:	4b26      	ldr	r3, [pc, #152]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd26:	2200      	movs	r2, #0
 801dd28:	825a      	strh	r2, [r3, #18]
 801dd2a:	e027      	b.n	801dd7c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801dd2c:	4b24      	ldr	r3, [pc, #144]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd2e:	8a5a      	ldrh	r2, [r3, #18]
 801dd30:	4b23      	ldr	r3, [pc, #140]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd32:	8a1b      	ldrh	r3, [r3, #16]
 801dd34:	429a      	cmp	r2, r3
 801dd36:	d91b      	bls.n	801dd70 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801dd38:	4b21      	ldr	r3, [pc, #132]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd3a:	8a5b      	ldrh	r3, [r3, #18]
 801dd3c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801dd40:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801dd42:	88fa      	ldrh	r2, [r7, #6]
 801dd44:	8afb      	ldrh	r3, [r7, #22]
 801dd46:	429a      	cmp	r2, r3
 801dd48:	d318      	bcc.n	801dd7c <TRACE_AllocateBufer+0xb4>
 801dd4a:	4b1d      	ldr	r3, [pc, #116]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd4c:	8a1b      	ldrh	r3, [r3, #16]
 801dd4e:	88fa      	ldrh	r2, [r7, #6]
 801dd50:	429a      	cmp	r2, r3
 801dd52:	d213      	bcs.n	801dd7c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801dd54:	4b1a      	ldr	r3, [pc, #104]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd56:	2201      	movs	r2, #1
 801dd58:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801dd5a:	4b19      	ldr	r3, [pc, #100]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd5c:	8a5a      	ldrh	r2, [r3, #18]
 801dd5e:	4b18      	ldr	r3, [pc, #96]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd60:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801dd62:	4b17      	ldr	r3, [pc, #92]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd64:	8a1b      	ldrh	r3, [r3, #16]
 801dd66:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801dd68:	4b15      	ldr	r3, [pc, #84]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd6a:	2200      	movs	r2, #0
 801dd6c:	825a      	strh	r2, [r3, #18]
 801dd6e:	e005      	b.n	801dd7c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801dd70:	4b13      	ldr	r3, [pc, #76]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd72:	8a1a      	ldrh	r2, [r3, #16]
 801dd74:	4b12      	ldr	r3, [pc, #72]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd76:	8a5b      	ldrh	r3, [r3, #18]
 801dd78:	1ad3      	subs	r3, r2, r3
 801dd7a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801dd7c:	8afa      	ldrh	r2, [r7, #22]
 801dd7e:	88fb      	ldrh	r3, [r7, #6]
 801dd80:	429a      	cmp	r2, r3
 801dd82:	d90f      	bls.n	801dda4 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801dd84:	4b0e      	ldr	r3, [pc, #56]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd86:	8a5a      	ldrh	r2, [r3, #18]
 801dd88:	683b      	ldr	r3, [r7, #0]
 801dd8a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801dd8c:	4b0c      	ldr	r3, [pc, #48]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd8e:	8a5a      	ldrh	r2, [r3, #18]
 801dd90:	88fb      	ldrh	r3, [r7, #6]
 801dd92:	4413      	add	r3, r2
 801dd94:	b29b      	uxth	r3, r3
 801dd96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801dd9a:	b29a      	uxth	r2, r3
 801dd9c:	4b08      	ldr	r3, [pc, #32]	; (801ddc0 <TRACE_AllocateBufer+0xf8>)
 801dd9e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801dda0:	2300      	movs	r3, #0
 801dda2:	82bb      	strh	r3, [r7, #20]
 801dda4:	693b      	ldr	r3, [r7, #16]
 801dda6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dda8:	68bb      	ldr	r3, [r7, #8]
 801ddaa:	f383 8810 	msr	PRIMASK, r3
}
 801ddae:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ddb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ddb4:	4618      	mov	r0, r3
 801ddb6:	371c      	adds	r7, #28
 801ddb8:	46bd      	mov	sp, r7
 801ddba:	bc80      	pop	{r7}
 801ddbc:	4770      	bx	lr
 801ddbe:	bf00      	nop
 801ddc0:	20001c38 	.word	0x20001c38

0801ddc4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ddc4:	b480      	push	{r7}
 801ddc6:	b085      	sub	sp, #20
 801ddc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ddca:	f3ef 8310 	mrs	r3, PRIMASK
 801ddce:	607b      	str	r3, [r7, #4]
  return(result);
 801ddd0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ddd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ddd4:	b672      	cpsid	i
}
 801ddd6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ddd8:	4b08      	ldr	r3, [pc, #32]	; (801ddfc <TRACE_Lock+0x38>)
 801ddda:	8adb      	ldrh	r3, [r3, #22]
 801dddc:	3301      	adds	r3, #1
 801ddde:	b29a      	uxth	r2, r3
 801dde0:	4b06      	ldr	r3, [pc, #24]	; (801ddfc <TRACE_Lock+0x38>)
 801dde2:	82da      	strh	r2, [r3, #22]
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dde8:	68bb      	ldr	r3, [r7, #8]
 801ddea:	f383 8810 	msr	PRIMASK, r3
}
 801ddee:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ddf0:	bf00      	nop
 801ddf2:	3714      	adds	r7, #20
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	bc80      	pop	{r7}
 801ddf8:	4770      	bx	lr
 801ddfa:	bf00      	nop
 801ddfc:	20001c38 	.word	0x20001c38

0801de00 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801de00:	b480      	push	{r7}
 801de02:	b085      	sub	sp, #20
 801de04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de06:	f3ef 8310 	mrs	r3, PRIMASK
 801de0a:	607b      	str	r3, [r7, #4]
  return(result);
 801de0c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801de0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801de10:	b672      	cpsid	i
}
 801de12:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801de14:	4b08      	ldr	r3, [pc, #32]	; (801de38 <TRACE_UnLock+0x38>)
 801de16:	8adb      	ldrh	r3, [r3, #22]
 801de18:	3b01      	subs	r3, #1
 801de1a:	b29a      	uxth	r2, r3
 801de1c:	4b06      	ldr	r3, [pc, #24]	; (801de38 <TRACE_UnLock+0x38>)
 801de1e:	82da      	strh	r2, [r3, #22]
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de24:	68bb      	ldr	r3, [r7, #8]
 801de26:	f383 8810 	msr	PRIMASK, r3
}
 801de2a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801de2c:	bf00      	nop
 801de2e:	3714      	adds	r7, #20
 801de30:	46bd      	mov	sp, r7
 801de32:	bc80      	pop	{r7}
 801de34:	4770      	bx	lr
 801de36:	bf00      	nop
 801de38:	20001c38 	.word	0x20001c38

0801de3c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801de3c:	b480      	push	{r7}
 801de3e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801de40:	4b05      	ldr	r3, [pc, #20]	; (801de58 <TRACE_IsLocked+0x1c>)
 801de42:	8adb      	ldrh	r3, [r3, #22]
 801de44:	2b00      	cmp	r3, #0
 801de46:	bf14      	ite	ne
 801de48:	2301      	movne	r3, #1
 801de4a:	2300      	moveq	r3, #0
 801de4c:	b2db      	uxtb	r3, r3
}
 801de4e:	4618      	mov	r0, r3
 801de50:	46bd      	mov	sp, r7
 801de52:	bc80      	pop	{r7}
 801de54:	4770      	bx	lr
 801de56:	bf00      	nop
 801de58:	20001c38 	.word	0x20001c38
 801de5c:	00000000 	.word	0x00000000

0801de60 <floor>:
 801de60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801de64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de68:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801de6c:	2e13      	cmp	r6, #19
 801de6e:	460b      	mov	r3, r1
 801de70:	4607      	mov	r7, r0
 801de72:	460c      	mov	r4, r1
 801de74:	4605      	mov	r5, r0
 801de76:	dc32      	bgt.n	801dede <floor+0x7e>
 801de78:	2e00      	cmp	r6, #0
 801de7a:	da14      	bge.n	801dea6 <floor+0x46>
 801de7c:	a334      	add	r3, pc, #208	; (adr r3, 801df50 <floor+0xf0>)
 801de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de82:	f7e2 f987 	bl	8000194 <__adddf3>
 801de86:	2200      	movs	r2, #0
 801de88:	2300      	movs	r3, #0
 801de8a:	f7e2 fdc9 	bl	8000a20 <__aeabi_dcmpgt>
 801de8e:	b138      	cbz	r0, 801dea0 <floor+0x40>
 801de90:	2c00      	cmp	r4, #0
 801de92:	da56      	bge.n	801df42 <floor+0xe2>
 801de94:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801de98:	4325      	orrs	r5, r4
 801de9a:	d055      	beq.n	801df48 <floor+0xe8>
 801de9c:	4c2e      	ldr	r4, [pc, #184]	; (801df58 <floor+0xf8>)
 801de9e:	2500      	movs	r5, #0
 801dea0:	4623      	mov	r3, r4
 801dea2:	462f      	mov	r7, r5
 801dea4:	e025      	b.n	801def2 <floor+0x92>
 801dea6:	4a2d      	ldr	r2, [pc, #180]	; (801df5c <floor+0xfc>)
 801dea8:	fa42 f806 	asr.w	r8, r2, r6
 801deac:	ea01 0208 	and.w	r2, r1, r8
 801deb0:	4302      	orrs	r2, r0
 801deb2:	d01e      	beq.n	801def2 <floor+0x92>
 801deb4:	a326      	add	r3, pc, #152	; (adr r3, 801df50 <floor+0xf0>)
 801deb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801deba:	f7e2 f96b 	bl	8000194 <__adddf3>
 801debe:	2200      	movs	r2, #0
 801dec0:	2300      	movs	r3, #0
 801dec2:	f7e2 fdad 	bl	8000a20 <__aeabi_dcmpgt>
 801dec6:	2800      	cmp	r0, #0
 801dec8:	d0ea      	beq.n	801dea0 <floor+0x40>
 801deca:	2c00      	cmp	r4, #0
 801decc:	bfbe      	ittt	lt
 801dece:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ded2:	4133      	asrlt	r3, r6
 801ded4:	18e4      	addlt	r4, r4, r3
 801ded6:	ea24 0408 	bic.w	r4, r4, r8
 801deda:	2500      	movs	r5, #0
 801dedc:	e7e0      	b.n	801dea0 <floor+0x40>
 801dede:	2e33      	cmp	r6, #51	; 0x33
 801dee0:	dd0b      	ble.n	801defa <floor+0x9a>
 801dee2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801dee6:	d104      	bne.n	801def2 <floor+0x92>
 801dee8:	4602      	mov	r2, r0
 801deea:	f7e2 f953 	bl	8000194 <__adddf3>
 801deee:	4607      	mov	r7, r0
 801def0:	460b      	mov	r3, r1
 801def2:	4638      	mov	r0, r7
 801def4:	4619      	mov	r1, r3
 801def6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801defa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801defe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801df02:	fa28 f802 	lsr.w	r8, r8, r2
 801df06:	ea10 0f08 	tst.w	r0, r8
 801df0a:	d0f2      	beq.n	801def2 <floor+0x92>
 801df0c:	a310      	add	r3, pc, #64	; (adr r3, 801df50 <floor+0xf0>)
 801df0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df12:	f7e2 f93f 	bl	8000194 <__adddf3>
 801df16:	2200      	movs	r2, #0
 801df18:	2300      	movs	r3, #0
 801df1a:	f7e2 fd81 	bl	8000a20 <__aeabi_dcmpgt>
 801df1e:	2800      	cmp	r0, #0
 801df20:	d0be      	beq.n	801dea0 <floor+0x40>
 801df22:	2c00      	cmp	r4, #0
 801df24:	da0a      	bge.n	801df3c <floor+0xdc>
 801df26:	2e14      	cmp	r6, #20
 801df28:	d101      	bne.n	801df2e <floor+0xce>
 801df2a:	3401      	adds	r4, #1
 801df2c:	e006      	b.n	801df3c <floor+0xdc>
 801df2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801df32:	2301      	movs	r3, #1
 801df34:	40b3      	lsls	r3, r6
 801df36:	441d      	add	r5, r3
 801df38:	42af      	cmp	r7, r5
 801df3a:	d8f6      	bhi.n	801df2a <floor+0xca>
 801df3c:	ea25 0508 	bic.w	r5, r5, r8
 801df40:	e7ae      	b.n	801dea0 <floor+0x40>
 801df42:	2500      	movs	r5, #0
 801df44:	462c      	mov	r4, r5
 801df46:	e7ab      	b.n	801dea0 <floor+0x40>
 801df48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801df4c:	e7a8      	b.n	801dea0 <floor+0x40>
 801df4e:	bf00      	nop
 801df50:	8800759c 	.word	0x8800759c
 801df54:	7e37e43c 	.word	0x7e37e43c
 801df58:	bff00000 	.word	0xbff00000
 801df5c:	000fffff 	.word	0x000fffff

0801df60 <memset>:
 801df60:	4402      	add	r2, r0
 801df62:	4603      	mov	r3, r0
 801df64:	4293      	cmp	r3, r2
 801df66:	d100      	bne.n	801df6a <memset+0xa>
 801df68:	4770      	bx	lr
 801df6a:	f803 1b01 	strb.w	r1, [r3], #1
 801df6e:	e7f9      	b.n	801df64 <memset+0x4>

0801df70 <__libc_init_array>:
 801df70:	b570      	push	{r4, r5, r6, lr}
 801df72:	4d0d      	ldr	r5, [pc, #52]	; (801dfa8 <__libc_init_array+0x38>)
 801df74:	4c0d      	ldr	r4, [pc, #52]	; (801dfac <__libc_init_array+0x3c>)
 801df76:	1b64      	subs	r4, r4, r5
 801df78:	10a4      	asrs	r4, r4, #2
 801df7a:	2600      	movs	r6, #0
 801df7c:	42a6      	cmp	r6, r4
 801df7e:	d109      	bne.n	801df94 <__libc_init_array+0x24>
 801df80:	4d0b      	ldr	r5, [pc, #44]	; (801dfb0 <__libc_init_array+0x40>)
 801df82:	4c0c      	ldr	r4, [pc, #48]	; (801dfb4 <__libc_init_array+0x44>)
 801df84:	f000 f818 	bl	801dfb8 <_init>
 801df88:	1b64      	subs	r4, r4, r5
 801df8a:	10a4      	asrs	r4, r4, #2
 801df8c:	2600      	movs	r6, #0
 801df8e:	42a6      	cmp	r6, r4
 801df90:	d105      	bne.n	801df9e <__libc_init_array+0x2e>
 801df92:	bd70      	pop	{r4, r5, r6, pc}
 801df94:	f855 3b04 	ldr.w	r3, [r5], #4
 801df98:	4798      	blx	r3
 801df9a:	3601      	adds	r6, #1
 801df9c:	e7ee      	b.n	801df7c <__libc_init_array+0xc>
 801df9e:	f855 3b04 	ldr.w	r3, [r5], #4
 801dfa2:	4798      	blx	r3
 801dfa4:	3601      	adds	r6, #1
 801dfa6:	e7f2      	b.n	801df8e <__libc_init_array+0x1e>
 801dfa8:	0801f074 	.word	0x0801f074
 801dfac:	0801f074 	.word	0x0801f074
 801dfb0:	0801f074 	.word	0x0801f074
 801dfb4:	0801f078 	.word	0x0801f078

0801dfb8 <_init>:
 801dfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfba:	bf00      	nop
 801dfbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfbe:	bc08      	pop	{r3}
 801dfc0:	469e      	mov	lr, r3
 801dfc2:	4770      	bx	lr

0801dfc4 <_fini>:
 801dfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfc6:	bf00      	nop
 801dfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfca:	bc08      	pop	{r3}
 801dfcc:	469e      	mov	lr, r3
 801dfce:	4770      	bx	lr
